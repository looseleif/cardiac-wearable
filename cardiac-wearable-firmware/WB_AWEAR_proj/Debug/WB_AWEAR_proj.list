
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800abc8  0800abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800abcc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800ac50  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800b4d3  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800b508  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003dc  2000095c  0800b519  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d38  0800b519  00020d38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   000305e3  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e6e  00000000  00000000  00050f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029f8  00000000  00000000  00056de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002750  00000000  00000000  000597d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d16a  00000000  00000000  0005bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ee43  00000000  00000000  00089092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa78c  00000000  00000000  000b7ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b2661  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b774  00000000  00000000  001b26b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a800 	.word	0x0800a800

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800a800 	.word	0x0800a800

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:
******************************************************************************/

#include "BH1790GLC.h"

uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->measurements[0] = 0.0f;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
	dev->measurements[1] = 0.0f;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	dev->measurements[2] = 0.0f;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
	dev->measurement = 0.0f;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

	/* Keep count of errors */
	uint8_t errNum = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	uint8_t regData;

	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000568:	f107 0315 	add.w	r3, r7, #21
 800056c:	461a      	mov	r2, r3
 800056e:	210f      	movs	r1, #15
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f8ac 	bl	80006ce <read>
 8000576:	4603      	mov	r3, r0
 8000578:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 800057a:	7dbb      	ldrb	r3, [r7, #22]
 800057c:	2b00      	cmp	r3, #0
 800057e:	bf14      	ite	ne
 8000580:	2301      	movne	r3, #1
 8000582:	2300      	moveq	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	4413      	add	r3, r2
 800058c:	75fb      	strb	r3, [r7, #23]
	if(regData != BH1790GLC_MID_VAL){ return ERR_MID_VAL; }
 800058e:	7d7b      	ldrb	r3, [r7, #21]
 8000590:	2be0      	cmp	r3, #224	; 0xe0
 8000592:	d001      	beq.n	8000598 <BH1790GLC_init+0x64>
 8000594:	230a      	movs	r3, #10
 8000596:	e074      	b.n	8000682 <BH1790GLC_init+0x14e>

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000598:	f107 0315 	add.w	r3, r7, #21
 800059c:	461a      	mov	r2, r3
 800059e:	2110      	movs	r1, #16
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f894 	bl	80006ce <read>
 80005a6:	4603      	mov	r3, r0
 80005a8:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 80005aa:	7dbb      	ldrb	r3, [r7, #22]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	bf14      	ite	ne
 80005b0:	2301      	movne	r3, #1
 80005b2:	2300      	moveq	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	7dfb      	ldrb	r3, [r7, #23]
 80005ba:	4413      	add	r3, r2
 80005bc:	75fb      	strb	r3, [r7, #23]
	if(regData != BH1790GLC_PID_VAL){ return ERR_PID_VAL; }
 80005be:	7d7b      	ldrb	r3, [r7, #21]
 80005c0:	2b0d      	cmp	r3, #13
 80005c2:	d001      	beq.n	80005c8 <BH1790GLC_init+0x94>
 80005c4:	230b      	movs	r3, #11
 80005c6:	e05c      	b.n	8000682 <BH1790GLC_init+0x14e>

	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 80005c8:	2382      	movs	r3, #130	; 0x82
 80005ca:	743b      	strb	r3, [r7, #16]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005cc:	230c      	movs	r3, #12
 80005ce:	747b      	strb	r3, [r7, #17]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005d0:	2301      	movs	r3, #1
 80005d2:	74bb      	strb	r3, [r7, #18]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	461a      	mov	r2, r3
 80005da:	2141      	movs	r1, #65	; 0x41
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f854 	bl	800068a <write>
 80005e2:	4603      	mov	r3, r0
 80005e4:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 80005e6:	7dbb      	ldrb	r3, [r7, #22]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	4413      	add	r3, r2
 80005f8:	75fb      	strb	r3, [r7, #23]

	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	3301      	adds	r3, #1
 8000600:	461a      	mov	r2, r3
 8000602:	2142      	movs	r1, #66	; 0x42
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f840 	bl	800068a <write>
 800060a:	4603      	mov	r3, r0
 800060c:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 800060e:	7dbb      	ldrb	r3, [r7, #22]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	7dfb      	ldrb	r3, [r7, #23]
 800061e:	4413      	add	r3, r2
 8000620:	75fb      	strb	r3, [r7, #23]

	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	3302      	adds	r3, #2
 8000628:	461a      	mov	r2, r3
 800062a:	2143      	movs	r1, #67	; 0x43
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f82c 	bl	800068a <write>
 8000632:	4603      	mov	r3, r0
 8000634:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000636:	7dbb      	ldrb	r3, [r7, #22]
 8000638:	2b00      	cmp	r3, #0
 800063a:	bf14      	ite	ne
 800063c:	2301      	movne	r3, #1
 800063e:	2300      	moveq	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	4413      	add	r3, r2
 8000648:	75fb      	strb	r3, [r7, #23]

	uint8_t writeCheck[3];
	status = many_reads(dev, BH1790GLC_MEAS_CONTROL1, writeCheck, 3);	//error check config
 800064a:	f107 020c 	add.w	r2, r7, #12
 800064e:	2303      	movs	r3, #3
 8000650:	2141      	movs	r1, #65	; 0x41
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f85d 	bl	8000712 <many_reads>
 8000658:	4603      	mov	r3, r0
 800065a:	75bb      	strb	r3, [r7, #22]
	if(writeCheck[0] != configData[0]){ return ERR_MEAS_CONTROL1; }
 800065c:	7b3a      	ldrb	r2, [r7, #12]
 800065e:	7c3b      	ldrb	r3, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d001      	beq.n	8000668 <BH1790GLC_init+0x134>
 8000664:	2314      	movs	r3, #20
 8000666:	e00c      	b.n	8000682 <BH1790GLC_init+0x14e>
	if(writeCheck[1] != configData[1]){ return ERR_MEAS_CONTROL2; }
 8000668:	7b7a      	ldrb	r2, [r7, #13]
 800066a:	7c7b      	ldrb	r3, [r7, #17]
 800066c:	429a      	cmp	r2, r3
 800066e:	d001      	beq.n	8000674 <BH1790GLC_init+0x140>
 8000670:	2315      	movs	r3, #21
 8000672:	e006      	b.n	8000682 <BH1790GLC_init+0x14e>
	if(writeCheck[2] != configData[2]){ return ERR_MEAS_START; }
 8000674:	7bba      	ldrb	r2, [r7, #14]
 8000676:	7cbb      	ldrb	r3, [r7, #18]
 8000678:	429a      	cmp	r2, r3
 800067a:	d001      	beq.n	8000680 <BH1790GLC_init+0x14c>
 800067c:	2316      	movs	r3, #22
 800067e:	e000      	b.n	8000682 <BH1790GLC_init+0x14e>

	return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <write>:
/*
 * reg : which register in the sensor to write to
 * data : data to write (consider not having this be a pointer?
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b08a      	sub	sp, #40	; 0x28
 800068e:	af04      	add	r7, sp, #16
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	460b      	mov	r3, r1
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	7afb      	ldrb	r3, [r7, #11]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	2301      	movs	r3, #1
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	21b6      	movs	r1, #182	; 0xb6
 80006b2:	f002 fb5f 	bl	8002d74 <HAL_I2C_Mem_Write>
 80006b6:	4603      	mov	r3, r0
 80006b8:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){ return ret; }	//error check
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <write+0x3a>
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
 80006c2:	e000      	b.n	80006c6 <write+0x3c>

	return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <read>:
/*
 * reg : which register in the sensor to read from
 * data : data to write (consider not having this be a pointer?
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b08a      	sub	sp, #40	; 0x28
 80006d2:	af04      	add	r7, sp, #16
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	460b      	mov	r3, r1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	7afb      	ldrb	r3, [r7, #11]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2301      	movs	r3, #1
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2301      	movs	r3, #1
 80006f4:	21b6      	movs	r1, #182	; 0xb6
 80006f6:	f002 fc51 	bl	8002f9c <HAL_I2C_Mem_Read>
 80006fa:	4603      	mov	r3, r0
 80006fc:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){ return ret; }	//error check
 80006fe:	7dfb      	ldrb	r3, [r7, #23]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <read+0x3a>
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	e000      	b.n	800070a <read+0x3c>


	return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <many_reads>:
 * reg : which register in the sensor to read from
 * data : data to write (consider not having this be a pointer?
 * length : # of bytes to read
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b08a      	sub	sp, #40	; 0x28
 8000716:	af04      	add	r7, sp, #16
 8000718:	60f8      	str	r0, [r7, #12]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	461a      	mov	r2, r3
 800071e:	460b      	mov	r3, r1
 8000720:	72fb      	strb	r3, [r7, #11]
 8000722:	4613      	mov	r3, r2
 8000724:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	b29a      	uxth	r2, r3
 800072e:	7abb      	ldrb	r3, [r7, #10]
 8000730:	b29b      	uxth	r3, r3
 8000732:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000736:	9102      	str	r1, [sp, #8]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2301      	movs	r3, #1
 8000740:	21b6      	movs	r1, #182	; 0xb6
 8000742:	f002 fc2b 	bl	8002f9c <HAL_I2C_Mem_Read>
 8000746:	4603      	mov	r3, r0
 8000748:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){ return ret; }	//error check
 800074a:	7dfb      	ldrb	r3, [r7, #23]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <many_reads+0x42>
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	e000      	b.n	8000756 <many_reads+0x44>

	return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <APPD_EnableCPU2+0x34>)
 8000768:	1d3c      	adds	r4, r7, #4
 800076a:	461d      	mov	r5, r3
 800076c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000770:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000774:	c403      	stmia	r4!, {r0, r1}
 8000776:	8022      	strh	r2, [r4, #0]
 8000778:	3402      	adds	r4, #2
 800077a:	0c13      	lsrs	r3, r2, #16
 800077c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800077e:	f007 fe6b 	bl	8008458 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f007 f906 	bl	8007996 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800078a:	bf00      	nop
}
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bdb0      	pop	{r4, r5, r7, pc}
 8000792:	bf00      	nop
 8000794:	0800a818 	.word	0x0800a818

08000798 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a6:	f023 0207 	bic.w	r2, r3, #7
 80007aa:	4905      	ldr	r1, [pc, #20]	; (80007c0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	58000400 	.word	0x58000400

080007c4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007d2:	4905      	ldr	r1, [pc, #20]	; (80007e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	58000800 	.word	0x58000800

080007ec <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000806:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	4313      	orrs	r3, r2
 8000814:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	cafecafe 	.word	0xcafecafe

08000828 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800083a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4313      	orrs	r3, r2
 8000842:	608b      	str	r3, [r1, #8]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800085c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800087e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008a8:	d101      	bne.n	80008ae <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008ce:	d101      	bne.n	80008d4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000904:	68fb      	ldr	r3, [r7, #12]
}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <LL_DBGMCU_GetDeviceID+0x18>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e0042000 	.word	0xe0042000

08000930 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <LL_DBGMCU_GetRevisionID+0x18>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	0c1b      	lsrs	r3, r3, #16
 800093a:	b29b      	uxth	r3, r3
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e0042000 	.word	0xe0042000

0800094c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	041b      	lsls	r3, r3, #16
 800095e:	431a      	orrs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	605a      	str	r2, [r3, #4]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	605a      	str	r2, [r3, #4]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	041b      	lsls	r3, r3, #16
 80009a4:	431a      	orrs	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	615a      	str	r2, [r3, #20]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	431a      	orrs	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	615a      	str	r2, [r3, #20]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	609a      	str	r2, [r3, #8]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	619a      	str	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <LL_LPM_EnableSleep+0x1c>)
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <LL_LPM_EnableSleep+0x1c>)
 8000a1a:	f023 0304 	bic.w	r3, r3, #4
 8000a1e:	6113      	str	r3, [r2, #16]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	22ff      	movs	r2, #255	; 0xff
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	22ca      	movs	r2, #202	; 0xca
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2253      	movs	r2, #83	; 0x53
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f023 0207 	bic.w	r2, r3, #7
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <MX_APPE_Config+0x18>)
 8000a96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a9a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a9c:	f000 f824 	bl	8000ae8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000aa0:	f000 f864 	bl	8000b6c <Config_HSE>

  return;
 8000aa4:	bf00      	nop
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	58004000 	.word	0x58004000

08000aac <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ab0:	f000 f870 	bl	8000b94 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ab4:	f000 f888 	bl	8000bc8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ab8:	4903      	ldr	r1, [pc, #12]	; (8000ac8 <MX_APPE_Init+0x1c>)
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 fdd4 	bl	8001668 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ac0:	f000 f890 	bl	8000be4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000ac4:	bf00      	nop
}
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000aa8 	.word	0x20000aa8

08000acc <Init_Smps>:

void Init_Smps(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000ad0:	bf00      	nop
}
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <Init_Exti>:

void Init_Exti(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ade:	2050      	movs	r0, #80	; 0x50
 8000ae0:	f7ff fe70 	bl	80007c4 <LL_EXTI_EnableIT_32_63>

  return;
 8000ae4:	bf00      	nop
}
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000aec:	f000 f804 	bl	8000af8 <Reset_BackupDomain>

  Reset_IPCC();
 8000af0:	f000 f81a 	bl	8000b28 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000af4:	bf00      	nop
}
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000afc:	f7ff feca 	bl	8000894 <LL_RCC_IsActiveFlag_PINRST>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00d      	beq.n	8000b22 <Reset_BackupDomain+0x2a>
 8000b06:	f7ff fed8 	bl	80008ba <LL_RCC_IsActiveFlag_SFTRST>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d108      	bne.n	8000b22 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b10:	f002 ff4e 	bl	80039b0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b14:	f002 ff4c 	bl	80039b0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b18:	f7ff fe9a 	bl	8000850 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b1c:	f7ff fea9 	bl	8000872 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
}
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b2c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b30:	f7ff fed6 	bl	80008e0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b34:	213f      	movs	r1, #63	; 0x3f
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <Reset_IPCC+0x40>)
 8000b38:	f7ff ff4e 	bl	80009d8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	480a      	ldr	r0, [pc, #40]	; (8000b68 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff58 	bl	80009f4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <Reset_IPCC+0x40>)
 8000b48:	f7ff ff00 	bl	800094c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b4c:	213f      	movs	r1, #63	; 0x3f
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <Reset_IPCC+0x40>)
 8000b50:	f7ff ff1f 	bl	8000992 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b54:	213f      	movs	r1, #63	; 0x3f
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <Reset_IPCC+0x40>)
 8000b58:	f7ff ff0a 	bl	8000970 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b5c:	213f      	movs	r1, #63	; 0x3f
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <Reset_IPCC+0x40>)
 8000b60:	f7ff ff29 	bl	80009b6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b64:	bf00      	nop
}
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	58000c00 	.word	0x58000c00

08000b6c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f007 fcfc 	bl	8008570 <OTP_Read>
 8000b78:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	799b      	ldrb	r3, [r3, #6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fe31 	bl	80007ec <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
}
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <System_Init>:

static void System_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b98:	f7ff ff98 	bl	8000acc <Init_Smps>

  Init_Exti();
 8000b9c:	f7ff ff9d 	bl	8000ada <Init_Exti>

  Init_Rtc();
 8000ba0:	f000 f802 	bl	8000ba8 <Init_Rtc>

  return;
 8000ba4:	bf00      	nop
}
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <Init_Rtc+0x1c>)
 8000bae:	f7ff ff4c 	bl	8000a4a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <Init_Rtc+0x1c>)
 8000bb6:	f7ff ff58 	bl	8000a6a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <Init_Rtc+0x1c>)
 8000bbc:	f7ff ff38 	bl	8000a30 <LL_RTC_EnableWriteProtection>

  return;
 8000bc0:	bf00      	nop
}
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bd0:	f7ff fe2a 	bl	8000828 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bd4:	f008 fbc6 	bl	8009364 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f7ff fddd 	bl	8000798 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bde:	bf00      	nop
}
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bea:	f007 fa7f 	bl	80080ec <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <appe_Tl_Init+0x50>)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f008 fcf4 	bl	80095e0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <appe_Tl_Init+0x54>)
 8000bfa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <appe_Tl_Init+0x58>)
 8000bfe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	480e      	ldr	r0, [pc, #56]	; (8000c40 <appe_Tl_Init+0x5c>)
 8000c06:	f007 f937 	bl	8007e78 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <appe_Tl_Init+0x60>)
 8000c0c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <appe_Tl_Init+0x64>)
 8000c10:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <appe_Tl_Init+0x68>)
 8000c14:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c16:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c1a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 fba5 	bl	8008370 <TL_MM_Init>

  TL_Enable();
 8000c26:	f007 fa5b 	bl	80080e0 <TL_Enable>

  return;
 8000c2a:	bf00      	nop
}
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	08007eb1 	.word	0x08007eb1
 8000c38:	200005dc 	.word	0x200005dc
 8000c3c:	08000c51 	.word	0x08000c51
 8000c40:	08000c69 	.word	0x08000c69
 8000c44:	200007f4 	.word	0x200007f4
 8000c48:	200006e8 	.word	0x200006e8
 8000c4c:	200000a0 	.word	0x200000a0

08000c50 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c5a:	bf00      	nop
}
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	330b      	adds	r3, #11
 8000c76:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c82:	2b07      	cmp	r3, #7
 8000c84:	d81f      	bhi.n	8000cc6 <APPE_SysUserEvtRx+0x5e>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <APPE_SysUserEvtRx+0x24>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000cad 	.word	0x08000cad
 8000c90:	08000cbf 	.word	0x08000cbf
 8000c94:	08000cc7 	.word	0x08000cc7
 8000c98:	08000cc7 	.word	0x08000cc7
 8000c9c:	08000cc7 	.word	0x08000cc7
 8000ca0:	08000cc7 	.word	0x08000cc7
 8000ca4:	08000cc7 	.word	0x08000cc7
 8000ca8:	08000cc7 	.word	0x08000cc7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f006 fe9d 	bl	80079f0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f81b 	bl	8000cf2 <APPE_SysEvtReadyProcessing>
    break;
 8000cbc:	e004      	b.n	8000cc8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f806 	bl	8000cd0 <APPE_SysEvtError>
    break;
 8000cc4:	e000      	b.n	8000cc8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000cc6:	bf00      	nop
  }

  return;
 8000cc8:	bf00      	nop
}
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	330b      	adds	r3, #11
 8000cde:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000ce6:	bf00      	nop
}
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b08a      	sub	sp, #40	; 0x28
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	330b      	adds	r3, #11
 8000d16:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d11d      	bne.n	8000d62 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000d26:	f7ff fd1b 	bl	8000760 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d2e:	237f      	movs	r3, #127	; 0x7f
 8000d30:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d32:	f7ff fdfd 	bl	8000930 <LL_DBGMCU_GetRevisionID>
 8000d36:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d3e:	f7ff fde9 	bl	8000914 <LL_DBGMCU_GetDeviceID>
 8000d42:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 fe38 	bl	80079c4 <SHCI_C2_Config>

    APP_BLE_Init();
 8000d54:	f007 fd16 	bl	8008784 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f008 fb14 	bl	8009388 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000d60:	e007      	b.n	8000d72 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d103      	bne.n	8000d72 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  return;
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
}
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d82:	f001 fbfd 	bl	8002580 <HAL_GetTick>
 8000d86:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d92:	d00a      	beq.n	8000daa <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000d94:	f001 fc0c 	bl	80025b0 <HAL_GetTickFreq>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	e002      	b.n	8000daa <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000da4:	f7ff fe34 	bl	8000a10 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000da8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	f001 fbe9 	bl	8002580 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d8f4      	bhi.n	8000da4 <HAL_Delay+0x2a>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dcc:	f008 fb0c 	bl	80093e8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000dd8:	bf00      	nop
}
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f008 fafa 	bl	80093e8 <UTIL_SEQ_Run>

  return;
 8000df4:	bf00      	nop
}
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	2004      	movs	r0, #4
 8000e08:	f008 fc0c 	bl	8009624 <UTIL_SEQ_SetTask>
  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f008 fc6d 	bl	80096fc <UTIL_SEQ_SetEvt>
  return;
 8000e22:	bf00      	nop
}
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f008 fc82 	bl	800973c <UTIL_SEQ_WaitEvt>
  return;
 8000e38:	bf00      	nop
}
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <LL_EXTI_EnableIT_0_31>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e4e:	4905      	ldr	r1, [pc, #20]	; (8000e64 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	58000800 	.word	0x58000800

08000e68 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4904      	ldr	r1, [pc, #16]	; (8000e88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	58000800 	.word	0x58000800

08000e8c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <ReadRtcSsrValue+0x3c>)
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <ReadRtcSsrValue+0x3c>)
 8000e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000ea2:	e005      	b.n	8000eb0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <ReadRtcSsrValue+0x3c>)
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d1f5      	bne.n	8000ea4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000eb8:	683b      	ldr	r3, [r7, #0]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40002800 	.word	0x40002800

08000ecc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	491d      	ldr	r1, [pc, #116]	; (8000f54 <LinkTimerAfter+0x88>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3315      	adds	r3, #21
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d009      	beq.n	8000f0a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	4916      	ldr	r1, [pc, #88]	; (8000f54 <LinkTimerAfter+0x88>)
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	3314      	adds	r3, #20
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000f0a:	79fa      	ldrb	r2, [r7, #7]
 8000f0c:	4911      	ldr	r1, [pc, #68]	; (8000f54 <LinkTimerAfter+0x88>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	3315      	adds	r3, #21
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <LinkTimerAfter+0x88>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3314      	adds	r3, #20
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
 8000f30:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f32:	79ba      	ldrb	r2, [r7, #6]
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <LinkTimerAfter+0x88>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3315      	adds	r3, #21
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	701a      	strb	r2, [r3, #0]

  return;
 8000f46:	bf00      	nop
}
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000978 	.word	0x20000978

08000f58 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <LinkTimerBefore+0xb8>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	79ba      	ldrb	r2, [r7, #6]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d032      	beq.n	8000fda <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f74:	79ba      	ldrb	r2, [r7, #6]
 8000f76:	4927      	ldr	r1, [pc, #156]	; (8001014 <LinkTimerBefore+0xbc>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3314      	adds	r3, #20
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	4922      	ldr	r1, [pc, #136]	; (8001014 <LinkTimerBefore+0xbc>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	3315      	adds	r3, #21
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	491d      	ldr	r1, [pc, #116]	; (8001014 <LinkTimerBefore+0xbc>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3315      	adds	r3, #21
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000fb0:	79fa      	ldrb	r2, [r7, #7]
 8000fb2:	4918      	ldr	r1, [pc, #96]	; (8001014 <LinkTimerBefore+0xbc>)
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3314      	adds	r3, #20
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fc4:	79ba      	ldrb	r2, [r7, #6]
 8000fc6:	4913      	ldr	r1, [pc, #76]	; (8001014 <LinkTimerBefore+0xbc>)
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3314      	adds	r3, #20
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000fd8:	e014      	b.n	8001004 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	490d      	ldr	r1, [pc, #52]	; (8001014 <LinkTimerBefore+0xbc>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3315      	adds	r3, #21
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fee:	79ba      	ldrb	r2, [r7, #6]
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LinkTimerBefore+0xbc>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3314      	adds	r3, #20
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	701a      	strb	r2, [r3, #0]
  return;
 8001002:	bf00      	nop
}
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000a08 	.word	0x20000a08
 8001014:	20000978 	.word	0x20000978

08001018 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001022:	4b4e      	ldr	r3, [pc, #312]	; (800115c <linkTimer+0x144>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b06      	cmp	r3, #6
 800102a:	d118      	bne.n	800105e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800102c:	4b4b      	ldr	r3, [pc, #300]	; (800115c <linkTimer+0x144>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <linkTimer+0x148>)
 8001034:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001036:	4a49      	ldr	r2, [pc, #292]	; (800115c <linkTimer+0x144>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	4949      	ldr	r1, [pc, #292]	; (8001164 <linkTimer+0x14c>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	3315      	adds	r3, #21
 800104c:	2206      	movs	r2, #6
 800104e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001050:	4b45      	ldr	r3, [pc, #276]	; (8001168 <linkTimer+0x150>)
 8001052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001056:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	81fb      	strh	r3, [r7, #14]
 800105c:	e078      	b.n	8001150 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800105e:	f000 f909 	bl	8001274 <ReturnTimeElapsed>
 8001062:	4603      	mov	r3, r0
 8001064:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	493e      	ldr	r1, [pc, #248]	; (8001164 <linkTimer+0x14c>)
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3308      	adds	r3, #8
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	79fa      	ldrb	r2, [r7, #7]
 800107c:	4419      	add	r1, r3
 800107e:	4839      	ldr	r0, [pc, #228]	; (8001164 <linkTimer+0x14c>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4403      	add	r3, r0
 800108a:	3308      	adds	r3, #8
 800108c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	4934      	ldr	r1, [pc, #208]	; (8001164 <linkTimer+0x14c>)
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	3308      	adds	r3, #8
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <linkTimer+0x144>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <linkTimer+0x14c>)
 80010ac:	460b      	mov	r3, r1
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	440b      	add	r3, r1
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	3308      	adds	r3, #8
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d337      	bcc.n	8001130 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <linkTimer+0x144>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80010c6:	7b7a      	ldrb	r2, [r7, #13]
 80010c8:	4926      	ldr	r1, [pc, #152]	; (8001164 <linkTimer+0x14c>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	440b      	add	r3, r1
 80010d4:	3315      	adds	r3, #21
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010da:	e013      	b.n	8001104 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80010dc:	7b7a      	ldrb	r2, [r7, #13]
 80010de:	4921      	ldr	r1, [pc, #132]	; (8001164 <linkTimer+0x14c>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3315      	adds	r3, #21
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010f0:	7b7a      	ldrb	r2, [r7, #13]
 80010f2:	491c      	ldr	r1, [pc, #112]	; (8001164 <linkTimer+0x14c>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3315      	adds	r3, #21
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	2b06      	cmp	r3, #6
 8001108:	d00b      	beq.n	8001122 <linkTimer+0x10a>
 800110a:	7b3a      	ldrb	r2, [r7, #12]
 800110c:	4915      	ldr	r1, [pc, #84]	; (8001164 <linkTimer+0x14c>)
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	3308      	adds	r3, #8
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	d2dc      	bcs.n	80010dc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001122:	7b7a      	ldrb	r2, [r7, #13]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fecf 	bl	8000ecc <LinkTimerAfter>
 800112e:	e00f      	b.n	8001150 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <linkTimer+0x144>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff0c 	bl	8000f58 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <linkTimer+0x144>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <linkTimer+0x148>)
 8001148:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <linkTimer+0x144>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001150:	89fb      	ldrh	r3, [r7, #14]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000a08 	.word	0x20000a08
 8001160:	20000a09 	.word	0x20000a09
 8001164:	20000978 	.word	0x20000978
 8001168:	20000a0c 	.word	0x20000a0c

0800116c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800117c:	4b39      	ldr	r3, [pc, #228]	; (8001264 <UnlinkTimer+0xf8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	429a      	cmp	r2, r3
 8001186:	d111      	bne.n	80011ac <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <UnlinkTimer+0xf8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <UnlinkTimer+0xfc>)
 8001190:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001192:	79fa      	ldrb	r2, [r7, #7]
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <UnlinkTimer+0x100>)
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	3315      	adds	r3, #21
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <UnlinkTimer+0xf8>)
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e03e      	b.n	800122a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	492f      	ldr	r1, [pc, #188]	; (800126c <UnlinkTimer+0x100>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	3314      	adds	r3, #20
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	492a      	ldr	r1, [pc, #168]	; (800126c <UnlinkTimer+0x100>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3315      	adds	r3, #21
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011d4:	79f9      	ldrb	r1, [r7, #7]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	4824      	ldr	r0, [pc, #144]	; (800126c <UnlinkTimer+0x100>)
 80011da:	460b      	mov	r3, r1
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	440b      	add	r3, r1
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4403      	add	r3, r0
 80011e4:	3315      	adds	r3, #21
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	4920      	ldr	r1, [pc, #128]	; (800126c <UnlinkTimer+0x100>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	3315      	adds	r3, #21
 80011f8:	4602      	mov	r2, r0
 80011fa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d013      	beq.n	800122a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001202:	79f9      	ldrb	r1, [r7, #7]
 8001204:	7bba      	ldrb	r2, [r7, #14]
 8001206:	4819      	ldr	r0, [pc, #100]	; (800126c <UnlinkTimer+0x100>)
 8001208:	460b      	mov	r3, r1
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	440b      	add	r3, r1
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4403      	add	r3, r0
 8001212:	3314      	adds	r3, #20
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2d8      	uxtb	r0, r3
 8001218:	4914      	ldr	r1, [pc, #80]	; (800126c <UnlinkTimer+0x100>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	440b      	add	r3, r1
 8001224:	3314      	adds	r3, #20
 8001226:	4602      	mov	r2, r0
 8001228:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	490f      	ldr	r1, [pc, #60]	; (800126c <UnlinkTimer+0x100>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	330c      	adds	r3, #12
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <UnlinkTimer+0xf8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b06      	cmp	r3, #6
 8001246:	d107      	bne.n	8001258 <UnlinkTimer+0xec>
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <UnlinkTimer+0x104>)
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001254:	601a      	str	r2, [r3, #0]
  }

  return;
 8001256:	bf00      	nop
 8001258:	bf00      	nop
}
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000a08 	.word	0x20000a08
 8001268:	20000a09 	.word	0x20000a09
 800126c:	20000978 	.word	0x20000978
 8001270:	20000a0c 	.word	0x20000a0c

08001274 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <ReturnTimeElapsed+0x70>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001282:	d026      	beq.n	80012d2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001284:	f7ff fe02 	bl	8000e8c <ReadRtcSsrValue>
 8001288:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <ReturnTimeElapsed+0x70>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d805      	bhi.n	80012a0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <ReturnTimeElapsed+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e00a      	b.n	80012b6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <ReturnTimeElapsed+0x74>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <ReturnTimeElapsed+0x70>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <ReturnTimeElapsed+0x78>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <ReturnTimeElapsed+0x7c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	40d3      	lsrs	r3, r2
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	e001      	b.n	80012d6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	b29b      	uxth	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000a0c 	.word	0x20000a0c
 80012e8:	20000a14 	.word	0x20000a14
 80012ec:	20000a12 	.word	0x20000a12
 80012f0:	20000a11 	.word	0x20000a11

080012f4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d108      	bne.n	8001316 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001304:	f7ff fdc2 	bl	8000e8c <ReadRtcSsrValue>
 8001308:	4603      	mov	r3, r0
 800130a:	4a21      	ldr	r2, [pc, #132]	; (8001390 <RestartWakeupCounter+0x9c>)
 800130c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800130e:	2003      	movs	r0, #3
 8001310:	f001 fad7 	bl	80028c2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001314:	e039      	b.n	800138a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d803      	bhi.n	8001324 <RestartWakeupCounter+0x30>
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <RestartWakeupCounter+0xa0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	3b01      	subs	r3, #1
 8001328:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800132a:	bf00      	nop
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <RestartWakeupCounter+0xa4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f8      	beq.n	800132c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <RestartWakeupCounter+0xa4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <RestartWakeupCounter+0xa4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800134a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <RestartWakeupCounter+0xa8>)
 800134e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001352:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001354:	2003      	movs	r0, #3
 8001356:	f001 fac2 	bl	80028de <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <RestartWakeupCounter+0xac>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	88fa      	ldrh	r2, [r7, #6]
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <RestartWakeupCounter+0xac>)
 8001366:	4313      	orrs	r3, r2
 8001368:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800136a:	f7ff fd8f 	bl	8000e8c <ReadRtcSsrValue>
 800136e:	4603      	mov	r3, r0
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <RestartWakeupCounter+0x9c>)
 8001372:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <RestartWakeupCounter+0xa4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <RestartWakeupCounter+0xa4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001382:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001384:	f3af 8000 	nop.w
  return ;
 8001388:	bf00      	nop
}
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000a0c 	.word	0x20000a0c
 8001394:	20000a11 	.word	0x20000a11
 8001398:	20000aa8 	.word	0x20000aa8
 800139c:	58000800 	.word	0x58000800
 80013a0:	40002800 	.word	0x40002800

080013a4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013aa:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <RescheduleTimerList+0x11c>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b6:	d107      	bne.n	80013c8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80013b8:	bf00      	nop
 80013ba:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <RescheduleTimerList+0x120>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f8      	bne.n	80013ba <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <RescheduleTimerList+0x120>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <RescheduleTimerList+0x120>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80013d8:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <RescheduleTimerList+0x124>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	493a      	ldr	r1, [pc, #232]	; (80014cc <RescheduleTimerList+0x128>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	3308      	adds	r3, #8
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80013f2:	f7ff ff3f 	bl	8001274 <ReturnTimeElapsed>
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d205      	bcs.n	800140e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <RescheduleTimerList+0x12c>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e04d      	b.n	80014aa <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <RescheduleTimerList+0x130>)
 8001412:	8812      	ldrh	r2, [r2, #0]
 8001414:	b292      	uxth	r2, r2
 8001416:	4413      	add	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4293      	cmp	r3, r2
 800141e:	d906      	bls.n	800142e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <RescheduleTimerList+0x130>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <RescheduleTimerList+0x12c>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e03d      	b.n	80014aa <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	b29a      	uxth	r2, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <RescheduleTimerList+0x12c>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800143e:	e034      	b.n	80014aa <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	4922      	ldr	r1, [pc, #136]	; (80014cc <RescheduleTimerList+0x128>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	429a      	cmp	r2, r3
 8001456:	d20a      	bcs.n	800146e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	491c      	ldr	r1, [pc, #112]	; (80014cc <RescheduleTimerList+0x128>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	3308      	adds	r3, #8
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e013      	b.n	8001496 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	4916      	ldr	r1, [pc, #88]	; (80014cc <RescheduleTimerList+0x128>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	3308      	adds	r3, #8
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	1ac9      	subs	r1, r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	; (80014cc <RescheduleTimerList+0x128>)
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4403      	add	r3, r0
 8001492:	3308      	adds	r3, #8
 8001494:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <RescheduleTimerList+0x128>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3315      	adds	r3, #21
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d1c7      	bne.n	8001440 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80014b0:	89bb      	ldrh	r3, [r7, #12]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff1e 	bl	80012f4 <RestartWakeupCounter>

  return ;
 80014b8:	bf00      	nop
}
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40002800 	.word	0x40002800
 80014c4:	20000aa8 	.word	0x20000aa8
 80014c8:	20000a08 	.word	0x20000a08
 80014cc:	20000978 	.word	0x20000978
 80014d0:	20000a10 	.word	0x20000a10
 80014d4:	20000a16 	.word	0x20000a16

080014d8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014de:	f3ef 8310 	mrs	r3, PRIMASK
 80014e2:	617b      	str	r3, [r7, #20]
  return(result);
 80014e4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	22ca      	movs	r2, #202	; 0xca
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
 80014f4:	4b57      	ldr	r3, [pc, #348]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2253      	movs	r2, #83	; 0x53
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800150a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800150c:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001514:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001518:	4950      	ldr	r1, [pc, #320]	; (800165c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	330c      	adds	r3, #12
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d16e      	bne.n	800160c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800152e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001532:	494a      	ldr	r1, [pc, #296]	; (800165c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001542:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001546:	4945      	ldr	r1, [pc, #276]	; (800165c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	3310      	adds	r3, #16
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d04c      	beq.n	80015fc <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001562:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001566:	493d      	ldr	r1, [pc, #244]	; (800165c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	330d      	adds	r3, #13
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d124      	bne.n	80015c6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800157c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fdf2 	bl	800116c <UnlinkTimer>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f383 8810 	msr	PRIMASK, r3
}
 8001592:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001594:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001598:	4930      	ldr	r1, [pc, #192]	; (800165c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3304      	adds	r3, #4
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f9b8 	bl	8001924 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	22ca      	movs	r2, #202	; 0xca
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2253      	movs	r2, #83	; 0x53
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
 80015c4:	e012      	b.n	80015ec <HW_TS_RTC_Wakeup_Handler+0x114>
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f383 8810 	msr	PRIMASK, r3
}
 80015d0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80015d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f920 	bl	800181c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	22ca      	movs	r2, #202	; 0xca
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2253      	movs	r2, #83	; 0x53
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80015ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	4619      	mov	r1, r3
 80015f4:	69b8      	ldr	r0, [r7, #24]
 80015f6:	f000 fa1b 	bl	8001a30 <HW_TS_RTC_Int_AppNot>
 80015fa:	e022      	b.n	8001642 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80015fc:	f7ff fed2 	bl	80013a4 <RescheduleTimerList>
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f383 8810 	msr	PRIMASK, r3
}
 800160a:	e01a      	b.n	8001642 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800160c:	bf00      	nop
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f8      	beq.n	800160e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800162c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001630:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f383 8810 	msr	PRIMASK, r3
}
 8001640:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800164a:	bf00      	nop
}
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000aa8 	.word	0x20000aa8
 8001658:	20000a08 	.word	0x20000a08
 800165c:	20000978 	.word	0x20000978
 8001660:	20000a10 	.word	0x20000a10
 8001664:	58000800 	.word	0x58000800

08001668 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001674:	4b5e      	ldr	r3, [pc, #376]	; (80017f0 <HW_TS_Init+0x188>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	22ca      	movs	r2, #202	; 0xca
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
 800167c:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <HW_TS_Init+0x188>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2253      	movs	r2, #83	; 0x53
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001684:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <HW_TS_Init+0x18c>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a5a      	ldr	r2, [pc, #360]	; (80017f4 <HW_TS_Init+0x18c>)
 800168a:	f043 0320 	orr.w	r3, r3, #32
 800168e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <HW_TS_Init+0x18c>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f1c3 0304 	rsb	r3, r3, #4
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b55      	ldr	r3, [pc, #340]	; (80017f8 <HW_TS_Init+0x190>)
 80016a4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HW_TS_Init+0x18c>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016ae:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80016b2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	fa92 f2a2 	rbit	r2, r2
 80016ba:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	2a00      	cmp	r2, #0
 80016c4:	d101      	bne.n	80016ca <HW_TS_Init+0x62>
  {
    return 32U;
 80016c6:	2220      	movs	r2, #32
 80016c8:	e003      	b.n	80016d2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	fab2 f282 	clz	r2, r2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	40d3      	lsrs	r3, r2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <HW_TS_Init+0x194>)
 80016dc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HW_TS_Init+0x18c>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HW_TS_Init+0x198>)
 80016f0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HW_TS_Init+0x198>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	4a40      	ldr	r2, [pc, #256]	; (80017fc <HW_TS_Init+0x194>)
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001704:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <HW_TS_Init+0x190>)
 8001706:	7812      	ldrb	r2, [r2, #0]
 8001708:	40d3      	lsrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001712:	4293      	cmp	r3, r2
 8001714:	d904      	bls.n	8001720 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HW_TS_Init+0x19c>)
 8001718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	e003      	b.n	8001728 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HW_TS_Init+0x19c>)
 8001726:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001728:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800172c:	f7ff fb9c 	bl	8000e68 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001730:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001734:	f7ff fb84 	bl	8000e40 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d13d      	bne.n	80017ba <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HW_TS_Init+0x1a0>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HW_TS_Init+0x1a4>)
 8001746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800174c:	2300      	movs	r3, #0
 800174e:	77fb      	strb	r3, [r7, #31]
 8001750:	e00c      	b.n	800176c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001752:	7ffa      	ldrb	r2, [r7, #31]
 8001754:	492e      	ldr	r1, [pc, #184]	; (8001810 <HW_TS_Init+0x1a8>)
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	330c      	adds	r3, #12
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	3301      	adds	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d9ef      	bls.n	8001752 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HW_TS_Init+0x1ac>)
 8001774:	2206      	movs	r2, #6
 8001776:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HW_TS_Init+0x188>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HW_TS_Init+0x188>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001786:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HW_TS_Init+0x188>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HW_TS_Init+0x188>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001798:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HW_TS_Init+0x1b0>)
 800179c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017a0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80017a2:	2003      	movs	r0, #3
 80017a4:	f001 f89b 	bl	80028de <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HW_TS_Init+0x188>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HW_TS_Init+0x188>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e009      	b.n	80017ce <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HW_TS_Init+0x188>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f001 f87a 	bl	80028c2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HW_TS_Init+0x188>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80017d6:	2200      	movs	r2, #0
 80017d8:	2103      	movs	r1, #3
 80017da:	2003      	movs	r0, #3
 80017dc:	f001 f82f 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017e0:	2003      	movs	r0, #3
 80017e2:	f001 f846 	bl	8002872 <HAL_NVIC_EnableIRQ>

  return;
 80017e6:	bf00      	nop
}
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000aa8 	.word	0x20000aa8
 80017f4:	40002800 	.word	0x40002800
 80017f8:	20000a11 	.word	0x20000a11
 80017fc:	20000a12 	.word	0x20000a12
 8001800:	20000a14 	.word	0x20000a14
 8001804:	20000a16 	.word	0x20000a16
 8001808:	20000a10 	.word	0x20000a10
 800180c:	20000a0c 	.word	0x20000a0c
 8001810:	20000978 	.word	0x20000978
 8001814:	20000a08 	.word	0x20000a08
 8001818:	58000800 	.word	0x58000800

0800181c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001826:	f3ef 8310 	mrs	r3, PRIMASK
 800182a:	60fb      	str	r3, [r7, #12]
  return(result);
 800182c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800182e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001834:	2003      	movs	r0, #3
 8001836:	f001 f82a 	bl	800288e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <HW_TS_Stop+0xf0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	22ca      	movs	r2, #202	; 0xca
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <HW_TS_Stop+0xf0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2253      	movs	r2, #83	; 0x53
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	4930      	ldr	r1, [pc, #192]	; (8001910 <HW_TS_Stop+0xf4>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	330c      	adds	r3, #12
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d142      	bne.n	80018e8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc80 	bl	800116c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HW_TS_Stop+0xf8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	2b06      	cmp	r3, #6
 8001876:	d12f      	bne.n	80018d8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HW_TS_Stop+0xfc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001884:	d107      	bne.n	8001896 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001886:	bf00      	nop
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <HW_TS_Stop+0xf0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f8      	bne.n	8001888 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HW_TS_Stop+0xf0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HW_TS_Stop+0xf0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80018a6:	bf00      	nop
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HW_TS_Stop+0xf0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f8      	beq.n	80018a8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HW_TS_Stop+0xf0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HW_TS_Stop+0xf0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80018c6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <HW_TS_Stop+0x100>)
 80018ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018ce:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018d0:	2003      	movs	r0, #3
 80018d2:	f001 f804 	bl	80028de <HAL_NVIC_ClearPendingIRQ>
 80018d6:	e007      	b.n	80018e8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HW_TS_Stop+0x104>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	7cfa      	ldrb	r2, [r7, #19]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80018e4:	f7ff fd5e 	bl	80013a4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HW_TS_Stop+0xf0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	22ff      	movs	r2, #255	; 0xff
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 ffbe 	bl	8002872 <HAL_NVIC_EnableIRQ>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f383 8810 	msr	PRIMASK, r3
}
 8001900:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001902:	bf00      	nop
}
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000aa8 	.word	0x20000aa8
 8001910:	20000978 	.word	0x20000978
 8001914:	20000a08 	.word	0x20000a08
 8001918:	40002800 	.word	0x40002800
 800191c:	58000800 	.word	0x58000800
 8001920:	20000a09 	.word	0x20000a09

08001924 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001930:	79fa      	ldrb	r2, [r7, #7]
 8001932:	493b      	ldr	r1, [pc, #236]	; (8001a20 <HW_TS_Start+0xfc>)
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	330c      	adds	r3, #12
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d103      	bne.n	8001950 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff66 	bl	800181c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001950:	f3ef 8310 	mrs	r3, PRIMASK
 8001954:	60fb      	str	r3, [r7, #12]
  return(result);
 8001956:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800195a:	b672      	cpsid	i
}
 800195c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800195e:	2003      	movs	r0, #3
 8001960:	f000 ff95 	bl	800288e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HW_TS_Start+0x100>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	22ca      	movs	r2, #202	; 0xca
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HW_TS_Start+0x100>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2253      	movs	r2, #83	; 0x53
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	492a      	ldr	r1, [pc, #168]	; (8001a20 <HW_TS_Start+0xfc>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	330c      	adds	r3, #12
 8001984:	2202      	movs	r2, #2
 8001986:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001988:	79fa      	ldrb	r2, [r7, #7]
 800198a:	4925      	ldr	r1, [pc, #148]	; (8001a20 <HW_TS_Start+0xfc>)
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3308      	adds	r3, #8
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	4920      	ldr	r1, [pc, #128]	; (8001a20 <HW_TS_Start+0xfc>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3304      	adds	r3, #4
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fb30 	bl	8001018 <linkTimer>
 80019b8:	4603      	mov	r3, r0
 80019ba:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HW_TS_Start+0x104>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HW_TS_Start+0x108>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	7c7a      	ldrb	r2, [r7, #17]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d002      	beq.n	80019d4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80019ce:	f7ff fce9 	bl	80013a4 <RescheduleTimerList>
 80019d2:	e013      	b.n	80019fc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019d4:	79fa      	ldrb	r2, [r7, #7]
 80019d6:	4912      	ldr	r1, [pc, #72]	; (8001a20 <HW_TS_Start+0xfc>)
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3308      	adds	r3, #8
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	8a7b      	ldrh	r3, [r7, #18]
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	1ac9      	subs	r1, r1, r3
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <HW_TS_Start+0xfc>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4403      	add	r3, r0
 80019f8:	3308      	adds	r3, #8
 80019fa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HW_TS_Start+0x100>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 ff34 	bl	8002872 <HAL_NVIC_EnableIRQ>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f383 8810 	msr	PRIMASK, r3
}
 8001a14:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a16:	bf00      	nop
}
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000978 	.word	0x20000978
 8001a24:	20000aa8 	.word	0x20000aa8
 8001a28:	20000a08 	.word	0x20000a08
 8001a2c:	20000a09 	.word	0x20000a09

08001a30 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4798      	blx	r3

  return;
 8001a42:	bf00      	nop
}
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <LL_RCC_LSE_SetDriveCapability>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5a:	f023 0218 	bic.w	r2, r3, #24
 8001a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_AHB2_GRP1_EnableClock>:
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aae:	f000 fcf9 	bl	80024a4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001ab2:	f7fe ffed 	bl	8000a90 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab6:	f000 f835 	bl	8001b24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001aba:	f000 f895 	bl	8001be8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001abe:	f000 f8f3 	bl	8001ca8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac2:	f000 f98f 	bl	8001de4 <MX_GPIO_Init>
  MX_RTC_Init();
 8001ac6:	f000 f90b 	bl	8001ce0 <MX_RTC_Init>
  MX_I2C1_Init();
 8001aca:	f000 f8ad 	bl	8001c28 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ace:	f000 f93b 	bl	8001d48 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001ad2:	f000 f8fd 	bl	8001cd0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring sensor...");
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <main+0x68>)
 8001ad8:	f007 ff04 	bl	80098e4 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001adc:	200a      	movs	r0, #10
 8001ade:	f7ff f94c 	bl	8000d7a <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001ae2:	490c      	ldr	r1, [pc, #48]	; (8001b14 <main+0x6c>)
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <main+0x70>)
 8001ae6:	f7fe fd25 	bl	8000534 <BH1790GLC_init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  printf("Configuration status: %d\n\r", status);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4619      	mov	r1, r3
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <main+0x74>)
 8001af4:	f007 fef6 	bl	80098e4 <iprintf>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001af8:	f7fe ffd8 	bl	8000aac <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001afc:	f7ff f962 	bl	8000dc4 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    printf("Get sensor data here\n\r");
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <main+0x78>)
 8001b02:	f007 feef 	bl	80098e4 <iprintf>
    HAL_Delay(1000);
 8001b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b0a:	f7ff f936 	bl	8000d7a <HAL_Delay>
    MX_APPE_Process();
 8001b0e:	e7f5      	b.n	8001afc <main+0x54>
 8001b10:	0800a834 	.word	0x0800a834
 8001b14:	20000a18 	.word	0x20000a18
 8001b18:	20000b60 	.word	0x20000b60
 8001b1c:	0800a84c 	.word	0x0800a84c
 8001b20:	0800a868 	.word	0x0800a868

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09a      	sub	sp, #104	; 0x68
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	2248      	movs	r2, #72	; 0x48
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f007 fece 	bl	80098d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	615a      	str	r2, [r3, #20]
 8001b48:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b4a:	f001 ff31 	bl	80039b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001b4e:	2010      	movs	r0, #16
 8001b50:	f7ff ff7b 	bl	8001a4a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <SystemClock_Config+0xc0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b5c:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <SystemClock_Config+0xc0>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <SystemClock_Config+0xc0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b70:	2327      	movs	r3, #39	; 0x27
 8001b72:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b84:	2301      	movs	r3, #1
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001b90:	23a0      	movs	r3, #160	; 0xa0
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fa9b 	bl	80040d8 <HAL_RCC_OscConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ba8:	f000 f988 	bl	8001ebc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001bac:	236f      	movs	r3, #111	; 0x6f
 8001bae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 fdf7 	bl	80047c0 <HAL_RCC_ClockConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001bd8:	f000 f970 	bl	8001ebc <Error_Handler>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3768      	adds	r7, #104	; 0x68
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58000400 	.word	0x58000400

08001be8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b094      	sub	sp, #80	; 0x50
 8001bec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2250      	movs	r2, #80	; 0x50
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f007 fe6d 	bl	80098d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001bfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bfe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c06:	2300      	movs	r3, #0
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0e:	463b      	mov	r3, r7
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fa12 	bl	800503a <HAL_RCCEx_PeriphCLKConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001c1c:	f000 f94e 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001c20:	bf00      	nop
 8001c22:	3750      	adds	r7, #80	; 0x50
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <MX_I2C1_Init+0x78>)
 8001c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <MX_I2C1_Init+0x7c>)
 8001c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c64:	f000 fff6 	bl	8002c54 <HAL_I2C_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c6e:	f000 f925 	bl	8001ebc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c76:	f001 fd7d 	bl	8003774 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c80:	f000 f91c 	bl	8001ebc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c84:	2100      	movs	r1, #0
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_I2C1_Init+0x74>)
 8001c88:	f001 fdbf 	bl	800380a <HAL_I2CEx_ConfigDigitalFilter>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c92:	f000 f913 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000a18 	.word	0x20000a18
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	00707cbb 	.word	0x00707cbb

08001ca8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_IPCC_Init+0x20>)
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <MX_IPCC_Init+0x24>)
 8001cb0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_IPCC_Init+0x20>)
 8001cb4:	f001 fdf6 	bl	80038a4 <HAL_IPCC_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001cbe:	f000 f8fd 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000a6c 	.word	0x20000a6c
 8001ccc:	58000c00 	.word	0x58000c00

08001cd0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_RTC_Init+0x60>)
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <MX_RTC_Init+0x64>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <MX_RTC_Init+0x60>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_RTC_Init+0x60>)
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_RTC_Init+0x60>)
 8001cf8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001cfc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_RTC_Init+0x60>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_RTC_Init+0x60>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <MX_RTC_Init+0x60>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_RTC_Init+0x60>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d16:	480a      	ldr	r0, [pc, #40]	; (8001d40 <MX_RTC_Init+0x60>)
 8001d18:	f003 fc16 	bl	8005548 <HAL_RTC_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d22:	f000 f8cb 	bl	8001ebc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_RTC_Init+0x60>)
 8001d2c:	f003 fd0c 	bl	8005748 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d36:	f000 f8c1 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000aa8 	.word	0x20000aa8
 8001d44:	40002800 	.word	0x40002800

08001d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <MX_USART1_UART_Init+0x98>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d68:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001d6c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d70:	220c      	movs	r2, #12
 8001d72:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001d94:	f003 fdb4 	bl	8005900 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001d9e:	f000 f88d 	bl	8001ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001da6:	f004 fb03 	bl	80063b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001db0:	f000 f884 	bl	8001ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db4:	2100      	movs	r1, #0
 8001db6:	4809      	ldr	r0, [pc, #36]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001db8:	f004 fb38 	bl	800642c <HAL_UARTEx_SetRxFifoThreshold>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001dc2:	f000 f87b 	bl	8001ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART1_UART_Init+0x94>)
 8001dc8:	f004 fab9 	bl	800633e <HAL_UARTEx_DisableFifoMode>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001dd2:	f000 f873 	bl	8001ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000acc 	.word	0x20000acc
 8001de0:	40013800 	.word	0x40013800

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df8:	2004      	movs	r0, #4
 8001dfa:	f7ff fe3c 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f7ff fe39 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fe36 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0a:	2008      	movs	r0, #8
 8001e0c:	f7ff fe33 	bl	8001a76 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2123      	movs	r1, #35	; 0x23
 8001e14:	481d      	ldr	r0, [pc, #116]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e16:	f000 fee1 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <MX_GPIO_Init+0xac>)
 8001e2c:	f000 fd66 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001e30:	2323      	movs	r3, #35	; 0x23
 8001e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4811      	ldr	r0, [pc, #68]	; (8001e8c <MX_GPIO_Init+0xa8>)
 8001e46:	f000 fd59 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e68:	f000 fd48 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_GPIO_Init+0xb0>)
 8001e7e:	f000 fd3d 	bl	80028fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00

08001e98 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001ea0:	1d39      	adds	r1, r7, #4
 8001ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <__io_putchar+0x20>)
 8001eaa:	f003 fd79 	bl	80059a0 <HAL_UART_Transmit>

  return ch;
 8001eae:	687b      	ldr	r3, [r7, #4]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000acc 	.word	0x20000acc

08001ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <Error_Handler+0x8>

08001ec6 <LL_RCC_EnableRTC>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_AHB2_GRP1_EnableClock>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_AHB3_GRP1_EnableClock>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f70:	68fb      	ldr	r3, [r7, #12]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001fb4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fb8:	f7ff ffaf 	bl	8001f1a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	202e      	movs	r0, #46	; 0x2e
 8001fc2:	f000 fc3c 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001fc6:	202e      	movs	r0, #46	; 0x2e
 8001fc8:	f000 fc53 	bl	8002872 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09c      	sub	sp, #112	; 0x70
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2250      	movs	r2, #80	; 0x50
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f007 fc6f 	bl	80098d4 <memset>
  if(hi2c->Instance==I2C1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_I2C_MspInit+0x98>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d12e      	bne.n	800205e <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002000:	2304      	movs	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002004:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	4618      	mov	r0, r3
 8002010:	f003 f813 	bl	800503a <HAL_RCCEx_PeriphCLKConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800201a:	f7ff ff4f 	bl	8001ebc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2002      	movs	r0, #2
 8002020:	f7ff ff62 	bl	8001ee8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002028:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202a:	2312      	movs	r3, #18
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002036:	2304      	movs	r3, #4
 8002038:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800203e:	4619      	mov	r1, r3
 8002040:	480a      	ldr	r0, [pc, #40]	; (800206c <HAL_I2C_MspInit+0x9c>)
 8002042:	f000 fc5b 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002046:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800204a:	f7ff ff7f 	bl	8001f4c <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	201e      	movs	r0, #30
 8002054:	f000 fbf3 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002058:	201e      	movs	r0, #30
 800205a:	f000 fc0a 	bl	8002872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3770      	adds	r7, #112	; 0x70
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	48000400 	.word	0x48000400

08002070 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_IPCC_MspInit+0x44>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002086:	f7ff ff48 	bl	8001f1a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	202c      	movs	r0, #44	; 0x2c
 8002090:	f000 fbd5 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002094:	202c      	movs	r0, #44	; 0x2c
 8002096:	f000 fbec 	bl	8002872 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	202d      	movs	r0, #45	; 0x2d
 80020a0:	f000 fbcd 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020a4:	202d      	movs	r0, #45	; 0x2d
 80020a6:	f000 fbe4 	bl	8002872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	58000c00 	.word	0x58000c00

080020b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b096      	sub	sp, #88	; 0x58
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	2250      	movs	r2, #80	; 0x50
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 fc03 	bl	80098d4 <memset>
  if(hrtc->Instance==RTC)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_RTC_MspInit+0x64>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d11d      	bne.n	8002114 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 ffa6 	bl	800503a <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020f4:	f7ff fee2 	bl	8001ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020f8:	f7ff fee5 	bl	8001ec6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002100:	f7ff ff24 	bl	8001f4c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	2003      	movs	r0, #3
 800210a:	f000 fb98 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800210e:	2003      	movs	r0, #3
 8002110:	f000 fbaf 	bl	8002872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	3758      	adds	r7, #88	; 0x58
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40002800 	.word	0x40002800

08002120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b09c      	sub	sp, #112	; 0x70
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	2250      	movs	r2, #80	; 0x50
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f007 fbc7 	bl	80098d4 <memset>
  if(huart->Instance==USART1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <HAL_UART_MspInit+0x84>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d124      	bne.n	800219a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002150:	2301      	movs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4618      	mov	r0, r3
 800215e:	f002 ff6c 	bl	800503a <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002168:	f7ff fea8 	bl	8001ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002170:	f7ff ff05 	bl	8001f7e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	2002      	movs	r0, #2
 8002176:	f7ff feb7 	bl	8001ee8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800218a:	2307      	movs	r3, #7
 800218c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002192:	4619      	mov	r1, r3
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <HAL_UART_MspInit+0x88>)
 8002196:	f000 fbb1 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3770      	adds	r7, #112	; 0x70
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40013800 	.word	0x40013800
 80021a8:	48000400 	.word	0x48000400

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f9ae 	bl	8002558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002204:	f7ff f968 	bl	80014d8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <I2C1_EV_IRQHandler+0x10>)
 8002212:	f000 ffdd 	bl	80031d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000a18 	.word	0x20000a18

08002220 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002224:	f006 ff5a 	bl	80090dc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002230:	f006 ff8c 	bl	800914c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800223c:	f000 fce6 	bl	8002c0c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e00a      	b.n	800226c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002256:	f3af 8000 	nop.w
 800225a:	4601      	mov	r1, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <_read+0x12>
  }

  return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e009      	b.n	80022a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fdfd 	bl	8001e98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf1      	blt.n	8002290 <_write+0x12>
  }
  return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
  return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f007 fa88 	bl	8009864 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20030000 	.word	0x20030000
 8002380:	00000400 	.word	0x00000400
 8002384:	20000b74 	.word	0x20000b74
 8002388:	20000d38 	.word	0x20000d38

0800238c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <SystemInit+0x98>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <SystemInit+0x98>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80023b8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <SystemInit+0x9c>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d6:	f023 0305 	bic.w	r3, r3, #5
 80023da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80023f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f6:	4a0d      	ldr	r2, [pc, #52]	; (800242c <SystemInit+0xa0>)
 80023f8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <SystemInit+0xa0>)
 8002400:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00
 8002428:	faf6fefb 	.word	0xfaf6fefb
 800242c:	22041000 	.word	0x22041000

08002430 <CopyDataInit>:
 8002430:	58d4      	ldr	r4, [r2, r3]
 8002432:	50c4      	str	r4, [r0, r3]
 8002434:	3304      	adds	r3, #4

08002436 <LoopCopyDataInit>:
 8002436:	18c4      	adds	r4, r0, r3
 8002438:	428c      	cmp	r4, r1
 800243a:	d3f9      	bcc.n	8002430 <CopyDataInit>
 800243c:	4770      	bx	lr

0800243e <FillZerobss>:
 800243e:	6003      	str	r3, [r0, #0]
 8002440:	3004      	adds	r0, #4

08002442 <LoopFillZerobss>:
 8002442:	4288      	cmp	r0, r1
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>
 8002446:	4770      	bx	lr

08002448 <Reset_Handler>:
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LoopForever+0x2>)
 800244a:	4685      	mov	sp, r0
 800244c:	f7ff ff9e 	bl	800238c <SystemInit>
 8002450:	480b      	ldr	r0, [pc, #44]	; (8002480 <LoopForever+0x6>)
 8002452:	490c      	ldr	r1, [pc, #48]	; (8002484 <LoopForever+0xa>)
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <LoopForever+0xe>)
 8002456:	2300      	movs	r3, #0
 8002458:	f7ff ffed 	bl	8002436 <LoopCopyDataInit>
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <LoopForever+0x12>)
 800245e:	490c      	ldr	r1, [pc, #48]	; (8002490 <LoopForever+0x16>)
 8002460:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <LoopForever+0x1a>)
 8002462:	2300      	movs	r3, #0
 8002464:	f7ff ffe7 	bl	8002436 <LoopCopyDataInit>
 8002468:	480b      	ldr	r0, [pc, #44]	; (8002498 <LoopForever+0x1e>)
 800246a:	490c      	ldr	r1, [pc, #48]	; (800249c <LoopForever+0x22>)
 800246c:	2300      	movs	r3, #0
 800246e:	f7ff ffe8 	bl	8002442 <LoopFillZerobss>
 8002472:	f007 f9fd 	bl	8009870 <__libc_init_array>
 8002476:	f7ff fb17 	bl	8001aa8 <main>

0800247a <LoopForever>:
 800247a:	e7fe      	b.n	800247a <LoopForever>
 800247c:	20030000 	.word	0x20030000
 8002480:	20000008 	.word	0x20000008
 8002484:	2000008c 	.word	0x2000008c
 8002488:	0800abcc 	.word	0x0800abcc
 800248c:	200301e3 	.word	0x200301e3
 8002490:	200301e3 	.word	0x200301e3
 8002494:	0800b519 	.word	0x0800b519
 8002498:	2000095c 	.word	0x2000095c
 800249c:	20000d38 	.word	0x20000d38

080024a0 <ADC1_IRQHandler>:
 80024a0:	e7fe      	b.n	80024a0 <ADC1_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_Init+0x3c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <HAL_Init+0x3c>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f000 f9b4 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c0:	2000      	movs	r0, #0
 80024c2:	f000 f80f 	bl	80024e4 <HAL_InitTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	71fb      	strb	r3, [r7, #7]
 80024d0:	e001      	b.n	80024d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d2:	f7ff fd6d 	bl	8001fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024d6:	79fb      	ldrb	r3, [r7, #7]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58004000 	.word	0x58004000

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_InitTick+0x6c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d024      	beq.n	8002542 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024f8:	f002 fb0e 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_InitTick+0x6c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002508:	fbb3 f3f1 	udiv	r3, r3, r1
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f9ca 	bl	80028aa <HAL_SYSTICK_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10f      	bne.n	800253c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	d809      	bhi.n	8002536 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002522:	2200      	movs	r2, #0
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252a:	f000 f988 	bl	800283e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_InitTick+0x70>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e007      	b.n	8002546 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e004      	b.n	8002546 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e001      	b.n	8002546 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000010 	.word	0x20000010
 8002554:	2000000c 	.word	0x2000000c

08002558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000010 	.word	0x20000010
 800257c:	20000b78 	.word	0x20000b78

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000b78 	.word	0x20000b78

08002598 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_GetTickPrio+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	2000000c 	.word	0x2000000c

080025b0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTickFreq+0x14>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000010 	.word	0x20000010

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	; (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db12      	blt.n	80026a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	490a      	ldr	r1, [pc, #40]	; (80026ac <__NVIC_DisableIRQ+0x44>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	3320      	adds	r3, #32
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002694:	f3bf 8f4f 	dsb	sy
}
 8002698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800269a:	f3bf 8f6f 	isb	sy
}
 800269e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0c      	blt.n	80026dc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_SetPendingIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	3340      	adds	r3, #64	; 0x40
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0c      	blt.n	8002718 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	; (8002724 <__NVIC_ClearPendingIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	3360      	adds	r3, #96	; 0x60
 8002714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fec9 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800284c:	f7ff fee0 	bl	8002610 <__NVIC_GetPriorityGrouping>
 8002850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7ff ff90 	bl	800277c <NVIC_EncodePriority>
 800285c:	4602      	mov	r2, r0
 800285e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff5f 	bl	8002728 <__NVIC_SetPriority>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fed3 	bl	800262c <__NVIC_EnableIRQ>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fee3 	bl	8002668 <__NVIC_DisableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff96 	bl	80027e4 <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff feed 	bl	80026b0 <__NVIC_SetPendingIRQ>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fefd 	bl	80026ec <__NVIC_ClearPendingIRQ>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290a:	e14c      	b.n	8002ba6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 813e 	beq.w	8002ba0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <HAL_GPIO_Init+0x40>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d130      	bne.n	800299e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002972:	2201      	movs	r2, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0201 	and.w	r2, r3, #1
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d017      	beq.n	80029da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d123      	bne.n	8002a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	6939      	ldr	r1, [r7, #16]
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0203 	and.w	r2, r3, #3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8098 	beq.w	8002ba0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a70:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <HAL_GPIO_Init+0x2c8>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a9a:	d019      	beq.n	8002ad0 <HAL_GPIO_Init+0x1d4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <HAL_GPIO_Init+0x2cc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_GPIO_Init+0x1d0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a49      	ldr	r2, [pc, #292]	; (8002bcc <HAL_GPIO_Init+0x2d0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_GPIO_Init+0x1cc>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_GPIO_Init+0x2d4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <HAL_GPIO_Init+0x1c8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <HAL_GPIO_Init+0x2d8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_GPIO_Init+0x1c4>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e008      	b.n	8002ad2 <HAL_GPIO_Init+0x1d6>
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	e006      	b.n	8002ad2 <HAL_GPIO_Init+0x1d6>
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e004      	b.n	8002ad2 <HAL_GPIO_Init+0x1d6>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e002      	b.n	8002ad2 <HAL_GPIO_Init+0x1d6>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_GPIO_Init+0x1d6>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	f002 0203 	and.w	r2, r2, #3
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	4093      	lsls	r3, r2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae2:	4938      	ldr	r1, [pc, #224]	; (8002bc4 <HAL_GPIO_Init+0x2c8>)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b14:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3e:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_GPIO_Init+0x2dc>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f aeab 	bne.w	800290c <HAL_GPIO_Init+0x10>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	48000400 	.word	0x48000400
 8002bcc:	48000800 	.word	0x48000800
 8002bd0:	48000c00 	.word	0x48000c00
 8002bd4:	48001000 	.word	0x48001000
 8002bd8:	58000800 	.word	0x58000800

08002bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
 8002be8:	4613      	mov	r3, r2
 8002bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_HSEM_IRQHandler+0x30>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_HSEM_IRQHandler+0x30>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	4906      	ldr	r1, [pc, #24]	; (8002c3c <HAL_HSEM_IRQHandler+0x30>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002c26:	4a05      	ldr	r2, [pc, #20]	; (8002c3c <HAL_HSEM_IRQHandler+0x30>)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f807 	bl	8002c40 <HAL_HSEM_FreeCallback>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	58001500 	.word	0x58001500

08002c40 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e081      	b.n	8002d6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff f9a8 	bl	8001fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	e006      	b.n	8002cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d104      	bne.n	8002cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69d9      	ldr	r1, [r3, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	f040 80f9 	bne.w	8002f8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x34>
 8002da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0ed      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Mem_Write+0x4e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0e6      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dca:	f7ff fbd9 	bl	8002580 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2319      	movs	r3, #25
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fadd 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d1      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2221      	movs	r2, #33	; 0x21
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2240      	movs	r2, #64	; 0x40
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e14:	88f8      	ldrh	r0, [r7, #6]
 8002e16:	893a      	ldrh	r2, [r7, #8]
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	4603      	mov	r3, r0
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f9ed 	bl	8003204 <I2C_RequestMemoryWrite>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0a9      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d90e      	bls.n	8002e64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	8979      	ldrh	r1, [r7, #10]
 8002e54:	2300      	movs	r3, #0
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fc57 	bl	8003710 <I2C_TransferConfig>
 8002e62:	e00f      	b.n	8002e84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	8979      	ldrh	r1, [r7, #10]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fc46 	bl	8003710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fad6 	bl	800343a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e07b      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d034      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x1c8>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d130      	bne.n	8002f3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2180      	movs	r1, #128	; 0x80
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fa59 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e04d      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2bff      	cmp	r3, #255	; 0xff
 8002efc:	d90e      	bls.n	8002f1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	22ff      	movs	r2, #255	; 0xff
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	8979      	ldrh	r1, [r7, #10]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fbfb 	bl	8003710 <I2C_TransferConfig>
 8002f1a:	e00f      	b.n	8002f3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	8979      	ldrh	r1, [r7, #10]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fbea 	bl	8003710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d19e      	bne.n	8002e84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fabc 	bl	80034c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e01a      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_I2C_Mem_Write+0x224>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	fe00e800 	.word	0xfe00e800

08002f9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	f040 80fd 	bne.w	80031be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x34>
 8002fca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0f1      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_I2C_Mem_Read+0x4e>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e0ea      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff2:	f7ff fac5 	bl	8002580 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2319      	movs	r3, #25
 8002ffe:	2201      	movs	r2, #1
 8003000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f9c9 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0d5      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2222      	movs	r2, #34	; 0x22
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2240      	movs	r2, #64	; 0x40
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a3a      	ldr	r2, [r7, #32]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003034:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800303c:	88f8      	ldrh	r0, [r7, #6]
 800303e:	893a      	ldrh	r2, [r7, #8]
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4603      	mov	r3, r0
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f92d 	bl	80032ac <I2C_RequestMemoryRead>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0ad      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d90e      	bls.n	800308c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	22ff      	movs	r2, #255	; 0xff
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	4b52      	ldr	r3, [pc, #328]	; (80031c8 <HAL_I2C_Mem_Read+0x22c>)
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fb43 	bl	8003710 <I2C_TransferConfig>
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	b2da      	uxtb	r2, r3
 800309c:	8979      	ldrh	r1, [r7, #10]
 800309e:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <HAL_I2C_Mem_Read+0x22c>)
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb32 	bl	8003710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	2200      	movs	r2, #0
 80030b4:	2104      	movs	r1, #4
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f970 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07c      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d034      	beq.n	800316c <HAL_I2C_Mem_Read+0x1d0>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	d130      	bne.n	800316c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	2200      	movs	r2, #0
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f941 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04d      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d90e      	bls.n	800314c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	b2da      	uxtb	r2, r3
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	2300      	movs	r3, #0
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fae3 	bl	8003710 <I2C_TransferConfig>
 800314a:	e00f      	b.n	800316c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	b2da      	uxtb	r2, r3
 800315c:	8979      	ldrh	r1, [r7, #10]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fad2 	bl	8003710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d19a      	bne.n	80030ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9a4 	bl	80034c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e01a      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2220      	movs	r2, #32
 8003190:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_I2C_Mem_Read+0x230>)
 800319e:	400b      	ands	r3, r1
 80031a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e000      	b.n	80031c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	80002400 	.word	0x80002400
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
  }
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <I2C_RequestMemoryWrite+0xa4>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fa6f 	bl	8003710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	69b9      	ldr	r1, [r7, #24]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f8ff 	bl	800343a <I2C_WaitOnTXISFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e02c      	b.n	80032a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800324c:	893b      	ldrh	r3, [r7, #8]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
 8003256:	e015      	b.n	8003284 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003258:	893b      	ldrh	r3, [r7, #8]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b29b      	uxth	r3, r3
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8e5 	bl	800343a <I2C_WaitOnTXISFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e012      	b.n	80032a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2200      	movs	r2, #0
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f884 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	80002000 	.word	0x80002000

080032ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	817b      	strh	r3, [r7, #10]
 80032be:	460b      	mov	r3, r1
 80032c0:	813b      	strh	r3, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	8979      	ldrh	r1, [r7, #10]
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <I2C_RequestMemoryRead+0xa4>)
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fa1c 	bl	8003710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8ac 	bl	800343a <I2C_WaitOnTXISFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e02c      	b.n	8003346 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
 80032fc:	e015      	b.n	800332a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	b29b      	uxth	r3, r3
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	69b9      	ldr	r1, [r7, #24]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f892 	bl	800343a <I2C_WaitOnTXISFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e012      	b.n	8003346 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003320:	893b      	ldrh	r3, [r7, #8]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2200      	movs	r2, #0
 8003332:	2140      	movs	r1, #64	; 0x40
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f831 	bl	800339c <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	80002000 	.word	0x80002000

08003354 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d103      	bne.n	8003372 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d007      	beq.n	8003390 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	619a      	str	r2, [r3, #24]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ac:	e031      	b.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b4:	d02d      	beq.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7ff f8e3 	bl	8002580 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d122      	bne.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d113      	bne.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00f      	b.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	429a      	cmp	r2, r3
 800342e:	d0be      	beq.n	80033ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003446:	e033      	b.n	80034b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f87f 	bl	8003550 <I2C_IsErrorOccurred>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e031      	b.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003462:	d025      	beq.n	80034b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7ff f88c 	bl	8002580 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11a      	bne.n	80034b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d013      	beq.n	80034b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e007      	b.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d1c4      	bne.n	8003448 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d4:	e02f      	b.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f838 	bl	8003550 <I2C_IsErrorOccurred>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e02d      	b.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ea:	f7ff f849 	bl	8002580 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d302      	bcc.n	8003500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11a      	bne.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b20      	cmp	r3, #32
 800350c:	d013      	beq.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e007      	b.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d1c8      	bne.n	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d068      	beq.n	800364e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2210      	movs	r2, #16
 8003582:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003584:	e049      	b.n	800361a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800358c:	d045      	beq.n	800361a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe fff7 	bl	8002580 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_IsErrorOccurred+0x54>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d13a      	bne.n	800361a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c6:	d121      	bne.n	800360c <I2C_IsErrorOccurred+0xbc>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ce:	d01d      	beq.n	800360c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d01a      	beq.n	800360c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035e6:	f7fe ffcb 	bl	8002580 <HAL_GetTick>
 80035ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ec:	e00e      	b.n	800360c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035ee:	f7fe ffc7 	bl	8002580 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b19      	cmp	r3, #25
 80035fa:	d907      	bls.n	800360c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f043 0320 	orr.w	r3, r3, #32
 8003602:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800360a:	e006      	b.n	800361a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b20      	cmp	r3, #32
 8003618:	d1e9      	bne.n	80035ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b20      	cmp	r3, #32
 8003626:	d003      	beq.n	8003630 <I2C_IsErrorOccurred+0xe0>
 8003628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0aa      	beq.n	8003586 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003634:	2b00      	cmp	r3, #0
 8003636:	d103      	bne.n	8003640 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2220      	movs	r2, #32
 800363e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003692:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff fe45 	bl	8003354 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <I2C_IsErrorOccurred+0x1bc>)
 80036d6:	400b      	ands	r3, r1
 80036d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003702:	4618      	mov	r0, r3
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	4613      	mov	r3, r2
 8003720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003728:	7a7b      	ldrb	r3, [r7, #9]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003730:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	4313      	orrs	r3, r2
 800373a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800373e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	0d5b      	lsrs	r3, r3, #21
 800374a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <I2C_TransferConfig+0x60>)
 8003750:	430b      	orrs	r3, r1
 8003752:	43db      	mvns	r3, r3
 8003754:	ea02 0103 	and.w	r1, r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	03ff63ff 	.word	0x03ff63ff

08003774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	d138      	bne.n	80037fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003794:	2302      	movs	r3, #2
 8003796:	e032      	b.n	80037fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	d139      	bne.n	8003894 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800382a:	2302      	movs	r3, #2
 800382c:	e033      	b.n	8003896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2224      	movs	r2, #36	; 0x24
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	021b      	lsls	r3, r3, #8
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01e      	beq.n	80038f4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_IPCC_Init+0x60>)
 80038b8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fe fbd2 	bl	8002070 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80038cc:	68b8      	ldr	r0, [r7, #8]
 80038ce:	f000 f85b 	bl	8003988 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f82c 	bl	800393c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80038f2:	e001      	b.n	80038f8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	58000c00 	.word	0x58000c00

08003908 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e00f      	b.n	800396a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <IPCC_SetDefaultCallbacks+0x44>)
 8003954:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3306      	adds	r3, #6
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	4a08      	ldr	r2, [pc, #32]	; (8003984 <IPCC_SetDefaultCallbacks+0x48>)
 8003962:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3301      	adds	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d9ec      	bls.n	800394a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	08003909 	.word	0x08003909
 8003984:	08003923 	.word	0x08003923

08003988 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800399c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223f      	movs	r2, #63	; 0x3f
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a04      	ldr	r2, [pc, #16]	; (80039cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039be:	6013      	str	r3, [r2, #0]
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	58000400 	.word	0x58000400

080039d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	58000400 	.word	0x58000400

080039ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fe:	d101      	bne.n	8003a04 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_RCC_HSE_Enable>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_RCC_HSE_Disable>:
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
}
 8003a42:	bf00      	nop
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_RCC_HSE_IsReady>:
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a5e:	d101      	bne.n	8003a64 <LL_RCC_HSE_IsReady+0x18>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <LL_RCC_HSE_IsReady+0x1a>
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_HSI_Enable>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <LL_RCC_HSI_Disable>:
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_HSI_IsReady>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abe:	d101      	bne.n	8003ac4 <LL_RCC_HSI_IsReady+0x18>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <LL_RCC_HSI_IsReady+0x1a>
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_HSI48_Enable>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_RCC_HSI48_Disable>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <LL_RCC_HSI48_IsReady>:
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d101      	bne.n	8003b56 <LL_RCC_HSI48_IsReady+0x18>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <LL_RCC_HSI48_IsReady+0x1a>
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_RCC_LSE_Enable>:
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_RCC_LSE_Disable>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_LSE_EnableBypass>:
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bbe:	bf00      	nop
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_RCC_LSE_DisableBypass>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_LSE_IsReady>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d101      	bne.n	8003c02 <LL_RCC_LSE_IsReady+0x18>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <LL_RCC_LSE_IsReady+0x1a>
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_LSI1_Enable>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_RCC_LSI1_Disable>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_RCC_LSI1_IsReady>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d101      	bne.n	8003c6a <LL_RCC_LSI1_IsReady+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_RCC_LSI1_IsReady+0x1a>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <LL_RCC_LSI2_Enable>:
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_RCC_LSI2_Disable>:
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_LSI2_IsReady>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d101      	bne.n	8003cd2 <LL_RCC_LSI2_IsReady+0x18>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <LL_RCC_LSI2_IsReady+0x1a>
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_LSI2_SetTrimming>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_RCC_MSI_Enable>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6013      	str	r3, [r2, #0]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_MSI_Disable>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6013      	str	r3, [r2, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_MSI_IsReady>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d101      	bne.n	8003d5e <LL_RCC_MSI_IsReady+0x16>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_RCC_MSI_IsReady+0x18>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_MSI_SetRange>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_MSI_GetRange>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2bb0      	cmp	r3, #176	; 0xb0
 8003da8:	d901      	bls.n	8003dae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003daa:	23b0      	movs	r3, #176	; 0xb0
 8003dac:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003dae:	687b      	ldr	r3, [r7, #4]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_MSI_SetCalibTrimming>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <LL_RCC_SetSysClkSource>:
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 0203 	bic.w	r2, r3, #3
 8003df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_GetSysClkSource>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 030c 	and.w	r3, r3, #12
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_RCC_SetAHBPrescaler>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_SetAHB4Prescaler>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e8a:	f023 020f 	bic.w	r2, r3, #15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_RCC_SetAPB1Prescaler>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_RCC_SetAPB2Prescaler>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_GetAHBPrescaler>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_GetAHB4Prescaler>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_GetAPB1Prescaler>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_GetAPB2Prescaler>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_PLL_Enable>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_RCC_PLL_Disable>:
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	6013      	str	r3, [r2, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_RCC_PLL_IsReady>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003faa:	d101      	bne.n	8003fb0 <LL_RCC_PLL_IsReady+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_RCC_PLL_IsReady+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_PLL_GetN>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_PLL_GetR>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_PLL_GetDivider>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_PLL_GetMainSource>:
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0303 	and.w	r3, r3, #3
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_RCC_IsActiveFlag_HPRE>:
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d101      	bne.n	8004036 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004056:	d101      	bne.n	800405c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004070:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d101      	bne.n	8004082 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a0:	d101      	bne.n	80040a6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040c4:	d101      	bne.n	80040ca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b08d      	sub	sp, #52	; 0x34
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e363      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 808d 	beq.w	8004212 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f8:	f7ff fe89 	bl	8003e0e <LL_RCC_GetSysClkSource>
 80040fc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fe:	f7ff ff82 	bl	8004006 <LL_RCC_PLL_GetMainSource>
 8004102:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x3e>
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d147      	bne.n	80041a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b01      	cmp	r3, #1
 8004114:	d144      	bne.n	80041a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e347      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004126:	f7ff fe34 	bl	8003d92 <LL_RCC_MSI_GetRange>
 800412a:	4603      	mov	r3, r0
 800412c:	429c      	cmp	r4, r3
 800412e:	d914      	bls.n	800415a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fd2f 	bl	8004b98 <RCC_SetFlashLatencyFromMSIRange>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e336      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fe0e 	bl	8003d6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fe32 	bl	8003dbc <LL_RCC_MSI_SetCalibTrimming>
 8004158:	e013      	b.n	8004182 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fe03 	bl	8003d6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe27 	bl	8003dbc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fd10 	bl	8004b98 <RCC_SetFlashLatencyFromMSIRange>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e317      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004182:	f000 fcc9 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004186:	4603      	mov	r3, r0
 8004188:	4aa4      	ldr	r2, [pc, #656]	; (800441c <HAL_RCC_OscConfig+0x344>)
 800418a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800418c:	4ba4      	ldr	r3, [pc, #656]	; (8004420 <HAL_RCC_OscConfig+0x348>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe f9a7 	bl	80024e4 <HAL_InitTick>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d039      	beq.n	8004210 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e308      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01e      	beq.n	80041e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041a8:	f7ff fdb0 	bl	8003d0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ac:	f7fe f9e8 	bl	8002580 <HAL_GetTick>
 80041b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041b4:	f7fe f9e4 	bl	8002580 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e2f5      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041c6:	f7ff fdbf 	bl	8003d48 <LL_RCC_MSI_IsReady>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f1      	beq.n	80041b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fdc8 	bl	8003d6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fdec 	bl	8003dbc <LL_RCC_MSI_SetCalibTrimming>
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041e6:	f7ff fda0 	bl	8003d2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ea:	f7fe f9c9 	bl	8002580 <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f2:	f7fe f9c5 	bl	8002580 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e2d6      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004204:	f7ff fda0 	bl	8003d48 <LL_RCC_MSI_IsReady>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f1      	bne.n	80041f2 <HAL_RCC_OscConfig+0x11a>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004210:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d047      	beq.n	80042ae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421e:	f7ff fdf6 	bl	8003e0e <LL_RCC_GetSysClkSource>
 8004222:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	f7ff feef 	bl	8004006 <LL_RCC_PLL_GetMainSource>
 8004228:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x164>
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d108      	bne.n	8004248 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d134      	bne.n	80042ae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e2b4      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d102      	bne.n	8004258 <HAL_RCC_OscConfig+0x180>
 8004252:	f7ff fbdd 	bl	8003a10 <LL_RCC_HSE_Enable>
 8004256:	e001      	b.n	800425c <HAL_RCC_OscConfig+0x184>
 8004258:	f7ff fbe9 	bl	8003a2e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d012      	beq.n	800428a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe f98c 	bl	8002580 <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe f988 	bl	8002580 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e299      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800427e:	f7ff fbe5 	bl	8003a4c <LL_RCC_HSE_IsReady>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f1      	beq.n	800426c <HAL_RCC_OscConfig+0x194>
 8004288:	e011      	b.n	80042ae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fe f979 	bl	8002580 <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004292:	f7fe f975 	bl	8002580 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b64      	cmp	r3, #100	; 0x64
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e286      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042a4:	f7ff fbd2 	bl	8003a4c <LL_RCC_HSE_IsReady>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f1      	bne.n	8004292 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d04c      	beq.n	8004354 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ba:	f7ff fda8 	bl	8003e0e <LL_RCC_GetSysClkSource>
 80042be:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c0:	f7ff fea1 	bl	8004006 <LL_RCC_PLL_GetMainSource>
 80042c4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_OscConfig+0x200>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d10e      	bne.n	80042f0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e266      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fbf1 	bl	8003ad0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042ee:	e031      	b.n	8004354 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d019      	beq.n	800432c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f8:	f7ff fbba 	bl	8003a70 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fe f940 	bl	8002580 <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004304:	f7fe f93c 	bl	8002580 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e24d      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004316:	f7ff fbc9 	bl	8003aac <LL_RCC_HSI_IsReady>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f1      	beq.n	8004304 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fbd3 	bl	8003ad0 <LL_RCC_HSI_SetCalibTrimming>
 800432a:	e013      	b.n	8004354 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432c:	f7ff fbaf 	bl	8003a8e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f926 	bl	8002580 <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004338:	f7fe f922 	bl	8002580 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e233      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800434a:	f7ff fbaf 	bl	8003aac <LL_RCC_HSI_IsReady>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f1      	bne.n	8004338 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a3 	beq.w	80044b4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d076      	beq.n	8004464 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d046      	beq.n	8004410 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004382:	f7ff fc66 	bl	8003c52 <LL_RCC_LSI1_IsReady>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d113      	bne.n	80043b4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800438c:	f7ff fc3f 	bl	8003c0e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004390:	f7fe f8f6 	bl	8002580 <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004398:	f7fe f8f2 	bl	8002580 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e203      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043aa:	f7ff fc52 	bl	8003c52 <LL_RCC_LSI1_IsReady>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f1      	beq.n	8004398 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80043b4:	f7ff fc5f 	bl	8003c76 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe f8e2 	bl	8002580 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043c0:	f7fe f8de 	bl	8002580 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1ef      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043d2:	f7ff fc72 	bl	8003cba <LL_RCC_LSI2_IsReady>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f1      	beq.n	80043c0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fc7c 	bl	8003cde <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80043e6:	f7ff fc23 	bl	8003c30 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fe f8c9 	bl	8002580 <HAL_GetTick>
 80043ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043f2:	f7fe f8c5 	bl	8002580 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1d6      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004404:	f7ff fc25 	bl	8003c52 <LL_RCC_LSI1_IsReady>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f1      	bne.n	80043f2 <HAL_RCC_OscConfig+0x31a>
 800440e:	e051      	b.n	80044b4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004410:	f7ff fbfd 	bl	8003c0e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fe f8b4 	bl	8002580 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800441a:	e00c      	b.n	8004436 <HAL_RCC_OscConfig+0x35e>
 800441c:	20000008 	.word	0x20000008
 8004420:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004424:	f7fe f8ac 	bl	8002580 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1bd      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004436:	f7ff fc0c 	bl	8003c52 <LL_RCC_LSI1_IsReady>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f1      	beq.n	8004424 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004440:	f7ff fc2a 	bl	8003c98 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004446:	f7fe f89b 	bl	8002580 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b03      	cmp	r3, #3
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e1ac      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004458:	f7ff fc2f 	bl	8003cba <LL_RCC_LSI2_IsReady>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f1      	bne.n	8004446 <HAL_RCC_OscConfig+0x36e>
 8004462:	e027      	b.n	80044b4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004464:	f7ff fc18 	bl	8003c98 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe f88a 	bl	8002580 <HAL_GetTick>
 800446c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004470:	f7fe f886 	bl	8002580 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e197      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004482:	f7ff fc1a 	bl	8003cba <LL_RCC_LSI2_IsReady>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f1      	bne.n	8004470 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800448c:	f7ff fbd0 	bl	8003c30 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fe f876 	bl	8002580 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004498:	f7fe f872 	bl	8002580 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e183      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044aa:	f7ff fbd2 	bl	8003c52 <LL_RCC_LSI1_IsReady>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f1      	bne.n	8004498 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d05b      	beq.n	8004578 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c0:	4ba7      	ldr	r3, [pc, #668]	; (8004760 <HAL_RCC_OscConfig+0x688>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d114      	bne.n	80044f6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044cc:	f7ff fa70 	bl	80039b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d0:	f7fe f856 	bl	8002580 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d8:	f7fe f852 	bl	8002580 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e163      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ea:	4b9d      	ldr	r3, [pc, #628]	; (8004760 <HAL_RCC_OscConfig+0x688>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d102      	bne.n	8004504 <HAL_RCC_OscConfig+0x42c>
 80044fe:	f7ff fb30 	bl	8003b62 <LL_RCC_LSE_Enable>
 8004502:	e00c      	b.n	800451e <HAL_RCC_OscConfig+0x446>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b05      	cmp	r3, #5
 800450a:	d104      	bne.n	8004516 <HAL_RCC_OscConfig+0x43e>
 800450c:	f7ff fb4b 	bl	8003ba6 <LL_RCC_LSE_EnableBypass>
 8004510:	f7ff fb27 	bl	8003b62 <LL_RCC_LSE_Enable>
 8004514:	e003      	b.n	800451e <HAL_RCC_OscConfig+0x446>
 8004516:	f7ff fb35 	bl	8003b84 <LL_RCC_LSE_Disable>
 800451a:	f7ff fb55 	bl	8003bc8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d014      	beq.n	8004550 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fe f82b 	bl	8002580 <HAL_GetTick>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fe f827 	bl	8002580 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e136      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004544:	f7ff fb51 	bl	8003bea <LL_RCC_LSE_IsReady>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ef      	beq.n	800452e <HAL_RCC_OscConfig+0x456>
 800454e:	e013      	b.n	8004578 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe f816 	bl	8002580 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004556:	e00a      	b.n	800456e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fe f812 	bl	8002580 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e121      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800456e:	f7ff fb3c 	bl	8003bea <LL_RCC_LSE_IsReady>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ef      	bne.n	8004558 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02c      	beq.n	80045de <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	d014      	beq.n	80045b6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800458c:	f7ff fab5 	bl	8003afa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fd fff6 	bl	8002580 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004598:	f7fd fff2 	bl	8002580 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e103      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045aa:	f7ff fac8 	bl	8003b3e <LL_RCC_HSI48_IsReady>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f1      	beq.n	8004598 <HAL_RCC_OscConfig+0x4c0>
 80045b4:	e013      	b.n	80045de <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045b6:	f7ff fab1 	bl	8003b1c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd ffe1 	bl	8002580 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c2:	f7fd ffdd 	bl	8002580 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0ee      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045d4:	f7ff fab3 	bl	8003b3e <LL_RCC_HSI48_IsReady>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f1      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80e4 	beq.w	80047b0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e8:	f7ff fc11 	bl	8003e0e <LL_RCC_GetSysClkSource>
 80045ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	f040 80b4 	bne.w	8004768 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0203 	and.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	429a      	cmp	r2, r3
 800460c:	d123      	bne.n	8004656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d11c      	bne.n	8004656 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d114      	bne.n	8004656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d10d      	bne.n	8004656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d106      	bne.n	8004656 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d05d      	beq.n	8004712 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b0c      	cmp	r3, #12
 800465a:	d058      	beq.n	800470e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0a1      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800466e:	f7ff fc84 	bl	8003f7a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004672:	f7fd ff85 	bl	8002580 <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fd ff81 	bl	8002580 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e092      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4b30      	ldr	r3, [pc, #192]	; (8004764 <HAL_RCC_OscConfig+0x68c>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b2:	0212      	lsls	r2, r2, #8
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046c6:	430a      	orrs	r2, r1
 80046c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046d0:	f7ff fc44 	bl	8003f5c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e4:	f7fd ff4c 	bl	8002580 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd ff48 	bl	8002580 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e059      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ef      	beq.n	80046ec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800470c:	e050      	b.n	80047b0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d147      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004720:	f7ff fc1c 	bl	8003f5c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004734:	f7fd ff24 	bl	8002580 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fd ff20 	bl	8002580 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e031      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <HAL_RCC_OscConfig+0x664>
 800475c:	e028      	b.n	80047b0 <HAL_RCC_OscConfig+0x6d8>
 800475e:	bf00      	nop
 8004760:	58000400 	.word	0x58000400
 8004764:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d01e      	beq.n	80047ac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	f7ff fc04 	bl	8003f7a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd ff05 	bl	8002580 <HAL_GetTick>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477a:	f7fd ff01 	bl	8002580 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e012      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ef      	bne.n	800477a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_OscConfig+0x6e4>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	60cb      	str	r3, [r1, #12]
 80047aa:	e001      	b.n	80047b0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3734      	adds	r7, #52	; 0x34
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd90      	pop	{r4, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	eefefffc 	.word	0xeefefffc

080047c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e12d      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b98      	ldr	r3, [pc, #608]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d91b      	bls.n	800481a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b95      	ldr	r3, [pc, #596]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	4993      	ldr	r1, [pc, #588]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f2:	f7fd fec5 	bl	8002580 <HAL_GetTick>
 80047f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f8:	e008      	b.n	800480c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047fa:	f7fd fec1 	bl	8002580 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e111      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480c:	4b8a      	ldr	r3, [pc, #552]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d1ef      	bne.n	80047fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fafb 	bl	8003e26 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004830:	f7fd fea6 	bl	8002580 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004838:	f7fd fea2 	bl	8002580 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0f2      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800484a:	f7ff fbe8 	bl	800401e <LL_RCC_IsActiveFlag_HPRE>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f1      	beq.n	8004838 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d016      	beq.n	800488e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff faf2 	bl	8003e4e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800486a:	f7fd fe89 	bl	8002580 <HAL_GetTick>
 800486e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004870:	e008      	b.n	8004884 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004872:	f7fd fe85 	bl	8002580 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0d5      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004884:	f7ff fbdd 	bl	8004042 <LL_RCC_IsActiveFlag_C2HPRE>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f1      	beq.n	8004872 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff faeb 	bl	8003e7a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048a4:	f7fd fe6c 	bl	8002580 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ac:	f7fd fe68 	bl	8002580 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0b8      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048be:	f7ff fbd3 	bl	8004068 <LL_RCC_IsActiveFlag_SHDHPRE>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f1      	beq.n	80048ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d016      	beq.n	8004902 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fae5 	bl	8003ea8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048de:	f7fd fe4f 	bl	8002580 <HAL_GetTick>
 80048e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048e6:	f7fd fe4b 	bl	8002580 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e09b      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048f8:	f7ff fbc9 	bl	800408e <LL_RCC_IsActiveFlag_PPRE1>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f1      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d017      	beq.n	800493e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fadb 	bl	8003ed0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800491a:	f7fd fe31 	bl	8002580 <HAL_GetTick>
 800491e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004922:	f7fd fe2d 	bl	8002580 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e07d      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004934:	f7ff fbbd 	bl	80040b2 <LL_RCC_IsActiveFlag_PPRE2>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f1      	beq.n	8004922 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d043      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d106      	bne.n	8004960 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004952:	f7ff f87b 	bl	8003a4c <LL_RCC_HSE_IsReady>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11e      	bne.n	800499a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e067      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d106      	bne.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004968:	f7ff fb16 	bl	8003f98 <LL_RCC_PLL_IsReady>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d113      	bne.n	800499a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e05c      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800497e:	f7ff f9e3 	bl	8003d48 <LL_RCC_MSI_IsReady>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d108      	bne.n	800499a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e051      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800498c:	f7ff f88e 	bl	8003aac <LL_RCC_HSI_IsReady>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e04a      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fa21 	bl	8003de6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a4:	f7fd fdec 	bl	8002580 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fd fde8 	bl	8002580 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e036      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	f7ff fa24 	bl	8003e0e <LL_RCC_GetSysClkSource>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d1ec      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d21b      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 0207 	bic.w	r2, r3, #7
 80049e8:	4913      	ldr	r1, [pc, #76]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd fdc6 	bl	8002580 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049f8:	f7fd fdc2 	bl	8002580 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e012      	b.n	8004a30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_ClockConfig+0x278>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1ef      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a18:	f000 f87e 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_RCC_ClockConfig+0x27c>)
 8004a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a22:	f7fd fdb9 	bl	8002598 <HAL_GetTickPrio>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fd fd5b 	bl	80024e4 <HAL_InitTick>
 8004a2e:	4603      	mov	r3, r0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	58004000 	.word	0x58004000
 8004a3c:	20000008 	.word	0x20000008

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a46:	f7ff f9e2 	bl	8003e0e <LL_RCC_GetSysClkSource>
 8004a4a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a52:	f7ff f99e 	bl	8003d92 <LL_RCC_MSI_GetRange>
 8004a56:	4603      	mov	r3, r0
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	4a2b      	ldr	r2, [pc, #172]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e04b      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a6e:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e045      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d10a      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a7a:	f7fe ffb7 	bl	80039ec <LL_RCC_HSE_IsEnabledDiv2>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e03a      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e037      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004a90:	f7ff fab9 	bl	8004006 <LL_RCC_PLL_GetMainSource>
 8004a94:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d003      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x64>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d003      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x6a>
 8004aa2:	e00d      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aa6:	60bb      	str	r3, [r7, #8]
        break;
 8004aa8:	e015      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004aaa:	f7fe ff9f 	bl	80039ec <LL_RCC_HSE_IsEnabledDiv2>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d102      	bne.n	8004aba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ab6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ab8:	e00d      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004aba:	4b16      	ldr	r3, [pc, #88]	; (8004b14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004abc:	60bb      	str	r3, [r7, #8]
        break;
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ac0:	f7ff f967 	bl	8003d92 <LL_RCC_MSI_GetRange>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad2:	60bb      	str	r3, [r7, #8]
        break;
 8004ad4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004ad6:	f7ff fa71 	bl	8003fbc <LL_RCC_PLL_GetN>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	fb03 f402 	mul.w	r4, r3, r2
 8004ae2:	f7ff fa84 	bl	8003fee <LL_RCC_PLL_GetDivider>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	3301      	adds	r3, #1
 8004aec:	fbb4 f4f3 	udiv	r4, r4, r3
 8004af0:	f7ff fa71 	bl	8003fd6 <LL_RCC_PLL_GetR>
 8004af4:	4603      	mov	r3, r0
 8004af6:	0f5b      	lsrs	r3, r3, #29
 8004af8:	3301      	adds	r3, #1
 8004afa:	fbb4 f3f3 	udiv	r3, r4, r3
 8004afe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b00:	68fb      	ldr	r3, [r7, #12]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	0800aa84 	.word	0x0800aa84
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	01e84800 	.word	0x01e84800

08004b18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b18:	b598      	push	{r3, r4, r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b1c:	f7ff ff90 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8004b20:	4604      	mov	r4, r0
 8004b22:	f7ff f9e9 	bl	8003ef8 <LL_RCC_GetAHBPrescaler>
 8004b26:	4603      	mov	r3, r0
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4a03      	ldr	r2, [pc, #12]	; (8004b3c <HAL_RCC_GetHCLKFreq+0x24>)
 8004b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd98      	pop	{r3, r4, r7, pc}
 8004b3c:	0800aa24 	.word	0x0800aa24

08004b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b40:	b598      	push	{r3, r4, r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b44:	f7ff ffe8 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b48:	4604      	mov	r4, r0
 8004b4a:	f7ff f9ef 	bl	8003f2c <LL_RCC_GetAPB1Prescaler>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd98      	pop	{r3, r4, r7, pc}
 8004b68:	0800aa64 	.word	0x0800aa64

08004b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b6c:	b598      	push	{r3, r4, r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b70:	f7ff ffd2 	bl	8004b18 <HAL_RCC_GetHCLKFreq>
 8004b74:	4604      	mov	r4, r0
 8004b76:	f7ff f9e5 	bl	8003f44 <LL_RCC_GetAPB2Prescaler>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	0adb      	lsrs	r3, r3, #11
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd98      	pop	{r3, r4, r7, pc}
 8004b94:	0800aa64 	.word	0x0800aa64

08004b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2bb0      	cmp	r3, #176	; 0xb0
 8004ba4:	d903      	bls.n	8004bae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e007      	b.n	8004bbe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	4a11      	ldr	r2, [pc, #68]	; (8004bfc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bbe:	f7ff f9a7 	bl	8003f10 <LL_RCC_GetAHB4Prescaler>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	0c9c      	lsrs	r4, r3, #18
 8004be2:	f7fe fef5 	bl	80039d0 <HAL_PWREx_GetVoltageRange>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4619      	mov	r1, r3
 8004bea:	4620      	mov	r0, r4
 8004bec:	f000 f80c 	bl	8004c08 <RCC_SetFlashLatency>
 8004bf0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd90      	pop	{r4, r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	0800aa84 	.word	0x0800aa84
 8004c00:	0800aa24 	.word	0x0800aa24
 8004c04:	431bde83 	.word	0x431bde83

08004c08 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b093      	sub	sp, #76	; 0x4c
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <RCC_SetFlashLatency+0xe8>)
 8004c14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c1e:	4a35      	ldr	r2, [pc, #212]	; (8004cf4 <RCC_SetFlashLatency+0xec>)
 8004c20:	f107 031c 	add.w	r3, r7, #28
 8004c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <RCC_SetFlashLatency+0xf0>)
 8004c2c:	f107 040c 	add.w	r4, r7, #12
 8004c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c36:	2300      	movs	r3, #0
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d11a      	bne.n	8004c78 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
 8004c46:	e013      	b.n	8004c70 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	3348      	adds	r3, #72	; 0x48
 8004c4e:	443b      	add	r3, r7
 8004c50:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d807      	bhi.n	8004c6a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	3348      	adds	r3, #72	; 0x48
 8004c60:	443b      	add	r3, r7
 8004c62:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c66:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004c68:	e020      	b.n	8004cac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d9e8      	bls.n	8004c48 <RCC_SetFlashLatency+0x40>
 8004c76:	e019      	b.n	8004cac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7c:	e013      	b.n	8004ca6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	3348      	adds	r3, #72	; 0x48
 8004c84:	443b      	add	r3, r7
 8004c86:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d807      	bhi.n	8004ca0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	3348      	adds	r3, #72	; 0x48
 8004c96:	443b      	add	r3, r7
 8004c98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004c9e:	e005      	b.n	8004cac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d9e8      	bls.n	8004c7e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <RCC_SetFlashLatency+0xf4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 0207 	bic.w	r2, r3, #7
 8004cb4:	4911      	ldr	r1, [pc, #68]	; (8004cfc <RCC_SetFlashLatency+0xf4>)
 8004cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cbc:	f7fd fc60 	bl	8002580 <HAL_GetTick>
 8004cc0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cc2:	e008      	b.n	8004cd6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cc4:	f7fd fc5c 	bl	8002580 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e007      	b.n	8004ce6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <RCC_SetFlashLatency+0xf4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1ef      	bne.n	8004cc4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	374c      	adds	r7, #76	; 0x4c
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	0800a880 	.word	0x0800a880
 8004cf4:	0800a890 	.word	0x0800a890
 8004cf8:	0800a89c 	.word	0x0800a89c
 8004cfc:	58004000 	.word	0x58004000

08004d00 <LL_RCC_LSE_IsEnabled>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <LL_RCC_LSE_IsEnabled+0x18>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <LL_RCC_LSE_IsEnabled+0x1a>
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_RCC_LSE_IsReady>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d101      	bne.n	8004d3c <LL_RCC_LSE_IsReady+0x18>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <LL_RCC_LSE_IsReady+0x1a>
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <LL_RCC_SetRFWKPClockSource>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <LL_RCC_SetSMPSClockSource>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_RCC_SetSMPSPrescaler>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_SetUSARTClockSource>:
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f023 0203 	bic.w	r2, r3, #3
 8004dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <LL_RCC_SetLPUARTClockSource>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_RCC_SetI2CClockSource>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e34:	43db      	mvns	r3, r3
 8004e36:	401a      	ands	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <LL_RCC_SetLPTIMClockSource>:
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	401a      	ands	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_RCC_SetSAIClockSource>:
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <LL_RCC_SetRNGClockSource>:
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_RCC_SetCLK48ClockSource>:
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_SetUSBClockSource>:
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ffe3 	bl	8004ee2 <LL_RCC_SetCLK48ClockSource>
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <LL_RCC_SetADCClockSource>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_RCC_SetRTCClockSource>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_GetRTCClockSource>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <LL_RCC_ForceBackupDomainReset>:
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fae:	bf00      	nop
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <LL_RCC_PLLSAI1_Enable>:
{
 8004fda:	b480      	push	{r7}
 8004fdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fec:	6013      	str	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_PLLSAI1_Disable>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005006:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_PLLSAI1_IsReady>:
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005028:	d101      	bne.n	800502e <LL_RCC_PLLSAI1_IsReady+0x18>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b088      	sub	sp, #32
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005042:	2300      	movs	r3, #0
 8005044:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005046:	2300      	movs	r3, #0
 8005048:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d034      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800505e:	d021      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005060:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005064:	d81b      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506a:	d01d      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800506c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005070:	d815      	bhi.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507a:	d110      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800508c:	e00d      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	4618      	mov	r0, r3
 8005094:	f000 f947 	bl	8005326 <RCCEx_PLLSAI1_ConfigNP>
 8005098:	4603      	mov	r3, r0
 800509a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800509c:	e005      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	77fb      	strb	r3, [r7, #31]
        break;
 80050a2:	e002      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050a4:	bf00      	nop
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fee8 	bl	8004e8a <LL_RCC_SetSAIClockSource>
 80050ba:	e001      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	7ffb      	ldrb	r3, [r7, #31]
 80050be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d046      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80050cc:	f7ff ff56 	bl	8004f7c <LL_RCC_GetRTCClockSource>
 80050d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d03c      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050dc:	f7fe fc68 	bl	80039b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff ff30 	bl	8004f50 <LL_RCC_SetRTCClockSource>
 80050f0:	e02e      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80050f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80050fc:	f7ff ff4b 	bl	8004f96 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005100:	f7ff ff5a 	bl	8004fb8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800511c:	f7ff fdf0 	bl	8004d00 <LL_RCC_LSE_IsEnabled>
 8005120:	4603      	mov	r3, r0
 8005122:	2b01      	cmp	r3, #1
 8005124:	d114      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005126:	f7fd fa2b 	bl	8002580 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800512c:	e00b      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fd fa27 	bl	8002580 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	; 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d902      	bls.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	77fb      	strb	r3, [r7, #31]
              break;
 8005144:	e004      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005146:	f7ff fded 	bl	8004d24 <LL_RCC_LSE_IsReady>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d1ee      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	77bb      	strb	r3, [r7, #30]
 8005154:	e001      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005156:	7ffb      	ldrb	r3, [r7, #31]
 8005158:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fe2a 	bl	8004dc4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fe35 	bl	8004df0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fe5d 	bl	8004e56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fe52 	bl	8004e56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fe2a 	bl	8004e1c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff fe1f 	bl	8004e1c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d022      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fe8d 	bl	8004f0e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fc:	d107      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005216:	d10b      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4618      	mov	r0, r3
 800521e:	f000 f8dd 	bl	80053dc <RCCEx_PLLSAI1_ConfigNQ>
 8005222:	4603      	mov	r3, r0
 8005224:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005226:	7ffb      	ldrb	r3, [r7, #31]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800522c:	7ffb      	ldrb	r3, [r7, #31]
 800522e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d008      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800524e:	d003      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d105      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fe2a 	bl	8004eb6 <LL_RCC_SetRNGClockSource>
 8005262:	e00a      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	2000      	movs	r0, #0
 8005270:	f7ff fe21 	bl	8004eb6 <LL_RCC_SetRNGClockSource>
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff fe34 	bl	8004ee2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005282:	d107      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005292:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d022      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fe3d 	bl	8004f24 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b2:	d107      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052cc:	d10b      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f8dd 	bl	8005492 <RCCEx_PLLSAI1_ConfigNR>
 80052d8:	4603      	mov	r3, r0
 80052da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052dc:	7ffb      	ldrb	r3, [r7, #31]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80052e2:	7ffb      	ldrb	r3, [r7, #31]
 80052e4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fd26 	bl	8004d48 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d009      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fd45 	bl	8004d9c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fd2c 	bl	8004d74 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800531c:	7fbb      	ldrb	r3, [r7, #30]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005332:	f7ff fe61 	bl	8004ff8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005336:	f7fd f923 	bl	8002580 <HAL_GetTick>
 800533a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800533c:	e009      	b.n	8005352 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800533e:	f7fd f91f 	bl	8002580 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d902      	bls.n	8005352 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e004      	b.n	800535c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005352:	f7ff fe60 	bl	8005016 <LL_RCC_PLLSAI1_IsReady>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f0      	bne.n	800533e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d137      	bne.n	80053d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005376:	4313      	orrs	r3, r2
 8005378:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538c:	4313      	orrs	r3, r2
 800538e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005390:	f7ff fe23 	bl	8004fda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fd f8f4 	bl	8002580 <HAL_GetTick>
 8005398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800539a:	e009      	b.n	80053b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800539c:	f7fd f8f0 	bl	8002580 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	73fb      	strb	r3, [r7, #15]
        break;
 80053ae:	e004      	b.n	80053ba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053b0:	f7ff fe31 	bl	8005016 <LL_RCC_PLLSAI1_IsReady>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d1f0      	bne.n	800539c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ce:	4313      	orrs	r3, r2
 80053d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053e8:	f7ff fe06 	bl	8004ff8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ec:	f7fd f8c8 	bl	8002580 <HAL_GetTick>
 80053f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053f2:	e009      	b.n	8005408 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f4:	f7fd f8c4 	bl	8002580 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d902      	bls.n	8005408 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	73fb      	strb	r3, [r7, #15]
      break;
 8005406:	e004      	b.n	8005412 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005408:	f7ff fe05 	bl	8005016 <LL_RCC_PLLSAI1_IsReady>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d137      	bne.n	8005488 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005442:	4313      	orrs	r3, r2
 8005444:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005446:	f7ff fdc8 	bl	8004fda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544a:	f7fd f899 	bl	8002580 <HAL_GetTick>
 800544e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005450:	e009      	b.n	8005466 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005452:	f7fd f895 	bl	8002580 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d902      	bls.n	8005466 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	73fb      	strb	r3, [r7, #15]
        break;
 8005464:	e004      	b.n	8005470 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005466:	f7ff fdd6 	bl	8005016 <LL_RCC_PLLSAI1_IsReady>
 800546a:	4603      	mov	r3, r0
 800546c:	2b01      	cmp	r3, #1
 800546e:	d1f0      	bne.n	8005452 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d108      	bne.n	8005488 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005484:	4313      	orrs	r3, r2
 8005486:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800549e:	f7ff fdab 	bl	8004ff8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054a2:	f7fd f86d 	bl	8002580 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054a8:	e009      	b.n	80054be <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054aa:	f7fd f869 	bl	8002580 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d902      	bls.n	80054be <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	73fb      	strb	r3, [r7, #15]
      break;
 80054bc:	e004      	b.n	80054c8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054be:	f7ff fdaa 	bl	8005016 <LL_RCC_PLLSAI1_IsReady>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d137      	bne.n	800553e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e2:	4313      	orrs	r3, r2
 80054e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f8:	4313      	orrs	r3, r2
 80054fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054fc:	f7ff fd6d 	bl	8004fda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005500:	f7fd f83e 	bl	8002580 <HAL_GetTick>
 8005504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005506:	e009      	b.n	800551c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005508:	f7fd f83a 	bl	8002580 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d902      	bls.n	800551c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	73fb      	strb	r3, [r7, #15]
        break;
 800551a:	e004      	b.n	8005526 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800551c:	f7ff fd7b 	bl	8005016 <LL_RCC_PLLSAI1_IsReady>
 8005520:	4603      	mov	r3, r0
 8005522:	2b01      	cmp	r3, #1
 8005524:	d1f0      	bne.n	8005508 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d108      	bne.n	800553e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e09f      	b.n	800569a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fc fda2 	bl	80020b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800557c:	4b49      	ldr	r3, [pc, #292]	; (80056a4 <HAL_RTC_Init+0x15c>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b10      	cmp	r3, #16
 8005586:	d07e      	beq.n	8005686 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	22ca      	movs	r2, #202	; 0xca
 800558e:	625a      	str	r2, [r3, #36]	; 0x24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2253      	movs	r2, #83	; 0x53
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8ab 	bl	80056f4 <RTC_EnterInitMode>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2204      	movs	r2, #4
 80055b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
 80055b8:	e067      	b.n	800568a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	68d2      	ldr	r2, [r2, #12]
 80055f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6919      	ldr	r1, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	041a      	lsls	r2, r3, #16
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005618:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0203 	bic.w	r2, r2, #3
 8005628:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d113      	bne.n	8005678 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f829 	bl	80056a8 <HAL_RTC_WaitForSynchro>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00d      	beq.n	8005678 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	22ff      	movs	r2, #255	; 0xff
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e010      	b.n	800569a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	22ff      	movs	r2, #255	; 0xff
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e001      	b.n	800568a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40002800 	.word	0x40002800

080056a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056c0:	f7fc ff5e 	bl	8002580 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056c6:	e009      	b.n	80056dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056c8:	f7fc ff5a 	bl	8002580 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d6:	d901      	bls.n	80056dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e007      	b.n	80056ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ee      	beq.n	80056c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d119      	bne.n	800573e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005712:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005714:	f7fc ff34 	bl	8002580 <HAL_GetTick>
 8005718:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800571a:	e009      	b.n	8005730 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800571c:	f7fc ff30 	bl	8002580 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572a:	d901      	bls.n	8005730 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e007      	b.n	8005740 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0ee      	beq.n	800571c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800575e:	2302      	movs	r3, #2
 8005760:	e0a8      	b.n	80058b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	22ca      	movs	r2, #202	; 0xca
 8005778:	625a      	str	r2, [r3, #36]	; 0x24
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2253      	movs	r2, #83	; 0x53
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005790:	f7fc fef6 	bl	8002580 <HAL_GetTick>
 8005794:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005796:	e015      	b.n	80057c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005798:	f7fc fef2 	bl	8002580 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a6:	d90d      	bls.n	80057c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2203      	movs	r2, #3
 80057b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e077      	b.n	80058b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e2      	bne.n	8005798 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80057f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80057f4:	f7fc fec4 	bl	8002580 <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057fa:	e015      	b.n	8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057fc:	f7fc fec0 	bl	8002580 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800580a:	d90d      	bls.n	8005828 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2203      	movs	r2, #3
 8005818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e045      	b.n	80058b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0e2      	beq.n	80057fc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0207 	bic.w	r2, r2, #7
 800584c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6899      	ldr	r1, [r3, #8]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005864:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a12      	ldr	r2, [pc, #72]	; (80058bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005878:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005888:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005898:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	22ff      	movs	r2, #255	; 0xff
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	58000800 	.word	0x58000800

080058c0 <LL_RCC_GetUSARTClockSource>:
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4013      	ands	r3, r2
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_GetLPUARTClockSource>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4013      	ands	r3, r2
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e042      	b.n	8005998 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fc fbfb 	bl	8002120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2224      	movs	r2, #36	; 0x24
 800592e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f8ba 	bl	8005abc <UART_SetConfig>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e022      	b.n	8005998 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fad6 	bl	8005f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800596e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800597e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb5d 	bl	8006050 <UART_CheckIdleState>
 8005996:	4603      	mov	r3, r0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d17b      	bne.n	8005ab2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_UART_Transmit+0x26>
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e074      	b.n	8005ab4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2221      	movs	r2, #33	; 0x21
 80059d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059da:	f7fc fdd1 	bl	8002580 <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f8:	d108      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a14:	e030      	b.n	8005a78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fbbf 	bl	80061a4 <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e03d      	b.n	8005ab4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	3302      	adds	r3, #2
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	e007      	b.n	8005a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1c8      	bne.n	8005a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fb88 	bl	80061a4 <UART_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e006      	b.n	8005ab4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac0:	b08c      	sub	sp, #48	; 0x30
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4baf      	ldr	r3, [pc, #700]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4aa4      	ldr	r2, [pc, #656]	; (8005dac <UART_SetConfig+0x2f0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d004      	beq.n	8005b28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b24:	4313      	orrs	r3, r2
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	f023 010f 	bic.w	r1, r3, #15
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a95      	ldr	r2, [pc, #596]	; (8005db0 <UART_SetConfig+0x2f4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d125      	bne.n	8005bac <UART_SetConfig+0xf0>
 8005b60:	2003      	movs	r0, #3
 8005b62:	f7ff fead 	bl	80058c0 <LL_RCC_GetUSARTClockSource>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d81b      	bhi.n	8005ba4 <UART_SetConfig+0xe8>
 8005b6c:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0xb8>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005b85 	.word	0x08005b85
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b9d 	.word	0x08005b9d
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b8a:	e042      	b.n	8005c12 <UART_SetConfig+0x156>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b92:	e03e      	b.n	8005c12 <UART_SetConfig+0x156>
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b9a:	e03a      	b.n	8005c12 <UART_SetConfig+0x156>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ba2:	e036      	b.n	8005c12 <UART_SetConfig+0x156>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005baa:	e032      	b.n	8005c12 <UART_SetConfig+0x156>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a7e      	ldr	r2, [pc, #504]	; (8005dac <UART_SetConfig+0x2f0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d12a      	bne.n	8005c0c <UART_SetConfig+0x150>
 8005bb6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005bba:	f7ff fe91 	bl	80058e0 <LL_RCC_GetLPUARTClockSource>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bc4:	d01a      	beq.n	8005bfc <UART_SetConfig+0x140>
 8005bc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bca:	d81b      	bhi.n	8005c04 <UART_SetConfig+0x148>
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd0:	d00c      	beq.n	8005bec <UART_SetConfig+0x130>
 8005bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd6:	d815      	bhi.n	8005c04 <UART_SetConfig+0x148>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <UART_SetConfig+0x128>
 8005bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be0:	d008      	beq.n	8005bf4 <UART_SetConfig+0x138>
 8005be2:	e00f      	b.n	8005c04 <UART_SetConfig+0x148>
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e012      	b.n	8005c12 <UART_SetConfig+0x156>
 8005bec:	2302      	movs	r3, #2
 8005bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf2:	e00e      	b.n	8005c12 <UART_SetConfig+0x156>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bfa:	e00a      	b.n	8005c12 <UART_SetConfig+0x156>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c02:	e006      	b.n	8005c12 <UART_SetConfig+0x156>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	e002      	b.n	8005c12 <UART_SetConfig+0x156>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a65      	ldr	r2, [pc, #404]	; (8005dac <UART_SetConfig+0x2f0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	f040 8097 	bne.w	8005d4c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d823      	bhi.n	8005c6e <UART_SetConfig+0x1b2>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x170>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c6f 	.word	0x08005c6f
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c6f 	.word	0x08005c6f
 8005c3c:	08005c5f 	.word	0x08005c5f
 8005c40:	08005c6f 	.word	0x08005c6f
 8005c44:	08005c6f 	.word	0x08005c6f
 8005c48:	08005c6f 	.word	0x08005c6f
 8005c4c:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fe ff76 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8005c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c56:	e010      	b.n	8005c7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b56      	ldr	r3, [pc, #344]	; (8005db4 <UART_SetConfig+0x2f8>)
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c5c:	e00d      	b.n	8005c7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fe feef 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8005c62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c64:	e009      	b.n	8005c7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c6c:	e005      	b.n	8005c7a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 812b 	beq.w	8005ed8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	4a4c      	ldr	r2, [pc, #304]	; (8005db8 <UART_SetConfig+0x2fc>)
 8005c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d305      	bcc.n	8005cb2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d903      	bls.n	8005cba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cb8:	e10e      	b.n	8005ed8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	60bb      	str	r3, [r7, #8]
 8005cc0:	60fa      	str	r2, [r7, #12]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	4a3c      	ldr	r2, [pc, #240]	; (8005db8 <UART_SetConfig+0x2fc>)
 8005cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2200      	movs	r2, #0
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cdc:	f7fa faa8 	bl	8000230 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	020b      	lsls	r3, r1, #8
 8005cf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cf6:	0202      	lsls	r2, r0, #8
 8005cf8:	6979      	ldr	r1, [r7, #20]
 8005cfa:	6849      	ldr	r1, [r1, #4]
 8005cfc:	0849      	lsrs	r1, r1, #1
 8005cfe:	2000      	movs	r0, #0
 8005d00:	460c      	mov	r4, r1
 8005d02:	4605      	mov	r5, r0
 8005d04:	eb12 0804 	adds.w	r8, r2, r4
 8005d08:	eb43 0905 	adc.w	r9, r3, r5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	469a      	mov	sl, r3
 8005d14:	4693      	mov	fp, r2
 8005d16:	4652      	mov	r2, sl
 8005d18:	465b      	mov	r3, fp
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fa87 	bl	8000230 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4613      	mov	r3, r2
 8005d28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d30:	d308      	bcc.n	8005d44 <UART_SetConfig+0x288>
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d38:	d204      	bcs.n	8005d44 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e0c9      	b.n	8005ed8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d4a:	e0c5      	b.n	8005ed8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d54:	d16d      	bne.n	8005e32 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	2b07      	cmp	r3, #7
 8005d5e:	d82d      	bhi.n	8005dbc <UART_SetConfig+0x300>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <UART_SetConfig+0x2ac>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d89 	.word	0x08005d89
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005dbd 	.word	0x08005dbd
 8005d74:	08005d97 	.word	0x08005d97
 8005d78:	08005dbd 	.word	0x08005dbd
 8005d7c:	08005dbd 	.word	0x08005dbd
 8005d80:	08005dbd 	.word	0x08005dbd
 8005d84:	08005d9f 	.word	0x08005d9f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d88:	f7fe fef0 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8005d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d8e:	e01b      	b.n	8005dc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <UART_SetConfig+0x2f8>)
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d94:	e018      	b.n	8005dc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7fe fe53 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9c:	e014      	b.n	8005dc8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da4:	e010      	b.n	8005dc8 <UART_SetConfig+0x30c>
 8005da6:	bf00      	nop
 8005da8:	cfff69f3 	.word	0xcfff69f3
 8005dac:	40008000 	.word	0x40008000
 8005db0:	40013800 	.word	0x40013800
 8005db4:	00f42400 	.word	0x00f42400
 8005db8:	0800aac4 	.word	0x0800aac4
      default:
        pclk = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8084 	beq.w	8005ed8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <UART_SetConfig+0x448>)
 8005dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de2:	005a      	lsls	r2, r3, #1
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	441a      	add	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	2b0f      	cmp	r3, #15
 8005dfa:	d916      	bls.n	8005e2a <UART_SetConfig+0x36e>
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e02:	d212      	bcs.n	8005e2a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f023 030f 	bic.w	r3, r3, #15
 8005e0c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	8bfb      	ldrh	r3, [r7, #30]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	8bfa      	ldrh	r2, [r7, #30]
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	e056      	b.n	8005ed8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e30:	e052      	b.n	8005ed8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e36:	3b01      	subs	r3, #1
 8005e38:	2b07      	cmp	r3, #7
 8005e3a:	d822      	bhi.n	8005e82 <UART_SetConfig+0x3c6>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x388>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e65 	.word	0x08005e65
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e83 	.word	0x08005e83
 8005e50:	08005e73 	.word	0x08005e73
 8005e54:	08005e83 	.word	0x08005e83
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e83 	.word	0x08005e83
 8005e60:	08005e7b 	.word	0x08005e7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e64:	f7fe fe82 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8005e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e6a:	e010      	b.n	8005e8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e6c:	4b26      	ldr	r3, [pc, #152]	; (8005f08 <UART_SetConfig+0x44c>)
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e70:	e00d      	b.n	8005e8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e72:	f7fe fde5 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e78:	e009      	b.n	8005e8e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e80:	e005      	b.n	8005e8e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d021      	beq.n	8005ed8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	4a1a      	ldr	r2, [pc, #104]	; (8005f04 <UART_SetConfig+0x448>)
 8005e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	441a      	add	r2, r3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	d909      	bls.n	8005ed2 <UART_SetConfig+0x416>
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec4:	d205      	bcs.n	8005ed2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e002      	b.n	8005ed8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2200      	movs	r2, #0
 8005eec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ef4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3730      	adds	r7, #48	; 0x30
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f02:	bf00      	nop
 8005f04:	0800aac4 	.word	0x0800aac4
 8005f08:	00f42400 	.word	0x00f42400

08005f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01a      	beq.n	8006022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600a:	d10a      	bne.n	8006022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b098      	sub	sp, #96	; 0x60
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006060:	f7fc fa8e 	bl	8002580 <HAL_GetTick>
 8006064:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d12f      	bne.n	80060d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f88e 	bl	80061a4 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d022      	beq.n	80060d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a2:	653b      	str	r3, [r7, #80]	; 0x50
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ac:	647b      	str	r3, [r7, #68]	; 0x44
 80060ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e6      	bne.n	800608e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e063      	b.n	800619c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d149      	bne.n	8006176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ea:	2200      	movs	r2, #0
 80060ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f857 	bl	80061a4 <UART_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d03c      	beq.n	8006176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	623b      	str	r3, [r7, #32]
   return(result);
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611a:	633b      	str	r3, [r7, #48]	; 0x30
 800611c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e6      	bne.n	80060fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	60fb      	str	r3, [r7, #12]
   return(result);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	64bb      	str	r3, [r7, #72]	; 0x48
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614e:	61fa      	str	r2, [r7, #28]
 8006150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	69b9      	ldr	r1, [r7, #24]
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	617b      	str	r3, [r7, #20]
   return(result);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e012      	b.n	800619c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3758      	adds	r7, #88	; 0x58
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b4:	e049      	b.n	800624a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061bc:	d045      	beq.n	800624a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fc f9df 	bl	8002580 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e048      	b.n	800626a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d031      	beq.n	800624a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d110      	bne.n	8006216 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2208      	movs	r2, #8
 80061fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f838 	bl	8006272 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2208      	movs	r2, #8
 8006206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e029      	b.n	800626a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006224:	d111      	bne.n	800624a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800622e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f81e 	bl	8006272 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e00f      	b.n	800626a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4013      	ands	r3, r2
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	429a      	cmp	r2, r3
 8006258:	bf0c      	ite	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	2300      	movne	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	429a      	cmp	r2, r3
 8006266:	d0a6      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006272:	b480      	push	{r7}
 8006274:	b095      	sub	sp, #84	; 0x54
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800628e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006298:	643b      	str	r3, [r7, #64]	; 0x40
 800629a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800629e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e6      	bne.n	800627a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	e853 3f00 	ldrex	r3, [r3]
 80062ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e3      	bne.n	80062ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d118      	bne.n	800631e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f023 0310 	bic.w	r3, r3, #16
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6979      	ldr	r1, [r7, #20]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	613b      	str	r3, [r7, #16]
   return(result);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e6      	bne.n	80062ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006332:	bf00      	nop
 8006334:	3754      	adds	r7, #84	; 0x54
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UARTEx_DisableFifoMode+0x16>
 8006350:	2302      	movs	r3, #2
 8006352:	e027      	b.n	80063a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2224      	movs	r2, #36	; 0x24
 8006360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006382:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e02d      	b.n	8006424 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f84f 	bl	80064a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e02d      	b.n	80064a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2224      	movs	r2, #36	; 0x24
 8006450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f811 	bl	80064a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d108      	bne.n	80064ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064c8:	e031      	b.n	800652e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064ca:	2308      	movs	r3, #8
 80064cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ce:	2308      	movs	r3, #8
 80064d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	0e5b      	lsrs	r3, r3, #25
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	0f5b      	lsrs	r3, r3, #29
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	7b3a      	ldrb	r2, [r7, #12]
 80064f6:	4911      	ldr	r1, [pc, #68]	; (800653c <UARTEx_SetNbDataToProcess+0x94>)
 80064f8:	5c8a      	ldrb	r2, [r1, r2]
 80064fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064fe:	7b3a      	ldrb	r2, [r7, #12]
 8006500:	490f      	ldr	r1, [pc, #60]	; (8006540 <UARTEx_SetNbDataToProcess+0x98>)
 8006502:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006504:	fb93 f3f2 	sdiv	r3, r3, r2
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	7b7a      	ldrb	r2, [r7, #13]
 8006514:	4909      	ldr	r1, [pc, #36]	; (800653c <UARTEx_SetNbDataToProcess+0x94>)
 8006516:	5c8a      	ldrb	r2, [r1, r2]
 8006518:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800651c:	7b7a      	ldrb	r2, [r7, #13]
 800651e:	4908      	ldr	r1, [pc, #32]	; (8006540 <UARTEx_SetNbDataToProcess+0x98>)
 8006520:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006522:	fb93 f3f2 	sdiv	r3, r3, r2
 8006526:	b29a      	uxth	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	0800aadc 	.word	0x0800aadc
 8006540:	0800aae4 	.word	0x0800aae4

08006544 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800654e:	f107 0308 	add.w	r3, r7, #8
 8006552:	2218      	movs	r2, #24
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f8d8 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 800655c:	233f      	movs	r3, #63	; 0x3f
 800655e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006560:	2381      	movs	r3, #129	; 0x81
 8006562:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006564:	1dfb      	adds	r3, r7, #7
 8006566:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006568:	2301      	movs	r3, #1
 800656a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800656c:	f107 0308 	add.w	r3, r7, #8
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f001 fb54 	bl	8007c20 <hci_send_req>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	da01      	bge.n	8006582 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800657e:	23ff      	movs	r3, #255	; 0xff
 8006580:	e000      	b.n	8006584 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006582:	79fb      	ldrb	r3, [r7, #7]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800658c:	b5b0      	push	{r4, r5, r7, lr}
 800658e:	b0ce      	sub	sp, #312	; 0x138
 8006590:	af00      	add	r7, sp, #0
 8006592:	4605      	mov	r5, r0
 8006594:	460c      	mov	r4, r1
 8006596:	4610      	mov	r0, r2
 8006598:	4619      	mov	r1, r3
 800659a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800659e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80065a2:	462a      	mov	r2, r5
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065aa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065ae:	4622      	mov	r2, r4
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065b6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80065ba:	4602      	mov	r2, r0
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065c2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80065c6:	460a      	mov	r2, r1
 80065c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80065ca:	f107 0310 	add.w	r3, r7, #16
 80065ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80065d2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80065d6:	3308      	adds	r3, #8
 80065d8:	f107 0210 	add.w	r2, r7, #16
 80065dc:	4413      	add	r3, r2
 80065de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80065e2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80065e6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80065ea:	4413      	add	r3, r2
 80065ec:	3309      	adds	r3, #9
 80065ee:	f107 0210 	add.w	r2, r7, #16
 80065f2:	4413      	add	r3, r2
 80065f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80065f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065fc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800660a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800660e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006612:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006616:	7812      	ldrb	r2, [r2, #0]
 8006618:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800661a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800661e:	3301      	adds	r3, #1
 8006620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006624:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006628:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800662c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006630:	8812      	ldrh	r2, [r2, #0]
 8006632:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800663a:	3302      	adds	r3, #2
 800663c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006640:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006644:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006648:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800664c:	8812      	ldrh	r2, [r2, #0]
 800664e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006656:	3302      	adds	r3, #2
 8006658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800665c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006660:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006664:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800666c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006670:	3301      	adds	r3, #1
 8006672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006676:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800667a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800667e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006684:	3301      	adds	r3, #1
 8006686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800668a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800668e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006692:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800669e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066a2:	3308      	adds	r3, #8
 80066a4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80066a8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f81d 	bl	80076ec <Osal_MemCpy>
    index_input += Local_Name_Length;
 80066b2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80066b6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066ba:	4413      	add	r3, r2
 80066bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80066c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066c4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066c8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80066ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066ce:	3301      	adds	r3, #1
 80066d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80066d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066d8:	3301      	adds	r3, #1
 80066da:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066de:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 f802 	bl	80076ec <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80066e8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80066ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066f0:	4413      	add	r3, r2
 80066f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80066fe:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006704:	3302      	adds	r3, #2
 8006706:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800670a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006712:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006718:	3302      	adds	r3, #2
 800671a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800671e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006722:	2218      	movs	r2, #24
 8006724:	2100      	movs	r1, #0
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fff0 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 800672c:	233f      	movs	r3, #63	; 0x3f
 800672e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006732:	2383      	movs	r3, #131	; 0x83
 8006734:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006738:	f107 0310 	add.w	r3, r7, #16
 800673c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006748:	f107 030f 	add.w	r3, r7, #15
 800674c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006750:	2301      	movs	r3, #1
 8006752:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f001 fa5f 	bl	8007c20 <hci_send_req>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	da01      	bge.n	800676c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006768:	23ff      	movs	r3, #255	; 0xff
 800676a:	e004      	b.n	8006776 <aci_gap_set_discoverable+0x1ea>
  return status;
 800676c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006770:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006774:	781b      	ldrb	r3, [r3, #0]
}
 8006776:	4618      	mov	r0, r3
 8006778:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800677c:	46bd      	mov	sp, r7
 800677e:	bdb0      	pop	{r4, r5, r7, pc}

08006780 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b0cc      	sub	sp, #304	; 0x130
 8006784:	af00      	add	r7, sp, #0
 8006786:	4602      	mov	r2, r0
 8006788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006790:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006792:	f107 0310 	add.w	r3, r7, #16
 8006796:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800679a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80067ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067b4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80067bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067c0:	3301      	adds	r3, #1
 80067c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067ca:	2218      	movs	r2, #24
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 ff9c 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 80067d4:	233f      	movs	r3, #63	; 0x3f
 80067d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80067da:	2385      	movs	r3, #133	; 0x85
 80067dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067e0:	f107 0310 	add.w	r3, r7, #16
 80067e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80067f0:	f107 030f 	add.w	r3, r7, #15
 80067f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fa0b 	bl	8007c20 <hci_send_req>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	da01      	bge.n	8006814 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006810:	23ff      	movs	r3, #255	; 0xff
 8006812:	e004      	b.n	800681e <aci_gap_set_io_capability+0x9e>
  return status;
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800681c:	781b      	ldrb	r3, [r3, #0]
}
 800681e:	4618      	mov	r0, r3
 8006820:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006828:	b5b0      	push	{r4, r5, r7, lr}
 800682a:	b0cc      	sub	sp, #304	; 0x130
 800682c:	af00      	add	r7, sp, #0
 800682e:	4605      	mov	r5, r0
 8006830:	460c      	mov	r4, r1
 8006832:	4610      	mov	r0, r2
 8006834:	4619      	mov	r1, r3
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800683e:	462a      	mov	r2, r5
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800684a:	4622      	mov	r2, r4
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006856:	4602      	mov	r2, r0
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006862:	460a      	mov	r2, r1
 8006864:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006866:	f107 0310 	add.w	r3, r7, #16
 800686a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006884:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006888:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800688c:	7812      	ldrb	r2, [r2, #0]
 800688e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006894:	3301      	adds	r3, #1
 8006896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800689a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80068a6:	7812      	ldrb	r2, [r2, #0]
 80068a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80068aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ae:	3301      	adds	r3, #1
 80068b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068bc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80068c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068c8:	3301      	adds	r3, #1
 80068ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80068ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068da:	7812      	ldrb	r2, [r2, #0]
 80068dc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80068de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068e2:	3301      	adds	r3, #1
 80068e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80068e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ec:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80068f0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80068f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068f6:	3301      	adds	r3, #1
 80068f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80068fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006900:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006904:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006906:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800690a:	3301      	adds	r3, #1
 800690c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006918:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800691a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800692c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006934:	3304      	adds	r3, #4
 8006936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800693a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006942:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006948:	3301      	adds	r3, #1
 800694a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800694e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006952:	2218      	movs	r2, #24
 8006954:	2100      	movs	r1, #0
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fed8 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 800695c:	233f      	movs	r3, #63	; 0x3f
 800695e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006962:	2386      	movs	r3, #134	; 0x86
 8006964:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006974:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006978:	f107 030f 	add.w	r3, r7, #15
 800697c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006980:	2301      	movs	r3, #1
 8006982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006986:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f001 f947 	bl	8007c20 <hci_send_req>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	da01      	bge.n	800699c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006998:	23ff      	movs	r3, #255	; 0xff
 800699a:	e004      	b.n	80069a6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800699c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80069a4:	781b      	ldrb	r3, [r3, #0]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bdb0      	pop	{r4, r5, r7, pc}

080069b0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b0cc      	sub	sp, #304	; 0x130
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4602      	mov	r2, r0
 80069b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c0:	6019      	str	r1, [r3, #0]
 80069c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80069ca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80069cc:	f107 0310 	add.w	r3, r7, #16
 80069d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80069d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069ee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80069f2:	8812      	ldrh	r2, [r2, #0]
 80069f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80069f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069fa:	3302      	adds	r3, #2
 80069fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a08:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006a12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a16:	3304      	adds	r3, #4
 8006a18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a20:	2218      	movs	r2, #24
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fe71 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a2a:	233f      	movs	r3, #63	; 0x3f
 8006a2c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006a30:	2388      	movs	r3, #136	; 0x88
 8006a32:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a36:	f107 0310 	add.w	r3, r7, #16
 8006a3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a46:	f107 030f 	add.w	r3, r7, #15
 8006a4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f8e0 	bl	8007c20 <hci_send_req>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	da01      	bge.n	8006a6a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006a66:	23ff      	movs	r3, #255	; 0xff
 8006a68:	e004      	b.n	8006a74 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a72:	781b      	ldrb	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006a7e:	b590      	push	{r4, r7, lr}
 8006a80:	b0cd      	sub	sp, #308	; 0x134
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	4604      	mov	r4, r0
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a8e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a9c:	4622      	mov	r2, r4
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ab8:	f107 0310 	add.w	r3, r7, #16
 8006abc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ac0:	f107 0308 	add.w	r3, r7, #8
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fe1f 	bl	800770c <Osal_MemSet>
  int index_input = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006adc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006af6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b02:	3301      	adds	r3, #1
 8006b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b10:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006b14:	7812      	ldrb	r2, [r2, #0]
 8006b16:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b26:	2218      	movs	r2, #24
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 fdee 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b30:	233f      	movs	r3, #63	; 0x3f
 8006b32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006b36:	238a      	movs	r3, #138	; 0x8a
 8006b38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b3c:	f107 0310 	add.w	r3, r7, #16
 8006b40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006b4c:	f107 0308 	add.w	r3, r7, #8
 8006b50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006b54:	2307      	movs	r3, #7
 8006b56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b5e:	2100      	movs	r1, #0
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 f85d 	bl	8007c20 <hci_send_req>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da01      	bge.n	8006b70 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006b6c:	23ff      	movs	r3, #255	; 0xff
 8006b6e:	e02e      	b.n	8006bce <aci_gap_init+0x150>
  if ( resp.Status )
 8006b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <aci_gap_init+0x10c>
    return resp.Status;
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	e021      	b.n	8006bce <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006bb6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bc0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006bca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd90      	pop	{r4, r7, pc}

08006bd8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b0cc      	sub	sp, #304	; 0x130
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4602      	mov	r2, r0
 8006be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be8:	6019      	str	r1, [r3, #0]
 8006bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006bf2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006bf4:	f107 0310 	add.w	r3, r7, #16
 8006bf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c16:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c22:	3301      	adds	r3, #1
 8006c24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2c:	1c58      	adds	r0, r3, #1
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c36:	781a      	ldrb	r2, [r3, #0]
 8006c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	f000 fd53 	bl	80076ec <Osal_MemCpy>
  index_input += AdvDataLen;
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006c54:	4413      	add	r3, r2
 8006c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c5e:	2218      	movs	r2, #24
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fd52 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c68:	233f      	movs	r3, #63	; 0x3f
 8006c6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006c6e:	238e      	movs	r3, #142	; 0x8e
 8006c70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c84:	f107 030f 	add.w	r3, r7, #15
 8006c88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c96:	2100      	movs	r1, #0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 ffc1 	bl	8007c20 <hci_send_req>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	da01      	bge.n	8006ca8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006ca4:	23ff      	movs	r3, #255	; 0xff
 8006ca6:	e004      	b.n	8006cb2 <aci_gap_update_adv_data+0xda>
  return status;
 8006ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cb0:	781b      	ldrb	r3, [r3, #0]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cc6:	f107 0308 	add.w	r3, r7, #8
 8006cca:	2218      	movs	r2, #24
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fd1c 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cd4:	233f      	movs	r3, #63	; 0x3f
 8006cd6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006cd8:	2392      	movs	r3, #146	; 0x92
 8006cda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006cdc:	1dfb      	adds	r3, r7, #7
 8006cde:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 ff98 	bl	8007c20 <hci_send_req>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da01      	bge.n	8006cfa <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006cf6:	23ff      	movs	r3, #255	; 0xff
 8006cf8:	e000      	b.n	8006cfc <aci_gap_configure_whitelist+0x40>
  return status;
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3720      	adds	r7, #32
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b0cc      	sub	sp, #304	; 0x130
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d10:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006d1e:	460a      	mov	r2, r1
 8006d20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006d22:	f107 0310 	add.w	r3, r7, #16
 8006d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d44:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d50:	3302      	adds	r3, #2
 8006d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d5e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006d62:	7812      	ldrb	r2, [r2, #0]
 8006d64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d74:	2218      	movs	r2, #24
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fcc7 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d7e:	233f      	movs	r3, #63	; 0x3f
 8006d80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006d84:	23a5      	movs	r3, #165	; 0xa5
 8006d86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d8a:	f107 0310 	add.w	r3, r7, #16
 8006d8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d9a:	f107 030f 	add.w	r3, r7, #15
 8006d9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 ff36 	bl	8007c20 <hci_send_req>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da01      	bge.n	8006dbe <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006dba:	23ff      	movs	r3, #255	; 0xff
 8006dbc:	e004      	b.n	8006dc8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006dc6:	781b      	ldrb	r3, [r3, #0]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b088      	sub	sp, #32
 8006dd6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ddc:	f107 0308 	add.w	r3, r7, #8
 8006de0:	2218      	movs	r2, #24
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fc91 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006dea:	233f      	movs	r3, #63	; 0x3f
 8006dec:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006dee:	f240 1301 	movw	r3, #257	; 0x101
 8006df2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006df4:	1dfb      	adds	r3, r7, #7
 8006df6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 ff0c 	bl	8007c20 <hci_send_req>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da01      	bge.n	8006e12 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006e0e:	23ff      	movs	r3, #255	; 0xff
 8006e10:	e000      	b.n	8006e14 <aci_gatt_init+0x42>
  return status;
 8006e12:	79fb      	ldrb	r3, [r7, #7]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3720      	adds	r7, #32
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b0cf      	sub	sp, #316	; 0x13c
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006e28:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006e2c:	6001      	str	r1, [r0, #0]
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e36:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e42:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006e46:	4602      	mov	r2, r0
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e4e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006e52:	460a      	mov	r2, r1
 8006e54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006e5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e62:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d00a      	beq.n	8006e82 <aci_gatt_add_service+0x66>
 8006e6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e70:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d101      	bne.n	8006e7e <aci_gatt_add_service+0x62>
 8006e7a:	2311      	movs	r3, #17
 8006e7c:	e002      	b.n	8006e84 <aci_gatt_add_service+0x68>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <aci_gatt_add_service+0x68>
 8006e82:	2303      	movs	r3, #3
 8006e84:	f107 0210 	add.w	r2, r7, #16
 8006e88:	4413      	add	r3, r2
 8006e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006e8e:	f107 030c 	add.w	r3, r7, #12
 8006e92:	2203      	movs	r2, #3
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fc38 	bl	800770c <Osal_MemSet>
  int index_input = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006ea2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ea6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006eaa:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006ebc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ec0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d002      	beq.n	8006ed0 <aci_gatt_add_service+0xb4>
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d004      	beq.n	8006ed8 <aci_gatt_add_service+0xbc>
 8006ece:	e007      	b.n	8006ee0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006ed6:	e005      	b.n	8006ee4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006ede:	e001      	b.n	8006ee4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006ee0:	2397      	movs	r3, #151	; 0x97
 8006ee2:	e06c      	b.n	8006fbe <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006ee4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ee8:	1c58      	adds	r0, r3, #1
 8006eea:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006eee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ef2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006ef6:	6819      	ldr	r1, [r3, #0]
 8006ef8:	f000 fbf8 	bl	80076ec <Osal_MemCpy>
    index_input += size;
 8006efc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006f00:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f04:	4413      	add	r3, r2
 8006f06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f12:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f1e:	3301      	adds	r3, #1
 8006f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f28:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f2c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f38:	3301      	adds	r3, #1
 8006f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f42:	2218      	movs	r2, #24
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fbe0 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f4c:	233f      	movs	r3, #63	; 0x3f
 8006f4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006f52:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006f56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f5a:	f107 0310 	add.w	r3, r7, #16
 8006f5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006f6a:	f107 030c 	add.w	r3, r7, #12
 8006f6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006f72:	2303      	movs	r3, #3
 8006f74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fe4e 	bl	8007c20 <hci_send_req>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da01      	bge.n	8006f8e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006f8a:	23ff      	movs	r3, #255	; 0xff
 8006f8c:	e017      	b.n	8006fbe <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006f8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	e00a      	b.n	8006fbe <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006fa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fb0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006fba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd90      	pop	{r4, r7, pc}

08006fc8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b0d1      	sub	sp, #324	; 0x144
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006fd6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006fda:	600a      	str	r2, [r1, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006fe2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006fee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006ffa:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006ffe:	460a      	mov	r2, r1
 8007000:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800700a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800700e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d00a      	beq.n	800702e <aci_gatt_add_char+0x66>
 8007018:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800701c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d101      	bne.n	800702a <aci_gatt_add_char+0x62>
 8007026:	2313      	movs	r3, #19
 8007028:	e002      	b.n	8007030 <aci_gatt_add_char+0x68>
 800702a:	2303      	movs	r3, #3
 800702c:	e000      	b.n	8007030 <aci_gatt_add_char+0x68>
 800702e:	2305      	movs	r3, #5
 8007030:	f107 0218 	add.w	r2, r7, #24
 8007034:	4413      	add	r3, r2
 8007036:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800703a:	f107 0314 	add.w	r3, r7, #20
 800703e:	2203      	movs	r2, #3
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fb62 	bl	800770c <Osal_MemSet>
  int index_input = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800704e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007052:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007056:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800705a:	8812      	ldrh	r2, [r2, #0]
 800705c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800705e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007062:	3302      	adds	r3, #2
 8007064:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007068:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800706c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007070:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007074:	7812      	ldrb	r2, [r2, #0]
 8007076:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007078:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007082:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007086:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d002      	beq.n	8007096 <aci_gatt_add_char+0xce>
 8007090:	2b02      	cmp	r3, #2
 8007092:	d004      	beq.n	800709e <aci_gatt_add_char+0xd6>
 8007094:	e007      	b.n	80070a6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007096:	2302      	movs	r3, #2
 8007098:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800709c:	e005      	b.n	80070aa <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800709e:	2310      	movs	r3, #16
 80070a0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80070a4:	e001      	b.n	80070aa <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80070a6:	2397      	movs	r3, #151	; 0x97
 80070a8:	e091      	b.n	80071ce <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80070aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070ae:	1cd8      	adds	r0, r3, #3
 80070b0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80070b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070b8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80070bc:	6819      	ldr	r1, [r3, #0]
 80070be:	f000 fb15 	bl	80076ec <Osal_MemCpy>
    index_input += size;
 80070c2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80070c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80070ca:	4413      	add	r3, r2
 80070cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80070d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070d4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80070d8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80070dc:	8812      	ldrh	r2, [r2, #0]
 80070de:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80070e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070e4:	3302      	adds	r3, #2
 80070e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80070ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070ee:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80070f2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80070f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070f8:	3301      	adds	r3, #1
 80070fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80070fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007102:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007106:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007108:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800710c:	3301      	adds	r3, #1
 800710e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007112:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007116:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800711a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800711c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007120:	3301      	adds	r3, #1
 8007122:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007126:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800712a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800712e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007134:	3301      	adds	r3, #1
 8007136:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800713a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800713e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007142:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007144:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007148:	3301      	adds	r3, #1
 800714a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800714e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007152:	2218      	movs	r2, #24
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fad8 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 800715c:	233f      	movs	r3, #63	; 0x3f
 800715e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007162:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007166:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800716a:	f107 0318 	add.w	r3, r7, #24
 800716e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007172:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007176:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800717a:	f107 0314 	add.w	r3, r7, #20
 800717e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007182:	2303      	movs	r3, #3
 8007184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007188:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fd46 	bl	8007c20 <hci_send_req>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	da01      	bge.n	800719e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800719a:	23ff      	movs	r3, #255	; 0xff
 800719c:	e017      	b.n	80071ce <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800719e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80071ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	e00a      	b.n	80071ce <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80071b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80071ca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}

080071d8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80071d8:	b5b0      	push	{r4, r5, r7, lr}
 80071da:	b0cc      	sub	sp, #304	; 0x130
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4605      	mov	r5, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	4610      	mov	r0, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071ee:	462a      	mov	r2, r5
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fa:	4622      	mov	r2, r4
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007206:	4602      	mov	r2, r0
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007212:	460a      	mov	r2, r1
 8007214:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007216:	f107 0310 	add.w	r3, r7, #16
 800721a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007234:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007238:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800723c:	8812      	ldrh	r2, [r2, #0]
 800723e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007240:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007244:	3302      	adds	r3, #2
 8007246:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800724a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007252:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007256:	8812      	ldrh	r2, [r2, #0]
 8007258:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800725a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800725e:	3302      	adds	r3, #2
 8007260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800726c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007278:	3301      	adds	r3, #1
 800727a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800727e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007286:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800728e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007292:	3301      	adds	r3, #1
 8007294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729c:	1d98      	adds	r0, r3, #6
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80072ae:	f000 fa1d 	bl	80076ec <Osal_MemCpy>
  index_input += Char_Value_Length;
 80072b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80072c0:	4413      	add	r3, r2
 80072c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072ca:	2218      	movs	r2, #24
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fa1c 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 80072d4:	233f      	movs	r3, #63	; 0x3f
 80072d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80072da:	f44f 7383 	mov.w	r3, #262	; 0x106
 80072de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072e2:	f107 0310 	add.w	r3, r7, #16
 80072e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80072f2:	f107 030f 	add.w	r3, r7, #15
 80072f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fc8a 	bl	8007c20 <hci_send_req>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	da01      	bge.n	8007316 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007312:	23ff      	movs	r3, #255	; 0xff
 8007314:	e004      	b.n	8007320 <aci_gatt_update_char_value+0x148>
  return status;
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800731e:	781b      	ldrb	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007326:	46bd      	mov	sp, r7
 8007328:	bdb0      	pop	{r4, r5, r7, pc}

0800732a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b0cc      	sub	sp, #304	; 0x130
 800732e:	af00      	add	r7, sp, #0
 8007330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007342:	4602      	mov	r2, r0
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800734e:	460a      	mov	r2, r1
 8007350:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007352:	f107 0310 	add.w	r3, r7, #16
 8007356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800735a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800736c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007370:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007374:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800737c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007380:	3301      	adds	r3, #1
 8007382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800738e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007392:	7812      	ldrb	r2, [r2, #0]
 8007394:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739a:	3301      	adds	r3, #1
 800739c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	1c98      	adds	r0, r3, #2
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	f000 f997 	bl	80076ec <Osal_MemCpy>
  index_input += Length;
 80073be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073cc:	4413      	add	r3, r2
 80073ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073d6:	2218      	movs	r2, #24
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f996 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073e0:	233f      	movs	r3, #63	; 0x3f
 80073e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80073e6:	230c      	movs	r3, #12
 80073e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073ec:	f107 0310 	add.w	r3, r7, #16
 80073f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073fc:	f107 030f 	add.w	r3, r7, #15
 8007400:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007404:	2301      	movs	r3, #1
 8007406:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800740a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fc05 	bl	8007c20 <hci_send_req>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	da01      	bge.n	8007420 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800741c:	23ff      	movs	r3, #255	; 0xff
 800741e:	e004      	b.n	800742a <aci_hal_write_config_data+0x100>
  return status;
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007428:	781b      	ldrb	r3, [r3, #0]
}
 800742a:	4618      	mov	r0, r3
 800742c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b0cc      	sub	sp, #304	; 0x130
 8007438:	af00      	add	r7, sp, #0
 800743a:	4602      	mov	r2, r0
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800744e:	460a      	mov	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007452:	f107 0310 	add.w	r3, r7, #16
 8007456:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800746c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007470:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007474:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800747c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007480:	3301      	adds	r3, #1
 8007482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800748e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800749a:	3301      	adds	r3, #1
 800749c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074a4:	2218      	movs	r2, #24
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f92f 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 80074ae:	233f      	movs	r3, #63	; 0x3f
 80074b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80074b4:	230f      	movs	r3, #15
 80074b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074ba:	f107 0310 	add.w	r3, r7, #16
 80074be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074ca:	f107 030f 	add.w	r3, r7, #15
 80074ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fb9e 	bl	8007c20 <hci_send_req>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da01      	bge.n	80074ee <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80074ea:	23ff      	movs	r3, #255	; 0xff
 80074ec:	e004      	b.n	80074f8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074f6:	781b      	ldrb	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b0cc      	sub	sp, #304	; 0x130
 8007506:	af00      	add	r7, sp, #0
 8007508:	4602      	mov	r2, r0
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007512:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007514:	f107 0310 	add.w	r3, r7, #16
 8007518:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800751c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007520:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800752e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007532:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007536:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800753e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007542:	3302      	adds	r3, #2
 8007544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007548:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800754c:	2218      	movs	r2, #24
 800754e:	2100      	movs	r1, #0
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f8db 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007556:	233f      	movs	r3, #63	; 0x3f
 8007558:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800755c:	2318      	movs	r3, #24
 800755e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007562:	f107 0310 	add.w	r3, r7, #16
 8007566:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800756a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800756e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007572:	f107 030f 	add.w	r3, r7, #15
 8007576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800757a:	2301      	movs	r3, #1
 800757c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007580:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007584:	2100      	movs	r1, #0
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fb4a 	bl	8007c20 <hci_send_req>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	da01      	bge.n	8007596 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007592:	23ff      	movs	r3, #255	; 0xff
 8007594:	e004      	b.n	80075a0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800759e:	781b      	ldrb	r3, [r3, #0]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075b4:	f107 0308 	add.w	r3, r7, #8
 80075b8:	2218      	movs	r2, #24
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f8a5 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x03;
 80075c2:	2303      	movs	r3, #3
 80075c4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80075c6:	2303      	movs	r3, #3
 80075c8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80075ca:	1dfb      	adds	r3, r7, #7
 80075cc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80075ce:	2301      	movs	r3, #1
 80075d0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075d2:	f107 0308 	add.w	r3, r7, #8
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fb21 	bl	8007c20 <hci_send_req>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	da01      	bge.n	80075e8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80075e4:	23ff      	movs	r3, #255	; 0xff
 80075e6:	e000      	b.n	80075ea <hci_reset+0x40>
  return status;
 80075e8:	79fb      	ldrb	r3, [r7, #7]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3720      	adds	r7, #32
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80075f2:	b590      	push	{r4, r7, lr}
 80075f4:	b0cd      	sub	sp, #308	; 0x134
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007606:	4622      	mov	r2, r4
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007612:	4602      	mov	r2, r0
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800761e:	460a      	mov	r2, r1
 8007620:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007622:	f107 0310 	add.w	r3, r7, #16
 8007626:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800763c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007640:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007644:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007648:	7812      	ldrb	r2, [r2, #0]
 800764a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800764c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007650:	3301      	adds	r3, #1
 8007652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800765e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800766a:	3301      	adds	r3, #1
 800766c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007678:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007684:	3301      	adds	r3, #1
 8007686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800768a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800768e:	2218      	movs	r2, #24
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f83a 	bl	800770c <Osal_MemSet>
  rq.ogf = 0x08;
 8007698:	2308      	movs	r3, #8
 800769a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800769e:	2331      	movs	r3, #49	; 0x31
 80076a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076a4:	f107 0310 	add.w	r3, r7, #16
 80076a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076b4:	f107 030f 	add.w	r3, r7, #15
 80076b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076bc:	2301      	movs	r3, #1
 80076be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 faa9 	bl	8007c20 <hci_send_req>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da01      	bge.n	80076d8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80076d4:	23ff      	movs	r3, #255	; 0xff
 80076d6:	e004      	b.n	80076e2 <hci_le_set_default_phy+0xf0>
  return status;
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076e0:	781b      	ldrb	r3, [r3, #0]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd90      	pop	{r4, r7, pc}

080076ec <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f002 f8db 	bl	80098b8 <memcpy>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f002 f8d9 	bl	80098d4 <memset>
 8007722:	4603      	mov	r3, r0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return;
 8007730:	bf00      	nop
}
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800773a:	b480      	push	{r7}
 800773c:	af00      	add	r7, sp, #0
  return;
 800773e:	bf00      	nop
}
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return;
 800774c:	bf00      	nop
}
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0
  return;
 800775a:	bf00      	nop
}
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return;
 8007768:	bf00      	nop
}
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007772:	b480      	push	{r7}
 8007774:	af00      	add	r7, sp, #0
  return;
 8007776:	bf00      	nop
}
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return;
 8007784:	bf00      	nop
}
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800778e:	b480      	push	{r7}
 8007790:	af00      	add	r7, sp, #0
  return;
 8007792:	bf00      	nop
}
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return;
 80077a0:	bf00      	nop
}
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  return;
 80077ae:	bf00      	nop
}
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  return;
 80077bc:	bf00      	nop
}
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80077c6:	b480      	push	{r7}
 80077c8:	af00      	add	r7, sp, #0
  return;
 80077ca:	bf00      	nop
}
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  return;
 80077d8:	bf00      	nop
}
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80077e2:	b480      	push	{r7}
 80077e4:	af00      	add	r7, sp, #0
  return;
 80077e6:	bf00      	nop
}
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return;
 80077f4:	bf00      	nop
}
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80077fe:	b480      	push	{r7}
 8007800:	af00      	add	r7, sp, #0
  return;
 8007802:	bf00      	nop
}
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  return;
 8007810:	bf00      	nop
}
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <SVCCTL_Init+0x18>)
 8007822:	2200      	movs	r2, #0
 8007824:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007826:	4b04      	ldr	r3, [pc, #16]	; (8007838 <SVCCTL_Init+0x1c>)
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800782c:	f000 f806 	bl	800783c <SVCCTL_SvcInit>

  return;
 8007830:	bf00      	nop
}
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000910 	.word	0x20000910
 8007838:	20000930 	.word	0x20000930

0800783c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  BAS_Init();
 8007840:	f7ff ff74 	bl	800772c <BAS_Init>

  BLS_Init();
 8007844:	f7ff ff79 	bl	800773a <BLS_Init>

  CRS_STM_Init();
 8007848:	f7ff ff7e 	bl	8007748 <CRS_STM_Init>

  DIS_Init();
 800784c:	f7ff ff83 	bl	8007756 <DIS_Init>

  EDS_STM_Init();
 8007850:	f7ff ff88 	bl	8007764 <EDS_STM_Init>

  HIDS_Init();
 8007854:	f7ff ff8d 	bl	8007772 <HIDS_Init>

  HRS_Init();
 8007858:	f7ff ff92 	bl	8007780 <HRS_Init>

  HTS_Init();
 800785c:	f7ff ff97 	bl	800778e <HTS_Init>

  IAS_Init();
 8007860:	f7ff ff9c 	bl	800779c <IAS_Init>

  LLS_Init();
 8007864:	f7ff ffa1 	bl	80077aa <LLS_Init>

  TPS_Init();
 8007868:	f7ff ffa6 	bl	80077b8 <TPS_Init>

  MOTENV_STM_Init();
 800786c:	f7ff ffab 	bl	80077c6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007870:	f7ff ffb0 	bl	80077d4 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007874:	f7ff ffb5 	bl	80077e2 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007878:	f7ff ffba 	bl	80077f0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800787c:	f7ff ffc6 	bl	800780c <BVOPUS_STM_Init>

  MESH_Init();
 8007880:	f7ff ffbd 	bl	80077fe <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007884:	f001 faaa 	bl	8008ddc <SVCCTL_InitCustomSvc>
  
  return;
 8007888:	bf00      	nop
}
 800788a:	bd80      	pop	{r7, pc}

0800788c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <SVCCTL_RegisterSvcHandler+0x30>)
 8007896:	7f1b      	ldrb	r3, [r3, #28]
 8007898:	4619      	mov	r1, r3
 800789a:	4a08      	ldr	r2, [pc, #32]	; (80078bc <SVCCTL_RegisterSvcHandler+0x30>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <SVCCTL_RegisterSvcHandler+0x30>)
 80078a4:	7f1b      	ldrb	r3, [r3, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <SVCCTL_RegisterSvcHandler+0x30>)
 80078ac:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80078ae:	bf00      	nop
}
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000910 	.word	0x20000910

080078c0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3301      	adds	r3, #1
 80078cc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2bff      	cmp	r3, #255	; 0xff
 80078d8:	d125      	bne.n	8007926 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3302      	adds	r3, #2
 80078de:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078ee:	d118      	bne.n	8007922 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80078f0:	2300      	movs	r3, #0
 80078f2:	757b      	strb	r3, [r7, #21]
 80078f4:	e00d      	b.n	8007912 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80078f6:	7d7b      	ldrb	r3, [r7, #21]
 80078f8:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <SVCCTL_UserEvtRx+0xa4>)
 80078fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d108      	bne.n	800791e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800790c:	7d7b      	ldrb	r3, [r7, #21]
 800790e:	3301      	adds	r3, #1
 8007910:	757b      	strb	r3, [r7, #21]
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <SVCCTL_UserEvtRx+0xa4>)
 8007914:	7f1b      	ldrb	r3, [r3, #28]
 8007916:	7d7a      	ldrb	r2, [r7, #21]
 8007918:	429a      	cmp	r2, r3
 800791a:	d3ec      	bcc.n	80078f6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800791c:	e002      	b.n	8007924 <SVCCTL_UserEvtRx+0x64>
              break;
 800791e:	bf00      	nop
          break;
 8007920:	e000      	b.n	8007924 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007922:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007924:	e000      	b.n	8007928 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007926:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d00f      	beq.n	800794e <SVCCTL_UserEvtRx+0x8e>
 800792e:	2b02      	cmp	r3, #2
 8007930:	dc10      	bgt.n	8007954 <SVCCTL_UserEvtRx+0x94>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <SVCCTL_UserEvtRx+0x7c>
 8007936:	2b01      	cmp	r3, #1
 8007938:	d006      	beq.n	8007948 <SVCCTL_UserEvtRx+0x88>
 800793a:	e00b      	b.n	8007954 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 ff7b 	bl	8008838 <SVCCTL_App_Notification>
 8007942:	4603      	mov	r3, r0
 8007944:	75bb      	strb	r3, [r7, #22]
      break;
 8007946:	e008      	b.n	800795a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007948:	2301      	movs	r3, #1
 800794a:	75bb      	strb	r3, [r7, #22]
      break;
 800794c:	e005      	b.n	800795a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800794e:	2300      	movs	r3, #0
 8007950:	75bb      	strb	r3, [r7, #22]
      break;
 8007952:	e002      	b.n	800795a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007954:	2301      	movs	r3, #1
 8007956:	75bb      	strb	r3, [r7, #22]
      break;
 8007958:	bf00      	nop
  }

  return (return_status);
 800795a:	7dbb      	ldrb	r3, [r7, #22]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000910 	.word	0x20000910

08007968 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	212e      	movs	r1, #46	; 0x2e
 8007980:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007984:	f000 fae2 	bl	8007f4c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	330b      	adds	r3, #11
 800798c:	78db      	ldrb	r3, [r3, #3]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b088      	sub	sp, #32
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	210f      	movs	r1, #15
 80079ae:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80079b2:	f000 facb 	bl	8007f4c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	330b      	adds	r3, #11
 80079ba:	78db      	ldrb	r3, [r3, #3]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	2110      	movs	r1, #16
 80079d8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80079dc:	f000 fab6 	bl	8007f4c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	330b      	adds	r3, #11
 80079e4:	78db      	ldrb	r3, [r3, #3]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b08b      	sub	sp, #44	; 0x2c
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007a18:	4b4a      	ldr	r3, [pc, #296]	; (8007b44 <SHCI_GetWirelessFwInfo+0x154>)
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007a20:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007a2a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a44      	ldr	r2, [pc, #272]	; (8007b48 <SHCI_GetWirelessFwInfo+0x158>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d10f      	bne.n	8007a5c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e01a      	b.n	8007a92 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007a64:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007a68:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	0e1b      	lsrs	r3, r3, #24
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	0c1b      	lsrs	r3, r3, #16
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	0e1b      	lsrs	r3, r3, #24
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	0e1b      	lsrs	r3, r3, #24
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	0c1b      	lsrs	r3, r3, #16
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	0e1b      	lsrs	r3, r3, #24
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	0c1b      	lsrs	r3, r3, #16
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	372c      	adds	r7, #44	; 0x2c
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	58004000 	.word	0x58004000
 8007b48:	a94656b9 	.word	0xa94656b9

08007b4c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4a08      	ldr	r2, [pc, #32]	; (8007b7c <hci_init+0x30>)
 8007b5c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007b5e:	4a08      	ldr	r2, [pc, #32]	; (8007b80 <hci_init+0x34>)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007b64:	4806      	ldr	r0, [pc, #24]	; (8007b80 <hci_init+0x34>)
 8007b66:	f000 f973 	bl	8007e50 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f8d4 	bl	8007d1c <TlInit>

  return;
 8007b74:	bf00      	nop
}
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000ba4 	.word	0x20000ba4
 8007b80:	20000b7c 	.word	0x20000b7c

08007b84 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b8a:	4822      	ldr	r0, [pc, #136]	; (8007c14 <hci_user_evt_proc+0x90>)
 8007b8c:	f000 fd28 	bl	80085e0 <LST_is_empty>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d12b      	bne.n	8007bee <hci_user_evt_proc+0x6a>
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <hci_user_evt_proc+0x94>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d027      	beq.n	8007bee <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	481b      	ldr	r0, [pc, #108]	; (8007c14 <hci_user_evt_proc+0x90>)
 8007ba6:	f000 fdaa 	bl	80086fe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007baa:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <hci_user_evt_proc+0x98>)
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00c      	beq.n	8007bcc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007bba:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <hci_user_evt_proc+0x98>)
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	1d3a      	adds	r2, r7, #4
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007bc4:	793a      	ldrb	r2, [r7, #4]
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <hci_user_evt_proc+0x94>)
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e002      	b.n	8007bd2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007bcc:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <hci_user_evt_proc+0x94>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <hci_user_evt_proc+0x94>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fc03 	bl	80083e8 <TL_MM_EvtDone>
 8007be2:	e004      	b.n	8007bee <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4619      	mov	r1, r3
 8007be8:	480a      	ldr	r0, [pc, #40]	; (8007c14 <hci_user_evt_proc+0x90>)
 8007bea:	f000 fd1b 	bl	8008624 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007bee:	4809      	ldr	r0, [pc, #36]	; (8007c14 <hci_user_evt_proc+0x90>)
 8007bf0:	f000 fcf6 	bl	80085e0 <LST_is_empty>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <hci_user_evt_proc+0x86>
 8007bfa:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <hci_user_evt_proc+0x94>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007c02:	4804      	ldr	r0, [pc, #16]	; (8007c14 <hci_user_evt_proc+0x90>)
 8007c04:	f001 f830 	bl	8008c68 <hci_notify_asynch_evt>
  }


  return;
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
}
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000938 	.word	0x20000938
 8007c18:	20000944 	.word	0x20000944
 8007c1c:	20000b7c 	.word	0x20000b7c

08007c20 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f000 f8cb 	bl	8007dc8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007c32:	2300      	movs	r3, #0
 8007c34:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c40:	b21a      	sxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	029b      	lsls	r3, r3, #10
 8007c48:	b21b      	sxth	r3, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	b21b      	sxth	r3, r3
 8007c4e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	b2d9      	uxtb	r1, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	8bbb      	ldrh	r3, [r7, #28]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 f88d 	bl	8007d7c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007c62:	e04e      	b.n	8007d02 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007c64:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007c68:	f001 f815 	bl	8008c96 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c6c:	e043      	b.n	8007cf6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007c6e:	f107 030c 	add.w	r3, r7, #12
 8007c72:	4619      	mov	r1, r3
 8007c74:	4828      	ldr	r0, [pc, #160]	; (8007d18 <hci_send_req+0xf8>)
 8007c76:	f000 fd42 	bl	80086fe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	7a5b      	ldrb	r3, [r3, #9]
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	d114      	bne.n	8007cac <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	330b      	adds	r3, #11
 8007c86:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	885b      	ldrh	r3, [r3, #2]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	8bba      	ldrh	r2, [r7, #28]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d104      	bne.n	8007c9e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	7812      	ldrb	r2, [r2, #0]
 8007c9c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	785b      	ldrb	r3, [r3, #1]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d027      	beq.n	8007cf6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e024      	b.n	8007cf6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	330b      	adds	r3, #11
 8007cb0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8bba      	ldrh	r2, [r7, #28]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d114      	bne.n	8007cea <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	7a9b      	ldrb	r3, [r3, #10]
 8007cc4:	3b03      	subs	r3, #3
 8007cc6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695a      	ldr	r2, [r3, #20]
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	bfa8      	it	ge
 8007cd2:	461a      	movge	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6918      	ldr	r0, [r3, #16]
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	1cd9      	adds	r1, r3, #3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f001 fde7 	bl	80098b8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007cf6:	4808      	ldr	r0, [pc, #32]	; (8007d18 <hci_send_req+0xf8>)
 8007cf8:	f000 fc72 	bl	80085e0 <LST_is_empty>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0b5      	beq.n	8007c6e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007d02:	7ffb      	ldrb	r3, [r7, #31]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0ad      	beq.n	8007c64 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007d08:	2001      	movs	r0, #1
 8007d0a:	f000 f85d 	bl	8007dc8 <NotifyCmdStatus>

  return 0;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000b9c 	.word	0x20000b9c

08007d1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007d24:	480f      	ldr	r0, [pc, #60]	; (8007d64 <TlInit+0x48>)
 8007d26:	f000 fc4b 	bl	80085c0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007d2a:	4a0f      	ldr	r2, [pc, #60]	; (8007d68 <TlInit+0x4c>)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007d30:	480e      	ldr	r0, [pc, #56]	; (8007d6c <TlInit+0x50>)
 8007d32:	f000 fc45 	bl	80085c0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <TlInit+0x54>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <TlInit+0x58>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <TlInit+0x5c>)
 8007d4a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <TlInit+0x58>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f107 0208 	add.w	r2, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
  }

  return;
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
}
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000b9c 	.word	0x20000b9c
 8007d68:	20000940 	.word	0x20000940
 8007d6c:	20000938 	.word	0x20000938
 8007d70:	20000944 	.word	0x20000944
 8007d74:	20000b7c 	.word	0x20000b7c
 8007d78:	08007e09 	.word	0x08007e09

08007d7c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	603a      	str	r2, [r7, #0]
 8007d86:	80fb      	strh	r3, [r7, #6]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <SendCmd+0x44>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	88fa      	ldrh	r2, [r7, #6]
 8007d92:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007d96:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <SendCmd+0x44>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	797a      	ldrb	r2, [r7, #5]
 8007d9c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007d9e:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <SendCmd+0x44>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	797a      	ldrb	r2, [r7, #5]
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fd85 	bl	80098b8 <memcpy>

  hciContext.io.Send(0,0);
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <SendCmd+0x48>)
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2100      	movs	r1, #0
 8007db4:	2000      	movs	r0, #0
 8007db6:	4798      	blx	r3

  return;
 8007db8:	bf00      	nop
}
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000940 	.word	0x20000940
 8007dc4:	20000b7c 	.word	0x20000b7c

08007dc8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d108      	bne.n	8007dea <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <NotifyCmdStatus+0x3c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00d      	beq.n	8007dfc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007de0:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <NotifyCmdStatus+0x3c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2000      	movs	r0, #0
 8007de6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007de8:	e008      	b.n	8007dfc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007dea:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <NotifyCmdStatus+0x3c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007df2:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <NotifyCmdStatus+0x3c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2001      	movs	r0, #1
 8007df8:	4798      	blx	r3
  return;
 8007dfa:	bf00      	nop
 8007dfc:	bf00      	nop
}
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000ba4 	.word	0x20000ba4

08007e08 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7a5b      	ldrb	r3, [r3, #9]
 8007e14:	2b0f      	cmp	r3, #15
 8007e16:	d003      	beq.n	8007e20 <TlEvtReceived+0x18>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	7a5b      	ldrb	r3, [r3, #9]
 8007e1c:	2b0e      	cmp	r3, #14
 8007e1e:	d107      	bne.n	8007e30 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	4809      	ldr	r0, [pc, #36]	; (8007e48 <TlEvtReceived+0x40>)
 8007e24:	f000 fc24 	bl	8008670 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f000 ff29 	bl	8008c80 <hci_cmd_resp_release>
 8007e2e:	e006      	b.n	8007e3e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4806      	ldr	r0, [pc, #24]	; (8007e4c <TlEvtReceived+0x44>)
 8007e34:	f000 fc1c 	bl	8008670 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007e38:	4804      	ldr	r0, [pc, #16]	; (8007e4c <TlEvtReceived+0x44>)
 8007e3a:	f000 ff15 	bl	8008c68 <hci_notify_asynch_evt>
  }

  return;
 8007e3e:	bf00      	nop
}
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000b9c 	.word	0x20000b9c
 8007e4c:	20000938 	.word	0x20000938

08007e50 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a05      	ldr	r2, [pc, #20]	; (8007e70 <hci_register_io_bus+0x20>)
 8007e5c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a04      	ldr	r2, [pc, #16]	; (8007e74 <hci_register_io_bus+0x24>)
 8007e62:	611a      	str	r2, [r3, #16]

  return;
 8007e64:	bf00      	nop
}
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	08008161 	.word	0x08008161
 8007e74:	080081c9 	.word	0x080081c9

08007e78 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	4a08      	ldr	r2, [pc, #32]	; (8007ea8 <shci_init+0x30>)
 8007e88:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007e8a:	4a08      	ldr	r2, [pc, #32]	; (8007eac <shci_init+0x34>)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007e90:	4806      	ldr	r0, [pc, #24]	; (8007eac <shci_init+0x34>)
 8007e92:	f000 f911 	bl	80080b8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f894 	bl	8007fc8 <TlInit>

  return;
 8007ea0:	bf00      	nop
}
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20000bc8 	.word	0x20000bc8
 8007eac:	20000ba8 	.word	0x20000ba8

08007eb0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007eb6:	4822      	ldr	r0, [pc, #136]	; (8007f40 <shci_user_evt_proc+0x90>)
 8007eb8:	f000 fb92 	bl	80085e0 <LST_is_empty>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d12b      	bne.n	8007f1a <shci_user_evt_proc+0x6a>
 8007ec2:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <shci_user_evt_proc+0x94>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d027      	beq.n	8007f1a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007eca:	f107 030c 	add.w	r3, r7, #12
 8007ece:	4619      	mov	r1, r3
 8007ed0:	481b      	ldr	r0, [pc, #108]	; (8007f40 <shci_user_evt_proc+0x90>)
 8007ed2:	f000 fc14 	bl	80086fe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <shci_user_evt_proc+0x98>)
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007ee6:	4b18      	ldr	r3, [pc, #96]	; (8007f48 <shci_user_evt_proc+0x98>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	1d3a      	adds	r2, r7, #4
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007ef0:	793a      	ldrb	r2, [r7, #4]
 8007ef2:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <shci_user_evt_proc+0x94>)
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007ef8:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <shci_user_evt_proc+0x94>)
 8007efa:	2201      	movs	r2, #1
 8007efc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <shci_user_evt_proc+0x94>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fa6d 	bl	80083e8 <TL_MM_EvtDone>
 8007f0e:	e004      	b.n	8007f1a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4619      	mov	r1, r3
 8007f14:	480a      	ldr	r0, [pc, #40]	; (8007f40 <shci_user_evt_proc+0x90>)
 8007f16:	f000 fb85 	bl	8008624 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f1a:	4809      	ldr	r0, [pc, #36]	; (8007f40 <shci_user_evt_proc+0x90>)
 8007f1c:	f000 fb60 	bl	80085e0 <LST_is_empty>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <shci_user_evt_proc+0x86>
 8007f26:	4b07      	ldr	r3, [pc, #28]	; (8007f44 <shci_user_evt_proc+0x94>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007f2e:	4804      	ldr	r0, [pc, #16]	; (8007f40 <shci_user_evt_proc+0x90>)
 8007f30:	f7f8 ff64 	bl	8000dfc <shci_notify_asynch_evt>
  }


  return;
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
}
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000948 	.word	0x20000948
 8007f44:	20000958 	.word	0x20000958
 8007f48:	20000ba8 	.word	0x20000ba8

08007f4c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60ba      	str	r2, [r7, #8]
 8007f54:	607b      	str	r3, [r7, #4]
 8007f56:	4603      	mov	r3, r0
 8007f58:	81fb      	strh	r3, [r7, #14]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f000 f864 	bl	800802c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <shci_send+0x74>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	89fa      	ldrh	r2, [r7, #14]
 8007f6a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007f6e:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <shci_send+0x74>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	7b7a      	ldrb	r2, [r7, #13]
 8007f74:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007f76:	4b12      	ldr	r3, [pc, #72]	; (8007fc0 <shci_send+0x74>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	330c      	adds	r3, #12
 8007f7c:	7b7a      	ldrb	r2, [r7, #13]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 fc99 	bl	80098b8 <memcpy>

  shciContext.io.Send(0,0);
 8007f86:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <shci_send+0x78>)
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007f90:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007f94:	f7f8 ff49 	bl	8000e2a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f103 0008 	add.w	r0, r3, #8
 8007f9e:	4b08      	ldr	r3, [pc, #32]	; (8007fc0 <shci_send+0x74>)
 8007fa0:	6819      	ldr	r1, [r3, #0]
 8007fa2:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <shci_send+0x74>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	789b      	ldrb	r3, [r3, #2]
 8007fa8:	3303      	adds	r3, #3
 8007faa:	461a      	mov	r2, r3
 8007fac:	f001 fc84 	bl	80098b8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	f000 f83b 	bl	800802c <Cmd_SetStatus>

  return;
 8007fb6:	bf00      	nop
}
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000954 	.word	0x20000954
 8007fc4:	20000ba8 	.word	0x20000ba8

08007fc8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007fd0:	4a10      	ldr	r2, [pc, #64]	; (8008014 <TlInit+0x4c>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007fd6:	4810      	ldr	r0, [pc, #64]	; (8008018 <TlInit+0x50>)
 8007fd8:	f000 faf2 	bl	80085c0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007fdc:	2001      	movs	r0, #1
 8007fde:	f000 f825 	bl	800802c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <TlInit+0x54>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <TlInit+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007ff4:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <TlInit+0x5c>)
 8007ff6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <TlInit+0x60>)
 8007ffa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007ffc:	4b08      	ldr	r3, [pc, #32]	; (8008020 <TlInit+0x58>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f107 020c 	add.w	r2, r7, #12
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
  }

  return;
 8008008:	bf00      	nop
 800800a:	bf00      	nop
}
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000954 	.word	0x20000954
 8008018:	20000948 	.word	0x20000948
 800801c:	20000958 	.word	0x20000958
 8008020:	20000ba8 	.word	0x20000ba8
 8008024:	0800807d 	.word	0x0800807d
 8008028:	08008095 	.word	0x08008095

0800802c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10b      	bne.n	8008054 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800803c:	4b0d      	ldr	r3, [pc, #52]	; (8008074 <Cmd_SetStatus+0x48>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008044:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <Cmd_SetStatus+0x48>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2000      	movs	r0, #0
 800804a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <Cmd_SetStatus+0x4c>)
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008052:	e00b      	b.n	800806c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008054:	4b08      	ldr	r3, [pc, #32]	; (8008078 <Cmd_SetStatus+0x4c>)
 8008056:	2201      	movs	r2, #1
 8008058:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <Cmd_SetStatus+0x48>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008062:	4b04      	ldr	r3, [pc, #16]	; (8008074 <Cmd_SetStatus+0x48>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2001      	movs	r0, #1
 8008068:	4798      	blx	r3
  return;
 800806a:	bf00      	nop
 800806c:	bf00      	nop
}
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000bc8 	.word	0x20000bc8
 8008078:	20000950 	.word	0x20000950

0800807c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008084:	2000      	movs	r0, #0
 8008086:	f7f8 fec5 	bl	8000e14 <shci_cmd_resp_release>

  return;
 800808a:	bf00      	nop
}
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4805      	ldr	r0, [pc, #20]	; (80080b4 <TlUserEvtReceived+0x20>)
 80080a0:	f000 fae6 	bl	8008670 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80080a4:	4803      	ldr	r0, [pc, #12]	; (80080b4 <TlUserEvtReceived+0x20>)
 80080a6:	f7f8 fea9 	bl	8000dfc <shci_notify_asynch_evt>

  return;
 80080aa:	bf00      	nop
}
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000948 	.word	0x20000948

080080b8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a05      	ldr	r2, [pc, #20]	; (80080d8 <shci_register_io_bus+0x20>)
 80080c4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a04      	ldr	r2, [pc, #16]	; (80080dc <shci_register_io_bus+0x24>)
 80080ca:	611a      	str	r2, [r3, #16]

  return;
 80080cc:	bf00      	nop
}
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	08008275 	.word	0x08008275
 80080dc:	080082c9 	.word	0x080082c9

080080e0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80080e4:	f001 f86c 	bl	80091c0 <HW_IPCC_Enable>

  return;
 80080e8:	bf00      	nop
}
 80080ea:	bd80      	pop	{r7, pc}

080080ec <TL_Init>:


void TL_Init( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80080f0:	4b10      	ldr	r3, [pc, #64]	; (8008134 <TL_Init+0x48>)
 80080f2:	4a11      	ldr	r2, [pc, #68]	; (8008138 <TL_Init+0x4c>)
 80080f4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80080f6:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <TL_Init+0x48>)
 80080f8:	4a10      	ldr	r2, [pc, #64]	; (800813c <TL_Init+0x50>)
 80080fa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <TL_Init+0x48>)
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <TL_Init+0x54>)
 8008100:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008102:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <TL_Init+0x48>)
 8008104:	4a0f      	ldr	r2, [pc, #60]	; (8008144 <TL_Init+0x58>)
 8008106:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <TL_Init+0x48>)
 800810a:	4a0f      	ldr	r2, [pc, #60]	; (8008148 <TL_Init+0x5c>)
 800810c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <TL_Init+0x48>)
 8008110:	4a0e      	ldr	r2, [pc, #56]	; (800814c <TL_Init+0x60>)
 8008112:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <TL_Init+0x48>)
 8008116:	4a0e      	ldr	r2, [pc, #56]	; (8008150 <TL_Init+0x64>)
 8008118:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800811a:	4b06      	ldr	r3, [pc, #24]	; (8008134 <TL_Init+0x48>)
 800811c:	4a0d      	ldr	r2, [pc, #52]	; (8008154 <TL_Init+0x68>)
 800811e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008120:	4b04      	ldr	r3, [pc, #16]	; (8008134 <TL_Init+0x48>)
 8008122:	4a0d      	ldr	r2, [pc, #52]	; (8008158 <TL_Init+0x6c>)
 8008124:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <TL_Init+0x48>)
 8008128:	4a0c      	ldr	r2, [pc, #48]	; (800815c <TL_Init+0x70>)
 800812a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800812c:	f001 f85c 	bl	80091e8 <HW_IPCC_Init>

  return;
 8008130:	bf00      	nop
}
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20030000 	.word	0x20030000
 8008138:	20030028 	.word	0x20030028
 800813c:	20030048 	.word	0x20030048
 8008140:	20030058 	.word	0x20030058
 8008144:	20030068 	.word	0x20030068
 8008148:	20030070 	.word	0x20030070
 800814c:	20030078 	.word	0x20030078
 8008150:	20030080 	.word	0x20030080
 8008154:	2003009c 	.word	0x2003009c
 8008158:	200300a0 	.word	0x200300a0
 800815c:	200300ac 	.word	0x200300ac

08008160 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800816c:	4811      	ldr	r0, [pc, #68]	; (80081b4 <TL_BLE_Init+0x54>)
 800816e:	f000 fa27 	bl	80085c0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008172:	4b11      	ldr	r3, [pc, #68]	; (80081b8 <TL_BLE_Init+0x58>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4a0c      	ldr	r2, [pc, #48]	; (80081bc <TL_BLE_Init+0x5c>)
 800818c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4a08      	ldr	r2, [pc, #32]	; (80081b4 <TL_BLE_Init+0x54>)
 8008192:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008194:	f001 f83e 	bl	8009214 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a08      	ldr	r2, [pc, #32]	; (80081c0 <TL_BLE_Init+0x60>)
 800819e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4a07      	ldr	r2, [pc, #28]	; (80081c4 <TL_BLE_Init+0x64>)
 80081a6:	6013      	str	r3, [r2, #0]

  return 0;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200300c8 	.word	0x200300c8
 80081b8:	20030000 	.word	0x20030000
 80081bc:	20000900 	.word	0x20000900
 80081c0:	20000bd4 	.word	0x20000bd4
 80081c4:	20000bd8 	.word	0x20000bd8

080081c8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <TL_BLE_SendCmd+0x34>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2201      	movs	r2, #1
 80081dc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <TL_BLE_SendCmd+0x34>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4619      	mov	r1, r3
 80081e6:	2001      	movs	r0, #1
 80081e8:	f000 f96c 	bl	80084c4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80081ec:	f001 f81c 	bl	8009228 <HW_IPCC_BLE_SendCmd>

  return 0;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20030000 	.word	0x20030000

08008200 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008206:	e01c      	b.n	8008242 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008208:	1d3b      	adds	r3, r7, #4
 800820a:	4619      	mov	r1, r3
 800820c:	4812      	ldr	r0, [pc, #72]	; (8008258 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800820e:	f000 fa76 	bl	80086fe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7a5b      	ldrb	r3, [r3, #9]
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d003      	beq.n	8008222 <HW_IPCC_BLE_RxEvtNot+0x22>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7a5b      	ldrb	r3, [r3, #9]
 800821e:	2b0e      	cmp	r3, #14
 8008220:	d105      	bne.n	800822e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4619      	mov	r1, r3
 8008226:	2002      	movs	r0, #2
 8008228:	f000 f94c 	bl	80084c4 <OutputDbgTrace>
 800822c:	e004      	b.n	8008238 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4619      	mov	r1, r3
 8008232:	2003      	movs	r0, #3
 8008234:	f000 f946 	bl	80084c4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	4610      	mov	r0, r2
 8008240:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008242:	4805      	ldr	r0, [pc, #20]	; (8008258 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008244:	f000 f9cc 	bl	80085e0 <LST_is_empty>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0dc      	beq.n	8008208 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800824e:	bf00      	nop
}
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200300c8 	.word	0x200300c8
 800825c:	20000bd4 	.word	0x20000bd4

08008260 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008264:	4b02      	ldr	r3, [pc, #8]	; (8008270 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4798      	blx	r3

  return;
 800826a:	bf00      	nop
}
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000bd8 	.word	0x20000bd8

08008274 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008280:	480d      	ldr	r0, [pc, #52]	; (80082b8 <TL_SYS_Init+0x44>)
 8008282:	f000 f99d 	bl	80085c0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008286:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <TL_SYS_Init+0x48>)
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4a08      	ldr	r2, [pc, #32]	; (80082b8 <TL_SYS_Init+0x44>)
 8008298:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800829a:	f000 ffe7 	bl	800926c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a07      	ldr	r2, [pc, #28]	; (80082c0 <TL_SYS_Init+0x4c>)
 80082a4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	4a06      	ldr	r2, [pc, #24]	; (80082c4 <TL_SYS_Init+0x50>)
 80082ac:	6013      	str	r3, [r2, #0]

  return 0;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	200300d0 	.word	0x200300d0
 80082bc:	20030000 	.word	0x20030000
 80082c0:	20000bdc 	.word	0x20000bdc
 80082c4:	20000be0 	.word	0x20000be0

080082c8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80082d4:	4b09      	ldr	r3, [pc, #36]	; (80082fc <TL_SYS_SendCmd+0x34>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2210      	movs	r2, #16
 80082dc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80082de:	4b07      	ldr	r3, [pc, #28]	; (80082fc <TL_SYS_SendCmd+0x34>)
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4619      	mov	r1, r3
 80082e6:	2004      	movs	r0, #4
 80082e8:	f000 f8ec 	bl	80084c4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80082ec:	f000 ffc8 	bl	8009280 <HW_IPCC_SYS_SendCmd>

  return 0;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20030000 	.word	0x20030000

08008300 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4619      	mov	r1, r3
 800830c:	2005      	movs	r0, #5
 800830e:	f000 f8d9 	bl	80084c4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a03      	ldr	r2, [pc, #12]	; (8008324 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008318:	68d2      	ldr	r2, [r2, #12]
 800831a:	6812      	ldr	r2, [r2, #0]
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3

  return;
 8008320:	bf00      	nop
}
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20030000 	.word	0x20030000
 8008328:	20000bdc 	.word	0x20000bdc

0800832c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008332:	e00e      	b.n	8008352 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008334:	1d3b      	adds	r3, r7, #4
 8008336:	4619      	mov	r1, r3
 8008338:	480b      	ldr	r0, [pc, #44]	; (8008368 <HW_IPCC_SYS_EvtNot+0x3c>)
 800833a:	f000 f9e0 	bl	80086fe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4619      	mov	r1, r3
 8008342:	2006      	movs	r0, #6
 8008344:	f000 f8be 	bl	80084c4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008348:	4b08      	ldr	r3, [pc, #32]	; (800836c <HW_IPCC_SYS_EvtNot+0x40>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	4610      	mov	r0, r2
 8008350:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008352:	4805      	ldr	r0, [pc, #20]	; (8008368 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008354:	f000 f944 	bl	80085e0 <LST_is_empty>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0ea      	beq.n	8008334 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800835e:	bf00      	nop
}
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200300d0 	.word	0x200300d0
 800836c:	20000be0 	.word	0x20000be0

08008370 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008378:	4817      	ldr	r0, [pc, #92]	; (80083d8 <TL_MM_Init+0x68>)
 800837a:	f000 f921 	bl	80085c0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800837e:	4817      	ldr	r0, [pc, #92]	; (80083dc <TL_MM_Init+0x6c>)
 8008380:	f000 f91e 	bl	80085c0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008384:	4b16      	ldr	r3, [pc, #88]	; (80083e0 <TL_MM_Init+0x70>)
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	4a16      	ldr	r2, [pc, #88]	; (80083e4 <TL_MM_Init+0x74>)
 800838a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800838c:	4b15      	ldr	r3, [pc, #84]	; (80083e4 <TL_MM_Init+0x74>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6892      	ldr	r2, [r2, #8]
 8008394:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008396:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <TL_MM_Init+0x74>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	68d2      	ldr	r2, [r2, #12]
 800839e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80083a0:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <TL_MM_Init+0x74>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a0c      	ldr	r2, [pc, #48]	; (80083d8 <TL_MM_Init+0x68>)
 80083a6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <TL_MM_Init+0x74>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80083b2:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <TL_MM_Init+0x74>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6852      	ldr	r2, [r2, #4]
 80083ba:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <TL_MM_Init+0x74>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6912      	ldr	r2, [r2, #16]
 80083c4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <TL_MM_Init+0x74>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6952      	ldr	r2, [r2, #20]
 80083ce:	619a      	str	r2, [r3, #24]

  return;
 80083d0:	bf00      	nop
}
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	200300b8 	.word	0x200300b8
 80083dc:	20000bcc 	.word	0x20000bcc
 80083e0:	20030000 	.word	0x20030000
 80083e4:	20000be4 	.word	0x20000be4

080083e8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4807      	ldr	r0, [pc, #28]	; (8008410 <TL_MM_EvtDone+0x28>)
 80083f4:	f000 f93c 	bl	8008670 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	2000      	movs	r0, #0
 80083fc:	f000 f862 	bl	80084c4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008400:	4804      	ldr	r0, [pc, #16]	; (8008414 <TL_MM_EvtDone+0x2c>)
 8008402:	f000 ff63 	bl	80092cc <HW_IPCC_MM_SendFreeBuf>

  return;
 8008406:	bf00      	nop
}
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000bcc 	.word	0x20000bcc
 8008414:	08008419 	.word	0x08008419

08008418 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800841e:	e00c      	b.n	800843a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008420:	1d3b      	adds	r3, r7, #4
 8008422:	4619      	mov	r1, r3
 8008424:	480a      	ldr	r0, [pc, #40]	; (8008450 <SendFreeBuf+0x38>)
 8008426:	f000 f96a 	bl	80086fe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800842a:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <SendFreeBuf+0x3c>)
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	4611      	mov	r1, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f91b 	bl	8008670 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800843a:	4805      	ldr	r0, [pc, #20]	; (8008450 <SendFreeBuf+0x38>)
 800843c:	f000 f8d0 	bl	80085e0 <LST_is_empty>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ec      	beq.n	8008420 <SendFreeBuf+0x8>
  }

  return;
 8008446:	bf00      	nop
}
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000bcc 	.word	0x20000bcc
 8008454:	20030000 	.word	0x20030000

08008458 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800845c:	4805      	ldr	r0, [pc, #20]	; (8008474 <TL_TRACES_Init+0x1c>)
 800845e:	f000 f8af 	bl	80085c0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <TL_TRACES_Init+0x20>)
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	4a03      	ldr	r2, [pc, #12]	; (8008474 <TL_TRACES_Init+0x1c>)
 8008468:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800846a:	f000 ff65 	bl	8009338 <HW_IPCC_TRACES_Init>

  return;
 800846e:	bf00      	nop
}
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200300c0 	.word	0x200300c0
 8008478:	20030000 	.word	0x20030000

0800847c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008482:	e008      	b.n	8008496 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008484:	1d3b      	adds	r3, r7, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4808      	ldr	r0, [pc, #32]	; (80084ac <HW_IPCC_TRACES_EvtNot+0x30>)
 800848a:	f000 f938 	bl	80086fe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 f80d 	bl	80084b0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008496:	4805      	ldr	r0, [pc, #20]	; (80084ac <HW_IPCC_TRACES_EvtNot+0x30>)
 8008498:	f000 f8a2 	bl	80085e0 <LST_is_empty>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0f0      	beq.n	8008484 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80084a2:	bf00      	nop
}
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200300c0 	.word	0x200300c0

080084b0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d845      	bhi.n	8008562 <OutputDbgTrace+0x9e>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <OutputDbgTrace+0x18>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084f9 	.word	0x080084f9
 80084e0:	0800851d 	.word	0x0800851d
 80084e4:	08008523 	.word	0x08008523
 80084e8:	08008537 	.word	0x08008537
 80084ec:	08008543 	.word	0x08008543
 80084f0:	08008549 	.word	0x08008549
 80084f4:	08008557 	.word	0x08008557
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7a5b      	ldrb	r3, [r3, #9]
 8008500:	2bff      	cmp	r3, #255	; 0xff
 8008502:	d005      	beq.n	8008510 <OutputDbgTrace+0x4c>
 8008504:	2bff      	cmp	r3, #255	; 0xff
 8008506:	dc05      	bgt.n	8008514 <OutputDbgTrace+0x50>
 8008508:	2b0e      	cmp	r3, #14
 800850a:	d005      	beq.n	8008518 <OutputDbgTrace+0x54>
 800850c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800850e:	e001      	b.n	8008514 <OutputDbgTrace+0x50>
          break;
 8008510:	bf00      	nop
 8008512:	e027      	b.n	8008564 <OutputDbgTrace+0xa0>
          break;
 8008514:	bf00      	nop
 8008516:	e025      	b.n	8008564 <OutputDbgTrace+0xa0>
          break;
 8008518:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800851a:	e023      	b.n	8008564 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008520:	e020      	b.n	8008564 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7a5b      	ldrb	r3, [r3, #9]
 800852a:	2b0e      	cmp	r3, #14
 800852c:	d001      	beq.n	8008532 <OutputDbgTrace+0x6e>
 800852e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008530:	e000      	b.n	8008534 <OutputDbgTrace+0x70>
          break;
 8008532:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008534:	e016      	b.n	8008564 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	7a5b      	ldrb	r3, [r3, #9]
 800853e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008540:	e010      	b.n	8008564 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008546:	e00d      	b.n	8008564 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	7a5b      	ldrb	r3, [r3, #9]
 8008550:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008552:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008554:	e006      	b.n	8008564 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	7a5b      	ldrb	r3, [r3, #9]
 800855e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008560:	e000      	b.n	8008564 <OutputDbgTrace+0xa0>

    default:
      break;
 8008562:	bf00      	nop
  }

  return;
 8008564:	bf00      	nop
}
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <OTP_Read+0x48>)
 800857c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800857e:	e002      	b.n	8008586 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3b08      	subs	r3, #8
 8008584:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3307      	adds	r3, #7
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	79fa      	ldrb	r2, [r7, #7]
 800858e:	429a      	cmp	r2, r3
 8008590:	d003      	beq.n	800859a <OTP_Read+0x2a>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4a09      	ldr	r2, [pc, #36]	; (80085bc <OTP_Read+0x4c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d1f2      	bne.n	8008580 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3307      	adds	r3, #7
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d001      	beq.n	80085aa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	1fff73f8 	.word	0x1fff73f8
 80085bc:	1fff7000 	.word	0x1fff7000

080085c0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	605a      	str	r2, [r3, #4]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e8:	f3ef 8310 	mrs	r3, PRIMASK
 80085ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80085f2:	b672      	cpsid	i
}
 80085f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d102      	bne.n	8008606 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008600:	2301      	movs	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
 8008604:	e001      	b.n	800860a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	75fb      	strb	r3, [r7, #23]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f383 8810 	msr	PRIMASK, r3
}
 8008614:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
}
 8008618:	4618      	mov	r0, r3
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800862e:	f3ef 8310 	mrs	r3, PRIMASK
 8008632:	60fb      	str	r3, [r7, #12]
  return(result);
 8008634:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008638:	b672      	cpsid	i
}
 800863a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f383 8810 	msr	PRIMASK, r3
}
 8008662:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800867a:	f3ef 8310 	mrs	r3, PRIMASK
 800867e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008680:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008684:	b672      	cpsid	i
}
 8008686:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f383 8810 	msr	PRIMASK, r3
}
 80086ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c4:	f3ef 8310 	mrs	r3, PRIMASK
 80086c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086ce:	b672      	cpsid	i
}
 80086d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6812      	ldr	r2, [r2, #0]
 80086da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f383 8810 	msr	PRIMASK, r3
}
 80086f0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b086      	sub	sp, #24
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008708:	f3ef 8310 	mrs	r3, PRIMASK
 800870c:	60fb      	str	r3, [r7, #12]
  return(result);
 800870e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008712:	b672      	cpsid	i
}
 8008714:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff ffca 	bl	80086bc <LST_remove_node>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f383 8810 	msr	PRIMASK, r3
}
 8008732:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008734:	bf00      	nop
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008740:	4b03      	ldr	r3, [pc, #12]	; (8008750 <LL_FLASH_GetUDN+0x14>)
 8008742:	681b      	ldr	r3, [r3, #0]
}
 8008744:	4618      	mov	r0, r3
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	1fff7580 	.word	0x1fff7580

08008754 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008758:	4b03      	ldr	r3, [pc, #12]	; (8008768 <LL_FLASH_GetDeviceID+0x14>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
}
 800875e:	4618      	mov	r0, r3
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	1fff7584 	.word	0x1fff7584

0800876c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008770:	4b03      	ldr	r3, [pc, #12]	; (8008780 <LL_FLASH_GetSTCompanyID+0x14>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	0a1b      	lsrs	r3, r3, #8
}
 8008776:	4618      	mov	r0, r3
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	1fff7584 	.word	0x1fff7584

08008784 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b090      	sub	sp, #64	; 0x40
 8008788:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800878a:	2392      	movs	r3, #146	; 0x92
 800878c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <APP_BLE_Init+0xa4>)
 8008792:	1d3c      	adds	r4, r7, #4
 8008794:	461d      	mov	r5, r3
 8008796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800879a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800879c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800879e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087a6:	c403      	stmia	r4!, {r0, r1}
 80087a8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80087aa:	f000 f905 	bl	80089b8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80087ae:	2101      	movs	r1, #1
 80087b0:	2002      	movs	r0, #2
 80087b2:	f000 fde9 	bl	8009388 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80087b6:	4a1d      	ldr	r2, [pc, #116]	; (800882c <APP_BLE_Init+0xa8>)
 80087b8:	2100      	movs	r1, #0
 80087ba:	2002      	movs	r0, #2
 80087bc:	f000 ff10 	bl	80095e0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80087c0:	1d3b      	adds	r3, r7, #4
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff f8d0 	bl	8007968 <SHCI_C2_BLE_Init>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80087ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80087d6:	f7f9 fb71 	bl	8001ebc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80087da:	f000 f903 	bl	80089e4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80087de:	f7ff f81d 	bl	800781c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80087e2:	4b13      	ldr	r3, [pc, #76]	; (8008830 <APP_BLE_Init+0xac>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80087ea:	4b11      	ldr	r3, [pc, #68]	; (8008830 <APP_BLE_Init+0xac>)
 80087ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087f0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80087f2:	4a10      	ldr	r2, [pc, #64]	; (8008834 <APP_BLE_Init+0xb0>)
 80087f4:	2100      	movs	r1, #0
 80087f6:	2001      	movs	r0, #1
 80087f8:	f000 fef2 	bl	80095e0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80087fc:	2006      	movs	r0, #6
 80087fe:	f7fe fe80 	bl	8007502 <aci_hal_set_radio_activity_mask>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008808:	f000 fa9b 	bl	8008d42 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800880c:	4b08      	ldr	r3, [pc, #32]	; (8008830 <APP_BLE_Init+0xac>)
 800880e:	2200      	movs	r2, #0
 8008810:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008812:	4b07      	ldr	r3, [pc, #28]	; (8008830 <APP_BLE_Init+0xac>)
 8008814:	2200      	movs	r2, #0
 8008816:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008818:	2001      	movs	r0, #1
 800881a:	f000 f997 	bl	8008b4c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800881e:	bf00      	nop
}
 8008820:	3740      	adds	r7, #64	; 0x40
 8008822:	46bd      	mov	sp, r7
 8008824:	bdb0      	pop	{r4, r5, r7, pc}
 8008826:	bf00      	nop
 8008828:	0800a8ac 	.word	0x0800a8ac
 800882c:	08007b85 	.word	0x08007b85
 8008830:	20000bf0 	.word	0x20000bf0
 8008834:	08008c35 	.word	0x08008c35

08008838 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08a      	sub	sp, #40	; 0x28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008840:	2392      	movs	r3, #146	; 0x92
 8008842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3301      	adds	r3, #1
 800884a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2bff      	cmp	r3, #255	; 0xff
 8008852:	d053      	beq.n	80088fc <SVCCTL_App_Notification+0xc4>
 8008854:	2bff      	cmp	r3, #255	; 0xff
 8008856:	f300 80a1 	bgt.w	800899c <SVCCTL_App_Notification+0x164>
 800885a:	2b05      	cmp	r3, #5
 800885c:	d002      	beq.n	8008864 <SVCCTL_App_Notification+0x2c>
 800885e:	2b3e      	cmp	r3, #62	; 0x3e
 8008860:	d020      	beq.n	80088a4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008862:	e09b      	b.n	800899c <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	3302      	adds	r3, #2
 8008868:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008870:	b29a      	uxth	r2, r3
 8008872:	4b4e      	ldr	r3, [pc, #312]	; (80089ac <SVCCTL_App_Notification+0x174>)
 8008874:	8adb      	ldrh	r3, [r3, #22]
 8008876:	429a      	cmp	r2, r3
 8008878:	d106      	bne.n	8008888 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800887a:	4b4c      	ldr	r3, [pc, #304]	; (80089ac <SVCCTL_App_Notification+0x174>)
 800887c:	2200      	movs	r2, #0
 800887e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008880:	4b4a      	ldr	r3, [pc, #296]	; (80089ac <SVCCTL_App_Notification+0x174>)
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008888:	2001      	movs	r0, #1
 800888a:	f000 f95f 	bl	8008b4c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800888e:	4b48      	ldr	r3, [pc, #288]	; (80089b0 <SVCCTL_App_Notification+0x178>)
 8008890:	2201      	movs	r2, #1
 8008892:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008894:	4b45      	ldr	r3, [pc, #276]	; (80089ac <SVCCTL_App_Notification+0x174>)
 8008896:	8ada      	ldrh	r2, [r3, #22]
 8008898:	4b45      	ldr	r3, [pc, #276]	; (80089b0 <SVCCTL_App_Notification+0x178>)
 800889a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800889c:	4844      	ldr	r0, [pc, #272]	; (80089b0 <SVCCTL_App_Notification+0x178>)
 800889e:	f000 fa3c 	bl	8008d1a <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80088a2:	e07e      	b.n	80089a2 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	3302      	adds	r3, #2
 80088a8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d001      	beq.n	80088b6 <SVCCTL_App_Notification+0x7e>
 80088b2:	2b03      	cmp	r3, #3
          break;
 80088b4:	e021      	b.n	80088fa <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	3301      	adds	r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80088bc:	4b3b      	ldr	r3, [pc, #236]	; (80089ac <SVCCTL_App_Notification+0x174>)
 80088be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d104      	bne.n	80088d0 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <SVCCTL_App_Notification+0x174>)
 80088c8:	2206      	movs	r2, #6
 80088ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80088ce:	e003      	b.n	80088d8 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80088d0:	4b36      	ldr	r3, [pc, #216]	; (80089ac <SVCCTL_App_Notification+0x174>)
 80088d2:	2205      	movs	r2, #5
 80088d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088de:	b29a      	uxth	r2, r3
 80088e0:	4b32      	ldr	r3, [pc, #200]	; (80089ac <SVCCTL_App_Notification+0x174>)
 80088e2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80088e4:	4b32      	ldr	r3, [pc, #200]	; (80089b0 <SVCCTL_App_Notification+0x178>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80088ea:	4b30      	ldr	r3, [pc, #192]	; (80089ac <SVCCTL_App_Notification+0x174>)
 80088ec:	8ada      	ldrh	r2, [r3, #22]
 80088ee:	4b30      	ldr	r3, [pc, #192]	; (80089b0 <SVCCTL_App_Notification+0x178>)
 80088f0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80088f2:	482f      	ldr	r0, [pc, #188]	; (80089b0 <SVCCTL_App_Notification+0x178>)
 80088f4:	f000 fa11 	bl	8008d1a <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80088f8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80088fa:	e052      	b.n	80089a2 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	3302      	adds	r3, #2
 8008900:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890c:	d040      	beq.n	8008990 <SVCCTL_App_Notification+0x158>
 800890e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008912:	dc45      	bgt.n	80089a0 <SVCCTL_App_Notification+0x168>
 8008914:	2b04      	cmp	r3, #4
 8008916:	d03d      	beq.n	8008994 <SVCCTL_App_Notification+0x15c>
 8008918:	2b04      	cmp	r3, #4
 800891a:	db41      	blt.n	80089a0 <SVCCTL_App_Notification+0x168>
 800891c:	f240 420a 	movw	r2, #1034	; 0x40a
 8008920:	4293      	cmp	r3, r2
 8008922:	dc3d      	bgt.n	80089a0 <SVCCTL_App_Notification+0x168>
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008928:	dd3a      	ble.n	80089a0 <SVCCTL_App_Notification+0x168>
 800892a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800892e:	2b09      	cmp	r3, #9
 8008930:	d836      	bhi.n	80089a0 <SVCCTL_App_Notification+0x168>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <SVCCTL_App_Notification+0x100>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	08008989 	.word	0x08008989
 800893c:	08008961 	.word	0x08008961
 8008940:	080089a1 	.word	0x080089a1
 8008944:	080089a1 	.word	0x080089a1
 8008948:	080089a1 	.word	0x080089a1
 800894c:	080089a1 	.word	0x080089a1
 8008950:	08008999 	.word	0x08008999
 8008954:	080089a1 	.word	0x080089a1
 8008958:	08008975 	.word	0x08008975
 800895c:	08008999 	.word	0x08008999
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008960:	4b12      	ldr	r3, [pc, #72]	; (80089ac <SVCCTL_App_Notification+0x174>)
 8008962:	8adb      	ldrh	r3, [r3, #22]
 8008964:	4913      	ldr	r1, [pc, #76]	; (80089b4 <SVCCTL_App_Notification+0x17c>)
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe f822 	bl	80069b0 <aci_gap_pass_key_resp>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008972:	e012      	b.n	800899a <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008974:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <SVCCTL_App_Notification+0x174>)
 8008976:	8adb      	ldrh	r3, [r3, #22]
 8008978:	2101      	movs	r1, #1
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe f9c2 	bl	8006d04 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008986:	e008      	b.n	800899a <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3302      	adds	r3, #2
 800898c:	61bb      	str	r3, [r7, #24]
          break;
 800898e:	e004      	b.n	800899a <SVCCTL_App_Notification+0x162>
          break;
 8008990:	bf00      	nop
 8008992:	e005      	b.n	80089a0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008994:	bf00      	nop
 8008996:	e003      	b.n	80089a0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008998:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800899a:	e001      	b.n	80089a0 <SVCCTL_App_Notification+0x168>
      break;
 800899c:	bf00      	nop
 800899e:	e000      	b.n	80089a2 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80089a0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80089a2:	2301      	movs	r3, #1
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3728      	adds	r7, #40	; 0x28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000bf0 	.word	0x20000bf0
 80089b0:	20000c74 	.word	0x20000c74
 80089b4:	0001b207 	.word	0x0001b207

080089b8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <Ble_Tl_Init+0x20>)
 80089c0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80089c2:	4b06      	ldr	r3, [pc, #24]	; (80089dc <Ble_Tl_Init+0x24>)
 80089c4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80089c6:	463b      	mov	r3, r7
 80089c8:	4619      	mov	r1, r3
 80089ca:	4805      	ldr	r0, [pc, #20]	; (80089e0 <Ble_Tl_Init+0x28>)
 80089cc:	f7ff f8be 	bl	8007b4c <hci_init>

  return;
 80089d0:	bf00      	nop
}
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	200300d8 	.word	0x200300d8
 80089dc:	08008ce5 	.word	0x08008ce5
 80089e0:	08008cad 	.word	0x08008cad

080089e4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80089e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e6:	b08d      	sub	sp, #52	; 0x34
 80089e8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80089ea:	2300      	movs	r3, #0
 80089ec:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80089ee:	2392      	movs	r3, #146	; 0x92
 80089f0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80089f2:	f7fe fdda 	bl	80075aa <hci_reset>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80089fa:	f000 f8d7 	bl	8008bac <BleGetBdAddress>
 80089fe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	2106      	movs	r1, #6
 8008a04:	2000      	movs	r0, #0
 8008a06:	f7fe fc90 	bl	800732a <aci_hal_write_config_data>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008a0e:	4a4a      	ldr	r2, [pc, #296]	; (8008b38 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008a10:	2110      	movs	r1, #16
 8008a12:	2018      	movs	r0, #24
 8008a14:	f7fe fc89 	bl	800732a <aci_hal_write_config_data>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008a1c:	4a47      	ldr	r2, [pc, #284]	; (8008b3c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008a1e:	2110      	movs	r1, #16
 8008a20:	2008      	movs	r0, #8
 8008a22:	f7fe fc82 	bl	800732a <aci_hal_write_config_data>
 8008a26:	4603      	mov	r3, r0
 8008a28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008a2a:	2118      	movs	r1, #24
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	f7fe fd01 	bl	8007434 <aci_hal_set_tx_power_level>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008a36:	f7fe f9cc 	bl	8006dd2 <aci_gatt_init>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	f043 0301 	orr.w	r3, r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01f      	beq.n	8008a90 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008a50:	4b3b      	ldr	r3, [pc, #236]	; (8008b40 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008a52:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008a54:	1dba      	adds	r2, r7, #6
 8008a56:	7bf8      	ldrb	r0, [r7, #15]
 8008a58:	1cbb      	adds	r3, r7, #2
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	1d3b      	adds	r3, r7, #4
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	2208      	movs	r2, #8
 8008a64:	2100      	movs	r1, #0
 8008a66:	f7fe f80a 	bl	8006a7e <aci_gap_init>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008a6e:	88fc      	ldrh	r4, [r7, #6]
 8008a70:	88bd      	ldrh	r5, [r7, #4]
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	f7f7 fb84 	bl	8000180 <strlen>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4613      	mov	r3, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	4629      	mov	r1, r5
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7fe fba6 	bl	80071d8 <aci_gatt_update_char_value>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008a90:	88f8      	ldrh	r0, [r7, #6]
 8008a92:	8879      	ldrh	r1, [r7, #2]
 8008a94:	463b      	mov	r3, r7
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	2302      	movs	r3, #2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f7fe fb9c 	bl	80071d8 <aci_gatt_update_char_value>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	2102      	movs	r1, #2
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f7fe fda2 	bl	80075f2 <hci_le_set_default_phy>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008ab2:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008ab8:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fd fe5f 	bl	8006780 <aci_gap_set_io_capability>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008ac6:	4b1f      	ldr	r3, [pc, #124]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008acc:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ace:	2208      	movs	r2, #8
 8008ad0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ad4:	2210      	movs	r2, #16
 8008ad6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008ade:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008ae2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008ae4:	4b17      	ldr	r3, [pc, #92]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008aea:	4b16      	ldr	r3, [pc, #88]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008aec:	789c      	ldrb	r4, [r3, #2]
 8008aee:	4b15      	ldr	r3, [pc, #84]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008af0:	785d      	ldrb	r5, [r3, #1]
 8008af2:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008af4:	791b      	ldrb	r3, [r3, #4]
 8008af6:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008af8:	7952      	ldrb	r2, [r2, #5]
 8008afa:	4912      	ldr	r1, [pc, #72]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008afc:	78c9      	ldrb	r1, [r1, #3]
 8008afe:	4811      	ldr	r0, [pc, #68]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b00:	6880      	ldr	r0, [r0, #8]
 8008b02:	2600      	movs	r6, #0
 8008b04:	9604      	str	r6, [sp, #16]
 8008b06:	9003      	str	r0, [sp, #12]
 8008b08:	9102      	str	r1, [sp, #8]
 8008b0a:	9201      	str	r2, [sp, #4]
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2201      	movs	r2, #1
 8008b12:	4629      	mov	r1, r5
 8008b14:	4620      	mov	r0, r4
 8008b16:	f7fd fe87 	bl	8006828 <aci_gap_set_authentication_requirement>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b20:	789b      	ldrb	r3, [r3, #2]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008b26:	f7fe f8c9 	bl	8006cbc <aci_gap_configure_whitelist>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b36:	bf00      	nop
 8008b38:	0800aaf4 	.word	0x0800aaf4
 8008b3c:	0800ab04 	.word	0x0800ab04
 8008b40:	0800a8e8 	.word	0x0800a8e8
 8008b44:	20000bf0 	.word	0x20000bf0
 8008b48:	0001b207 	.word	0x0001b207

08008b4c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08c      	sub	sp, #48	; 0x30
 8008b50:	af08      	add	r7, sp, #32
 8008b52:	4603      	mov	r3, r0
 8008b54:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008b56:	2392      	movs	r3, #146	; 0x92
 8008b58:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008b5a:	4a12      	ldr	r2, [pc, #72]	; (8008ba4 <Adv_Request+0x58>)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8008b62:	2300      	movs	r3, #0
 8008b64:	9306      	str	r3, [sp, #24]
 8008b66:	2300      	movs	r3, #0
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	2300      	movs	r3, #0
 8008b74:	9302      	str	r3, [sp, #8]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	22a0      	movs	r2, #160	; 0xa0
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	2000      	movs	r0, #0
 8008b86:	f7fd fd01 	bl	800658c <aci_gap_set_discoverable>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008b8e:	4906      	ldr	r1, [pc, #24]	; (8008ba8 <Adv_Request+0x5c>)
 8008b90:	2009      	movs	r0, #9
 8008b92:	f7fe f821 	bl	8006bd8 <aci_gap_update_adv_data>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8008b9a:	bf00      	nop
}
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20000bf0 	.word	0x20000bf0
 8008ba8:	20000014 	.word	0x20000014

08008bac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008bb2:	f7ff fdc3 	bl	800873c <LL_FLASH_GetUDN>
 8008bb6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bbe:	d023      	beq.n	8008c08 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008bc0:	f7ff fdd4 	bl	800876c <LL_FLASH_GetSTCompanyID>
 8008bc4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008bc6:	f7ff fdc5 	bl	8008754 <LL_FLASH_GetDeviceID>
 8008bca:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <BleGetBdAddress+0x80>)
 8008bd2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <BleGetBdAddress+0x80>)
 8008bdc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	4b12      	ldr	r3, [pc, #72]	; (8008c2c <BleGetBdAddress+0x80>)
 8008be4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <BleGetBdAddress+0x80>)
 8008bec:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	0a1b      	lsrs	r3, r3, #8
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <BleGetBdAddress+0x80>)
 8008bf6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <BleGetBdAddress+0x80>)
 8008c00:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008c02:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <BleGetBdAddress+0x80>)
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	e00b      	b.n	8008c20 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7ff fcb1 	bl	8008570 <OTP_Read>
 8008c0e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	e001      	b.n	8008c20 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <BleGetBdAddress+0x84>)
 8008c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008c20:	697b      	ldr	r3, [r7, #20]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000be8 	.word	0x20000be8
 8008c30:	0800aaec 	.word	0x0800aaec

08008c34 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <Adv_Cancel+0x30>)
 8008c3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d00a      	beq.n	8008c5a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c44:	2392      	movs	r3, #146	; 0x92
 8008c46:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008c48:	f7fd fc7c 	bl	8006544 <aci_gap_set_non_discoverable>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <Adv_Cancel+0x30>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
}
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000bf0 	.word	0x20000bf0

08008c68 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008c70:	2100      	movs	r1, #0
 8008c72:	2002      	movs	r0, #2
 8008c74:	f000 fcd6 	bl	8009624 <UTIL_SEQ_SetTask>

  return;
 8008c78:	bf00      	nop
}
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c88:	2001      	movs	r0, #1
 8008c8a:	f000 fd37 	bl	80096fc <UTIL_SEQ_SetEvt>

  return;
 8008c8e:	bf00      	nop
}
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	f000 fd4c 	bl	800973c <UTIL_SEQ_WaitEvt>

  return;
 8008ca4:	bf00      	nop
}
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fdfe 	bl	80078c0 <SVCCTL_UserEvtRx>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008cd4:	e003      	b.n	8008cde <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
  return;
 8008cdc:	bf00      	nop
}
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <BLE_StatusNot+0x16>
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d006      	beq.n	8008d06 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008cf8:	e00b      	b.n	8008d12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fcbc 	bl	800967c <UTIL_SEQ_PauseTask>
      break;
 8008d04:	e005      	b.n	8008d12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d06:	2303      	movs	r3, #3
 8008d08:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f000 fcd6 	bl	80096bc <UTIL_SEQ_ResumeTask>
      break;
 8008d10:	bf00      	nop
  }

  return;
 8008d12:	bf00      	nop
}
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <Custom_APP_Notification+0x16>
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d002      	beq.n	8008d34 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008d2e:	e002      	b.n	8008d36 <Custom_APP_Notification+0x1c>
      break;
 8008d30:	bf00      	nop
 8008d32:	e000      	b.n	8008d36 <Custom_APP_Notification+0x1c>
      break;
 8008d34:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008d36:	bf00      	nop
}
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008d42:	b480      	push	{r7}
 8008d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008d46:	bf00      	nop
}
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b08b      	sub	sp, #44	; 0x2c
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	3301      	adds	r3, #1
 8008d62:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2bff      	cmp	r3, #255	; 0xff
 8008d6a:	d12b      	bne.n	8008dc4 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	3302      	adds	r3, #2
 8008d70:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f640 4214 	movw	r2, #3092	; 0xc14
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d01b      	beq.n	8008db8 <Custom_STM_Event_Handler+0x68>
 8008d80:	f640 4214 	movw	r2, #3092	; 0xc14
 8008d84:	4293      	cmp	r3, r2
 8008d86:	dc19      	bgt.n	8008dbc <Custom_STM_Event_Handler+0x6c>
 8008d88:	f640 4201 	movw	r2, #3073	; 0xc01
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d003      	beq.n	8008d98 <Custom_STM_Event_Handler+0x48>
 8008d90:	f640 4213 	movw	r2, #3091	; 0xc13
 8008d94:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008d96:	e014      	b.n	8008dc2 <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	885b      	ldrh	r3, [r3, #2]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <Custom_STM_Event_Handler+0x88>)
 8008da8:	885b      	ldrh	r3, [r3, #2]
 8008daa:	3301      	adds	r3, #1
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d107      	bne.n	8008dc0 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008db6:	e003      	b.n	8008dc0 <Custom_STM_Event_Handler+0x70>
          break;
 8008db8:	bf00      	nop
 8008dba:	e004      	b.n	8008dc6 <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008dbc:	bf00      	nop
 8008dbe:	e002      	b.n	8008dc6 <Custom_STM_Event_Handler+0x76>
          break;
 8008dc0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008dc2:	e000      	b.n	8008dc6 <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008dc4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8008dca:	4618      	mov	r0, r3
 8008dcc:	372c      	adds	r7, #44	; 0x2c
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000c78 	.word	0x20000c78

08008ddc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08c      	sub	sp, #48	; 0x30
 8008de0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008de2:	2392      	movs	r3, #146	; 0x92
 8008de4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008de6:	4834      	ldr	r0, [pc, #208]	; (8008eb8 <SVCCTL_InitCustomSvc+0xdc>)
 8008de8:	f7fe fd50 	bl	800788c <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8008dec:	238f      	movs	r3, #143	; 0x8f
 8008dee:	713b      	strb	r3, [r7, #4]
 8008df0:	23e5      	movs	r3, #229	; 0xe5
 8008df2:	717b      	strb	r3, [r7, #5]
 8008df4:	23b3      	movs	r3, #179	; 0xb3
 8008df6:	71bb      	strb	r3, [r7, #6]
 8008df8:	23d5      	movs	r3, #213	; 0xd5
 8008dfa:	71fb      	strb	r3, [r7, #7]
 8008dfc:	232e      	movs	r3, #46	; 0x2e
 8008dfe:	723b      	strb	r3, [r7, #8]
 8008e00:	237f      	movs	r3, #127	; 0x7f
 8008e02:	727b      	strb	r3, [r7, #9]
 8008e04:	234a      	movs	r3, #74	; 0x4a
 8008e06:	72bb      	strb	r3, [r7, #10]
 8008e08:	2398      	movs	r3, #152	; 0x98
 8008e0a:	72fb      	strb	r3, [r7, #11]
 8008e0c:	232a      	movs	r3, #42	; 0x2a
 8008e0e:	733b      	strb	r3, [r7, #12]
 8008e10:	2348      	movs	r3, #72	; 0x48
 8008e12:	737b      	strb	r3, [r7, #13]
 8008e14:	237a      	movs	r3, #122	; 0x7a
 8008e16:	73bb      	strb	r3, [r7, #14]
 8008e18:	23cc      	movs	r3, #204	; 0xcc
 8008e1a:	73fb      	strb	r3, [r7, #15]
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	743b      	strb	r3, [r7, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	747b      	strb	r3, [r7, #17]
 8008e24:	2300      	movs	r3, #0
 8008e26:	74bb      	strb	r3, [r7, #18]
 8008e28:	2300      	movs	r3, #0
 8008e2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008e2c:	1d39      	adds	r1, r7, #4
 8008e2e:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <SVCCTL_InitCustomSvc+0xe0>)
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2303      	movs	r3, #3
 8008e34:	2201      	movs	r2, #1
 8008e36:	2002      	movs	r0, #2
 8008e38:	f7fd fff0 	bl	8006e1c <aci_gatt_add_service>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008e40:	2319      	movs	r3, #25
 8008e42:	713b      	strb	r3, [r7, #4]
 8008e44:	23ed      	movs	r3, #237	; 0xed
 8008e46:	717b      	strb	r3, [r7, #5]
 8008e48:	2382      	movs	r3, #130	; 0x82
 8008e4a:	71bb      	strb	r3, [r7, #6]
 8008e4c:	23ae      	movs	r3, #174	; 0xae
 8008e4e:	71fb      	strb	r3, [r7, #7]
 8008e50:	23ed      	movs	r3, #237	; 0xed
 8008e52:	723b      	strb	r3, [r7, #8]
 8008e54:	2321      	movs	r3, #33	; 0x21
 8008e56:	727b      	strb	r3, [r7, #9]
 8008e58:	234c      	movs	r3, #76	; 0x4c
 8008e5a:	72bb      	strb	r3, [r7, #10]
 8008e5c:	239d      	movs	r3, #157	; 0x9d
 8008e5e:	72fb      	strb	r3, [r7, #11]
 8008e60:	2341      	movs	r3, #65	; 0x41
 8008e62:	733b      	strb	r3, [r7, #12]
 8008e64:	2345      	movs	r3, #69	; 0x45
 8008e66:	737b      	strb	r3, [r7, #13]
 8008e68:	2322      	movs	r3, #34	; 0x22
 8008e6a:	73bb      	strb	r3, [r7, #14]
 8008e6c:	238e      	movs	r3, #142	; 0x8e
 8008e6e:	73fb      	strb	r3, [r7, #15]
 8008e70:	2300      	movs	r3, #0
 8008e72:	743b      	strb	r3, [r7, #16]
 8008e74:	2300      	movs	r3, #0
 8008e76:	747b      	strb	r3, [r7, #17]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	74bb      	strb	r3, [r7, #18]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <SVCCTL_InitCustomSvc+0xe0>)
 8008e82:	8818      	ldrh	r0, [r3, #0]
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <SVCCTL_InitCustomSvc+0xe4>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	1d3a      	adds	r2, r7, #4
 8008e8c:	490d      	ldr	r1, [pc, #52]	; (8008ec4 <SVCCTL_InitCustomSvc+0xe8>)
 8008e8e:	9105      	str	r1, [sp, #20]
 8008e90:	2100      	movs	r1, #0
 8008e92:	9104      	str	r1, [sp, #16]
 8008e94:	2110      	movs	r1, #16
 8008e96:	9103      	str	r1, [sp, #12]
 8008e98:	2101      	movs	r1, #1
 8008e9a:	9102      	str	r1, [sp, #8]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	9101      	str	r1, [sp, #4]
 8008ea0:	2108      	movs	r1, #8
 8008ea2:	9100      	str	r1, [sp, #0]
 8008ea4:	2102      	movs	r1, #2
 8008ea6:	f7fe f88f 	bl	8006fc8 <aci_gatt_add_char>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008eae:	bf00      	nop
}
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	08008d51 	.word	0x08008d51
 8008ebc:	20000c78 	.word	0x20000c78
 8008ec0:	2000001d 	.word	0x2000001d
 8008ec4:	20000c7a 	.word	0x20000c7a

08008ec8 <LL_PWR_EnableBootC2>:
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <LL_PWR_EnableBootC2+0x1c>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <LL_PWR_EnableBootC2+0x1c>)
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	60d3      	str	r3, [r2, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	58000400 	.word	0x58000400

08008ee8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008ef2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008ef6:	4905      	ldr	r1, [pc, #20]	; (8008f0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	58000800 	.word	0x58000800

08008f10 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008f18:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008f1a:	6a1a      	ldr	r2, [r3, #32]
 8008f1c:	4904      	ldr	r1, [pc, #16]	; (8008f30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	620b      	str	r3, [r1, #32]
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	58000800 	.word	0x58000800

08008f34 <LL_AHB3_GRP1_EnableClock>:
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f86:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008f90:	68fb      	ldr	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <LL_C1_IPCC_EnableIT_TXF>:
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <LL_C1_IPCC_EnableIT_RXO>:
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f043 0201 	orr.w	r2, r3, #1
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	601a      	str	r2, [r3, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	401a      	ands	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	041b      	lsls	r3, r3, #16
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	605a      	str	r2, [r3, #4]
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	43db      	mvns	r3, r3
 800903a:	401a      	ands	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	605a      	str	r2, [r3, #4]
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	609a      	str	r2, [r3, #8]
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	041a      	lsls	r2, r3, #16
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	609a      	str	r2, [r3, #8]
}
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	4013      	ands	r3, r2
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	429a      	cmp	r2, r3
 800909c:	d101      	bne.n	80090a2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69da      	ldr	r2, [r3, #28]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	4013      	ands	r3, r2
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d101      	bne.n	80090cc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80090e0:	2102      	movs	r1, #2
 80090e2:	4819      	ldr	r0, [pc, #100]	; (8009148 <HW_IPCC_Rx_Handler+0x6c>)
 80090e4:	f7ff ffe4 	bl	80090b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d009      	beq.n	8009102 <HW_IPCC_Rx_Handler+0x26>
 80090ee:	4b16      	ldr	r3, [pc, #88]	; (8009148 <HW_IPCC_Rx_Handler+0x6c>)
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80090fc:	f000 f8da 	bl	80092b4 <HW_IPCC_SYS_EvtHandler>
 8009100:	e01f      	b.n	8009142 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009102:	2101      	movs	r1, #1
 8009104:	4810      	ldr	r0, [pc, #64]	; (8009148 <HW_IPCC_Rx_Handler+0x6c>)
 8009106:	f7ff ffd3 	bl	80090b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d008      	beq.n	8009122 <HW_IPCC_Rx_Handler+0x46>
 8009110:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <HW_IPCC_Rx_Handler+0x6c>)
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800911c:	f000 f88e 	bl	800923c <HW_IPCC_BLE_EvtHandler>
 8009120:	e00f      	b.n	8009142 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009122:	2108      	movs	r1, #8
 8009124:	4808      	ldr	r0, [pc, #32]	; (8009148 <HW_IPCC_Rx_Handler+0x6c>)
 8009126:	f7ff ffc3 	bl	80090b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d009      	beq.n	8009144 <HW_IPCC_Rx_Handler+0x68>
 8009130:	4b05      	ldr	r3, [pc, #20]	; (8009148 <HW_IPCC_Rx_Handler+0x6c>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	43db      	mvns	r3, r3
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800913e:	f000 f905 	bl	800934c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009142:	bf00      	nop
 8009144:	bf00      	nop
}
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58000c00 	.word	0x58000c00

0800914c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009150:	2102      	movs	r1, #2
 8009152:	481a      	ldr	r0, [pc, #104]	; (80091bc <HW_IPCC_Tx_Handler+0x70>)
 8009154:	f7ff ff97 	bl	8009086 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <HW_IPCC_Tx_Handler+0x26>
 800915e:	4b17      	ldr	r3, [pc, #92]	; (80091bc <HW_IPCC_Tx_Handler+0x70>)
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	43db      	mvns	r3, r3
 8009164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800916c:	f000 f896 	bl	800929c <HW_IPCC_SYS_CmdEvtHandler>
 8009170:	e020      	b.n	80091b4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009172:	2108      	movs	r1, #8
 8009174:	4811      	ldr	r0, [pc, #68]	; (80091bc <HW_IPCC_Tx_Handler+0x70>)
 8009176:	f7ff ff86 	bl	8009086 <LL_C1_IPCC_IsActiveFlag_CHx>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d109      	bne.n	8009194 <HW_IPCC_Tx_Handler+0x48>
 8009180:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <HW_IPCC_Tx_Handler+0x70>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	43db      	mvns	r3, r3
 8009186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800918e:	f000 f8bf 	bl	8009310 <HW_IPCC_MM_FreeBufHandler>
 8009192:	e00f      	b.n	80091b4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009194:	2120      	movs	r1, #32
 8009196:	4809      	ldr	r0, [pc, #36]	; (80091bc <HW_IPCC_Tx_Handler+0x70>)
 8009198:	f7ff ff75 	bl	8009086 <LL_C1_IPCC_IsActiveFlag_CHx>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <HW_IPCC_Tx_Handler+0x6a>
 80091a2:	4b06      	ldr	r3, [pc, #24]	; (80091bc <HW_IPCC_Tx_Handler+0x70>)
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	43db      	mvns	r3, r3
 80091a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80091b0:	f000 f850 	bl	8009254 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop
}
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	58000c00 	.word	0x58000c00

080091c0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80091c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80091c8:	f7ff fecd 	bl	8008f66 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80091cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091d0:	f7ff fe9e 	bl	8008f10 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80091d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091d8:	f7ff fe86 	bl	8008ee8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80091dc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80091de:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80091e0:	f7ff fe72 	bl	8008ec8 <LL_PWR_EnableBootC2>

  return;
 80091e4:	bf00      	nop
}
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80091ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80091f0:	f7ff fea0 	bl	8008f34 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80091f4:	4806      	ldr	r0, [pc, #24]	; (8009210 <HW_IPCC_Init+0x28>)
 80091f6:	f7ff fee2 	bl	8008fbe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80091fa:	4805      	ldr	r0, [pc, #20]	; (8009210 <HW_IPCC_Init+0x28>)
 80091fc:	f7ff fecf 	bl	8008f9e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009200:	202c      	movs	r0, #44	; 0x2c
 8009202:	f7f9 fb36 	bl	8002872 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009206:	202d      	movs	r0, #45	; 0x2d
 8009208:	f7f9 fb33 	bl	8002872 <HAL_NVIC_EnableIRQ>

  return;
 800920c:	bf00      	nop
}
 800920e:	bd80      	pop	{r7, pc}
 8009210:	58000c00 	.word	0x58000c00

08009214 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009218:	2101      	movs	r1, #1
 800921a:	4802      	ldr	r0, [pc, #8]	; (8009224 <HW_IPCC_BLE_Init+0x10>)
 800921c:	f7ff ff04 	bl	8009028 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009220:	bf00      	nop
}
 8009222:	bd80      	pop	{r7, pc}
 8009224:	58000c00 	.word	0x58000c00

08009228 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800922c:	2101      	movs	r1, #1
 800922e:	4802      	ldr	r0, [pc, #8]	; (8009238 <HW_IPCC_BLE_SendCmd+0x10>)
 8009230:	f7ff ff1a 	bl	8009068 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009234:	bf00      	nop
}
 8009236:	bd80      	pop	{r7, pc}
 8009238:	58000c00 	.word	0x58000c00

0800923c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009240:	f7fe ffde 	bl	8008200 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009244:	2101      	movs	r1, #1
 8009246:	4802      	ldr	r0, [pc, #8]	; (8009250 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009248:	f7ff ff00 	bl	800904c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800924c:	bf00      	nop
}
 800924e:	bd80      	pop	{r7, pc}
 8009250:	58000c00 	.word	0x58000c00

08009254 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009258:	2120      	movs	r1, #32
 800925a:	4803      	ldr	r0, [pc, #12]	; (8009268 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800925c:	f7ff fed2 	bl	8009004 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009260:	f7fe fffe 	bl	8008260 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009264:	bf00      	nop
}
 8009266:	bd80      	pop	{r7, pc}
 8009268:	58000c00 	.word	0x58000c00

0800926c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009270:	2102      	movs	r1, #2
 8009272:	4802      	ldr	r0, [pc, #8]	; (800927c <HW_IPCC_SYS_Init+0x10>)
 8009274:	f7ff fed8 	bl	8009028 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009278:	bf00      	nop
}
 800927a:	bd80      	pop	{r7, pc}
 800927c:	58000c00 	.word	0x58000c00

08009280 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009284:	2102      	movs	r1, #2
 8009286:	4804      	ldr	r0, [pc, #16]	; (8009298 <HW_IPCC_SYS_SendCmd+0x18>)
 8009288:	f7ff feee 	bl	8009068 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800928c:	2102      	movs	r1, #2
 800928e:	4802      	ldr	r0, [pc, #8]	; (8009298 <HW_IPCC_SYS_SendCmd+0x18>)
 8009290:	f7ff fea5 	bl	8008fde <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009294:	bf00      	nop
}
 8009296:	bd80      	pop	{r7, pc}
 8009298:	58000c00 	.word	0x58000c00

0800929c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80092a0:	2102      	movs	r1, #2
 80092a2:	4803      	ldr	r0, [pc, #12]	; (80092b0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80092a4:	f7ff feae 	bl	8009004 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80092a8:	f7ff f82a 	bl	8008300 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80092ac:	bf00      	nop
}
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	58000c00 	.word	0x58000c00

080092b4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80092b8:	f7ff f838 	bl	800832c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80092bc:	2102      	movs	r1, #2
 80092be:	4802      	ldr	r0, [pc, #8]	; (80092c8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80092c0:	f7ff fec4 	bl	800904c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80092c4:	bf00      	nop
}
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	58000c00 	.word	0x58000c00

080092cc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80092d4:	2108      	movs	r1, #8
 80092d6:	480c      	ldr	r0, [pc, #48]	; (8009308 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80092d8:	f7ff fed5 	bl	8009086 <LL_C1_IPCC_IsActiveFlag_CHx>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80092e2:	4a0a      	ldr	r2, [pc, #40]	; (800930c <HW_IPCC_MM_SendFreeBuf+0x40>)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80092e8:	2108      	movs	r1, #8
 80092ea:	4807      	ldr	r0, [pc, #28]	; (8009308 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80092ec:	f7ff fe77 	bl	8008fde <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80092f0:	e006      	b.n	8009300 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80092f6:	2108      	movs	r1, #8
 80092f8:	4803      	ldr	r0, [pc, #12]	; (8009308 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80092fa:	f7ff feb5 	bl	8009068 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80092fe:	bf00      	nop
}
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	58000c00 	.word	0x58000c00
 800930c:	20000c7c 	.word	0x20000c7c

08009310 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009314:	2108      	movs	r1, #8
 8009316:	4806      	ldr	r0, [pc, #24]	; (8009330 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009318:	f7ff fe74 	bl	8009004 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009322:	2108      	movs	r1, #8
 8009324:	4802      	ldr	r0, [pc, #8]	; (8009330 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009326:	f7ff fe9f 	bl	8009068 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800932a:	bf00      	nop
}
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	58000c00 	.word	0x58000c00
 8009334:	20000c7c 	.word	0x20000c7c

08009338 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800933c:	2108      	movs	r1, #8
 800933e:	4802      	ldr	r0, [pc, #8]	; (8009348 <HW_IPCC_TRACES_Init+0x10>)
 8009340:	f7ff fe72 	bl	8009028 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009344:	bf00      	nop
}
 8009346:	bd80      	pop	{r7, pc}
 8009348:	58000c00 	.word	0x58000c00

0800934c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009350:	f7ff f894 	bl	800847c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009354:	2108      	movs	r1, #8
 8009356:	4802      	ldr	r0, [pc, #8]	; (8009360 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009358:	f7ff fe78 	bl	800904c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800935c:	bf00      	nop
}
 800935e:	bd80      	pop	{r7, pc}
 8009360:	58000c00 	.word	0x58000c00

08009364 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009368:	4b05      	ldr	r3, [pc, #20]	; (8009380 <UTIL_LPM_Init+0x1c>)
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <UTIL_LPM_Init+0x20>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009374:	bf00      	nop
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20000c80 	.word	0x20000c80
 8009384:	20000c84 	.word	0x20000c84

08009388 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009394:	f3ef 8310 	mrs	r3, PRIMASK
 8009398:	613b      	str	r3, [r7, #16]
  return(result);
 800939a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800939c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800939e:	b672      	cpsid	i
}
 80093a0:	bf00      	nop
  
  switch(state)
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d008      	beq.n	80093ba <UTIL_LPM_SetOffMode+0x32>
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d10e      	bne.n	80093ca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80093ac:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <UTIL_LPM_SetOffMode+0x5c>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	4a0b      	ldr	r2, [pc, #44]	; (80093e4 <UTIL_LPM_SetOffMode+0x5c>)
 80093b6:	6013      	str	r3, [r2, #0]
      break;
 80093b8:	e008      	b.n	80093cc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	43da      	mvns	r2, r3
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <UTIL_LPM_SetOffMode+0x5c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4013      	ands	r3, r2
 80093c4:	4a07      	ldr	r2, [pc, #28]	; (80093e4 <UTIL_LPM_SetOffMode+0x5c>)
 80093c6:	6013      	str	r3, [r2, #0]
      break;
 80093c8:	e000      	b.n	80093cc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80093ca:	bf00      	nop
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f383 8810 	msr	PRIMASK, r3
}
 80093d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80093d8:	bf00      	nop
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	20000c84 	.word	0x20000c84

080093e8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b090      	sub	sp, #64	; 0x40
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80093f0:	4b73      	ldr	r3, [pc, #460]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80093f6:	4b72      	ldr	r3, [pc, #456]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4013      	ands	r3, r2
 80093fe:	4a70      	ldr	r2, [pc, #448]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 8009400:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009402:	4b70      	ldr	r3, [pc, #448]	; (80095c4 <UTIL_SEQ_Run+0x1dc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009408:	4b6f      	ldr	r3, [pc, #444]	; (80095c8 <UTIL_SEQ_Run+0x1e0>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800940e:	4b6f      	ldr	r3, [pc, #444]	; (80095cc <UTIL_SEQ_Run+0x1e4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009414:	4b6e      	ldr	r3, [pc, #440]	; (80095d0 <UTIL_SEQ_Run+0x1e8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800941a:	e08d      	b.n	8009538 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009420:	e002      	b.n	8009428 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009424:	3301      	adds	r3, #1
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009428:	4a6a      	ldr	r2, [pc, #424]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	401a      	ands	r2, r3
 8009434:	4b62      	ldr	r3, [pc, #392]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4013      	ands	r3, r2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f1      	beq.n	8009422 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800943e:	4a65      	ldr	r2, [pc, #404]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 8009440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009442:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	401a      	ands	r2, r3
 800944a:	4b5d      	ldr	r3, [pc, #372]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4013      	ands	r3, r2
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009452:	4a60      	ldr	r2, [pc, #384]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 8009454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	4413      	add	r3, r2
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	4013      	ands	r3, r2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d106      	bne.n	8009472 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009464:	4a5b      	ldr	r2, [pc, #364]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 8009466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	4413      	add	r3, r2
 800946c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009470:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009472:	4a58      	ldr	r2, [pc, #352]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 8009474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	4413      	add	r3, r2
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	4013      	ands	r3, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f9b3 	bl	80097ec <SEQ_BitPosition>
 8009486:	4603      	mov	r3, r0
 8009488:	461a      	mov	r2, r3
 800948a:	4b53      	ldr	r3, [pc, #332]	; (80095d8 <UTIL_SEQ_Run+0x1f0>)
 800948c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800948e:	4a51      	ldr	r2, [pc, #324]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 8009490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	4413      	add	r3, r2
 8009496:	685a      	ldr	r2, [r3, #4]
 8009498:	4b4f      	ldr	r3, [pc, #316]	; (80095d8 <UTIL_SEQ_Run+0x1f0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2101      	movs	r1, #1
 800949e:	fa01 f303 	lsl.w	r3, r1, r3
 80094a2:	43db      	mvns	r3, r3
 80094a4:	401a      	ands	r2, r3
 80094a6:	494b      	ldr	r1, [pc, #300]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 80094a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	440b      	add	r3, r1
 80094ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094b0:	f3ef 8310 	mrs	r3, PRIMASK
 80094b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80094b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80094b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ba:	b672      	cpsid	i
}
 80094bc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80094be:	4b46      	ldr	r3, [pc, #280]	; (80095d8 <UTIL_SEQ_Run+0x1f0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2201      	movs	r2, #1
 80094c4:	fa02 f303 	lsl.w	r3, r2, r3
 80094c8:	43da      	mvns	r2, r3
 80094ca:	4b3e      	ldr	r3, [pc, #248]	; (80095c4 <UTIL_SEQ_Run+0x1dc>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4013      	ands	r3, r2
 80094d0:	4a3c      	ldr	r2, [pc, #240]	; (80095c4 <UTIL_SEQ_Run+0x1dc>)
 80094d2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80094d4:	2302      	movs	r3, #2
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d8:	e013      	b.n	8009502 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80094da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094dc:	3b01      	subs	r3, #1
 80094de:	4a3d      	ldr	r2, [pc, #244]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 80094e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80094e4:	4b3c      	ldr	r3, [pc, #240]	; (80095d8 <UTIL_SEQ_Run+0x1f0>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2201      	movs	r2, #1
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	43da      	mvns	r2, r3
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	3b01      	subs	r3, #1
 80094f4:	400a      	ands	r2, r1
 80094f6:	4937      	ldr	r1, [pc, #220]	; (80095d4 <UTIL_SEQ_Run+0x1ec>)
 80094f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80094fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fe:	3b01      	subs	r3, #1
 8009500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e8      	bne.n	80094da <UTIL_SEQ_Run+0xf2>
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f383 8810 	msr	PRIMASK, r3
}
 8009512:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009514:	4b30      	ldr	r3, [pc, #192]	; (80095d8 <UTIL_SEQ_Run+0x1f0>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a30      	ldr	r2, [pc, #192]	; (80095dc <UTIL_SEQ_Run+0x1f4>)
 800951a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951e:	4798      	blx	r3

    local_taskset = TaskSet;
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <UTIL_SEQ_Run+0x1dc>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009526:	4b28      	ldr	r3, [pc, #160]	; (80095c8 <UTIL_SEQ_Run+0x1e0>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800952c:	4b27      	ldr	r3, [pc, #156]	; (80095cc <UTIL_SEQ_Run+0x1e4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009532:	4b27      	ldr	r3, [pc, #156]	; (80095d0 <UTIL_SEQ_Run+0x1e8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	401a      	ands	r2, r3
 800953e:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4013      	ands	r3, r2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <UTIL_SEQ_Run+0x16c>
 8009548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	4013      	ands	r3, r2
 800954e:	2b00      	cmp	r3, #0
 8009550:	f43f af64 	beq.w	800941c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009554:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <UTIL_SEQ_Run+0x1f0>)
 8009556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800955a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800955c:	f000 f938 	bl	80097d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009560:	f3ef 8310 	mrs	r3, PRIMASK
 8009564:	613b      	str	r3, [r7, #16]
  return(result);
 8009566:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800956a:	b672      	cpsid	i
}
 800956c:	bf00      	nop
  local_taskset = TaskSet;
 800956e:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <UTIL_SEQ_Run+0x1dc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009574:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <UTIL_SEQ_Run+0x1e0>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800957a:	4b14      	ldr	r3, [pc, #80]	; (80095cc <UTIL_SEQ_Run+0x1e4>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	401a      	ands	r2, r3
 8009586:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d107      	bne.n	80095a0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <UTIL_SEQ_Run+0x1e8>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009596:	4013      	ands	r3, r2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800959c:	f7f7 fc1a 	bl	8000dd4 <UTIL_SEQ_Idle>
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f383 8810 	msr	PRIMASK, r3
}
 80095aa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80095ac:	f000 f917 	bl	80097de <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80095b0:	4a03      	ldr	r2, [pc, #12]	; (80095c0 <UTIL_SEQ_Run+0x1d8>)
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	6013      	str	r3, [r2, #0]

  return;
 80095b6:	bf00      	nop
}
 80095b8:	3740      	adds	r7, #64	; 0x40
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000024 	.word	0x20000024
 80095c4:	20000c88 	.word	0x20000c88
 80095c8:	20000c8c 	.word	0x20000c8c
 80095cc:	20000020 	.word	0x20000020
 80095d0:	20000c90 	.word	0x20000c90
 80095d4:	20000d18 	.word	0x20000d18
 80095d8:	20000c94 	.word	0x20000c94
 80095dc:	20000c98 	.word	0x20000c98

080095e0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ec:	f3ef 8310 	mrs	r3, PRIMASK
 80095f0:	617b      	str	r3, [r7, #20]
  return(result);
 80095f2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80095f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80095f6:	b672      	cpsid	i
}
 80095f8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 f8f6 	bl	80097ec <SEQ_BitPosition>
 8009600:	4603      	mov	r3, r0
 8009602:	4619      	mov	r1, r3
 8009604:	4a06      	ldr	r2, [pc, #24]	; (8009620 <UTIL_SEQ_RegTask+0x40>)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f383 8810 	msr	PRIMASK, r3
}
 8009616:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009618:	bf00      	nop
}
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000c98 	.word	0x20000c98

08009624 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800962e:	f3ef 8310 	mrs	r3, PRIMASK
 8009632:	60fb      	str	r3, [r7, #12]
  return(result);
 8009634:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009638:	b672      	cpsid	i
}
 800963a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800963c:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <UTIL_SEQ_SetTask+0x50>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4313      	orrs	r3, r2
 8009644:	4a0b      	ldr	r2, [pc, #44]	; (8009674 <UTIL_SEQ_SetTask+0x50>)
 8009646:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009648:	4a0b      	ldr	r2, [pc, #44]	; (8009678 <UTIL_SEQ_SetTask+0x54>)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	431a      	orrs	r2, r3
 8009654:	4908      	ldr	r1, [pc, #32]	; (8009678 <UTIL_SEQ_SetTask+0x54>)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f383 8810 	msr	PRIMASK, r3
}
 8009666:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009668:	bf00      	nop
}
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	20000c88 	.word	0x20000c88
 8009678:	20000d18 	.word	0x20000d18

0800967c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009684:	f3ef 8310 	mrs	r3, PRIMASK
 8009688:	60fb      	str	r3, [r7, #12]
  return(result);
 800968a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800968c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800968e:	b672      	cpsid	i
}
 8009690:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	43da      	mvns	r2, r3
 8009696:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <UTIL_SEQ_PauseTask+0x3c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4013      	ands	r3, r2
 800969c:	4a06      	ldr	r2, [pc, #24]	; (80096b8 <UTIL_SEQ_PauseTask+0x3c>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f383 8810 	msr	PRIMASK, r3
}
 80096aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80096ac:	bf00      	nop
}
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	20000020 	.word	0x20000020

080096bc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096c4:	f3ef 8310 	mrs	r3, PRIMASK
 80096c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80096ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80096cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096ce:	b672      	cpsid	i
}
 80096d0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80096d2:	4b09      	ldr	r3, [pc, #36]	; (80096f8 <UTIL_SEQ_ResumeTask+0x3c>)
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4313      	orrs	r3, r2
 80096da:	4a07      	ldr	r2, [pc, #28]	; (80096f8 <UTIL_SEQ_ResumeTask+0x3c>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f383 8810 	msr	PRIMASK, r3
}
 80096e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80096ea:	bf00      	nop
}
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000020 	.word	0x20000020

080096fc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009704:	f3ef 8310 	mrs	r3, PRIMASK
 8009708:	60fb      	str	r3, [r7, #12]
  return(result);
 800970a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800970c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800970e:	b672      	cpsid	i
}
 8009710:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009712:	4b09      	ldr	r3, [pc, #36]	; (8009738 <UTIL_SEQ_SetEvt+0x3c>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4313      	orrs	r3, r2
 800971a:	4a07      	ldr	r2, [pc, #28]	; (8009738 <UTIL_SEQ_SetEvt+0x3c>)
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f383 8810 	msr	PRIMASK, r3
}
 8009728:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800972a:	bf00      	nop
}
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000c8c 	.word	0x20000c8c

0800973c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009744:	4b1f      	ldr	r3, [pc, #124]	; (80097c4 <UTIL_SEQ_WaitEvt+0x88>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800974a:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <UTIL_SEQ_WaitEvt+0x88>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009752:	d102      	bne.n	800975a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009754:	2300      	movs	r3, #0
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	e005      	b.n	8009766 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800975a:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <UTIL_SEQ_WaitEvt+0x88>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2201      	movs	r2, #1
 8009760:	fa02 f303 	lsl.w	r3, r2, r3
 8009764:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009766:	4b18      	ldr	r3, [pc, #96]	; (80097c8 <UTIL_SEQ_WaitEvt+0x8c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800976c:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <UTIL_SEQ_WaitEvt+0x8c>)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009772:	e003      	b.n	800977c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	69f8      	ldr	r0, [r7, #28]
 8009778:	f7f7 fb33 	bl	8000de2 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800977c:	4b13      	ldr	r3, [pc, #76]	; (80097cc <UTIL_SEQ_WaitEvt+0x90>)
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4013      	ands	r3, r2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0f5      	beq.n	8009774 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009788:	4a0e      	ldr	r2, [pc, #56]	; (80097c4 <UTIL_SEQ_WaitEvt+0x88>)
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978e:	f3ef 8310 	mrs	r3, PRIMASK
 8009792:	60bb      	str	r3, [r7, #8]
  return(result);
 8009794:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009798:	b672      	cpsid	i
}
 800979a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	43da      	mvns	r2, r3
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <UTIL_SEQ_WaitEvt+0x90>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4013      	ands	r3, r2
 80097a6:	4a09      	ldr	r2, [pc, #36]	; (80097cc <UTIL_SEQ_WaitEvt+0x90>)
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f383 8810 	msr	PRIMASK, r3
}
 80097b4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80097b6:	4a04      	ldr	r2, [pc, #16]	; (80097c8 <UTIL_SEQ_WaitEvt+0x8c>)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	6013      	str	r3, [r2, #0]
  return;
 80097bc:	bf00      	nop
}
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000c94 	.word	0x20000c94
 80097c8:	20000c90 	.word	0x20000c90
 80097cc:	20000c8c 	.word	0x20000c8c

080097d0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80097d4:	bf00      	nop
}
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80097de:	b480      	push	{r7}
 80097e0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80097e2:	bf00      	nop
}
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	0c1b      	lsrs	r3, r3, #16
 8009800:	041b      	lsls	r3, r3, #16
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <SEQ_BitPosition+0x24>
 8009806:	2310      	movs	r3, #16
 8009808:	73fb      	strb	r3, [r7, #15]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	041b      	lsls	r3, r3, #16
 800980e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <SEQ_BitPosition+0x3a>
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	3308      	adds	r3, #8
 800981e:	73fb      	strb	r3, [r7, #15]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d105      	bne.n	800983c <SEQ_BitPosition+0x50>
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	3304      	adds	r3, #4
 8009834:	73fb      	strb	r3, [r7, #15]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	0f1b      	lsrs	r3, r3, #28
 8009840:	4a07      	ldr	r2, [pc, #28]	; (8009860 <SEQ_BitPosition+0x74>)
 8009842:	5cd2      	ldrb	r2, [r2, r3]
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4413      	add	r3, r2
 8009848:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	f1c3 031f 	rsb	r3, r3, #31
 8009850:	b2db      	uxtb	r3, r3
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	0800ab14 	.word	0x0800ab14

08009864 <__errno>:
 8009864:	4b01      	ldr	r3, [pc, #4]	; (800986c <__errno+0x8>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000028 	.word	0x20000028

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	4d0d      	ldr	r5, [pc, #52]	; (80098a8 <__libc_init_array+0x38>)
 8009874:	4c0d      	ldr	r4, [pc, #52]	; (80098ac <__libc_init_array+0x3c>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	2600      	movs	r6, #0
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	4d0b      	ldr	r5, [pc, #44]	; (80098b0 <__libc_init_array+0x40>)
 8009882:	4c0c      	ldr	r4, [pc, #48]	; (80098b4 <__libc_init_array+0x44>)
 8009884:	f000 ffbc 	bl	800a800 <_init>
 8009888:	1b64      	subs	r4, r4, r5
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	2600      	movs	r6, #0
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	f855 3b04 	ldr.w	r3, [r5], #4
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	0800abc4 	.word	0x0800abc4
 80098ac:	0800abc4 	.word	0x0800abc4
 80098b0:	0800abc4 	.word	0x0800abc4
 80098b4:	0800abc8 	.word	0x0800abc8

080098b8 <memcpy>:
 80098b8:	440a      	add	r2, r1
 80098ba:	4291      	cmp	r1, r2
 80098bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80098c0:	d100      	bne.n	80098c4 <memcpy+0xc>
 80098c2:	4770      	bx	lr
 80098c4:	b510      	push	{r4, lr}
 80098c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ce:	4291      	cmp	r1, r2
 80098d0:	d1f9      	bne.n	80098c6 <memcpy+0xe>
 80098d2:	bd10      	pop	{r4, pc}

080098d4 <memset>:
 80098d4:	4402      	add	r2, r0
 80098d6:	4603      	mov	r3, r0
 80098d8:	4293      	cmp	r3, r2
 80098da:	d100      	bne.n	80098de <memset+0xa>
 80098dc:	4770      	bx	lr
 80098de:	f803 1b01 	strb.w	r1, [r3], #1
 80098e2:	e7f9      	b.n	80098d8 <memset+0x4>

080098e4 <iprintf>:
 80098e4:	b40f      	push	{r0, r1, r2, r3}
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <iprintf+0x2c>)
 80098e8:	b513      	push	{r0, r1, r4, lr}
 80098ea:	681c      	ldr	r4, [r3, #0]
 80098ec:	b124      	cbz	r4, 80098f8 <iprintf+0x14>
 80098ee:	69a3      	ldr	r3, [r4, #24]
 80098f0:	b913      	cbnz	r3, 80098f8 <iprintf+0x14>
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 f866 	bl	80099c4 <__sinit>
 80098f8:	ab05      	add	r3, sp, #20
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	68a1      	ldr	r1, [r4, #8]
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 f9bd 	bl	8009c80 <_vfiprintf_r>
 8009906:	b002      	add	sp, #8
 8009908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800990c:	b004      	add	sp, #16
 800990e:	4770      	bx	lr
 8009910:	20000028 	.word	0x20000028

08009914 <std>:
 8009914:	2300      	movs	r3, #0
 8009916:	b510      	push	{r4, lr}
 8009918:	4604      	mov	r4, r0
 800991a:	e9c0 3300 	strd	r3, r3, [r0]
 800991e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009922:	6083      	str	r3, [r0, #8]
 8009924:	8181      	strh	r1, [r0, #12]
 8009926:	6643      	str	r3, [r0, #100]	; 0x64
 8009928:	81c2      	strh	r2, [r0, #14]
 800992a:	6183      	str	r3, [r0, #24]
 800992c:	4619      	mov	r1, r3
 800992e:	2208      	movs	r2, #8
 8009930:	305c      	adds	r0, #92	; 0x5c
 8009932:	f7ff ffcf 	bl	80098d4 <memset>
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <std+0x38>)
 8009938:	6263      	str	r3, [r4, #36]	; 0x24
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <std+0x3c>)
 800993c:	62a3      	str	r3, [r4, #40]	; 0x28
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <std+0x40>)
 8009940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <std+0x44>)
 8009944:	6224      	str	r4, [r4, #32]
 8009946:	6323      	str	r3, [r4, #48]	; 0x30
 8009948:	bd10      	pop	{r4, pc}
 800994a:	bf00      	nop
 800994c:	0800a229 	.word	0x0800a229
 8009950:	0800a24b 	.word	0x0800a24b
 8009954:	0800a283 	.word	0x0800a283
 8009958:	0800a2a7 	.word	0x0800a2a7

0800995c <_cleanup_r>:
 800995c:	4901      	ldr	r1, [pc, #4]	; (8009964 <_cleanup_r+0x8>)
 800995e:	f000 b8af 	b.w	8009ac0 <_fwalk_reent>
 8009962:	bf00      	nop
 8009964:	0800a581 	.word	0x0800a581

08009968 <__sfmoreglue>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	2268      	movs	r2, #104	; 0x68
 800996c:	1e4d      	subs	r5, r1, #1
 800996e:	4355      	muls	r5, r2
 8009970:	460e      	mov	r6, r1
 8009972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009976:	f000 f8e5 	bl	8009b44 <_malloc_r>
 800997a:	4604      	mov	r4, r0
 800997c:	b140      	cbz	r0, 8009990 <__sfmoreglue+0x28>
 800997e:	2100      	movs	r1, #0
 8009980:	e9c0 1600 	strd	r1, r6, [r0]
 8009984:	300c      	adds	r0, #12
 8009986:	60a0      	str	r0, [r4, #8]
 8009988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800998c:	f7ff ffa2 	bl	80098d4 <memset>
 8009990:	4620      	mov	r0, r4
 8009992:	bd70      	pop	{r4, r5, r6, pc}

08009994 <__sfp_lock_acquire>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sfp_lock_acquire+0x8>)
 8009996:	f000 b8b3 	b.w	8009b00 <__retarget_lock_acquire_recursive>
 800999a:	bf00      	nop
 800999c:	20000d29 	.word	0x20000d29

080099a0 <__sfp_lock_release>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__sfp_lock_release+0x8>)
 80099a2:	f000 b8ae 	b.w	8009b02 <__retarget_lock_release_recursive>
 80099a6:	bf00      	nop
 80099a8:	20000d29 	.word	0x20000d29

080099ac <__sinit_lock_acquire>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__sinit_lock_acquire+0x8>)
 80099ae:	f000 b8a7 	b.w	8009b00 <__retarget_lock_acquire_recursive>
 80099b2:	bf00      	nop
 80099b4:	20000d2a 	.word	0x20000d2a

080099b8 <__sinit_lock_release>:
 80099b8:	4801      	ldr	r0, [pc, #4]	; (80099c0 <__sinit_lock_release+0x8>)
 80099ba:	f000 b8a2 	b.w	8009b02 <__retarget_lock_release_recursive>
 80099be:	bf00      	nop
 80099c0:	20000d2a 	.word	0x20000d2a

080099c4 <__sinit>:
 80099c4:	b510      	push	{r4, lr}
 80099c6:	4604      	mov	r4, r0
 80099c8:	f7ff fff0 	bl	80099ac <__sinit_lock_acquire>
 80099cc:	69a3      	ldr	r3, [r4, #24]
 80099ce:	b11b      	cbz	r3, 80099d8 <__sinit+0x14>
 80099d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d4:	f7ff bff0 	b.w	80099b8 <__sinit_lock_release>
 80099d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099dc:	6523      	str	r3, [r4, #80]	; 0x50
 80099de:	4b13      	ldr	r3, [pc, #76]	; (8009a2c <__sinit+0x68>)
 80099e0:	4a13      	ldr	r2, [pc, #76]	; (8009a30 <__sinit+0x6c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80099e6:	42a3      	cmp	r3, r4
 80099e8:	bf04      	itt	eq
 80099ea:	2301      	moveq	r3, #1
 80099ec:	61a3      	streq	r3, [r4, #24]
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 f820 	bl	8009a34 <__sfp>
 80099f4:	6060      	str	r0, [r4, #4]
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 f81c 	bl	8009a34 <__sfp>
 80099fc:	60a0      	str	r0, [r4, #8]
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 f818 	bl	8009a34 <__sfp>
 8009a04:	2200      	movs	r2, #0
 8009a06:	60e0      	str	r0, [r4, #12]
 8009a08:	2104      	movs	r1, #4
 8009a0a:	6860      	ldr	r0, [r4, #4]
 8009a0c:	f7ff ff82 	bl	8009914 <std>
 8009a10:	68a0      	ldr	r0, [r4, #8]
 8009a12:	2201      	movs	r2, #1
 8009a14:	2109      	movs	r1, #9
 8009a16:	f7ff ff7d 	bl	8009914 <std>
 8009a1a:	68e0      	ldr	r0, [r4, #12]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	2112      	movs	r1, #18
 8009a20:	f7ff ff78 	bl	8009914 <std>
 8009a24:	2301      	movs	r3, #1
 8009a26:	61a3      	str	r3, [r4, #24]
 8009a28:	e7d2      	b.n	80099d0 <__sinit+0xc>
 8009a2a:	bf00      	nop
 8009a2c:	0800ab24 	.word	0x0800ab24
 8009a30:	0800995d 	.word	0x0800995d

08009a34 <__sfp>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	4607      	mov	r7, r0
 8009a38:	f7ff ffac 	bl	8009994 <__sfp_lock_acquire>
 8009a3c:	4b1e      	ldr	r3, [pc, #120]	; (8009ab8 <__sfp+0x84>)
 8009a3e:	681e      	ldr	r6, [r3, #0]
 8009a40:	69b3      	ldr	r3, [r6, #24]
 8009a42:	b913      	cbnz	r3, 8009a4a <__sfp+0x16>
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff ffbd 	bl	80099c4 <__sinit>
 8009a4a:	3648      	adds	r6, #72	; 0x48
 8009a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	d503      	bpl.n	8009a5c <__sfp+0x28>
 8009a54:	6833      	ldr	r3, [r6, #0]
 8009a56:	b30b      	cbz	r3, 8009a9c <__sfp+0x68>
 8009a58:	6836      	ldr	r6, [r6, #0]
 8009a5a:	e7f7      	b.n	8009a4c <__sfp+0x18>
 8009a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a60:	b9d5      	cbnz	r5, 8009a98 <__sfp+0x64>
 8009a62:	4b16      	ldr	r3, [pc, #88]	; (8009abc <__sfp+0x88>)
 8009a64:	60e3      	str	r3, [r4, #12]
 8009a66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a6a:	6665      	str	r5, [r4, #100]	; 0x64
 8009a6c:	f000 f847 	bl	8009afe <__retarget_lock_init_recursive>
 8009a70:	f7ff ff96 	bl	80099a0 <__sfp_lock_release>
 8009a74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a7c:	6025      	str	r5, [r4, #0]
 8009a7e:	61a5      	str	r5, [r4, #24]
 8009a80:	2208      	movs	r2, #8
 8009a82:	4629      	mov	r1, r5
 8009a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a88:	f7ff ff24 	bl	80098d4 <memset>
 8009a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a94:	4620      	mov	r0, r4
 8009a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a98:	3468      	adds	r4, #104	; 0x68
 8009a9a:	e7d9      	b.n	8009a50 <__sfp+0x1c>
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f7ff ff62 	bl	8009968 <__sfmoreglue>
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	6030      	str	r0, [r6, #0]
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1d5      	bne.n	8009a58 <__sfp+0x24>
 8009aac:	f7ff ff78 	bl	80099a0 <__sfp_lock_release>
 8009ab0:	230c      	movs	r3, #12
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	e7ee      	b.n	8009a94 <__sfp+0x60>
 8009ab6:	bf00      	nop
 8009ab8:	0800ab24 	.word	0x0800ab24
 8009abc:	ffff0001 	.word	0xffff0001

08009ac0 <_fwalk_reent>:
 8009ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	4688      	mov	r8, r1
 8009ac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009acc:	2700      	movs	r7, #0
 8009ace:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ad2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ad6:	d505      	bpl.n	8009ae4 <_fwalk_reent+0x24>
 8009ad8:	6824      	ldr	r4, [r4, #0]
 8009ada:	2c00      	cmp	r4, #0
 8009adc:	d1f7      	bne.n	8009ace <_fwalk_reent+0xe>
 8009ade:	4638      	mov	r0, r7
 8009ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae4:	89ab      	ldrh	r3, [r5, #12]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d907      	bls.n	8009afa <_fwalk_reent+0x3a>
 8009aea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aee:	3301      	adds	r3, #1
 8009af0:	d003      	beq.n	8009afa <_fwalk_reent+0x3a>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4630      	mov	r0, r6
 8009af6:	47c0      	blx	r8
 8009af8:	4307      	orrs	r7, r0
 8009afa:	3568      	adds	r5, #104	; 0x68
 8009afc:	e7e9      	b.n	8009ad2 <_fwalk_reent+0x12>

08009afe <__retarget_lock_init_recursive>:
 8009afe:	4770      	bx	lr

08009b00 <__retarget_lock_acquire_recursive>:
 8009b00:	4770      	bx	lr

08009b02 <__retarget_lock_release_recursive>:
 8009b02:	4770      	bx	lr

08009b04 <sbrk_aligned>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	4e0e      	ldr	r6, [pc, #56]	; (8009b40 <sbrk_aligned+0x3c>)
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6831      	ldr	r1, [r6, #0]
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	b911      	cbnz	r1, 8009b16 <sbrk_aligned+0x12>
 8009b10:	f000 fb7a 	bl	800a208 <_sbrk_r>
 8009b14:	6030      	str	r0, [r6, #0]
 8009b16:	4621      	mov	r1, r4
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 fb75 	bl	800a208 <_sbrk_r>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d00a      	beq.n	8009b38 <sbrk_aligned+0x34>
 8009b22:	1cc4      	adds	r4, r0, #3
 8009b24:	f024 0403 	bic.w	r4, r4, #3
 8009b28:	42a0      	cmp	r0, r4
 8009b2a:	d007      	beq.n	8009b3c <sbrk_aligned+0x38>
 8009b2c:	1a21      	subs	r1, r4, r0
 8009b2e:	4628      	mov	r0, r5
 8009b30:	f000 fb6a 	bl	800a208 <_sbrk_r>
 8009b34:	3001      	adds	r0, #1
 8009b36:	d101      	bne.n	8009b3c <sbrk_aligned+0x38>
 8009b38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	20000d30 	.word	0x20000d30

08009b44 <_malloc_r>:
 8009b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b48:	1ccd      	adds	r5, r1, #3
 8009b4a:	f025 0503 	bic.w	r5, r5, #3
 8009b4e:	3508      	adds	r5, #8
 8009b50:	2d0c      	cmp	r5, #12
 8009b52:	bf38      	it	cc
 8009b54:	250c      	movcc	r5, #12
 8009b56:	2d00      	cmp	r5, #0
 8009b58:	4607      	mov	r7, r0
 8009b5a:	db01      	blt.n	8009b60 <_malloc_r+0x1c>
 8009b5c:	42a9      	cmp	r1, r5
 8009b5e:	d905      	bls.n	8009b6c <_malloc_r+0x28>
 8009b60:	230c      	movs	r3, #12
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	2600      	movs	r6, #0
 8009b66:	4630      	mov	r0, r6
 8009b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b6c:	4e2e      	ldr	r6, [pc, #184]	; (8009c28 <_malloc_r+0xe4>)
 8009b6e:	f000 fdbb 	bl	800a6e8 <__malloc_lock>
 8009b72:	6833      	ldr	r3, [r6, #0]
 8009b74:	461c      	mov	r4, r3
 8009b76:	bb34      	cbnz	r4, 8009bc6 <_malloc_r+0x82>
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	f7ff ffc2 	bl	8009b04 <sbrk_aligned>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	4604      	mov	r4, r0
 8009b84:	d14d      	bne.n	8009c22 <_malloc_r+0xde>
 8009b86:	6834      	ldr	r4, [r6, #0]
 8009b88:	4626      	mov	r6, r4
 8009b8a:	2e00      	cmp	r6, #0
 8009b8c:	d140      	bne.n	8009c10 <_malloc_r+0xcc>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	4631      	mov	r1, r6
 8009b92:	4638      	mov	r0, r7
 8009b94:	eb04 0803 	add.w	r8, r4, r3
 8009b98:	f000 fb36 	bl	800a208 <_sbrk_r>
 8009b9c:	4580      	cmp	r8, r0
 8009b9e:	d13a      	bne.n	8009c16 <_malloc_r+0xd2>
 8009ba0:	6821      	ldr	r1, [r4, #0]
 8009ba2:	3503      	adds	r5, #3
 8009ba4:	1a6d      	subs	r5, r5, r1
 8009ba6:	f025 0503 	bic.w	r5, r5, #3
 8009baa:	3508      	adds	r5, #8
 8009bac:	2d0c      	cmp	r5, #12
 8009bae:	bf38      	it	cc
 8009bb0:	250c      	movcc	r5, #12
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	f7ff ffa5 	bl	8009b04 <sbrk_aligned>
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d02b      	beq.n	8009c16 <_malloc_r+0xd2>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	442b      	add	r3, r5
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	e00e      	b.n	8009be4 <_malloc_r+0xa0>
 8009bc6:	6822      	ldr	r2, [r4, #0]
 8009bc8:	1b52      	subs	r2, r2, r5
 8009bca:	d41e      	bmi.n	8009c0a <_malloc_r+0xc6>
 8009bcc:	2a0b      	cmp	r2, #11
 8009bce:	d916      	bls.n	8009bfe <_malloc_r+0xba>
 8009bd0:	1961      	adds	r1, r4, r5
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	6025      	str	r5, [r4, #0]
 8009bd6:	bf18      	it	ne
 8009bd8:	6059      	strne	r1, [r3, #4]
 8009bda:	6863      	ldr	r3, [r4, #4]
 8009bdc:	bf08      	it	eq
 8009bde:	6031      	streq	r1, [r6, #0]
 8009be0:	5162      	str	r2, [r4, r5]
 8009be2:	604b      	str	r3, [r1, #4]
 8009be4:	4638      	mov	r0, r7
 8009be6:	f104 060b 	add.w	r6, r4, #11
 8009bea:	f000 fd83 	bl	800a6f4 <__malloc_unlock>
 8009bee:	f026 0607 	bic.w	r6, r6, #7
 8009bf2:	1d23      	adds	r3, r4, #4
 8009bf4:	1af2      	subs	r2, r6, r3
 8009bf6:	d0b6      	beq.n	8009b66 <_malloc_r+0x22>
 8009bf8:	1b9b      	subs	r3, r3, r6
 8009bfa:	50a3      	str	r3, [r4, r2]
 8009bfc:	e7b3      	b.n	8009b66 <_malloc_r+0x22>
 8009bfe:	6862      	ldr	r2, [r4, #4]
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	bf0c      	ite	eq
 8009c04:	6032      	streq	r2, [r6, #0]
 8009c06:	605a      	strne	r2, [r3, #4]
 8009c08:	e7ec      	b.n	8009be4 <_malloc_r+0xa0>
 8009c0a:	4623      	mov	r3, r4
 8009c0c:	6864      	ldr	r4, [r4, #4]
 8009c0e:	e7b2      	b.n	8009b76 <_malloc_r+0x32>
 8009c10:	4634      	mov	r4, r6
 8009c12:	6876      	ldr	r6, [r6, #4]
 8009c14:	e7b9      	b.n	8009b8a <_malloc_r+0x46>
 8009c16:	230c      	movs	r3, #12
 8009c18:	603b      	str	r3, [r7, #0]
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	f000 fd6a 	bl	800a6f4 <__malloc_unlock>
 8009c20:	e7a1      	b.n	8009b66 <_malloc_r+0x22>
 8009c22:	6025      	str	r5, [r4, #0]
 8009c24:	e7de      	b.n	8009be4 <_malloc_r+0xa0>
 8009c26:	bf00      	nop
 8009c28:	20000d2c 	.word	0x20000d2c

08009c2c <__sfputc_r>:
 8009c2c:	6893      	ldr	r3, [r2, #8]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	b410      	push	{r4}
 8009c34:	6093      	str	r3, [r2, #8]
 8009c36:	da08      	bge.n	8009c4a <__sfputc_r+0x1e>
 8009c38:	6994      	ldr	r4, [r2, #24]
 8009c3a:	42a3      	cmp	r3, r4
 8009c3c:	db01      	blt.n	8009c42 <__sfputc_r+0x16>
 8009c3e:	290a      	cmp	r1, #10
 8009c40:	d103      	bne.n	8009c4a <__sfputc_r+0x1e>
 8009c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c46:	f000 bb33 	b.w	800a2b0 <__swbuf_r>
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	1c58      	adds	r0, r3, #1
 8009c4e:	6010      	str	r0, [r2, #0]
 8009c50:	7019      	strb	r1, [r3, #0]
 8009c52:	4608      	mov	r0, r1
 8009c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <__sfputs_r>:
 8009c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	4614      	mov	r4, r2
 8009c62:	18d5      	adds	r5, r2, r3
 8009c64:	42ac      	cmp	r4, r5
 8009c66:	d101      	bne.n	8009c6c <__sfputs_r+0x12>
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e007      	b.n	8009c7c <__sfputs_r+0x22>
 8009c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c70:	463a      	mov	r2, r7
 8009c72:	4630      	mov	r0, r6
 8009c74:	f7ff ffda 	bl	8009c2c <__sfputc_r>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d1f3      	bne.n	8009c64 <__sfputs_r+0xa>
 8009c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c80 <_vfiprintf_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	460d      	mov	r5, r1
 8009c86:	b09d      	sub	sp, #116	; 0x74
 8009c88:	4614      	mov	r4, r2
 8009c8a:	4698      	mov	r8, r3
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	b118      	cbz	r0, 8009c98 <_vfiprintf_r+0x18>
 8009c90:	6983      	ldr	r3, [r0, #24]
 8009c92:	b90b      	cbnz	r3, 8009c98 <_vfiprintf_r+0x18>
 8009c94:	f7ff fe96 	bl	80099c4 <__sinit>
 8009c98:	4b89      	ldr	r3, [pc, #548]	; (8009ec0 <_vfiprintf_r+0x240>)
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	d11b      	bne.n	8009cd6 <_vfiprintf_r+0x56>
 8009c9e:	6875      	ldr	r5, [r6, #4]
 8009ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca2:	07d9      	lsls	r1, r3, #31
 8009ca4:	d405      	bmi.n	8009cb2 <_vfiprintf_r+0x32>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	059a      	lsls	r2, r3, #22
 8009caa:	d402      	bmi.n	8009cb2 <_vfiprintf_r+0x32>
 8009cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cae:	f7ff ff27 	bl	8009b00 <__retarget_lock_acquire_recursive>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	071b      	lsls	r3, r3, #28
 8009cb6:	d501      	bpl.n	8009cbc <_vfiprintf_r+0x3c>
 8009cb8:	692b      	ldr	r3, [r5, #16]
 8009cba:	b9eb      	cbnz	r3, 8009cf8 <_vfiprintf_r+0x78>
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f000 fb5a 	bl	800a378 <__swsetup_r>
 8009cc4:	b1c0      	cbz	r0, 8009cf8 <_vfiprintf_r+0x78>
 8009cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cc8:	07dc      	lsls	r4, r3, #31
 8009cca:	d50e      	bpl.n	8009cea <_vfiprintf_r+0x6a>
 8009ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cd0:	b01d      	add	sp, #116	; 0x74
 8009cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd6:	4b7b      	ldr	r3, [pc, #492]	; (8009ec4 <_vfiprintf_r+0x244>)
 8009cd8:	429d      	cmp	r5, r3
 8009cda:	d101      	bne.n	8009ce0 <_vfiprintf_r+0x60>
 8009cdc:	68b5      	ldr	r5, [r6, #8]
 8009cde:	e7df      	b.n	8009ca0 <_vfiprintf_r+0x20>
 8009ce0:	4b79      	ldr	r3, [pc, #484]	; (8009ec8 <_vfiprintf_r+0x248>)
 8009ce2:	429d      	cmp	r5, r3
 8009ce4:	bf08      	it	eq
 8009ce6:	68f5      	ldreq	r5, [r6, #12]
 8009ce8:	e7da      	b.n	8009ca0 <_vfiprintf_r+0x20>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	0598      	lsls	r0, r3, #22
 8009cee:	d4ed      	bmi.n	8009ccc <_vfiprintf_r+0x4c>
 8009cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cf2:	f7ff ff06 	bl	8009b02 <__retarget_lock_release_recursive>
 8009cf6:	e7e9      	b.n	8009ccc <_vfiprintf_r+0x4c>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d06:	2330      	movs	r3, #48	; 0x30
 8009d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ecc <_vfiprintf_r+0x24c>
 8009d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d10:	f04f 0901 	mov.w	r9, #1
 8009d14:	4623      	mov	r3, r4
 8009d16:	469a      	mov	sl, r3
 8009d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d1c:	b10a      	cbz	r2, 8009d22 <_vfiprintf_r+0xa2>
 8009d1e:	2a25      	cmp	r2, #37	; 0x25
 8009d20:	d1f9      	bne.n	8009d16 <_vfiprintf_r+0x96>
 8009d22:	ebba 0b04 	subs.w	fp, sl, r4
 8009d26:	d00b      	beq.n	8009d40 <_vfiprintf_r+0xc0>
 8009d28:	465b      	mov	r3, fp
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f7ff ff93 	bl	8009c5a <__sfputs_r>
 8009d34:	3001      	adds	r0, #1
 8009d36:	f000 80aa 	beq.w	8009e8e <_vfiprintf_r+0x20e>
 8009d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d3c:	445a      	add	r2, fp
 8009d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d40:	f89a 3000 	ldrb.w	r3, [sl]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80a2 	beq.w	8009e8e <_vfiprintf_r+0x20e>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d54:	f10a 0a01 	add.w	sl, sl, #1
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	9307      	str	r3, [sp, #28]
 8009d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d60:	931a      	str	r3, [sp, #104]	; 0x68
 8009d62:	4654      	mov	r4, sl
 8009d64:	2205      	movs	r2, #5
 8009d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6a:	4858      	ldr	r0, [pc, #352]	; (8009ecc <_vfiprintf_r+0x24c>)
 8009d6c:	f7f6 fa10 	bl	8000190 <memchr>
 8009d70:	9a04      	ldr	r2, [sp, #16]
 8009d72:	b9d8      	cbnz	r0, 8009dac <_vfiprintf_r+0x12c>
 8009d74:	06d1      	lsls	r1, r2, #27
 8009d76:	bf44      	itt	mi
 8009d78:	2320      	movmi	r3, #32
 8009d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d7e:	0713      	lsls	r3, r2, #28
 8009d80:	bf44      	itt	mi
 8009d82:	232b      	movmi	r3, #43	; 0x2b
 8009d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d88:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8e:	d015      	beq.n	8009dbc <_vfiprintf_r+0x13c>
 8009d90:	9a07      	ldr	r2, [sp, #28]
 8009d92:	4654      	mov	r4, sl
 8009d94:	2000      	movs	r0, #0
 8009d96:	f04f 0c0a 	mov.w	ip, #10
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009da0:	3b30      	subs	r3, #48	; 0x30
 8009da2:	2b09      	cmp	r3, #9
 8009da4:	d94e      	bls.n	8009e44 <_vfiprintf_r+0x1c4>
 8009da6:	b1b0      	cbz	r0, 8009dd6 <_vfiprintf_r+0x156>
 8009da8:	9207      	str	r2, [sp, #28]
 8009daa:	e014      	b.n	8009dd6 <_vfiprintf_r+0x156>
 8009dac:	eba0 0308 	sub.w	r3, r0, r8
 8009db0:	fa09 f303 	lsl.w	r3, r9, r3
 8009db4:	4313      	orrs	r3, r2
 8009db6:	9304      	str	r3, [sp, #16]
 8009db8:	46a2      	mov	sl, r4
 8009dba:	e7d2      	b.n	8009d62 <_vfiprintf_r+0xe2>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1d19      	adds	r1, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	9103      	str	r1, [sp, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfbb      	ittet	lt
 8009dc8:	425b      	neglt	r3, r3
 8009dca:	f042 0202 	orrlt.w	r2, r2, #2
 8009dce:	9307      	strge	r3, [sp, #28]
 8009dd0:	9307      	strlt	r3, [sp, #28]
 8009dd2:	bfb8      	it	lt
 8009dd4:	9204      	strlt	r2, [sp, #16]
 8009dd6:	7823      	ldrb	r3, [r4, #0]
 8009dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8009dda:	d10c      	bne.n	8009df6 <_vfiprintf_r+0x176>
 8009ddc:	7863      	ldrb	r3, [r4, #1]
 8009dde:	2b2a      	cmp	r3, #42	; 0x2a
 8009de0:	d135      	bne.n	8009e4e <_vfiprintf_r+0x1ce>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	1d1a      	adds	r2, r3, #4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	9203      	str	r2, [sp, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfb8      	it	lt
 8009dee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009df2:	3402      	adds	r4, #2
 8009df4:	9305      	str	r3, [sp, #20]
 8009df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009edc <_vfiprintf_r+0x25c>
 8009dfa:	7821      	ldrb	r1, [r4, #0]
 8009dfc:	2203      	movs	r2, #3
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f7f6 f9c6 	bl	8000190 <memchr>
 8009e04:	b140      	cbz	r0, 8009e18 <_vfiprintf_r+0x198>
 8009e06:	2340      	movs	r3, #64	; 0x40
 8009e08:	eba0 000a 	sub.w	r0, r0, sl
 8009e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	4303      	orrs	r3, r0
 8009e14:	3401      	adds	r4, #1
 8009e16:	9304      	str	r3, [sp, #16]
 8009e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1c:	482c      	ldr	r0, [pc, #176]	; (8009ed0 <_vfiprintf_r+0x250>)
 8009e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e22:	2206      	movs	r2, #6
 8009e24:	f7f6 f9b4 	bl	8000190 <memchr>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d03f      	beq.n	8009eac <_vfiprintf_r+0x22c>
 8009e2c:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <_vfiprintf_r+0x254>)
 8009e2e:	bb1b      	cbnz	r3, 8009e78 <_vfiprintf_r+0x1f8>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	3307      	adds	r3, #7
 8009e34:	f023 0307 	bic.w	r3, r3, #7
 8009e38:	3308      	adds	r3, #8
 8009e3a:	9303      	str	r3, [sp, #12]
 8009e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3e:	443b      	add	r3, r7
 8009e40:	9309      	str	r3, [sp, #36]	; 0x24
 8009e42:	e767      	b.n	8009d14 <_vfiprintf_r+0x94>
 8009e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e48:	460c      	mov	r4, r1
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	e7a5      	b.n	8009d9a <_vfiprintf_r+0x11a>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	3401      	adds	r4, #1
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	4619      	mov	r1, r3
 8009e56:	f04f 0c0a 	mov.w	ip, #10
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e60:	3a30      	subs	r2, #48	; 0x30
 8009e62:	2a09      	cmp	r2, #9
 8009e64:	d903      	bls.n	8009e6e <_vfiprintf_r+0x1ee>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0c5      	beq.n	8009df6 <_vfiprintf_r+0x176>
 8009e6a:	9105      	str	r1, [sp, #20]
 8009e6c:	e7c3      	b.n	8009df6 <_vfiprintf_r+0x176>
 8009e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e72:	4604      	mov	r4, r0
 8009e74:	2301      	movs	r3, #1
 8009e76:	e7f0      	b.n	8009e5a <_vfiprintf_r+0x1da>
 8009e78:	ab03      	add	r3, sp, #12
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <_vfiprintf_r+0x258>)
 8009e80:	a904      	add	r1, sp, #16
 8009e82:	4630      	mov	r0, r6
 8009e84:	f3af 8000 	nop.w
 8009e88:	4607      	mov	r7, r0
 8009e8a:	1c78      	adds	r0, r7, #1
 8009e8c:	d1d6      	bne.n	8009e3c <_vfiprintf_r+0x1bc>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07d9      	lsls	r1, r3, #31
 8009e92:	d405      	bmi.n	8009ea0 <_vfiprintf_r+0x220>
 8009e94:	89ab      	ldrh	r3, [r5, #12]
 8009e96:	059a      	lsls	r2, r3, #22
 8009e98:	d402      	bmi.n	8009ea0 <_vfiprintf_r+0x220>
 8009e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e9c:	f7ff fe31 	bl	8009b02 <__retarget_lock_release_recursive>
 8009ea0:	89ab      	ldrh	r3, [r5, #12]
 8009ea2:	065b      	lsls	r3, r3, #25
 8009ea4:	f53f af12 	bmi.w	8009ccc <_vfiprintf_r+0x4c>
 8009ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eaa:	e711      	b.n	8009cd0 <_vfiprintf_r+0x50>
 8009eac:	ab03      	add	r3, sp, #12
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	4b09      	ldr	r3, [pc, #36]	; (8009ed8 <_vfiprintf_r+0x258>)
 8009eb4:	a904      	add	r1, sp, #16
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f880 	bl	8009fbc <_printf_i>
 8009ebc:	e7e4      	b.n	8009e88 <_vfiprintf_r+0x208>
 8009ebe:	bf00      	nop
 8009ec0:	0800ab48 	.word	0x0800ab48
 8009ec4:	0800ab68 	.word	0x0800ab68
 8009ec8:	0800ab28 	.word	0x0800ab28
 8009ecc:	0800ab88 	.word	0x0800ab88
 8009ed0:	0800ab92 	.word	0x0800ab92
 8009ed4:	00000000 	.word	0x00000000
 8009ed8:	08009c5b 	.word	0x08009c5b
 8009edc:	0800ab8e 	.word	0x0800ab8e

08009ee0 <_printf_common>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	4616      	mov	r6, r2
 8009ee6:	4699      	mov	r9, r3
 8009ee8:	688a      	ldr	r2, [r1, #8]
 8009eea:	690b      	ldr	r3, [r1, #16]
 8009eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	bfb8      	it	lt
 8009ef4:	4613      	movlt	r3, r2
 8009ef6:	6033      	str	r3, [r6, #0]
 8009ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009efc:	4607      	mov	r7, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	b10a      	cbz	r2, 8009f06 <_printf_common+0x26>
 8009f02:	3301      	adds	r3, #1
 8009f04:	6033      	str	r3, [r6, #0]
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	0699      	lsls	r1, r3, #26
 8009f0a:	bf42      	ittt	mi
 8009f0c:	6833      	ldrmi	r3, [r6, #0]
 8009f0e:	3302      	addmi	r3, #2
 8009f10:	6033      	strmi	r3, [r6, #0]
 8009f12:	6825      	ldr	r5, [r4, #0]
 8009f14:	f015 0506 	ands.w	r5, r5, #6
 8009f18:	d106      	bne.n	8009f28 <_printf_common+0x48>
 8009f1a:	f104 0a19 	add.w	sl, r4, #25
 8009f1e:	68e3      	ldr	r3, [r4, #12]
 8009f20:	6832      	ldr	r2, [r6, #0]
 8009f22:	1a9b      	subs	r3, r3, r2
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	dc26      	bgt.n	8009f76 <_printf_common+0x96>
 8009f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f2c:	1e13      	subs	r3, r2, #0
 8009f2e:	6822      	ldr	r2, [r4, #0]
 8009f30:	bf18      	it	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	0692      	lsls	r2, r2, #26
 8009f36:	d42b      	bmi.n	8009f90 <_printf_common+0xb0>
 8009f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	4638      	mov	r0, r7
 8009f40:	47c0      	blx	r8
 8009f42:	3001      	adds	r0, #1
 8009f44:	d01e      	beq.n	8009f84 <_printf_common+0xa4>
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	68e5      	ldr	r5, [r4, #12]
 8009f4a:	6832      	ldr	r2, [r6, #0]
 8009f4c:	f003 0306 	and.w	r3, r3, #6
 8009f50:	2b04      	cmp	r3, #4
 8009f52:	bf08      	it	eq
 8009f54:	1aad      	subeq	r5, r5, r2
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	6922      	ldr	r2, [r4, #16]
 8009f5a:	bf0c      	ite	eq
 8009f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f60:	2500      	movne	r5, #0
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bfc4      	itt	gt
 8009f66:	1a9b      	subgt	r3, r3, r2
 8009f68:	18ed      	addgt	r5, r5, r3
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	341a      	adds	r4, #26
 8009f6e:	42b5      	cmp	r5, r6
 8009f70:	d11a      	bne.n	8009fa8 <_printf_common+0xc8>
 8009f72:	2000      	movs	r0, #0
 8009f74:	e008      	b.n	8009f88 <_printf_common+0xa8>
 8009f76:	2301      	movs	r3, #1
 8009f78:	4652      	mov	r2, sl
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	47c0      	blx	r8
 8009f80:	3001      	adds	r0, #1
 8009f82:	d103      	bne.n	8009f8c <_printf_common+0xac>
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8c:	3501      	adds	r5, #1
 8009f8e:	e7c6      	b.n	8009f1e <_printf_common+0x3e>
 8009f90:	18e1      	adds	r1, r4, r3
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	2030      	movs	r0, #48	; 0x30
 8009f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f9a:	4422      	add	r2, r4
 8009f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	e7c7      	b.n	8009f38 <_printf_common+0x58>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4622      	mov	r2, r4
 8009fac:	4649      	mov	r1, r9
 8009fae:	4638      	mov	r0, r7
 8009fb0:	47c0      	blx	r8
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d0e6      	beq.n	8009f84 <_printf_common+0xa4>
 8009fb6:	3601      	adds	r6, #1
 8009fb8:	e7d9      	b.n	8009f6e <_printf_common+0x8e>
	...

08009fbc <_printf_i>:
 8009fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc0:	7e0f      	ldrb	r7, [r1, #24]
 8009fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fc4:	2f78      	cmp	r7, #120	; 0x78
 8009fc6:	4691      	mov	r9, r2
 8009fc8:	4680      	mov	r8, r0
 8009fca:	460c      	mov	r4, r1
 8009fcc:	469a      	mov	sl, r3
 8009fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fd2:	d807      	bhi.n	8009fe4 <_printf_i+0x28>
 8009fd4:	2f62      	cmp	r7, #98	; 0x62
 8009fd6:	d80a      	bhi.n	8009fee <_printf_i+0x32>
 8009fd8:	2f00      	cmp	r7, #0
 8009fda:	f000 80d8 	beq.w	800a18e <_printf_i+0x1d2>
 8009fde:	2f58      	cmp	r7, #88	; 0x58
 8009fe0:	f000 80a3 	beq.w	800a12a <_printf_i+0x16e>
 8009fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fec:	e03a      	b.n	800a064 <_printf_i+0xa8>
 8009fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ff2:	2b15      	cmp	r3, #21
 8009ff4:	d8f6      	bhi.n	8009fe4 <_printf_i+0x28>
 8009ff6:	a101      	add	r1, pc, #4	; (adr r1, 8009ffc <_printf_i+0x40>)
 8009ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ffc:	0800a055 	.word	0x0800a055
 800a000:	0800a069 	.word	0x0800a069
 800a004:	08009fe5 	.word	0x08009fe5
 800a008:	08009fe5 	.word	0x08009fe5
 800a00c:	08009fe5 	.word	0x08009fe5
 800a010:	08009fe5 	.word	0x08009fe5
 800a014:	0800a069 	.word	0x0800a069
 800a018:	08009fe5 	.word	0x08009fe5
 800a01c:	08009fe5 	.word	0x08009fe5
 800a020:	08009fe5 	.word	0x08009fe5
 800a024:	08009fe5 	.word	0x08009fe5
 800a028:	0800a175 	.word	0x0800a175
 800a02c:	0800a099 	.word	0x0800a099
 800a030:	0800a157 	.word	0x0800a157
 800a034:	08009fe5 	.word	0x08009fe5
 800a038:	08009fe5 	.word	0x08009fe5
 800a03c:	0800a197 	.word	0x0800a197
 800a040:	08009fe5 	.word	0x08009fe5
 800a044:	0800a099 	.word	0x0800a099
 800a048:	08009fe5 	.word	0x08009fe5
 800a04c:	08009fe5 	.word	0x08009fe5
 800a050:	0800a15f 	.word	0x0800a15f
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	602a      	str	r2, [r5, #0]
 800a05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a064:	2301      	movs	r3, #1
 800a066:	e0a3      	b.n	800a1b0 <_printf_i+0x1f4>
 800a068:	6820      	ldr	r0, [r4, #0]
 800a06a:	6829      	ldr	r1, [r5, #0]
 800a06c:	0606      	lsls	r6, r0, #24
 800a06e:	f101 0304 	add.w	r3, r1, #4
 800a072:	d50a      	bpl.n	800a08a <_printf_i+0xce>
 800a074:	680e      	ldr	r6, [r1, #0]
 800a076:	602b      	str	r3, [r5, #0]
 800a078:	2e00      	cmp	r6, #0
 800a07a:	da03      	bge.n	800a084 <_printf_i+0xc8>
 800a07c:	232d      	movs	r3, #45	; 0x2d
 800a07e:	4276      	negs	r6, r6
 800a080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a084:	485e      	ldr	r0, [pc, #376]	; (800a200 <_printf_i+0x244>)
 800a086:	230a      	movs	r3, #10
 800a088:	e019      	b.n	800a0be <_printf_i+0x102>
 800a08a:	680e      	ldr	r6, [r1, #0]
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a092:	bf18      	it	ne
 800a094:	b236      	sxthne	r6, r6
 800a096:	e7ef      	b.n	800a078 <_printf_i+0xbc>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	1d19      	adds	r1, r3, #4
 800a09e:	6029      	str	r1, [r5, #0]
 800a0a0:	0601      	lsls	r1, r0, #24
 800a0a2:	d501      	bpl.n	800a0a8 <_printf_i+0xec>
 800a0a4:	681e      	ldr	r6, [r3, #0]
 800a0a6:	e002      	b.n	800a0ae <_printf_i+0xf2>
 800a0a8:	0646      	lsls	r6, r0, #25
 800a0aa:	d5fb      	bpl.n	800a0a4 <_printf_i+0xe8>
 800a0ac:	881e      	ldrh	r6, [r3, #0]
 800a0ae:	4854      	ldr	r0, [pc, #336]	; (800a200 <_printf_i+0x244>)
 800a0b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a0b2:	bf0c      	ite	eq
 800a0b4:	2308      	moveq	r3, #8
 800a0b6:	230a      	movne	r3, #10
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0be:	6865      	ldr	r5, [r4, #4]
 800a0c0:	60a5      	str	r5, [r4, #8]
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	bfa2      	ittt	ge
 800a0c6:	6821      	ldrge	r1, [r4, #0]
 800a0c8:	f021 0104 	bicge.w	r1, r1, #4
 800a0cc:	6021      	strge	r1, [r4, #0]
 800a0ce:	b90e      	cbnz	r6, 800a0d4 <_printf_i+0x118>
 800a0d0:	2d00      	cmp	r5, #0
 800a0d2:	d04d      	beq.n	800a170 <_printf_i+0x1b4>
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0da:	fb03 6711 	mls	r7, r3, r1, r6
 800a0de:	5dc7      	ldrb	r7, [r0, r7]
 800a0e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0e4:	4637      	mov	r7, r6
 800a0e6:	42bb      	cmp	r3, r7
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	d9f4      	bls.n	800a0d6 <_printf_i+0x11a>
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d10b      	bne.n	800a108 <_printf_i+0x14c>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	07de      	lsls	r6, r3, #31
 800a0f4:	d508      	bpl.n	800a108 <_printf_i+0x14c>
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	bfde      	ittt	le
 800a0fe:	2330      	movle	r3, #48	; 0x30
 800a100:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a104:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a108:	1b52      	subs	r2, r2, r5
 800a10a:	6122      	str	r2, [r4, #16]
 800a10c:	f8cd a000 	str.w	sl, [sp]
 800a110:	464b      	mov	r3, r9
 800a112:	aa03      	add	r2, sp, #12
 800a114:	4621      	mov	r1, r4
 800a116:	4640      	mov	r0, r8
 800a118:	f7ff fee2 	bl	8009ee0 <_printf_common>
 800a11c:	3001      	adds	r0, #1
 800a11e:	d14c      	bne.n	800a1ba <_printf_i+0x1fe>
 800a120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a124:	b004      	add	sp, #16
 800a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12a:	4835      	ldr	r0, [pc, #212]	; (800a200 <_printf_i+0x244>)
 800a12c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a130:	6829      	ldr	r1, [r5, #0]
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	f851 6b04 	ldr.w	r6, [r1], #4
 800a138:	6029      	str	r1, [r5, #0]
 800a13a:	061d      	lsls	r5, r3, #24
 800a13c:	d514      	bpl.n	800a168 <_printf_i+0x1ac>
 800a13e:	07df      	lsls	r7, r3, #31
 800a140:	bf44      	itt	mi
 800a142:	f043 0320 	orrmi.w	r3, r3, #32
 800a146:	6023      	strmi	r3, [r4, #0]
 800a148:	b91e      	cbnz	r6, 800a152 <_printf_i+0x196>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	f023 0320 	bic.w	r3, r3, #32
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	2310      	movs	r3, #16
 800a154:	e7b0      	b.n	800a0b8 <_printf_i+0xfc>
 800a156:	6823      	ldr	r3, [r4, #0]
 800a158:	f043 0320 	orr.w	r3, r3, #32
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	2378      	movs	r3, #120	; 0x78
 800a160:	4828      	ldr	r0, [pc, #160]	; (800a204 <_printf_i+0x248>)
 800a162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a166:	e7e3      	b.n	800a130 <_printf_i+0x174>
 800a168:	0659      	lsls	r1, r3, #25
 800a16a:	bf48      	it	mi
 800a16c:	b2b6      	uxthmi	r6, r6
 800a16e:	e7e6      	b.n	800a13e <_printf_i+0x182>
 800a170:	4615      	mov	r5, r2
 800a172:	e7bb      	b.n	800a0ec <_printf_i+0x130>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	6826      	ldr	r6, [r4, #0]
 800a178:	6961      	ldr	r1, [r4, #20]
 800a17a:	1d18      	adds	r0, r3, #4
 800a17c:	6028      	str	r0, [r5, #0]
 800a17e:	0635      	lsls	r5, r6, #24
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	d501      	bpl.n	800a188 <_printf_i+0x1cc>
 800a184:	6019      	str	r1, [r3, #0]
 800a186:	e002      	b.n	800a18e <_printf_i+0x1d2>
 800a188:	0670      	lsls	r0, r6, #25
 800a18a:	d5fb      	bpl.n	800a184 <_printf_i+0x1c8>
 800a18c:	8019      	strh	r1, [r3, #0]
 800a18e:	2300      	movs	r3, #0
 800a190:	6123      	str	r3, [r4, #16]
 800a192:	4615      	mov	r5, r2
 800a194:	e7ba      	b.n	800a10c <_printf_i+0x150>
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	1d1a      	adds	r2, r3, #4
 800a19a:	602a      	str	r2, [r5, #0]
 800a19c:	681d      	ldr	r5, [r3, #0]
 800a19e:	6862      	ldr	r2, [r4, #4]
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f7f5 fff4 	bl	8000190 <memchr>
 800a1a8:	b108      	cbz	r0, 800a1ae <_printf_i+0x1f2>
 800a1aa:	1b40      	subs	r0, r0, r5
 800a1ac:	6060      	str	r0, [r4, #4]
 800a1ae:	6863      	ldr	r3, [r4, #4]
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1b8:	e7a8      	b.n	800a10c <_printf_i+0x150>
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	462a      	mov	r2, r5
 800a1be:	4649      	mov	r1, r9
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	47d0      	blx	sl
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d0ab      	beq.n	800a120 <_printf_i+0x164>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	079b      	lsls	r3, r3, #30
 800a1cc:	d413      	bmi.n	800a1f6 <_printf_i+0x23a>
 800a1ce:	68e0      	ldr	r0, [r4, #12]
 800a1d0:	9b03      	ldr	r3, [sp, #12]
 800a1d2:	4298      	cmp	r0, r3
 800a1d4:	bfb8      	it	lt
 800a1d6:	4618      	movlt	r0, r3
 800a1d8:	e7a4      	b.n	800a124 <_printf_i+0x168>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4632      	mov	r2, r6
 800a1de:	4649      	mov	r1, r9
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	47d0      	blx	sl
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d09b      	beq.n	800a120 <_printf_i+0x164>
 800a1e8:	3501      	adds	r5, #1
 800a1ea:	68e3      	ldr	r3, [r4, #12]
 800a1ec:	9903      	ldr	r1, [sp, #12]
 800a1ee:	1a5b      	subs	r3, r3, r1
 800a1f0:	42ab      	cmp	r3, r5
 800a1f2:	dcf2      	bgt.n	800a1da <_printf_i+0x21e>
 800a1f4:	e7eb      	b.n	800a1ce <_printf_i+0x212>
 800a1f6:	2500      	movs	r5, #0
 800a1f8:	f104 0619 	add.w	r6, r4, #25
 800a1fc:	e7f5      	b.n	800a1ea <_printf_i+0x22e>
 800a1fe:	bf00      	nop
 800a200:	0800ab99 	.word	0x0800ab99
 800a204:	0800abaa 	.word	0x0800abaa

0800a208 <_sbrk_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4d06      	ldr	r5, [pc, #24]	; (800a224 <_sbrk_r+0x1c>)
 800a20c:	2300      	movs	r3, #0
 800a20e:	4604      	mov	r4, r0
 800a210:	4608      	mov	r0, r1
 800a212:	602b      	str	r3, [r5, #0]
 800a214:	f7f8 f884 	bl	8002320 <_sbrk>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_sbrk_r+0x1a>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_sbrk_r+0x1a>
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	20000d34 	.word	0x20000d34

0800a228 <__sread>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	460c      	mov	r4, r1
 800a22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a230:	f000 fab2 	bl	800a798 <_read_r>
 800a234:	2800      	cmp	r0, #0
 800a236:	bfab      	itete	ge
 800a238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a23a:	89a3      	ldrhlt	r3, [r4, #12]
 800a23c:	181b      	addge	r3, r3, r0
 800a23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a242:	bfac      	ite	ge
 800a244:	6563      	strge	r3, [r4, #84]	; 0x54
 800a246:	81a3      	strhlt	r3, [r4, #12]
 800a248:	bd10      	pop	{r4, pc}

0800a24a <__swrite>:
 800a24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24e:	461f      	mov	r7, r3
 800a250:	898b      	ldrh	r3, [r1, #12]
 800a252:	05db      	lsls	r3, r3, #23
 800a254:	4605      	mov	r5, r0
 800a256:	460c      	mov	r4, r1
 800a258:	4616      	mov	r6, r2
 800a25a:	d505      	bpl.n	800a268 <__swrite+0x1e>
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	2302      	movs	r3, #2
 800a262:	2200      	movs	r2, #0
 800a264:	f000 f9c8 	bl	800a5f8 <_lseek_r>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	4632      	mov	r2, r6
 800a276:	463b      	mov	r3, r7
 800a278:	4628      	mov	r0, r5
 800a27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27e:	f000 b869 	b.w	800a354 <_write_r>

0800a282 <__sseek>:
 800a282:	b510      	push	{r4, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28a:	f000 f9b5 	bl	800a5f8 <_lseek_r>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	bf15      	itete	ne
 800a294:	6560      	strne	r0, [r4, #84]	; 0x54
 800a296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a29e:	81a3      	strheq	r3, [r4, #12]
 800a2a0:	bf18      	it	ne
 800a2a2:	81a3      	strhne	r3, [r4, #12]
 800a2a4:	bd10      	pop	{r4, pc}

0800a2a6 <__sclose>:
 800a2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2aa:	f000 b8d3 	b.w	800a454 <_close_r>
	...

0800a2b0 <__swbuf_r>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	460e      	mov	r6, r1
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b118      	cbz	r0, 800a2c2 <__swbuf_r+0x12>
 800a2ba:	6983      	ldr	r3, [r0, #24]
 800a2bc:	b90b      	cbnz	r3, 800a2c2 <__swbuf_r+0x12>
 800a2be:	f7ff fb81 	bl	80099c4 <__sinit>
 800a2c2:	4b21      	ldr	r3, [pc, #132]	; (800a348 <__swbuf_r+0x98>)
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	d12b      	bne.n	800a320 <__swbuf_r+0x70>
 800a2c8:	686c      	ldr	r4, [r5, #4]
 800a2ca:	69a3      	ldr	r3, [r4, #24]
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	071a      	lsls	r2, r3, #28
 800a2d2:	d52f      	bpl.n	800a334 <__swbuf_r+0x84>
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	b36b      	cbz	r3, 800a334 <__swbuf_r+0x84>
 800a2d8:	6923      	ldr	r3, [r4, #16]
 800a2da:	6820      	ldr	r0, [r4, #0]
 800a2dc:	1ac0      	subs	r0, r0, r3
 800a2de:	6963      	ldr	r3, [r4, #20]
 800a2e0:	b2f6      	uxtb	r6, r6
 800a2e2:	4283      	cmp	r3, r0
 800a2e4:	4637      	mov	r7, r6
 800a2e6:	dc04      	bgt.n	800a2f2 <__swbuf_r+0x42>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 f948 	bl	800a580 <_fflush_r>
 800a2f0:	bb30      	cbnz	r0, 800a340 <__swbuf_r+0x90>
 800a2f2:	68a3      	ldr	r3, [r4, #8]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	60a3      	str	r3, [r4, #8]
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	6022      	str	r2, [r4, #0]
 800a2fe:	701e      	strb	r6, [r3, #0]
 800a300:	6963      	ldr	r3, [r4, #20]
 800a302:	3001      	adds	r0, #1
 800a304:	4283      	cmp	r3, r0
 800a306:	d004      	beq.n	800a312 <__swbuf_r+0x62>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	07db      	lsls	r3, r3, #31
 800a30c:	d506      	bpl.n	800a31c <__swbuf_r+0x6c>
 800a30e:	2e0a      	cmp	r6, #10
 800a310:	d104      	bne.n	800a31c <__swbuf_r+0x6c>
 800a312:	4621      	mov	r1, r4
 800a314:	4628      	mov	r0, r5
 800a316:	f000 f933 	bl	800a580 <_fflush_r>
 800a31a:	b988      	cbnz	r0, 800a340 <__swbuf_r+0x90>
 800a31c:	4638      	mov	r0, r7
 800a31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <__swbuf_r+0x9c>)
 800a322:	429c      	cmp	r4, r3
 800a324:	d101      	bne.n	800a32a <__swbuf_r+0x7a>
 800a326:	68ac      	ldr	r4, [r5, #8]
 800a328:	e7cf      	b.n	800a2ca <__swbuf_r+0x1a>
 800a32a:	4b09      	ldr	r3, [pc, #36]	; (800a350 <__swbuf_r+0xa0>)
 800a32c:	429c      	cmp	r4, r3
 800a32e:	bf08      	it	eq
 800a330:	68ec      	ldreq	r4, [r5, #12]
 800a332:	e7ca      	b.n	800a2ca <__swbuf_r+0x1a>
 800a334:	4621      	mov	r1, r4
 800a336:	4628      	mov	r0, r5
 800a338:	f000 f81e 	bl	800a378 <__swsetup_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d0cb      	beq.n	800a2d8 <__swbuf_r+0x28>
 800a340:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a344:	e7ea      	b.n	800a31c <__swbuf_r+0x6c>
 800a346:	bf00      	nop
 800a348:	0800ab48 	.word	0x0800ab48
 800a34c:	0800ab68 	.word	0x0800ab68
 800a350:	0800ab28 	.word	0x0800ab28

0800a354 <_write_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d07      	ldr	r5, [pc, #28]	; (800a374 <_write_r+0x20>)
 800a358:	4604      	mov	r4, r0
 800a35a:	4608      	mov	r0, r1
 800a35c:	4611      	mov	r1, r2
 800a35e:	2200      	movs	r2, #0
 800a360:	602a      	str	r2, [r5, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	f7f7 ff8b 	bl	800227e <_write>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_write_r+0x1e>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_write_r+0x1e>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	20000d34 	.word	0x20000d34

0800a378 <__swsetup_r>:
 800a378:	4b32      	ldr	r3, [pc, #200]	; (800a444 <__swsetup_r+0xcc>)
 800a37a:	b570      	push	{r4, r5, r6, lr}
 800a37c:	681d      	ldr	r5, [r3, #0]
 800a37e:	4606      	mov	r6, r0
 800a380:	460c      	mov	r4, r1
 800a382:	b125      	cbz	r5, 800a38e <__swsetup_r+0x16>
 800a384:	69ab      	ldr	r3, [r5, #24]
 800a386:	b913      	cbnz	r3, 800a38e <__swsetup_r+0x16>
 800a388:	4628      	mov	r0, r5
 800a38a:	f7ff fb1b 	bl	80099c4 <__sinit>
 800a38e:	4b2e      	ldr	r3, [pc, #184]	; (800a448 <__swsetup_r+0xd0>)
 800a390:	429c      	cmp	r4, r3
 800a392:	d10f      	bne.n	800a3b4 <__swsetup_r+0x3c>
 800a394:	686c      	ldr	r4, [r5, #4]
 800a396:	89a3      	ldrh	r3, [r4, #12]
 800a398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a39c:	0719      	lsls	r1, r3, #28
 800a39e:	d42c      	bmi.n	800a3fa <__swsetup_r+0x82>
 800a3a0:	06dd      	lsls	r5, r3, #27
 800a3a2:	d411      	bmi.n	800a3c8 <__swsetup_r+0x50>
 800a3a4:	2309      	movs	r3, #9
 800a3a6:	6033      	str	r3, [r6, #0]
 800a3a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b2:	e03e      	b.n	800a432 <__swsetup_r+0xba>
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <__swsetup_r+0xd4>)
 800a3b6:	429c      	cmp	r4, r3
 800a3b8:	d101      	bne.n	800a3be <__swsetup_r+0x46>
 800a3ba:	68ac      	ldr	r4, [r5, #8]
 800a3bc:	e7eb      	b.n	800a396 <__swsetup_r+0x1e>
 800a3be:	4b24      	ldr	r3, [pc, #144]	; (800a450 <__swsetup_r+0xd8>)
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	bf08      	it	eq
 800a3c4:	68ec      	ldreq	r4, [r5, #12]
 800a3c6:	e7e6      	b.n	800a396 <__swsetup_r+0x1e>
 800a3c8:	0758      	lsls	r0, r3, #29
 800a3ca:	d512      	bpl.n	800a3f2 <__swsetup_r+0x7a>
 800a3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ce:	b141      	cbz	r1, 800a3e2 <__swsetup_r+0x6a>
 800a3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d002      	beq.n	800a3de <__swsetup_r+0x66>
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 f991 	bl	800a700 <_free_r>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6063      	str	r3, [r4, #4]
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	f043 0308 	orr.w	r3, r3, #8
 800a3f8:	81a3      	strh	r3, [r4, #12]
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	b94b      	cbnz	r3, 800a412 <__swsetup_r+0x9a>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a408:	d003      	beq.n	800a412 <__swsetup_r+0x9a>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4630      	mov	r0, r6
 800a40e:	f000 f92b 	bl	800a668 <__smakebuf_r>
 800a412:	89a0      	ldrh	r0, [r4, #12]
 800a414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a418:	f010 0301 	ands.w	r3, r0, #1
 800a41c:	d00a      	beq.n	800a434 <__swsetup_r+0xbc>
 800a41e:	2300      	movs	r3, #0
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	6963      	ldr	r3, [r4, #20]
 800a424:	425b      	negs	r3, r3
 800a426:	61a3      	str	r3, [r4, #24]
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	b943      	cbnz	r3, 800a43e <__swsetup_r+0xc6>
 800a42c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a430:	d1ba      	bne.n	800a3a8 <__swsetup_r+0x30>
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	0781      	lsls	r1, r0, #30
 800a436:	bf58      	it	pl
 800a438:	6963      	ldrpl	r3, [r4, #20]
 800a43a:	60a3      	str	r3, [r4, #8]
 800a43c:	e7f4      	b.n	800a428 <__swsetup_r+0xb0>
 800a43e:	2000      	movs	r0, #0
 800a440:	e7f7      	b.n	800a432 <__swsetup_r+0xba>
 800a442:	bf00      	nop
 800a444:	20000028 	.word	0x20000028
 800a448:	0800ab48 	.word	0x0800ab48
 800a44c:	0800ab68 	.word	0x0800ab68
 800a450:	0800ab28 	.word	0x0800ab28

0800a454 <_close_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d06      	ldr	r5, [pc, #24]	; (800a470 <_close_r+0x1c>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f7 ff29 	bl	80022b6 <_close>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_close_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_close_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20000d34 	.word	0x20000d34

0800a474 <__sflush_r>:
 800a474:	898a      	ldrh	r2, [r1, #12]
 800a476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47a:	4605      	mov	r5, r0
 800a47c:	0710      	lsls	r0, r2, #28
 800a47e:	460c      	mov	r4, r1
 800a480:	d458      	bmi.n	800a534 <__sflush_r+0xc0>
 800a482:	684b      	ldr	r3, [r1, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc05      	bgt.n	800a494 <__sflush_r+0x20>
 800a488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dc02      	bgt.n	800a494 <__sflush_r+0x20>
 800a48e:	2000      	movs	r0, #0
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a496:	2e00      	cmp	r6, #0
 800a498:	d0f9      	beq.n	800a48e <__sflush_r+0x1a>
 800a49a:	2300      	movs	r3, #0
 800a49c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4a0:	682f      	ldr	r7, [r5, #0]
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	d032      	beq.n	800a50c <__sflush_r+0x98>
 800a4a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	075a      	lsls	r2, r3, #29
 800a4ac:	d505      	bpl.n	800a4ba <__sflush_r+0x46>
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	1ac0      	subs	r0, r0, r3
 800a4b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4b4:	b10b      	cbz	r3, 800a4ba <__sflush_r+0x46>
 800a4b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4b8:	1ac0      	subs	r0, r0, r3
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4602      	mov	r2, r0
 800a4be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4c0:	6a21      	ldr	r1, [r4, #32]
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	47b0      	blx	r6
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	d106      	bne.n	800a4da <__sflush_r+0x66>
 800a4cc:	6829      	ldr	r1, [r5, #0]
 800a4ce:	291d      	cmp	r1, #29
 800a4d0:	d82c      	bhi.n	800a52c <__sflush_r+0xb8>
 800a4d2:	4a2a      	ldr	r2, [pc, #168]	; (800a57c <__sflush_r+0x108>)
 800a4d4:	40ca      	lsrs	r2, r1
 800a4d6:	07d6      	lsls	r6, r2, #31
 800a4d8:	d528      	bpl.n	800a52c <__sflush_r+0xb8>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6062      	str	r2, [r4, #4]
 800a4de:	04d9      	lsls	r1, r3, #19
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	6022      	str	r2, [r4, #0]
 800a4e4:	d504      	bpl.n	800a4f0 <__sflush_r+0x7c>
 800a4e6:	1c42      	adds	r2, r0, #1
 800a4e8:	d101      	bne.n	800a4ee <__sflush_r+0x7a>
 800a4ea:	682b      	ldr	r3, [r5, #0]
 800a4ec:	b903      	cbnz	r3, 800a4f0 <__sflush_r+0x7c>
 800a4ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a4f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4f2:	602f      	str	r7, [r5, #0]
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	d0ca      	beq.n	800a48e <__sflush_r+0x1a>
 800a4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4fc:	4299      	cmp	r1, r3
 800a4fe:	d002      	beq.n	800a506 <__sflush_r+0x92>
 800a500:	4628      	mov	r0, r5
 800a502:	f000 f8fd 	bl	800a700 <_free_r>
 800a506:	2000      	movs	r0, #0
 800a508:	6360      	str	r0, [r4, #52]	; 0x34
 800a50a:	e7c1      	b.n	800a490 <__sflush_r+0x1c>
 800a50c:	6a21      	ldr	r1, [r4, #32]
 800a50e:	2301      	movs	r3, #1
 800a510:	4628      	mov	r0, r5
 800a512:	47b0      	blx	r6
 800a514:	1c41      	adds	r1, r0, #1
 800a516:	d1c7      	bne.n	800a4a8 <__sflush_r+0x34>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0c4      	beq.n	800a4a8 <__sflush_r+0x34>
 800a51e:	2b1d      	cmp	r3, #29
 800a520:	d001      	beq.n	800a526 <__sflush_r+0xb2>
 800a522:	2b16      	cmp	r3, #22
 800a524:	d101      	bne.n	800a52a <__sflush_r+0xb6>
 800a526:	602f      	str	r7, [r5, #0]
 800a528:	e7b1      	b.n	800a48e <__sflush_r+0x1a>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a530:	81a3      	strh	r3, [r4, #12]
 800a532:	e7ad      	b.n	800a490 <__sflush_r+0x1c>
 800a534:	690f      	ldr	r7, [r1, #16]
 800a536:	2f00      	cmp	r7, #0
 800a538:	d0a9      	beq.n	800a48e <__sflush_r+0x1a>
 800a53a:	0793      	lsls	r3, r2, #30
 800a53c:	680e      	ldr	r6, [r1, #0]
 800a53e:	bf08      	it	eq
 800a540:	694b      	ldreq	r3, [r1, #20]
 800a542:	600f      	str	r7, [r1, #0]
 800a544:	bf18      	it	ne
 800a546:	2300      	movne	r3, #0
 800a548:	eba6 0807 	sub.w	r8, r6, r7
 800a54c:	608b      	str	r3, [r1, #8]
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	dd9c      	ble.n	800a48e <__sflush_r+0x1a>
 800a554:	6a21      	ldr	r1, [r4, #32]
 800a556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a558:	4643      	mov	r3, r8
 800a55a:	463a      	mov	r2, r7
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b0      	blx	r6
 800a560:	2800      	cmp	r0, #0
 800a562:	dc06      	bgt.n	800a572 <__sflush_r+0xfe>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a570:	e78e      	b.n	800a490 <__sflush_r+0x1c>
 800a572:	4407      	add	r7, r0
 800a574:	eba8 0800 	sub.w	r8, r8, r0
 800a578:	e7e9      	b.n	800a54e <__sflush_r+0xda>
 800a57a:	bf00      	nop
 800a57c:	20400001 	.word	0x20400001

0800a580 <_fflush_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	690b      	ldr	r3, [r1, #16]
 800a584:	4605      	mov	r5, r0
 800a586:	460c      	mov	r4, r1
 800a588:	b913      	cbnz	r3, 800a590 <_fflush_r+0x10>
 800a58a:	2500      	movs	r5, #0
 800a58c:	4628      	mov	r0, r5
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	b118      	cbz	r0, 800a59a <_fflush_r+0x1a>
 800a592:	6983      	ldr	r3, [r0, #24]
 800a594:	b90b      	cbnz	r3, 800a59a <_fflush_r+0x1a>
 800a596:	f7ff fa15 	bl	80099c4 <__sinit>
 800a59a:	4b14      	ldr	r3, [pc, #80]	; (800a5ec <_fflush_r+0x6c>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d11b      	bne.n	800a5d8 <_fflush_r+0x58>
 800a5a0:	686c      	ldr	r4, [r5, #4]
 800a5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d0ef      	beq.n	800a58a <_fflush_r+0xa>
 800a5aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5ac:	07d0      	lsls	r0, r2, #31
 800a5ae:	d404      	bmi.n	800a5ba <_fflush_r+0x3a>
 800a5b0:	0599      	lsls	r1, r3, #22
 800a5b2:	d402      	bmi.n	800a5ba <_fflush_r+0x3a>
 800a5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5b6:	f7ff faa3 	bl	8009b00 <__retarget_lock_acquire_recursive>
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	4621      	mov	r1, r4
 800a5be:	f7ff ff59 	bl	800a474 <__sflush_r>
 800a5c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5c4:	07da      	lsls	r2, r3, #31
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	d4e0      	bmi.n	800a58c <_fflush_r+0xc>
 800a5ca:	89a3      	ldrh	r3, [r4, #12]
 800a5cc:	059b      	lsls	r3, r3, #22
 800a5ce:	d4dd      	bmi.n	800a58c <_fflush_r+0xc>
 800a5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5d2:	f7ff fa96 	bl	8009b02 <__retarget_lock_release_recursive>
 800a5d6:	e7d9      	b.n	800a58c <_fflush_r+0xc>
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <_fflush_r+0x70>)
 800a5da:	429c      	cmp	r4, r3
 800a5dc:	d101      	bne.n	800a5e2 <_fflush_r+0x62>
 800a5de:	68ac      	ldr	r4, [r5, #8]
 800a5e0:	e7df      	b.n	800a5a2 <_fflush_r+0x22>
 800a5e2:	4b04      	ldr	r3, [pc, #16]	; (800a5f4 <_fflush_r+0x74>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	bf08      	it	eq
 800a5e8:	68ec      	ldreq	r4, [r5, #12]
 800a5ea:	e7da      	b.n	800a5a2 <_fflush_r+0x22>
 800a5ec:	0800ab48 	.word	0x0800ab48
 800a5f0:	0800ab68 	.word	0x0800ab68
 800a5f4:	0800ab28 	.word	0x0800ab28

0800a5f8 <_lseek_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d07      	ldr	r5, [pc, #28]	; (800a618 <_lseek_r+0x20>)
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	4608      	mov	r0, r1
 800a600:	4611      	mov	r1, r2
 800a602:	2200      	movs	r2, #0
 800a604:	602a      	str	r2, [r5, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	f7f7 fe7c 	bl	8002304 <_lseek>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_lseek_r+0x1e>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_lseek_r+0x1e>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	20000d34 	.word	0x20000d34

0800a61c <__swhatbuf_r>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a624:	2900      	cmp	r1, #0
 800a626:	b096      	sub	sp, #88	; 0x58
 800a628:	4614      	mov	r4, r2
 800a62a:	461d      	mov	r5, r3
 800a62c:	da08      	bge.n	800a640 <__swhatbuf_r+0x24>
 800a62e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	061a      	lsls	r2, r3, #24
 800a638:	d410      	bmi.n	800a65c <__swhatbuf_r+0x40>
 800a63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63e:	e00e      	b.n	800a65e <__swhatbuf_r+0x42>
 800a640:	466a      	mov	r2, sp
 800a642:	f000 f8bb 	bl	800a7bc <_fstat_r>
 800a646:	2800      	cmp	r0, #0
 800a648:	dbf1      	blt.n	800a62e <__swhatbuf_r+0x12>
 800a64a:	9a01      	ldr	r2, [sp, #4]
 800a64c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a654:	425a      	negs	r2, r3
 800a656:	415a      	adcs	r2, r3
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	e7ee      	b.n	800a63a <__swhatbuf_r+0x1e>
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	2000      	movs	r0, #0
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	b016      	add	sp, #88	; 0x58
 800a664:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a668 <__smakebuf_r>:
 800a668:	898b      	ldrh	r3, [r1, #12]
 800a66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a66c:	079d      	lsls	r5, r3, #30
 800a66e:	4606      	mov	r6, r0
 800a670:	460c      	mov	r4, r1
 800a672:	d507      	bpl.n	800a684 <__smakebuf_r+0x1c>
 800a674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	2301      	movs	r3, #1
 800a67e:	6163      	str	r3, [r4, #20]
 800a680:	b002      	add	sp, #8
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	ab01      	add	r3, sp, #4
 800a686:	466a      	mov	r2, sp
 800a688:	f7ff ffc8 	bl	800a61c <__swhatbuf_r>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	4605      	mov	r5, r0
 800a690:	4630      	mov	r0, r6
 800a692:	f7ff fa57 	bl	8009b44 <_malloc_r>
 800a696:	b948      	cbnz	r0, 800a6ac <__smakebuf_r+0x44>
 800a698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69c:	059a      	lsls	r2, r3, #22
 800a69e:	d4ef      	bmi.n	800a680 <__smakebuf_r+0x18>
 800a6a0:	f023 0303 	bic.w	r3, r3, #3
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	e7e3      	b.n	800a674 <__smakebuf_r+0xc>
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <__smakebuf_r+0x7c>)
 800a6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	6163      	str	r3, [r4, #20]
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	6120      	str	r0, [r4, #16]
 800a6c2:	b15b      	cbz	r3, 800a6dc <__smakebuf_r+0x74>
 800a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f889 	bl	800a7e0 <_isatty_r>
 800a6ce:	b128      	cbz	r0, 800a6dc <__smakebuf_r+0x74>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	89a0      	ldrh	r0, [r4, #12]
 800a6de:	4305      	orrs	r5, r0
 800a6e0:	81a5      	strh	r5, [r4, #12]
 800a6e2:	e7cd      	b.n	800a680 <__smakebuf_r+0x18>
 800a6e4:	0800995d 	.word	0x0800995d

0800a6e8 <__malloc_lock>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__malloc_lock+0x8>)
 800a6ea:	f7ff ba09 	b.w	8009b00 <__retarget_lock_acquire_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	20000d28 	.word	0x20000d28

0800a6f4 <__malloc_unlock>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__malloc_unlock+0x8>)
 800a6f6:	f7ff ba04 	b.w	8009b02 <__retarget_lock_release_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	20000d28 	.word	0x20000d28

0800a700 <_free_r>:
 800a700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a702:	2900      	cmp	r1, #0
 800a704:	d044      	beq.n	800a790 <_free_r+0x90>
 800a706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a70a:	9001      	str	r0, [sp, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f1a1 0404 	sub.w	r4, r1, #4
 800a712:	bfb8      	it	lt
 800a714:	18e4      	addlt	r4, r4, r3
 800a716:	f7ff ffe7 	bl	800a6e8 <__malloc_lock>
 800a71a:	4a1e      	ldr	r2, [pc, #120]	; (800a794 <_free_r+0x94>)
 800a71c:	9801      	ldr	r0, [sp, #4]
 800a71e:	6813      	ldr	r3, [r2, #0]
 800a720:	b933      	cbnz	r3, 800a730 <_free_r+0x30>
 800a722:	6063      	str	r3, [r4, #4]
 800a724:	6014      	str	r4, [r2, #0]
 800a726:	b003      	add	sp, #12
 800a728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a72c:	f7ff bfe2 	b.w	800a6f4 <__malloc_unlock>
 800a730:	42a3      	cmp	r3, r4
 800a732:	d908      	bls.n	800a746 <_free_r+0x46>
 800a734:	6825      	ldr	r5, [r4, #0]
 800a736:	1961      	adds	r1, r4, r5
 800a738:	428b      	cmp	r3, r1
 800a73a:	bf01      	itttt	eq
 800a73c:	6819      	ldreq	r1, [r3, #0]
 800a73e:	685b      	ldreq	r3, [r3, #4]
 800a740:	1949      	addeq	r1, r1, r5
 800a742:	6021      	streq	r1, [r4, #0]
 800a744:	e7ed      	b.n	800a722 <_free_r+0x22>
 800a746:	461a      	mov	r2, r3
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	b10b      	cbz	r3, 800a750 <_free_r+0x50>
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d9fa      	bls.n	800a746 <_free_r+0x46>
 800a750:	6811      	ldr	r1, [r2, #0]
 800a752:	1855      	adds	r5, r2, r1
 800a754:	42a5      	cmp	r5, r4
 800a756:	d10b      	bne.n	800a770 <_free_r+0x70>
 800a758:	6824      	ldr	r4, [r4, #0]
 800a75a:	4421      	add	r1, r4
 800a75c:	1854      	adds	r4, r2, r1
 800a75e:	42a3      	cmp	r3, r4
 800a760:	6011      	str	r1, [r2, #0]
 800a762:	d1e0      	bne.n	800a726 <_free_r+0x26>
 800a764:	681c      	ldr	r4, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	6053      	str	r3, [r2, #4]
 800a76a:	4421      	add	r1, r4
 800a76c:	6011      	str	r1, [r2, #0]
 800a76e:	e7da      	b.n	800a726 <_free_r+0x26>
 800a770:	d902      	bls.n	800a778 <_free_r+0x78>
 800a772:	230c      	movs	r3, #12
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	e7d6      	b.n	800a726 <_free_r+0x26>
 800a778:	6825      	ldr	r5, [r4, #0]
 800a77a:	1961      	adds	r1, r4, r5
 800a77c:	428b      	cmp	r3, r1
 800a77e:	bf04      	itt	eq
 800a780:	6819      	ldreq	r1, [r3, #0]
 800a782:	685b      	ldreq	r3, [r3, #4]
 800a784:	6063      	str	r3, [r4, #4]
 800a786:	bf04      	itt	eq
 800a788:	1949      	addeq	r1, r1, r5
 800a78a:	6021      	streq	r1, [r4, #0]
 800a78c:	6054      	str	r4, [r2, #4]
 800a78e:	e7ca      	b.n	800a726 <_free_r+0x26>
 800a790:	b003      	add	sp, #12
 800a792:	bd30      	pop	{r4, r5, pc}
 800a794:	20000d2c 	.word	0x20000d2c

0800a798 <_read_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_read_r+0x20>)
 800a79c:	4604      	mov	r4, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f7 fd4c 	bl	8002244 <_read>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_read_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_read_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000d34 	.word	0x20000d34

0800a7bc <_fstat_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d07      	ldr	r5, [pc, #28]	; (800a7dc <_fstat_r+0x20>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	602b      	str	r3, [r5, #0]
 800a7ca:	f7f7 fd80 	bl	80022ce <_fstat>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	d102      	bne.n	800a7d8 <_fstat_r+0x1c>
 800a7d2:	682b      	ldr	r3, [r5, #0]
 800a7d4:	b103      	cbz	r3, 800a7d8 <_fstat_r+0x1c>
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	bd38      	pop	{r3, r4, r5, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000d34 	.word	0x20000d34

0800a7e0 <_isatty_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4d06      	ldr	r5, [pc, #24]	; (800a7fc <_isatty_r+0x1c>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	f7f7 fd7f 	bl	80022ee <_isatty>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_isatty_r+0x1a>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_isatty_r+0x1a>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20000d34 	.word	0x20000d34

0800a800 <_init>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr

0800a80c <_fini>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr
