
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d45c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800d59c  0800d59c  0001d59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d9bc  0800d9bc  0001d9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800d9c4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800da48  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800e2cb  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800e300  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000934  2000095c  0800e311  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001290  0800e311  00021290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00035f95  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000068bc  00000000  00000000  0005691e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f28  00000000  00000000  0005d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002c40  00000000  00000000  00060108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e9ff  00000000  00000000  00062d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034ee3  00000000  00000000  00091747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ffe56  00000000  00000000  000c662a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001c6480  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cf94  00000000  00000000  001c64d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d584 	.word	0x0800d584

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800d584 	.word	0x0800d584

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_d2uiz>:
 80005a8:	004a      	lsls	r2, r1, #1
 80005aa:	d211      	bcs.n	80005d0 <__aeabi_d2uiz+0x28>
 80005ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005b0:	d211      	bcs.n	80005d6 <__aeabi_d2uiz+0x2e>
 80005b2:	d50d      	bpl.n	80005d0 <__aeabi_d2uiz+0x28>
 80005b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005bc:	d40e      	bmi.n	80005dc <__aeabi_d2uiz+0x34>
 80005be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005ca:	fa23 f002 	lsr.w	r0, r3, r2
 80005ce:	4770      	bx	lr
 80005d0:	f04f 0000 	mov.w	r0, #0
 80005d4:	4770      	bx	lr
 80005d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005da:	d102      	bne.n	80005e2 <__aeabi_d2uiz+0x3a>
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e0:	4770      	bx	lr
 80005e2:	f04f 0000 	mov.w	r0, #0
 80005e6:	4770      	bx	lr

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005fc:	f000 b974 	b.w	80008e8 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	468e      	mov	lr, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d14d      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000626:	428a      	cmp	r2, r1
 8000628:	4694      	mov	ip, r2
 800062a:	d969      	bls.n	8000700 <__udivmoddi4+0xe8>
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	b152      	cbz	r2, 8000648 <__udivmoddi4+0x30>
 8000632:	fa01 f302 	lsl.w	r3, r1, r2
 8000636:	f1c2 0120 	rsb	r1, r2, #32
 800063a:	fa20 f101 	lsr.w	r1, r0, r1
 800063e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000642:	ea41 0e03 	orr.w	lr, r1, r3
 8000646:	4094      	lsls	r4, r2
 8000648:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800064c:	0c21      	lsrs	r1, r4, #16
 800064e:	fbbe f6f8 	udiv	r6, lr, r8
 8000652:	fa1f f78c 	uxth.w	r7, ip
 8000656:	fb08 e316 	mls	r3, r8, r6, lr
 800065a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800065e:	fb06 f107 	mul.w	r1, r6, r7
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800066e:	f080 811f 	bcs.w	80008b0 <__udivmoddi4+0x298>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 811c 	bls.w	80008b0 <__udivmoddi4+0x298>
 8000678:	3e02      	subs	r6, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	b2a4      	uxth	r4, r4
 8000680:	fbb3 f0f8 	udiv	r0, r3, r8
 8000684:	fb08 3310 	mls	r3, r8, r0, r3
 8000688:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800068c:	fb00 f707 	mul.w	r7, r0, r7
 8000690:	42a7      	cmp	r7, r4
 8000692:	d90a      	bls.n	80006aa <__udivmoddi4+0x92>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800069c:	f080 810a 	bcs.w	80008b4 <__udivmoddi4+0x29c>
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	f240 8107 	bls.w	80008b4 <__udivmoddi4+0x29c>
 80006a6:	4464      	add	r4, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ae:	1be4      	subs	r4, r4, r7
 80006b0:	2600      	movs	r6, #0
 80006b2:	b11d      	cbz	r5, 80006bc <__udivmoddi4+0xa4>
 80006b4:	40d4      	lsrs	r4, r2
 80006b6:	2300      	movs	r3, #0
 80006b8:	e9c5 4300 	strd	r4, r3, [r5]
 80006bc:	4631      	mov	r1, r6
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d909      	bls.n	80006da <__udivmoddi4+0xc2>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	f000 80ef 	beq.w	80008aa <__udivmoddi4+0x292>
 80006cc:	2600      	movs	r6, #0
 80006ce:	e9c5 0100 	strd	r0, r1, [r5]
 80006d2:	4630      	mov	r0, r6
 80006d4:	4631      	mov	r1, r6
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006da:	fab3 f683 	clz	r6, r3
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d14a      	bne.n	8000778 <__udivmoddi4+0x160>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d302      	bcc.n	80006ec <__udivmoddi4+0xd4>
 80006e6:	4282      	cmp	r2, r0
 80006e8:	f200 80f9 	bhi.w	80008de <__udivmoddi4+0x2c6>
 80006ec:	1a84      	subs	r4, r0, r2
 80006ee:	eb61 0303 	sbc.w	r3, r1, r3
 80006f2:	2001      	movs	r0, #1
 80006f4:	469e      	mov	lr, r3
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d0e0      	beq.n	80006bc <__udivmoddi4+0xa4>
 80006fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006fe:	e7dd      	b.n	80006bc <__udivmoddi4+0xa4>
 8000700:	b902      	cbnz	r2, 8000704 <__udivmoddi4+0xec>
 8000702:	deff      	udf	#255	; 0xff
 8000704:	fab2 f282 	clz	r2, r2
 8000708:	2a00      	cmp	r2, #0
 800070a:	f040 8092 	bne.w	8000832 <__udivmoddi4+0x21a>
 800070e:	eba1 010c 	sub.w	r1, r1, ip
 8000712:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000716:	fa1f fe8c 	uxth.w	lr, ip
 800071a:	2601      	movs	r6, #1
 800071c:	0c20      	lsrs	r0, r4, #16
 800071e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000722:	fb07 1113 	mls	r1, r7, r3, r1
 8000726:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800072a:	fb0e f003 	mul.w	r0, lr, r3
 800072e:	4288      	cmp	r0, r1
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x12c>
 8000732:	eb1c 0101 	adds.w	r1, ip, r1
 8000736:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x12a>
 800073c:	4288      	cmp	r0, r1
 800073e:	f200 80cb 	bhi.w	80008d8 <__udivmoddi4+0x2c0>
 8000742:	4643      	mov	r3, r8
 8000744:	1a09      	subs	r1, r1, r0
 8000746:	b2a4      	uxth	r4, r4
 8000748:	fbb1 f0f7 	udiv	r0, r1, r7
 800074c:	fb07 1110 	mls	r1, r7, r0, r1
 8000750:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000754:	fb0e fe00 	mul.w	lr, lr, r0
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x156>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000764:	d202      	bcs.n	800076c <__udivmoddi4+0x154>
 8000766:	45a6      	cmp	lr, r4
 8000768:	f200 80bb 	bhi.w	80008e2 <__udivmoddi4+0x2ca>
 800076c:	4608      	mov	r0, r1
 800076e:	eba4 040e 	sub.w	r4, r4, lr
 8000772:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000776:	e79c      	b.n	80006b2 <__udivmoddi4+0x9a>
 8000778:	f1c6 0720 	rsb	r7, r6, #32
 800077c:	40b3      	lsls	r3, r6
 800077e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000782:	ea4c 0c03 	orr.w	ip, ip, r3
 8000786:	fa20 f407 	lsr.w	r4, r0, r7
 800078a:	fa01 f306 	lsl.w	r3, r1, r6
 800078e:	431c      	orrs	r4, r3
 8000790:	40f9      	lsrs	r1, r7
 8000792:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000796:	fa00 f306 	lsl.w	r3, r0, r6
 800079a:	fbb1 f8f9 	udiv	r8, r1, r9
 800079e:	0c20      	lsrs	r0, r4, #16
 80007a0:	fa1f fe8c 	uxth.w	lr, ip
 80007a4:	fb09 1118 	mls	r1, r9, r8, r1
 80007a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ac:	fb08 f00e 	mul.w	r0, r8, lr
 80007b0:	4288      	cmp	r0, r1
 80007b2:	fa02 f206 	lsl.w	r2, r2, r6
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b8>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007c0:	f080 8088 	bcs.w	80008d4 <__udivmoddi4+0x2bc>
 80007c4:	4288      	cmp	r0, r1
 80007c6:	f240 8085 	bls.w	80008d4 <__udivmoddi4+0x2bc>
 80007ca:	f1a8 0802 	sub.w	r8, r8, #2
 80007ce:	4461      	add	r1, ip
 80007d0:	1a09      	subs	r1, r1, r0
 80007d2:	b2a4      	uxth	r4, r4
 80007d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d8:	fb09 1110 	mls	r1, r9, r0, r1
 80007dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007e4:	458e      	cmp	lr, r1
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1e2>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007f0:	d26c      	bcs.n	80008cc <__udivmoddi4+0x2b4>
 80007f2:	458e      	cmp	lr, r1
 80007f4:	d96a      	bls.n	80008cc <__udivmoddi4+0x2b4>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4461      	add	r1, ip
 80007fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000802:	eba1 010e 	sub.w	r1, r1, lr
 8000806:	42a1      	cmp	r1, r4
 8000808:	46c8      	mov	r8, r9
 800080a:	46a6      	mov	lr, r4
 800080c:	d356      	bcc.n	80008bc <__udivmoddi4+0x2a4>
 800080e:	d053      	beq.n	80008b8 <__udivmoddi4+0x2a0>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x212>
 8000812:	ebb3 0208 	subs.w	r2, r3, r8
 8000816:	eb61 010e 	sbc.w	r1, r1, lr
 800081a:	fa01 f707 	lsl.w	r7, r1, r7
 800081e:	fa22 f306 	lsr.w	r3, r2, r6
 8000822:	40f1      	lsrs	r1, r6
 8000824:	431f      	orrs	r7, r3
 8000826:	e9c5 7100 	strd	r7, r1, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	f1c2 0320 	rsb	r3, r2, #32
 8000836:	40d8      	lsrs	r0, r3
 8000838:	fa0c fc02 	lsl.w	ip, ip, r2
 800083c:	fa21 f303 	lsr.w	r3, r1, r3
 8000840:	4091      	lsls	r1, r2
 8000842:	4301      	orrs	r1, r0
 8000844:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000848:	fa1f fe8c 	uxth.w	lr, ip
 800084c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000850:	fb07 3610 	mls	r6, r7, r0, r3
 8000854:	0c0b      	lsrs	r3, r1, #16
 8000856:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800085a:	fb00 f60e 	mul.w	r6, r0, lr
 800085e:	429e      	cmp	r6, r3
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x260>
 8000866:	eb1c 0303 	adds.w	r3, ip, r3
 800086a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800086e:	d22f      	bcs.n	80008d0 <__udivmoddi4+0x2b8>
 8000870:	429e      	cmp	r6, r3
 8000872:	d92d      	bls.n	80008d0 <__udivmoddi4+0x2b8>
 8000874:	3802      	subs	r0, #2
 8000876:	4463      	add	r3, ip
 8000878:	1b9b      	subs	r3, r3, r6
 800087a:	b289      	uxth	r1, r1
 800087c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000880:	fb07 3316 	mls	r3, r7, r6, r3
 8000884:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000888:	fb06 f30e 	mul.w	r3, r6, lr
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x28a>
 8000890:	eb1c 0101 	adds.w	r1, ip, r1
 8000894:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000898:	d216      	bcs.n	80008c8 <__udivmoddi4+0x2b0>
 800089a:	428b      	cmp	r3, r1
 800089c:	d914      	bls.n	80008c8 <__udivmoddi4+0x2b0>
 800089e:	3e02      	subs	r6, #2
 80008a0:	4461      	add	r1, ip
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a8:	e738      	b.n	800071c <__udivmoddi4+0x104>
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e705      	b.n	80006bc <__udivmoddi4+0xa4>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e3      	b.n	800067c <__udivmoddi4+0x64>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6f8      	b.n	80006aa <__udivmoddi4+0x92>
 80008b8:	454b      	cmp	r3, r9
 80008ba:	d2a9      	bcs.n	8000810 <__udivmoddi4+0x1f8>
 80008bc:	ebb9 0802 	subs.w	r8, r9, r2
 80008c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7a3      	b.n	8000810 <__udivmoddi4+0x1f8>
 80008c8:	4646      	mov	r6, r8
 80008ca:	e7ea      	b.n	80008a2 <__udivmoddi4+0x28a>
 80008cc:	4620      	mov	r0, r4
 80008ce:	e794      	b.n	80007fa <__udivmoddi4+0x1e2>
 80008d0:	4640      	mov	r0, r8
 80008d2:	e7d1      	b.n	8000878 <__udivmoddi4+0x260>
 80008d4:	46d0      	mov	r8, sl
 80008d6:	e77b      	b.n	80007d0 <__udivmoddi4+0x1b8>
 80008d8:	3b02      	subs	r3, #2
 80008da:	4461      	add	r1, ip
 80008dc:	e732      	b.n	8000744 <__udivmoddi4+0x12c>
 80008de:	4630      	mov	r0, r6
 80008e0:	e709      	b.n	80006f6 <__udivmoddi4+0xde>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	e742      	b.n	800076e <__udivmoddi4+0x156>

080008e8 <__aeabi_idiv0>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <BH1790GLC_init>:

/*****************************************************************************
INIT FUNCTION
******************************************************************************/
uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	80da      	strh	r2, [r3, #6]

	dev->samples_index = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000910:	f107 030e 	add.w	r3, r7, #14
 8000914:	461a      	mov	r2, r3
 8000916:	210f      	movs	r1, #15
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fa67 	bl	8000dec <read>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <BH1790GLC_init+0x40>
		return ERR_MID_VAL;
 8000928:	230a      	movs	r3, #10
 800092a:	e04a      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	if(regData != BH1790GLC_MID_VAL){
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	2be0      	cmp	r3, #224	; 0xe0
 8000930:	d001      	beq.n	8000936 <BH1790GLC_init+0x4a>
		return ERR_MID_VAL;
 8000932:	230a      	movs	r3, #10
 8000934:	e045      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000936:	f107 030e 	add.w	r3, r7, #14
 800093a:	461a      	mov	r2, r3
 800093c:	2110      	movs	r1, #16
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fa54 	bl	8000dec <read>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <BH1790GLC_init+0x66>
		return ERR_PID_VAL;
 800094e:	230b      	movs	r3, #11
 8000950:	e037      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b0d      	cmp	r3, #13
 8000956:	d001      	beq.n	800095c <BH1790GLC_init+0x70>
		return ERR_PID_VAL;
 8000958:	230b      	movs	r3, #11
 800095a:	e032      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800095c:	2382      	movs	r3, #130	; 0x82
 800095e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 8000960:	230c      	movs	r3, #12
 8000962:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 8000964:	2301      	movs	r3, #1
 8000966:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	461a      	mov	r2, r3
 800096e:	2141      	movs	r1, #65	; 0x41
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa19 	bl	8000da8 <write>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <BH1790GLC_init+0x98>
		return ERR_MEAS_CONTROL1;
 8000980:	2314      	movs	r3, #20
 8000982:	e01e      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	2142      	movs	r1, #66	; 0x42
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 fa0a 	bl	8000da8 <write>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <BH1790GLC_init+0xb6>
		return ERR_MEAS_CONTROL2;
 800099e:	2315      	movs	r3, #21
 80009a0:	e00f      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	3302      	adds	r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	2143      	movs	r1, #67	; 0x43
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f9fb 	bl	8000da8 <write>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <BH1790GLC_init+0xd4>
		return ERR_MEAS_START;
 80009bc:	2316      	movs	r3, #22
 80009be:	e000      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	return SUCCESS;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <get_val>:
******************************************************************************/
/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 80009d2:	f107 0208 	add.w	r2, r7, #8
 80009d6:	2304      	movs	r3, #4
 80009d8:	2154      	movs	r1, #84	; 0x54
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 fa28 	bl	8000e30 <many_reads>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 80009ea:	231e      	movs	r3, #30
 80009ec:	e014      	b.n	8000a18 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 80009ee:	7a7b      	ldrb	r3, [r7, #9]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <add_sample>:
	}

	return SUCCESS;
}

uint8_t add_sample( BH1790GLC *dev ){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]


	dev->ppg_samples[dev->samples_index] = dev->ppg_data[1];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	88d9      	ldrh	r1, [r3, #6]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3204      	adds	r2, #4
 8000a38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	dev->samples_index++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a42:	3301      	adds	r3, #1
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0

	if(dev->samples_index==500){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a56:	d105      	bne.n	8000a64 <add_sample+0x44>

		dev->samples_index = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
		return 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <add_sample+0x46>

	}

	return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <ppg_calculate>:

uint8_t ppg_calculate( BH1790GLC *dev ){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	f6ad 4d48 	subw	sp, sp, #3144	; 0xc48
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000a80:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8000a84:	6018      	str	r0, [r3, #0]

	  uint16_t smooth_array[500];
	  int deriv_array[499];

	  uint16_t raw_data_1;
	  float smooth_data_1 = 0;
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	f607 4244 	addw	r2, r7, #3140	; 0xc44
 8000a8e:	6013      	str	r3, [r2, #0]
	  float lpf_beta = 0.08;
 8000a90:	4bc1      	ldr	r3, [pc, #772]	; (8000d98 <ppg_calculate+0x324>)
 8000a92:	f607 4218 	addw	r2, r7, #3096	; 0xc18
 8000a96:	6013      	str	r3, [r2, #0]

	  for(int i = 0; i < 500; i++){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
 8000a9e:	e07b      	b.n	8000b98 <ppg_calculate+0x124>

		  raw_data_1 = dev->ppg_samples[i];
 8000aa0:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000aa4:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000aae:	3204      	adds	r2, #4
 8000ab0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ab4:	f8a7 3c12 	strh.w	r3, [r7, #3090]	; 0xc12
		  smooth_data_1 = smooth_data_1 - (lpf_beta*(smooth_data_1 - raw_data_1));
 8000ab8:	f8b7 3c12 	ldrh.w	r3, [r7, #3090]	; 0xc12
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac4:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000ac8:	ed93 7a00 	vldr	s14, [r3]
 8000acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8000ad4:	edd3 7a00 	vldr	s15, [r3]
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000ae0:	ed93 7a00 	vldr	s14, [r3]
 8000ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae8:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000aec:	edc3 7a00 	vstr	s15, [r3]
		  smooth_array[i] = smooth_data_1;
 8000af0:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000af4:	edd3 7a00 	vldr	s15, [r3]
 8000af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afc:	ee17 3a90 	vmov	r3, s15
 8000b00:	b299      	uxth	r1, r3
 8000b02:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b06:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b0a:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  if(i!=0){
 8000b12:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d039      	beq.n	8000b8e <ppg_calculate+0x11a>


			  int deriv = (int)smooth_array[i] - (int)smooth_array[i-1];
 8000b1a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b1e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b22:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b36:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b3e:	1acb      	subs	r3, r1, r3
 8000b40:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
			  if(deriv<255 || deriv>-255){
 8000b44:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8000b48:	2bfe      	cmp	r3, #254	; 0xfe
 8000b4a:	dd04      	ble.n	8000b56 <ppg_calculate+0xe2>
 8000b4c:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8000b50:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000b54:	db0a      	blt.n	8000b6c <ppg_calculate+0xf8>

				 deriv_array[i] = deriv;
 8000b56:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b5a:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b5e:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b62:	f8d7 1c0c 	ldr.w	r1, [r7, #3084]	; 0xc0c
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000b6a:	e010      	b.n	8000b8e <ppg_calculate+0x11a>

			  } else {

				 deriv_array[i] = deriv_array[i-1];
 8000b6c:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b76:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b7e:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b82:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b86:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int i = 0; i < 500; i++){
 8000b8e:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b92:	3301      	adds	r3, #1
 8000b94:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
 8000b98:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ba0:	f6ff af7e 	blt.w	8000aa0 <ppg_calculate+0x2c>

		  }

	  }

	  int pos = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
	  int neg = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38

	  int pos_check = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
	  int neg_check = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14

	  int peak_vals[20] = {};
 8000bbc:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000bc0:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	2350      	movs	r3, #80	; 0x50
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f00b fc70 	bl	800c4b0 <memset>
	  int peak_count = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30


	  for(int j = 0; j < 499; j++){
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8000bdc:	e066      	b.n	8000cac <ppg_calculate+0x238>



		  if(deriv_array[j]>0 && pos_check==0){
 8000bde:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000be2:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000be6:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd13      	ble.n	8000c1a <ppg_calculate+0x1a6>
 8000bf2:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <ppg_calculate+0x1a6>

			  neg = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
			  pos++;
 8000c00:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	; 0xc3c
 8000c04:	3301      	adds	r3, #1
 8000c06:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c

			  if(pos==3){
 8000c0a:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	; 0xc3c
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d147      	bne.n	8000ca2 <ppg_calculate+0x22e>

				  pos_check = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
			  if(pos==3){
 8000c18:	e043      	b.n	8000ca2 <ppg_calculate+0x22e>

			  }

		  } else if (deriv_array[j]<0 && pos_check==1) {
 8000c1a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c1e:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000c22:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da28      	bge.n	8000c80 <ppg_calculate+0x20c>
 8000c2e:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d124      	bne.n	8000c80 <ppg_calculate+0x20c>

			  pos = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
			  neg++;
 8000c3c:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	; 0xc38
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38

			  if(neg==3){
 8000c46:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	; 0xc38
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d129      	bne.n	8000ca2 <ppg_calculate+0x22e>

				  neg_check = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
				  peak_vals[peak_count] = j;
 8000c54:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c58:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000c5c:	f8d7 2c30 	ldr.w	r2, [r7, #3120]	; 0xc30
 8000c60:	f8d7 1c2c 	ldr.w	r1, [r7, #3116]	; 0xc2c
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  peak_count++;
 8000c68:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30

				  pos_check = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
				  neg_check = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
			  if(neg==3){
 8000c7e:	e010      	b.n	8000ca2 <ppg_calculate+0x22e>

			  }


		  } else if (deriv_array[j]<0 && pos_check==0){
 8000c80:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c84:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000c88:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da06      	bge.n	8000ca2 <ppg_calculate+0x22e>
 8000c94:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <ppg_calculate+0x22e>
			  pos = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
	  for(int j = 0; j < 499; j++){
 8000ca2:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8000cac:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8000cb0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8000cb4:	dd93      	ble.n	8000bde <ppg_calculate+0x16a>
		  }

	  }

	  printf("{");
 8000cb6:	207b      	movs	r0, #123	; 0x7b
 8000cb8:	f00b fc1a 	bl	800c4f0 <putchar>

	  for(int k = 0; k<20; k++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8000cc2:	e010      	b.n	8000ce6 <ppg_calculate+0x272>

		  printf("[%d],", peak_vals[k]);
 8000cc4:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000cc8:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000ccc:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4831      	ldr	r0, [pc, #196]	; (8000d9c <ppg_calculate+0x328>)
 8000cd8:	f00b fbf2 	bl	800c4c0 <iprintf>
	  for(int k = 0; k<20; k++){
 8000cdc:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8000ce6:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8000cea:	2b13      	cmp	r3, #19
 8000cec:	ddea      	ble.n	8000cc4 <ppg_calculate+0x250>

	  }
	  printf("}\n");
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <ppg_calculate+0x32c>)
 8000cf0:	f00b fc82 	bl	800c5f8 <puts>

	  double sum = 0;
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]

	  for(int k =1; k<peak_count; k++){
 8000d04:	2301      	movs	r3, #1
 8000d06:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8000d0a:	e027      	b.n	8000d5c <ppg_calculate+0x2e8>

		  sum += peak_vals[k] - peak_vals[k-1];
 8000d0c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000d10:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000d14:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8000d18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d1c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8000d20:	1e59      	subs	r1, r3, #1
 8000d22:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000d26:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbcf 	bl	80004d4 <__aeabi_i2d>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d42:	f7ff fa7b 	bl	800023c <__adddf3>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d4e:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int k =1; k<peak_count; k++){
 8000d52:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8000d56:	3301      	adds	r3, #1
 8000d58:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8000d5c:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8000d60:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbd1      	blt.n	8000d0c <ppg_calculate+0x298>

	  }

	  printf("{{{%d}}}\n",(uint8_t)sum/(peak_count-1));
 8000d68:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	f7ff fc1a 	bl	80005a8 <__aeabi_d2uiz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <ppg_calculate+0x330>)
 8000d88:	f00b fb9a 	bl	800c4c0 <iprintf>

}
 8000d8c:	bf00      	nop
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f607 4748 	addw	r7, r7, #3144	; 0xc48
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	3da3d70a 	.word	0x3da3d70a
 8000d9c:	0800d59c 	.word	0x0800d59c
 8000da0:	0800d5a4 	.word	0x0800d5a4
 8000da4:	0800d5a8 	.word	0x0800d5a8

08000da8 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	460b      	mov	r3, r1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	21b6      	movs	r1, #182	; 0xb6
 8000dd0:	f003 fa00 	bl	80041d4 <HAL_I2C_Mem_Write>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <write+0x3a>
		return ret;			//error check
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	e000      	b.n	8000de4 <write+0x3c>
	}

	return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	460b      	mov	r3, r1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	21b6      	movs	r1, #182	; 0xb6
 8000e14:	f003 faf2 	bl	80043fc <HAL_I2C_Mem_Read>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <read+0x3a>
		return ret;			//error check
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	e000      	b.n	8000e28 <read+0x3c>
	}


	return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	72fb      	strb	r3, [r7, #11]
 8000e40:	4613      	mov	r3, r2
 8000e42:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	7abb      	ldrb	r3, [r7, #10]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e54:	9102      	str	r1, [sp, #8]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	21b6      	movs	r1, #182	; 0xb6
 8000e60:	f003 facc 	bl	80043fc <HAL_I2C_Mem_Read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <many_reads+0x42>
		return ret;			//error check
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	e000      	b.n	8000e74 <many_reads+0x44>
	}

	return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ICM_PowerOn>:
INIT FUNCTIONS
******************************************************************************/
/*
 * Sequence to setup ICM290948 as early as possible after power on
 */
uint8_t ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	dev->spiHandle = spiHandle;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	829a      	strh	r2, [r3, #20]

	/* Take initial reads to make sure SPI is working */
	uint8_t ret;
	ret = ICM_WHOAMI(dev);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f926 	bl	8001114 <ICM_WHOAMI>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]
	if (ret != WHO_AM_I){
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2bea      	cmp	r3, #234	; 0xea
 8000ed0:	d001      	beq.n	8000ed6 <ICM_PowerOn+0x5a>
		return ERR_WHO_AM_I;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	e028      	b.n	8000f28 <ICM_PowerOn+0xac>
	}

	/* SPI is working -> start setting up the sensor */
	ICM_CSHigh();
 8000ed6:	f000 f94d 	bl	8001174 <ICM_CSHigh>
	HAL_Delay(10);
 8000eda:	200a      	movs	r0, #10
 8000edc:	f000 fd5f 	bl	800199e <HAL_Delay>
	ICM_SelectBank(dev, USER_BANK_0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f928 	bl	8001138 <ICM_SelectBank>
	HAL_Delay(10);
 8000ee8:	200a      	movs	r0, #10
 8000eea:	f000 fd58 	bl	800199e <HAL_Delay>
	ICM_Disable_I2C(dev);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f932 	bl	8001158 <ICM_Disable_I2C>
	HAL_Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fd52 	bl	800199e <HAL_Delay>
	ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 8000efa:	2101      	movs	r1, #1
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f945 	bl	800118c <ICM_SetClock>
	HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f000 fd4b 	bl	800199e <HAL_Delay>
	ICM_AccelGyroOff(dev);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f94f 	bl	80011ac <ICM_AccelGyroOff>
	HAL_Delay(20);
 8000f0e:	2014      	movs	r0, #20
 8000f10:	f000 fd45 	bl	800199e <HAL_Delay>
	ICM_AccelGyroOn(dev);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f956 	bl	80011c6 <ICM_AccelGyroOn>
	HAL_Delay(10);
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f000 fd3f 	bl	800199e <HAL_Delay>
	ICM_Initialize(dev);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f805 	bl	8000f30 <ICM_Initialize>

	return SUCCESS;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <ICM_Initialize>:

uint8_t ICM_Initialize(ICM20948 *dev) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(dev, USER_BANK_2);
 8000f38:	2120      	movs	r1, #32
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f8fc 	bl	8001138 <ICM_SelectBank>
	HAL_Delay(20);
 8000f40:	2014      	movs	r0, #20
 8000f42:	f000 fd2c 	bl	800199e <HAL_Delay>
	ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 8000f46:	2229      	movs	r2, #41	; 0x29
 8000f48:	2100      	movs	r1, #0
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f948 	bl	80011e0 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f000 fd24 	bl	800199e <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(dev, 0x00, 0x0A);
 8000f56:	220a      	movs	r2, #10
 8000f58:	2100      	movs	r1, #0
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f9b4 	bl	80012c8 <ICM_WriteOneByte>
	HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f000 fd1c 	bl	800199e <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(dev, 0x14, (0x0C | 0x11));
 8000f66:	221d      	movs	r2, #29
 8000f68:	2114      	movs	r1, #20
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f9ac 	bl	80012c8 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(dev, 0x10, 0x00);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 f9a7 	bl	80012c8 <ICM_WriteOneByte>
	HAL_Delay(10);
 8000f7a:	200a      	movs	r0, #10
 8000f7c:	f000 fd0f 	bl	800199e <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(dev, 0x11, 0x0A);
 8000f80:	220a      	movs	r2, #10
 8000f82:	2111      	movs	r1, #17
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f99f 	bl	80012c8 <ICM_WriteOneByte>
	HAL_Delay(10);
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f000 fd07 	bl	800199e <HAL_Delay>

	ICM_SelectBank(dev, USER_BANK_2);
 8000f90:	2120      	movs	r1, #32
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f8d0 	bl	8001138 <ICM_SelectBank>
	HAL_Delay(20);
 8000f98:	2014      	movs	r0, #20
 8000f9a:	f000 fd00 	bl	800199e <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(dev, 0x7F, 0x00); // Select user bank 0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	217f      	movs	r1, #127	; 0x7f
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f990 	bl	80012c8 <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8000fa8:	2230      	movs	r2, #48	; 0x30
 8000faa:	210f      	movs	r1, #15
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f98b 	bl	80012c8 <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x03, 0x20); // I2C_MST_EN
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f986 	bl	80012c8 <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x7F, 0x30); // Select user bank 3
 8000fbc:	2230      	movs	r2, #48	; 0x30
 8000fbe:	217f      	movs	r1, #127	; 0x7f
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f981 	bl	80012c8 <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8000fc6:	224d      	movs	r2, #77	; 0x4d
 8000fc8:	2101      	movs	r1, #1
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f97c 	bl	80012c8 <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f977 	bl	80012c8 <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8000fda:	2281      	movs	r2, #129	; 0x81
 8000fdc:	2105      	movs	r1, #5
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f972 	bl	80012c8 <ICM_WriteOneByte>

	// Initialize magnetometer
	ICM_Mag_Write(dev, 0x32, 0x01); // Reset AK8963
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2132      	movs	r1, #50	; 0x32
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f99d 	bl	8001328 <ICM_Mag_Write>
	HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f000 fcd4 	bl	800199e <HAL_Delay>
	ICM_Mag_Write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	2131      	movs	r1, #49	; 0x31
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f994 	bl	8001328 <ICM_Mag_Write>

	return SUCCESS;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <ICM_ReadAccelGyroData>:
DATA ACQUISITION FUNCTIONS
******************************************************************************/
/*
 * Read Accelerometer and Gyro data
 */
void ICM_ReadAccelGyroData(ICM20948 *dev) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(dev, 0x2D, raw_data, 12);
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	230c      	movs	r3, #12
 800101a:	212d      	movs	r1, #45	; 0x2d
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f8f5 	bl	800120c <ICM_readBytes>

	dev->accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8001046:	7c3b      	ldrb	r3, [r7, #16]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7c7b      	ldrb	r3, [r7, #17]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8001058:	7cbb      	ldrb	r3, [r7, #18]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	7d7b      	ldrb	r3, [r7, #21]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8001080:	7dbb      	ldrb	r3, [r7, #22]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	81da      	strh	r2, [r3, #14]

	dev->accel_data[0] = dev->accel_data[0] / 8;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	da00      	bge.n	80010a0 <ICM_ReadAccelGyroData+0x94>
 800109e:	3307      	adds	r3, #7
 80010a0:	10db      	asrs	r3, r3, #3
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = dev->accel_data[1] / 8;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da00      	bge.n	80010b4 <ICM_ReadAccelGyroData+0xa8>
 80010b2:	3307      	adds	r3, #7
 80010b4:	10db      	asrs	r3, r3, #3
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = dev->accel_data[2] / 8;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da00      	bge.n	80010c8 <ICM_ReadAccelGyroData+0xbc>
 80010c6:	3307      	adds	r3, #7
 80010c8:	10db      	asrs	r3, r3, #3
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	895b      	ldrh	r3, [r3, #10]
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <ICM_ReadAccelGyroData+0x104>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	b29a      	uxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	899b      	ldrh	r3, [r3, #12]
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <ICM_ReadAccelGyroData+0x104>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	89db      	ldrh	r3, [r3, #14]
 80010f8:	4a05      	ldr	r2, [pc, #20]	; (8001110 <ICM_ReadAccelGyroData+0x104>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	81da      	strh	r2, [r3, #14]
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	10624dd3 	.word	0x10624dd3

08001114 <ICM_WHOAMI>:


/*****************************************************************************
CONFIG HELPERS
******************************************************************************/
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 8001120:	f107 030f 	add.w	r3, r7, #15
 8001124:	461a      	mov	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f89d 	bl	8001268 <ICM_ReadOneByte>
	return spiData;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <ICM_SelectBank>:

void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	461a      	mov	r2, r3
 8001148:	217f      	movs	r1, #127	; 0x7f
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f8bc 	bl	80012c8 <ICM_WriteOneByte>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <ICM_Disable_I2C>:

void ICM_Disable_I2C(ICM20948 *dev) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 8001160:	2278      	movs	r2, #120	; 0x78
 8001162:	2103      	movs	r1, #3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f8af 	bl	80012c8 <ICM_WriteOneByte>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <ICM_CSHigh>:

void ICM_CSHigh(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2110      	movs	r1, #16
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <ICM_CSHigh+0x14>)
 800117e:	f002 ff5d 	bl	800403c <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400

0800118c <ICM_SetClock>:

void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}

void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	461a      	mov	r2, r3
 800119c:	2106      	movs	r1, #6
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f892 	bl	80012c8 <ICM_WriteOneByte>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(ICM20948 *dev) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 80011b4:	223f      	movs	r2, #63	; 0x3f
 80011b6:	2107      	movs	r1, #7
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f885 	bl	80012c8 <ICM_WriteOneByte>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(ICM20948 *dev) {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 80011ce:	2200      	movs	r2, #0
 80011d0:	2107      	movs	r1, #7
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f878 	bl	80012c8 <ICM_WriteOneByte>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <ICM_SetGyroRateLPF>:

void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	4613      	mov	r3, r2
 80011ee:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 80011f0:	78fa      	ldrb	r2, [r7, #3]
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	2101      	movs	r1, #1
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f863 	bl	80012c8 <ICM_WriteOneByte>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <ICM_readBytes>:

/*****************************************************************************
LOW-LEVEL FUNCTIONS
******************************************************************************/
void ICM_readBytes(ICM20948 *dev, uint8_t reg, uint8_t *pData, uint16_t Size)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	460b      	mov	r3, r1
 800121a:	72fb      	strb	r3, [r7, #11]
 800121c:	4613      	mov	r3, r2
 800121e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001226:	b2db      	uxtb	r3, r3
 8001228:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <ICM_readBytes+0x58>)
 8001230:	f002 ff04 	bl	800403c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f107 010b 	add.w	r1, r7, #11
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	2201      	movs	r2, #1
 8001240:	f006 f99f 	bl	8007582 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spiHandle, pData, Size, 100);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	893a      	ldrh	r2, [r7, #8]
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	f006 fb06 	bl	800785e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	2110      	movs	r1, #16
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <ICM_readBytes+0x58>)
 8001258:	f002 fef0 	bl	800403c <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	48000400 	.word	0x48000400

08001268 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	460b      	mov	r3, r1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	reg = reg | 0x80;													//first bit 1 indicates read
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800127c:	b2db      	uxtb	r3, r3
 800127e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//enable SPI
 8001280:	2200      	movs	r2, #0
 8001282:	2110      	movs	r1, #16
 8001284:	480f      	ldr	r0, [pc, #60]	; (80012c4 <ICM_ReadOneByte+0x5c>)
 8001286:	f002 fed9 	bl	800403c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			//turn off green LED

	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	f107 010b 	add.w	r1, r7, #11
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	2201      	movs	r2, #1
 8001296:	f006 f974 	bl	8007582 <HAL_SPI_Transmit>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(dev->spiHandle, pData, 1, 100);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	2201      	movs	r2, #1
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f006 fad9 	bl	800785e <HAL_SPI_Receive>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//disable SPI
 80012b0:	2201      	movs	r2, #1
 80012b2:	2110      	movs	r1, #16
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <ICM_ReadOneByte+0x5c>)
 80012b6:	f002 fec1 	bl	800403c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);			//turn on green LED
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	48000400 	.word	0x48000400

080012c8 <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
 80012d4:	4613      	mov	r3, r2
 80012d6:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;

	reg = reg & 0x7F;													//first bit 0 indicates write
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//set CS pin low
 80012e2:	2200      	movs	r2, #0
 80012e4:	2110      	movs	r1, #16
 80012e6:	480f      	ldr	r0, [pc, #60]	; (8001324 <ICM_WriteOneByte+0x5c>)
 80012e8:	f002 fea8 	bl	800403c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	1cf9      	adds	r1, r7, #3
 80012f2:	2364      	movs	r3, #100	; 0x64
 80012f4:	2201      	movs	r2, #1
 80012f6:	f006 f944 	bl	8007582 <HAL_SPI_Transmit>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->spiHandle, &Data, 1, 100);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	1cb9      	adds	r1, r7, #2
 8001304:	2364      	movs	r3, #100	; 0x64
 8001306:	2201      	movs	r2, #1
 8001308:	f006 f93b 	bl	8007582 <HAL_SPI_Transmit>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//set CS pin high
 8001310:	2201      	movs	r2, #1
 8001312:	2110      	movs	r1, #16
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <ICM_WriteOneByte+0x5c>)
 8001316:	f002 fe91 	bl	800403c <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	48000400 	.word	0x48000400

08001328 <ICM_Mag_Write>:
/*
 * AUX abstraction for magnetometer
 * these are actually a level higher than the SPI read and writes above
 */
void ICM_Mag_Write(ICM20948 *dev, uint8_t reg,uint8_t value)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, 0x7F, 0x30);
 8001338:	2230      	movs	r2, #48	; 0x30
 800133a:	217f      	movs	r1, #127	; 0x7f
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffc3 	bl	80012c8 <ICM_WriteOneByte>

	HAL_Delay(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fb2b 	bl	800199e <HAL_Delay>
	ICM_WriteOneByte(dev, 0x03 ,0x0C);//mode: write
 8001348:	220c      	movs	r2, #12
 800134a:	2103      	movs	r1, #3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffbb 	bl	80012c8 <ICM_WriteOneByte>

	HAL_Delay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 fb23 	bl	800199e <HAL_Delay>
	ICM_WriteOneByte(dev, 0x04 ,reg);//set reg addr
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	461a      	mov	r2, r3
 800135c:	2104      	movs	r1, #4
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffb2 	bl	80012c8 <ICM_WriteOneByte>

	HAL_Delay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f000 fb1a 	bl	800199e <HAL_Delay>
	ICM_WriteOneByte(dev, 0x06 ,value);//send value
 800136a:	78bb      	ldrb	r3, [r7, #2]
 800136c:	461a      	mov	r2, r3
 800136e:	2106      	movs	r1, #6
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ffa9 	bl	80012c8 <ICM_WriteOneByte>

	HAL_Delay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fb11 	bl	800199e <HAL_Delay>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <APPD_EnableCPU2+0x34>)
 800138c:	1d3c      	adds	r4, r7, #4
 800138e:	461d      	mov	r5, r3
 8001390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001398:	c403      	stmia	r4!, {r0, r1}
 800139a:	8022      	strh	r2, [r4, #0]
 800139c:	3402      	adds	r4, #2
 800139e:	0c13      	lsrs	r3, r2, #16
 80013a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80013a2:	f009 fe47 	bl	800b034 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 f8e2 	bl	800a572 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80013ae:	bf00      	nop
}
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bdb0      	pop	{r4, r5, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	0800d5b4 	.word	0x0800d5b4

080013bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4905      	ldr	r1, [pc, #20]	; (80013e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	58000400 	.word	0x58000400

080013e8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <LL_EXTI_EnableIT_32_63+0x24>)
 80013f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80013f6:	4905      	ldr	r1, [pc, #20]	; (800140c <LL_EXTI_EnableIT_32_63+0x24>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	58000800 	.word	0x58000800

08001410 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800141e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800142a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001436:	4313      	orrs	r3, r2
 8001438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	cafecafe 	.word	0xcafecafe

0800144c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800145e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800149a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014cc:	d101      	bne.n	80014d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80014e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014f2:	d101      	bne.n	80014f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001528:	68fb      	ldr	r3, [r7, #12]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LL_DBGMCU_GetDeviceID+0x18>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e0042000 	.word	0xe0042000

08001554 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <LL_DBGMCU_GetRevisionID+0x18>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0c1b      	lsrs	r3, r3, #16
 800155e:	b29b      	uxth	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e0042000 	.word	0xe0042000

08001570 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	615a      	str	r2, [r3, #20]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	615a      	str	r2, [r3, #20]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	619a      	str	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_LPM_EnableSleep+0x1c>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <LL_LPM_EnableSleep+0x1c>)
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	6113      	str	r3, [r2, #16]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	22ca      	movs	r2, #202	; 0xca
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2253      	movs	r2, #83	; 0x53
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 0207 	bic.w	r2, r3, #7
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <MX_APPE_Config+0x18>)
 80016ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016be:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80016c0:	f000 f824 	bl	800170c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80016c4:	f000 f864 	bl	8001790 <Config_HSE>

  return;
 80016c8:	bf00      	nop
}
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58004000 	.word	0x58004000

080016d0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80016d4:	f000 f870 	bl	80017b8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80016d8:	f000 f888 	bl	80017ec <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80016dc:	4903      	ldr	r1, [pc, #12]	; (80016ec <MX_APPE_Init+0x1c>)
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 fdd4 	bl	800228c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80016e4:	f000 f890 	bl	8001808 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80016e8:	bf00      	nop
}
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000ae0 	.word	0x20000ae0

080016f0 <Init_Smps>:

void Init_Smps(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80016f4:	bf00      	nop
}
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <Init_Exti>:

void Init_Exti(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001702:	2050      	movs	r0, #80	; 0x50
 8001704:	f7ff fe70 	bl	80013e8 <LL_EXTI_EnableIT_32_63>

  return;
 8001708:	bf00      	nop
}
 800170a:	bd80      	pop	{r7, pc}

0800170c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001710:	f000 f804 	bl	800171c <Reset_BackupDomain>

  Reset_IPCC();
 8001714:	f000 f81a 	bl	800174c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001718:	bf00      	nop
}
 800171a:	bd80      	pop	{r7, pc}

0800171c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001720:	f7ff feca 	bl	80014b8 <LL_RCC_IsActiveFlag_PINRST>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <Reset_BackupDomain+0x2a>
 800172a:	f7ff fed8 	bl	80014de <LL_RCC_IsActiveFlag_SFTRST>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d108      	bne.n	8001746 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001734:	f003 fefa 	bl	800552c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001738:	f003 fef8 	bl	800552c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800173c:	f7ff fe9a 	bl	8001474 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001740:	f7ff fea9 	bl	8001496 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001744:	bf00      	nop
 8001746:	bf00      	nop
}
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001750:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001754:	f7ff fed6 	bl	8001504 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001758:	213f      	movs	r1, #63	; 0x3f
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <Reset_IPCC+0x40>)
 800175c:	f7ff ff4e 	bl	80015fc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001760:	213f      	movs	r1, #63	; 0x3f
 8001762:	480a      	ldr	r0, [pc, #40]	; (800178c <Reset_IPCC+0x40>)
 8001764:	f7ff ff58 	bl	8001618 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001768:	213f      	movs	r1, #63	; 0x3f
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <Reset_IPCC+0x40>)
 800176c:	f7ff ff00 	bl	8001570 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001770:	213f      	movs	r1, #63	; 0x3f
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <Reset_IPCC+0x40>)
 8001774:	f7ff ff1f 	bl	80015b6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001778:	213f      	movs	r1, #63	; 0x3f
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <Reset_IPCC+0x40>)
 800177c:	f7ff ff0a 	bl	8001594 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001780:	213f      	movs	r1, #63	; 0x3f
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <Reset_IPCC+0x40>)
 8001784:	f7ff ff29 	bl	80015da <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001788:	bf00      	nop
}
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58000c00 	.word	0x58000c00

08001790 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001796:	2000      	movs	r0, #0
 8001798:	f009 fcd8 	bl	800b14c <OTP_Read>
 800179c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	799b      	ldrb	r3, [r3, #6]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe31 	bl	8001410 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
}
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <System_Init>:

static void System_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  Init_Smps();
 80017bc:	f7ff ff98 	bl	80016f0 <Init_Smps>

  Init_Exti();
 80017c0:	f7ff ff9d 	bl	80016fe <Init_Exti>

  Init_Rtc();
 80017c4:	f000 f802 	bl	80017cc <Init_Rtc>

  return;
 80017c8:	bf00      	nop
}
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Init_Rtc>:

static void Init_Rtc(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <Init_Rtc+0x1c>)
 80017d2:	f7ff ff4c 	bl	800166e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80017d6:	2100      	movs	r1, #0
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <Init_Rtc+0x1c>)
 80017da:	f7ff ff58 	bl	800168e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80017de:	4802      	ldr	r0, [pc, #8]	; (80017e8 <Init_Rtc+0x1c>)
 80017e0:	f7ff ff38 	bl	8001654 <LL_RTC_EnableWriteProtection>

  return;
 80017e4:	bf00      	nop
}
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40002800 	.word	0x40002800

080017ec <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80017f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017f4:	f7ff fe2a 	bl	800144c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80017f8:	f00a fba2 	bl	800bf40 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80017fc:	2004      	movs	r0, #4
 80017fe:	f7ff fddd 	bl	80013bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001802:	bf00      	nop
}
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800180e:	f009 fa5b 	bl	800acc8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001812:	4a11      	ldr	r2, [pc, #68]	; (8001858 <appe_Tl_Init+0x50>)
 8001814:	2100      	movs	r1, #0
 8001816:	2004      	movs	r0, #4
 8001818:	f00a fcd0 	bl	800c1bc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <appe_Tl_Init+0x54>)
 800181e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <appe_Tl_Init+0x58>)
 8001822:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	480e      	ldr	r0, [pc, #56]	; (8001864 <appe_Tl_Init+0x5c>)
 800182a:	f009 f913 	bl	800aa54 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <appe_Tl_Init+0x60>)
 8001830:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <appe_Tl_Init+0x64>)
 8001834:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <appe_Tl_Init+0x68>)
 8001838:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800183a:	f240 533c 	movw	r3, #1340	; 0x53c
 800183e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	4618      	mov	r0, r3
 8001846:	f009 fb81 	bl	800af4c <TL_MM_Init>

  TL_Enable();
 800184a:	f009 fa37 	bl	800acbc <TL_Enable>

  return;
 800184e:	bf00      	nop
}
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	0800aa8d 	.word	0x0800aa8d
 800185c:	200005dc 	.word	0x200005dc
 8001860:	08001875 	.word	0x08001875
 8001864:	0800188d 	.word	0x0800188d
 8001868:	200007f4 	.word	0x200007f4
 800186c:	200006e8 	.word	0x200006e8
 8001870:	200000a0 	.word	0x200000a0

08001874 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800187e:	bf00      	nop
}
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	330b      	adds	r3, #11
 800189a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	d81f      	bhi.n	80018ea <APPE_SysUserEvtRx+0x5e>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <APPE_SysUserEvtRx+0x24>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018d1 	.word	0x080018d1
 80018b4:	080018e3 	.word	0x080018e3
 80018b8:	080018eb 	.word	0x080018eb
 80018bc:	080018eb 	.word	0x080018eb
 80018c0:	080018eb 	.word	0x080018eb
 80018c4:	080018eb 	.word	0x080018eb
 80018c8:	080018eb 	.word	0x080018eb
 80018cc:	080018eb 	.word	0x080018eb
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4618      	mov	r0, r3
 80018d6:	f008 fe79 	bl	800a5cc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f81b 	bl	8001916 <APPE_SysEvtReadyProcessing>
    break;
 80018e0:	e004      	b.n	80018ec <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f806 	bl	80018f4 <APPE_SysEvtError>
    break;
 80018e8:	e000      	b.n	80018ec <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80018ea:	bf00      	nop
  }

  return;
 80018ec:	bf00      	nop
}
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	330b      	adds	r3, #11
 8001902:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3302      	adds	r3, #2
 8001908:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800190a:	bf00      	nop
}
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b08a      	sub	sp, #40	; 0x28
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	330b      	adds	r3, #11
 800193a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	3302      	adds	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11d      	bne.n	8001986 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800194a:	f7ff fd1b 	bl	8001384 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800194e:	230f      	movs	r3, #15
 8001950:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001952:	237f      	movs	r3, #127	; 0x7f
 8001954:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001956:	f7ff fdfd 	bl	8001554 <LL_DBGMCU_GetRevisionID>
 800195a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	b29b      	uxth	r3, r3
 8001960:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001962:	f7ff fde9 	bl	8001538 <LL_DBGMCU_GetDeviceID>
 8001966:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	4618      	mov	r0, r3
 8001974:	f008 fe14 	bl	800a5a0 <SHCI_C2_Config>

    APP_BLE_Init();
 8001978:	f009 fcf2 	bl	800b360 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800197c:	2100      	movs	r1, #0
 800197e:	2001      	movs	r0, #1
 8001980:	f00a faf0 	bl	800bf64 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001984:	e007      	b.n	8001996 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d103      	bne.n	8001996 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
  return;
 8001994:	bf00      	nop
 8001996:	bf00      	nop
}
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a6:	f001 fe01 	bl	80035ac <HAL_GetTick>
 80019aa:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b6:	d00a      	beq.n	80019ce <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80019b8:	f001 fe10 	bl	80035dc <HAL_GetTickFreq>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	e002      	b.n	80019ce <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80019c8:	f7ff fe34 	bl	8001634 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80019cc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	f001 fded 	bl	80035ac <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d8f4      	bhi.n	80019c8 <HAL_Delay+0x2a>
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f00a fae8 	bl	800bfc4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80019fc:	bf00      	nop
}
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a14:	f00a fad6 	bl	800bfc4 <UTIL_SEQ_Run>

  return;
 8001a18:	bf00      	nop
}
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f00a fbe8 	bl	800c200 <UTIL_SEQ_SetTask>
  return;
 8001a30:	bf00      	nop
}
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f00a fc49 	bl	800c2d8 <UTIL_SEQ_SetEvt>
  return;
 8001a46:	bf00      	nop
}
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001a56:	2002      	movs	r0, #2
 8001a58:	f00a fc5e 	bl	800c318 <UTIL_SEQ_WaitEvt>
  return;
 8001a5c:	bf00      	nop
}
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <LL_EXTI_EnableIT_0_31>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a72:	4905      	ldr	r1, [pc, #20]	; (8001a88 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	58000800 	.word	0x58000800

08001a8c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	58000800 	.word	0x58000800

08001ab0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <ReadRtcSsrValue+0x3c>)
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <ReadRtcSsrValue+0x3c>)
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001ac6:	e005      	b.n	8001ad4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <ReadRtcSsrValue+0x3c>)
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1f5      	bne.n	8001ac8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001adc:	683b      	ldr	r3, [r7, #0]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40002800 	.word	0x40002800

08001af0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001b00:	79ba      	ldrb	r2, [r7, #6]
 8001b02:	491d      	ldr	r1, [pc, #116]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3315      	adds	r3, #21
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d009      	beq.n	8001b2e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	3314      	adds	r3, #20
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001b2e:	79fa      	ldrb	r2, [r7, #7]
 8001b30:	4911      	ldr	r1, [pc, #68]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3315      	adds	r3, #21
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3314      	adds	r3, #20
 8001b52:	79ba      	ldrb	r2, [r7, #6]
 8001b54:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001b56:	79ba      	ldrb	r2, [r7, #6]
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	3315      	adds	r3, #21
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	701a      	strb	r2, [r3, #0]

  return;
 8001b6a:	bf00      	nop
}
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000978 	.word	0x20000978

08001b7c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <LinkTimerBefore+0xb8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	79ba      	ldrb	r2, [r7, #6]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d032      	beq.n	8001bfe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001b98:	79ba      	ldrb	r2, [r7, #6]
 8001b9a:	4927      	ldr	r1, [pc, #156]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	3315      	adds	r3, #21
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	491d      	ldr	r1, [pc, #116]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3315      	adds	r3, #21
 8001bd0:	79ba      	ldrb	r2, [r7, #6]
 8001bd2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4918      	ldr	r1, [pc, #96]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3314      	adds	r3, #20
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001be8:	79ba      	ldrb	r2, [r7, #6]
 8001bea:	4913      	ldr	r1, [pc, #76]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001bfc:	e014      	b.n	8001c28 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	490d      	ldr	r1, [pc, #52]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3315      	adds	r3, #21
 8001c0e:	79ba      	ldrb	r2, [r7, #6]
 8001c10:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c12:	79ba      	ldrb	r2, [r7, #6]
 8001c14:	4908      	ldr	r1, [pc, #32]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	3314      	adds	r3, #20
 8001c22:	79fa      	ldrb	r2, [r7, #7]
 8001c24:	701a      	strb	r2, [r3, #0]
  return;
 8001c26:	bf00      	nop
}
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000a08 	.word	0x20000a08
 8001c38:	20000978 	.word	0x20000978

08001c3c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <linkTimer+0x144>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d118      	bne.n	8001c82 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c50:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <linkTimer+0x144>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <linkTimer+0x148>)
 8001c58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001c5a:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <linkTimer+0x144>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	4949      	ldr	r1, [pc, #292]	; (8001d88 <linkTimer+0x14c>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3315      	adds	r3, #21
 8001c70:	2206      	movs	r2, #6
 8001c72:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <linkTimer+0x150>)
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c7a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	81fb      	strh	r3, [r7, #14]
 8001c80:	e078      	b.n	8001d74 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001c82:	f000 f909 	bl	8001e98 <ReturnTimeElapsed>
 8001c86:	4603      	mov	r3, r0
 8001c88:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	493e      	ldr	r1, [pc, #248]	; (8001d88 <linkTimer+0x14c>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3308      	adds	r3, #8
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	4419      	add	r1, r3
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <linkTimer+0x14c>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4403      	add	r3, r0
 8001cae:	3308      	adds	r3, #8
 8001cb0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	4934      	ldr	r1, [pc, #208]	; (8001d88 <linkTimer+0x14c>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <linkTimer+0x144>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <linkTimer+0x14c>)
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	440b      	add	r3, r1
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3308      	adds	r3, #8
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d337      	bcc.n	8001d54 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <linkTimer+0x144>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001cea:	7b7a      	ldrb	r2, [r7, #13]
 8001cec:	4926      	ldr	r1, [pc, #152]	; (8001d88 <linkTimer+0x14c>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3315      	adds	r3, #21
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001cfe:	e013      	b.n	8001d28 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001d00:	7b7a      	ldrb	r2, [r7, #13]
 8001d02:	4921      	ldr	r1, [pc, #132]	; (8001d88 <linkTimer+0x14c>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3315      	adds	r3, #21
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001d14:	7b7a      	ldrb	r2, [r7, #13]
 8001d16:	491c      	ldr	r1, [pc, #112]	; (8001d88 <linkTimer+0x14c>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	3315      	adds	r3, #21
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d28:	7b3b      	ldrb	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d00b      	beq.n	8001d46 <linkTimer+0x10a>
 8001d2e:	7b3a      	ldrb	r2, [r7, #12]
 8001d30:	4915      	ldr	r1, [pc, #84]	; (8001d88 <linkTimer+0x14c>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d2dc      	bcs.n	8001d00 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001d46:	7b7a      	ldrb	r2, [r7, #13]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fecf 	bl	8001af0 <LinkTimerAfter>
 8001d52:	e00f      	b.n	8001d74 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <linkTimer+0x144>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff0c 	bl	8001b7c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <linkTimer+0x144>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <linkTimer+0x148>)
 8001d6c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <linkTimer+0x144>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001d74:	89fb      	ldrh	r3, [r7, #14]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000a08 	.word	0x20000a08
 8001d84:	20000a09 	.word	0x20000a09
 8001d88:	20000978 	.word	0x20000978
 8001d8c:	20000a0c 	.word	0x20000a0c

08001d90 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <UnlinkTimer+0xf8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d111      	bne.n	8001dd0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <UnlinkTimer+0xf8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <UnlinkTimer+0xfc>)
 8001db4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001db6:	79fa      	ldrb	r2, [r7, #7]
 8001db8:	4935      	ldr	r1, [pc, #212]	; (8001e90 <UnlinkTimer+0x100>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3315      	adds	r3, #21
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <UnlinkTimer+0xf8>)
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e03e      	b.n	8001e4e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <UnlinkTimer+0x100>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3314      	adds	r3, #20
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	492a      	ldr	r1, [pc, #168]	; (8001e90 <UnlinkTimer+0x100>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3315      	adds	r3, #21
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001df8:	79f9      	ldrb	r1, [r7, #7]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	4824      	ldr	r0, [pc, #144]	; (8001e90 <UnlinkTimer+0x100>)
 8001dfe:	460b      	mov	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	440b      	add	r3, r1
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4403      	add	r3, r0
 8001e08:	3315      	adds	r3, #21
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2d8      	uxtb	r0, r3
 8001e0e:	4920      	ldr	r1, [pc, #128]	; (8001e90 <UnlinkTimer+0x100>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	3315      	adds	r3, #21
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d013      	beq.n	8001e4e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001e26:	79f9      	ldrb	r1, [r7, #7]
 8001e28:	7bba      	ldrb	r2, [r7, #14]
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <UnlinkTimer+0x100>)
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4403      	add	r3, r0
 8001e36:	3314      	adds	r3, #20
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2d8      	uxtb	r0, r3
 8001e3c:	4914      	ldr	r1, [pc, #80]	; (8001e90 <UnlinkTimer+0x100>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3314      	adds	r3, #20
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	490f      	ldr	r1, [pc, #60]	; (8001e90 <UnlinkTimer+0x100>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <UnlinkTimer+0xf8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d107      	bne.n	8001e7c <UnlinkTimer+0xec>
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <UnlinkTimer+0x104>)
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e78:	601a      	str	r2, [r3, #0]
  }

  return;
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
}
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000a08 	.word	0x20000a08
 8001e8c:	20000a09 	.word	0x20000a09
 8001e90:	20000978 	.word	0x20000978
 8001e94:	20000a0c 	.word	0x20000a0c

08001e98 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea6:	d026      	beq.n	8001ef6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001ea8:	f7ff fe02 	bl	8001ab0 <ReadRtcSsrValue>
 8001eac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d805      	bhi.n	8001ec4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	e00a      	b.n	8001eda <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <ReturnTimeElapsed+0x74>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <ReturnTimeElapsed+0x78>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <ReturnTimeElapsed+0x7c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	40d3      	lsrs	r3, r2
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	b29b      	uxth	r3, r3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000a0c 	.word	0x20000a0c
 8001f0c:	20000a14 	.word	0x20000a14
 8001f10:	20000a12 	.word	0x20000a12
 8001f14:	20000a11 	.word	0x20000a11

08001f18 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f28:	f7ff fdc2 	bl	8001ab0 <ReadRtcSsrValue>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <RestartWakeupCounter+0x9c>)
 8001f30:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f001 fcdb 	bl	80038ee <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001f38:	e039      	b.n	8001fae <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d803      	bhi.n	8001f48 <RestartWakeupCounter+0x30>
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <RestartWakeupCounter+0xa0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d002      	beq.n	8001f4e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f4e:	bf00      	nop
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f8      	beq.n	8001f50 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f6e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <RestartWakeupCounter+0xa8>)
 8001f72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f76:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f001 fcc6 	bl	800390a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <RestartWakeupCounter+0xac>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	0c1b      	lsrs	r3, r3, #16
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <RestartWakeupCounter+0xac>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f8e:	f7ff fd8f 	bl	8001ab0 <ReadRtcSsrValue>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <RestartWakeupCounter+0x9c>)
 8001f96:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001fa8:	f3af 8000 	nop.w
  return ;
 8001fac:	bf00      	nop
}
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000a0c 	.word	0x20000a0c
 8001fb8:	20000a11 	.word	0x20000a11
 8001fbc:	20000ae0 	.word	0x20000ae0
 8001fc0:	58000800 	.word	0x58000800
 8001fc4:	40002800 	.word	0x40002800

08001fc8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fce:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <RescheduleTimerList+0x11c>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d107      	bne.n	8001fec <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fdc:	bf00      	nop
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <RescheduleTimerList+0x120>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f8      	bne.n	8001fde <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <RescheduleTimerList+0x120>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <RescheduleTimerList+0x120>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <RescheduleTimerList+0x124>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	493a      	ldr	r1, [pc, #232]	; (80020f0 <RescheduleTimerList+0x128>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3308      	adds	r3, #8
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002016:	f7ff ff3f 	bl	8001e98 <ReturnTimeElapsed>
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	429a      	cmp	r2, r3
 8002024:	d205      	bcs.n	8002032 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <RescheduleTimerList+0x12c>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e04d      	b.n	80020ce <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <RescheduleTimerList+0x130>)
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	b292      	uxth	r2, r2
 800203a:	4413      	add	r3, r2
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4293      	cmp	r3, r2
 8002042:	d906      	bls.n	8002052 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <RescheduleTimerList+0x130>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <RescheduleTimerList+0x12c>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e03d      	b.n	80020ce <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	b29a      	uxth	r2, r3
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <RescheduleTimerList+0x12c>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002062:	e034      	b.n	80020ce <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	4922      	ldr	r1, [pc, #136]	; (80020f0 <RescheduleTimerList+0x128>)
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3308      	adds	r3, #8
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	429a      	cmp	r2, r3
 800207a:	d20a      	bcs.n	8002092 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	491c      	ldr	r1, [pc, #112]	; (80020f0 <RescheduleTimerList+0x128>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3308      	adds	r3, #8
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e013      	b.n	80020ba <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <RescheduleTimerList+0x128>)
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3308      	adds	r3, #8
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	1ac9      	subs	r1, r1, r3
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <RescheduleTimerList+0x128>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4403      	add	r3, r0
 80020b6:	3308      	adds	r3, #8
 80020b8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <RescheduleTimerList+0x128>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	3315      	adds	r3, #21
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d1c7      	bne.n	8002064 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff1e 	bl	8001f18 <RestartWakeupCounter>

  return ;
 80020dc:	bf00      	nop
}
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40002800 	.word	0x40002800
 80020e8:	20000ae0 	.word	0x20000ae0
 80020ec:	20000a08 	.word	0x20000a08
 80020f0:	20000978 	.word	0x20000978
 80020f4:	20000a10 	.word	0x20000a10
 80020f8:	20000a16 	.word	0x20000a16

080020fc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002102:	f3ef 8310 	mrs	r3, PRIMASK
 8002106:	617b      	str	r3, [r7, #20]
  return(result);
 8002108:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	22ca      	movs	r2, #202	; 0xca
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2253      	movs	r2, #83	; 0x53
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002120:	4b55      	ldr	r3, [pc, #340]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002130:	4b52      	ldr	r3, [pc, #328]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002138:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800213c:	4950      	ldr	r1, [pc, #320]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	330c      	adds	r3, #12
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d16e      	bne.n	8002230 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002152:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002156:	494a      	ldr	r1, [pc, #296]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002166:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800216a:	4945      	ldr	r1, [pc, #276]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	3310      	adds	r3, #16
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800217c:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04c      	beq.n	8002220 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002186:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800218a:	493d      	ldr	r1, [pc, #244]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	330d      	adds	r3, #13
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d124      	bne.n	80021ea <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80021a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fdf2 	bl	8001d90 <UnlinkTimer>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f383 8810 	msr	PRIMASK, r3
}
 80021b6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80021b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021bc:	4930      	ldr	r1, [pc, #192]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3304      	adds	r3, #4
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f9b8 	bl	8002548 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	22ca      	movs	r2, #202	; 0xca
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2253      	movs	r2, #83	; 0x53
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
 80021e8:	e012      	b.n	8002210 <HW_TS_RTC_Wakeup_Handler+0x114>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f383 8810 	msr	PRIMASK, r3
}
 80021f4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80021f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f920 	bl	8002440 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	22ca      	movs	r2, #202	; 0xca
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2253      	movs	r2, #83	; 0x53
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	4619      	mov	r1, r3
 8002218:	69b8      	ldr	r0, [r7, #24]
 800221a:	f000 fa1b 	bl	8002654 <HW_TS_RTC_Int_AppNot>
 800221e:	e022      	b.n	8002266 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002220:	f7ff fed2 	bl	8001fc8 <RescheduleTimerList>
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f383 8810 	msr	PRIMASK, r3
}
 800222e:	e01a      	b.n	8002266 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002230:	bf00      	nop
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f8      	beq.n	8002232 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002250:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002254:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f383 8810 	msr	PRIMASK, r3
}
 8002264:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800226e:	bf00      	nop
}
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000ae0 	.word	0x20000ae0
 800227c:	20000a08 	.word	0x20000a08
 8002280:	20000978 	.word	0x20000978
 8002284:	20000a10 	.word	0x20000a10
 8002288:	58000800 	.word	0x58000800

0800228c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HW_TS_Init+0x188>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22ca      	movs	r2, #202	; 0xca
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2253      	movs	r2, #83	; 0x53
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80022a8:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <HW_TS_Init+0x18c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a5a      	ldr	r2, [pc, #360]	; (8002418 <HW_TS_Init+0x18c>)
 80022ae:	f043 0320 	orr.w	r3, r3, #32
 80022b2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80022b4:	4b58      	ldr	r3, [pc, #352]	; (8002418 <HW_TS_Init+0x18c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f1c3 0304 	rsb	r3, r3, #4
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <HW_TS_Init+0x190>)
 80022c8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80022ca:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HW_TS_Init+0x18c>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022d2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80022d6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d101      	bne.n	80022ee <HW_TS_Init+0x62>
  {
    return 32U;
 80022ea:	2220      	movs	r2, #32
 80022ec:	e003      	b.n	80022f6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	40d3      	lsrs	r3, r2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HW_TS_Init+0x194>)
 8002300:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <HW_TS_Init+0x18c>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800230c:	b29b      	uxth	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HW_TS_Init+0x198>)
 8002314:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HW_TS_Init+0x198>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	4a40      	ldr	r2, [pc, #256]	; (8002420 <HW_TS_Init+0x194>)
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002328:	4a3c      	ldr	r2, [pc, #240]	; (800241c <HW_TS_Init+0x190>)
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	40d3      	lsrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002336:	4293      	cmp	r3, r2
 8002338:	d904      	bls.n	8002344 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HW_TS_Init+0x19c>)
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	e003      	b.n	800234c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HW_TS_Init+0x19c>)
 800234a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800234c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002350:	f7ff fb9c 	bl	8001a8c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002354:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002358:	f7ff fb84 	bl	8001a64 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d13d      	bne.n	80023de <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <HW_TS_Init+0x1a0>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HW_TS_Init+0x1a4>)
 800236a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800236e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002370:	2300      	movs	r3, #0
 8002372:	77fb      	strb	r3, [r7, #31]
 8002374:	e00c      	b.n	8002390 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002376:	7ffa      	ldrb	r2, [r7, #31]
 8002378:	492e      	ldr	r1, [pc, #184]	; (8002434 <HW_TS_Init+0x1a8>)
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	330c      	adds	r3, #12
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800238a:	7ffb      	ldrb	r3, [r7, #31]
 800238c:	3301      	adds	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d9ef      	bls.n	8002376 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HW_TS_Init+0x1ac>)
 8002398:	2206      	movs	r2, #6
 800239a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HW_TS_Init+0x188>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HW_TS_Init+0x188>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HW_TS_Init+0x188>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HW_TS_Init+0x188>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80023bc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HW_TS_Init+0x1b0>)
 80023c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023c4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80023c6:	2003      	movs	r0, #3
 80023c8:	f001 fa9f 	bl	800390a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HW_TS_Init+0x188>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HW_TS_Init+0x188>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e009      	b.n	80023f2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HW_TS_Init+0x188>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023ec:	2003      	movs	r0, #3
 80023ee:	f001 fa7e 	bl	80038ee <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HW_TS_Init+0x188>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80023fa:	2200      	movs	r2, #0
 80023fc:	2103      	movs	r1, #3
 80023fe:	2003      	movs	r0, #3
 8002400:	f001 fa33 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002404:	2003      	movs	r0, #3
 8002406:	f001 fa4a 	bl	800389e <HAL_NVIC_EnableIRQ>

  return;
 800240a:	bf00      	nop
}
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000ae0 	.word	0x20000ae0
 8002418:	40002800 	.word	0x40002800
 800241c:	20000a11 	.word	0x20000a11
 8002420:	20000a12 	.word	0x20000a12
 8002424:	20000a14 	.word	0x20000a14
 8002428:	20000a16 	.word	0x20000a16
 800242c:	20000a10 	.word	0x20000a10
 8002430:	20000a0c 	.word	0x20000a0c
 8002434:	20000978 	.word	0x20000978
 8002438:	20000a08 	.word	0x20000a08
 800243c:	58000800 	.word	0x58000800

08002440 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244a:	f3ef 8310 	mrs	r3, PRIMASK
 800244e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002450:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002454:	b672      	cpsid	i
}
 8002456:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002458:	2003      	movs	r0, #3
 800245a:	f001 fa2e 	bl	80038ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HW_TS_Stop+0xf0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	22ca      	movs	r2, #202	; 0xca
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HW_TS_Stop+0xf0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2253      	movs	r2, #83	; 0x53
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800246e:	79fa      	ldrb	r2, [r7, #7]
 8002470:	4930      	ldr	r1, [pc, #192]	; (8002534 <HW_TS_Stop+0xf4>)
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	330c      	adds	r3, #12
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d142      	bne.n	800250c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fc80 	bl	8001d90 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <HW_TS_Stop+0xf8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d12f      	bne.n	80024fc <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HW_TS_Stop+0xfc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a8:	d107      	bne.n	80024ba <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80024aa:	bf00      	nop
 80024ac:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HW_TS_Stop+0xf0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f8      	bne.n	80024ac <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HW_TS_Stop+0xf0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HW_TS_Stop+0xf0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024ca:	bf00      	nop
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HW_TS_Stop+0xf0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f8      	beq.n	80024cc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HW_TS_Stop+0xf0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HW_TS_Stop+0xf0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024ea:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HW_TS_Stop+0x100>)
 80024ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024f2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80024f4:	2003      	movs	r0, #3
 80024f6:	f001 fa08 	bl	800390a <HAL_NVIC_ClearPendingIRQ>
 80024fa:	e007      	b.n	800250c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HW_TS_Stop+0x104>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	7cfa      	ldrb	r2, [r7, #19]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002508:	f7ff fd5e 	bl	8001fc8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HW_TS_Stop+0xf0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	22ff      	movs	r2, #255	; 0xff
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002514:	2003      	movs	r0, #3
 8002516:	f001 f9c2 	bl	800389e <HAL_NVIC_EnableIRQ>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	f383 8810 	msr	PRIMASK, r3
}
 8002524:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002526:	bf00      	nop
}
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000ae0 	.word	0x20000ae0
 8002534:	20000978 	.word	0x20000978
 8002538:	20000a08 	.word	0x20000a08
 800253c:	40002800 	.word	0x40002800
 8002540:	58000800 	.word	0x58000800
 8002544:	20000a09 	.word	0x20000a09

08002548 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	493b      	ldr	r1, [pc, #236]	; (8002644 <HW_TS_Start+0xfc>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	330c      	adds	r3, #12
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d103      	bne.n	8002574 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff66 	bl	8002440 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002574:	f3ef 8310 	mrs	r3, PRIMASK
 8002578:	60fb      	str	r3, [r7, #12]
  return(result);
 800257a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800257c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800257e:	b672      	cpsid	i
}
 8002580:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002582:	2003      	movs	r0, #3
 8002584:	f001 f999 	bl	80038ba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002588:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HW_TS_Start+0x100>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	22ca      	movs	r2, #202	; 0xca
 800258e:	625a      	str	r2, [r3, #36]	; 0x24
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HW_TS_Start+0x100>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2253      	movs	r2, #83	; 0x53
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002598:	79fa      	ldrb	r2, [r7, #7]
 800259a:	492a      	ldr	r1, [pc, #168]	; (8002644 <HW_TS_Start+0xfc>)
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	440b      	add	r3, r1
 80025a6:	330c      	adds	r3, #12
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	4925      	ldr	r1, [pc, #148]	; (8002644 <HW_TS_Start+0xfc>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3308      	adds	r3, #8
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	4920      	ldr	r1, [pc, #128]	; (8002644 <HW_TS_Start+0xfc>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	3304      	adds	r3, #4
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fb30 	bl	8001c3c <linkTimer>
 80025dc:	4603      	mov	r3, r0
 80025de:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HW_TS_Start+0x104>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HW_TS_Start+0x108>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	7c7a      	ldrb	r2, [r7, #17]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d002      	beq.n	80025f8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80025f2:	f7ff fce9 	bl	8001fc8 <RescheduleTimerList>
 80025f6:	e013      	b.n	8002620 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	4912      	ldr	r1, [pc, #72]	; (8002644 <HW_TS_Start+0xfc>)
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3308      	adds	r3, #8
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	8a7b      	ldrh	r3, [r7, #18]
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	1ac9      	subs	r1, r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <HW_TS_Start+0xfc>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4403      	add	r3, r0
 800261c:	3308      	adds	r3, #8
 800261e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HW_TS_Start+0x100>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	22ff      	movs	r2, #255	; 0xff
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002628:	2003      	movs	r0, #3
 800262a:	f001 f938 	bl	800389e <HAL_NVIC_EnableIRQ>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f383 8810 	msr	PRIMASK, r3
}
 8002638:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800263a:	bf00      	nop
}
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000978 	.word	0x20000978
 8002648:	20000ae0 	.word	0x20000ae0
 800264c:	20000a08 	.word	0x20000a08
 8002650:	20000a09 	.word	0x20000a09

08002654 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	460b      	mov	r3, r1
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4798      	blx	r3

  return;
 8002666:	bf00      	nop
}
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <LL_RCC_LSE_SetDriveCapability>:
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f023 0218 	bic.w	r2, r3, #24
 8002682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_AHB1_GRP1_EnableClock>:
{
 800269a:	b480      	push	{r7}
 800269c:	b085      	sub	sp, #20
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_AHB2_GRP1_EnableClock>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002706:	f000 fee3 	bl	80034d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800270a:	f7fe ffd3 	bl	80016b4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270e:	f000 f89f 	bl	8002850 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002712:	f000 f8ff 	bl	8002914 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002716:	f000 f95d 	bl	80029d4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800271a:	f000 fa7d 	bl	8002c18 <MX_GPIO_Init>
  MX_DMA_Init();
 800271e:	f000 fa61 	bl	8002be4 <MX_DMA_Init>
  MX_RTC_Init();
 8002722:	f000 f99f 	bl	8002a64 <MX_RTC_Init>
  MX_I2C1_Init();
 8002726:	f000 f915 	bl	8002954 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800272a:	f000 fa0d 	bl	8002b48 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 800272e:	f000 f965 	bl	80029fc <MX_LPTIM1_Init>
  MX_SPI1_Init();
 8002732:	f000 f9cb 	bl	8002acc <MX_SPI1_Init>
  MX_RF_Init();
 8002736:	f000 f98d 	bl	8002a54 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 800273a:	483a      	ldr	r0, [pc, #232]	; (8002824 <main+0x124>)
 800273c:	f009 fec0 	bl	800c4c0 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8002740:	200a      	movs	r0, #10
 8002742:	f7ff f92c 	bl	800199e <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8002746:	4938      	ldr	r1, [pc, #224]	; (8002828 <main+0x128>)
 8002748:	4838      	ldr	r0, [pc, #224]	; (800282c <main+0x12c>)
 800274a:	f7fe f8cf 	bl	80008ec <BH1790GLC_init>
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if(status != 0){
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <main+0x6a>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4619      	mov	r1, r3
 800275c:	4834      	ldr	r0, [pc, #208]	; (8002830 <main+0x130>)
 800275e:	f009 feaf 	bl	800c4c0 <iprintf>
	  sensorReady = 0;
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <main+0x134>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e007      	b.n	800277a <main+0x7a>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4619      	mov	r1, r3
 800276e:	4832      	ldr	r0, [pc, #200]	; (8002838 <main+0x138>)
 8002770:	f009 fea6 	bl	800c4c0 <iprintf>
	  sensorReady = 1;
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <main+0x134>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8002780:	482e      	ldr	r0, [pc, #184]	; (800283c <main+0x13c>)
 8002782:	f002 fc5f 	bl	8005044 <HAL_LPTIM_TimeOut_Start_IT>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <main+0x90>
	  Error_Handler();
 800278c:	f000 fac0 	bl	8002d10 <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 8002790:	482b      	ldr	r0, [pc, #172]	; (8002840 <main+0x140>)
 8002792:	f009 fe95 	bl	800c4c0 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8002796:	200a      	movs	r0, #10
 8002798:	f7ff f901 	bl	800199e <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);				//specify register bank
 800279c:	2100      	movs	r1, #0
 800279e:	4829      	ldr	r0, [pc, #164]	; (8002844 <main+0x144>)
 80027a0:	f7fe fcca 	bl	8001138 <ICM_SelectBank>
  HAL_Delay(10);									//wait as a precaution
 80027a4:	200a      	movs	r0, #10
 80027a6:	f7ff f8fa 	bl	800199e <HAL_Delay>
  ICM_PowerOn(&imu, &hspi1);						//configure sensor
 80027aa:	4927      	ldr	r1, [pc, #156]	; (8002848 <main+0x148>)
 80027ac:	4825      	ldr	r0, [pc, #148]	; (8002844 <main+0x144>)
 80027ae:	f7fe fb65 	bl	8000e7c <ICM_PowerOn>
  HAL_Delay(10);									//wait as a precaution
 80027b2:	200a      	movs	r0, #10
 80027b4:	f7ff f8f3 	bl	800199e <HAL_Delay>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80027b8:	f7fe ff8a 	bl	80016d0 <MX_APPE_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80027bc:	f7ff f914 	bl	80019e8 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <main+0x134>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d013      	beq.n	80027f0 <main+0xf0>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <main+0x134>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 80027ce:	4817      	ldr	r0, [pc, #92]	; (800282c <main+0x12c>)
 80027d0:	f7fe f8fb 	bl	80009ca <get_val>
 80027d4:	4603      	mov	r3, r0
 80027d6:	71bb      	strb	r3, [r7, #6]
        if(err != 0){
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <main+0xf0>
        	//printf("Could not read sensor. Error code: %d\n\r", err);
        }else{
        	if(add_sample(&hrm)==1){
 80027de:	4813      	ldr	r0, [pc, #76]	; (800282c <main+0x12c>)
 80027e0:	f7fe f91e 	bl	8000a20 <add_sample>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <main+0xf0>

        		//printf("HELLO\n");
        		ppg_calculate(&hrm);
 80027ea:	4810      	ldr	r0, [pc, #64]	; (800282c <main+0x12c>)
 80027ec:	f7fe f942 	bl	8000a74 <ppg_calculate>
    }else{
    	//not ready
    }

	// Select User Bank 0
	ICM_SelectBank(&imu, USER_BANK_0);
 80027f0:	2100      	movs	r1, #0
 80027f2:	4814      	ldr	r0, [pc, #80]	; (8002844 <main+0x144>)
 80027f4:	f7fe fca0 	bl	8001138 <ICM_SelectBank>
	//HAL_Delay(10);

	// Obtain accelerometer and gyro data
	ICM_ReadAccelGyroData(&imu);
 80027f8:	4812      	ldr	r0, [pc, #72]	; (8002844 <main+0x144>)
 80027fa:	f7fe fc07 	bl	800100c <ICM_ReadAccelGyroData>

	// Obtain magnetometer data
//	ICM_ReadMagData(&imu, imu.mag_data);

	// Print raw axis data values to screen
	printf("X: %i, Y: %i, Z: %i\n", imu.accel_data[0], imu.accel_data[1], imu.accel_data[2]);
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <main+0x144>)
 8002800:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002804:	4619      	mov	r1, r3
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <main+0x144>)
 8002808:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800280c:	461a      	mov	r2, r3
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <main+0x144>)
 8002810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002814:	480d      	ldr	r0, [pc, #52]	; (800284c <main+0x14c>)
 8002816:	f009 fe53 	bl	800c4c0 <iprintf>
	HAL_Delay(5);
 800281a:	2005      	movs	r0, #5
 800281c:	f7ff f8bf 	bl	800199e <HAL_Delay>
    MX_APPE_Process();
 8002820:	e7cc      	b.n	80027bc <main+0xbc>
 8002822:	bf00      	nop
 8002824:	0800d5d0 	.word	0x0800d5d0
 8002828:	20000a18 	.word	0x20000a18
 800282c:	20000cbc 	.word	0x20000cbc
 8002830:	0800d5ec 	.word	0x0800d5ec
 8002834:	200010c8 	.word	0x200010c8
 8002838:	0800d618 	.word	0x0800d618
 800283c:	20000aa8 	.word	0x20000aa8
 8002840:	0800d64c 	.word	0x0800d64c
 8002844:	200010b0 	.word	0x200010b0
 8002848:	20000b04 	.word	0x20000b04
 800284c:	0800d660 	.word	0x0800d660

08002850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b09a      	sub	sp, #104	; 0x68
 8002854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	2248      	movs	r2, #72	; 0x48
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f009 fe26 	bl	800c4b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]
 8002872:	615a      	str	r2, [r3, #20]
 8002874:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002876:	f002 fe59 	bl	800552c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800287a:	2010      	movs	r0, #16
 800287c:	f7ff fef7 	bl	800266e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <SystemClock_Config+0xc0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002888:	4a21      	ldr	r2, [pc, #132]	; (8002910 <SystemClock_Config+0xc0>)
 800288a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <SystemClock_Config+0xc0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800289c:	2327      	movs	r3, #39	; 0x27
 800289e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028a6:	2301      	movs	r3, #1
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028b0:	2301      	movs	r3, #1
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028b4:	2340      	movs	r3, #64	; 0x40
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80028bc:	23a0      	movs	r3, #160	; 0xa0
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c4:	f107 0320 	add.w	r3, r7, #32
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 f9c3 	bl	8005c54 <HAL_RCC_OscConfig>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80028d4:	f000 fa1c 	bl	8002d10 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80028d8:	236f      	movs	r3, #111	; 0x6f
 80028da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80028dc:	2300      	movs	r3, #0
 80028de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fd1f 	bl	800633c <HAL_RCC_ClockConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002904:	f000 fa04 	bl	8002d10 <Error_Handler>
  }
}
 8002908:	bf00      	nop
 800290a:	3768      	adds	r7, #104	; 0x68
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	58000400 	.word	0x58000400

08002914 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b094      	sub	sp, #80	; 0x50
 8002918:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800291a:	463b      	mov	r3, r7
 800291c:	2250      	movs	r2, #80	; 0x50
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f009 fdc5 	bl	800c4b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002926:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800292a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800292c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002930:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002932:	2300      	movs	r3, #0
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002936:	2300      	movs	r3, #0
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293a:	463b      	mov	r3, r7
 800293c:	4618      	mov	r0, r3
 800293e:	f004 f93a 	bl	8006bb6 <HAL_RCCEx_PeriphCLKConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002948:	f000 f9e2 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800294c:	bf00      	nop
 800294e:	3750      	adds	r7, #80	; 0x50
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_I2C1_Init+0x74>)
 800295a:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <MX_I2C1_Init+0x78>)
 800295c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_I2C1_Init+0x74>)
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <MX_I2C1_Init+0x7c>)
 8002962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_I2C1_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_I2C1_Init+0x74>)
 800296c:	2201      	movs	r2, #1
 800296e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_I2C1_Init+0x74>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_I2C1_Init+0x74>)
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_I2C1_Init+0x74>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_I2C1_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_I2C1_Init+0x74>)
 800298a:	2200      	movs	r2, #0
 800298c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800298e:	480e      	ldr	r0, [pc, #56]	; (80029c8 <MX_I2C1_Init+0x74>)
 8002990:	f001 fb90 	bl	80040b4 <HAL_I2C_Init>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800299a:	f000 f9b9 	bl	8002d10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800299e:	2100      	movs	r1, #0
 80029a0:	4809      	ldr	r0, [pc, #36]	; (80029c8 <MX_I2C1_Init+0x74>)
 80029a2:	f002 f917 	bl	8004bd4 <HAL_I2CEx_ConfigAnalogFilter>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029ac:	f000 f9b0 	bl	8002d10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029b0:	2100      	movs	r1, #0
 80029b2:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_I2C1_Init+0x74>)
 80029b4:	f002 f959 	bl	8004c6a <HAL_I2CEx_ConfigDigitalFilter>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029be:	f000 f9a7 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000a18 	.word	0x20000a18
 80029cc:	40005400 	.word	0x40005400
 80029d0:	00707cbb 	.word	0x00707cbb

080029d4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_IPCC_Init+0x20>)
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <MX_IPCC_Init+0x24>)
 80029dc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_IPCC_Init+0x20>)
 80029e0:	f002 f990 	bl	8004d04 <HAL_IPCC_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80029ea:	f000 f991 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000a6c 	.word	0x20000a6c
 80029f8:	58000c00 	.word	0x58000c00

080029fc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <MX_LPTIM1_Init+0x54>)
 8002a04:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a18:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002a38:	4804      	ldr	r0, [pc, #16]	; (8002a4c <MX_LPTIM1_Init+0x50>)
 8002a3a:	f002 fa61 	bl	8004f00 <HAL_LPTIM_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8002a44:	f000 f964 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000aa8 	.word	0x20000aa8
 8002a50:	40007c00 	.word	0x40007c00

08002a54 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <MX_RTC_Init+0x64>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a76:	220f      	movs	r2, #15
 8002a78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a9a:	480a      	ldr	r0, [pc, #40]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002a9c:	f004 fb12 	bl	80070c4 <HAL_RTC_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002aa6:	f000 f933 	bl	8002d10 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_RTC_Init+0x60>)
 8002ab0:	f004 fc08 	bl	80072c4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002aba:	f000 f929 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000ae0 	.word	0x20000ae0
 8002ac8:	40002800 	.word	0x40002800

08002acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <MX_SPI1_Init+0x78>)
 8002ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002aea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002aee:	2202      	movs	r2, #2
 8002af0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b02:	2218      	movs	r2, #24
 8002b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_SPI1_Init+0x74>)
 8002b2c:	f004 fc86 	bl	800743c <HAL_SPI_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b36:	f000 f8eb 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000b04 	.word	0x20000b04
 8002b44:	40013000 	.word	0x40013000

08002b48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b4e:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <MX_USART1_UART_Init+0x98>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b68:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002b6c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b70:	220c      	movs	r2, #12
 8002b72:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b92:	4812      	ldr	r0, [pc, #72]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b94:	f005 fca2 	bl	80084dc <HAL_UART_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002b9e:	f000 f8b7 	bl	8002d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002ba6:	f006 f9f1 	bl	8008f8c <HAL_UARTEx_SetTxFifoThreshold>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002bb0:	f000 f8ae 	bl	8002d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4809      	ldr	r0, [pc, #36]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002bb8:	f006 fa26 	bl	8009008 <HAL_UARTEx_SetRxFifoThreshold>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002bc2:	f000 f8a5 	bl	8002d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bc6:	4805      	ldr	r0, [pc, #20]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002bc8:	f006 f9a7 	bl	8008f1a <HAL_UARTEx_DisableFifoMode>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002bd2:	f000 f89d 	bl	8002d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000c28 	.word	0x20000c28
 8002be0:	40013800 	.word	0x40013800

08002be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002be8:	2004      	movs	r0, #4
 8002bea:	f7ff fd56 	bl	800269a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7ff fd53 	bl	800269a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	200b      	movs	r0, #11
 8002bfa:	f000 fe36 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bfe:	200b      	movs	r0, #11
 8002c00:	f000 fe4d 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	200c      	movs	r0, #12
 8002c0a:	f000 fe2e 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c0e:	200c      	movs	r0, #12
 8002c10:	f000 fe45 	bl	800389e <HAL_NVIC_EnableIRQ>

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2c:	2004      	movs	r0, #4
 8002c2e:	f7ff fd4d 	bl	80026cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	2002      	movs	r0, #2
 8002c34:	f7ff fd4a 	bl	80026cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7ff fd47 	bl	80026cc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3e:	2008      	movs	r0, #8
 8002c40:	f7ff fd44 	bl	80026cc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8002c44:	2200      	movs	r2, #0
 8002c46:	213b      	movs	r1, #59	; 0x3b
 8002c48:	481d      	ldr	r0, [pc, #116]	; (8002cc0 <MX_GPIO_Init+0xa8>)
 8002c4a:	f001 f9f7 	bl	800403c <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c4e:	2310      	movs	r3, #16
 8002c50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4819      	ldr	r0, [pc, #100]	; (8002cc4 <MX_GPIO_Init+0xac>)
 8002c60:	f001 f87c 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 PB4
                           LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8002c64:	233b      	movs	r3, #59	; 0x3b
 8002c66:	607b      	str	r3, [r7, #4]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <MX_GPIO_Init+0xa8>)
 8002c7a:	f001 f86f 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002c90:	230a      	movs	r3, #10
 8002c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9c:	f001 f85e 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_GPIO_Init+0xb0>)
 8002cb2:	f001 f853 	bl	8003d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	48000400 	.word	0x48000400
 8002cc4:	48000800 	.word	0x48000800
 8002cc8:	48000c00 	.word	0x48000c00

08002ccc <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200010c8 	.word	0x200010c8

08002cec <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002cf4:	1d39      	adds	r1, r7, #4
 8002cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4803      	ldr	r0, [pc, #12]	; (8002d0c <__io_putchar+0x20>)
 8002cfe:	f005 fc3d 	bl	800857c <HAL_UART_Transmit>

  return ch;
 8002d02:	687b      	ldr	r3, [r7, #4]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000c28 	.word	0x20000c28

08002d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d14:	b672      	cpsid	i
}
 8002d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <Error_Handler+0x8>

08002d1a <LL_RCC_EnableRTC>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_AHB2_GRP1_EnableClock>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_AHB3_GRP1_EnableClock>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002e08:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e0c:	f7ff ffaf 	bl	8002d6e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	202e      	movs	r0, #46	; 0x2e
 8002e16:	f000 fd28 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e1a:	202e      	movs	r0, #46	; 0x2e
 8002e1c:	f000 fd3f 	bl	800389e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b09c      	sub	sp, #112	; 0x70
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2250      	movs	r2, #80	; 0x50
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f009 fb33 	bl	800c4b0 <memset>
  if(hi2c->Instance==I2C1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_I2C_MspInit+0x98>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d12e      	bne.n	8002eb2 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e54:	2304      	movs	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e58:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4618      	mov	r0, r3
 8002e64:	f003 fea7 	bl	8006bb6 <HAL_RCCEx_PeriphCLKConfig>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e6e:	f7ff ff4f 	bl	8002d10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e72:	2002      	movs	r0, #2
 8002e74:	f7ff ff62 	bl	8002d3c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e7e:	2312      	movs	r3, #18
 8002e80:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e92:	4619      	mov	r1, r3
 8002e94:	480a      	ldr	r0, [pc, #40]	; (8002ec0 <HAL_I2C_MspInit+0x9c>)
 8002e96:	f000 ff61 	bl	8003d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e9a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e9e:	f7ff ff7f 	bl	8002da0 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	201e      	movs	r0, #30
 8002ea8:	f000 fcdf 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002eac:	201e      	movs	r0, #30
 8002eae:	f000 fcf6 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3770      	adds	r7, #112	; 0x70
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40005400 	.word	0x40005400
 8002ec0:	48000400 	.word	0x48000400

08002ec4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <HAL_IPCC_MspInit+0x44>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d113      	bne.n	8002efe <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002ed6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002eda:	f7ff ff48 	bl	8002d6e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	202c      	movs	r0, #44	; 0x2c
 8002ee4:	f000 fcc1 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002ee8:	202c      	movs	r0, #44	; 0x2c
 8002eea:	f000 fcd8 	bl	800389e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	202d      	movs	r0, #45	; 0x2d
 8002ef4:	f000 fcb9 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ef8:	202d      	movs	r0, #45	; 0x2d
 8002efa:	f000 fcd0 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	58000c00 	.word	0x58000c00

08002f0c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b096      	sub	sp, #88	; 0x58
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	2250      	movs	r2, #80	; 0x50
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f009 fac7 	bl	800c4b0 <memset>
  if(hlptim->Instance==LPTIM1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_LPTIM_MspInit+0x60>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d11a      	bne.n	8002f62 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002f30:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fe3b 	bl	8006bb6 <HAL_RCCEx_PeriphCLKConfig>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002f46:	f7ff fee3 	bl	8002d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002f4a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002f4e:	f7ff ff27 	bl	8002da0 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	202f      	movs	r0, #47	; 0x2f
 8002f58:	f000 fc87 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002f5c:	202f      	movs	r0, #47	; 0x2f
 8002f5e:	f000 fc9e 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002f62:	bf00      	nop
 8002f64:	3758      	adds	r7, #88	; 0x58
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40007c00 	.word	0x40007c00

08002f70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b096      	sub	sp, #88	; 0x58
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	2250      	movs	r2, #80	; 0x50
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f009 fa95 	bl	800c4b0 <memset>
  if(hrtc->Instance==RTC)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <HAL_RTC_MspInit+0x64>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d11d      	bne.n	8002fcc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f94:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fe08 	bl	8006bb6 <HAL_RCCEx_PeriphCLKConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002fac:	f7ff feb0 	bl	8002d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fb0:	f7ff feb3 	bl	8002d1a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002fb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fb8:	f7ff fef2 	bl	8002da0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 fc52 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002fc6:	2003      	movs	r0, #3
 8002fc8:	f000 fc69 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fcc:	bf00      	nop
 8002fce:	3758      	adds	r7, #88	; 0x58
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40002800 	.word	0x40002800

08002fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3c      	ldr	r2, [pc, #240]	; (80030e8 <HAL_SPI_MspInit+0x110>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d171      	bne.n	80030de <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ffe:	f7ff fee8 	bl	8002dd2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2001      	movs	r0, #1
 8003004:	f7ff fe9a 	bl	8002d3c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003008:	23c2      	movs	r3, #194	; 0xc2
 800300a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003018:	2305      	movs	r3, #5
 800301a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4619      	mov	r1, r3
 8003022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003026:	f000 fe99 	bl	8003d5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_SPI_MspInit+0x114>)
 800302c:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <HAL_SPI_MspInit+0x118>)
 800302e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003030:	4b2e      	ldr	r3, [pc, #184]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003032:	2206      	movs	r2, #6
 8003034:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800303c:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_SPI_MspInit+0x114>)
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_SPI_MspInit+0x114>)
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800304e:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_SPI_MspInit+0x114>)
 800305c:	2200      	movs	r2, #0
 800305e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003060:	4822      	ldr	r0, [pc, #136]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003062:	f000 fc61 	bl	8003928 <HAL_DMA_Init>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 800306c:	f7ff fe50 	bl	8002d10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003074:	659a      	str	r2, [r3, #88]	; 0x58
 8003076:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <HAL_SPI_MspInit+0x114>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 800307e:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <HAL_SPI_MspInit+0x120>)
 8003080:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 8003084:	2207      	movs	r2, #7
 8003086:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 800308a:	2210      	movs	r2, #16
 800308c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 8003090:	2200      	movs	r2, #0
 8003092:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030b2:	4810      	ldr	r0, [pc, #64]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 80030b4:	f000 fc38 	bl	8003928 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 80030be:	f7ff fe27 	bl	8002d10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_SPI_MspInit+0x11c>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	2022      	movs	r0, #34	; 0x22
 80030d4:	f000 fbc9 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030d8:	2022      	movs	r0, #34	; 0x22
 80030da:	f000 fbe0 	bl	800389e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030de:	bf00      	nop
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40013000 	.word	0x40013000
 80030ec:	20000b68 	.word	0x20000b68
 80030f0:	40020008 	.word	0x40020008
 80030f4:	20000bc8 	.word	0x20000bc8
 80030f8:	4002001c 	.word	0x4002001c

080030fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b09c      	sub	sp, #112	; 0x70
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	2250      	movs	r2, #80	; 0x50
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f009 f9c7 	bl	800c4b0 <memset>
  if(huart->Instance==USART1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a16      	ldr	r2, [pc, #88]	; (8003180 <HAL_UART_MspInit+0x84>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d124      	bne.n	8003176 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800312c:	2301      	movs	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fd3c 	bl	8006bb6 <HAL_RCCEx_PeriphCLKConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003144:	f7ff fde4 	bl	8002d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003148:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800314c:	f7ff fe41 	bl	8002dd2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	2002      	movs	r0, #2
 8003152:	f7ff fdf3 	bl	8002d3c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003156:	23c0      	movs	r3, #192	; 0xc0
 8003158:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003166:	2307      	movs	r3, #7
 8003168:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800316e:	4619      	mov	r1, r3
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <HAL_UART_MspInit+0x88>)
 8003172:	f000 fdf3 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3770      	adds	r7, #112	; 0x70
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40013800 	.word	0x40013800
 8003184:	48000400 	.word	0x48000400

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800318c:	e7fe      	b.n	800318c <NMI_Handler+0x4>

0800318e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003192:	e7fe      	b.n	8003192 <HardFault_Handler+0x4>

08003194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <MemManage_Handler+0x4>

0800319a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800319e:	e7fe      	b.n	800319e <BusFault_Handler+0x4>

080031a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <UsageFault_Handler+0x4>

080031a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d4:	f000 f9d6 	bl	8003584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80031e0:	f7fe ff8c 	bl	80020fc <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <DMA1_Channel1_IRQHandler+0x10>)
 80031ee:	f000 fca2 	bl	8003b36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000b68 	.word	0x20000b68

080031fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <DMA1_Channel2_IRQHandler+0x10>)
 8003202:	f000 fc98 	bl	8003b36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000bc8 	.word	0x20000bc8

08003210 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <I2C1_EV_IRQHandler+0x10>)
 8003216:	f001 fa0b 	bl	8004630 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000a18 	.word	0x20000a18

08003224 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <SPI1_IRQHandler+0x10>)
 800322a:	f004 fe5b 	bl	8007ee4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000b04 	.word	0x20000b04

08003238 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800323c:	f008 fd3c 	bl	800bcb8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003248:	f008 fd6e 	bl	800bd28 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003254:	f000 ff0a 	bl	800406c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <LPTIM1_IRQHandler+0x10>)
 8003262:	f001 ff71 	bl	8005148 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000aa8 	.word	0x20000aa8

08003270 <_read>:
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e00a      	b.n	8003298 <_read+0x28>
 8003282:	f3af 8000 	nop.w
 8003286:	4601      	mov	r1, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	b2ca      	uxtb	r2, r1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	dbf0      	blt.n	8003282 <_read+0x12>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_write>:
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e009      	b.n	80032d0 <_write+0x26>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	60ba      	str	r2, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd11 	bl	8002cec <__io_putchar>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	3301      	adds	r3, #1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbf1      	blt.n	80032bc <_write+0x12>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_close>:
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <_fstat>:
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	2300      	movs	r3, #0
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_isatty>:
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	2301      	movs	r3, #1
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <_lseek>:
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	2300      	movs	r3, #0
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <_sbrk>:
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <_sbrk+0x5c>)
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <_sbrk+0x60>)
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <_sbrk+0x22>
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <_sbrk+0x64>)
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <_sbrk+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <_sbrk+0x40>
 800337c:	f009 f860 	bl	800c440 <__errno>
 8003380:	4603      	mov	r3, r0
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338a:	e009      	b.n	80033a0 <_sbrk+0x54>
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <_sbrk+0x64>)
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20030000 	.word	0x20030000
 80033ac:	00000400 	.word	0x00000400
 80033b0:	200010cc 	.word	0x200010cc
 80033b4:	20001290 	.word	0x20001290

080033b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <SystemInit+0x98>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	4a23      	ldr	r2, [pc, #140]	; (8003450 <SystemInit+0x98>)
 80033c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80033e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <SystemInit+0x9c>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003402:	f023 0305 	bic.w	r3, r3, #5
 8003406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800341e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003422:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <SystemInit+0xa0>)
 8003424:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <SystemInit+0xa0>)
 800342c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800343e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	faf6fefb 	.word	0xfaf6fefb
 8003458:	22041000 	.word	0x22041000

0800345c <CopyDataInit>:
 800345c:	58d4      	ldr	r4, [r2, r3]
 800345e:	50c4      	str	r4, [r0, r3]
 8003460:	3304      	adds	r3, #4

08003462 <LoopCopyDataInit>:
 8003462:	18c4      	adds	r4, r0, r3
 8003464:	428c      	cmp	r4, r1
 8003466:	d3f9      	bcc.n	800345c <CopyDataInit>
 8003468:	4770      	bx	lr

0800346a <FillZerobss>:
 800346a:	6003      	str	r3, [r0, #0]
 800346c:	3004      	adds	r0, #4

0800346e <LoopFillZerobss>:
 800346e:	4288      	cmp	r0, r1
 8003470:	d3fb      	bcc.n	800346a <FillZerobss>
 8003472:	4770      	bx	lr

08003474 <Reset_Handler>:
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <LoopForever+0x2>)
 8003476:	4685      	mov	sp, r0
 8003478:	f7ff ff9e 	bl	80033b8 <SystemInit>
 800347c:	480b      	ldr	r0, [pc, #44]	; (80034ac <LoopForever+0x6>)
 800347e:	490c      	ldr	r1, [pc, #48]	; (80034b0 <LoopForever+0xa>)
 8003480:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <LoopForever+0xe>)
 8003482:	2300      	movs	r3, #0
 8003484:	f7ff ffed 	bl	8003462 <LoopCopyDataInit>
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <LoopForever+0x12>)
 800348a:	490c      	ldr	r1, [pc, #48]	; (80034bc <LoopForever+0x16>)
 800348c:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <LoopForever+0x1a>)
 800348e:	2300      	movs	r3, #0
 8003490:	f7ff ffe7 	bl	8003462 <LoopCopyDataInit>
 8003494:	480b      	ldr	r0, [pc, #44]	; (80034c4 <LoopForever+0x1e>)
 8003496:	490c      	ldr	r1, [pc, #48]	; (80034c8 <LoopForever+0x22>)
 8003498:	2300      	movs	r3, #0
 800349a:	f7ff ffe8 	bl	800346e <LoopFillZerobss>
 800349e:	f008 ffd5 	bl	800c44c <__libc_init_array>
 80034a2:	f7ff f92d 	bl	8002700 <main>

080034a6 <LoopForever>:
 80034a6:	e7fe      	b.n	80034a6 <LoopForever>
 80034a8:	20030000 	.word	0x20030000
 80034ac:	20000008 	.word	0x20000008
 80034b0:	2000008c 	.word	0x2000008c
 80034b4:	0800d9c4 	.word	0x0800d9c4
 80034b8:	200301e3 	.word	0x200301e3
 80034bc:	200301e3 	.word	0x200301e3
 80034c0:	0800e311 	.word	0x0800e311
 80034c4:	2000095c 	.word	0x2000095c
 80034c8:	20001290 	.word	0x20001290

080034cc <ADC1_IRQHandler>:
 80034cc:	e7fe      	b.n	80034cc <ADC1_IRQHandler>
	...

080034d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_Init+0x3c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_Init+0x3c>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e6:	2003      	movs	r0, #3
 80034e8:	f000 f9b4 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ec:	2000      	movs	r0, #0
 80034ee:	f000 f80f 	bl	8003510 <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	e001      	b.n	8003502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034fe:	f7ff fc81 	bl	8002e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003502:	79fb      	ldrb	r3, [r7, #7]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	58004000 	.word	0x58004000

08003510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <HAL_InitTick+0x6c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d024      	beq.n	800356e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003524:	f003 f8b6 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_InitTick+0x6c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003534:	fbb3 f3f1 	udiv	r3, r3, r1
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f9ca 	bl	80038d6 <HAL_SYSTICK_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10f      	bne.n	8003568 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d809      	bhi.n	8003562 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800354e:	2200      	movs	r2, #0
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003556:	f000 f988 	bl	800386a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_InitTick+0x70>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e007      	b.n	8003572 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e004      	b.n	8003572 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e001      	b.n	8003572 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000010 	.word	0x20000010
 8003580:	2000000c 	.word	0x2000000c

08003584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_IncTick+0x20>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_IncTick+0x24>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4413      	add	r3, r2
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <HAL_IncTick+0x24>)
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000010 	.word	0x20000010
 80035a8:	200010d0 	.word	0x200010d0

080035ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return uwTick;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_GetTick+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	200010d0 	.word	0x200010d0

080035c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_GetTickPrio+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	2000000c 	.word	0x2000000c

080035dc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_GetTickFreq+0x14>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000010 	.word	0x20000010

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <__NVIC_EnableIRQ+0x38>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db12      	blt.n	80036cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	490a      	ldr	r1, [pc, #40]	; (80036d8 <__NVIC_DisableIRQ+0x44>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	3320      	adds	r3, #32
 80036bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036c0:	f3bf 8f4f 	dsb	sy
}
 80036c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036c6:	f3bf 8f6f 	isb	sy
}
 80036ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000e100 	.word	0xe000e100

080036dc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db0c      	blt.n	8003708 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <__NVIC_SetPendingIRQ+0x38>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2001      	movs	r0, #1
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003702:	3340      	adds	r3, #64	; 0x40
 8003704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0c      	blt.n	8003744 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <__NVIC_ClearPendingIRQ+0x38>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	3360      	adds	r3, #96	; 0x60
 8003740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003820:	d301      	bcc.n	8003826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2301      	movs	r3, #1
 8003824:	e00f      	b.n	8003846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <SysTick_Config+0x40>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382e:	210f      	movs	r1, #15
 8003830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003834:	f7ff ff8e 	bl	8003754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SysTick_Config+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <SysTick_Config+0x40>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010

08003854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fec9 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff fee0 	bl	800363c <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff90 	bl	80037a8 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5f 	bl	8003754 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fed3 	bl	8003658 <__NVIC_EnableIRQ>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	4603      	mov	r3, r0
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fee3 	bl	8003694 <__NVIC_DisableIRQ>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff96 	bl	8003810 <SysTick_Config>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff feed 	bl	80036dc <__NVIC_SetPendingIRQ>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fefd 	bl	8003718 <__NVIC_ClearPendingIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e08e      	b.n	8003a58 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_DMA_Init+0x138>)
 8003942:	429a      	cmp	r2, r3
 8003944:	d80f      	bhi.n	8003966 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <HAL_DMA_Init+0x13c>)
 800394e:	4413      	add	r3, r2
 8003950:	4a45      	ldr	r2, [pc, #276]	; (8003a68 <HAL_DMA_Init+0x140>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	009a      	lsls	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a42      	ldr	r2, [pc, #264]	; (8003a6c <HAL_DMA_Init+0x144>)
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
 8003964:	e00e      	b.n	8003984 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <HAL_DMA_Init+0x148>)
 800396e:	4413      	add	r3, r2
 8003970:	4a3d      	ldr	r2, [pc, #244]	; (8003a68 <HAL_DMA_Init+0x140>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <HAL_DMA_Init+0x14c>)
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f95c 	bl	8003c94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e4:	d102      	bne.n	80039ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a02:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_DMA_Init+0x106>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d80c      	bhi.n	8003a2e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f97b 	bl	8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	e008      	b.n	8003a40 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40020407 	.word	0x40020407
 8003a64:	bffdfff8 	.word	0xbffdfff8
 8003a68:	cccccccd 	.word	0xcccccccd
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	bffdfbf8 	.word	0xbffdfbf8
 8003a74:	40020400 	.word	0x40020400

08003a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d005      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e047      	b.n	8003b2c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 021c 	and.w	r2, r3, #28
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ae8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
    }
  }
  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f003 031c 	and.w	r3, r3, #28
 8003b56:	2204      	movs	r2, #4
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d026      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x7a>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d021      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0204 	bic.w	r2, r2, #4
 8003b88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f003 021c 	and.w	r2, r3, #28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2104      	movs	r1, #4
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d071      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003bae:	e06c      	b.n	8003c8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f003 031c 	and.w	r3, r3, #28
 8003bb8:	2202      	movs	r2, #2
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02e      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xec>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d029      	beq.n	8003c22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 020a 	bic.w	r2, r2, #10
 8003bea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f003 021c 	and.w	r2, r3, #28
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2102      	movs	r1, #2
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d038      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c20:	e033      	b.n	8003c8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f003 031c 	and.w	r3, r3, #28
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d02a      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x156>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d025      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020e 	bic.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f003 021c 	and.w	r2, r3, #28
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
}
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d80a      	bhi.n	8003cbe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cb4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6493      	str	r3, [r2, #72]	; 0x48
 8003cbc:	e007      	b.n	8003cce <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	009a      	lsls	r2, r3, #2
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	3b08      	subs	r3, #8
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ce4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40020407 	.word	0x40020407
 8003d04:	4002081c 	.word	0x4002081c
 8003d08:	cccccccd 	.word	0xcccccccd
 8003d0c:	40020880 	.word	0x40020880

08003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d20:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2201      	movs	r2, #1
 8003d40:	409a      	lsls	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	1000823f 	.word	0x1000823f
 8003d58:	40020940 	.word	0x40020940

08003d5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6a:	e14c      	b.n	8004006 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2101      	movs	r1, #1
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 813e 	beq.w	8004000 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d005      	beq.n	8003d9c <HAL_GPIO_Init+0x40>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d130      	bne.n	8003dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 0201 	and.w	r2, r3, #1
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d017      	beq.n	8003e3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	2203      	movs	r2, #3
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d123      	bne.n	8003e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	08da      	lsrs	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3208      	adds	r2, #8
 8003e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	08da      	lsrs	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3208      	adds	r2, #8
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	2203      	movs	r2, #3
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0203 	and.w	r2, r3, #3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8098 	beq.w	8004000 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed0:	4a54      	ldr	r2, [pc, #336]	; (8004024 <HAL_GPIO_Init+0x2c8>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003efa:	d019      	beq.n	8003f30 <HAL_GPIO_Init+0x1d4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a4a      	ldr	r2, [pc, #296]	; (8004028 <HAL_GPIO_Init+0x2cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_GPIO_Init+0x1d0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a49      	ldr	r2, [pc, #292]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00d      	beq.n	8003f28 <HAL_GPIO_Init+0x1cc>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a48      	ldr	r2, [pc, #288]	; (8004030 <HAL_GPIO_Init+0x2d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <HAL_GPIO_Init+0x1c8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a47      	ldr	r2, [pc, #284]	; (8004034 <HAL_GPIO_Init+0x2d8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_GPIO_Init+0x1c4>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	e008      	b.n	8003f32 <HAL_GPIO_Init+0x1d6>
 8003f20:	2307      	movs	r3, #7
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x1d6>
 8003f24:	2303      	movs	r3, #3
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_Init+0x1d6>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0x1d6>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_Init+0x1d6>
 8003f30:	2300      	movs	r3, #0
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f42:	4938      	ldr	r1, [pc, #224]	; (8004024 <HAL_GPIO_Init+0x2c8>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f74:	4a30      	ldr	r2, [pc, #192]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f9e:	4a26      	ldr	r2, [pc, #152]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fca:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3301      	adds	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f aeab 	bne.w	8003d6c <HAL_GPIO_Init+0x10>
  }
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40010000 	.word	0x40010000
 8004028:	48000400 	.word	0x48000400
 800402c:	48000800 	.word	0x48000800
 8004030:	48000c00 	.word	0x48000c00
 8004034:	48001000 	.word	0x48001000
 8004038:	58000800 	.word	0x58000800

0800403c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
 8004048:	4613      	mov	r3, r2
 800404a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800404c:	787b      	ldrb	r3, [r7, #1]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004058:	e002      	b.n	8004060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_HSEM_IRQHandler+0x30>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_HSEM_IRQHandler+0x30>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	43db      	mvns	r3, r3
 8004080:	4906      	ldr	r1, [pc, #24]	; (800409c <HAL_HSEM_IRQHandler+0x30>)
 8004082:	4013      	ands	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <HAL_HSEM_IRQHandler+0x30>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f807 	bl	80040a0 <HAL_HSEM_FreeCallback>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	58001500 	.word	0x58001500

080040a0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e081      	b.n	80041ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fe fea2 	bl	8002e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	; 0x24
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0201 	bic.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004104:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004114:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	e006      	b.n	800413c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800413a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d104      	bne.n	800414e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800415c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004160:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004170:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69d9      	ldr	r1, [r3, #28]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	817b      	strh	r3, [r7, #10]
 80041e6:	460b      	mov	r3, r1
 80041e8:	813b      	strh	r3, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	f040 80f9 	bne.w	80043ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_I2C_Mem_Write+0x34>
 8004202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0ed      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Write+0x4e>
 800421e:	2302      	movs	r3, #2
 8004220:	e0e6      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800422a:	f7ff f9bf 	bl	80035ac <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2319      	movs	r3, #25
 8004236:	2201      	movs	r2, #1
 8004238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fadd 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0d1      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2221      	movs	r2, #33	; 0x21
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2240      	movs	r2, #64	; 0x40
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004274:	88f8      	ldrh	r0, [r7, #6]
 8004276:	893a      	ldrh	r2, [r7, #8]
 8004278:	8979      	ldrh	r1, [r7, #10]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4603      	mov	r3, r0
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f9ed 	bl	8004664 <I2C_RequestMemoryWrite>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0a9      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2bff      	cmp	r3, #255	; 0xff
 80042a4:	d90e      	bls.n	80042c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	22ff      	movs	r2, #255	; 0xff
 80042aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	8979      	ldrh	r1, [r7, #10]
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fc57 	bl	8004b70 <I2C_TransferConfig>
 80042c2:	e00f      	b.n	80042e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fc46 	bl	8004b70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fad6 	bl	800489a <I2C_WaitOnTXISFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e07b      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d034      	beq.n	800439c <HAL_I2C_Mem_Write+0x1c8>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	2b00      	cmp	r3, #0
 8004338:	d130      	bne.n	800439c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fa59 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e04d      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2bff      	cmp	r3, #255	; 0xff
 800435c:	d90e      	bls.n	800437c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	22ff      	movs	r2, #255	; 0xff
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	b2da      	uxtb	r2, r3
 800436a:	8979      	ldrh	r1, [r7, #10]
 800436c:	2300      	movs	r3, #0
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fbfb 	bl	8004b70 <I2C_TransferConfig>
 800437a:	e00f      	b.n	800439c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	b2da      	uxtb	r2, r3
 800438c:	8979      	ldrh	r1, [r7, #10]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fbea 	bl	8004b70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d19e      	bne.n	80042e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fabc 	bl	8004928 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01a      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2220      	movs	r2, #32
 80043c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_I2C_Mem_Write+0x224>)
 80043ce:	400b      	ands	r3, r1
 80043d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
  }
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	fe00e800 	.word	0xfe00e800

080043fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4603      	mov	r3, r0
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	460b      	mov	r3, r1
 8004410:	813b      	strh	r3, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b20      	cmp	r3, #32
 8004420:	f040 80fd 	bne.w	800461e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_I2C_Mem_Read+0x34>
 800442a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0f1      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_I2C_Mem_Read+0x4e>
 8004446:	2302      	movs	r3, #2
 8004448:	e0ea      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004452:	f7ff f8ab 	bl	80035ac <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2319      	movs	r3, #25
 800445e:	2201      	movs	r2, #1
 8004460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f9c9 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0d5      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2222      	movs	r2, #34	; 0x22
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2240      	movs	r2, #64	; 0x40
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a3a      	ldr	r2, [r7, #32]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800449c:	88f8      	ldrh	r0, [r7, #6]
 800449e:	893a      	ldrh	r2, [r7, #8]
 80044a0:	8979      	ldrh	r1, [r7, #10]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4603      	mov	r3, r0
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f92d 	bl	800470c <I2C_RequestMemoryRead>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0ad      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2bff      	cmp	r3, #255	; 0xff
 80044cc:	d90e      	bls.n	80044ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	4b52      	ldr	r3, [pc, #328]	; (8004628 <HAL_I2C_Mem_Read+0x22c>)
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fb43 	bl	8004b70 <I2C_TransferConfig>
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	4b4a      	ldr	r3, [pc, #296]	; (8004628 <HAL_I2C_Mem_Read+0x22c>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fb32 	bl	8004b70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	2200      	movs	r2, #0
 8004514:	2104      	movs	r1, #4
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f970 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e07c      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d034      	beq.n	80045cc <HAL_I2C_Mem_Read+0x1d0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d130      	bne.n	80045cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f941 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04d      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d90e      	bls.n	80045ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fae3 	bl	8004b70 <I2C_TransferConfig>
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	2300      	movs	r3, #0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fad2 	bl	8004b70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d19a      	bne.n	800450c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f9a4 	bl	8004928 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e01a      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2220      	movs	r2, #32
 80045f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_I2C_Mem_Read+0x230>)
 80045fe:	400b      	ands	r3, r1
 8004600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	80002400 	.word	0x80002400
 800462c:	fe00e800 	.word	0xfe00e800

08004630 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
  }
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	461a      	mov	r2, r3
 8004672:	4603      	mov	r3, r0
 8004674:	817b      	strh	r3, [r7, #10]
 8004676:	460b      	mov	r3, r1
 8004678:	813b      	strh	r3, [r7, #8]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	8979      	ldrh	r1, [r7, #10]
 8004684:	4b20      	ldr	r3, [pc, #128]	; (8004708 <I2C_RequestMemoryWrite+0xa4>)
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fa6f 	bl	8004b70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8ff 	bl	800489a <I2C_WaitOnTXISFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e02c      	b.n	8004700 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046ac:	893b      	ldrh	r3, [r7, #8]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
 80046b6:	e015      	b.n	80046e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f8e5 	bl	800489a <I2C_WaitOnTXISFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e012      	b.n	8004700 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046da:	893b      	ldrh	r3, [r7, #8]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f884 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	80002000 	.word	0x80002000

0800470c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	461a      	mov	r2, r3
 800471a:	4603      	mov	r3, r0
 800471c:	817b      	strh	r3, [r7, #10]
 800471e:	460b      	mov	r3, r1
 8004720:	813b      	strh	r3, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	8979      	ldrh	r1, [r7, #10]
 800472c:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <I2C_RequestMemoryRead+0xa4>)
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2300      	movs	r3, #0
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fa1c 	bl	8004b70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	69b9      	ldr	r1, [r7, #24]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f8ac 	bl	800489a <I2C_WaitOnTXISFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e02c      	b.n	80047a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004752:	893b      	ldrh	r3, [r7, #8]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
 800475c:	e015      	b.n	800478a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800475e:	893b      	ldrh	r3, [r7, #8]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	b29b      	uxth	r3, r3
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f892 	bl	800489a <I2C_WaitOnTXISFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e012      	b.n	80047a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004780:	893b      	ldrh	r3, [r7, #8]
 8004782:	b2da      	uxtb	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2200      	movs	r2, #0
 8004792:	2140      	movs	r1, #64	; 0x40
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f831 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	80002000 	.word	0x80002000

080047b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d103      	bne.n	80047d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d007      	beq.n	80047f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	619a      	str	r2, [r3, #24]
  }
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800480c:	e031      	b.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004814:	d02d      	beq.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fe fec9 	bl	80035ac <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d122      	bne.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	429a      	cmp	r2, r3
 8004848:	d113      	bne.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e00f      	b.n	8004892 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4013      	ands	r3, r2
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	429a      	cmp	r2, r3
 800488e:	d0be      	beq.n	800480e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048a6:	e033      	b.n	8004910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f87f 	bl	80049b0 <I2C_IsErrorOccurred>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e031      	b.n	8004920 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c2:	d025      	beq.n	8004910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c4:	f7fe fe72 	bl	80035ac <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11a      	bne.n	8004910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d013      	beq.n	8004910 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e007      	b.n	8004920 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d1c4      	bne.n	80048a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004934:	e02f      	b.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f838 	bl	80049b0 <I2C_IsErrorOccurred>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e02d      	b.n	80049a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494a:	f7fe fe2f 	bl	80035ac <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11a      	bne.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d013      	beq.n	8004996 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e007      	b.n	80049a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d1c8      	bne.n	8004936 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d068      	beq.n	8004aae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2210      	movs	r2, #16
 80049e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049e4:	e049      	b.n	8004a7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d045      	beq.n	8004a7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe fddd 	bl	80035ac <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_IsErrorOccurred+0x54>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d13a      	bne.n	8004a7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a26:	d121      	bne.n	8004a6c <I2C_IsErrorOccurred+0xbc>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2e:	d01d      	beq.n	8004a6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d01a      	beq.n	8004a6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a46:	f7fe fdb1 	bl	80035ac <HAL_GetTick>
 8004a4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a4c:	e00e      	b.n	8004a6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a4e:	f7fe fdad 	bl	80035ac <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b19      	cmp	r3, #25
 8004a5a:	d907      	bls.n	8004a6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f043 0320 	orr.w	r3, r3, #32
 8004a62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004a6a:	e006      	b.n	8004a7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d1e9      	bne.n	8004a4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d003      	beq.n	8004a90 <I2C_IsErrorOccurred+0xe0>
 8004a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0aa      	beq.n	80049e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f043 0304 	orr.w	r3, r3, #4
 8004aa6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	f043 0308 	orr.w	r3, r3, #8
 8004ae8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	f043 0302 	orr.w	r3, r3, #2
 8004b0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01c      	beq.n	8004b5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff fe45 	bl	80047b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <I2C_IsErrorOccurred+0x1bc>)
 8004b36:	400b      	ands	r3, r1
 8004b38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3728      	adds	r7, #40	; 0x28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	fe00e800 	.word	0xfe00e800

08004b70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b82:	897b      	ldrh	r3, [r7, #10]
 8004b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b88:	7a7b      	ldrb	r3, [r7, #9]
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	0d5b      	lsrs	r3, r3, #21
 8004baa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <I2C_TransferConfig+0x60>)
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	ea02 0103 	and.w	r1, r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	03ff63ff 	.word	0x03ff63ff

08004bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d138      	bne.n	8004c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e032      	b.n	8004c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d139      	bne.n	8004cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e033      	b.n	8004cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01e      	beq.n	8004d54 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004d16:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_IPCC_Init+0x60>)
 8004d18:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fe f8cc 	bl	8002ec4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f000 f85b 	bl	8004de8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f82c 	bl	8004d9c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004d52:	e001      	b.n	8004d58 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	58000c00 	.word	0x58000c00

08004d68 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	4613      	mov	r3, r2
 8004d74:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e00f      	b.n	8004dca <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <IPCC_SetDefaultCallbacks+0x44>)
 8004db4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3306      	adds	r3, #6
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <IPCC_SetDefaultCallbacks+0x48>)
 8004dc2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b05      	cmp	r3, #5
 8004dce:	d9ec      	bls.n	8004daa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	08004d69 	.word	0x08004d69
 8004de4:	08004d83 	.word	0x08004d83

08004de8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	223f      	movs	r2, #63	; 0x3f
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_SetLPTIMClockSource>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0c1b      	lsrs	r3, r3, #16
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	43db      	mvns	r3, r3
 8004e28:	401a      	ands	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <LL_RCC_GetLPTIMClockSource>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4013      	ands	r3, r2
 8004e58:	0c1a      	lsrs	r2, r3, #16
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4313      	orrs	r3, r2
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_APB1_GRP1_ForceReset>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <LL_APB1_GRP2_ForceReset>:
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_APB1_GRP1_ReleaseReset>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec8:	4013      	ands	r3, r2
 8004eca:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <LL_APB1_GRP2_ReleaseReset>:
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eee:	4013      	ands	r3, r2
 8004ef0:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e08f      	b.n	8005032 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fd ffed 	bl	8002f0c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d004      	beq.n	8004f54 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f52:	d103      	bne.n	8004f5c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 031e 	bic.w	r3, r3, #30
 8004f5a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d005      	beq.n	8004f74 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4b31      	ldr	r3, [pc, #196]	; (800503c <HAL_LPTIM_Init+0x13c>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f84:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004f8a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004f90:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004f96:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d107      	bne.n	8004fb6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d004      	beq.n	8004fc8 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc6:	d107      	bne.n	8004fd8 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00a      	beq.n	8004ffa <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004fec:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004ff2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <HAL_LPTIM_Init+0x140>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d108      	bne.n	800501e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	621a      	str	r2, [r3, #32]
 800501c:	e004      	b.n	8005028 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005026:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	ff19f1fe 	.word	0xff19f1fe
 8005040:	40007c00 	.word	0x40007c00

08005044 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a38      	ldr	r2, [pc, #224]	; (8005140 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005068:	4a36      	ldr	r2, [pc, #216]	; (8005144 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 800506a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005072:	e007      	b.n	8005084 <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8005074:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507a:	4a32      	ldr	r2, [pc, #200]	; (8005144 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 800507c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2210      	movs	r2, #16
 80050aa:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80050b4:	2110      	movs	r1, #16
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f92c 	bl	8005314 <LPTIM_WaitForFlag>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d101      	bne.n	80050c6 <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e038      	b.n	8005138 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2208      	movs	r2, #8
 80050cc:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80050d6:	2108      	movs	r1, #8
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f91b 	bl	8005314 <LPTIM_WaitForFlag>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d101      	bne.n	80050e8 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e027      	b.n	8005138 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f943 	bl	8005374 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f901 	bl	80052f6 <HAL_LPTIM_GetState>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d101      	bne.n	80050fe <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e01c      	b.n	8005138 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0204 	orr.w	r2, r2, #4
 800512c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40007c00 	.word	0x40007c00
 8005144:	58000800 	.word	0x58000800

08005148 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10d      	bne.n	800517a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2201      	movs	r2, #1
 8005172:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fd fda9 	bl	8002ccc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d10d      	bne.n	80051a4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d106      	bne.n	80051a4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2202      	movs	r2, #2
 800519c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f86d 	bl	800527e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d10d      	bne.n	80051ce <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d106      	bne.n	80051ce <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2204      	movs	r2, #4
 80051c6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f862 	bl	8005292 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d10d      	bne.n	80051f8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d106      	bne.n	80051f8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2208      	movs	r2, #8
 80051f0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f857 	bl	80052a6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b10      	cmp	r3, #16
 8005204:	d10d      	bne.n	8005222 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b10      	cmp	r3, #16
 8005212:	d106      	bne.n	8005222 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2210      	movs	r2, #16
 800521a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f84c 	bl	80052ba <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b20      	cmp	r3, #32
 800522e:	d10d      	bne.n	800524c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	d106      	bne.n	800524c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2220      	movs	r2, #32
 8005244:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f841 	bl	80052ce <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d10d      	bne.n	8005276 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d106      	bne.n	8005276 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f836 	bl	80052e2 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005304:	b2db      	uxtb	r3, r3
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <LPTIM_WaitForFlag+0x58>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <LPTIM_WaitForFlag+0x5c>)
 8005328:	fba2 2303 	umull	r2, r3, r2, r3
 800532c:	0b9b      	lsrs	r3, r3, #14
 800532e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	4013      	ands	r3, r2
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d002      	beq.n	800535e <LPTIM_WaitForFlag+0x4a>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ec      	bne.n	8005338 <LPTIM_WaitForFlag+0x24>

  return result;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20000008 	.word	0x20000008
 8005370:	d1b71759 	.word	0xd1b71759

08005374 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	; 0x30
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	60fb      	str	r3, [r7, #12]
  return(result);
 8005386:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
 800538a:	2301      	movs	r3, #1
 800538c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a62      	ldr	r2, [pc, #392]	; (8005524 <LPTIM_Disable+0x1b0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <LPTIM_Disable+0x34>
 80053a0:	4a61      	ldr	r2, [pc, #388]	; (8005528 <LPTIM_Disable+0x1b4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d006      	beq.n	80053b4 <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80053a6:	e00b      	b.n	80053c0 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80053a8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80053ac:	f7ff fd4a 	bl	8004e44 <LL_RCC_GetLPTIMClockSource>
 80053b0:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80053b2:	e005      	b.n	80053c0 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80053b4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80053b8:	f7ff fd44 	bl	8004e44 <LL_RCC_GetLPTIMClockSource>
 80053bc:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80053be:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a4d      	ldr	r2, [pc, #308]	; (8005524 <LPTIM_Disable+0x1b0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <LPTIM_Disable+0x86>
 80053f2:	4a4d      	ldr	r2, [pc, #308]	; (8005528 <LPTIM_Disable+0x1b4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80053f8:	e00f      	b.n	800541a <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80053fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80053fe:	f7ff fd34 	bl	8004e6a <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005402:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005406:	f7ff fd54 	bl	8004eb2 <LL_APB1_GRP1_ReleaseReset>
      break;
 800540a:	e006      	b.n	800541a <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800540c:	2020      	movs	r0, #32
 800540e:	f7ff fd3e 	bl	8004e8e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005412:	2020      	movs	r0, #32
 8005414:	f7ff fd60 	bl	8004ed8 <LL_APB1_GRP2_ReleaseReset>
      break;
 8005418:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <LPTIM_Disable+0xb2>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d05f      	beq.n	80054e6 <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3e      	ldr	r2, [pc, #248]	; (8005524 <LPTIM_Disable+0x1b0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <LPTIM_Disable+0xc4>
 8005430:	4a3d      	ldr	r2, [pc, #244]	; (8005528 <LPTIM_Disable+0x1b4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d005      	beq.n	8005442 <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005436:	e009      	b.n	800544c <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005438:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800543c:	f7ff fce8 	bl	8004e10 <LL_RCC_SetLPTIMClockSource>
        break;
 8005440:	e004      	b.n	800544c <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8005442:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005446:	f7ff fce3 	bl	8004e10 <LL_RCC_SetLPTIMClockSource>
        break;
 800544a:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800546a:	2108      	movs	r1, #8
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ff51 	bl	8005314 <LPTIM_WaitForFlag>
 8005472:	4603      	mov	r3, r0
 8005474:	2b03      	cmp	r3, #3
 8005476:	d103      	bne.n	8005480 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2203      	movs	r2, #3
 800547c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2208      	movs	r2, #8
 8005486:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01a      	beq.n	80054c4 <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80054a6:	2110      	movs	r1, #16
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff33 	bl	8005314 <LPTIM_WaitForFlag>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d103      	bne.n	80054bc <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2203      	movs	r2, #3
 80054b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2210      	movs	r2, #16
 80054c2:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <LPTIM_Disable+0x1b0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <LPTIM_Disable+0x162>
 80054ce:	4a16      	ldr	r2, [pc, #88]	; (8005528 <LPTIM_Disable+0x1b4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80054d4:	e008      	b.n	80054e8 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80054d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054d8:	f7ff fc9a 	bl	8004e10 <LL_RCC_SetLPTIMClockSource>
        break;
 80054dc:	e004      	b.n	80054e8 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80054de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e0:	f7ff fc96 	bl	8004e10 <LL_RCC_SetLPTIMClockSource>
        break;
 80054e4:	e000      	b.n	80054e8 <LPTIM_Disable+0x174>
    }
  }
 80054e6:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f383 8810 	msr	PRIMASK, r3
}
 800551a:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800551c:	bf00      	nop
 800551e:	3730      	adds	r7, #48	; 0x30
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40007c00 	.word	0x40007c00
 8005528:	40009400 	.word	0x40009400

0800552c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a04      	ldr	r2, [pc, #16]	; (8005548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	58000400 	.word	0x58000400

0800554c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <HAL_PWREx_GetVoltageRange+0x18>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	58000400 	.word	0x58000400

08005568 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557a:	d101      	bne.n	8005580 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_HSE_Enable>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559e:	6013      	str	r3, [r2, #0]
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_RCC_HSE_Disable>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055bc:	6013      	str	r3, [r2, #0]
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <LL_RCC_HSE_IsReady>:
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055da:	d101      	bne.n	80055e0 <LL_RCC_HSE_IsReady+0x18>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <LL_RCC_HSE_IsReady+0x1a>
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_RCC_HSI_Enable>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fe:	6013      	str	r3, [r2, #0]
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <LL_RCC_HSI_Disable>:
{
 800560a:	b480      	push	{r7}
 800560c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561c:	6013      	str	r3, [r2, #0]
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_RCC_HSI_IsReady>:
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800562c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563a:	d101      	bne.n	8005640 <LL_RCC_HSI_IsReady+0x18>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <LL_RCC_HSI_IsReady+0x1a>
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <LL_RCC_HSI_SetCalibTrimming>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005666:	4313      	orrs	r3, r2
 8005668:	604b      	str	r3, [r1, #4]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_RCC_HSI48_Enable>:
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_RCC_HSI48_Disable>:
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_RCC_HSI48_IsReady>:
{
 80056ba:	b480      	push	{r7}
 80056bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80056be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d101      	bne.n	80056d2 <LL_RCC_HSI48_IsReady+0x18>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <LL_RCC_HSI48_IsReady+0x1a>
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <LL_RCC_LSE_Enable>:
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056f6:	bf00      	nop
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_RCC_LSE_Disable>:
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_RCC_LSE_EnableBypass>:
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005732:	f043 0304 	orr.w	r3, r3, #4
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <LL_RCC_LSE_DisableBypass>:
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005754:	f023 0304 	bic.w	r3, r3, #4
 8005758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <LL_RCC_LSE_IsReady>:
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800576a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d101      	bne.n	800577e <LL_RCC_LSE_IsReady+0x18>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <LL_RCC_LSE_IsReady+0x1a>
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_RCC_LSI1_Enable>:
{
 800578a:	b480      	push	{r7}
 800578c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057a2:	bf00      	nop
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_RCC_LSI1_Disable>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80057b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057bc:	f023 0301 	bic.w	r3, r3, #1
 80057c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <LL_RCC_LSI1_IsReady>:
{
 80057ce:	b480      	push	{r7}
 80057d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80057d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d101      	bne.n	80057e6 <LL_RCC_LSI1_IsReady+0x18>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <LL_RCC_LSI1_IsReady+0x1a>
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <LL_RCC_LSI2_Enable>:
{
 80057f2:	b480      	push	{r7}
 80057f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005802:	f043 0304 	orr.w	r3, r3, #4
 8005806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <LL_RCC_LSI2_Disable>:
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005824:	f023 0304 	bic.w	r3, r3, #4
 8005828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800582c:	bf00      	nop
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <LL_RCC_LSI2_IsReady>:
{
 8005836:	b480      	push	{r7}
 8005838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	d101      	bne.n	800584e <LL_RCC_LSI2_IsReady+0x18>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_RCC_LSI2_IsReady+0x1a>
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <LL_RCC_LSI2_SetTrimming>:
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_MSI_Enable>:
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6013      	str	r3, [r2, #0]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <LL_RCC_MSI_Disable>:
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	6013      	str	r3, [r2, #0]
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_MSI_IsReady>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d101      	bne.n	80058da <LL_RCC_MSI_IsReady+0x16>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <LL_RCC_MSI_IsReady+0x18>
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_RCC_MSI_SetRange>:
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80058ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <LL_RCC_MSI_GetRange>:
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2bb0      	cmp	r3, #176	; 0xb0
 8005924:	d901      	bls.n	800592a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005926:	23b0      	movs	r3, #176	; 0xb0
 8005928:	607b      	str	r3, [r7, #4]
  return msiRange;
 800592a:	687b      	ldr	r3, [r7, #4]
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005952:	4313      	orrs	r3, r2
 8005954:	604b      	str	r3, [r1, #4]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_RCC_SetSysClkSource>:
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 0203 	bic.w	r2, r3, #3
 8005974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <LL_RCC_GetSysClkSource>:
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 030c 	and.w	r3, r3, #12
}
 8005998:	4618      	mov	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <LL_RCC_SetAHBPrescaler>:
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_C2_RCC_SetAHBPrescaler>:
{
 80059ca:	b480      	push	{r7}
 80059cc:	b083      	sub	sp, #12
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80059d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <LL_RCC_SetAHB4Prescaler>:
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a06:	f023 020f 	bic.w	r2, r3, #15
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_SetAPB1Prescaler>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <LL_RCC_SetAPB2Prescaler>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_RCC_GetAHBPrescaler>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <LL_RCC_GetAHB4Prescaler>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_RCC_GetAPB1Prescaler>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_RCC_GetAPB2Prescaler>:
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_PLL_Enable>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_PLL_Disable>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_RCC_PLL_IsReady>:
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b26:	d101      	bne.n	8005b2c <LL_RCC_PLL_IsReady+0x18>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <LL_RCC_PLL_IsReady+0x1a>
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <LL_RCC_PLL_GetN>:
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <LL_RCC_PLL_GetR>:
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_RCC_PLL_GetDivider>:
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <LL_RCC_PLL_GetMainSource>:
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <LL_RCC_IsActiveFlag_HPRE>:
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bac:	d101      	bne.n	8005bb2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd2:	d101      	bne.n	8005bd8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf8:	d101      	bne.n	8005bfe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1c:	d101      	bne.n	8005c22 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005c2e:	b480      	push	{r7}
 8005c30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c40:	d101      	bne.n	8005c46 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b08d      	sub	sp, #52	; 0x34
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e363      	b.n	800632e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 808d 	beq.w	8005d8e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c74:	f7ff fe89 	bl	800598a <LL_RCC_GetSysClkSource>
 8005c78:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c7a:	f7ff ff82 	bl	8005b82 <LL_RCC_PLL_GetMainSource>
 8005c7e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_RCC_OscConfig+0x3e>
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	d147      	bne.n	8005d1c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d144      	bne.n	8005d1c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e347      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ca2:	f7ff fe34 	bl	800590e <LL_RCC_MSI_GetRange>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	d914      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fd2f 	bl	8006714 <RCC_SetFlashLatencyFromMSIRange>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e336      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fe0e 	bl	80058e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fe32 	bl	8005938 <LL_RCC_MSI_SetCalibTrimming>
 8005cd4:	e013      	b.n	8005cfe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fe03 	bl	80058e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fe27 	bl	8005938 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fd10 	bl	8006714 <RCC_SetFlashLatencyFromMSIRange>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e317      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005cfe:	f000 fcc9 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4aa4      	ldr	r2, [pc, #656]	; (8005f98 <HAL_RCC_OscConfig+0x344>)
 8005d06:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d08:	4ba4      	ldr	r3, [pc, #656]	; (8005f9c <HAL_RCC_OscConfig+0x348>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fd fbff 	bl	8003510 <HAL_InitTick>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d039      	beq.n	8005d8c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e308      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01e      	beq.n	8005d62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d24:	f7ff fdb0 	bl	8005888 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d28:	f7fd fc40 	bl	80035ac <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d30:	f7fd fc3c 	bl	80035ac <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e2f5      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d42:	f7ff fdbf 	bl	80058c4 <LL_RCC_MSI_IsReady>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f1      	beq.n	8005d30 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fdc8 	bl	80058e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fdec 	bl	8005938 <LL_RCC_MSI_SetCalibTrimming>
 8005d60:	e015      	b.n	8005d8e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d62:	f7ff fda0 	bl	80058a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d66:	f7fd fc21 	bl	80035ac <HAL_GetTick>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d6e:	f7fd fc1d 	bl	80035ac <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e2d6      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d80:	f7ff fda0 	bl	80058c4 <LL_RCC_MSI_IsReady>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f1      	bne.n	8005d6e <HAL_RCC_OscConfig+0x11a>
 8005d8a:	e000      	b.n	8005d8e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d8c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d047      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9a:	f7ff fdf6 	bl	800598a <LL_RCC_GetSysClkSource>
 8005d9e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da0:	f7ff feef 	bl	8005b82 <LL_RCC_PLL_GetMainSource>
 8005da4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_OscConfig+0x164>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d108      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d134      	bne.n	8005e2a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e2b4      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d102      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x180>
 8005dce:	f7ff fbdd 	bl	800558c <LL_RCC_HSE_Enable>
 8005dd2:	e001      	b.n	8005dd8 <HAL_RCC_OscConfig+0x184>
 8005dd4:	f7ff fbe9 	bl	80055aa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d012      	beq.n	8005e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fd fbe4 	bl	80035ac <HAL_GetTick>
 8005de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fd fbe0 	bl	80035ac <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	; 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e299      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005dfa:	f7ff fbe5 	bl	80055c8 <LL_RCC_HSE_IsReady>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f1      	beq.n	8005de8 <HAL_RCC_OscConfig+0x194>
 8005e04:	e011      	b.n	8005e2a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7fd fbd1 	bl	80035ac <HAL_GetTick>
 8005e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e0e:	f7fd fbcd 	bl	80035ac <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b64      	cmp	r3, #100	; 0x64
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e286      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e20:	f7ff fbd2 	bl	80055c8 <LL_RCC_HSE_IsReady>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f1      	bne.n	8005e0e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d04c      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e36:	f7ff fda8 	bl	800598a <LL_RCC_GetSysClkSource>
 8005e3a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e3c:	f7ff fea1 	bl	8005b82 <LL_RCC_PLL_GetMainSource>
 8005e40:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_OscConfig+0x200>
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d10e      	bne.n	8005e6c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e266      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fbf1 	bl	800564c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e6a:	e031      	b.n	8005ed0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d019      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e74:	f7ff fbba 	bl	80055ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fd fb98 	bl	80035ac <HAL_GetTick>
 8005e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fd fb94 	bl	80035ac <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e24d      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e92:	f7ff fbc9 	bl	8005628 <LL_RCC_HSI_IsReady>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f1      	beq.n	8005e80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fbd3 	bl	800564c <LL_RCC_HSI_SetCalibTrimming>
 8005ea6:	e013      	b.n	8005ed0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea8:	f7ff fbaf 	bl	800560a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fd fb7e 	bl	80035ac <HAL_GetTick>
 8005eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fd fb7a 	bl	80035ac <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e233      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ec6:	f7ff fbaf 	bl	8005628 <LL_RCC_HSI_IsReady>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f1      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80a3 	beq.w	8006030 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d076      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d046      	beq.n	8005f8c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005efe:	f7ff fc66 	bl	80057ce <LL_RCC_LSI1_IsReady>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d113      	bne.n	8005f30 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005f08:	f7ff fc3f 	bl	800578a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f0c:	f7fd fb4e 	bl	80035ac <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f14:	f7fd fb4a 	bl	80035ac <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e203      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f26:	f7ff fc52 	bl	80057ce <LL_RCC_LSI1_IsReady>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f1      	beq.n	8005f14 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005f30:	f7ff fc5f 	bl	80057f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fd fb3a 	bl	80035ac <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f3c:	f7fd fb36 	bl	80035ac <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e1ef      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f4e:	f7ff fc72 	bl	8005836 <LL_RCC_LSI2_IsReady>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f1      	beq.n	8005f3c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fc7c 	bl	800585a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f62:	f7ff fc23 	bl	80057ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f66:	f7fd fb21 	bl	80035ac <HAL_GetTick>
 8005f6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f6e:	f7fd fb1d 	bl	80035ac <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e1d6      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f80:	f7ff fc25 	bl	80057ce <LL_RCC_LSI1_IsReady>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f1      	bne.n	8005f6e <HAL_RCC_OscConfig+0x31a>
 8005f8a:	e051      	b.n	8006030 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005f8c:	f7ff fbfd 	bl	800578a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fd fb0c 	bl	80035ac <HAL_GetTick>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005f96:	e00c      	b.n	8005fb2 <HAL_RCC_OscConfig+0x35e>
 8005f98:	20000008 	.word	0x20000008
 8005f9c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fa0:	f7fd fb04 	bl	80035ac <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e1bd      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fb2:	f7ff fc0c 	bl	80057ce <LL_RCC_LSI1_IsReady>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f1      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005fbc:	f7ff fc2a 	bl	8005814 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005fc2:	f7fd faf3 	bl	80035ac <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e1ac      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fd4:	f7ff fc2f 	bl	8005836 <LL_RCC_LSI2_IsReady>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f1      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005fde:	e027      	b.n	8006030 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005fe0:	f7ff fc18 	bl	8005814 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fd fae2 	bl	80035ac <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005fec:	f7fd fade 	bl	80035ac <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e197      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ffe:	f7ff fc1a 	bl	8005836 <LL_RCC_LSI2_IsReady>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f1      	bne.n	8005fec <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006008:	f7ff fbd0 	bl	80057ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600c:	f7fd face 	bl	80035ac <HAL_GetTick>
 8006010:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006014:	f7fd faca 	bl	80035ac <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e183      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006026:	f7ff fbd2 	bl	80057ce <LL_RCC_LSI1_IsReady>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f1      	bne.n	8006014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d05b      	beq.n	80060f4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800603c:	4ba7      	ldr	r3, [pc, #668]	; (80062dc <HAL_RCC_OscConfig+0x688>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d114      	bne.n	8006072 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006048:	f7ff fa70 	bl	800552c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800604c:	f7fd faae 	bl	80035ac <HAL_GetTick>
 8006050:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fd faaa 	bl	80035ac <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e163      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006066:	4b9d      	ldr	r3, [pc, #628]	; (80062dc <HAL_RCC_OscConfig+0x688>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d102      	bne.n	8006080 <HAL_RCC_OscConfig+0x42c>
 800607a:	f7ff fb30 	bl	80056de <LL_RCC_LSE_Enable>
 800607e:	e00c      	b.n	800609a <HAL_RCC_OscConfig+0x446>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b05      	cmp	r3, #5
 8006086:	d104      	bne.n	8006092 <HAL_RCC_OscConfig+0x43e>
 8006088:	f7ff fb4b 	bl	8005722 <LL_RCC_LSE_EnableBypass>
 800608c:	f7ff fb27 	bl	80056de <LL_RCC_LSE_Enable>
 8006090:	e003      	b.n	800609a <HAL_RCC_OscConfig+0x446>
 8006092:	f7ff fb35 	bl	8005700 <LL_RCC_LSE_Disable>
 8006096:	f7ff fb55 	bl	8005744 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d014      	beq.n	80060cc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fd fa83 	bl	80035ac <HAL_GetTick>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fd fa7f 	bl	80035ac <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e136      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060c0:	f7ff fb51 	bl	8005766 <LL_RCC_LSE_IsReady>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ef      	beq.n	80060aa <HAL_RCC_OscConfig+0x456>
 80060ca:	e013      	b.n	80060f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fd fa6e 	bl	80035ac <HAL_GetTick>
 80060d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d4:	f7fd fa6a 	bl	80035ac <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e121      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060ea:	f7ff fb3c 	bl	8005766 <LL_RCC_LSE_IsReady>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1ef      	bne.n	80060d4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02c      	beq.n	800615a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	2b00      	cmp	r3, #0
 8006106:	d014      	beq.n	8006132 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006108:	f7ff fab5 	bl	8005676 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610c:	f7fd fa4e 	bl	80035ac <HAL_GetTick>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006114:	f7fd fa4a 	bl	80035ac <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e103      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006126:	f7ff fac8 	bl	80056ba <LL_RCC_HSI48_IsReady>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f1      	beq.n	8006114 <HAL_RCC_OscConfig+0x4c0>
 8006130:	e013      	b.n	800615a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006132:	f7ff fab1 	bl	8005698 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006136:	f7fd fa39 	bl	80035ac <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800613e:	f7fd fa35 	bl	80035ac <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e0ee      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006150:	f7ff fab3 	bl	80056ba <LL_RCC_HSI48_IsReady>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f1      	bne.n	800613e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80e4 	beq.w	800632c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006164:	f7ff fc11 	bl	800598a <LL_RCC_GetSysClkSource>
 8006168:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	2b02      	cmp	r3, #2
 8006178:	f040 80b4 	bne.w	80062e4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0203 	and.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	429a      	cmp	r2, r3
 8006188:	d123      	bne.n	80061d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d11c      	bne.n	80061d2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d114      	bne.n	80061d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d10d      	bne.n	80061d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d106      	bne.n	80061d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d05d      	beq.n	800628e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b0c      	cmp	r3, #12
 80061d6:	d058      	beq.n	800628a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e0a1      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061ea:	f7ff fc84 	bl	8005af6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061ee:	f7fd f9dd 	bl	80035ac <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f6:	f7fd f9d9 	bl	80035ac <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e092      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ef      	bne.n	80061f6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	4b30      	ldr	r3, [pc, #192]	; (80062e0 <HAL_RCC_OscConfig+0x68c>)
 800621e:	4013      	ands	r3, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006228:	4311      	orrs	r1, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800622e:	0212      	lsls	r2, r2, #8
 8006230:	4311      	orrs	r1, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006236:	4311      	orrs	r1, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800623c:	4311      	orrs	r1, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006242:	430a      	orrs	r2, r1
 8006244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006248:	4313      	orrs	r3, r2
 800624a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800624c:	f7ff fc44 	bl	8005ad8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006260:	f7fd f9a4 	bl	80035ac <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006268:	f7fd f9a0 	bl	80035ac <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e059      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ef      	beq.n	8006268 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006288:	e050      	b.n	800632c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e04f      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d147      	bne.n	800632c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800629c:	f7ff fc1c 	bl	8005ad8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062b0:	f7fd f97c 	bl	80035ac <HAL_GetTick>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fd f978 	bl	80035ac <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e031      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ef      	beq.n	80062b8 <HAL_RCC_OscConfig+0x664>
 80062d8:	e028      	b.n	800632c <HAL_RCC_OscConfig+0x6d8>
 80062da:	bf00      	nop
 80062dc:	58000400 	.word	0x58000400
 80062e0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d01e      	beq.n	8006328 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ea:	f7ff fc04 	bl	8005af6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ee:	f7fd f95d 	bl	80035ac <HAL_GetTick>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fd f959 	bl	80035ac <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e012      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ef      	bne.n	80062f6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <HAL_RCC_OscConfig+0x6e4>)
 8006322:	4013      	ands	r3, r2
 8006324:	60cb      	str	r3, [r1, #12]
 8006326:	e001      	b.n	800632c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3734      	adds	r7, #52	; 0x34
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}
 8006336:	bf00      	nop
 8006338:	eefefffc 	.word	0xeefefffc

0800633c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e12d      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006350:	4b98      	ldr	r3, [pc, #608]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d91b      	bls.n	8006396 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b95      	ldr	r3, [pc, #596]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 0207 	bic.w	r2, r3, #7
 8006366:	4993      	ldr	r1, [pc, #588]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	4313      	orrs	r3, r2
 800636c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636e:	f7fd f91d 	bl	80035ac <HAL_GetTick>
 8006372:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006374:	e008      	b.n	8006388 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006376:	f7fd f919 	bl	80035ac <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e111      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006388:	4b8a      	ldr	r3, [pc, #552]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d1ef      	bne.n	8006376 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d016      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fafb 	bl	80059a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063ac:	f7fd f8fe 	bl	80035ac <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063b4:	f7fd f8fa 	bl	80035ac <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e0f2      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063c6:	f7ff fbe8 	bl	8005b9a <LL_RCC_IsActiveFlag_HPRE>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f1      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d016      	beq.n	800640a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff faf2 	bl	80059ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063e6:	f7fd f8e1 	bl	80035ac <HAL_GetTick>
 80063ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80063ec:	e008      	b.n	8006400 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063ee:	f7fd f8dd 	bl	80035ac <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0d5      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006400:	f7ff fbdd 	bl	8005bbe <LL_RCC_IsActiveFlag_C2HPRE>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f1      	beq.n	80063ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d016      	beq.n	8006444 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff faeb 	bl	80059f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006420:	f7fd f8c4 	bl	80035ac <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006426:	e008      	b.n	800643a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006428:	f7fd f8c0 	bl	80035ac <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e0b8      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800643a:	f7ff fbd3 	bl	8005be4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f1      	beq.n	8006428 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d016      	beq.n	800647e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fae5 	bl	8005a24 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800645a:	f7fd f8a7 	bl	80035ac <HAL_GetTick>
 800645e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006460:	e008      	b.n	8006474 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006462:	f7fd f8a3 	bl	80035ac <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e09b      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006474:	f7ff fbc9 	bl	8005c0a <LL_RCC_IsActiveFlag_PPRE1>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f1      	beq.n	8006462 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d017      	beq.n	80064ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fadb 	bl	8005a4c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006496:	f7fd f889 	bl	80035ac <HAL_GetTick>
 800649a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800649e:	f7fd f885 	bl	80035ac <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e07d      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064b0:	f7ff fbbd 	bl	8005c2e <LL_RCC_IsActiveFlag_PPRE2>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f1      	beq.n	800649e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d043      	beq.n	800654e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d106      	bne.n	80064dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80064ce:	f7ff f87b 	bl	80055c8 <LL_RCC_HSE_IsReady>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d11e      	bne.n	8006516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e067      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d106      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064e4:	f7ff fb16 	bl	8005b14 <LL_RCC_PLL_IsReady>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d113      	bne.n	8006516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e05c      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064fa:	f7ff f9e3 	bl	80058c4 <LL_RCC_MSI_IsReady>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d108      	bne.n	8006516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e051      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006508:	f7ff f88e 	bl	8005628 <LL_RCC_HSI_IsReady>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e04a      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fa21 	bl	8005962 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006520:	f7fd f844 	bl	80035ac <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006526:	e00a      	b.n	800653e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006528:	f7fd f840 	bl	80035ac <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	; 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e036      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	f7ff fa24 	bl	800598a <LL_RCC_GetSysClkSource>
 8006542:	4602      	mov	r2, r0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	429a      	cmp	r2, r3
 800654c:	d1ec      	bne.n	8006528 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800654e:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d21b      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f023 0207 	bic.w	r2, r3, #7
 8006564:	4913      	ldr	r1, [pc, #76]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	4313      	orrs	r3, r2
 800656a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656c:	f7fd f81e 	bl	80035ac <HAL_GetTick>
 8006570:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	e008      	b.n	8006586 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006574:	f7fd f81a 	bl	80035ac <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e012      	b.n	80065ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCC_ClockConfig+0x278>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d1ef      	bne.n	8006574 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006594:	f000 f87e 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 8006598:	4603      	mov	r3, r0
 800659a:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <HAL_RCC_ClockConfig+0x27c>)
 800659c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800659e:	f7fd f811 	bl	80035c4 <HAL_GetTickPrio>
 80065a2:	4603      	mov	r3, r0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fc ffb3 	bl	8003510 <HAL_InitTick>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	58004000 	.word	0x58004000
 80065b8:	20000008 	.word	0x20000008

080065bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c2:	f7ff f9e2 	bl	800598a <LL_RCC_GetSysClkSource>
 80065c6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80065ce:	f7ff f99e 	bl	800590e <LL_RCC_MSI_GetRange>
 80065d2:	4603      	mov	r3, r0
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	4a2b      	ldr	r2, [pc, #172]	; (8006688 <HAL_RCC_GetSysClockFreq+0xcc>)
 80065dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	e04b      	b.n	800667c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d102      	bne.n	80065f0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065ea:	4b28      	ldr	r3, [pc, #160]	; (800668c <HAL_RCC_GetSysClockFreq+0xd0>)
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e045      	b.n	800667c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d10a      	bne.n	800660c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065f6:	f7fe ffb7 	bl	8005568 <LL_RCC_HSE_IsEnabledDiv2>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d102      	bne.n	8006606 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006600:	4b22      	ldr	r3, [pc, #136]	; (800668c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e03a      	b.n	800667c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006606:	4b22      	ldr	r3, [pc, #136]	; (8006690 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e037      	b.n	800667c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800660c:	f7ff fab9 	bl	8005b82 <LL_RCC_PLL_GetMainSource>
 8006610:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d003      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0x64>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b03      	cmp	r3, #3
 800661c:	d003      	beq.n	8006626 <HAL_RCC_GetSysClockFreq+0x6a>
 800661e:	e00d      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006620:	4b1a      	ldr	r3, [pc, #104]	; (800668c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006622:	60bb      	str	r3, [r7, #8]
        break;
 8006624:	e015      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006626:	f7fe ff9f 	bl	8005568 <LL_RCC_HSE_IsEnabledDiv2>
 800662a:	4603      	mov	r3, r0
 800662c:	2b01      	cmp	r3, #1
 800662e:	d102      	bne.n	8006636 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006630:	4b16      	ldr	r3, [pc, #88]	; (800668c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006632:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006634:	e00d      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006638:	60bb      	str	r3, [r7, #8]
        break;
 800663a:	e00a      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800663c:	f7ff f967 	bl	800590e <LL_RCC_MSI_GetRange>
 8006640:	4603      	mov	r3, r0
 8006642:	091b      	lsrs	r3, r3, #4
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <HAL_RCC_GetSysClockFreq+0xcc>)
 800664a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664e:	60bb      	str	r3, [r7, #8]
        break;
 8006650:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006652:	f7ff fa71 	bl	8005b38 <LL_RCC_PLL_GetN>
 8006656:	4602      	mov	r2, r0
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	fb03 f402 	mul.w	r4, r3, r2
 800665e:	f7ff fa84 	bl	8005b6a <LL_RCC_PLL_GetDivider>
 8006662:	4603      	mov	r3, r0
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	3301      	adds	r3, #1
 8006668:	fbb4 f4f3 	udiv	r4, r4, r3
 800666c:	f7ff fa71 	bl	8005b52 <LL_RCC_PLL_GetR>
 8006670:	4603      	mov	r3, r0
 8006672:	0f5b      	lsrs	r3, r3, #29
 8006674:	3301      	adds	r3, #1
 8006676:	fbb4 f3f3 	udiv	r3, r4, r3
 800667a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	bd90      	pop	{r4, r7, pc}
 8006686:	bf00      	nop
 8006688:	0800d87c 	.word	0x0800d87c
 800668c:	00f42400 	.word	0x00f42400
 8006690:	01e84800 	.word	0x01e84800

08006694 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006694:	b598      	push	{r3, r4, r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006698:	f7ff ff90 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 800669c:	4604      	mov	r4, r0
 800669e:	f7ff f9e9 	bl	8005a74 <LL_RCC_GetAHBPrescaler>
 80066a2:	4603      	mov	r3, r0
 80066a4:	091b      	lsrs	r3, r3, #4
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	4a03      	ldr	r2, [pc, #12]	; (80066b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80066ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd98      	pop	{r3, r4, r7, pc}
 80066b8:	0800d81c 	.word	0x0800d81c

080066bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066bc:	b598      	push	{r3, r4, r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80066c0:	f7ff ffe8 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 80066c4:	4604      	mov	r4, r0
 80066c6:	f7ff f9ef 	bl	8005aa8 <LL_RCC_GetAPB1Prescaler>
 80066ca:	4603      	mov	r3, r0
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	bd98      	pop	{r3, r4, r7, pc}
 80066e4:	0800d85c 	.word	0x0800d85c

080066e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e8:	b598      	push	{r3, r4, r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80066ec:	f7ff ffd2 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 80066f0:	4604      	mov	r4, r0
 80066f2:	f7ff f9e5 	bl	8005ac0 <LL_RCC_GetAPB2Prescaler>
 80066f6:	4603      	mov	r3, r0
 80066f8:	0adb      	lsrs	r3, r3, #11
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	4a04      	ldr	r2, [pc, #16]	; (8006710 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	fa24 f303 	lsr.w	r3, r4, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd98      	pop	{r3, r4, r7, pc}
 8006710:	0800d85c 	.word	0x0800d85c

08006714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2bb0      	cmp	r3, #176	; 0xb0
 8006720:	d903      	bls.n	800672a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e007      	b.n	800673a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	091b      	lsrs	r3, r3, #4
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	4a11      	ldr	r2, [pc, #68]	; (8006778 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006738:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800673a:	f7ff f9a7 	bl	8005a8c <LL_RCC_GetAHB4Prescaler>
 800673e:	4603      	mov	r3, r0
 8006740:	091b      	lsrs	r3, r3, #4
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	4a0d      	ldr	r2, [pc, #52]	; (800677c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006752:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006758:	fba2 2303 	umull	r2, r3, r2, r3
 800675c:	0c9c      	lsrs	r4, r3, #18
 800675e:	f7fe fef5 	bl	800554c <HAL_PWREx_GetVoltageRange>
 8006762:	4603      	mov	r3, r0
 8006764:	4619      	mov	r1, r3
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f80c 	bl	8006784 <RCC_SetFlashLatency>
 800676c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bd90      	pop	{r4, r7, pc}
 8006776:	bf00      	nop
 8006778:	0800d87c 	.word	0x0800d87c
 800677c:	0800d81c 	.word	0x0800d81c
 8006780:	431bde83 	.word	0x431bde83

08006784 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b093      	sub	sp, #76	; 0x4c
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800678e:	4b37      	ldr	r3, [pc, #220]	; (800686c <RCC_SetFlashLatency+0xe8>)
 8006790:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800679a:	4a35      	ldr	r2, [pc, #212]	; (8006870 <RCC_SetFlashLatency+0xec>)
 800679c:	f107 031c 	add.w	r3, r7, #28
 80067a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80067a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80067a6:	4b33      	ldr	r3, [pc, #204]	; (8006874 <RCC_SetFlashLatency+0xf0>)
 80067a8:	f107 040c 	add.w	r4, r7, #12
 80067ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80067b2:	2300      	movs	r3, #0
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067bc:	d11a      	bne.n	80067f4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067be:	2300      	movs	r3, #0
 80067c0:	643b      	str	r3, [r7, #64]	; 0x40
 80067c2:	e013      	b.n	80067ec <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	3348      	adds	r3, #72	; 0x48
 80067ca:	443b      	add	r3, r7
 80067cc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d807      	bhi.n	80067e6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	3348      	adds	r3, #72	; 0x48
 80067dc:	443b      	add	r3, r7
 80067de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067e2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80067e4:	e020      	b.n	8006828 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e8:	3301      	adds	r3, #1
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40
 80067ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d9e8      	bls.n	80067c4 <RCC_SetFlashLatency+0x40>
 80067f2:	e019      	b.n	8006828 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067f4:	2300      	movs	r3, #0
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f8:	e013      	b.n	8006822 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	3348      	adds	r3, #72	; 0x48
 8006800:	443b      	add	r3, r7
 8006802:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d807      	bhi.n	800681c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	3348      	adds	r3, #72	; 0x48
 8006812:	443b      	add	r3, r7
 8006814:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800681a:	e005      	b.n	8006828 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	3301      	adds	r3, #1
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	2b02      	cmp	r3, #2
 8006826:	d9e8      	bls.n	80067fa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <RCC_SetFlashLatency+0xf4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f023 0207 	bic.w	r2, r3, #7
 8006830:	4911      	ldr	r1, [pc, #68]	; (8006878 <RCC_SetFlashLatency+0xf4>)
 8006832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006834:	4313      	orrs	r3, r2
 8006836:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006838:	f7fc feb8 	bl	80035ac <HAL_GetTick>
 800683c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800683e:	e008      	b.n	8006852 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006840:	f7fc feb4 	bl	80035ac <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e007      	b.n	8006862 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <RCC_SetFlashLatency+0xf4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800685c:	429a      	cmp	r2, r3
 800685e:	d1ef      	bne.n	8006840 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	374c      	adds	r7, #76	; 0x4c
 8006866:	46bd      	mov	sp, r7
 8006868:	bd90      	pop	{r4, r7, pc}
 800686a:	bf00      	nop
 800686c:	0800d678 	.word	0x0800d678
 8006870:	0800d688 	.word	0x0800d688
 8006874:	0800d694 	.word	0x0800d694
 8006878:	58004000 	.word	0x58004000

0800687c <LL_RCC_LSE_IsEnabled>:
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <LL_RCC_LSE_IsEnabled+0x18>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <LL_RCC_LSE_IsEnabled+0x1a>
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <LL_RCC_LSE_IsReady>:
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80068a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d101      	bne.n	80068b8 <LL_RCC_LSE_IsReady+0x18>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <LL_RCC_LSE_IsReady+0x1a>
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_RCC_SetRFWKPClockSource>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4313      	orrs	r3, r2
 80068e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <LL_RCC_SetSMPSClockSource>:
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f023 0203 	bic.w	r2, r3, #3
 8006902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4313      	orrs	r3, r2
 800690a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <LL_RCC_SetSMPSPrescaler>:
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800692a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4313      	orrs	r3, r2
 8006932:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_RCC_SetUSARTClockSource>:
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006950:	f023 0203 	bic.w	r2, r3, #3
 8006954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4313      	orrs	r3, r2
 800695c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_RCC_SetLPUARTClockSource>:
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <LL_RCC_SetI2CClockSource>:
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	091b      	lsrs	r3, r3, #4
 80069ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069b0:	43db      	mvns	r3, r3
 80069b2:	401a      	ands	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <LL_RCC_SetLPTIMClockSource>:
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	43db      	mvns	r3, r3
 80069ea:	401a      	ands	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <LL_RCC_SetSAIClockSource>:
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <LL_RCC_SetRNGClockSource>:
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <LL_RCC_SetCLK48ClockSource>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <LL_RCC_SetUSBClockSource>:
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ffe3 	bl	8006a5e <LL_RCC_SetCLK48ClockSource>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <LL_RCC_SetADCClockSource>:
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_RCC_SetRTCClockSource>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <LL_RCC_GetRTCClockSource>:
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <LL_RCC_ForceBackupDomainReset>:
{
 8006b12:	b480      	push	{r7}
 8006b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <LL_RCC_PLLSAI1_Enable>:
{
 8006b56:	b480      	push	{r7}
 8006b58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b68:	6013      	str	r3, [r2, #0]
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <LL_RCC_PLLSAI1_Disable>:
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_PLLSAI1_IsReady>:
{
 8006b92:	b480      	push	{r7}
 8006b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba4:	d101      	bne.n	8006baa <LL_RCC_PLLSAI1_IsReady+0x18>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b088      	sub	sp, #32
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d034      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bda:	d021      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006bdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006be0:	d81b      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be6:	d01d      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006be8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bec:	d815      	bhi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf6:	d110      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c06:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c08:	e00d      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 f947 	bl	8006ea2 <RCCEx_PLLSAI1_ConfigNP>
 8006c14:	4603      	mov	r3, r0
 8006c16:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c18:	e005      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	77fb      	strb	r3, [r7, #31]
        break;
 8006c1e:	e002      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006c20:	bf00      	nop
 8006c22:	e000      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c26:	7ffb      	ldrb	r3, [r7, #31]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fee8 	bl	8006a06 <LL_RCC_SetSAIClockSource>
 8006c36:	e001      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	7ffb      	ldrb	r3, [r7, #31]
 8006c3a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d046      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006c48:	f7ff ff56 	bl	8006af8 <LL_RCC_GetRTCClockSource>
 8006c4c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d03c      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c58:	f7fe fc68 	bl	800552c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d105      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff ff30 	bl	8006acc <LL_RCC_SetRTCClockSource>
 8006c6c:	e02e      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006c78:	f7ff ff4b 	bl	8006b12 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006c7c:	f7ff ff5a 	bl	8006b34 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006c98:	f7ff fdf0 	bl	800687c <LL_RCC_LSE_IsEnabled>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d114      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ca2:	f7fc fc83 	bl	80035ac <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006ca8:	e00b      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006caa:	f7fc fc7f 	bl	80035ac <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d902      	bls.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	77fb      	strb	r3, [r7, #31]
              break;
 8006cc0:	e004      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006cc2:	f7ff fded 	bl	80068a0 <LL_RCC_LSE_IsReady>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d1ee      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006ccc:	7ffb      	ldrb	r3, [r7, #31]
 8006cce:	77bb      	strb	r3, [r7, #30]
 8006cd0:	e001      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd2:	7ffb      	ldrb	r3, [r7, #31]
 8006cd4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff fe2a 	bl	8006940 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fe35 	bl	800696c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fe5d 	bl	80069d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0320 	and.w	r3, r3, #32
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff fe52 	bl	80069d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fe2a 	bl	8006998 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fe1f 	bl	8006998 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d022      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fe8d 	bl	8006a8a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d78:	d107      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d88:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d92:	d10b      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f8dd 	bl	8006f58 <RCCEx_PLLSAI1_ConfigNQ>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006da2:	7ffb      	ldrb	r3, [r7, #31]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006da8:	7ffb      	ldrb	r3, [r7, #31]
 8006daa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d02b      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc0:	d008      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dca:	d003      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fe2a 	bl	8006a32 <LL_RCC_SetRNGClockSource>
 8006dde:	e00a      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	2000      	movs	r0, #0
 8006dec:	f7ff fe21 	bl	8006a32 <LL_RCC_SetRNGClockSource>
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7ff fe34 	bl	8006a5e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006dfe:	d107      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d022      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fe3d 	bl	8006aa0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2e:	d107      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e3e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e48:	d10b      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f8dd 	bl	800700e <RCCEx_PLLSAI1_ConfigNR>
 8006e54:	4603      	mov	r3, r0
 8006e56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006e58:	7ffb      	ldrb	r3, [r7, #31]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006e5e:	7ffb      	ldrb	r3, [r7, #31]
 8006e60:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fd26 	bl	80068c4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fd45 	bl	8006918 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff fd2c 	bl	80068f0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3720      	adds	r7, #32
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006eae:	f7ff fe61 	bl	8006b74 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006eb2:	f7fc fb7b 	bl	80035ac <HAL_GetTick>
 8006eb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006eb8:	e009      	b.n	8006ece <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006eba:	f7fc fb77 	bl	80035ac <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d902      	bls.n	8006ece <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ecc:	e004      	b.n	8006ed8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ece:	f7ff fe60 	bl	8006b92 <LL_RCC_PLLSAI1_IsReady>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d137      	bne.n	8006f4e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006f0c:	f7ff fe23 	bl	8006b56 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f10:	f7fc fb4c 	bl	80035ac <HAL_GetTick>
 8006f14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006f16:	e009      	b.n	8006f2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f18:	f7fc fb48 	bl	80035ac <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d902      	bls.n	8006f2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	73fb      	strb	r3, [r7, #15]
        break;
 8006f2a:	e004      	b.n	8006f36 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006f2c:	f7ff fe31 	bl	8006b92 <LL_RCC_PLLSAI1_IsReady>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d1f0      	bne.n	8006f18 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d108      	bne.n	8006f4e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006f64:	f7ff fe06 	bl	8006b74 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f68:	f7fc fb20 	bl	80035ac <HAL_GetTick>
 8006f6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f6e:	e009      	b.n	8006f84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f70:	f7fc fb1c 	bl	80035ac <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d902      	bls.n	8006f84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	73fb      	strb	r3, [r7, #15]
      break;
 8006f82:	e004      	b.n	8006f8e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f84:	f7ff fe05 	bl	8006b92 <LL_RCC_PLLSAI1_IsReady>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d137      	bne.n	8007004 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006fc2:	f7ff fdc8 	bl	8006b56 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc6:	f7fc faf1 	bl	80035ac <HAL_GetTick>
 8006fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fcc:	e009      	b.n	8006fe2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fce:	f7fc faed 	bl	80035ac <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d902      	bls.n	8006fe2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	73fb      	strb	r3, [r7, #15]
        break;
 8006fe0:	e004      	b.n	8006fec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fe2:	f7ff fdd6 	bl	8006b92 <LL_RCC_PLLSAI1_IsReady>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d1f0      	bne.n	8006fce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d108      	bne.n	8007004 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007000:	4313      	orrs	r3, r2
 8007002:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800701a:	f7ff fdab 	bl	8006b74 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800701e:	f7fc fac5 	bl	80035ac <HAL_GetTick>
 8007022:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007024:	e009      	b.n	800703a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007026:	f7fc fac1 	bl	80035ac <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d902      	bls.n	800703a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	73fb      	strb	r3, [r7, #15]
      break;
 8007038:	e004      	b.n	8007044 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800703a:	f7ff fdaa 	bl	8006b92 <LL_RCC_PLLSAI1_IsReady>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1f0      	bne.n	8007026 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d137      	bne.n	80070ba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800704a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007074:	4313      	orrs	r3, r2
 8007076:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007078:	f7ff fd6d 	bl	8006b56 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707c:	f7fc fa96 	bl	80035ac <HAL_GetTick>
 8007080:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007082:	e009      	b.n	8007098 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007084:	f7fc fa92 	bl	80035ac <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d902      	bls.n	8007098 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
        break;
 8007096:	e004      	b.n	80070a2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007098:	f7ff fd7b 	bl	8006b92 <LL_RCC_PLLSAI1_IsReady>
 800709c:	4603      	mov	r3, r0
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d1f0      	bne.n	8007084 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d108      	bne.n	80070ba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80070a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070b6:	4313      	orrs	r3, r2
 80070b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e09f      	b.n	8007216 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fb ff40 	bl	8002f70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070f8:	4b49      	ldr	r3, [pc, #292]	; (8007220 <HAL_RTC_Init+0x15c>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b10      	cmp	r3, #16
 8007102:	d07e      	beq.n	8007202 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	22ca      	movs	r2, #202	; 0xca
 800710a:	625a      	str	r2, [r3, #36]	; 0x24
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2253      	movs	r2, #83	; 0x53
 8007112:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f8ab 	bl	8007270 <RTC_EnterInitMode>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	22ff      	movs	r2, #255	; 0xff
 8007126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2204      	movs	r2, #4
 800712c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
 8007134:	e067      	b.n	8007206 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6812      	ldr	r2, [r2, #0]
 8007140:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007148:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6899      	ldr	r1, [r3, #8]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68d2      	ldr	r2, [r2, #12]
 8007170:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6919      	ldr	r1, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	041a      	lsls	r2, r3, #16
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007194:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0203 	bic.w	r2, r2, #3
 80071a4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0320 	and.w	r3, r3, #32
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d113      	bne.n	80071f4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f829 	bl	8007224 <HAL_RTC_WaitForSynchro>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	22ff      	movs	r2, #255	; 0xff
 80071de:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2204      	movs	r2, #4
 80071e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e010      	b.n	8007216 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	22ff      	movs	r2, #255	; 0xff
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]
 8007200:	e001      	b.n	8007206 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40002800 	.word	0x40002800

08007224 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800723a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800723c:	f7fc f9b6 	bl	80035ac <HAL_GetTick>
 8007240:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007242:	e009      	b.n	8007258 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007244:	f7fc f9b2 	bl	80035ac <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007252:	d901      	bls.n	8007258 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e007      	b.n	8007268 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0ee      	beq.n	8007244 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d119      	bne.n	80072ba <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800728e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007290:	f7fc f98c 	bl	80035ac <HAL_GetTick>
 8007294:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007296:	e009      	b.n	80072ac <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007298:	f7fc f988 	bl	80035ac <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a6:	d901      	bls.n	80072ac <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e007      	b.n	80072bc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0ee      	beq.n	8007298 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80072da:	2302      	movs	r3, #2
 80072dc:	e0a8      	b.n	8007430 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	22ca      	movs	r2, #202	; 0xca
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2253      	movs	r2, #83	; 0x53
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007308:	2b00      	cmp	r3, #0
 800730a:	d020      	beq.n	800734e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800730c:	f7fc f94e 	bl	80035ac <HAL_GetTick>
 8007310:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007312:	e015      	b.n	8007340 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007314:	f7fc f94a 	bl	80035ac <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007322:	d90d      	bls.n	8007340 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	22ff      	movs	r2, #255	; 0xff
 800732a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2203      	movs	r2, #3
 8007330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e077      	b.n	8007430 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e2      	bne.n	8007314 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800736e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007370:	f7fc f91c 	bl	80035ac <HAL_GetTick>
 8007374:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007376:	e015      	b.n	80073a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007378:	f7fc f918 	bl	80035ac <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007386:	d90d      	bls.n	80073a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e045      	b.n	8007430 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0e2      	beq.n	8007378 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0207 	bic.w	r2, r2, #7
 80073c8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6899      	ldr	r1, [r3, #8]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80073da:	4b17      	ldr	r3, [pc, #92]	; (8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e0:	4a15      	ldr	r2, [pc, #84]	; (8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80073ea:	4b13      	ldr	r3, [pc, #76]	; (8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a12      	ldr	r2, [pc, #72]	; (8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007404:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007414:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	22ff      	movs	r2, #255	; 0xff
 800741c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	58000800 	.word	0x58000800

0800743c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e095      	b.n	800757a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d108      	bne.n	8007468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745e:	d009      	beq.n	8007474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	61da      	str	r2, [r3, #28]
 8007466:	e005      	b.n	8007474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fb fda2 	bl	8002fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074b4:	d902      	bls.n	80074bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e002      	b.n	80074c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074ca:	d007      	beq.n	80074dc <HAL_SPI_Init+0xa0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074d4:	d002      	beq.n	80074dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	ea42 0103 	orr.w	r1, r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	f003 0204 	and.w	r2, r3, #4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007558:	ea42 0103 	orr.w	r1, r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b088      	sub	sp, #32
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	603b      	str	r3, [r7, #0]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_SPI_Transmit+0x22>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e158      	b.n	8007856 <HAL_SPI_Transmit+0x2d4>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075ac:	f7fb fffe 	bl	80035ac <HAL_GetTick>
 80075b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d002      	beq.n	80075c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
 80075c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075c6:	e13d      	b.n	8007844 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <HAL_SPI_Transmit+0x52>
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075d8:	e134      	b.n	8007844 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2203      	movs	r2, #3
 80075de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	88fa      	ldrh	r2, [r7, #6]
 80075f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007624:	d10f      	bne.n	8007646 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007644:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d007      	beq.n	8007664 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800766c:	d94b      	bls.n	8007706 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_SPI_Transmit+0xfa>
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d13e      	bne.n	80076fa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076a0:	e02b      	b.n	80076fa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d112      	bne.n	80076d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	1c9a      	adds	r2, r3, #2
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076d4:	e011      	b.n	80076fa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d6:	f7fb ff69 	bl	80035ac <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d803      	bhi.n	80076ee <HAL_SPI_Transmit+0x16c>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ec:	d102      	bne.n	80076f4 <HAL_SPI_Transmit+0x172>
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076f8:	e0a4      	b.n	8007844 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1ce      	bne.n	80076a2 <HAL_SPI_Transmit+0x120>
 8007704:	e07c      	b.n	8007800 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <HAL_SPI_Transmit+0x192>
 800770e:	8afb      	ldrh	r3, [r7, #22]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d170      	bne.n	80077f6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d912      	bls.n	8007744 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	881a      	ldrh	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	1c9a      	adds	r2, r3, #2
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007738:	b29b      	uxth	r3, r3
 800773a:	3b02      	subs	r3, #2
 800773c:	b29a      	uxth	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007742:	e058      	b.n	80077f6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	7812      	ldrb	r2, [r2, #0]
 8007750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800776a:	e044      	b.n	80077f6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b02      	cmp	r3, #2
 8007778:	d12b      	bne.n	80077d2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	d912      	bls.n	80077aa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	1c9a      	adds	r2, r3, #2
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b02      	subs	r3, #2
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077a8:	e025      	b.n	80077f6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	7812      	ldrb	r2, [r2, #0]
 80077b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077d0:	e011      	b.n	80077f6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077d2:	f7fb feeb 	bl	80035ac <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d803      	bhi.n	80077ea <HAL_SPI_Transmit+0x268>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e8:	d102      	bne.n	80077f0 <HAL_SPI_Transmit+0x26e>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077f4:	e026      	b.n	8007844 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1b5      	bne.n	800776c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fe03 	bl	8008410 <SPI_EndRxTxTransaction>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2220      	movs	r2, #32
 8007814:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e000      	b.n	8007844 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007842:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007854:	7ffb      	ldrb	r3, [r7, #31]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b088      	sub	sp, #32
 8007862:	af02      	add	r7, sp, #8
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800787a:	d112      	bne.n	80078a2 <HAL_SPI_Receive+0x44>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10e      	bne.n	80078a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2204      	movs	r2, #4
 8007888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800788c:	88fa      	ldrh	r2, [r7, #6]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4613      	mov	r3, r2
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f910 	bl	8007abe <HAL_SPI_TransmitReceive>
 800789e:	4603      	mov	r3, r0
 80078a0:	e109      	b.n	8007ab6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_SPI_Receive+0x52>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e102      	b.n	8007ab6 <HAL_SPI_Receive+0x258>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078b8:	f7fb fe78 	bl	80035ac <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d002      	beq.n	80078d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
 80078cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078ce:	e0e9      	b.n	8007aa4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_SPI_Receive+0x7e>
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078e0:	e0e0      	b.n	8007aa4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2204      	movs	r2, #4
 80078e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	88fa      	ldrh	r2, [r7, #6]
 8007902:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800792c:	d908      	bls.n	8007940 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	e007      	b.n	8007950 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800794e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007958:	d10f      	bne.n	800797a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007968:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007978:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d007      	beq.n	8007998 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007996:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079a0:	d867      	bhi.n	8007a72 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079a2:	e030      	b.n	8007a06 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d117      	bne.n	80079e2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f103 020c 	add.w	r2, r3, #12
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80079e0:	e011      	b.n	8007a06 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e2:	f7fb fde3 	bl	80035ac <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d803      	bhi.n	80079fa <HAL_SPI_Receive+0x19c>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f8:	d102      	bne.n	8007a00 <HAL_SPI_Receive+0x1a2>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a04:	e04e      	b.n	8007aa4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1c8      	bne.n	80079a4 <HAL_SPI_Receive+0x146>
 8007a12:	e034      	b.n	8007a7e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d115      	bne.n	8007a4e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	b292      	uxth	r2, r2
 8007a2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	1c9a      	adds	r2, r3, #2
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007a4c:	e011      	b.n	8007a72 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a4e:	f7fb fdad 	bl	80035ac <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d803      	bhi.n	8007a66 <HAL_SPI_Receive+0x208>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a64:	d102      	bne.n	8007a6c <HAL_SPI_Receive+0x20e>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a70:	e018      	b.n	8007aa4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1ca      	bne.n	8007a14 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fc6c 	bl	8008360 <SPI_EndRxTransaction>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	e000      	b.n	8007aa4 <HAL_SPI_Receive+0x246>
  }

error :
 8007aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b08a      	sub	sp, #40	; 0x28
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007acc:	2301      	movs	r3, #1
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_SPI_TransmitReceive+0x26>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e1fb      	b.n	8007edc <HAL_SPI_TransmitReceive+0x41e>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aec:	f7fb fd5e 	bl	80035ac <HAL_GetTick>
 8007af0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007af8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007b00:	887b      	ldrh	r3, [r7, #2]
 8007b02:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007b04:	887b      	ldrh	r3, [r7, #2]
 8007b06:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b08:	7efb      	ldrb	r3, [r7, #27]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d00e      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x6e>
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b14:	d106      	bne.n	8007b24 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <HAL_SPI_TransmitReceive+0x66>
 8007b1e:	7efb      	ldrb	r3, [r7, #27]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d003      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007b24:	2302      	movs	r3, #2
 8007b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007b2a:	e1cd      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x80>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x80>
 8007b38:	887b      	ldrh	r3, [r7, #2]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007b44:	e1c0      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d003      	beq.n	8007b5a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2205      	movs	r2, #5
 8007b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	887a      	ldrh	r2, [r7, #2]
 8007b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	887a      	ldrh	r2, [r7, #2]
 8007b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	887a      	ldrh	r2, [r7, #2]
 8007b80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	887a      	ldrh	r2, [r7, #2]
 8007b86:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b9c:	d802      	bhi.n	8007ba4 <HAL_SPI_TransmitReceive+0xe6>
 8007b9e:	8a3b      	ldrh	r3, [r7, #16]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d908      	bls.n	8007bb6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	e007      	b.n	8007bc6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bc4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d007      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bec:	d97c      	bls.n	8007ce8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x13e>
 8007bf6:	8a7b      	ldrh	r3, [r7, #18]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d169      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	881a      	ldrh	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	1c9a      	adds	r2, r3, #2
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c20:	e056      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d11b      	bne.n	8007c68 <HAL_SPI_TransmitReceive+0x1aa>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d016      	beq.n	8007c68 <HAL_SPI_TransmitReceive+0x1aa>
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d113      	bne.n	8007c68 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	1c9a      	adds	r2, r3, #2
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d11c      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x1f2>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	b292      	uxth	r2, r2
 8007c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	1c9a      	adds	r2, r3, #2
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cac:	2301      	movs	r3, #1
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cb0:	f7fb fc7c 	bl	80035ac <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d807      	bhi.n	8007cd0 <HAL_SPI_TransmitReceive+0x212>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc6:	d003      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007cce:	e0fb      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1a3      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x164>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d19d      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x164>
 8007ce6:	e0df      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_SPI_TransmitReceive+0x23a>
 8007cf0:	8a7b      	ldrh	r3, [r7, #18]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	f040 80cb 	bne.w	8007e8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d912      	bls.n	8007d28 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	881a      	ldrh	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	1c9a      	adds	r2, r3, #2
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b02      	subs	r3, #2
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d26:	e0b2      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	330c      	adds	r3, #12
 8007d32:	7812      	ldrb	r2, [r2, #0]
 8007d34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d4e:	e09e      	b.n	8007e8e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d134      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x30a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02f      	beq.n	8007dc8 <HAL_SPI_TransmitReceive+0x30a>
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d12c      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d912      	bls.n	8007d9e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	881a      	ldrh	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	1c9a      	adds	r2, r3, #2
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	3b02      	subs	r3, #2
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d9c:	e012      	b.n	8007dc4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d148      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x3aa>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d042      	beq.n	8007e68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d923      	bls.n	8007e36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	1c9a      	adds	r2, r3, #2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b02      	subs	r3, #2
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d81f      	bhi.n	8007e64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e32:	605a      	str	r2, [r3, #4]
 8007e34:	e016      	b.n	8007e64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f103 020c 	add.w	r2, r3, #12
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e64:	2301      	movs	r3, #1
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e68:	f7fb fba0 	bl	80035ac <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d803      	bhi.n	8007e80 <HAL_SPI_TransmitReceive+0x3c2>
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e7e:	d102      	bne.n	8007e86 <HAL_SPI_TransmitReceive+0x3c8>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e8c:	e01c      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f47f af5b 	bne.w	8007d50 <HAL_SPI_TransmitReceive+0x292>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f47f af54 	bne.w	8007d50 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 faaf 	bl	8008410 <SPI_EndRxTxTransaction>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	661a      	str	r2, [r3, #96]	; 0x60
 8007ec4:	e000      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007ec6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	099b      	lsrs	r3, r3, #6
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10f      	bne.n	8007f28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	099b      	lsrs	r3, r3, #6
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
    return;
 8007f26:	e0d7      	b.n	80080d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	085b      	lsrs	r3, r3, #1
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <HAL_SPI_IRQHandler+0x66>
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	09db      	lsrs	r3, r3, #7
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
    return;
 8007f48:	e0c6      	b.n	80080d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10c      	bne.n	8007f70 <HAL_SPI_IRQHandler+0x8c>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	099b      	lsrs	r3, r3, #6
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 80b4 	beq.w	80080d8 <HAL_SPI_IRQHandler+0x1f4>
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80ad 	beq.w	80080d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	099b      	lsrs	r3, r3, #6
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d023      	beq.n	8007fd2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d011      	beq.n	8007fba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9a:	f043 0204 	orr.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	617b      	str	r3, [r7, #20]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	e00b      	b.n	8007fd2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	693b      	ldr	r3, [r7, #16]
        return;
 8007fd0:	e082      	b.n	80080d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d014      	beq.n	8008008 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe2:	f043 0201 	orr.w	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00c      	beq.n	800802e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008018:	f043 0208 	orr.w	r2, r3, #8
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008020:	2300      	movs	r3, #0
 8008022:	60bb      	str	r3, [r7, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008032:	2b00      	cmp	r3, #0
 8008034:	d04f      	beq.n	80080d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008044:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <HAL_SPI_IRQHandler+0x17e>
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d034      	beq.n	80080cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0203 	bic.w	r2, r2, #3
 8008070:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	2b00      	cmp	r3, #0
 8008078:	d011      	beq.n	800809e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807e:	4a18      	ldr	r2, [pc, #96]	; (80080e0 <HAL_SPI_IRQHandler+0x1fc>)
 8008080:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	4618      	mov	r0, r3
 8008088:	f7fb fcf6 	bl	8003a78 <HAL_DMA_Abort_IT>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d016      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080aa:	4a0d      	ldr	r2, [pc, #52]	; (80080e0 <HAL_SPI_IRQHandler+0x1fc>)
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fb fce0 	bl	8003a78 <HAL_DMA_Abort_IT>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80080ca:	e003      	b.n	80080d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f809 	bl	80080e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80080d2:	e000      	b.n	80080d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80080d4:	bf00      	nop
    return;
 80080d6:	bf00      	nop
  }
}
 80080d8:	3720      	adds	r7, #32
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	080080f9 	.word	0x080080f9

080080e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff ffe5 	bl	80080e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008134:	f7fb fa3a 	bl	80035ac <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4413      	add	r3, r2
 8008142:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008144:	f7fb fa32 	bl	80035ac <HAL_GetTick>
 8008148:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	015b      	lsls	r3, r3, #5
 8008150:	0d1b      	lsrs	r3, r3, #20
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800815a:	e054      	b.n	8008206 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008162:	d050      	beq.n	8008206 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008164:	f7fb fa22 	bl	80035ac <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	429a      	cmp	r2, r3
 8008172:	d902      	bls.n	800817a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d13d      	bne.n	80081f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008192:	d111      	bne.n	80081b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800819c:	d004      	beq.n	80081a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a6:	d107      	bne.n	80081b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c0:	d10f      	bne.n	80081e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e017      	b.n	8008226 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	3b01      	subs	r3, #1
 8008204:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4013      	ands	r3, r2
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	bf0c      	ite	eq
 8008216:	2301      	moveq	r3, #1
 8008218:	2300      	movne	r3, #0
 800821a:	b2db      	uxtb	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	429a      	cmp	r2, r3
 8008222:	d19b      	bne.n	800815c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000008 	.word	0x20000008

08008234 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008246:	f7fb f9b1 	bl	80035ac <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	4413      	add	r3, r2
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008256:	f7fb f9a9 	bl	80035ac <HAL_GetTick>
 800825a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008264:	4b3d      	ldr	r3, [pc, #244]	; (800835c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	00da      	lsls	r2, r3, #3
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	0d1b      	lsrs	r3, r3, #20
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	fb02 f303 	mul.w	r3, r2, r3
 800827a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800827c:	e060      	b.n	8008340 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008284:	d107      	bne.n	8008296 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008294:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800829c:	d050      	beq.n	8008340 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800829e:	f7fb f985 	bl	80035ac <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d902      	bls.n	80082b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d13d      	bne.n	8008330 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082cc:	d111      	bne.n	80082f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d6:	d004      	beq.n	80082e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e0:	d107      	bne.n	80082f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fa:	d10f      	bne.n	800831c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800831a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e010      	b.n	8008352 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	3b01      	subs	r3, #1
 800833e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	4013      	ands	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d196      	bne.n	800827e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3728      	adds	r7, #40	; 0x28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000008 	.word	0x20000008

08008360 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008374:	d111      	bne.n	800839a <SPI_EndRxTransaction+0x3a>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837e:	d004      	beq.n	800838a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008388:	d107      	bne.n	800839a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008398:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7ff febd 	bl	8008124 <SPI_WaitFlagStateUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b4:	f043 0220 	orr.w	r2, r3, #32
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e023      	b.n	8008408 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083c8:	d11d      	bne.n	8008406 <SPI_EndRxTransaction+0xa6>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d2:	d004      	beq.n	80083de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083dc:	d113      	bne.n	8008406 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ff22 	bl	8008234 <SPI_WaitFifoStateUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d007      	beq.n	8008406 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fa:	f043 0220 	orr.w	r2, r3, #32
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e000      	b.n	8008408 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af02      	add	r7, sp, #8
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7ff ff03 	bl	8008234 <SPI_WaitFifoStateUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008438:	f043 0220 	orr.w	r2, r3, #32
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e027      	b.n	8008494 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fe68 	bl	8008124 <SPI_WaitFlagStateUntilTimeout>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d007      	beq.n	800846a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800845e:	f043 0220 	orr.w	r2, r3, #32
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e014      	b.n	8008494 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fedc 	bl	8008234 <SPI_WaitFifoStateUntilTimeout>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d007      	beq.n	8008492 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008486:	f043 0220 	orr.w	r2, r3, #32
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e000      	b.n	8008494 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <LL_RCC_GetUSARTClockSource>:
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80084a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4013      	ands	r3, r2
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <LL_RCC_GetLPUARTClockSource>:
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80084c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4013      	ands	r3, r2
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e042      	b.n	8008574 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7fa fdfb 	bl	80030fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2224      	movs	r2, #36	; 0x24
 800850a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0201 	bic.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8ba 	bl	8008698 <UART_SetConfig>
 8008524:	4603      	mov	r3, r0
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e022      	b.n	8008574 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fad6 	bl	8008ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800854a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800855a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fb5d 	bl	8008c2c <UART_CheckIdleState>
 8008572:	4603      	mov	r3, r0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008592:	2b20      	cmp	r3, #32
 8008594:	d17b      	bne.n	800868e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <HAL_UART_Transmit+0x26>
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e074      	b.n	8008690 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2221      	movs	r2, #33	; 0x21
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085b6:	f7fa fff9 	bl	80035ac <HAL_GetTick>
 80085ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	88fa      	ldrh	r2, [r7, #6]
 80085c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d4:	d108      	bne.n	80085e8 <HAL_UART_Transmit+0x6c>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	e003      	b.n	80085f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085f0:	e030      	b.n	8008654 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2200      	movs	r2, #0
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 fbbf 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2220      	movs	r2, #32
 800860c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e03d      	b.n	8008690 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008628:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	3302      	adds	r3, #2
 800862e:	61bb      	str	r3, [r7, #24]
 8008630:	e007      	b.n	8008642 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	3301      	adds	r3, #1
 8008640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008648:	b29b      	uxth	r3, r3
 800864a:	3b01      	subs	r3, #1
 800864c:	b29a      	uxth	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800865a:	b29b      	uxth	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1c8      	bne.n	80085f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2200      	movs	r2, #0
 8008668:	2140      	movs	r1, #64	; 0x40
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 fb88 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d005      	beq.n	8008682 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e006      	b.n	8008690 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e000      	b.n	8008690 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800868e:	2302      	movs	r3, #2
  }
}
 8008690:	4618      	mov	r0, r3
 8008692:	3720      	adds	r7, #32
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800869c:	b08c      	sub	sp, #48	; 0x30
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	431a      	orrs	r2, r3
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	4313      	orrs	r3, r2
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	4baf      	ldr	r3, [pc, #700]	; (8008984 <UART_SetConfig+0x2ec>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4aa4      	ldr	r2, [pc, #656]	; (8008988 <UART_SetConfig+0x2f0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008700:	4313      	orrs	r3, r2
 8008702:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800870e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008718:	430b      	orrs	r3, r1
 800871a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	f023 010f 	bic.w	r1, r3, #15
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a95      	ldr	r2, [pc, #596]	; (800898c <UART_SetConfig+0x2f4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d125      	bne.n	8008788 <UART_SetConfig+0xf0>
 800873c:	2003      	movs	r0, #3
 800873e:	f7ff fead 	bl	800849c <LL_RCC_GetUSARTClockSource>
 8008742:	4603      	mov	r3, r0
 8008744:	2b03      	cmp	r3, #3
 8008746:	d81b      	bhi.n	8008780 <UART_SetConfig+0xe8>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0xb8>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008761 	.word	0x08008761
 8008754:	08008771 	.word	0x08008771
 8008758:	08008769 	.word	0x08008769
 800875c:	08008779 	.word	0x08008779
 8008760:	2301      	movs	r3, #1
 8008762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008766:	e042      	b.n	80087ee <UART_SetConfig+0x156>
 8008768:	2302      	movs	r3, #2
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876e:	e03e      	b.n	80087ee <UART_SetConfig+0x156>
 8008770:	2304      	movs	r3, #4
 8008772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008776:	e03a      	b.n	80087ee <UART_SetConfig+0x156>
 8008778:	2308      	movs	r3, #8
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877e:	e036      	b.n	80087ee <UART_SetConfig+0x156>
 8008780:	2310      	movs	r3, #16
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008786:	e032      	b.n	80087ee <UART_SetConfig+0x156>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a7e      	ldr	r2, [pc, #504]	; (8008988 <UART_SetConfig+0x2f0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d12a      	bne.n	80087e8 <UART_SetConfig+0x150>
 8008792:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008796:	f7ff fe91 	bl	80084bc <LL_RCC_GetLPUARTClockSource>
 800879a:	4603      	mov	r3, r0
 800879c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a0:	d01a      	beq.n	80087d8 <UART_SetConfig+0x140>
 80087a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a6:	d81b      	bhi.n	80087e0 <UART_SetConfig+0x148>
 80087a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ac:	d00c      	beq.n	80087c8 <UART_SetConfig+0x130>
 80087ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b2:	d815      	bhi.n	80087e0 <UART_SetConfig+0x148>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <UART_SetConfig+0x128>
 80087b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087bc:	d008      	beq.n	80087d0 <UART_SetConfig+0x138>
 80087be:	e00f      	b.n	80087e0 <UART_SetConfig+0x148>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c6:	e012      	b.n	80087ee <UART_SetConfig+0x156>
 80087c8:	2302      	movs	r3, #2
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ce:	e00e      	b.n	80087ee <UART_SetConfig+0x156>
 80087d0:	2304      	movs	r3, #4
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d6:	e00a      	b.n	80087ee <UART_SetConfig+0x156>
 80087d8:	2308      	movs	r3, #8
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087de:	e006      	b.n	80087ee <UART_SetConfig+0x156>
 80087e0:	2310      	movs	r3, #16
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	e002      	b.n	80087ee <UART_SetConfig+0x156>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a65      	ldr	r2, [pc, #404]	; (8008988 <UART_SetConfig+0x2f0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	f040 8097 	bne.w	8008928 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d823      	bhi.n	800884a <UART_SetConfig+0x1b2>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <UART_SetConfig+0x170>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	0800882d 	.word	0x0800882d
 800880c:	0800884b 	.word	0x0800884b
 8008810:	08008835 	.word	0x08008835
 8008814:	0800884b 	.word	0x0800884b
 8008818:	0800883b 	.word	0x0800883b
 800881c:	0800884b 	.word	0x0800884b
 8008820:	0800884b 	.word	0x0800884b
 8008824:	0800884b 	.word	0x0800884b
 8008828:	08008843 	.word	0x08008843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800882c:	f7fd ff46 	bl	80066bc <HAL_RCC_GetPCLK1Freq>
 8008830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008832:	e010      	b.n	8008856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008834:	4b56      	ldr	r3, [pc, #344]	; (8008990 <UART_SetConfig+0x2f8>)
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008838:	e00d      	b.n	8008856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800883a:	f7fd febf 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008840:	e009      	b.n	8008856 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008848:	e005      	b.n	8008856 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 812b 	beq.w	8008ab4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	4a4c      	ldr	r2, [pc, #304]	; (8008994 <UART_SetConfig+0x2fc>)
 8008864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008868:	461a      	mov	r2, r3
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008870:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	4413      	add	r3, r2
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	429a      	cmp	r2, r3
 8008880:	d305      	bcc.n	800888e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	429a      	cmp	r2, r3
 800888c:	d903      	bls.n	8008896 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008894:	e10e      	b.n	8008ab4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	2200      	movs	r2, #0
 800889a:	60bb      	str	r3, [r7, #8]
 800889c:	60fa      	str	r2, [r7, #12]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	4a3c      	ldr	r2, [pc, #240]	; (8008994 <UART_SetConfig+0x2fc>)
 80088a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2200      	movs	r2, #0
 80088ac:	603b      	str	r3, [r7, #0]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088b8:	f7f7 fe96 	bl	80005e8 <__aeabi_uldivmod>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	020b      	lsls	r3, r1, #8
 80088ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088d2:	0202      	lsls	r2, r0, #8
 80088d4:	6979      	ldr	r1, [r7, #20]
 80088d6:	6849      	ldr	r1, [r1, #4]
 80088d8:	0849      	lsrs	r1, r1, #1
 80088da:	2000      	movs	r0, #0
 80088dc:	460c      	mov	r4, r1
 80088de:	4605      	mov	r5, r0
 80088e0:	eb12 0804 	adds.w	r8, r2, r4
 80088e4:	eb43 0905 	adc.w	r9, r3, r5
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	469a      	mov	sl, r3
 80088f0:	4693      	mov	fp, r2
 80088f2:	4652      	mov	r2, sl
 80088f4:	465b      	mov	r3, fp
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f7 fe75 	bl	80005e8 <__aeabi_uldivmod>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4613      	mov	r3, r2
 8008904:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800890c:	d308      	bcc.n	8008920 <UART_SetConfig+0x288>
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008914:	d204      	bcs.n	8008920 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6a3a      	ldr	r2, [r7, #32]
 800891c:	60da      	str	r2, [r3, #12]
 800891e:	e0c9      	b.n	8008ab4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008926:	e0c5      	b.n	8008ab4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008930:	d16d      	bne.n	8008a0e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008936:	3b01      	subs	r3, #1
 8008938:	2b07      	cmp	r3, #7
 800893a:	d82d      	bhi.n	8008998 <UART_SetConfig+0x300>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0x2ac>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008965 	.word	0x08008965
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008999 	.word	0x08008999
 8008950:	08008973 	.word	0x08008973
 8008954:	08008999 	.word	0x08008999
 8008958:	08008999 	.word	0x08008999
 800895c:	08008999 	.word	0x08008999
 8008960:	0800897b 	.word	0x0800897b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008964:	f7fd fec0 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 8008968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800896a:	e01b      	b.n	80089a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800896c:	4b08      	ldr	r3, [pc, #32]	; (8008990 <UART_SetConfig+0x2f8>)
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008970:	e018      	b.n	80089a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008972:	f7fd fe23 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 8008976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008978:	e014      	b.n	80089a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800897a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008980:	e010      	b.n	80089a4 <UART_SetConfig+0x30c>
 8008982:	bf00      	nop
 8008984:	cfff69f3 	.word	0xcfff69f3
 8008988:	40008000 	.word	0x40008000
 800898c:	40013800 	.word	0x40013800
 8008990:	00f42400 	.word	0x00f42400
 8008994:	0800d8bc 	.word	0x0800d8bc
      default:
        pclk = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8084 	beq.w	8008ab4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	4a4b      	ldr	r2, [pc, #300]	; (8008ae0 <UART_SetConfig+0x448>)
 80089b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b6:	461a      	mov	r2, r3
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80089be:	005a      	lsls	r2, r3, #1
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	441a      	add	r2, r3
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	d916      	bls.n	8008a06 <UART_SetConfig+0x36e>
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089de:	d212      	bcs.n	8008a06 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f023 030f 	bic.w	r3, r3, #15
 80089e8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	8bfb      	ldrh	r3, [r7, #30]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	8bfa      	ldrh	r2, [r7, #30]
 8008a02:	60da      	str	r2, [r3, #12]
 8008a04:	e056      	b.n	8008ab4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a0c:	e052      	b.n	8008ab4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b07      	cmp	r3, #7
 8008a16:	d822      	bhi.n	8008a5e <UART_SetConfig+0x3c6>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <UART_SetConfig+0x388>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a5f 	.word	0x08008a5f
 8008a2c:	08008a4f 	.word	0x08008a4f
 8008a30:	08008a5f 	.word	0x08008a5f
 8008a34:	08008a5f 	.word	0x08008a5f
 8008a38:	08008a5f 	.word	0x08008a5f
 8008a3c:	08008a57 	.word	0x08008a57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a40:	f7fd fe52 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 8008a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a46:	e010      	b.n	8008a6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a48:	4b26      	ldr	r3, [pc, #152]	; (8008ae4 <UART_SetConfig+0x44c>)
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a4c:	e00d      	b.n	8008a6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4e:	f7fd fdb5 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a54:	e009      	b.n	8008a6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a5c:	e005      	b.n	8008a6a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a68:	bf00      	nop
    }

    if (pclk != 0U)
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d021      	beq.n	8008ab4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	4a1a      	ldr	r2, [pc, #104]	; (8008ae0 <UART_SetConfig+0x448>)
 8008a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	085b      	lsrs	r3, r3, #1
 8008a88:	441a      	add	r2, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d909      	bls.n	8008aae <UART_SetConfig+0x416>
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d205      	bcs.n	8008aae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60da      	str	r2, [r3, #12]
 8008aac:	e002      	b.n	8008ab4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2200      	movs	r2, #0
 8008ace:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3730      	adds	r7, #48	; 0x30
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800d8bc 	.word	0x0800d8bc
 8008ae4:	00f42400 	.word	0x00f42400

08008ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00a      	beq.n	8008b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01a      	beq.n	8008bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be6:	d10a      	bne.n	8008bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	605a      	str	r2, [r3, #4]
  }
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b098      	sub	sp, #96	; 0x60
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c3c:	f7fa fcb6 	bl	80035ac <HAL_GetTick>
 8008c40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d12f      	bne.n	8008cb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f88e 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d022      	beq.n	8008cb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c72:	e853 3f00 	ldrex	r3, [r3]
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c88:	647b      	str	r3, [r7, #68]	; 0x44
 8008c8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c90:	e841 2300 	strex	r3, r2, [r1]
 8008c94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e6      	bne.n	8008c6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e063      	b.n	8008d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0304 	and.w	r3, r3, #4
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d149      	bne.n	8008d52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f857 	bl	8008d80 <UART_WaitOnFlagUntilTimeout>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d03c      	beq.n	8008d52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8008cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e6      	bne.n	8008cd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d2a:	61fa      	str	r2, [r7, #28]
 8008d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	617b      	str	r3, [r7, #20]
   return(result);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e5      	bne.n	8008d0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e012      	b.n	8008d78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3758      	adds	r7, #88	; 0x58
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d90:	e049      	b.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d98:	d045      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9a:	f7fa fc07 	bl	80035ac <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d302      	bcc.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e048      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d031      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d110      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f838 	bl	8008e4e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2208      	movs	r2, #8
 8008de2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e029      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e00:	d111      	bne.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f81e 	bl	8008e4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e00f      	b.n	8008e46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d0a6      	beq.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b095      	sub	sp, #84	; 0x54
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e74:	643b      	str	r3, [r7, #64]	; 0x40
 8008e76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e6      	bne.n	8008e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	f023 0301 	bic.w	r3, r3, #1
 8008ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb4:	e841 2300 	strex	r3, r2, [r1]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e3      	bne.n	8008e88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d118      	bne.n	8008efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 0310 	bic.w	r3, r3, #16
 8008edc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee6:	61bb      	str	r3, [r7, #24]
 8008ee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e6      	bne.n	8008ec8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f0e:	bf00      	nop
 8008f10:	3754      	adds	r7, #84	; 0x54
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d101      	bne.n	8008f30 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e027      	b.n	8008f80 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2224      	movs	r2, #36	; 0x24
 8008f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e02d      	b.n	8009000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	; 0x24
 8008fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0201 	bic.w	r2, r2, #1
 8008fca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f84f 	bl	8009084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800901c:	2302      	movs	r3, #2
 800901e:	e02d      	b.n	800907c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2224      	movs	r2, #36	; 0x24
 800902c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f811 	bl	8009084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009090:	2b00      	cmp	r3, #0
 8009092:	d108      	bne.n	80090a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090a4:	e031      	b.n	800910a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090a6:	2308      	movs	r3, #8
 80090a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090aa:	2308      	movs	r3, #8
 80090ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	0e5b      	lsrs	r3, r3, #25
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	0f5b      	lsrs	r3, r3, #29
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	7b3a      	ldrb	r2, [r7, #12]
 80090d2:	4911      	ldr	r1, [pc, #68]	; (8009118 <UARTEx_SetNbDataToProcess+0x94>)
 80090d4:	5c8a      	ldrb	r2, [r1, r2]
 80090d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090da:	7b3a      	ldrb	r2, [r7, #12]
 80090dc:	490f      	ldr	r1, [pc, #60]	; (800911c <UARTEx_SetNbDataToProcess+0x98>)
 80090de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	7b7a      	ldrb	r2, [r7, #13]
 80090f0:	4909      	ldr	r1, [pc, #36]	; (8009118 <UARTEx_SetNbDataToProcess+0x94>)
 80090f2:	5c8a      	ldrb	r2, [r1, r2]
 80090f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090f8:	7b7a      	ldrb	r2, [r7, #13]
 80090fa:	4908      	ldr	r1, [pc, #32]	; (800911c <UARTEx_SetNbDataToProcess+0x98>)
 80090fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009102:	b29a      	uxth	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	0800d8d4 	.word	0x0800d8d4
 800911c:	0800d8dc 	.word	0x0800d8dc

08009120 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800912a:	f107 0308 	add.w	r3, r7, #8
 800912e:	2218      	movs	r2, #24
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f001 f8d8 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009138:	233f      	movs	r3, #63	; 0x3f
 800913a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800913c:	2381      	movs	r3, #129	; 0x81
 800913e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009140:	1dfb      	adds	r3, r7, #7
 8009142:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009144:	2301      	movs	r3, #1
 8009146:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009148:	f107 0308 	add.w	r3, r7, #8
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f001 fb54 	bl	800a7fc <hci_send_req>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	da01      	bge.n	800915e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800915a:	23ff      	movs	r3, #255	; 0xff
 800915c:	e000      	b.n	8009160 <aci_gap_set_non_discoverable+0x40>
  return status;
 800915e:	79fb      	ldrb	r3, [r7, #7]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3720      	adds	r7, #32
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8009168:	b5b0      	push	{r4, r5, r7, lr}
 800916a:	b0ce      	sub	sp, #312	; 0x138
 800916c:	af00      	add	r7, sp, #0
 800916e:	4605      	mov	r5, r0
 8009170:	460c      	mov	r4, r1
 8009172:	4610      	mov	r0, r2
 8009174:	4619      	mov	r1, r3
 8009176:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800917a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800917e:	462a      	mov	r2, r5
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009186:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800918a:	4622      	mov	r2, r4
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009192:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8009196:	4602      	mov	r2, r0
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800919e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80091a2:	460a      	mov	r2, r1
 80091a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80091a6:	f107 0310 	add.w	r3, r7, #16
 80091aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80091ae:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80091b2:	3308      	adds	r3, #8
 80091b4:	f107 0210 	add.w	r2, r7, #16
 80091b8:	4413      	add	r3, r2
 80091ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80091be:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80091c2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80091c6:	4413      	add	r3, r2
 80091c8:	3309      	adds	r3, #9
 80091ca:	f107 0210 	add.w	r2, r7, #16
 80091ce:	4413      	add	r3, r2
 80091d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80091d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80091d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091dc:	2200      	movs	r2, #0
 80091de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80091e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80091ee:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80091f2:	7812      	ldrb	r2, [r2, #0]
 80091f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091fa:	3301      	adds	r3, #1
 80091fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009200:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009204:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009208:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009216:	3302      	adds	r3, #2
 8009218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800921c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009220:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009224:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8009228:	8812      	ldrh	r2, [r2, #0]
 800922a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800922e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009232:	3302      	adds	r3, #2
 8009234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009238:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800923c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009240:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009244:	7812      	ldrb	r2, [r2, #0]
 8009246:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800924c:	3301      	adds	r3, #1
 800924e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009256:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800925a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800925c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009260:	3301      	adds	r3, #1
 8009262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800926a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800926e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009274:	3301      	adds	r3, #1
 8009276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800927a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800927e:	3308      	adds	r3, #8
 8009280:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009284:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009288:	4618      	mov	r0, r3
 800928a:	f001 f81d 	bl	800a2c8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800928e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009292:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009296:	4413      	add	r3, r2
 8009298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800929c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80092a0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80092a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80092a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092aa:	3301      	adds	r3, #1
 80092ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80092b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80092b4:	3301      	adds	r3, #1
 80092b6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80092ba:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 f802 	bl	800a2c8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80092c4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80092c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80092cc:	4413      	add	r3, r2
 80092ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80092d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80092da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80092dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092e0:	3302      	adds	r3, #2
 80092e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80092e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80092ee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80092f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f4:	3302      	adds	r3, #2
 80092f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092fe:	2218      	movs	r2, #24
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fff0 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009308:	233f      	movs	r3, #63	; 0x3f
 800930a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800930e:	2383      	movs	r3, #131	; 0x83
 8009310:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009314:	f107 0310 	add.w	r3, r7, #16
 8009318:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800931c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009320:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009324:	f107 030f 	add.w	r3, r7, #15
 8009328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009332:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f001 fa5f 	bl	800a7fc <hci_send_req>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	da01      	bge.n	8009348 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	e004      	b.n	8009352 <aci_gap_set_discoverable+0x1ea>
  return status;
 8009348:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800934c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009350:	781b      	ldrb	r3, [r3, #0]
}
 8009352:	4618      	mov	r0, r3
 8009354:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009358:	46bd      	mov	sp, r7
 800935a:	bdb0      	pop	{r4, r5, r7, pc}

0800935c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b0cc      	sub	sp, #304	; 0x130
 8009360:	af00      	add	r7, sp, #0
 8009362:	4602      	mov	r2, r0
 8009364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009368:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800936c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800936e:	f107 0310 	add.w	r3, r7, #16
 8009372:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009390:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939c:	3301      	adds	r3, #1
 800939e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093a6:	2218      	movs	r2, #24
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 ff9c 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093b0:	233f      	movs	r3, #63	; 0x3f
 80093b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80093b6:	2385      	movs	r3, #133	; 0x85
 80093b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093bc:	f107 0310 	add.w	r3, r7, #16
 80093c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093cc:	f107 030f 	add.w	r3, r7, #15
 80093d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80093d4:	2301      	movs	r3, #1
 80093d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fa0b 	bl	800a7fc <hci_send_req>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	da01      	bge.n	80093f0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80093ec:	23ff      	movs	r3, #255	; 0xff
 80093ee:	e004      	b.n	80093fa <aci_gap_set_io_capability+0x9e>
  return status;
 80093f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093f8:	781b      	ldrb	r3, [r3, #0]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009404:	b5b0      	push	{r4, r5, r7, lr}
 8009406:	b0cc      	sub	sp, #304	; 0x130
 8009408:	af00      	add	r7, sp, #0
 800940a:	4605      	mov	r5, r0
 800940c:	460c      	mov	r4, r1
 800940e:	4610      	mov	r0, r2
 8009410:	4619      	mov	r1, r3
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800941a:	462a      	mov	r2, r5
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009426:	4622      	mov	r2, r4
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009432:	4602      	mov	r2, r0
 8009434:	701a      	strb	r2, [r3, #0]
 8009436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800943a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800943e:	460a      	mov	r2, r1
 8009440:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009442:	f107 0310 	add.w	r3, r7, #16
 8009446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800944a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009452:	2200      	movs	r2, #0
 8009454:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800945c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009460:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009464:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009468:	7812      	ldrb	r2, [r2, #0]
 800946a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800946c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009470:	3301      	adds	r3, #1
 8009472:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800947a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800947e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009486:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800948a:	3301      	adds	r3, #1
 800948c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009494:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009498:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80094a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094a4:	3301      	adds	r3, #1
 80094a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80094aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80094b6:	7812      	ldrb	r2, [r2, #0]
 80094b8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80094ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094be:	3301      	adds	r3, #1
 80094c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80094c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80094cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80094ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094d2:	3301      	adds	r3, #1
 80094d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80094d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094dc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80094e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80094e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e6:	3301      	adds	r3, #1
 80094e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80094ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80094f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80094f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094fa:	3301      	adds	r3, #1
 80094fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009504:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009508:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800950c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009510:	3304      	adds	r3, #4
 8009512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800951e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009524:	3301      	adds	r3, #1
 8009526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800952a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800952e:	2218      	movs	r2, #24
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fed8 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009538:	233f      	movs	r3, #63	; 0x3f
 800953a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800953e:	2386      	movs	r3, #134	; 0x86
 8009540:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009544:	f107 0310 	add.w	r3, r7, #16
 8009548:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800954c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009554:	f107 030f 	add.w	r3, r7, #15
 8009558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800955c:	2301      	movs	r3, #1
 800955e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009566:	2100      	movs	r1, #0
 8009568:	4618      	mov	r0, r3
 800956a:	f001 f947 	bl	800a7fc <hci_send_req>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	da01      	bge.n	8009578 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009574:	23ff      	movs	r3, #255	; 0xff
 8009576:	e004      	b.n	8009582 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009580:	781b      	ldrb	r3, [r3, #0]
}
 8009582:	4618      	mov	r0, r3
 8009584:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009588:	46bd      	mov	sp, r7
 800958a:	bdb0      	pop	{r4, r5, r7, pc}

0800958c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b0cc      	sub	sp, #304	; 0x130
 8009590:	af00      	add	r7, sp, #0
 8009592:	4602      	mov	r2, r0
 8009594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800959c:	6019      	str	r1, [r3, #0]
 800959e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80095a8:	f107 0310 	add.w	r3, r7, #16
 80095ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80095c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80095ce:	8812      	ldrh	r2, [r2, #0]
 80095d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095d6:	3302      	adds	r3, #2
 80095d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80095dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095e4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80095e8:	6812      	ldr	r2, [r2, #0]
 80095ea:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80095ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f2:	3304      	adds	r3, #4
 80095f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095fc:	2218      	movs	r2, #24
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fe71 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009606:	233f      	movs	r3, #63	; 0x3f
 8009608:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800960c:	2388      	movs	r3, #136	; 0x88
 800960e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009612:	f107 0310 	add.w	r3, r7, #16
 8009616:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800961a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800961e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009622:	f107 030f 	add.w	r3, r7, #15
 8009626:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800962a:	2301      	movs	r3, #1
 800962c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009630:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009634:	2100      	movs	r1, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f001 f8e0 	bl	800a7fc <hci_send_req>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	da01      	bge.n	8009646 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009642:	23ff      	movs	r3, #255	; 0xff
 8009644:	e004      	b.n	8009650 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800964e:	781b      	ldrb	r3, [r3, #0]
}
 8009650:	4618      	mov	r0, r3
 8009652:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800965a:	b590      	push	{r4, r7, lr}
 800965c:	b0cd      	sub	sp, #308	; 0x134
 800965e:	af00      	add	r7, sp, #0
 8009660:	4604      	mov	r4, r0
 8009662:	4608      	mov	r0, r1
 8009664:	4611      	mov	r1, r2
 8009666:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800966a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009674:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009678:	4622      	mov	r2, r4
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009680:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009684:	4602      	mov	r2, r0
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009690:	460a      	mov	r2, r1
 8009692:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009694:	f107 0310 	add.w	r3, r7, #16
 8009698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800969c:	f107 0308 	add.w	r3, r7, #8
 80096a0:	2207      	movs	r2, #7
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fe1f 	bl	800a2e8 <Osal_MemSet>
  int index_input = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80096b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096c4:	3301      	adds	r3, #1
 80096c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80096ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096d2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80096d6:	7812      	ldrb	r2, [r2, #0]
 80096d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80096da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096de:	3301      	adds	r3, #1
 80096e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80096e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096ec:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80096f0:	7812      	ldrb	r2, [r2, #0]
 80096f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80096f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096f8:	3301      	adds	r3, #1
 80096fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009702:	2218      	movs	r2, #24
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fdee 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800970c:	233f      	movs	r3, #63	; 0x3f
 800970e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009712:	238a      	movs	r3, #138	; 0x8a
 8009714:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009718:	f107 0310 	add.w	r3, r7, #16
 800971c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009724:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009728:	f107 0308 	add.w	r3, r7, #8
 800972c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009730:	2307      	movs	r3, #7
 8009732:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800973a:	2100      	movs	r1, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f001 f85d 	bl	800a7fc <hci_send_req>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	da01      	bge.n	800974c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009748:	23ff      	movs	r3, #255	; 0xff
 800974a:	e02e      	b.n	80097aa <aci_gap_init+0x150>
  if ( resp.Status )
 800974c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009750:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d005      	beq.n	8009766 <aci_gap_init+0x10c>
    return resp.Status;
 800975a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	e021      	b.n	80097aa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800976e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009772:	b29a      	uxth	r2, r3
 8009774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009784:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009788:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800978c:	b29a      	uxth	r2, r3
 800978e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009792:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009798:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800979c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80097a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd90      	pop	{r4, r7, pc}

080097b4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b0cc      	sub	sp, #304	; 0x130
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4602      	mov	r2, r0
 80097bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c4:	6019      	str	r1, [r3, #0]
 80097c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80097ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80097d0:	f107 0310 	add.w	r3, r7, #16
 80097d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097e0:	2200      	movs	r2, #0
 80097e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80097ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097f2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80097f6:	7812      	ldrb	r2, [r2, #0]
 80097f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097fe:	3301      	adds	r3, #1
 8009800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009808:	1c58      	adds	r0, r3, #1
 800980a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981c:	6819      	ldr	r1, [r3, #0]
 800981e:	f000 fd53 	bl	800a2c8 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009826:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009830:	4413      	add	r3, r2
 8009832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009836:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800983a:	2218      	movs	r2, #24
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fd52 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009844:	233f      	movs	r3, #63	; 0x3f
 8009846:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800984a:	238e      	movs	r3, #142	; 0x8e
 800984c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009850:	f107 0310 	add.w	r3, r7, #16
 8009854:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800985c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009860:	f107 030f 	add.w	r3, r7, #15
 8009864:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009868:	2301      	movs	r3, #1
 800986a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800986e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f000 ffc1 	bl	800a7fc <hci_send_req>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	da01      	bge.n	8009884 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009880:	23ff      	movs	r3, #255	; 0xff
 8009882:	e004      	b.n	800988e <aci_gap_update_adv_data+0xda>
  return status;
 8009884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009888:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800988c:	781b      	ldrb	r3, [r3, #0]
}
 800988e:	4618      	mov	r0, r3
 8009890:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098a2:	f107 0308 	add.w	r3, r7, #8
 80098a6:	2218      	movs	r2, #24
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fd1c 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098b0:	233f      	movs	r3, #63	; 0x3f
 80098b2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80098b4:	2392      	movs	r3, #146	; 0x92
 80098b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80098bc:	2301      	movs	r3, #1
 80098be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	2100      	movs	r1, #0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 ff98 	bl	800a7fc <hci_send_req>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	da01      	bge.n	80098d6 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80098d2:	23ff      	movs	r3, #255	; 0xff
 80098d4:	e000      	b.n	80098d8 <aci_gap_configure_whitelist+0x40>
  return status;
 80098d6:	79fb      	ldrb	r3, [r7, #7]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b0cc      	sub	sp, #304	; 0x130
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4602      	mov	r2, r0
 80098e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80098f0:	801a      	strh	r2, [r3, #0]
 80098f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80098fa:	460a      	mov	r2, r1
 80098fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80098fe:	f107 0310 	add.w	r3, r7, #16
 8009902:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800990e:	2200      	movs	r2, #0
 8009910:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800991c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009920:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009924:	8812      	ldrh	r2, [r2, #0]
 8009926:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800992c:	3302      	adds	r3, #2
 800992e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009936:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800993a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009946:	3301      	adds	r3, #1
 8009948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800994c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009950:	2218      	movs	r2, #24
 8009952:	2100      	movs	r1, #0
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fcc7 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800995a:	233f      	movs	r3, #63	; 0x3f
 800995c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009960:	23a5      	movs	r3, #165	; 0xa5
 8009962:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009966:	f107 0310 	add.w	r3, r7, #16
 800996a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800996e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009972:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009976:	f107 030f 	add.w	r3, r7, #15
 800997a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800997e:	2301      	movs	r3, #1
 8009980:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f000 ff36 	bl	800a7fc <hci_send_req>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	da01      	bge.n	800999a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009996:	23ff      	movs	r3, #255	; 0xff
 8009998:	e004      	b.n	80099a4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800999a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099a2:	781b      	ldrb	r3, [r3, #0]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b088      	sub	sp, #32
 80099b2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099b8:	f107 0308 	add.w	r3, r7, #8
 80099bc:	2218      	movs	r2, #24
 80099be:	2100      	movs	r1, #0
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 fc91 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099c6:	233f      	movs	r3, #63	; 0x3f
 80099c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80099ca:	f240 1301 	movw	r3, #257	; 0x101
 80099ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80099d0:	1dfb      	adds	r3, r7, #7
 80099d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80099d4:	2301      	movs	r3, #1
 80099d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099d8:	f107 0308 	add.w	r3, r7, #8
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 ff0c 	bl	800a7fc <hci_send_req>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da01      	bge.n	80099ee <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80099ea:	23ff      	movs	r3, #255	; 0xff
 80099ec:	e000      	b.n	80099f0 <aci_gatt_init+0x42>
  return status;
 80099ee:	79fb      	ldrb	r3, [r7, #7]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3720      	adds	r7, #32
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80099f8:	b590      	push	{r4, r7, lr}
 80099fa:	b0cf      	sub	sp, #316	; 0x13c
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009a04:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009a08:	6001      	str	r1, [r0, #0]
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a12:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009a16:	4622      	mov	r2, r4
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a1e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009a22:	4602      	mov	r2, r0
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a2a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009a2e:	460a      	mov	r2, r1
 8009a30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009a32:	f107 0310 	add.w	r3, r7, #16
 8009a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009a3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a3e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d00a      	beq.n	8009a5e <aci_gatt_add_service+0x66>
 8009a48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a4c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d101      	bne.n	8009a5a <aci_gatt_add_service+0x62>
 8009a56:	2311      	movs	r3, #17
 8009a58:	e002      	b.n	8009a60 <aci_gatt_add_service+0x68>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e000      	b.n	8009a60 <aci_gatt_add_service+0x68>
 8009a5e:	2303      	movs	r3, #3
 8009a60:	f107 0210 	add.w	r2, r7, #16
 8009a64:	4413      	add	r3, r2
 8009a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009a6a:	f107 030c 	add.w	r3, r7, #12
 8009a6e:	2203      	movs	r2, #3
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 fc38 	bl	800a2e8 <Osal_MemSet>
  int index_input = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009a7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a82:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a86:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009a8a:	7812      	ldrb	r2, [r2, #0]
 8009a8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a92:	3301      	adds	r3, #1
 8009a94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009a98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a9c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d002      	beq.n	8009aac <aci_gatt_add_service+0xb4>
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d004      	beq.n	8009ab4 <aci_gatt_add_service+0xbc>
 8009aaa:	e007      	b.n	8009abc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009aac:	2302      	movs	r3, #2
 8009aae:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009ab2:	e005      	b.n	8009ac0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009aba:	e001      	b.n	8009ac0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009abc:	2397      	movs	r3, #151	; 0x97
 8009abe:	e06c      	b.n	8009b9a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009ac0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ac4:	1c58      	adds	r0, r3, #1
 8009ac6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009aca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ace:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	f000 fbf8 	bl	800a2c8 <Osal_MemCpy>
    index_input += size;
 8009ad8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009adc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009aee:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009af2:	7812      	ldrb	r2, [r2, #0]
 8009af4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009afa:	3301      	adds	r3, #1
 8009afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b04:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009b08:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009b0c:	7812      	ldrb	r2, [r2, #0]
 8009b0e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b14:	3301      	adds	r3, #1
 8009b16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b1e:	2218      	movs	r2, #24
 8009b20:	2100      	movs	r1, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fbe0 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b28:	233f      	movs	r3, #63	; 0x3f
 8009b2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009b2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009b32:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b36:	f107 0310 	add.w	r3, r7, #16
 8009b3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009b46:	f107 030c 	add.w	r3, r7, #12
 8009b4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009b4e:	2303      	movs	r3, #3
 8009b50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fe4e 	bl	800a7fc <hci_send_req>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da01      	bge.n	8009b6a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009b66:	23ff      	movs	r3, #255	; 0xff
 8009b68:	e017      	b.n	8009b9a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009b6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d005      	beq.n	8009b84 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009b78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	e00a      	b.n	8009b9a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009b84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009b96:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd90      	pop	{r4, r7, pc}

08009ba4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b0d1      	sub	sp, #324	; 0x144
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009bb2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009bb6:	600a      	str	r2, [r1, #0]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bbe:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	801a      	strh	r2, [r3, #0]
 8009bc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bca:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009bce:	4602      	mov	r2, r0
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bd6:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009bda:	460a      	mov	r2, r1
 8009bdc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009bde:	f107 0318 	add.w	r3, r7, #24
 8009be2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009be6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bea:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d00a      	beq.n	8009c0a <aci_gatt_add_char+0x66>
 8009bf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bf8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d101      	bne.n	8009c06 <aci_gatt_add_char+0x62>
 8009c02:	2313      	movs	r3, #19
 8009c04:	e002      	b.n	8009c0c <aci_gatt_add_char+0x68>
 8009c06:	2303      	movs	r3, #3
 8009c08:	e000      	b.n	8009c0c <aci_gatt_add_char+0x68>
 8009c0a:	2305      	movs	r3, #5
 8009c0c:	f107 0218 	add.w	r2, r7, #24
 8009c10:	4413      	add	r3, r2
 8009c12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c16:	f107 0314 	add.w	r3, r7, #20
 8009c1a:	2203      	movs	r2, #3
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fb62 	bl	800a2e8 <Osal_MemSet>
  int index_input = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009c2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c2e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009c32:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009c36:	8812      	ldrh	r2, [r2, #0]
 8009c38:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c3e:	3302      	adds	r3, #2
 8009c40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009c44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c48:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009c4c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009c50:	7812      	ldrb	r2, [r2, #0]
 8009c52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c58:	3301      	adds	r3, #1
 8009c5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009c5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009c62:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d002      	beq.n	8009c72 <aci_gatt_add_char+0xce>
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d004      	beq.n	8009c7a <aci_gatt_add_char+0xd6>
 8009c70:	e007      	b.n	8009c82 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009c72:	2302      	movs	r3, #2
 8009c74:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009c78:	e005      	b.n	8009c86 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009c80:	e001      	b.n	8009c86 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009c82:	2397      	movs	r3, #151	; 0x97
 8009c84:	e091      	b.n	8009daa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009c86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009c8a:	1cd8      	adds	r0, r3, #3
 8009c8c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009c90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009c94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	f000 fb15 	bl	800a2c8 <Osal_MemCpy>
    index_input += size;
 8009c9e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009ca2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009cac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009cb0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009cb4:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009cb8:	8812      	ldrh	r2, [r2, #0]
 8009cba:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009cbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009cca:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009cce:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009cd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009cda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009cde:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009ce2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009ce4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ce8:	3301      	adds	r3, #1
 8009cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009cee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009cf2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009cf6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009cf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d06:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009d0a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009d10:	3301      	adds	r3, #1
 8009d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009d1a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009d1e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009d20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009d24:	3301      	adds	r3, #1
 8009d26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009d2e:	2218      	movs	r2, #24
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 fad8 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d38:	233f      	movs	r3, #63	; 0x3f
 8009d3a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009d3e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009d42:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009d46:	f107 0318 	add.w	r3, r7, #24
 8009d4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009d56:	f107 0314 	add.w	r3, r7, #20
 8009d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009d5e:	2303      	movs	r3, #3
 8009d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fd46 	bl	800a7fc <hci_send_req>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da01      	bge.n	8009d7a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009d76:	23ff      	movs	r3, #255	; 0xff
 8009d78:	e017      	b.n	8009daa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009d7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009d88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	e00a      	b.n	8009daa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009d94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d9c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009da6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd90      	pop	{r4, r7, pc}

08009db4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009db4:	b5b0      	push	{r4, r5, r7, lr}
 8009db6:	b0cc      	sub	sp, #304	; 0x130
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4605      	mov	r5, r0
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009dca:	462a      	mov	r2, r5
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	801a      	strh	r2, [r3, #0]
 8009dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dde:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009de2:	4602      	mov	r2, r0
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dea:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009dee:	460a      	mov	r2, r1
 8009df0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009df2:	f107 0310 	add.w	r3, r7, #16
 8009df6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dfe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e14:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009e18:	8812      	ldrh	r2, [r2, #0]
 8009e1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e20:	3302      	adds	r3, #2
 8009e22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e2e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009e32:	8812      	ldrh	r2, [r2, #0]
 8009e34:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e3a:	3302      	adds	r3, #2
 8009e3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e48:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009e4c:	7812      	ldrb	r2, [r2, #0]
 8009e4e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009e50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e54:	3301      	adds	r3, #1
 8009e56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e62:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e6e:	3301      	adds	r3, #1
 8009e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e78:	1d98      	adds	r0, r3, #6
 8009e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009e8a:	f000 fa1d 	bl	800a2c8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e92:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ea2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ea6:	2218      	movs	r2, #24
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fa1c 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009eb0:	233f      	movs	r3, #63	; 0x3f
 8009eb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009eb6:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009eba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ebe:	f107 0310 	add.w	r3, r7, #16
 8009ec2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ece:	f107 030f 	add.w	r3, r7, #15
 8009ed2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009edc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fc8a 	bl	800a7fc <hci_send_req>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da01      	bge.n	8009ef2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009eee:	23ff      	movs	r3, #255	; 0xff
 8009ef0:	e004      	b.n	8009efc <aci_gatt_update_char_value+0x148>
  return status;
 8009ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009efa:	781b      	ldrb	r3, [r3, #0]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bdb0      	pop	{r4, r5, r7, pc}

08009f06 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b0cc      	sub	sp, #304	; 0x130
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009f1e:	4602      	mov	r2, r0
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009f2a:	460a      	mov	r2, r1
 8009f2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009f2e:	f107 0310 	add.w	r3, r7, #16
 8009f32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f50:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009f54:	7812      	ldrb	r2, [r2, #0]
 8009f56:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f6a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009f6e:	7812      	ldrb	r2, [r2, #0]
 8009f70:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f76:	3301      	adds	r3, #1
 8009f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f80:	1c98      	adds	r0, r3, #2
 8009f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009f8a:	781a      	ldrb	r2, [r3, #0]
 8009f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f94:	6819      	ldr	r1, [r3, #0]
 8009f96:	f000 f997 	bl	800a2c8 <Osal_MemCpy>
  index_input += Length;
 8009f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f9e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009fa8:	4413      	add	r3, r2
 8009faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fb2:	2218      	movs	r2, #24
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 f996 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fbc:	233f      	movs	r3, #63	; 0x3f
 8009fbe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009fc2:	230c      	movs	r3, #12
 8009fc4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009fd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009fd8:	f107 030f 	add.w	r3, r7, #15
 8009fdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fc05 	bl	800a7fc <hci_send_req>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	da01      	bge.n	8009ffc <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009ff8:	23ff      	movs	r3, #255	; 0xff
 8009ffa:	e004      	b.n	800a006 <aci_hal_write_config_data+0x100>
  return status;
 8009ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a000:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a004:	781b      	ldrb	r3, [r3, #0]
}
 800a006:	4618      	mov	r0, r3
 800a008:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b0cc      	sub	sp, #304	; 0x130
 800a014:	af00      	add	r7, sp, #0
 800a016:	4602      	mov	r2, r0
 800a018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a026:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a02a:	460a      	mov	r2, r1
 800a02c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a02e:	f107 0310 	add.w	r3, r7, #16
 800a032:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a03a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a03e:	2200      	movs	r2, #0
 800a040:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a04c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a050:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a054:	7812      	ldrb	r2, [r2, #0]
 800a056:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a05c:	3301      	adds	r3, #1
 800a05e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a066:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a06a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a076:	3301      	adds	r3, #1
 800a078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a07c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a080:	2218      	movs	r2, #24
 800a082:	2100      	movs	r1, #0
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f92f 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a08a:	233f      	movs	r3, #63	; 0x3f
 800a08c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a090:	230f      	movs	r3, #15
 800a092:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a096:	f107 0310 	add.w	r3, r7, #16
 800a09a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a09e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a0a6:	f107 030f 	add.w	r3, r7, #15
 800a0aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fb9e 	bl	800a7fc <hci_send_req>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	da01      	bge.n	800a0ca <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a0c6:	23ff      	movs	r3, #255	; 0xff
 800a0c8:	e004      	b.n	800a0d4 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a0ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0d2:	781b      	ldrb	r3, [r3, #0]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b0cc      	sub	sp, #304	; 0x130
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a0ee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a100:	2200      	movs	r2, #0
 800a102:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a10a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a10e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a112:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a116:	8812      	ldrh	r2, [r2, #0]
 800a118:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a11a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a11e:	3302      	adds	r3, #2
 800a120:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a124:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a128:	2218      	movs	r2, #24
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 f8db 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a132:	233f      	movs	r3, #63	; 0x3f
 800a134:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a138:	2318      	movs	r3, #24
 800a13a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a13e:	f107 0310 	add.w	r3, r7, #16
 800a142:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a14a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a14e:	f107 030f 	add.w	r3, r7, #15
 800a152:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a156:	2301      	movs	r3, #1
 800a158:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a15c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a160:	2100      	movs	r1, #0
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fb4a 	bl	800a7fc <hci_send_req>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da01      	bge.n	800a172 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a16e:	23ff      	movs	r3, #255	; 0xff
 800a170:	e004      	b.n	800a17c <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a176:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a17a:	781b      	ldrb	r3, [r3, #0]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b088      	sub	sp, #32
 800a18a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a190:	f107 0308 	add.w	r3, r7, #8
 800a194:	2218      	movs	r2, #24
 800a196:	2100      	movs	r1, #0
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f8a5 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x03;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a1a6:	1dfb      	adds	r3, r7, #7
 800a1a8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1ae:	f107 0308 	add.w	r3, r7, #8
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fb21 	bl	800a7fc <hci_send_req>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	da01      	bge.n	800a1c4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a1c0:	23ff      	movs	r3, #255	; 0xff
 800a1c2:	e000      	b.n	800a1c6 <hci_reset+0x40>
  return status;
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a1ce:	b590      	push	{r4, r7, lr}
 800a1d0:	b0cd      	sub	sp, #308	; 0x134
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	4611      	mov	r1, r2
 800a1da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	701a      	strb	r2, [r3, #0]
 800a1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	701a      	strb	r2, [r3, #0]
 800a1f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a1fe:	f107 0310 	add.w	r3, r7, #16
 800a202:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a20a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a20e:	2200      	movs	r2, #0
 800a210:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a21c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a220:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a224:	7812      	ldrb	r2, [r2, #0]
 800a226:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a22c:	3301      	adds	r3, #1
 800a22e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a23a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a23e:	7812      	ldrb	r2, [r2, #0]
 800a240:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a246:	3301      	adds	r3, #1
 800a248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a250:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a254:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a25c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a260:	3301      	adds	r3, #1
 800a262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a26a:	2218      	movs	r2, #24
 800a26c:	2100      	movs	r1, #0
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 f83a 	bl	800a2e8 <Osal_MemSet>
  rq.ogf = 0x08;
 800a274:	2308      	movs	r3, #8
 800a276:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a27a:	2331      	movs	r3, #49	; 0x31
 800a27c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a280:	f107 0310 	add.w	r3, r7, #16
 800a284:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a288:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a28c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a290:	f107 030f 	add.w	r3, r7, #15
 800a294:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a29e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 faa9 	bl	800a7fc <hci_send_req>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	da01      	bge.n	800a2b4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a2b0:	23ff      	movs	r3, #255	; 0xff
 800a2b2:	e004      	b.n	800a2be <hci_le_set_default_phy+0xf0>
  return status;
 800a2b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a2bc:	781b      	ldrb	r3, [r3, #0]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd90      	pop	{r4, r7, pc}

0800a2c8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f002 f8db 	bl	800c494 <memcpy>
 800a2de:	4603      	mov	r3, r0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f002 f8d9 	bl	800c4b0 <memset>
 800a2fe:	4603      	mov	r3, r0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
  return;
 800a30c:	bf00      	nop
}
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a316:	b480      	push	{r7}
 800a318:	af00      	add	r7, sp, #0
  return;
 800a31a:	bf00      	nop
}
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  return;
 800a328:	bf00      	nop
}
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a332:	b480      	push	{r7}
 800a334:	af00      	add	r7, sp, #0
  return;
 800a336:	bf00      	nop
}
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a340:	b480      	push	{r7}
 800a342:	af00      	add	r7, sp, #0
  return;
 800a344:	bf00      	nop
}
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a34e:	b480      	push	{r7}
 800a350:	af00      	add	r7, sp, #0
  return;
 800a352:	bf00      	nop
}
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
  return;
 800a360:	bf00      	nop
}
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a36a:	b480      	push	{r7}
 800a36c:	af00      	add	r7, sp, #0
  return;
 800a36e:	bf00      	nop
}
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
  return;
 800a37c:	bf00      	nop
}
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a386:	b480      	push	{r7}
 800a388:	af00      	add	r7, sp, #0
  return;
 800a38a:	bf00      	nop
}
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
  return;
 800a398:	bf00      	nop
}
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	af00      	add	r7, sp, #0
  return;
 800a3a6:	bf00      	nop
}
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  return;
 800a3b4:	bf00      	nop
}
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a3be:	b480      	push	{r7}
 800a3c0:	af00      	add	r7, sp, #0
  return;
 800a3c2:	bf00      	nop
}
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
  return;
 800a3d0:	bf00      	nop
}
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a3da:	b480      	push	{r7}
 800a3dc:	af00      	add	r7, sp, #0
  return;
 800a3de:	bf00      	nop
}
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	af00      	add	r7, sp, #0
  return;
 800a3ec:	bf00      	nop
}
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <SVCCTL_Init+0x18>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a402:	4b04      	ldr	r3, [pc, #16]	; (800a414 <SVCCTL_Init+0x1c>)
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a408:	f000 f806 	bl	800a418 <SVCCTL_SvcInit>

  return;
 800a40c:	bf00      	nop
}
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20000910 	.word	0x20000910
 800a414:	20000930 	.word	0x20000930

0800a418 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  BAS_Init();
 800a41c:	f7ff ff74 	bl	800a308 <BAS_Init>

  BLS_Init();
 800a420:	f7ff ff79 	bl	800a316 <BLS_Init>

  CRS_STM_Init();
 800a424:	f7ff ff7e 	bl	800a324 <CRS_STM_Init>

  DIS_Init();
 800a428:	f7ff ff83 	bl	800a332 <DIS_Init>

  EDS_STM_Init();
 800a42c:	f7ff ff88 	bl	800a340 <EDS_STM_Init>

  HIDS_Init();
 800a430:	f7ff ff8d 	bl	800a34e <HIDS_Init>

  HRS_Init();
 800a434:	f7ff ff92 	bl	800a35c <HRS_Init>

  HTS_Init();
 800a438:	f7ff ff97 	bl	800a36a <HTS_Init>

  IAS_Init();
 800a43c:	f7ff ff9c 	bl	800a378 <IAS_Init>

  LLS_Init();
 800a440:	f7ff ffa1 	bl	800a386 <LLS_Init>

  TPS_Init();
 800a444:	f7ff ffa6 	bl	800a394 <TPS_Init>

  MOTENV_STM_Init();
 800a448:	f7ff ffab 	bl	800a3a2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a44c:	f7ff ffb0 	bl	800a3b0 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a450:	f7ff ffb5 	bl	800a3be <ZDD_STM_Init>

  OTAS_STM_Init();
 800a454:	f7ff ffba 	bl	800a3cc <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a458:	f7ff ffc6 	bl	800a3e8 <BVOPUS_STM_Init>

  MESH_Init();
 800a45c:	f7ff ffbd 	bl	800a3da <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a460:	f001 faaa 	bl	800b9b8 <SVCCTL_InitCustomSvc>
  
  return;
 800a464:	bf00      	nop
}
 800a466:	bd80      	pop	{r7, pc}

0800a468 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a470:	4b09      	ldr	r3, [pc, #36]	; (800a498 <SVCCTL_RegisterSvcHandler+0x30>)
 800a472:	7f1b      	ldrb	r3, [r3, #28]
 800a474:	4619      	mov	r1, r3
 800a476:	4a08      	ldr	r2, [pc, #32]	; (800a498 <SVCCTL_RegisterSvcHandler+0x30>)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a47e:	4b06      	ldr	r3, [pc, #24]	; (800a498 <SVCCTL_RegisterSvcHandler+0x30>)
 800a480:	7f1b      	ldrb	r3, [r3, #28]
 800a482:	3301      	adds	r3, #1
 800a484:	b2da      	uxtb	r2, r3
 800a486:	4b04      	ldr	r3, [pc, #16]	; (800a498 <SVCCTL_RegisterSvcHandler+0x30>)
 800a488:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a48a:	bf00      	nop
}
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	20000910 	.word	0x20000910

0800a49c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	2bff      	cmp	r3, #255	; 0xff
 800a4b4:	d125      	bne.n	800a502 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	3302      	adds	r3, #2
 800a4ba:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4ca:	d118      	bne.n	800a4fe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	757b      	strb	r3, [r7, #21]
 800a4d0:	e00d      	b.n	800a4ee <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a4d2:	7d7b      	ldrb	r3, [r7, #21]
 800a4d4:	4a1a      	ldr	r2, [pc, #104]	; (800a540 <SVCCTL_UserEvtRx+0xa4>)
 800a4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	4798      	blx	r3
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d108      	bne.n	800a4fa <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a4e8:	7d7b      	ldrb	r3, [r7, #21]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	757b      	strb	r3, [r7, #21]
 800a4ee:	4b14      	ldr	r3, [pc, #80]	; (800a540 <SVCCTL_UserEvtRx+0xa4>)
 800a4f0:	7f1b      	ldrb	r3, [r3, #28]
 800a4f2:	7d7a      	ldrb	r2, [r7, #21]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d3ec      	bcc.n	800a4d2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a4f8:	e002      	b.n	800a500 <SVCCTL_UserEvtRx+0x64>
              break;
 800a4fa:	bf00      	nop
          break;
 800a4fc:	e000      	b.n	800a500 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a4fe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a500:	e000      	b.n	800a504 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a502:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d00f      	beq.n	800a52a <SVCCTL_UserEvtRx+0x8e>
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	dc10      	bgt.n	800a530 <SVCCTL_UserEvtRx+0x94>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <SVCCTL_UserEvtRx+0x7c>
 800a512:	2b01      	cmp	r3, #1
 800a514:	d006      	beq.n	800a524 <SVCCTL_UserEvtRx+0x88>
 800a516:	e00b      	b.n	800a530 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 ff7b 	bl	800b414 <SVCCTL_App_Notification>
 800a51e:	4603      	mov	r3, r0
 800a520:	75bb      	strb	r3, [r7, #22]
      break;
 800a522:	e008      	b.n	800a536 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a524:	2301      	movs	r3, #1
 800a526:	75bb      	strb	r3, [r7, #22]
      break;
 800a528:	e005      	b.n	800a536 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75bb      	strb	r3, [r7, #22]
      break;
 800a52e:	e002      	b.n	800a536 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a530:	2301      	movs	r3, #1
 800a532:	75bb      	strb	r3, [r7, #22]
      break;
 800a534:	bf00      	nop
  }

  return (return_status);
 800a536:	7dbb      	ldrb	r3, [r7, #22]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000910 	.word	0x20000910

0800a544 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a54c:	f107 030c 	add.w	r3, r7, #12
 800a550:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	212e      	movs	r1, #46	; 0x2e
 800a55c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a560:	f000 fae2 	bl	800ab28 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	330b      	adds	r3, #11
 800a568:	78db      	ldrb	r3, [r3, #3]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3720      	adds	r7, #32
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b088      	sub	sp, #32
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a57a:	f107 030c 	add.w	r3, r7, #12
 800a57e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	210f      	movs	r1, #15
 800a58a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a58e:	f000 facb 	bl	800ab28 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	330b      	adds	r3, #11
 800a596:	78db      	ldrb	r3, [r3, #3]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3720      	adds	r7, #32
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b088      	sub	sp, #32
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a5a8:	f107 030c 	add.w	r3, r7, #12
 800a5ac:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	2110      	movs	r1, #16
 800a5b4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a5b8:	f000 fab6 	bl	800ab28 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	330b      	adds	r3, #11
 800a5c0:	78db      	ldrb	r3, [r3, #3]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3720      	adds	r7, #32
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b08b      	sub	sp, #44	; 0x2c
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a5f4:	4b4a      	ldr	r3, [pc, #296]	; (800a720 <SHCI_GetWirelessFwInfo+0x154>)
 800a5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a5fc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a606:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a44      	ldr	r2, [pc, #272]	; (800a724 <SHCI_GetWirelessFwInfo+0x158>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d10f      	bne.n	800a638 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	695b      	ldr	r3, [r3, #20]
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	e01a      	b.n	800a66e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a640:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a644:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	0e1b      	lsrs	r3, r3, #24
 800a672:	b2da      	uxtb	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	0c1b      	lsrs	r3, r3, #16
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	0a1b      	lsrs	r3, r3, #8
 800a686:	b2da      	uxtb	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	091b      	lsrs	r3, r3, #4
 800a690:	b2db      	uxtb	r3, r3
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	b2da      	uxtb	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	f003 030f 	and.w	r3, r3, #15
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	0e1b      	lsrs	r3, r3, #24
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	0c1b      	lsrs	r3, r3, #16
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	0a1b      	lsrs	r3, r3, #8
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	0e1b      	lsrs	r3, r3, #24
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	0c1b      	lsrs	r3, r3, #16
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	0e1b      	lsrs	r3, r3, #24
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	b2da      	uxtb	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	372c      	adds	r7, #44	; 0x2c
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	58004000 	.word	0x58004000
 800a724:	a94656b9 	.word	0xa94656b9

0800a728 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	4a08      	ldr	r2, [pc, #32]	; (800a758 <hci_init+0x30>)
 800a738:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a73a:	4a08      	ldr	r2, [pc, #32]	; (800a75c <hci_init+0x34>)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a740:	4806      	ldr	r0, [pc, #24]	; (800a75c <hci_init+0x34>)
 800a742:	f000 f973 	bl	800aa2c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f8d4 	bl	800a8f8 <TlInit>

  return;
 800a750:	bf00      	nop
}
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	200010fc 	.word	0x200010fc
 800a75c:	200010d4 	.word	0x200010d4

0800a760 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a766:	4822      	ldr	r0, [pc, #136]	; (800a7f0 <hci_user_evt_proc+0x90>)
 800a768:	f000 fd28 	bl	800b1bc <LST_is_empty>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d12b      	bne.n	800a7ca <hci_user_evt_proc+0x6a>
 800a772:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <hci_user_evt_proc+0x94>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d027      	beq.n	800a7ca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a77a:	f107 030c 	add.w	r3, r7, #12
 800a77e:	4619      	mov	r1, r3
 800a780:	481b      	ldr	r0, [pc, #108]	; (800a7f0 <hci_user_evt_proc+0x90>)
 800a782:	f000 fdaa 	bl	800b2da <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a786:	4b1c      	ldr	r3, [pc, #112]	; (800a7f8 <hci_user_evt_proc+0x98>)
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a792:	2301      	movs	r3, #1
 800a794:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a796:	4b18      	ldr	r3, [pc, #96]	; (800a7f8 <hci_user_evt_proc+0x98>)
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	1d3a      	adds	r2, r7, #4
 800a79c:	4610      	mov	r0, r2
 800a79e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a7a0:	793a      	ldrb	r2, [r7, #4]
 800a7a2:	4b14      	ldr	r3, [pc, #80]	; (800a7f4 <hci_user_evt_proc+0x94>)
 800a7a4:	701a      	strb	r2, [r3, #0]
 800a7a6:	e002      	b.n	800a7ae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a7a8:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <hci_user_evt_proc+0x94>)
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a7ae:	4b11      	ldr	r3, [pc, #68]	; (800a7f4 <hci_user_evt_proc+0x94>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d004      	beq.n	800a7c0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fc03 	bl	800afc4 <TL_MM_EvtDone>
 800a7be:	e004      	b.n	800a7ca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	480a      	ldr	r0, [pc, #40]	; (800a7f0 <hci_user_evt_proc+0x90>)
 800a7c6:	f000 fd1b 	bl	800b200 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a7ca:	4809      	ldr	r0, [pc, #36]	; (800a7f0 <hci_user_evt_proc+0x90>)
 800a7cc:	f000 fcf6 	bl	800b1bc <LST_is_empty>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d107      	bne.n	800a7e6 <hci_user_evt_proc+0x86>
 800a7d6:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <hci_user_evt_proc+0x94>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a7de:	4804      	ldr	r0, [pc, #16]	; (800a7f0 <hci_user_evt_proc+0x90>)
 800a7e0:	f001 f830 	bl	800b844 <hci_notify_asynch_evt>
  }


  return;
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
}
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20000938 	.word	0x20000938
 800a7f4:	20000944 	.word	0x20000944
 800a7f8:	200010d4 	.word	0x200010d4

0800a7fc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a808:	2000      	movs	r0, #0
 800a80a:	f000 f8cb 	bl	800a9a4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a80e:	2300      	movs	r3, #0
 800a810:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	885b      	ldrh	r3, [r3, #2]
 800a816:	b21b      	sxth	r3, r3
 800a818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a81c:	b21a      	sxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	029b      	lsls	r3, r3, #10
 800a824:	b21b      	sxth	r3, r3
 800a826:	4313      	orrs	r3, r2
 800a828:	b21b      	sxth	r3, r3
 800a82a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	b2d9      	uxtb	r1, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	8bbb      	ldrh	r3, [r7, #28]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 f88d 	bl	800a958 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a83e:	e04e      	b.n	800a8de <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a840:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a844:	f001 f815 	bl	800b872 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a848:	e043      	b.n	800a8d2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a84a:	f107 030c 	add.w	r3, r7, #12
 800a84e:	4619      	mov	r1, r3
 800a850:	4828      	ldr	r0, [pc, #160]	; (800a8f4 <hci_send_req+0xf8>)
 800a852:	f000 fd42 	bl	800b2da <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	7a5b      	ldrb	r3, [r3, #9]
 800a85a:	2b0f      	cmp	r3, #15
 800a85c:	d114      	bne.n	800a888 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	330b      	adds	r3, #11
 800a862:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	885b      	ldrh	r3, [r3, #2]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	8bba      	ldrh	r2, [r7, #28]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d104      	bne.n	800a87a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	7812      	ldrb	r2, [r2, #0]
 800a878:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	785b      	ldrb	r3, [r3, #1]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d027      	beq.n	800a8d2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a882:	2301      	movs	r3, #1
 800a884:	77fb      	strb	r3, [r7, #31]
 800a886:	e024      	b.n	800a8d2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	330b      	adds	r3, #11
 800a88c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a894:	b29b      	uxth	r3, r3
 800a896:	8bba      	ldrh	r2, [r7, #28]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d114      	bne.n	800a8c6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	7a9b      	ldrb	r3, [r3, #10]
 800a8a0:	3b03      	subs	r3, #3
 800a8a2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	bfa8      	it	ge
 800a8ae:	461a      	movge	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6918      	ldr	r0, [r3, #16]
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	1cd9      	adds	r1, r3, #3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f001 fde7 	bl	800c494 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a8d2:	4808      	ldr	r0, [pc, #32]	; (800a8f4 <hci_send_req+0xf8>)
 800a8d4:	f000 fc72 	bl	800b1bc <LST_is_empty>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0b5      	beq.n	800a84a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a8de:	7ffb      	ldrb	r3, [r7, #31]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0ad      	beq.n	800a840 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	f000 f85d 	bl	800a9a4 <NotifyCmdStatus>

  return 0;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3720      	adds	r7, #32
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	200010f4 	.word	0x200010f4

0800a8f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a900:	480f      	ldr	r0, [pc, #60]	; (800a940 <TlInit+0x48>)
 800a902:	f000 fc4b 	bl	800b19c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a906:	4a0f      	ldr	r2, [pc, #60]	; (800a944 <TlInit+0x4c>)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a90c:	480e      	ldr	r0, [pc, #56]	; (800a948 <TlInit+0x50>)
 800a90e:	f000 fc45 	bl	800b19c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a912:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <TlInit+0x54>)
 800a914:	2201      	movs	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a918:	4b0d      	ldr	r3, [pc, #52]	; (800a950 <TlInit+0x58>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a924:	4b0b      	ldr	r3, [pc, #44]	; (800a954 <TlInit+0x5c>)
 800a926:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a928:	4b09      	ldr	r3, [pc, #36]	; (800a950 <TlInit+0x58>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f107 0208 	add.w	r2, r7, #8
 800a930:	4610      	mov	r0, r2
 800a932:	4798      	blx	r3
  }

  return;
 800a934:	bf00      	nop
 800a936:	bf00      	nop
}
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	200010f4 	.word	0x200010f4
 800a944:	20000940 	.word	0x20000940
 800a948:	20000938 	.word	0x20000938
 800a94c:	20000944 	.word	0x20000944
 800a950:	200010d4 	.word	0x200010d4
 800a954:	0800a9e5 	.word	0x0800a9e5

0800a958 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	603a      	str	r2, [r7, #0]
 800a962:	80fb      	strh	r3, [r7, #6]
 800a964:	460b      	mov	r3, r1
 800a966:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a968:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <SendCmd+0x44>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	88fa      	ldrh	r2, [r7, #6]
 800a96e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a972:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <SendCmd+0x44>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	797a      	ldrb	r2, [r7, #5]
 800a978:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a97a:	4b08      	ldr	r3, [pc, #32]	; (800a99c <SendCmd+0x44>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	330c      	adds	r3, #12
 800a980:	797a      	ldrb	r2, [r7, #5]
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fd85 	bl	800c494 <memcpy>

  hciContext.io.Send(0,0);
 800a98a:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <SendCmd+0x48>)
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	2100      	movs	r1, #0
 800a990:	2000      	movs	r0, #0
 800a992:	4798      	blx	r3

  return;
 800a994:	bf00      	nop
}
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20000940 	.word	0x20000940
 800a9a0:	200010d4 	.word	0x200010d4

0800a9a4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d108      	bne.n	800a9c6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a9b4:	4b0a      	ldr	r3, [pc, #40]	; (800a9e0 <NotifyCmdStatus+0x3c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00d      	beq.n	800a9d8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a9bc:	4b08      	ldr	r3, [pc, #32]	; (800a9e0 <NotifyCmdStatus+0x3c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a9c4:	e008      	b.n	800a9d8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a9c6:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <NotifyCmdStatus+0x3c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d004      	beq.n	800a9d8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a9ce:	4b04      	ldr	r3, [pc, #16]	; (800a9e0 <NotifyCmdStatus+0x3c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	4798      	blx	r3
  return;
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
}
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	200010fc 	.word	0x200010fc

0800a9e4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	7a5b      	ldrb	r3, [r3, #9]
 800a9f0:	2b0f      	cmp	r3, #15
 800a9f2:	d003      	beq.n	800a9fc <TlEvtReceived+0x18>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7a5b      	ldrb	r3, [r3, #9]
 800a9f8:	2b0e      	cmp	r3, #14
 800a9fa:	d107      	bne.n	800aa0c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	4809      	ldr	r0, [pc, #36]	; (800aa24 <TlEvtReceived+0x40>)
 800aa00:	f000 fc24 	bl	800b24c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800aa04:	2000      	movs	r0, #0
 800aa06:	f000 ff29 	bl	800b85c <hci_cmd_resp_release>
 800aa0a:	e006      	b.n	800aa1a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	4806      	ldr	r0, [pc, #24]	; (800aa28 <TlEvtReceived+0x44>)
 800aa10:	f000 fc1c 	bl	800b24c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800aa14:	4804      	ldr	r0, [pc, #16]	; (800aa28 <TlEvtReceived+0x44>)
 800aa16:	f000 ff15 	bl	800b844 <hci_notify_asynch_evt>
  }

  return;
 800aa1a:	bf00      	nop
}
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200010f4 	.word	0x200010f4
 800aa28:	20000938 	.word	0x20000938

0800aa2c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4a05      	ldr	r2, [pc, #20]	; (800aa4c <hci_register_io_bus+0x20>)
 800aa38:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a04      	ldr	r2, [pc, #16]	; (800aa50 <hci_register_io_bus+0x24>)
 800aa3e:	611a      	str	r2, [r3, #16]

  return;
 800aa40:	bf00      	nop
}
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	0800ad3d 	.word	0x0800ad3d
 800aa50:	0800ada5 	.word	0x0800ada5

0800aa54 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <shci_init+0x30>)
 800aa64:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800aa66:	4a08      	ldr	r2, [pc, #32]	; (800aa88 <shci_init+0x34>)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800aa6c:	4806      	ldr	r0, [pc, #24]	; (800aa88 <shci_init+0x34>)
 800aa6e:	f000 f911 	bl	800ac94 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f894 	bl	800aba4 <TlInit>

  return;
 800aa7c:	bf00      	nop
}
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20001120 	.word	0x20001120
 800aa88:	20001100 	.word	0x20001100

0800aa8c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800aa92:	4822      	ldr	r0, [pc, #136]	; (800ab1c <shci_user_evt_proc+0x90>)
 800aa94:	f000 fb92 	bl	800b1bc <LST_is_empty>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d12b      	bne.n	800aaf6 <shci_user_evt_proc+0x6a>
 800aa9e:	4b20      	ldr	r3, [pc, #128]	; (800ab20 <shci_user_evt_proc+0x94>)
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d027      	beq.n	800aaf6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800aaa6:	f107 030c 	add.w	r3, r7, #12
 800aaaa:	4619      	mov	r1, r3
 800aaac:	481b      	ldr	r0, [pc, #108]	; (800ab1c <shci_user_evt_proc+0x90>)
 800aaae:	f000 fc14 	bl	800b2da <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800aab2:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <shci_user_evt_proc+0x98>)
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00c      	beq.n	800aad4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800aabe:	2301      	movs	r3, #1
 800aac0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800aac2:	4b18      	ldr	r3, [pc, #96]	; (800ab24 <shci_user_evt_proc+0x98>)
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	1d3a      	adds	r2, r7, #4
 800aac8:	4610      	mov	r0, r2
 800aaca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800aacc:	793a      	ldrb	r2, [r7, #4]
 800aace:	4b14      	ldr	r3, [pc, #80]	; (800ab20 <shci_user_evt_proc+0x94>)
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	e002      	b.n	800aada <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aad4:	4b12      	ldr	r3, [pc, #72]	; (800ab20 <shci_user_evt_proc+0x94>)
 800aad6:	2201      	movs	r2, #1
 800aad8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800aada:	4b11      	ldr	r3, [pc, #68]	; (800ab20 <shci_user_evt_proc+0x94>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d004      	beq.n	800aaec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fa6d 	bl	800afc4 <TL_MM_EvtDone>
 800aaea:	e004      	b.n	800aaf6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	480a      	ldr	r0, [pc, #40]	; (800ab1c <shci_user_evt_proc+0x90>)
 800aaf2:	f000 fb85 	bl	800b200 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800aaf6:	4809      	ldr	r0, [pc, #36]	; (800ab1c <shci_user_evt_proc+0x90>)
 800aaf8:	f000 fb60 	bl	800b1bc <LST_is_empty>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d107      	bne.n	800ab12 <shci_user_evt_proc+0x86>
 800ab02:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <shci_user_evt_proc+0x94>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800ab0a:	4804      	ldr	r0, [pc, #16]	; (800ab1c <shci_user_evt_proc+0x90>)
 800ab0c:	f7f6 ff88 	bl	8001a20 <shci_notify_asynch_evt>
  }


  return;
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
}
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000948 	.word	0x20000948
 800ab20:	20000958 	.word	0x20000958
 800ab24:	20001100 	.word	0x20001100

0800ab28 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60ba      	str	r2, [r7, #8]
 800ab30:	607b      	str	r3, [r7, #4]
 800ab32:	4603      	mov	r3, r0
 800ab34:	81fb      	strh	r3, [r7, #14]
 800ab36:	460b      	mov	r3, r1
 800ab38:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f000 f864 	bl	800ac08 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ab40:	4b16      	ldr	r3, [pc, #88]	; (800ab9c <shci_send+0x74>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	89fa      	ldrh	r2, [r7, #14]
 800ab46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ab4a:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <shci_send+0x74>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	7b7a      	ldrb	r2, [r7, #13]
 800ab50:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <shci_send+0x74>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	330c      	adds	r3, #12
 800ab58:	7b7a      	ldrb	r2, [r7, #13]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f001 fc99 	bl	800c494 <memcpy>

  shciContext.io.Send(0,0);
 800ab62:	4b0f      	ldr	r3, [pc, #60]	; (800aba0 <shci_send+0x78>)
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	2100      	movs	r1, #0
 800ab68:	2000      	movs	r0, #0
 800ab6a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ab6c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ab70:	f7f6 ff6d 	bl	8001a4e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f103 0008 	add.w	r0, r3, #8
 800ab7a:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <shci_send+0x74>)
 800ab7c:	6819      	ldr	r1, [r3, #0]
 800ab7e:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <shci_send+0x74>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	789b      	ldrb	r3, [r3, #2]
 800ab84:	3303      	adds	r3, #3
 800ab86:	461a      	mov	r2, r3
 800ab88:	f001 fc84 	bl	800c494 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f000 f83b 	bl	800ac08 <Cmd_SetStatus>

  return;
 800ab92:	bf00      	nop
}
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000954 	.word	0x20000954
 800aba0:	20001100 	.word	0x20001100

0800aba4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800abac:	4a10      	ldr	r2, [pc, #64]	; (800abf0 <TlInit+0x4c>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800abb2:	4810      	ldr	r0, [pc, #64]	; (800abf4 <TlInit+0x50>)
 800abb4:	f000 faf2 	bl	800b19c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800abb8:	2001      	movs	r0, #1
 800abba:	f000 f825 	bl	800ac08 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800abbe:	4b0e      	ldr	r3, [pc, #56]	; (800abf8 <TlInit+0x54>)
 800abc0:	2201      	movs	r2, #1
 800abc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800abc4:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <TlInit+0x58>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00c      	beq.n	800abe6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800abd0:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <TlInit+0x5c>)
 800abd2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800abd4:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <TlInit+0x60>)
 800abd6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800abd8:	4b08      	ldr	r3, [pc, #32]	; (800abfc <TlInit+0x58>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f107 020c 	add.w	r2, r7, #12
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3
  }

  return;
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
}
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000954 	.word	0x20000954
 800abf4:	20000948 	.word	0x20000948
 800abf8:	20000958 	.word	0x20000958
 800abfc:	20001100 	.word	0x20001100
 800ac00:	0800ac59 	.word	0x0800ac59
 800ac04:	0800ac71 	.word	0x0800ac71

0800ac08 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10b      	bne.n	800ac30 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ac18:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <Cmd_SetStatus+0x48>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ac20:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <Cmd_SetStatus+0x48>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2000      	movs	r0, #0
 800ac26:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <Cmd_SetStatus+0x4c>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ac2e:	e00b      	b.n	800ac48 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ac30:	4b08      	ldr	r3, [pc, #32]	; (800ac54 <Cmd_SetStatus+0x4c>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ac36:	4b06      	ldr	r3, [pc, #24]	; (800ac50 <Cmd_SetStatus+0x48>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d004      	beq.n	800ac48 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ac3e:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <Cmd_SetStatus+0x48>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2001      	movs	r0, #1
 800ac44:	4798      	blx	r3
  return;
 800ac46:	bf00      	nop
 800ac48:	bf00      	nop
}
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20001120 	.word	0x20001120
 800ac54:	20000950 	.word	0x20000950

0800ac58 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ac60:	2000      	movs	r0, #0
 800ac62:	f7f6 fee9 	bl	8001a38 <shci_cmd_resp_release>

  return;
 800ac66:	bf00      	nop
}
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4805      	ldr	r0, [pc, #20]	; (800ac90 <TlUserEvtReceived+0x20>)
 800ac7c:	f000 fae6 	bl	800b24c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ac80:	4803      	ldr	r0, [pc, #12]	; (800ac90 <TlUserEvtReceived+0x20>)
 800ac82:	f7f6 fecd 	bl	8001a20 <shci_notify_asynch_evt>

  return;
 800ac86:	bf00      	nop
}
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000948 	.word	0x20000948

0800ac94 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a05      	ldr	r2, [pc, #20]	; (800acb4 <shci_register_io_bus+0x20>)
 800aca0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a04      	ldr	r2, [pc, #16]	; (800acb8 <shci_register_io_bus+0x24>)
 800aca6:	611a      	str	r2, [r3, #16]

  return;
 800aca8:	bf00      	nop
}
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	0800ae51 	.word	0x0800ae51
 800acb8:	0800aea5 	.word	0x0800aea5

0800acbc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800acc0:	f001 f86c 	bl	800bd9c <HW_IPCC_Enable>

  return;
 800acc4:	bf00      	nop
}
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <TL_Init>:


void TL_Init( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800accc:	4b10      	ldr	r3, [pc, #64]	; (800ad10 <TL_Init+0x48>)
 800acce:	4a11      	ldr	r2, [pc, #68]	; (800ad14 <TL_Init+0x4c>)
 800acd0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800acd2:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <TL_Init+0x48>)
 800acd4:	4a10      	ldr	r2, [pc, #64]	; (800ad18 <TL_Init+0x50>)
 800acd6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800acd8:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <TL_Init+0x48>)
 800acda:	4a10      	ldr	r2, [pc, #64]	; (800ad1c <TL_Init+0x54>)
 800acdc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <TL_Init+0x48>)
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <TL_Init+0x58>)
 800ace2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ace4:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <TL_Init+0x48>)
 800ace6:	4a0f      	ldr	r2, [pc, #60]	; (800ad24 <TL_Init+0x5c>)
 800ace8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <TL_Init+0x48>)
 800acec:	4a0e      	ldr	r2, [pc, #56]	; (800ad28 <TL_Init+0x60>)
 800acee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800acf0:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <TL_Init+0x48>)
 800acf2:	4a0e      	ldr	r2, [pc, #56]	; (800ad2c <TL_Init+0x64>)
 800acf4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800acf6:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <TL_Init+0x48>)
 800acf8:	4a0d      	ldr	r2, [pc, #52]	; (800ad30 <TL_Init+0x68>)
 800acfa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <TL_Init+0x48>)
 800acfe:	4a0d      	ldr	r2, [pc, #52]	; (800ad34 <TL_Init+0x6c>)
 800ad00:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ad02:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <TL_Init+0x48>)
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <TL_Init+0x70>)
 800ad06:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ad08:	f001 f85c 	bl	800bdc4 <HW_IPCC_Init>

  return;
 800ad0c:	bf00      	nop
}
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20030000 	.word	0x20030000
 800ad14:	20030028 	.word	0x20030028
 800ad18:	20030048 	.word	0x20030048
 800ad1c:	20030058 	.word	0x20030058
 800ad20:	20030068 	.word	0x20030068
 800ad24:	20030070 	.word	0x20030070
 800ad28:	20030078 	.word	0x20030078
 800ad2c:	20030080 	.word	0x20030080
 800ad30:	2003009c 	.word	0x2003009c
 800ad34:	200300a0 	.word	0x200300a0
 800ad38:	200300ac 	.word	0x200300ac

0800ad3c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ad48:	4811      	ldr	r0, [pc, #68]	; (800ad90 <TL_BLE_Init+0x54>)
 800ad4a:	f000 fa27 	bl	800b19c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <TL_BLE_Init+0x58>)
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	689a      	ldr	r2, [r3, #8]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <TL_BLE_Init+0x5c>)
 800ad68:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	4a08      	ldr	r2, [pc, #32]	; (800ad90 <TL_BLE_Init+0x54>)
 800ad6e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ad70:	f001 f83e 	bl	800bdf0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a08      	ldr	r2, [pc, #32]	; (800ad9c <TL_BLE_Init+0x60>)
 800ad7a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	4a07      	ldr	r2, [pc, #28]	; (800ada0 <TL_BLE_Init+0x64>)
 800ad82:	6013      	str	r3, [r2, #0]

  return 0;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	200300c8 	.word	0x200300c8
 800ad94:	20030000 	.word	0x20030000
 800ad98:	20000900 	.word	0x20000900
 800ad9c:	2000112c 	.word	0x2000112c
 800ada0:	20001130 	.word	0x20001130

0800ada4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800adb0:	4b09      	ldr	r3, [pc, #36]	; (800add8 <TL_BLE_SendCmd+0x34>)
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2201      	movs	r2, #1
 800adb8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800adba:	4b07      	ldr	r3, [pc, #28]	; (800add8 <TL_BLE_SendCmd+0x34>)
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2001      	movs	r0, #1
 800adc4:	f000 f96c 	bl	800b0a0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800adc8:	f001 f81c 	bl	800be04 <HW_IPCC_BLE_SendCmd>

  return 0;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	20030000 	.word	0x20030000

0800addc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ade2:	e01c      	b.n	800ae1e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ade4:	1d3b      	adds	r3, r7, #4
 800ade6:	4619      	mov	r1, r3
 800ade8:	4812      	ldr	r0, [pc, #72]	; (800ae34 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800adea:	f000 fa76 	bl	800b2da <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7a5b      	ldrb	r3, [r3, #9]
 800adf2:	2b0f      	cmp	r3, #15
 800adf4:	d003      	beq.n	800adfe <HW_IPCC_BLE_RxEvtNot+0x22>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	7a5b      	ldrb	r3, [r3, #9]
 800adfa:	2b0e      	cmp	r3, #14
 800adfc:	d105      	bne.n	800ae0a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4619      	mov	r1, r3
 800ae02:	2002      	movs	r0, #2
 800ae04:	f000 f94c 	bl	800b0a0 <OutputDbgTrace>
 800ae08:	e004      	b.n	800ae14 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	2003      	movs	r0, #3
 800ae10:	f000 f946 	bl	800b0a0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ae14:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae1e:	4805      	ldr	r0, [pc, #20]	; (800ae34 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae20:	f000 f9cc 	bl	800b1bc <LST_is_empty>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0dc      	beq.n	800ade4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ae2a:	bf00      	nop
}
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200300c8 	.word	0x200300c8
 800ae38:	2000112c 	.word	0x2000112c

0800ae3c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4798      	blx	r3

  return;
 800ae46:	bf00      	nop
}
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20001130 	.word	0x20001130

0800ae50 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ae5c:	480d      	ldr	r0, [pc, #52]	; (800ae94 <TL_SYS_Init+0x44>)
 800ae5e:	f000 f99d 	bl	800b19c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ae62:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <TL_SYS_Init+0x48>)
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <TL_SYS_Init+0x44>)
 800ae74:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ae76:	f000 ffe7 	bl	800be48 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a07      	ldr	r2, [pc, #28]	; (800ae9c <TL_SYS_Init+0x4c>)
 800ae80:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	4a06      	ldr	r2, [pc, #24]	; (800aea0 <TL_SYS_Init+0x50>)
 800ae88:	6013      	str	r3, [r2, #0]

  return 0;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	200300d0 	.word	0x200300d0
 800ae98:	20030000 	.word	0x20030000
 800ae9c:	20001134 	.word	0x20001134
 800aea0:	20001138 	.word	0x20001138

0800aea4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aeb0:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <TL_SYS_SendCmd+0x34>)
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2210      	movs	r2, #16
 800aeb8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <TL_SYS_SendCmd+0x34>)
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4619      	mov	r1, r3
 800aec2:	2004      	movs	r0, #4
 800aec4:	f000 f8ec 	bl	800b0a0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800aec8:	f000 ffc8 	bl	800be5c <HW_IPCC_SYS_SendCmd>

  return 0;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20030000 	.word	0x20030000

0800aedc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aee0:	4b07      	ldr	r3, [pc, #28]	; (800af00 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4619      	mov	r1, r3
 800aee8:	2005      	movs	r0, #5
 800aeea:	f000 f8d9 	bl	800b0a0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aeee:	4b05      	ldr	r3, [pc, #20]	; (800af04 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a03      	ldr	r2, [pc, #12]	; (800af00 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aef4:	68d2      	ldr	r2, [r2, #12]
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	4610      	mov	r0, r2
 800aefa:	4798      	blx	r3

  return;
 800aefc:	bf00      	nop
}
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20030000 	.word	0x20030000
 800af04:	20001134 	.word	0x20001134

0800af08 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af0e:	e00e      	b.n	800af2e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800af10:	1d3b      	adds	r3, r7, #4
 800af12:	4619      	mov	r1, r3
 800af14:	480b      	ldr	r0, [pc, #44]	; (800af44 <HW_IPCC_SYS_EvtNot+0x3c>)
 800af16:	f000 f9e0 	bl	800b2da <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4619      	mov	r1, r3
 800af1e:	2006      	movs	r0, #6
 800af20:	f000 f8be 	bl	800b0a0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800af24:	4b08      	ldr	r3, [pc, #32]	; (800af48 <HW_IPCC_SYS_EvtNot+0x40>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4610      	mov	r0, r2
 800af2c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af2e:	4805      	ldr	r0, [pc, #20]	; (800af44 <HW_IPCC_SYS_EvtNot+0x3c>)
 800af30:	f000 f944 	bl	800b1bc <LST_is_empty>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0ea      	beq.n	800af10 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800af3a:	bf00      	nop
}
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200300d0 	.word	0x200300d0
 800af48:	20001138 	.word	0x20001138

0800af4c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800af54:	4817      	ldr	r0, [pc, #92]	; (800afb4 <TL_MM_Init+0x68>)
 800af56:	f000 f921 	bl	800b19c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800af5a:	4817      	ldr	r0, [pc, #92]	; (800afb8 <TL_MM_Init+0x6c>)
 800af5c:	f000 f91e 	bl	800b19c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800af60:	4b16      	ldr	r3, [pc, #88]	; (800afbc <TL_MM_Init+0x70>)
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	4a16      	ldr	r2, [pc, #88]	; (800afc0 <TL_MM_Init+0x74>)
 800af66:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800af68:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <TL_MM_Init+0x74>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	6892      	ldr	r2, [r2, #8]
 800af70:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800af72:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <TL_MM_Init+0x74>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	68d2      	ldr	r2, [r2, #12]
 800af7a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800af7c:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <TL_MM_Init+0x74>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a0c      	ldr	r2, [pc, #48]	; (800afb4 <TL_MM_Init+0x68>)
 800af82:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800af84:	4b0e      	ldr	r3, [pc, #56]	; (800afc0 <TL_MM_Init+0x74>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	6812      	ldr	r2, [r2, #0]
 800af8c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <TL_MM_Init+0x74>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	6852      	ldr	r2, [r2, #4]
 800af96:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800af98:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <TL_MM_Init+0x74>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6912      	ldr	r2, [r2, #16]
 800afa0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <TL_MM_Init+0x74>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6952      	ldr	r2, [r2, #20]
 800afaa:	619a      	str	r2, [r3, #24]

  return;
 800afac:	bf00      	nop
}
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	200300b8 	.word	0x200300b8
 800afb8:	20001124 	.word	0x20001124
 800afbc:	20030000 	.word	0x20030000
 800afc0:	2000113c 	.word	0x2000113c

0800afc4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	4807      	ldr	r0, [pc, #28]	; (800afec <TL_MM_EvtDone+0x28>)
 800afd0:	f000 f93c 	bl	800b24c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	2000      	movs	r0, #0
 800afd8:	f000 f862 	bl	800b0a0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800afdc:	4804      	ldr	r0, [pc, #16]	; (800aff0 <TL_MM_EvtDone+0x2c>)
 800afde:	f000 ff63 	bl	800bea8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800afe2:	bf00      	nop
}
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20001124 	.word	0x20001124
 800aff0:	0800aff5 	.word	0x0800aff5

0800aff4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800affa:	e00c      	b.n	800b016 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800affc:	1d3b      	adds	r3, r7, #4
 800affe:	4619      	mov	r1, r3
 800b000:	480a      	ldr	r0, [pc, #40]	; (800b02c <SendFreeBuf+0x38>)
 800b002:	f000 f96a 	bl	800b2da <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b006:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <SendFreeBuf+0x3c>)
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	4611      	mov	r1, r2
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f91b 	bl	800b24c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b016:	4805      	ldr	r0, [pc, #20]	; (800b02c <SendFreeBuf+0x38>)
 800b018:	f000 f8d0 	bl	800b1bc <LST_is_empty>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0ec      	beq.n	800affc <SendFreeBuf+0x8>
  }

  return;
 800b022:	bf00      	nop
}
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20001124 	.word	0x20001124
 800b030:	20030000 	.word	0x20030000

0800b034 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b038:	4805      	ldr	r0, [pc, #20]	; (800b050 <TL_TRACES_Init+0x1c>)
 800b03a:	f000 f8af 	bl	800b19c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b03e:	4b05      	ldr	r3, [pc, #20]	; (800b054 <TL_TRACES_Init+0x20>)
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	4a03      	ldr	r2, [pc, #12]	; (800b050 <TL_TRACES_Init+0x1c>)
 800b044:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b046:	f000 ff65 	bl	800bf14 <HW_IPCC_TRACES_Init>

  return;
 800b04a:	bf00      	nop
}
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200300c0 	.word	0x200300c0
 800b054:	20030000 	.word	0x20030000

0800b058 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b05e:	e008      	b.n	800b072 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b060:	1d3b      	adds	r3, r7, #4
 800b062:	4619      	mov	r1, r3
 800b064:	4808      	ldr	r0, [pc, #32]	; (800b088 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b066:	f000 f938 	bl	800b2da <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f80d 	bl	800b08c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b072:	4805      	ldr	r0, [pc, #20]	; (800b088 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b074:	f000 f8a2 	bl	800b1bc <LST_is_empty>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0f0      	beq.n	800b060 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b07e:	bf00      	nop
}
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200300c0 	.word	0x200300c0

0800b08c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	6039      	str	r1, [r7, #0]
 800b0aa:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	2b06      	cmp	r3, #6
 800b0b0:	d845      	bhi.n	800b13e <OutputDbgTrace+0x9e>
 800b0b2:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <OutputDbgTrace+0x18>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0d5 	.word	0x0800b0d5
 800b0bc:	0800b0f9 	.word	0x0800b0f9
 800b0c0:	0800b0ff 	.word	0x0800b0ff
 800b0c4:	0800b113 	.word	0x0800b113
 800b0c8:	0800b11f 	.word	0x0800b11f
 800b0cc:	0800b125 	.word	0x0800b125
 800b0d0:	0800b133 	.word	0x0800b133
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	7a5b      	ldrb	r3, [r3, #9]
 800b0dc:	2bff      	cmp	r3, #255	; 0xff
 800b0de:	d005      	beq.n	800b0ec <OutputDbgTrace+0x4c>
 800b0e0:	2bff      	cmp	r3, #255	; 0xff
 800b0e2:	dc05      	bgt.n	800b0f0 <OutputDbgTrace+0x50>
 800b0e4:	2b0e      	cmp	r3, #14
 800b0e6:	d005      	beq.n	800b0f4 <OutputDbgTrace+0x54>
 800b0e8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b0ea:	e001      	b.n	800b0f0 <OutputDbgTrace+0x50>
          break;
 800b0ec:	bf00      	nop
 800b0ee:	e027      	b.n	800b140 <OutputDbgTrace+0xa0>
          break;
 800b0f0:	bf00      	nop
 800b0f2:	e025      	b.n	800b140 <OutputDbgTrace+0xa0>
          break;
 800b0f4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b0f6:	e023      	b.n	800b140 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b0fc:	e020      	b.n	800b140 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	7a5b      	ldrb	r3, [r3, #9]
 800b106:	2b0e      	cmp	r3, #14
 800b108:	d001      	beq.n	800b10e <OutputDbgTrace+0x6e>
 800b10a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b10c:	e000      	b.n	800b110 <OutputDbgTrace+0x70>
          break;
 800b10e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b110:	e016      	b.n	800b140 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	7a5b      	ldrb	r3, [r3, #9]
 800b11a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b11c:	e010      	b.n	800b140 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b122:	e00d      	b.n	800b140 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	7a5b      	ldrb	r3, [r3, #9]
 800b12c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b12e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b130:	e006      	b.n	800b140 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	7a5b      	ldrb	r3, [r3, #9]
 800b13a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b13c:	e000      	b.n	800b140 <OutputDbgTrace+0xa0>

    default:
      break;
 800b13e:	bf00      	nop
  }

  return;
 800b140:	bf00      	nop
}
 800b142:	3714      	adds	r7, #20
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b156:	4b0f      	ldr	r3, [pc, #60]	; (800b194 <OTP_Read+0x48>)
 800b158:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b15a:	e002      	b.n	800b162 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3b08      	subs	r3, #8
 800b160:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3307      	adds	r3, #7
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	79fa      	ldrb	r2, [r7, #7]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d003      	beq.n	800b176 <OTP_Read+0x2a>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	4a09      	ldr	r2, [pc, #36]	; (800b198 <OTP_Read+0x4c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d1f2      	bne.n	800b15c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3307      	adds	r3, #7
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	79fa      	ldrb	r2, [r7, #7]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d001      	beq.n	800b186 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b186:	68fb      	ldr	r3, [r7, #12]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	1fff73f8 	.word	0x1fff73f8
 800b198:	1fff7000 	.word	0x1fff7000

0800b19c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	605a      	str	r2, [r3, #4]
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1ce:	b672      	cpsid	i
}
 800b1d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d102      	bne.n	800b1e2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	75fb      	strb	r3, [r7, #23]
 800b1e0:	e001      	b.n	800b1e6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f383 8810 	msr	PRIMASK, r3
}
 800b1f0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b20a:	f3ef 8310 	mrs	r3, PRIMASK
 800b20e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b210:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b214:	b672      	cpsid	i
}
 800b216:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	605a      	str	r2, [r3, #4]
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f383 8810 	msr	PRIMASK, r3
}
 800b23e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b240:	bf00      	nop
 800b242:	371c      	adds	r7, #28
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b256:	f3ef 8310 	mrs	r3, PRIMASK
 800b25a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b25c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b25e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b260:	b672      	cpsid	i
}
 800b262:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f383 8810 	msr	PRIMASK, r3
}
 800b28a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b28c:	bf00      	nop
 800b28e:	371c      	adds	r7, #28
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b298:	b480      	push	{r7}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2aa:	b672      	cpsid	i
}
 800b2ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	6812      	ldr	r2, [r2, #0]
 800b2b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	6852      	ldr	r2, [r2, #4]
 800b2c0:	605a      	str	r2, [r3, #4]
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	f383 8810 	msr	PRIMASK, r3
}
 800b2cc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b2ce:	bf00      	nop
 800b2d0:	371c      	adds	r7, #28
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b086      	sub	sp, #24
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2ee:	b672      	cpsid	i
}
 800b2f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff ffca 	bl	800b298 <LST_remove_node>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f383 8810 	msr	PRIMASK, r3
}
 800b30e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b310:	bf00      	nop
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b31c:	4b03      	ldr	r3, [pc, #12]	; (800b32c <LL_FLASH_GetUDN+0x14>)
 800b31e:	681b      	ldr	r3, [r3, #0]
}
 800b320:	4618      	mov	r0, r3
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	1fff7580 	.word	0x1fff7580

0800b330 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b334:	4b03      	ldr	r3, [pc, #12]	; (800b344 <LL_FLASH_GetDeviceID+0x14>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	b2db      	uxtb	r3, r3
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	1fff7584 	.word	0x1fff7584

0800b348 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b34c:	4b03      	ldr	r3, [pc, #12]	; (800b35c <LL_FLASH_GetSTCompanyID+0x14>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	0a1b      	lsrs	r3, r3, #8
}
 800b352:	4618      	mov	r0, r3
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	1fff7584 	.word	0x1fff7584

0800b360 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b360:	b5b0      	push	{r4, r5, r7, lr}
 800b362:	b090      	sub	sp, #64	; 0x40
 800b364:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b366:	2392      	movs	r3, #146	; 0x92
 800b368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b36c:	4b25      	ldr	r3, [pc, #148]	; (800b404 <APP_BLE_Init+0xa4>)
 800b36e:	1d3c      	adds	r4, r7, #4
 800b370:	461d      	mov	r5, r3
 800b372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b37a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b37c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b37e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b382:	c403      	stmia	r4!, {r0, r1}
 800b384:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b386:	f000 f905 	bl	800b594 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b38a:	2101      	movs	r1, #1
 800b38c:	2002      	movs	r0, #2
 800b38e:	f000 fde9 	bl	800bf64 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b392:	4a1d      	ldr	r2, [pc, #116]	; (800b408 <APP_BLE_Init+0xa8>)
 800b394:	2100      	movs	r1, #0
 800b396:	2002      	movs	r0, #2
 800b398:	f000 ff10 	bl	800c1bc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b39c:	1d3b      	adds	r3, r7, #4
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff f8d0 	bl	800a544 <SHCI_C2_BLE_Init>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b3aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b3b2:	f7f7 fcad 	bl	8002d10 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b3b6:	f000 f903 	bl	800b5c0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b3ba:	f7ff f81d 	bl	800a3f8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b3be:	4b13      	ldr	r3, [pc, #76]	; (800b40c <APP_BLE_Init+0xac>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b3c6:	4b11      	ldr	r3, [pc, #68]	; (800b40c <APP_BLE_Init+0xac>)
 800b3c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3cc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b3ce:	4a10      	ldr	r2, [pc, #64]	; (800b410 <APP_BLE_Init+0xb0>)
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	f000 fef2 	bl	800c1bc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b3d8:	2006      	movs	r0, #6
 800b3da:	f7fe fe80 	bl	800a0de <aci_hal_set_radio_activity_mask>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b3e4:	f000 fa9b 	bl	800b91e <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b3e8:	4b08      	ldr	r3, [pc, #32]	; (800b40c <APP_BLE_Init+0xac>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b3ee:	4b07      	ldr	r3, [pc, #28]	; (800b40c <APP_BLE_Init+0xac>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	f000 f997 	bl	800b728 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b3fa:	bf00      	nop
}
 800b3fc:	3740      	adds	r7, #64	; 0x40
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bdb0      	pop	{r4, r5, r7, pc}
 800b402:	bf00      	nop
 800b404:	0800d6a4 	.word	0x0800d6a4
 800b408:	0800a761 	.word	0x0800a761
 800b40c:	20001148 	.word	0x20001148
 800b410:	0800b811 	.word	0x0800b811

0800b414 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b08a      	sub	sp, #40	; 0x28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b41c:	2392      	movs	r3, #146	; 0x92
 800b41e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3301      	adds	r3, #1
 800b426:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2bff      	cmp	r3, #255	; 0xff
 800b42e:	d053      	beq.n	800b4d8 <SVCCTL_App_Notification+0xc4>
 800b430:	2bff      	cmp	r3, #255	; 0xff
 800b432:	f300 80a1 	bgt.w	800b578 <SVCCTL_App_Notification+0x164>
 800b436:	2b05      	cmp	r3, #5
 800b438:	d002      	beq.n	800b440 <SVCCTL_App_Notification+0x2c>
 800b43a:	2b3e      	cmp	r3, #62	; 0x3e
 800b43c:	d020      	beq.n	800b480 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b43e:	e09b      	b.n	800b578 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b440:	6a3b      	ldr	r3, [r7, #32]
 800b442:	3302      	adds	r3, #2
 800b444:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	4b4e      	ldr	r3, [pc, #312]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b450:	8adb      	ldrh	r3, [r3, #22]
 800b452:	429a      	cmp	r2, r3
 800b454:	d106      	bne.n	800b464 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b456:	4b4c      	ldr	r3, [pc, #304]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b458:	2200      	movs	r2, #0
 800b45a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b45c:	4b4a      	ldr	r3, [pc, #296]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b464:	2001      	movs	r0, #1
 800b466:	f000 f95f 	bl	800b728 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b46a:	4b48      	ldr	r3, [pc, #288]	; (800b58c <SVCCTL_App_Notification+0x178>)
 800b46c:	2201      	movs	r2, #1
 800b46e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b470:	4b45      	ldr	r3, [pc, #276]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b472:	8ada      	ldrh	r2, [r3, #22]
 800b474:	4b45      	ldr	r3, [pc, #276]	; (800b58c <SVCCTL_App_Notification+0x178>)
 800b476:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b478:	4844      	ldr	r0, [pc, #272]	; (800b58c <SVCCTL_App_Notification+0x178>)
 800b47a:	f000 fa3c 	bl	800b8f6 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b47e:	e07e      	b.n	800b57e <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	3302      	adds	r3, #2
 800b484:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d001      	beq.n	800b492 <SVCCTL_App_Notification+0x7e>
 800b48e:	2b03      	cmp	r3, #3
          break;
 800b490:	e021      	b.n	800b4d6 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	3301      	adds	r3, #1
 800b496:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b498:	4b3b      	ldr	r3, [pc, #236]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b49a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b49e:	2b04      	cmp	r3, #4
 800b4a0:	d104      	bne.n	800b4ac <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b4a2:	4b39      	ldr	r3, [pc, #228]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b4a4:	2206      	movs	r2, #6
 800b4a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b4aa:	e003      	b.n	800b4b4 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b4ac:	4b36      	ldr	r3, [pc, #216]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b4ae:	2205      	movs	r2, #5
 800b4b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	4b32      	ldr	r3, [pc, #200]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b4be:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b4c0:	4b32      	ldr	r3, [pc, #200]	; (800b58c <SVCCTL_App_Notification+0x178>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b4c6:	4b30      	ldr	r3, [pc, #192]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b4c8:	8ada      	ldrh	r2, [r3, #22]
 800b4ca:	4b30      	ldr	r3, [pc, #192]	; (800b58c <SVCCTL_App_Notification+0x178>)
 800b4cc:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b4ce:	482f      	ldr	r0, [pc, #188]	; (800b58c <SVCCTL_App_Notification+0x178>)
 800b4d0:	f000 fa11 	bl	800b8f6 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b4d4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b4d6:	e052      	b.n	800b57e <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	3302      	adds	r3, #2
 800b4dc:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e8:	d040      	beq.n	800b56c <SVCCTL_App_Notification+0x158>
 800b4ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ee:	dc45      	bgt.n	800b57c <SVCCTL_App_Notification+0x168>
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d03d      	beq.n	800b570 <SVCCTL_App_Notification+0x15c>
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	db41      	blt.n	800b57c <SVCCTL_App_Notification+0x168>
 800b4f8:	f240 420a 	movw	r2, #1034	; 0x40a
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	dc3d      	bgt.n	800b57c <SVCCTL_App_Notification+0x168>
 800b500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b504:	dd3a      	ble.n	800b57c <SVCCTL_App_Notification+0x168>
 800b506:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b50a:	2b09      	cmp	r3, #9
 800b50c:	d836      	bhi.n	800b57c <SVCCTL_App_Notification+0x168>
 800b50e:	a201      	add	r2, pc, #4	; (adr r2, 800b514 <SVCCTL_App_Notification+0x100>)
 800b510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b514:	0800b565 	.word	0x0800b565
 800b518:	0800b53d 	.word	0x0800b53d
 800b51c:	0800b57d 	.word	0x0800b57d
 800b520:	0800b57d 	.word	0x0800b57d
 800b524:	0800b57d 	.word	0x0800b57d
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b575 	.word	0x0800b575
 800b530:	0800b57d 	.word	0x0800b57d
 800b534:	0800b551 	.word	0x0800b551
 800b538:	0800b575 	.word	0x0800b575
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b53c:	4b12      	ldr	r3, [pc, #72]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b53e:	8adb      	ldrh	r3, [r3, #22]
 800b540:	4913      	ldr	r1, [pc, #76]	; (800b590 <SVCCTL_App_Notification+0x17c>)
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe f822 	bl	800958c <aci_gap_pass_key_resp>
 800b548:	4603      	mov	r3, r0
 800b54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b54e:	e012      	b.n	800b576 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b550:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <SVCCTL_App_Notification+0x174>)
 800b552:	8adb      	ldrh	r3, [r3, #22]
 800b554:	2101      	movs	r1, #1
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe f9c2 	bl	80098e0 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b562:	e008      	b.n	800b576 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	3302      	adds	r3, #2
 800b568:	61bb      	str	r3, [r7, #24]
          break;
 800b56a:	e004      	b.n	800b576 <SVCCTL_App_Notification+0x162>
          break;
 800b56c:	bf00      	nop
 800b56e:	e005      	b.n	800b57c <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b570:	bf00      	nop
 800b572:	e003      	b.n	800b57c <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b574:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b576:	e001      	b.n	800b57c <SVCCTL_App_Notification+0x168>
      break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b57c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b57e:	2301      	movs	r3, #1
}
 800b580:	4618      	mov	r0, r3
 800b582:	3728      	adds	r7, #40	; 0x28
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	20001148 	.word	0x20001148
 800b58c:	200011cc 	.word	0x200011cc
 800b590:	0001b207 	.word	0x0001b207

0800b594 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b59a:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <Ble_Tl_Init+0x20>)
 800b59c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b59e:	4b06      	ldr	r3, [pc, #24]	; (800b5b8 <Ble_Tl_Init+0x24>)
 800b5a0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4805      	ldr	r0, [pc, #20]	; (800b5bc <Ble_Tl_Init+0x28>)
 800b5a8:	f7ff f8be 	bl	800a728 <hci_init>

  return;
 800b5ac:	bf00      	nop
}
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200300d8 	.word	0x200300d8
 800b5b8:	0800b8c1 	.word	0x0800b8c1
 800b5bc:	0800b889 	.word	0x0800b889

0800b5c0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5c2:	b08d      	sub	sp, #52	; 0x34
 800b5c4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b5ca:	2392      	movs	r3, #146	; 0x92
 800b5cc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b5ce:	f7fe fdda 	bl	800a186 <hci_reset>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b5d6:	f000 f8d7 	bl	800b788 <BleGetBdAddress>
 800b5da:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	2106      	movs	r1, #6
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f7fe fc90 	bl	8009f06 <aci_hal_write_config_data>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b5ea:	4a4a      	ldr	r2, [pc, #296]	; (800b714 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800b5ec:	2110      	movs	r1, #16
 800b5ee:	2018      	movs	r0, #24
 800b5f0:	f7fe fc89 	bl	8009f06 <aci_hal_write_config_data>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b5f8:	4a47      	ldr	r2, [pc, #284]	; (800b718 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800b5fa:	2110      	movs	r1, #16
 800b5fc:	2008      	movs	r0, #8
 800b5fe:	f7fe fc82 	bl	8009f06 <aci_hal_write_config_data>
 800b602:	4603      	mov	r3, r0
 800b604:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b606:	2118      	movs	r1, #24
 800b608:	2001      	movs	r0, #1
 800b60a:	f7fe fd01 	bl	800a010 <aci_hal_set_tx_power_level>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b612:	f7fe f9cc 	bl	80099ae <aci_gatt_init>
 800b616:	4603      	mov	r3, r0
 800b618:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	f043 0301 	orr.w	r3, r3, #1
 800b624:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d01f      	beq.n	800b66c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b62c:	4b3b      	ldr	r3, [pc, #236]	; (800b71c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800b62e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b630:	1dba      	adds	r2, r7, #6
 800b632:	7bf8      	ldrb	r0, [r7, #15]
 800b634:	1cbb      	adds	r3, r7, #2
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	1d3b      	adds	r3, r7, #4
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4613      	mov	r3, r2
 800b63e:	2208      	movs	r2, #8
 800b640:	2100      	movs	r1, #0
 800b642:	f7fe f80a 	bl	800965a <aci_gap_init>
 800b646:	4603      	mov	r3, r0
 800b648:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b64a:	88fc      	ldrh	r4, [r7, #6]
 800b64c:	88bd      	ldrh	r5, [r7, #4]
 800b64e:	68b8      	ldr	r0, [r7, #8]
 800b650:	f7f4 fd96 	bl	8000180 <strlen>
 800b654:	4603      	mov	r3, r0
 800b656:	b2da      	uxtb	r2, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	2200      	movs	r2, #0
 800b660:	4629      	mov	r1, r5
 800b662:	4620      	mov	r0, r4
 800b664:	f7fe fba6 	bl	8009db4 <aci_gatt_update_char_value>
 800b668:	4603      	mov	r3, r0
 800b66a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b66c:	88f8      	ldrh	r0, [r7, #6]
 800b66e:	8879      	ldrh	r1, [r7, #2]
 800b670:	463b      	mov	r3, r7
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	2302      	movs	r3, #2
 800b676:	2200      	movs	r2, #0
 800b678:	f7fe fb9c 	bl	8009db4 <aci_gatt_update_char_value>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b680:	2202      	movs	r2, #2
 800b682:	2102      	movs	r1, #2
 800b684:	2000      	movs	r0, #0
 800b686:	f7fe fda2 	bl	800a1ce <hci_le_set_default_phy>
 800b68a:	4603      	mov	r3, r0
 800b68c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b68e:	4b24      	ldr	r3, [pc, #144]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b690:	2201      	movs	r2, #1
 800b692:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b694:	4b22      	ldr	r3, [pc, #136]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fd fe5f 	bl	800935c <aci_gap_set_io_capability>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b6a2:	4b1f      	ldr	r3, [pc, #124]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b6a8:	4b1d      	ldr	r3, [pc, #116]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b6ae:	4b1c      	ldr	r3, [pc, #112]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b6b4:	4b1a      	ldr	r3, [pc, #104]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b6ba:	4b19      	ldr	r3, [pc, #100]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6bc:	4a19      	ldr	r2, [pc, #100]	; (800b724 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800b6be:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b6c0:	4b17      	ldr	r3, [pc, #92]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b6c6:	4b16      	ldr	r3, [pc, #88]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6c8:	789c      	ldrb	r4, [r3, #2]
 800b6ca:	4b15      	ldr	r3, [pc, #84]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6cc:	785d      	ldrb	r5, [r3, #1]
 800b6ce:	4b14      	ldr	r3, [pc, #80]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6d0:	791b      	ldrb	r3, [r3, #4]
 800b6d2:	4a13      	ldr	r2, [pc, #76]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6d4:	7952      	ldrb	r2, [r2, #5]
 800b6d6:	4912      	ldr	r1, [pc, #72]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6d8:	78c9      	ldrb	r1, [r1, #3]
 800b6da:	4811      	ldr	r0, [pc, #68]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6dc:	6880      	ldr	r0, [r0, #8]
 800b6de:	2600      	movs	r6, #0
 800b6e0:	9604      	str	r6, [sp, #16]
 800b6e2:	9003      	str	r0, [sp, #12]
 800b6e4:	9102      	str	r1, [sp, #8]
 800b6e6:	9201      	str	r2, [sp, #4]
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7fd fe87 	bl	8009404 <aci_gap_set_authentication_requirement>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b6fc:	789b      	ldrb	r3, [r3, #2]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800b702:	f7fe f8c9 	bl	8009898 <aci_gap_configure_whitelist>
 800b706:	4603      	mov	r3, r0
 800b708:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b70a:	bf00      	nop
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b712:	bf00      	nop
 800b714:	0800d8ec 	.word	0x0800d8ec
 800b718:	0800d8fc 	.word	0x0800d8fc
 800b71c:	0800d6e0 	.word	0x0800d6e0
 800b720:	20001148 	.word	0x20001148
 800b724:	0001b207 	.word	0x0001b207

0800b728 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08c      	sub	sp, #48	; 0x30
 800b72c:	af08      	add	r7, sp, #32
 800b72e:	4603      	mov	r3, r0
 800b730:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b732:	2392      	movs	r3, #146	; 0x92
 800b734:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b736:	4a12      	ldr	r2, [pc, #72]	; (800b780 <Adv_Request+0x58>)
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b73e:	2300      	movs	r3, #0
 800b740:	9306      	str	r3, [sp, #24]
 800b742:	2300      	movs	r3, #0
 800b744:	9305      	str	r3, [sp, #20]
 800b746:	2300      	movs	r3, #0
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	2300      	movs	r3, #0
 800b74c:	9303      	str	r3, [sp, #12]
 800b74e:	2300      	movs	r3, #0
 800b750:	9302      	str	r3, [sp, #8]
 800b752:	2300      	movs	r3, #0
 800b754:	9301      	str	r3, [sp, #4]
 800b756:	2300      	movs	r3, #0
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	2300      	movs	r3, #0
 800b75c:	22a0      	movs	r2, #160	; 0xa0
 800b75e:	2180      	movs	r1, #128	; 0x80
 800b760:	2000      	movs	r0, #0
 800b762:	f7fd fd01 	bl	8009168 <aci_gap_set_discoverable>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b76a:	4906      	ldr	r1, [pc, #24]	; (800b784 <Adv_Request+0x5c>)
 800b76c:	2009      	movs	r0, #9
 800b76e:	f7fe f821 	bl	80097b4 <aci_gap_update_adv_data>
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b776:	bf00      	nop
}
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20001148 	.word	0x20001148
 800b784:	20000014 	.word	0x20000014

0800b788 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b78e:	f7ff fdc3 	bl	800b318 <LL_FLASH_GetUDN>
 800b792:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b79a:	d023      	beq.n	800b7e4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b79c:	f7ff fdd4 	bl	800b348 <LL_FLASH_GetSTCompanyID>
 800b7a0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b7a2:	f7ff fdc5 	bl	800b330 <LL_FLASH_GetDeviceID>
 800b7a6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	4b16      	ldr	r3, [pc, #88]	; (800b808 <BleGetBdAddress+0x80>)
 800b7ae:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	4b14      	ldr	r3, [pc, #80]	; (800b808 <BleGetBdAddress+0x80>)
 800b7b8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	4b12      	ldr	r3, [pc, #72]	; (800b808 <BleGetBdAddress+0x80>)
 800b7c0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	4b10      	ldr	r3, [pc, #64]	; (800b808 <BleGetBdAddress+0x80>)
 800b7c8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	0a1b      	lsrs	r3, r3, #8
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <BleGetBdAddress+0x80>)
 800b7d2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	0c1b      	lsrs	r3, r3, #16
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <BleGetBdAddress+0x80>)
 800b7dc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b7de:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <BleGetBdAddress+0x80>)
 800b7e0:	617b      	str	r3, [r7, #20]
 800b7e2:	e00b      	b.n	800b7fc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	f7ff fcb1 	bl	800b14c <OTP_Read>
 800b7ea:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e001      	b.n	800b7fc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b7f8:	4b04      	ldr	r3, [pc, #16]	; (800b80c <BleGetBdAddress+0x84>)
 800b7fa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b7fc:	697b      	ldr	r3, [r7, #20]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20001140 	.word	0x20001140
 800b80c:	0800d8e4 	.word	0x0800d8e4

0800b810 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <Adv_Cancel+0x30>)
 800b818:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b81c:	2b05      	cmp	r3, #5
 800b81e:	d00a      	beq.n	800b836 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b820:	2392      	movs	r3, #146	; 0x92
 800b822:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b824:	f7fd fc7c 	bl	8009120 <aci_gap_set_non_discoverable>
 800b828:	4603      	mov	r3, r0
 800b82a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <Adv_Cancel+0x30>)
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b834:	bf00      	nop
 800b836:	bf00      	nop
}
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20001148 	.word	0x20001148

0800b844 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b84c:	2100      	movs	r1, #0
 800b84e:	2002      	movs	r0, #2
 800b850:	f000 fcd6 	bl	800c200 <UTIL_SEQ_SetTask>

  return;
 800b854:	bf00      	nop
}
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b864:	2001      	movs	r0, #1
 800b866:	f000 fd37 	bl	800c2d8 <UTIL_SEQ_SetEvt>

  return;
 800b86a:	bf00      	nop
}
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b87a:	2001      	movs	r0, #1
 800b87c:	f000 fd4c 	bl	800c318 <UTIL_SEQ_WaitEvt>

  return;
 800b880:	bf00      	nop
}
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	3308      	adds	r3, #8
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fdfe 	bl	800a49c <SVCCTL_UserEvtRx>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b8a4:	7afb      	ldrb	r3, [r7, #11]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b8b0:	e003      	b.n	800b8ba <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
  return;
 800b8b8:	bf00      	nop
}
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <BLE_StatusNot+0x16>
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d006      	beq.n	800b8e2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b8d4:	e00b      	b.n	800b8ee <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f000 fcbc 	bl	800c258 <UTIL_SEQ_PauseTask>
      break;
 800b8e0:	e005      	b.n	800b8ee <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 fcd6 	bl	800c298 <UTIL_SEQ_ResumeTask>
      break;
 800b8ec:	bf00      	nop
  }

  return;
 800b8ee:	bf00      	nop
}
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <Custom_APP_Notification+0x16>
 800b906:	2b01      	cmp	r3, #1
 800b908:	d002      	beq.n	800b910 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b90a:	e002      	b.n	800b912 <Custom_APP_Notification+0x1c>
      break;
 800b90c:	bf00      	nop
 800b90e:	e000      	b.n	800b912 <Custom_APP_Notification+0x1c>
      break;
 800b910:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b912:	bf00      	nop
}
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b91e:	b480      	push	{r7}
 800b920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b922:	bf00      	nop
}
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b08b      	sub	sp, #44	; 0x2c
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b934:	2300      	movs	r3, #0
 800b936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3301      	adds	r3, #1
 800b93e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2bff      	cmp	r3, #255	; 0xff
 800b946:	d12b      	bne.n	800b9a0 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b948:	6a3b      	ldr	r3, [r7, #32]
 800b94a:	3302      	adds	r3, #2
 800b94c:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	b29b      	uxth	r3, r3
 800b954:	f640 4214 	movw	r2, #3092	; 0xc14
 800b958:	4293      	cmp	r3, r2
 800b95a:	d01b      	beq.n	800b994 <Custom_STM_Event_Handler+0x68>
 800b95c:	f640 4214 	movw	r2, #3092	; 0xc14
 800b960:	4293      	cmp	r3, r2
 800b962:	dc19      	bgt.n	800b998 <Custom_STM_Event_Handler+0x6c>
 800b964:	f640 4201 	movw	r2, #3073	; 0xc01
 800b968:	4293      	cmp	r3, r2
 800b96a:	d003      	beq.n	800b974 <Custom_STM_Event_Handler+0x48>
 800b96c:	f640 4213 	movw	r2, #3091	; 0xc13
 800b970:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800b972:	e014      	b.n	800b99e <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	3302      	adds	r3, #2
 800b978:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	885b      	ldrh	r3, [r3, #2]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	461a      	mov	r2, r3
 800b982:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <Custom_STM_Event_Handler+0x88>)
 800b984:	885b      	ldrh	r3, [r3, #2]
 800b986:	3301      	adds	r3, #1
 800b988:	429a      	cmp	r2, r3
 800b98a:	d107      	bne.n	800b99c <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b98c:	2301      	movs	r3, #1
 800b98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b992:	e003      	b.n	800b99c <Custom_STM_Event_Handler+0x70>
          break;
 800b994:	bf00      	nop
 800b996:	e004      	b.n	800b9a2 <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b998:	bf00      	nop
 800b99a:	e002      	b.n	800b9a2 <Custom_STM_Event_Handler+0x76>
          break;
 800b99c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b99e:	e000      	b.n	800b9a2 <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b9a0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b9a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	372c      	adds	r7, #44	; 0x2c
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	200011d0 	.word	0x200011d0

0800b9b8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08c      	sub	sp, #48	; 0x30
 800b9bc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b9be:	2392      	movs	r3, #146	; 0x92
 800b9c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b9c2:	4834      	ldr	r0, [pc, #208]	; (800ba94 <SVCCTL_InitCustomSvc+0xdc>)
 800b9c4:	f7fe fd50 	bl	800a468 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800b9c8:	238f      	movs	r3, #143	; 0x8f
 800b9ca:	713b      	strb	r3, [r7, #4]
 800b9cc:	23e5      	movs	r3, #229	; 0xe5
 800b9ce:	717b      	strb	r3, [r7, #5]
 800b9d0:	23b3      	movs	r3, #179	; 0xb3
 800b9d2:	71bb      	strb	r3, [r7, #6]
 800b9d4:	23d5      	movs	r3, #213	; 0xd5
 800b9d6:	71fb      	strb	r3, [r7, #7]
 800b9d8:	232e      	movs	r3, #46	; 0x2e
 800b9da:	723b      	strb	r3, [r7, #8]
 800b9dc:	237f      	movs	r3, #127	; 0x7f
 800b9de:	727b      	strb	r3, [r7, #9]
 800b9e0:	234a      	movs	r3, #74	; 0x4a
 800b9e2:	72bb      	strb	r3, [r7, #10]
 800b9e4:	2398      	movs	r3, #152	; 0x98
 800b9e6:	72fb      	strb	r3, [r7, #11]
 800b9e8:	232a      	movs	r3, #42	; 0x2a
 800b9ea:	733b      	strb	r3, [r7, #12]
 800b9ec:	2348      	movs	r3, #72	; 0x48
 800b9ee:	737b      	strb	r3, [r7, #13]
 800b9f0:	237a      	movs	r3, #122	; 0x7a
 800b9f2:	73bb      	strb	r3, [r7, #14]
 800b9f4:	23cc      	movs	r3, #204	; 0xcc
 800b9f6:	73fb      	strb	r3, [r7, #15]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	743b      	strb	r3, [r7, #16]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	747b      	strb	r3, [r7, #17]
 800ba00:	2300      	movs	r3, #0
 800ba02:	74bb      	strb	r3, [r7, #18]
 800ba04:	2300      	movs	r3, #0
 800ba06:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ba08:	1d39      	adds	r1, r7, #4
 800ba0a:	4b23      	ldr	r3, [pc, #140]	; (800ba98 <SVCCTL_InitCustomSvc+0xe0>)
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	2303      	movs	r3, #3
 800ba10:	2201      	movs	r2, #1
 800ba12:	2002      	movs	r0, #2
 800ba14:	f7fd fff0 	bl	80099f8 <aci_gatt_add_service>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800ba1c:	2319      	movs	r3, #25
 800ba1e:	713b      	strb	r3, [r7, #4]
 800ba20:	23ed      	movs	r3, #237	; 0xed
 800ba22:	717b      	strb	r3, [r7, #5]
 800ba24:	2382      	movs	r3, #130	; 0x82
 800ba26:	71bb      	strb	r3, [r7, #6]
 800ba28:	23ae      	movs	r3, #174	; 0xae
 800ba2a:	71fb      	strb	r3, [r7, #7]
 800ba2c:	23ed      	movs	r3, #237	; 0xed
 800ba2e:	723b      	strb	r3, [r7, #8]
 800ba30:	2321      	movs	r3, #33	; 0x21
 800ba32:	727b      	strb	r3, [r7, #9]
 800ba34:	234c      	movs	r3, #76	; 0x4c
 800ba36:	72bb      	strb	r3, [r7, #10]
 800ba38:	239d      	movs	r3, #157	; 0x9d
 800ba3a:	72fb      	strb	r3, [r7, #11]
 800ba3c:	2341      	movs	r3, #65	; 0x41
 800ba3e:	733b      	strb	r3, [r7, #12]
 800ba40:	2345      	movs	r3, #69	; 0x45
 800ba42:	737b      	strb	r3, [r7, #13]
 800ba44:	2322      	movs	r3, #34	; 0x22
 800ba46:	73bb      	strb	r3, [r7, #14]
 800ba48:	238e      	movs	r3, #142	; 0x8e
 800ba4a:	73fb      	strb	r3, [r7, #15]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	743b      	strb	r3, [r7, #16]
 800ba50:	2300      	movs	r3, #0
 800ba52:	747b      	strb	r3, [r7, #17]
 800ba54:	2300      	movs	r3, #0
 800ba56:	74bb      	strb	r3, [r7, #18]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800ba5c:	4b0e      	ldr	r3, [pc, #56]	; (800ba98 <SVCCTL_InitCustomSvc+0xe0>)
 800ba5e:	8818      	ldrh	r0, [r3, #0]
 800ba60:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <SVCCTL_InitCustomSvc+0xe4>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	1d3a      	adds	r2, r7, #4
 800ba68:	490d      	ldr	r1, [pc, #52]	; (800baa0 <SVCCTL_InitCustomSvc+0xe8>)
 800ba6a:	9105      	str	r1, [sp, #20]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	9104      	str	r1, [sp, #16]
 800ba70:	2110      	movs	r1, #16
 800ba72:	9103      	str	r1, [sp, #12]
 800ba74:	2101      	movs	r1, #1
 800ba76:	9102      	str	r1, [sp, #8]
 800ba78:	2100      	movs	r1, #0
 800ba7a:	9101      	str	r1, [sp, #4]
 800ba7c:	2108      	movs	r1, #8
 800ba7e:	9100      	str	r1, [sp, #0]
 800ba80:	2102      	movs	r1, #2
 800ba82:	f7fe f88f 	bl	8009ba4 <aci_gatt_add_char>
 800ba86:	4603      	mov	r3, r0
 800ba88:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ba8a:	bf00      	nop
}
 800ba8c:	3718      	adds	r7, #24
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	0800b92d 	.word	0x0800b92d
 800ba98:	200011d0 	.word	0x200011d0
 800ba9c:	2000001d 	.word	0x2000001d
 800baa0:	200011d2 	.word	0x200011d2

0800baa4 <LL_PWR_EnableBootC2>:
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800baa8:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <LL_PWR_EnableBootC2+0x1c>)
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	4a04      	ldr	r2, [pc, #16]	; (800bac0 <LL_PWR_EnableBootC2+0x1c>)
 800baae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bab2:	60d3      	str	r3, [r2, #12]
}
 800bab4:	bf00      	nop
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	58000400 	.word	0x58000400

0800bac4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bace:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bad2:	4905      	ldr	r1, [pc, #20]	; (800bae8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	58000800 	.word	0x58000800

0800baec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800baf4:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800baf6:	6a1a      	ldr	r2, [r3, #32]
 800baf8:	4904      	ldr	r1, [pc, #16]	; (800bb0c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	620b      	str	r3, [r1, #32]
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	58000800 	.word	0x58000800

0800bb10 <LL_AHB3_GRP1_EnableClock>:
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bb18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bb28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4013      	ands	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bb34:	68fb      	ldr	r3, [r7, #12]
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800bb4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb4e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bb52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800bb5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb62:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <LL_C1_IPCC_EnableIT_TXF>:
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
}
 800bb8e:	bf00      	nop
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <LL_C1_IPCC_EnableIT_RXO>:
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f043 0201 	orr.w	r2, r3, #1
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	601a      	str	r2, [r3, #0]
}
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <LL_C1_IPCC_EnableTransmitChannel>:
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	041b      	lsls	r3, r3, #16
 800bbcc:	43db      	mvns	r3, r3
 800bbce:	401a      	ands	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	605a      	str	r2, [r3, #4]
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	041b      	lsls	r3, r3, #16
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	605a      	str	r2, [r3, #4]
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	43db      	mvns	r3, r3
 800bc16:	401a      	ands	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	605a      	str	r2, [r3, #4]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	609a      	str	r2, [r3, #8]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <LL_C1_IPCC_SetFlag_CHx>:
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	041a      	lsls	r2, r3, #16
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	609a      	str	r2, [r3, #8]
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	4013      	ands	r3, r2
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d101      	bne.n	800bc7e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e000      	b.n	800bc80 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	69da      	ldr	r2, [r3, #28]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d101      	bne.n	800bca8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e000      	b.n	800bcaa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
	...

0800bcb8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	4819      	ldr	r0, [pc, #100]	; (800bd24 <HW_IPCC_Rx_Handler+0x6c>)
 800bcc0:	f7ff ffe4 	bl	800bc8c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d009      	beq.n	800bcde <HW_IPCC_Rx_Handler+0x26>
 800bcca:	4b16      	ldr	r3, [pc, #88]	; (800bd24 <HW_IPCC_Rx_Handler+0x6c>)
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	43db      	mvns	r3, r3
 800bcd0:	f003 0302 	and.w	r3, r3, #2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800bcd8:	f000 f8da 	bl	800be90 <HW_IPCC_SYS_EvtHandler>
 800bcdc:	e01f      	b.n	800bd1e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bcde:	2101      	movs	r1, #1
 800bce0:	4810      	ldr	r0, [pc, #64]	; (800bd24 <HW_IPCC_Rx_Handler+0x6c>)
 800bce2:	f7ff ffd3 	bl	800bc8c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d008      	beq.n	800bcfe <HW_IPCC_Rx_Handler+0x46>
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <HW_IPCC_Rx_Handler+0x6c>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f003 0301 	and.w	r3, r3, #1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d102      	bne.n	800bcfe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800bcf8:	f000 f88e 	bl	800be18 <HW_IPCC_BLE_EvtHandler>
 800bcfc:	e00f      	b.n	800bd1e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bcfe:	2108      	movs	r1, #8
 800bd00:	4808      	ldr	r0, [pc, #32]	; (800bd24 <HW_IPCC_Rx_Handler+0x6c>)
 800bd02:	f7ff ffc3 	bl	800bc8c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d009      	beq.n	800bd20 <HW_IPCC_Rx_Handler+0x68>
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <HW_IPCC_Rx_Handler+0x6c>)
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	43db      	mvns	r3, r3
 800bd12:	f003 0308 	and.w	r3, r3, #8
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800bd1a:	f000 f905 	bl	800bf28 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bd1e:	bf00      	nop
 800bd20:	bf00      	nop
}
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	58000c00 	.word	0x58000c00

0800bd28 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bd2c:	2102      	movs	r1, #2
 800bd2e:	481a      	ldr	r0, [pc, #104]	; (800bd98 <HW_IPCC_Tx_Handler+0x70>)
 800bd30:	f7ff ff97 	bl	800bc62 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d109      	bne.n	800bd4e <HW_IPCC_Tx_Handler+0x26>
 800bd3a:	4b17      	ldr	r3, [pc, #92]	; (800bd98 <HW_IPCC_Tx_Handler+0x70>)
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	43db      	mvns	r3, r3
 800bd40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800bd48:	f000 f896 	bl	800be78 <HW_IPCC_SYS_CmdEvtHandler>
 800bd4c:	e020      	b.n	800bd90 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800bd4e:	2108      	movs	r1, #8
 800bd50:	4811      	ldr	r0, [pc, #68]	; (800bd98 <HW_IPCC_Tx_Handler+0x70>)
 800bd52:	f7ff ff86 	bl	800bc62 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d109      	bne.n	800bd70 <HW_IPCC_Tx_Handler+0x48>
 800bd5c:	4b0e      	ldr	r3, [pc, #56]	; (800bd98 <HW_IPCC_Tx_Handler+0x70>)
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	43db      	mvns	r3, r3
 800bd62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800bd6a:	f000 f8bf 	bl	800beec <HW_IPCC_MM_FreeBufHandler>
 800bd6e:	e00f      	b.n	800bd90 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bd70:	2120      	movs	r1, #32
 800bd72:	4809      	ldr	r0, [pc, #36]	; (800bd98 <HW_IPCC_Tx_Handler+0x70>)
 800bd74:	f7ff ff75 	bl	800bc62 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d109      	bne.n	800bd92 <HW_IPCC_Tx_Handler+0x6a>
 800bd7e:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <HW_IPCC_Tx_Handler+0x70>)
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	43db      	mvns	r3, r3
 800bd84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800bd8c:	f000 f850 	bl	800be30 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
}
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	58000c00 	.word	0x58000c00

0800bd9c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bda0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bda4:	f7ff fecd 	bl	800bb42 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bda8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bdac:	f7ff fe9e 	bl	800baec <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bdb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bdb4:	f7ff fe86 	bl	800bac4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bdb8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bdba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bdbc:	f7ff fe72 	bl	800baa4 <LL_PWR_EnableBootC2>

  return;
 800bdc0:	bf00      	nop
}
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bdc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bdcc:	f7ff fea0 	bl	800bb10 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bdd0:	4806      	ldr	r0, [pc, #24]	; (800bdec <HW_IPCC_Init+0x28>)
 800bdd2:	f7ff fee2 	bl	800bb9a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bdd6:	4805      	ldr	r0, [pc, #20]	; (800bdec <HW_IPCC_Init+0x28>)
 800bdd8:	f7ff fecf 	bl	800bb7a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bddc:	202c      	movs	r0, #44	; 0x2c
 800bdde:	f7f7 fd5e 	bl	800389e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bde2:	202d      	movs	r0, #45	; 0x2d
 800bde4:	f7f7 fd5b 	bl	800389e <HAL_NVIC_EnableIRQ>

  return;
 800bde8:	bf00      	nop
}
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	58000c00 	.word	0x58000c00

0800bdf0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	4802      	ldr	r0, [pc, #8]	; (800be00 <HW_IPCC_BLE_Init+0x10>)
 800bdf8:	f7ff ff04 	bl	800bc04 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bdfc:	bf00      	nop
}
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	58000c00 	.word	0x58000c00

0800be04 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800be08:	2101      	movs	r1, #1
 800be0a:	4802      	ldr	r0, [pc, #8]	; (800be14 <HW_IPCC_BLE_SendCmd+0x10>)
 800be0c:	f7ff ff1a 	bl	800bc44 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800be10:	bf00      	nop
}
 800be12:	bd80      	pop	{r7, pc}
 800be14:	58000c00 	.word	0x58000c00

0800be18 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800be1c:	f7fe ffde 	bl	800addc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800be20:	2101      	movs	r1, #1
 800be22:	4802      	ldr	r0, [pc, #8]	; (800be2c <HW_IPCC_BLE_EvtHandler+0x14>)
 800be24:	f7ff ff00 	bl	800bc28 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800be28:	bf00      	nop
}
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	58000c00 	.word	0x58000c00

0800be30 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800be34:	2120      	movs	r1, #32
 800be36:	4803      	ldr	r0, [pc, #12]	; (800be44 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800be38:	f7ff fed2 	bl	800bbe0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800be3c:	f7fe fffe 	bl	800ae3c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800be40:	bf00      	nop
}
 800be42:	bd80      	pop	{r7, pc}
 800be44:	58000c00 	.word	0x58000c00

0800be48 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800be4c:	2102      	movs	r1, #2
 800be4e:	4802      	ldr	r0, [pc, #8]	; (800be58 <HW_IPCC_SYS_Init+0x10>)
 800be50:	f7ff fed8 	bl	800bc04 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800be54:	bf00      	nop
}
 800be56:	bd80      	pop	{r7, pc}
 800be58:	58000c00 	.word	0x58000c00

0800be5c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800be60:	2102      	movs	r1, #2
 800be62:	4804      	ldr	r0, [pc, #16]	; (800be74 <HW_IPCC_SYS_SendCmd+0x18>)
 800be64:	f7ff feee 	bl	800bc44 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800be68:	2102      	movs	r1, #2
 800be6a:	4802      	ldr	r0, [pc, #8]	; (800be74 <HW_IPCC_SYS_SendCmd+0x18>)
 800be6c:	f7ff fea5 	bl	800bbba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800be70:	bf00      	nop
}
 800be72:	bd80      	pop	{r7, pc}
 800be74:	58000c00 	.word	0x58000c00

0800be78 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800be7c:	2102      	movs	r1, #2
 800be7e:	4803      	ldr	r0, [pc, #12]	; (800be8c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800be80:	f7ff feae 	bl	800bbe0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800be84:	f7ff f82a 	bl	800aedc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800be88:	bf00      	nop
}
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	58000c00 	.word	0x58000c00

0800be90 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800be94:	f7ff f838 	bl	800af08 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800be98:	2102      	movs	r1, #2
 800be9a:	4802      	ldr	r0, [pc, #8]	; (800bea4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800be9c:	f7ff fec4 	bl	800bc28 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bea0:	bf00      	nop
}
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	58000c00 	.word	0x58000c00

0800bea8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800beb0:	2108      	movs	r1, #8
 800beb2:	480c      	ldr	r0, [pc, #48]	; (800bee4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800beb4:	f7ff fed5 	bl	800bc62 <LL_C1_IPCC_IsActiveFlag_CHx>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d007      	beq.n	800bece <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bebe:	4a0a      	ldr	r2, [pc, #40]	; (800bee8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bec4:	2108      	movs	r1, #8
 800bec6:	4807      	ldr	r0, [pc, #28]	; (800bee4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bec8:	f7ff fe77 	bl	800bbba <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800becc:	e006      	b.n	800bedc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bed2:	2108      	movs	r1, #8
 800bed4:	4803      	ldr	r0, [pc, #12]	; (800bee4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bed6:	f7ff feb5 	bl	800bc44 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800beda:	bf00      	nop
}
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	58000c00 	.word	0x58000c00
 800bee8:	200011d4 	.word	0x200011d4

0800beec <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bef0:	2108      	movs	r1, #8
 800bef2:	4806      	ldr	r0, [pc, #24]	; (800bf0c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bef4:	f7ff fe74 	bl	800bbe0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800befe:	2108      	movs	r1, #8
 800bf00:	4802      	ldr	r0, [pc, #8]	; (800bf0c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bf02:	f7ff fe9f 	bl	800bc44 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bf06:	bf00      	nop
}
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	58000c00 	.word	0x58000c00
 800bf10:	200011d4 	.word	0x200011d4

0800bf14 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bf18:	2108      	movs	r1, #8
 800bf1a:	4802      	ldr	r0, [pc, #8]	; (800bf24 <HW_IPCC_TRACES_Init+0x10>)
 800bf1c:	f7ff fe72 	bl	800bc04 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bf20:	bf00      	nop
}
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	58000c00 	.word	0x58000c00

0800bf28 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800bf2c:	f7ff f894 	bl	800b058 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bf30:	2108      	movs	r1, #8
 800bf32:	4802      	ldr	r0, [pc, #8]	; (800bf3c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800bf34:	f7ff fe78 	bl	800bc28 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bf38:	bf00      	nop
}
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	58000c00 	.word	0x58000c00

0800bf40 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf44:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <UTIL_LPM_Init+0x1c>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <UTIL_LPM_Init+0x20>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bf50:	bf00      	nop
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	200011d8 	.word	0x200011d8
 800bf60:	200011dc 	.word	0x200011dc

0800bf64 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bf64:	b480      	push	{r7}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf70:	f3ef 8310 	mrs	r3, PRIMASK
 800bf74:	613b      	str	r3, [r7, #16]
  return(result);
 800bf76:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bf78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf7a:	b672      	cpsid	i
}
 800bf7c:	bf00      	nop
  
  switch(state)
 800bf7e:	78fb      	ldrb	r3, [r7, #3]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d008      	beq.n	800bf96 <UTIL_LPM_SetOffMode+0x32>
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d10e      	bne.n	800bfa6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bf88:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <UTIL_LPM_SetOffMode+0x5c>)
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	4a0b      	ldr	r2, [pc, #44]	; (800bfc0 <UTIL_LPM_SetOffMode+0x5c>)
 800bf92:	6013      	str	r3, [r2, #0]
      break;
 800bf94:	e008      	b.n	800bfa8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	43da      	mvns	r2, r3
 800bf9a:	4b09      	ldr	r3, [pc, #36]	; (800bfc0 <UTIL_LPM_SetOffMode+0x5c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	4a07      	ldr	r2, [pc, #28]	; (800bfc0 <UTIL_LPM_SetOffMode+0x5c>)
 800bfa2:	6013      	str	r3, [r2, #0]
      break;
 800bfa4:	e000      	b.n	800bfa8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bfa6:	bf00      	nop
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f383 8810 	msr	PRIMASK, r3
}
 800bfb2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bfb4:	bf00      	nop
 800bfb6:	371c      	adds	r7, #28
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	200011dc 	.word	0x200011dc

0800bfc4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b090      	sub	sp, #64	; 0x40
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bfcc:	4b73      	ldr	r3, [pc, #460]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bfd2:	4b72      	ldr	r3, [pc, #456]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4013      	ands	r3, r2
 800bfda:	4a70      	ldr	r2, [pc, #448]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800bfdc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bfde:	4b70      	ldr	r3, [pc, #448]	; (800c1a0 <UTIL_SEQ_Run+0x1dc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bfe4:	4b6f      	ldr	r3, [pc, #444]	; (800c1a4 <UTIL_SEQ_Run+0x1e0>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bfea:	4b6f      	ldr	r3, [pc, #444]	; (800c1a8 <UTIL_SEQ_Run+0x1e4>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bff0:	4b6e      	ldr	r3, [pc, #440]	; (800c1ac <UTIL_SEQ_Run+0x1e8>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bff6:	e08d      	b.n	800c114 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bffc:	e002      	b.n	800c004 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c000:	3301      	adds	r3, #1
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c004:	4a6a      	ldr	r2, [pc, #424]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c008:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	401a      	ands	r2, r3
 800c010:	4b62      	ldr	r3, [pc, #392]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4013      	ands	r3, r2
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0f1      	beq.n	800bffe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c01a:	4a65      	ldr	r2, [pc, #404]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	401a      	ands	r2, r3
 800c026:	4b5d      	ldr	r3, [pc, #372]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4013      	ands	r3, r2
 800c02c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c02e:	4a60      	ldr	r2, [pc, #384]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	4413      	add	r3, r2
 800c036:	685a      	ldr	r2, [r3, #4]
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d106      	bne.n	800c04e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c040:	4a5b      	ldr	r2, [pc, #364]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	4413      	add	r3, r2
 800c048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c04c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c04e:	4a58      	ldr	r2, [pc, #352]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	4413      	add	r3, r2
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	4013      	ands	r3, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f9b3 	bl	800c3c8 <SEQ_BitPosition>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	4b53      	ldr	r3, [pc, #332]	; (800c1b4 <UTIL_SEQ_Run+0x1f0>)
 800c068:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c06a:	4a51      	ldr	r2, [pc, #324]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	4413      	add	r3, r2
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b4f      	ldr	r3, [pc, #316]	; (800c1b4 <UTIL_SEQ_Run+0x1f0>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2101      	movs	r1, #1
 800c07a:	fa01 f303 	lsl.w	r3, r1, r3
 800c07e:	43db      	mvns	r3, r3
 800c080:	401a      	ands	r2, r3
 800c082:	494b      	ldr	r1, [pc, #300]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	440b      	add	r3, r1
 800c08a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c08c:	f3ef 8310 	mrs	r3, PRIMASK
 800c090:	61bb      	str	r3, [r7, #24]
  return(result);
 800c092:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c094:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c096:	b672      	cpsid	i
}
 800c098:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c09a:	4b46      	ldr	r3, [pc, #280]	; (800c1b4 <UTIL_SEQ_Run+0x1f0>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a4:	43da      	mvns	r2, r3
 800c0a6:	4b3e      	ldr	r3, [pc, #248]	; (800c1a0 <UTIL_SEQ_Run+0x1dc>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	4a3c      	ldr	r2, [pc, #240]	; (800c1a0 <UTIL_SEQ_Run+0x1dc>)
 800c0ae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b4:	e013      	b.n	800c0de <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	4a3d      	ldr	r2, [pc, #244]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c0bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c0c0:	4b3c      	ldr	r3, [pc, #240]	; (800c1b4 <UTIL_SEQ_Run+0x1f0>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ca:	43da      	mvns	r2, r3
 800c0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	400a      	ands	r2, r1
 800c0d2:	4937      	ldr	r1, [pc, #220]	; (800c1b0 <UTIL_SEQ_Run+0x1ec>)
 800c0d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e8      	bne.n	800c0b6 <UTIL_SEQ_Run+0xf2>
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f383 8810 	msr	PRIMASK, r3
}
 800c0ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c0f0:	4b30      	ldr	r3, [pc, #192]	; (800c1b4 <UTIL_SEQ_Run+0x1f0>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a30      	ldr	r2, [pc, #192]	; (800c1b8 <UTIL_SEQ_Run+0x1f4>)
 800c0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0fa:	4798      	blx	r3

    local_taskset = TaskSet;
 800c0fc:	4b28      	ldr	r3, [pc, #160]	; (800c1a0 <UTIL_SEQ_Run+0x1dc>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c102:	4b28      	ldr	r3, [pc, #160]	; (800c1a4 <UTIL_SEQ_Run+0x1e0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c108:	4b27      	ldr	r3, [pc, #156]	; (800c1a8 <UTIL_SEQ_Run+0x1e4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c10e:	4b27      	ldr	r3, [pc, #156]	; (800c1ac <UTIL_SEQ_Run+0x1e8>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	401a      	ands	r2, r3
 800c11a:	4b20      	ldr	r3, [pc, #128]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4013      	ands	r3, r2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d005      	beq.n	800c130 <UTIL_SEQ_Run+0x16c>
 800c124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f43f af64 	beq.w	800bff8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c130:	4b20      	ldr	r3, [pc, #128]	; (800c1b4 <UTIL_SEQ_Run+0x1f0>)
 800c132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c136:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c138:	f000 f938 	bl	800c3ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c13c:	f3ef 8310 	mrs	r3, PRIMASK
 800c140:	613b      	str	r3, [r7, #16]
  return(result);
 800c142:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c144:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c146:	b672      	cpsid	i
}
 800c148:	bf00      	nop
  local_taskset = TaskSet;
 800c14a:	4b15      	ldr	r3, [pc, #84]	; (800c1a0 <UTIL_SEQ_Run+0x1dc>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c150:	4b14      	ldr	r3, [pc, #80]	; (800c1a4 <UTIL_SEQ_Run+0x1e0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <UTIL_SEQ_Run+0x1e4>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	401a      	ands	r2, r3
 800c162:	4b0e      	ldr	r3, [pc, #56]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4013      	ands	r3, r2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d107      	bne.n	800c17c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c16c:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <UTIL_SEQ_Run+0x1e8>)
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c172:	4013      	ands	r3, r2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c178:	f7f5 fc3e 	bl	80019f8 <UTIL_SEQ_Idle>
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f383 8810 	msr	PRIMASK, r3
}
 800c186:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c188:	f000 f917 	bl	800c3ba <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c18c:	4a03      	ldr	r2, [pc, #12]	; (800c19c <UTIL_SEQ_Run+0x1d8>)
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	6013      	str	r3, [r2, #0]

  return;
 800c192:	bf00      	nop
}
 800c194:	3740      	adds	r7, #64	; 0x40
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000024 	.word	0x20000024
 800c1a0:	200011e0 	.word	0x200011e0
 800c1a4:	200011e4 	.word	0x200011e4
 800c1a8:	20000020 	.word	0x20000020
 800c1ac:	200011e8 	.word	0x200011e8
 800c1b0:	20001270 	.word	0x20001270
 800c1b4:	200011ec 	.word	0x200011ec
 800c1b8:	200011f0 	.word	0x200011f0

0800c1bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1c8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c1d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1d2:	b672      	cpsid	i
}
 800c1d4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f000 f8f6 	bl	800c3c8 <SEQ_BitPosition>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4a06      	ldr	r2, [pc, #24]	; (800c1fc <UTIL_SEQ_RegTask+0x40>)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	f383 8810 	msr	PRIMASK, r3
}
 800c1f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c1f4:	bf00      	nop
}
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	200011f0 	.word	0x200011f0

0800c200 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c200:	b480      	push	{r7}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c20a:	f3ef 8310 	mrs	r3, PRIMASK
 800c20e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c210:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c214:	b672      	cpsid	i
}
 800c216:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c218:	4b0d      	ldr	r3, [pc, #52]	; (800c250 <UTIL_SEQ_SetTask+0x50>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4313      	orrs	r3, r2
 800c220:	4a0b      	ldr	r2, [pc, #44]	; (800c250 <UTIL_SEQ_SetTask+0x50>)
 800c222:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c224:	4a0b      	ldr	r2, [pc, #44]	; (800c254 <UTIL_SEQ_SetTask+0x54>)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	431a      	orrs	r2, r3
 800c230:	4908      	ldr	r1, [pc, #32]	; (800c254 <UTIL_SEQ_SetTask+0x54>)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f383 8810 	msr	PRIMASK, r3
}
 800c242:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c244:	bf00      	nop
}
 800c246:	371c      	adds	r7, #28
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	200011e0 	.word	0x200011e0
 800c254:	20001270 	.word	0x20001270

0800c258 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c260:	f3ef 8310 	mrs	r3, PRIMASK
 800c264:	60fb      	str	r3, [r7, #12]
  return(result);
 800c266:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c26a:	b672      	cpsid	i
}
 800c26c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	43da      	mvns	r2, r3
 800c272:	4b08      	ldr	r3, [pc, #32]	; (800c294 <UTIL_SEQ_PauseTask+0x3c>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4013      	ands	r3, r2
 800c278:	4a06      	ldr	r2, [pc, #24]	; (800c294 <UTIL_SEQ_PauseTask+0x3c>)
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f383 8810 	msr	PRIMASK, r3
}
 800c286:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c288:	bf00      	nop
}
 800c28a:	371c      	adds	r7, #28
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	20000020 	.word	0x20000020

0800c298 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c2a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2aa:	b672      	cpsid	i
}
 800c2ac:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c2ae:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <UTIL_SEQ_ResumeTask+0x3c>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	4a07      	ldr	r2, [pc, #28]	; (800c2d4 <UTIL_SEQ_ResumeTask+0x3c>)
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f383 8810 	msr	PRIMASK, r3
}
 800c2c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c2c6:	bf00      	nop
}
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	20000020 	.word	0x20000020

0800c2d8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b087      	sub	sp, #28
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c2e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2ea:	b672      	cpsid	i
}
 800c2ec:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <UTIL_SEQ_SetEvt+0x3c>)
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	4a07      	ldr	r2, [pc, #28]	; (800c314 <UTIL_SEQ_SetEvt+0x3c>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f383 8810 	msr	PRIMASK, r3
}
 800c304:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c306:	bf00      	nop
}
 800c308:	371c      	adds	r7, #28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	200011e4 	.word	0x200011e4

0800c318 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c320:	4b1f      	ldr	r3, [pc, #124]	; (800c3a0 <UTIL_SEQ_WaitEvt+0x88>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c326:	4b1e      	ldr	r3, [pc, #120]	; (800c3a0 <UTIL_SEQ_WaitEvt+0x88>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c32e:	d102      	bne.n	800c336 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c330:	2300      	movs	r3, #0
 800c332:	61fb      	str	r3, [r7, #28]
 800c334:	e005      	b.n	800c342 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c336:	4b1a      	ldr	r3, [pc, #104]	; (800c3a0 <UTIL_SEQ_WaitEvt+0x88>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2201      	movs	r2, #1
 800c33c:	fa02 f303 	lsl.w	r3, r2, r3
 800c340:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c342:	4b18      	ldr	r3, [pc, #96]	; (800c3a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c348:	4a16      	ldr	r2, [pc, #88]	; (800c3a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c34e:	e003      	b.n	800c358 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c350:	6879      	ldr	r1, [r7, #4]
 800c352:	69f8      	ldr	r0, [r7, #28]
 800c354:	f7f5 fb57 	bl	8001a06 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c358:	4b13      	ldr	r3, [pc, #76]	; (800c3a8 <UTIL_SEQ_WaitEvt+0x90>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4013      	ands	r3, r2
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0f5      	beq.n	800c350 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c364:	4a0e      	ldr	r2, [pc, #56]	; (800c3a0 <UTIL_SEQ_WaitEvt+0x88>)
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c36a:	f3ef 8310 	mrs	r3, PRIMASK
 800c36e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c370:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c374:	b672      	cpsid	i
}
 800c376:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	43da      	mvns	r2, r3
 800c37c:	4b0a      	ldr	r3, [pc, #40]	; (800c3a8 <UTIL_SEQ_WaitEvt+0x90>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4013      	ands	r3, r2
 800c382:	4a09      	ldr	r2, [pc, #36]	; (800c3a8 <UTIL_SEQ_WaitEvt+0x90>)
 800c384:	6013      	str	r3, [r2, #0]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f383 8810 	msr	PRIMASK, r3
}
 800c390:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c392:	4a04      	ldr	r2, [pc, #16]	; (800c3a4 <UTIL_SEQ_WaitEvt+0x8c>)
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	6013      	str	r3, [r2, #0]
  return;
 800c398:	bf00      	nop
}
 800c39a:	3720      	adds	r7, #32
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	200011ec 	.word	0x200011ec
 800c3a4:	200011e8 	.word	0x200011e8
 800c3a8:	200011e4 	.word	0x200011e4

0800c3ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c3b0:	bf00      	nop
}
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c3be:	bf00      	nop
}
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	0c1b      	lsrs	r3, r3, #16
 800c3dc:	041b      	lsls	r3, r3, #16
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d104      	bne.n	800c3ec <SEQ_BitPosition+0x24>
 800c3e2:	2310      	movs	r3, #16
 800c3e4:	73fb      	strb	r3, [r7, #15]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	041b      	lsls	r3, r3, #16
 800c3ea:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d105      	bne.n	800c402 <SEQ_BitPosition+0x3a>
 800c3f6:	7bfb      	ldrb	r3, [r7, #15]
 800c3f8:	3308      	adds	r3, #8
 800c3fa:	73fb      	strb	r3, [r7, #15]
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	021b      	lsls	r3, r3, #8
 800c400:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d105      	bne.n	800c418 <SEQ_BitPosition+0x50>
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
 800c40e:	3304      	adds	r3, #4
 800c410:	73fb      	strb	r3, [r7, #15]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	011b      	lsls	r3, r3, #4
 800c416:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	0f1b      	lsrs	r3, r3, #28
 800c41c:	4a07      	ldr	r2, [pc, #28]	; (800c43c <SEQ_BitPosition+0x74>)
 800c41e:	5cd2      	ldrb	r2, [r2, r3]
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	4413      	add	r3, r2
 800c424:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	f1c3 031f 	rsb	r3, r3, #31
 800c42c:	b2db      	uxtb	r3, r3
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	0800d90c 	.word	0x0800d90c

0800c440 <__errno>:
 800c440:	4b01      	ldr	r3, [pc, #4]	; (800c448 <__errno+0x8>)
 800c442:	6818      	ldr	r0, [r3, #0]
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	20000028 	.word	0x20000028

0800c44c <__libc_init_array>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	4d0d      	ldr	r5, [pc, #52]	; (800c484 <__libc_init_array+0x38>)
 800c450:	4c0d      	ldr	r4, [pc, #52]	; (800c488 <__libc_init_array+0x3c>)
 800c452:	1b64      	subs	r4, r4, r5
 800c454:	10a4      	asrs	r4, r4, #2
 800c456:	2600      	movs	r6, #0
 800c458:	42a6      	cmp	r6, r4
 800c45a:	d109      	bne.n	800c470 <__libc_init_array+0x24>
 800c45c:	4d0b      	ldr	r5, [pc, #44]	; (800c48c <__libc_init_array+0x40>)
 800c45e:	4c0c      	ldr	r4, [pc, #48]	; (800c490 <__libc_init_array+0x44>)
 800c460:	f001 f890 	bl	800d584 <_init>
 800c464:	1b64      	subs	r4, r4, r5
 800c466:	10a4      	asrs	r4, r4, #2
 800c468:	2600      	movs	r6, #0
 800c46a:	42a6      	cmp	r6, r4
 800c46c:	d105      	bne.n	800c47a <__libc_init_array+0x2e>
 800c46e:	bd70      	pop	{r4, r5, r6, pc}
 800c470:	f855 3b04 	ldr.w	r3, [r5], #4
 800c474:	4798      	blx	r3
 800c476:	3601      	adds	r6, #1
 800c478:	e7ee      	b.n	800c458 <__libc_init_array+0xc>
 800c47a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c47e:	4798      	blx	r3
 800c480:	3601      	adds	r6, #1
 800c482:	e7f2      	b.n	800c46a <__libc_init_array+0x1e>
 800c484:	0800d9bc 	.word	0x0800d9bc
 800c488:	0800d9bc 	.word	0x0800d9bc
 800c48c:	0800d9bc 	.word	0x0800d9bc
 800c490:	0800d9c0 	.word	0x0800d9c0

0800c494 <memcpy>:
 800c494:	440a      	add	r2, r1
 800c496:	4291      	cmp	r1, r2
 800c498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c49c:	d100      	bne.n	800c4a0 <memcpy+0xc>
 800c49e:	4770      	bx	lr
 800c4a0:	b510      	push	{r4, lr}
 800c4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4aa:	4291      	cmp	r1, r2
 800c4ac:	d1f9      	bne.n	800c4a2 <memcpy+0xe>
 800c4ae:	bd10      	pop	{r4, pc}

0800c4b0 <memset>:
 800c4b0:	4402      	add	r2, r0
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d100      	bne.n	800c4ba <memset+0xa>
 800c4b8:	4770      	bx	lr
 800c4ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c4be:	e7f9      	b.n	800c4b4 <memset+0x4>

0800c4c0 <iprintf>:
 800c4c0:	b40f      	push	{r0, r1, r2, r3}
 800c4c2:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <iprintf+0x2c>)
 800c4c4:	b513      	push	{r0, r1, r4, lr}
 800c4c6:	681c      	ldr	r4, [r3, #0]
 800c4c8:	b124      	cbz	r4, 800c4d4 <iprintf+0x14>
 800c4ca:	69a3      	ldr	r3, [r4, #24]
 800c4cc:	b913      	cbnz	r3, 800c4d4 <iprintf+0x14>
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f000 fa74 	bl	800c9bc <__sinit>
 800c4d4:	ab05      	add	r3, sp, #20
 800c4d6:	9a04      	ldr	r2, [sp, #16]
 800c4d8:	68a1      	ldr	r1, [r4, #8]
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f000 fc7d 	bl	800cddc <_vfiprintf_r>
 800c4e2:	b002      	add	sp, #8
 800c4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e8:	b004      	add	sp, #16
 800c4ea:	4770      	bx	lr
 800c4ec:	20000028 	.word	0x20000028

0800c4f0 <putchar>:
 800c4f0:	4b09      	ldr	r3, [pc, #36]	; (800c518 <putchar+0x28>)
 800c4f2:	b513      	push	{r0, r1, r4, lr}
 800c4f4:	681c      	ldr	r4, [r3, #0]
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	b134      	cbz	r4, 800c508 <putchar+0x18>
 800c4fa:	69a3      	ldr	r3, [r4, #24]
 800c4fc:	b923      	cbnz	r3, 800c508 <putchar+0x18>
 800c4fe:	9001      	str	r0, [sp, #4]
 800c500:	4620      	mov	r0, r4
 800c502:	f000 fa5b 	bl	800c9bc <__sinit>
 800c506:	9901      	ldr	r1, [sp, #4]
 800c508:	68a2      	ldr	r2, [r4, #8]
 800c50a:	4620      	mov	r0, r4
 800c50c:	b002      	add	sp, #8
 800c50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c512:	f000 bf27 	b.w	800d364 <_putc_r>
 800c516:	bf00      	nop
 800c518:	20000028 	.word	0x20000028

0800c51c <_puts_r>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	460e      	mov	r6, r1
 800c520:	4605      	mov	r5, r0
 800c522:	b118      	cbz	r0, 800c52c <_puts_r+0x10>
 800c524:	6983      	ldr	r3, [r0, #24]
 800c526:	b90b      	cbnz	r3, 800c52c <_puts_r+0x10>
 800c528:	f000 fa48 	bl	800c9bc <__sinit>
 800c52c:	69ab      	ldr	r3, [r5, #24]
 800c52e:	68ac      	ldr	r4, [r5, #8]
 800c530:	b913      	cbnz	r3, 800c538 <_puts_r+0x1c>
 800c532:	4628      	mov	r0, r5
 800c534:	f000 fa42 	bl	800c9bc <__sinit>
 800c538:	4b2c      	ldr	r3, [pc, #176]	; (800c5ec <_puts_r+0xd0>)
 800c53a:	429c      	cmp	r4, r3
 800c53c:	d120      	bne.n	800c580 <_puts_r+0x64>
 800c53e:	686c      	ldr	r4, [r5, #4]
 800c540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c542:	07db      	lsls	r3, r3, #31
 800c544:	d405      	bmi.n	800c552 <_puts_r+0x36>
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	0598      	lsls	r0, r3, #22
 800c54a:	d402      	bmi.n	800c552 <_puts_r+0x36>
 800c54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c54e:	f000 fad3 	bl	800caf8 <__retarget_lock_acquire_recursive>
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	0719      	lsls	r1, r3, #28
 800c556:	d51d      	bpl.n	800c594 <_puts_r+0x78>
 800c558:	6923      	ldr	r3, [r4, #16]
 800c55a:	b1db      	cbz	r3, 800c594 <_puts_r+0x78>
 800c55c:	3e01      	subs	r6, #1
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c564:	3b01      	subs	r3, #1
 800c566:	60a3      	str	r3, [r4, #8]
 800c568:	bb39      	cbnz	r1, 800c5ba <_puts_r+0x9e>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	da38      	bge.n	800c5e0 <_puts_r+0xc4>
 800c56e:	4622      	mov	r2, r4
 800c570:	210a      	movs	r1, #10
 800c572:	4628      	mov	r0, r5
 800c574:	f000 f848 	bl	800c608 <__swbuf_r>
 800c578:	3001      	adds	r0, #1
 800c57a:	d011      	beq.n	800c5a0 <_puts_r+0x84>
 800c57c:	250a      	movs	r5, #10
 800c57e:	e011      	b.n	800c5a4 <_puts_r+0x88>
 800c580:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <_puts_r+0xd4>)
 800c582:	429c      	cmp	r4, r3
 800c584:	d101      	bne.n	800c58a <_puts_r+0x6e>
 800c586:	68ac      	ldr	r4, [r5, #8]
 800c588:	e7da      	b.n	800c540 <_puts_r+0x24>
 800c58a:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <_puts_r+0xd8>)
 800c58c:	429c      	cmp	r4, r3
 800c58e:	bf08      	it	eq
 800c590:	68ec      	ldreq	r4, [r5, #12]
 800c592:	e7d5      	b.n	800c540 <_puts_r+0x24>
 800c594:	4621      	mov	r1, r4
 800c596:	4628      	mov	r0, r5
 800c598:	f000 f888 	bl	800c6ac <__swsetup_r>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d0dd      	beq.n	800c55c <_puts_r+0x40>
 800c5a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c5a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5a6:	07da      	lsls	r2, r3, #31
 800c5a8:	d405      	bmi.n	800c5b6 <_puts_r+0x9a>
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	059b      	lsls	r3, r3, #22
 800c5ae:	d402      	bmi.n	800c5b6 <_puts_r+0x9a>
 800c5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5b2:	f000 faa2 	bl	800cafa <__retarget_lock_release_recursive>
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da04      	bge.n	800c5c8 <_puts_r+0xac>
 800c5be:	69a2      	ldr	r2, [r4, #24]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	dc06      	bgt.n	800c5d2 <_puts_r+0xb6>
 800c5c4:	290a      	cmp	r1, #10
 800c5c6:	d004      	beq.n	800c5d2 <_puts_r+0xb6>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	6022      	str	r2, [r4, #0]
 800c5ce:	7019      	strb	r1, [r3, #0]
 800c5d0:	e7c5      	b.n	800c55e <_puts_r+0x42>
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f000 f817 	bl	800c608 <__swbuf_r>
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d1bf      	bne.n	800c55e <_puts_r+0x42>
 800c5de:	e7df      	b.n	800c5a0 <_puts_r+0x84>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	250a      	movs	r5, #10
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	6022      	str	r2, [r4, #0]
 800c5e8:	701d      	strb	r5, [r3, #0]
 800c5ea:	e7db      	b.n	800c5a4 <_puts_r+0x88>
 800c5ec:	0800d940 	.word	0x0800d940
 800c5f0:	0800d960 	.word	0x0800d960
 800c5f4:	0800d920 	.word	0x0800d920

0800c5f8 <puts>:
 800c5f8:	4b02      	ldr	r3, [pc, #8]	; (800c604 <puts+0xc>)
 800c5fa:	4601      	mov	r1, r0
 800c5fc:	6818      	ldr	r0, [r3, #0]
 800c5fe:	f7ff bf8d 	b.w	800c51c <_puts_r>
 800c602:	bf00      	nop
 800c604:	20000028 	.word	0x20000028

0800c608 <__swbuf_r>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	460e      	mov	r6, r1
 800c60c:	4614      	mov	r4, r2
 800c60e:	4605      	mov	r5, r0
 800c610:	b118      	cbz	r0, 800c61a <__swbuf_r+0x12>
 800c612:	6983      	ldr	r3, [r0, #24]
 800c614:	b90b      	cbnz	r3, 800c61a <__swbuf_r+0x12>
 800c616:	f000 f9d1 	bl	800c9bc <__sinit>
 800c61a:	4b21      	ldr	r3, [pc, #132]	; (800c6a0 <__swbuf_r+0x98>)
 800c61c:	429c      	cmp	r4, r3
 800c61e:	d12b      	bne.n	800c678 <__swbuf_r+0x70>
 800c620:	686c      	ldr	r4, [r5, #4]
 800c622:	69a3      	ldr	r3, [r4, #24]
 800c624:	60a3      	str	r3, [r4, #8]
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	071a      	lsls	r2, r3, #28
 800c62a:	d52f      	bpl.n	800c68c <__swbuf_r+0x84>
 800c62c:	6923      	ldr	r3, [r4, #16]
 800c62e:	b36b      	cbz	r3, 800c68c <__swbuf_r+0x84>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	6820      	ldr	r0, [r4, #0]
 800c634:	1ac0      	subs	r0, r0, r3
 800c636:	6963      	ldr	r3, [r4, #20]
 800c638:	b2f6      	uxtb	r6, r6
 800c63a:	4283      	cmp	r3, r0
 800c63c:	4637      	mov	r7, r6
 800c63e:	dc04      	bgt.n	800c64a <__swbuf_r+0x42>
 800c640:	4621      	mov	r1, r4
 800c642:	4628      	mov	r0, r5
 800c644:	f000 f926 	bl	800c894 <_fflush_r>
 800c648:	bb30      	cbnz	r0, 800c698 <__swbuf_r+0x90>
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	60a3      	str	r3, [r4, #8]
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	6022      	str	r2, [r4, #0]
 800c656:	701e      	strb	r6, [r3, #0]
 800c658:	6963      	ldr	r3, [r4, #20]
 800c65a:	3001      	adds	r0, #1
 800c65c:	4283      	cmp	r3, r0
 800c65e:	d004      	beq.n	800c66a <__swbuf_r+0x62>
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	07db      	lsls	r3, r3, #31
 800c664:	d506      	bpl.n	800c674 <__swbuf_r+0x6c>
 800c666:	2e0a      	cmp	r6, #10
 800c668:	d104      	bne.n	800c674 <__swbuf_r+0x6c>
 800c66a:	4621      	mov	r1, r4
 800c66c:	4628      	mov	r0, r5
 800c66e:	f000 f911 	bl	800c894 <_fflush_r>
 800c672:	b988      	cbnz	r0, 800c698 <__swbuf_r+0x90>
 800c674:	4638      	mov	r0, r7
 800c676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <__swbuf_r+0x9c>)
 800c67a:	429c      	cmp	r4, r3
 800c67c:	d101      	bne.n	800c682 <__swbuf_r+0x7a>
 800c67e:	68ac      	ldr	r4, [r5, #8]
 800c680:	e7cf      	b.n	800c622 <__swbuf_r+0x1a>
 800c682:	4b09      	ldr	r3, [pc, #36]	; (800c6a8 <__swbuf_r+0xa0>)
 800c684:	429c      	cmp	r4, r3
 800c686:	bf08      	it	eq
 800c688:	68ec      	ldreq	r4, [r5, #12]
 800c68a:	e7ca      	b.n	800c622 <__swbuf_r+0x1a>
 800c68c:	4621      	mov	r1, r4
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 f80c 	bl	800c6ac <__swsetup_r>
 800c694:	2800      	cmp	r0, #0
 800c696:	d0cb      	beq.n	800c630 <__swbuf_r+0x28>
 800c698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c69c:	e7ea      	b.n	800c674 <__swbuf_r+0x6c>
 800c69e:	bf00      	nop
 800c6a0:	0800d940 	.word	0x0800d940
 800c6a4:	0800d960 	.word	0x0800d960
 800c6a8:	0800d920 	.word	0x0800d920

0800c6ac <__swsetup_r>:
 800c6ac:	4b32      	ldr	r3, [pc, #200]	; (800c778 <__swsetup_r+0xcc>)
 800c6ae:	b570      	push	{r4, r5, r6, lr}
 800c6b0:	681d      	ldr	r5, [r3, #0]
 800c6b2:	4606      	mov	r6, r0
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	b125      	cbz	r5, 800c6c2 <__swsetup_r+0x16>
 800c6b8:	69ab      	ldr	r3, [r5, #24]
 800c6ba:	b913      	cbnz	r3, 800c6c2 <__swsetup_r+0x16>
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f000 f97d 	bl	800c9bc <__sinit>
 800c6c2:	4b2e      	ldr	r3, [pc, #184]	; (800c77c <__swsetup_r+0xd0>)
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	d10f      	bne.n	800c6e8 <__swsetup_r+0x3c>
 800c6c8:	686c      	ldr	r4, [r5, #4]
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6d0:	0719      	lsls	r1, r3, #28
 800c6d2:	d42c      	bmi.n	800c72e <__swsetup_r+0x82>
 800c6d4:	06dd      	lsls	r5, r3, #27
 800c6d6:	d411      	bmi.n	800c6fc <__swsetup_r+0x50>
 800c6d8:	2309      	movs	r3, #9
 800c6da:	6033      	str	r3, [r6, #0]
 800c6dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6e6:	e03e      	b.n	800c766 <__swsetup_r+0xba>
 800c6e8:	4b25      	ldr	r3, [pc, #148]	; (800c780 <__swsetup_r+0xd4>)
 800c6ea:	429c      	cmp	r4, r3
 800c6ec:	d101      	bne.n	800c6f2 <__swsetup_r+0x46>
 800c6ee:	68ac      	ldr	r4, [r5, #8]
 800c6f0:	e7eb      	b.n	800c6ca <__swsetup_r+0x1e>
 800c6f2:	4b24      	ldr	r3, [pc, #144]	; (800c784 <__swsetup_r+0xd8>)
 800c6f4:	429c      	cmp	r4, r3
 800c6f6:	bf08      	it	eq
 800c6f8:	68ec      	ldreq	r4, [r5, #12]
 800c6fa:	e7e6      	b.n	800c6ca <__swsetup_r+0x1e>
 800c6fc:	0758      	lsls	r0, r3, #29
 800c6fe:	d512      	bpl.n	800c726 <__swsetup_r+0x7a>
 800c700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c702:	b141      	cbz	r1, 800c716 <__swsetup_r+0x6a>
 800c704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c708:	4299      	cmp	r1, r3
 800c70a:	d002      	beq.n	800c712 <__swsetup_r+0x66>
 800c70c:	4630      	mov	r0, r6
 800c70e:	f000 fa5b 	bl	800cbc8 <_free_r>
 800c712:	2300      	movs	r3, #0
 800c714:	6363      	str	r3, [r4, #52]	; 0x34
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	2300      	movs	r3, #0
 800c720:	6063      	str	r3, [r4, #4]
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	f043 0308 	orr.w	r3, r3, #8
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	6923      	ldr	r3, [r4, #16]
 800c730:	b94b      	cbnz	r3, 800c746 <__swsetup_r+0x9a>
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c73c:	d003      	beq.n	800c746 <__swsetup_r+0x9a>
 800c73e:	4621      	mov	r1, r4
 800c740:	4630      	mov	r0, r6
 800c742:	f000 fa01 	bl	800cb48 <__smakebuf_r>
 800c746:	89a0      	ldrh	r0, [r4, #12]
 800c748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c74c:	f010 0301 	ands.w	r3, r0, #1
 800c750:	d00a      	beq.n	800c768 <__swsetup_r+0xbc>
 800c752:	2300      	movs	r3, #0
 800c754:	60a3      	str	r3, [r4, #8]
 800c756:	6963      	ldr	r3, [r4, #20]
 800c758:	425b      	negs	r3, r3
 800c75a:	61a3      	str	r3, [r4, #24]
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	b943      	cbnz	r3, 800c772 <__swsetup_r+0xc6>
 800c760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c764:	d1ba      	bne.n	800c6dc <__swsetup_r+0x30>
 800c766:	bd70      	pop	{r4, r5, r6, pc}
 800c768:	0781      	lsls	r1, r0, #30
 800c76a:	bf58      	it	pl
 800c76c:	6963      	ldrpl	r3, [r4, #20]
 800c76e:	60a3      	str	r3, [r4, #8]
 800c770:	e7f4      	b.n	800c75c <__swsetup_r+0xb0>
 800c772:	2000      	movs	r0, #0
 800c774:	e7f7      	b.n	800c766 <__swsetup_r+0xba>
 800c776:	bf00      	nop
 800c778:	20000028 	.word	0x20000028
 800c77c:	0800d940 	.word	0x0800d940
 800c780:	0800d960 	.word	0x0800d960
 800c784:	0800d920 	.word	0x0800d920

0800c788 <__sflush_r>:
 800c788:	898a      	ldrh	r2, [r1, #12]
 800c78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	4605      	mov	r5, r0
 800c790:	0710      	lsls	r0, r2, #28
 800c792:	460c      	mov	r4, r1
 800c794:	d458      	bmi.n	800c848 <__sflush_r+0xc0>
 800c796:	684b      	ldr	r3, [r1, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	dc05      	bgt.n	800c7a8 <__sflush_r+0x20>
 800c79c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	dc02      	bgt.n	800c7a8 <__sflush_r+0x20>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7aa:	2e00      	cmp	r6, #0
 800c7ac:	d0f9      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7b4:	682f      	ldr	r7, [r5, #0]
 800c7b6:	602b      	str	r3, [r5, #0]
 800c7b8:	d032      	beq.n	800c820 <__sflush_r+0x98>
 800c7ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	075a      	lsls	r2, r3, #29
 800c7c0:	d505      	bpl.n	800c7ce <__sflush_r+0x46>
 800c7c2:	6863      	ldr	r3, [r4, #4]
 800c7c4:	1ac0      	subs	r0, r0, r3
 800c7c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7c8:	b10b      	cbz	r3, 800c7ce <__sflush_r+0x46>
 800c7ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7cc:	1ac0      	subs	r0, r0, r3
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7d4:	6a21      	ldr	r1, [r4, #32]
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b0      	blx	r6
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	d106      	bne.n	800c7ee <__sflush_r+0x66>
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	291d      	cmp	r1, #29
 800c7e4:	d82c      	bhi.n	800c840 <__sflush_r+0xb8>
 800c7e6:	4a2a      	ldr	r2, [pc, #168]	; (800c890 <__sflush_r+0x108>)
 800c7e8:	40ca      	lsrs	r2, r1
 800c7ea:	07d6      	lsls	r6, r2, #31
 800c7ec:	d528      	bpl.n	800c840 <__sflush_r+0xb8>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	6062      	str	r2, [r4, #4]
 800c7f2:	04d9      	lsls	r1, r3, #19
 800c7f4:	6922      	ldr	r2, [r4, #16]
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	d504      	bpl.n	800c804 <__sflush_r+0x7c>
 800c7fa:	1c42      	adds	r2, r0, #1
 800c7fc:	d101      	bne.n	800c802 <__sflush_r+0x7a>
 800c7fe:	682b      	ldr	r3, [r5, #0]
 800c800:	b903      	cbnz	r3, 800c804 <__sflush_r+0x7c>
 800c802:	6560      	str	r0, [r4, #84]	; 0x54
 800c804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c806:	602f      	str	r7, [r5, #0]
 800c808:	2900      	cmp	r1, #0
 800c80a:	d0ca      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c80c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c810:	4299      	cmp	r1, r3
 800c812:	d002      	beq.n	800c81a <__sflush_r+0x92>
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f9d7 	bl	800cbc8 <_free_r>
 800c81a:	2000      	movs	r0, #0
 800c81c:	6360      	str	r0, [r4, #52]	; 0x34
 800c81e:	e7c1      	b.n	800c7a4 <__sflush_r+0x1c>
 800c820:	6a21      	ldr	r1, [r4, #32]
 800c822:	2301      	movs	r3, #1
 800c824:	4628      	mov	r0, r5
 800c826:	47b0      	blx	r6
 800c828:	1c41      	adds	r1, r0, #1
 800c82a:	d1c7      	bne.n	800c7bc <__sflush_r+0x34>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d0c4      	beq.n	800c7bc <__sflush_r+0x34>
 800c832:	2b1d      	cmp	r3, #29
 800c834:	d001      	beq.n	800c83a <__sflush_r+0xb2>
 800c836:	2b16      	cmp	r3, #22
 800c838:	d101      	bne.n	800c83e <__sflush_r+0xb6>
 800c83a:	602f      	str	r7, [r5, #0]
 800c83c:	e7b1      	b.n	800c7a2 <__sflush_r+0x1a>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	e7ad      	b.n	800c7a4 <__sflush_r+0x1c>
 800c848:	690f      	ldr	r7, [r1, #16]
 800c84a:	2f00      	cmp	r7, #0
 800c84c:	d0a9      	beq.n	800c7a2 <__sflush_r+0x1a>
 800c84e:	0793      	lsls	r3, r2, #30
 800c850:	680e      	ldr	r6, [r1, #0]
 800c852:	bf08      	it	eq
 800c854:	694b      	ldreq	r3, [r1, #20]
 800c856:	600f      	str	r7, [r1, #0]
 800c858:	bf18      	it	ne
 800c85a:	2300      	movne	r3, #0
 800c85c:	eba6 0807 	sub.w	r8, r6, r7
 800c860:	608b      	str	r3, [r1, #8]
 800c862:	f1b8 0f00 	cmp.w	r8, #0
 800c866:	dd9c      	ble.n	800c7a2 <__sflush_r+0x1a>
 800c868:	6a21      	ldr	r1, [r4, #32]
 800c86a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c86c:	4643      	mov	r3, r8
 800c86e:	463a      	mov	r2, r7
 800c870:	4628      	mov	r0, r5
 800c872:	47b0      	blx	r6
 800c874:	2800      	cmp	r0, #0
 800c876:	dc06      	bgt.n	800c886 <__sflush_r+0xfe>
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c884:	e78e      	b.n	800c7a4 <__sflush_r+0x1c>
 800c886:	4407      	add	r7, r0
 800c888:	eba8 0800 	sub.w	r8, r8, r0
 800c88c:	e7e9      	b.n	800c862 <__sflush_r+0xda>
 800c88e:	bf00      	nop
 800c890:	20400001 	.word	0x20400001

0800c894 <_fflush_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	690b      	ldr	r3, [r1, #16]
 800c898:	4605      	mov	r5, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	b913      	cbnz	r3, 800c8a4 <_fflush_r+0x10>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	b118      	cbz	r0, 800c8ae <_fflush_r+0x1a>
 800c8a6:	6983      	ldr	r3, [r0, #24]
 800c8a8:	b90b      	cbnz	r3, 800c8ae <_fflush_r+0x1a>
 800c8aa:	f000 f887 	bl	800c9bc <__sinit>
 800c8ae:	4b14      	ldr	r3, [pc, #80]	; (800c900 <_fflush_r+0x6c>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	d11b      	bne.n	800c8ec <_fflush_r+0x58>
 800c8b4:	686c      	ldr	r4, [r5, #4]
 800c8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d0ef      	beq.n	800c89e <_fflush_r+0xa>
 800c8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8c0:	07d0      	lsls	r0, r2, #31
 800c8c2:	d404      	bmi.n	800c8ce <_fflush_r+0x3a>
 800c8c4:	0599      	lsls	r1, r3, #22
 800c8c6:	d402      	bmi.n	800c8ce <_fflush_r+0x3a>
 800c8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ca:	f000 f915 	bl	800caf8 <__retarget_lock_acquire_recursive>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	f7ff ff59 	bl	800c788 <__sflush_r>
 800c8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8d8:	07da      	lsls	r2, r3, #31
 800c8da:	4605      	mov	r5, r0
 800c8dc:	d4e0      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	059b      	lsls	r3, r3, #22
 800c8e2:	d4dd      	bmi.n	800c8a0 <_fflush_r+0xc>
 800c8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e6:	f000 f908 	bl	800cafa <__retarget_lock_release_recursive>
 800c8ea:	e7d9      	b.n	800c8a0 <_fflush_r+0xc>
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <_fflush_r+0x70>)
 800c8ee:	429c      	cmp	r4, r3
 800c8f0:	d101      	bne.n	800c8f6 <_fflush_r+0x62>
 800c8f2:	68ac      	ldr	r4, [r5, #8]
 800c8f4:	e7df      	b.n	800c8b6 <_fflush_r+0x22>
 800c8f6:	4b04      	ldr	r3, [pc, #16]	; (800c908 <_fflush_r+0x74>)
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	bf08      	it	eq
 800c8fc:	68ec      	ldreq	r4, [r5, #12]
 800c8fe:	e7da      	b.n	800c8b6 <_fflush_r+0x22>
 800c900:	0800d940 	.word	0x0800d940
 800c904:	0800d960 	.word	0x0800d960
 800c908:	0800d920 	.word	0x0800d920

0800c90c <std>:
 800c90c:	2300      	movs	r3, #0
 800c90e:	b510      	push	{r4, lr}
 800c910:	4604      	mov	r4, r0
 800c912:	e9c0 3300 	strd	r3, r3, [r0]
 800c916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c91a:	6083      	str	r3, [r0, #8]
 800c91c:	8181      	strh	r1, [r0, #12]
 800c91e:	6643      	str	r3, [r0, #100]	; 0x64
 800c920:	81c2      	strh	r2, [r0, #14]
 800c922:	6183      	str	r3, [r0, #24]
 800c924:	4619      	mov	r1, r3
 800c926:	2208      	movs	r2, #8
 800c928:	305c      	adds	r0, #92	; 0x5c
 800c92a:	f7ff fdc1 	bl	800c4b0 <memset>
 800c92e:	4b05      	ldr	r3, [pc, #20]	; (800c944 <std+0x38>)
 800c930:	6263      	str	r3, [r4, #36]	; 0x24
 800c932:	4b05      	ldr	r3, [pc, #20]	; (800c948 <std+0x3c>)
 800c934:	62a3      	str	r3, [r4, #40]	; 0x28
 800c936:	4b05      	ldr	r3, [pc, #20]	; (800c94c <std+0x40>)
 800c938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c93a:	4b05      	ldr	r3, [pc, #20]	; (800c950 <std+0x44>)
 800c93c:	6224      	str	r4, [r4, #32]
 800c93e:	6323      	str	r3, [r4, #48]	; 0x30
 800c940:	bd10      	pop	{r4, pc}
 800c942:	bf00      	nop
 800c944:	0800d415 	.word	0x0800d415
 800c948:	0800d437 	.word	0x0800d437
 800c94c:	0800d46f 	.word	0x0800d46f
 800c950:	0800d493 	.word	0x0800d493

0800c954 <_cleanup_r>:
 800c954:	4901      	ldr	r1, [pc, #4]	; (800c95c <_cleanup_r+0x8>)
 800c956:	f000 b8af 	b.w	800cab8 <_fwalk_reent>
 800c95a:	bf00      	nop
 800c95c:	0800c895 	.word	0x0800c895

0800c960 <__sfmoreglue>:
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	2268      	movs	r2, #104	; 0x68
 800c964:	1e4d      	subs	r5, r1, #1
 800c966:	4355      	muls	r5, r2
 800c968:	460e      	mov	r6, r1
 800c96a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c96e:	f000 f997 	bl	800cca0 <_malloc_r>
 800c972:	4604      	mov	r4, r0
 800c974:	b140      	cbz	r0, 800c988 <__sfmoreglue+0x28>
 800c976:	2100      	movs	r1, #0
 800c978:	e9c0 1600 	strd	r1, r6, [r0]
 800c97c:	300c      	adds	r0, #12
 800c97e:	60a0      	str	r0, [r4, #8]
 800c980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c984:	f7ff fd94 	bl	800c4b0 <memset>
 800c988:	4620      	mov	r0, r4
 800c98a:	bd70      	pop	{r4, r5, r6, pc}

0800c98c <__sfp_lock_acquire>:
 800c98c:	4801      	ldr	r0, [pc, #4]	; (800c994 <__sfp_lock_acquire+0x8>)
 800c98e:	f000 b8b3 	b.w	800caf8 <__retarget_lock_acquire_recursive>
 800c992:	bf00      	nop
 800c994:	20001281 	.word	0x20001281

0800c998 <__sfp_lock_release>:
 800c998:	4801      	ldr	r0, [pc, #4]	; (800c9a0 <__sfp_lock_release+0x8>)
 800c99a:	f000 b8ae 	b.w	800cafa <__retarget_lock_release_recursive>
 800c99e:	bf00      	nop
 800c9a0:	20001281 	.word	0x20001281

0800c9a4 <__sinit_lock_acquire>:
 800c9a4:	4801      	ldr	r0, [pc, #4]	; (800c9ac <__sinit_lock_acquire+0x8>)
 800c9a6:	f000 b8a7 	b.w	800caf8 <__retarget_lock_acquire_recursive>
 800c9aa:	bf00      	nop
 800c9ac:	20001282 	.word	0x20001282

0800c9b0 <__sinit_lock_release>:
 800c9b0:	4801      	ldr	r0, [pc, #4]	; (800c9b8 <__sinit_lock_release+0x8>)
 800c9b2:	f000 b8a2 	b.w	800cafa <__retarget_lock_release_recursive>
 800c9b6:	bf00      	nop
 800c9b8:	20001282 	.word	0x20001282

0800c9bc <__sinit>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	4604      	mov	r4, r0
 800c9c0:	f7ff fff0 	bl	800c9a4 <__sinit_lock_acquire>
 800c9c4:	69a3      	ldr	r3, [r4, #24]
 800c9c6:	b11b      	cbz	r3, 800c9d0 <__sinit+0x14>
 800c9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9cc:	f7ff bff0 	b.w	800c9b0 <__sinit_lock_release>
 800c9d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c9d4:	6523      	str	r3, [r4, #80]	; 0x50
 800c9d6:	4b13      	ldr	r3, [pc, #76]	; (800ca24 <__sinit+0x68>)
 800c9d8:	4a13      	ldr	r2, [pc, #76]	; (800ca28 <__sinit+0x6c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c9de:	42a3      	cmp	r3, r4
 800c9e0:	bf04      	itt	eq
 800c9e2:	2301      	moveq	r3, #1
 800c9e4:	61a3      	streq	r3, [r4, #24]
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 f820 	bl	800ca2c <__sfp>
 800c9ec:	6060      	str	r0, [r4, #4]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 f81c 	bl	800ca2c <__sfp>
 800c9f4:	60a0      	str	r0, [r4, #8]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	f000 f818 	bl	800ca2c <__sfp>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	60e0      	str	r0, [r4, #12]
 800ca00:	2104      	movs	r1, #4
 800ca02:	6860      	ldr	r0, [r4, #4]
 800ca04:	f7ff ff82 	bl	800c90c <std>
 800ca08:	68a0      	ldr	r0, [r4, #8]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	2109      	movs	r1, #9
 800ca0e:	f7ff ff7d 	bl	800c90c <std>
 800ca12:	68e0      	ldr	r0, [r4, #12]
 800ca14:	2202      	movs	r2, #2
 800ca16:	2112      	movs	r1, #18
 800ca18:	f7ff ff78 	bl	800c90c <std>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	61a3      	str	r3, [r4, #24]
 800ca20:	e7d2      	b.n	800c9c8 <__sinit+0xc>
 800ca22:	bf00      	nop
 800ca24:	0800d91c 	.word	0x0800d91c
 800ca28:	0800c955 	.word	0x0800c955

0800ca2c <__sfp>:
 800ca2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2e:	4607      	mov	r7, r0
 800ca30:	f7ff ffac 	bl	800c98c <__sfp_lock_acquire>
 800ca34:	4b1e      	ldr	r3, [pc, #120]	; (800cab0 <__sfp+0x84>)
 800ca36:	681e      	ldr	r6, [r3, #0]
 800ca38:	69b3      	ldr	r3, [r6, #24]
 800ca3a:	b913      	cbnz	r3, 800ca42 <__sfp+0x16>
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff ffbd 	bl	800c9bc <__sinit>
 800ca42:	3648      	adds	r6, #72	; 0x48
 800ca44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	d503      	bpl.n	800ca54 <__sfp+0x28>
 800ca4c:	6833      	ldr	r3, [r6, #0]
 800ca4e:	b30b      	cbz	r3, 800ca94 <__sfp+0x68>
 800ca50:	6836      	ldr	r6, [r6, #0]
 800ca52:	e7f7      	b.n	800ca44 <__sfp+0x18>
 800ca54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca58:	b9d5      	cbnz	r5, 800ca90 <__sfp+0x64>
 800ca5a:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <__sfp+0x88>)
 800ca5c:	60e3      	str	r3, [r4, #12]
 800ca5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca62:	6665      	str	r5, [r4, #100]	; 0x64
 800ca64:	f000 f847 	bl	800caf6 <__retarget_lock_init_recursive>
 800ca68:	f7ff ff96 	bl	800c998 <__sfp_lock_release>
 800ca6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca74:	6025      	str	r5, [r4, #0]
 800ca76:	61a5      	str	r5, [r4, #24]
 800ca78:	2208      	movs	r2, #8
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca80:	f7ff fd16 	bl	800c4b0 <memset>
 800ca84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca90:	3468      	adds	r4, #104	; 0x68
 800ca92:	e7d9      	b.n	800ca48 <__sfp+0x1c>
 800ca94:	2104      	movs	r1, #4
 800ca96:	4638      	mov	r0, r7
 800ca98:	f7ff ff62 	bl	800c960 <__sfmoreglue>
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	6030      	str	r0, [r6, #0]
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d1d5      	bne.n	800ca50 <__sfp+0x24>
 800caa4:	f7ff ff78 	bl	800c998 <__sfp_lock_release>
 800caa8:	230c      	movs	r3, #12
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	e7ee      	b.n	800ca8c <__sfp+0x60>
 800caae:	bf00      	nop
 800cab0:	0800d91c 	.word	0x0800d91c
 800cab4:	ffff0001 	.word	0xffff0001

0800cab8 <_fwalk_reent>:
 800cab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cabc:	4606      	mov	r6, r0
 800cabe:	4688      	mov	r8, r1
 800cac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cac4:	2700      	movs	r7, #0
 800cac6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caca:	f1b9 0901 	subs.w	r9, r9, #1
 800cace:	d505      	bpl.n	800cadc <_fwalk_reent+0x24>
 800cad0:	6824      	ldr	r4, [r4, #0]
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	d1f7      	bne.n	800cac6 <_fwalk_reent+0xe>
 800cad6:	4638      	mov	r0, r7
 800cad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cadc:	89ab      	ldrh	r3, [r5, #12]
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d907      	bls.n	800caf2 <_fwalk_reent+0x3a>
 800cae2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cae6:	3301      	adds	r3, #1
 800cae8:	d003      	beq.n	800caf2 <_fwalk_reent+0x3a>
 800caea:	4629      	mov	r1, r5
 800caec:	4630      	mov	r0, r6
 800caee:	47c0      	blx	r8
 800caf0:	4307      	orrs	r7, r0
 800caf2:	3568      	adds	r5, #104	; 0x68
 800caf4:	e7e9      	b.n	800caca <_fwalk_reent+0x12>

0800caf6 <__retarget_lock_init_recursive>:
 800caf6:	4770      	bx	lr

0800caf8 <__retarget_lock_acquire_recursive>:
 800caf8:	4770      	bx	lr

0800cafa <__retarget_lock_release_recursive>:
 800cafa:	4770      	bx	lr

0800cafc <__swhatbuf_r>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	460e      	mov	r6, r1
 800cb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb04:	2900      	cmp	r1, #0
 800cb06:	b096      	sub	sp, #88	; 0x58
 800cb08:	4614      	mov	r4, r2
 800cb0a:	461d      	mov	r5, r3
 800cb0c:	da08      	bge.n	800cb20 <__swhatbuf_r+0x24>
 800cb0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	602a      	str	r2, [r5, #0]
 800cb16:	061a      	lsls	r2, r3, #24
 800cb18:	d410      	bmi.n	800cb3c <__swhatbuf_r+0x40>
 800cb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb1e:	e00e      	b.n	800cb3e <__swhatbuf_r+0x42>
 800cb20:	466a      	mov	r2, sp
 800cb22:	f000 fcdd 	bl	800d4e0 <_fstat_r>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	dbf1      	blt.n	800cb0e <__swhatbuf_r+0x12>
 800cb2a:	9a01      	ldr	r2, [sp, #4]
 800cb2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb34:	425a      	negs	r2, r3
 800cb36:	415a      	adcs	r2, r3
 800cb38:	602a      	str	r2, [r5, #0]
 800cb3a:	e7ee      	b.n	800cb1a <__swhatbuf_r+0x1e>
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	2000      	movs	r0, #0
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	b016      	add	sp, #88	; 0x58
 800cb44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb48 <__smakebuf_r>:
 800cb48:	898b      	ldrh	r3, [r1, #12]
 800cb4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb4c:	079d      	lsls	r5, r3, #30
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460c      	mov	r4, r1
 800cb52:	d507      	bpl.n	800cb64 <__smakebuf_r+0x1c>
 800cb54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	6123      	str	r3, [r4, #16]
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	6163      	str	r3, [r4, #20]
 800cb60:	b002      	add	sp, #8
 800cb62:	bd70      	pop	{r4, r5, r6, pc}
 800cb64:	ab01      	add	r3, sp, #4
 800cb66:	466a      	mov	r2, sp
 800cb68:	f7ff ffc8 	bl	800cafc <__swhatbuf_r>
 800cb6c:	9900      	ldr	r1, [sp, #0]
 800cb6e:	4605      	mov	r5, r0
 800cb70:	4630      	mov	r0, r6
 800cb72:	f000 f895 	bl	800cca0 <_malloc_r>
 800cb76:	b948      	cbnz	r0, 800cb8c <__smakebuf_r+0x44>
 800cb78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb7c:	059a      	lsls	r2, r3, #22
 800cb7e:	d4ef      	bmi.n	800cb60 <__smakebuf_r+0x18>
 800cb80:	f023 0303 	bic.w	r3, r3, #3
 800cb84:	f043 0302 	orr.w	r3, r3, #2
 800cb88:	81a3      	strh	r3, [r4, #12]
 800cb8a:	e7e3      	b.n	800cb54 <__smakebuf_r+0xc>
 800cb8c:	4b0d      	ldr	r3, [pc, #52]	; (800cbc4 <__smakebuf_r+0x7c>)
 800cb8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb90:	89a3      	ldrh	r3, [r4, #12]
 800cb92:	6020      	str	r0, [r4, #0]
 800cb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb98:	81a3      	strh	r3, [r4, #12]
 800cb9a:	9b00      	ldr	r3, [sp, #0]
 800cb9c:	6163      	str	r3, [r4, #20]
 800cb9e:	9b01      	ldr	r3, [sp, #4]
 800cba0:	6120      	str	r0, [r4, #16]
 800cba2:	b15b      	cbz	r3, 800cbbc <__smakebuf_r+0x74>
 800cba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 fcab 	bl	800d504 <_isatty_r>
 800cbae:	b128      	cbz	r0, 800cbbc <__smakebuf_r+0x74>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	f043 0301 	orr.w	r3, r3, #1
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	89a0      	ldrh	r0, [r4, #12]
 800cbbe:	4305      	orrs	r5, r0
 800cbc0:	81a5      	strh	r5, [r4, #12]
 800cbc2:	e7cd      	b.n	800cb60 <__smakebuf_r+0x18>
 800cbc4:	0800c955 	.word	0x0800c955

0800cbc8 <_free_r>:
 800cbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbca:	2900      	cmp	r1, #0
 800cbcc:	d044      	beq.n	800cc58 <_free_r+0x90>
 800cbce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd2:	9001      	str	r0, [sp, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f1a1 0404 	sub.w	r4, r1, #4
 800cbda:	bfb8      	it	lt
 800cbdc:	18e4      	addlt	r4, r4, r3
 800cbde:	f000 fcb3 	bl	800d548 <__malloc_lock>
 800cbe2:	4a1e      	ldr	r2, [pc, #120]	; (800cc5c <_free_r+0x94>)
 800cbe4:	9801      	ldr	r0, [sp, #4]
 800cbe6:	6813      	ldr	r3, [r2, #0]
 800cbe8:	b933      	cbnz	r3, 800cbf8 <_free_r+0x30>
 800cbea:	6063      	str	r3, [r4, #4]
 800cbec:	6014      	str	r4, [r2, #0]
 800cbee:	b003      	add	sp, #12
 800cbf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbf4:	f000 bcae 	b.w	800d554 <__malloc_unlock>
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	d908      	bls.n	800cc0e <_free_r+0x46>
 800cbfc:	6825      	ldr	r5, [r4, #0]
 800cbfe:	1961      	adds	r1, r4, r5
 800cc00:	428b      	cmp	r3, r1
 800cc02:	bf01      	itttt	eq
 800cc04:	6819      	ldreq	r1, [r3, #0]
 800cc06:	685b      	ldreq	r3, [r3, #4]
 800cc08:	1949      	addeq	r1, r1, r5
 800cc0a:	6021      	streq	r1, [r4, #0]
 800cc0c:	e7ed      	b.n	800cbea <_free_r+0x22>
 800cc0e:	461a      	mov	r2, r3
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	b10b      	cbz	r3, 800cc18 <_free_r+0x50>
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	d9fa      	bls.n	800cc0e <_free_r+0x46>
 800cc18:	6811      	ldr	r1, [r2, #0]
 800cc1a:	1855      	adds	r5, r2, r1
 800cc1c:	42a5      	cmp	r5, r4
 800cc1e:	d10b      	bne.n	800cc38 <_free_r+0x70>
 800cc20:	6824      	ldr	r4, [r4, #0]
 800cc22:	4421      	add	r1, r4
 800cc24:	1854      	adds	r4, r2, r1
 800cc26:	42a3      	cmp	r3, r4
 800cc28:	6011      	str	r1, [r2, #0]
 800cc2a:	d1e0      	bne.n	800cbee <_free_r+0x26>
 800cc2c:	681c      	ldr	r4, [r3, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	6053      	str	r3, [r2, #4]
 800cc32:	4421      	add	r1, r4
 800cc34:	6011      	str	r1, [r2, #0]
 800cc36:	e7da      	b.n	800cbee <_free_r+0x26>
 800cc38:	d902      	bls.n	800cc40 <_free_r+0x78>
 800cc3a:	230c      	movs	r3, #12
 800cc3c:	6003      	str	r3, [r0, #0]
 800cc3e:	e7d6      	b.n	800cbee <_free_r+0x26>
 800cc40:	6825      	ldr	r5, [r4, #0]
 800cc42:	1961      	adds	r1, r4, r5
 800cc44:	428b      	cmp	r3, r1
 800cc46:	bf04      	itt	eq
 800cc48:	6819      	ldreq	r1, [r3, #0]
 800cc4a:	685b      	ldreq	r3, [r3, #4]
 800cc4c:	6063      	str	r3, [r4, #4]
 800cc4e:	bf04      	itt	eq
 800cc50:	1949      	addeq	r1, r1, r5
 800cc52:	6021      	streq	r1, [r4, #0]
 800cc54:	6054      	str	r4, [r2, #4]
 800cc56:	e7ca      	b.n	800cbee <_free_r+0x26>
 800cc58:	b003      	add	sp, #12
 800cc5a:	bd30      	pop	{r4, r5, pc}
 800cc5c:	20001284 	.word	0x20001284

0800cc60 <sbrk_aligned>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	4e0e      	ldr	r6, [pc, #56]	; (800cc9c <sbrk_aligned+0x3c>)
 800cc64:	460c      	mov	r4, r1
 800cc66:	6831      	ldr	r1, [r6, #0]
 800cc68:	4605      	mov	r5, r0
 800cc6a:	b911      	cbnz	r1, 800cc72 <sbrk_aligned+0x12>
 800cc6c:	f000 fbc2 	bl	800d3f4 <_sbrk_r>
 800cc70:	6030      	str	r0, [r6, #0]
 800cc72:	4621      	mov	r1, r4
 800cc74:	4628      	mov	r0, r5
 800cc76:	f000 fbbd 	bl	800d3f4 <_sbrk_r>
 800cc7a:	1c43      	adds	r3, r0, #1
 800cc7c:	d00a      	beq.n	800cc94 <sbrk_aligned+0x34>
 800cc7e:	1cc4      	adds	r4, r0, #3
 800cc80:	f024 0403 	bic.w	r4, r4, #3
 800cc84:	42a0      	cmp	r0, r4
 800cc86:	d007      	beq.n	800cc98 <sbrk_aligned+0x38>
 800cc88:	1a21      	subs	r1, r4, r0
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f000 fbb2 	bl	800d3f4 <_sbrk_r>
 800cc90:	3001      	adds	r0, #1
 800cc92:	d101      	bne.n	800cc98 <sbrk_aligned+0x38>
 800cc94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc98:	4620      	mov	r0, r4
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
 800cc9c:	20001288 	.word	0x20001288

0800cca0 <_malloc_r>:
 800cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca4:	1ccd      	adds	r5, r1, #3
 800cca6:	f025 0503 	bic.w	r5, r5, #3
 800ccaa:	3508      	adds	r5, #8
 800ccac:	2d0c      	cmp	r5, #12
 800ccae:	bf38      	it	cc
 800ccb0:	250c      	movcc	r5, #12
 800ccb2:	2d00      	cmp	r5, #0
 800ccb4:	4607      	mov	r7, r0
 800ccb6:	db01      	blt.n	800ccbc <_malloc_r+0x1c>
 800ccb8:	42a9      	cmp	r1, r5
 800ccba:	d905      	bls.n	800ccc8 <_malloc_r+0x28>
 800ccbc:	230c      	movs	r3, #12
 800ccbe:	603b      	str	r3, [r7, #0]
 800ccc0:	2600      	movs	r6, #0
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc8:	4e2e      	ldr	r6, [pc, #184]	; (800cd84 <_malloc_r+0xe4>)
 800ccca:	f000 fc3d 	bl	800d548 <__malloc_lock>
 800ccce:	6833      	ldr	r3, [r6, #0]
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	bb34      	cbnz	r4, 800cd22 <_malloc_r+0x82>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f7ff ffc2 	bl	800cc60 <sbrk_aligned>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	4604      	mov	r4, r0
 800cce0:	d14d      	bne.n	800cd7e <_malloc_r+0xde>
 800cce2:	6834      	ldr	r4, [r6, #0]
 800cce4:	4626      	mov	r6, r4
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	d140      	bne.n	800cd6c <_malloc_r+0xcc>
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	4631      	mov	r1, r6
 800ccee:	4638      	mov	r0, r7
 800ccf0:	eb04 0803 	add.w	r8, r4, r3
 800ccf4:	f000 fb7e 	bl	800d3f4 <_sbrk_r>
 800ccf8:	4580      	cmp	r8, r0
 800ccfa:	d13a      	bne.n	800cd72 <_malloc_r+0xd2>
 800ccfc:	6821      	ldr	r1, [r4, #0]
 800ccfe:	3503      	adds	r5, #3
 800cd00:	1a6d      	subs	r5, r5, r1
 800cd02:	f025 0503 	bic.w	r5, r5, #3
 800cd06:	3508      	adds	r5, #8
 800cd08:	2d0c      	cmp	r5, #12
 800cd0a:	bf38      	it	cc
 800cd0c:	250c      	movcc	r5, #12
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4638      	mov	r0, r7
 800cd12:	f7ff ffa5 	bl	800cc60 <sbrk_aligned>
 800cd16:	3001      	adds	r0, #1
 800cd18:	d02b      	beq.n	800cd72 <_malloc_r+0xd2>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	442b      	add	r3, r5
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	e00e      	b.n	800cd40 <_malloc_r+0xa0>
 800cd22:	6822      	ldr	r2, [r4, #0]
 800cd24:	1b52      	subs	r2, r2, r5
 800cd26:	d41e      	bmi.n	800cd66 <_malloc_r+0xc6>
 800cd28:	2a0b      	cmp	r2, #11
 800cd2a:	d916      	bls.n	800cd5a <_malloc_r+0xba>
 800cd2c:	1961      	adds	r1, r4, r5
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	6025      	str	r5, [r4, #0]
 800cd32:	bf18      	it	ne
 800cd34:	6059      	strne	r1, [r3, #4]
 800cd36:	6863      	ldr	r3, [r4, #4]
 800cd38:	bf08      	it	eq
 800cd3a:	6031      	streq	r1, [r6, #0]
 800cd3c:	5162      	str	r2, [r4, r5]
 800cd3e:	604b      	str	r3, [r1, #4]
 800cd40:	4638      	mov	r0, r7
 800cd42:	f104 060b 	add.w	r6, r4, #11
 800cd46:	f000 fc05 	bl	800d554 <__malloc_unlock>
 800cd4a:	f026 0607 	bic.w	r6, r6, #7
 800cd4e:	1d23      	adds	r3, r4, #4
 800cd50:	1af2      	subs	r2, r6, r3
 800cd52:	d0b6      	beq.n	800ccc2 <_malloc_r+0x22>
 800cd54:	1b9b      	subs	r3, r3, r6
 800cd56:	50a3      	str	r3, [r4, r2]
 800cd58:	e7b3      	b.n	800ccc2 <_malloc_r+0x22>
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	42a3      	cmp	r3, r4
 800cd5e:	bf0c      	ite	eq
 800cd60:	6032      	streq	r2, [r6, #0]
 800cd62:	605a      	strne	r2, [r3, #4]
 800cd64:	e7ec      	b.n	800cd40 <_malloc_r+0xa0>
 800cd66:	4623      	mov	r3, r4
 800cd68:	6864      	ldr	r4, [r4, #4]
 800cd6a:	e7b2      	b.n	800ccd2 <_malloc_r+0x32>
 800cd6c:	4634      	mov	r4, r6
 800cd6e:	6876      	ldr	r6, [r6, #4]
 800cd70:	e7b9      	b.n	800cce6 <_malloc_r+0x46>
 800cd72:	230c      	movs	r3, #12
 800cd74:	603b      	str	r3, [r7, #0]
 800cd76:	4638      	mov	r0, r7
 800cd78:	f000 fbec 	bl	800d554 <__malloc_unlock>
 800cd7c:	e7a1      	b.n	800ccc2 <_malloc_r+0x22>
 800cd7e:	6025      	str	r5, [r4, #0]
 800cd80:	e7de      	b.n	800cd40 <_malloc_r+0xa0>
 800cd82:	bf00      	nop
 800cd84:	20001284 	.word	0x20001284

0800cd88 <__sfputc_r>:
 800cd88:	6893      	ldr	r3, [r2, #8]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	b410      	push	{r4}
 800cd90:	6093      	str	r3, [r2, #8]
 800cd92:	da08      	bge.n	800cda6 <__sfputc_r+0x1e>
 800cd94:	6994      	ldr	r4, [r2, #24]
 800cd96:	42a3      	cmp	r3, r4
 800cd98:	db01      	blt.n	800cd9e <__sfputc_r+0x16>
 800cd9a:	290a      	cmp	r1, #10
 800cd9c:	d103      	bne.n	800cda6 <__sfputc_r+0x1e>
 800cd9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cda2:	f7ff bc31 	b.w	800c608 <__swbuf_r>
 800cda6:	6813      	ldr	r3, [r2, #0]
 800cda8:	1c58      	adds	r0, r3, #1
 800cdaa:	6010      	str	r0, [r2, #0]
 800cdac:	7019      	strb	r1, [r3, #0]
 800cdae:	4608      	mov	r0, r1
 800cdb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <__sfputs_r>:
 800cdb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdb8:	4606      	mov	r6, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4614      	mov	r4, r2
 800cdbe:	18d5      	adds	r5, r2, r3
 800cdc0:	42ac      	cmp	r4, r5
 800cdc2:	d101      	bne.n	800cdc8 <__sfputs_r+0x12>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e007      	b.n	800cdd8 <__sfputs_r+0x22>
 800cdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdcc:	463a      	mov	r2, r7
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ffda 	bl	800cd88 <__sfputc_r>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d1f3      	bne.n	800cdc0 <__sfputs_r+0xa>
 800cdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cddc <_vfiprintf_r>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	460d      	mov	r5, r1
 800cde2:	b09d      	sub	sp, #116	; 0x74
 800cde4:	4614      	mov	r4, r2
 800cde6:	4698      	mov	r8, r3
 800cde8:	4606      	mov	r6, r0
 800cdea:	b118      	cbz	r0, 800cdf4 <_vfiprintf_r+0x18>
 800cdec:	6983      	ldr	r3, [r0, #24]
 800cdee:	b90b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x18>
 800cdf0:	f7ff fde4 	bl	800c9bc <__sinit>
 800cdf4:	4b89      	ldr	r3, [pc, #548]	; (800d01c <_vfiprintf_r+0x240>)
 800cdf6:	429d      	cmp	r5, r3
 800cdf8:	d11b      	bne.n	800ce32 <_vfiprintf_r+0x56>
 800cdfa:	6875      	ldr	r5, [r6, #4]
 800cdfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdfe:	07d9      	lsls	r1, r3, #31
 800ce00:	d405      	bmi.n	800ce0e <_vfiprintf_r+0x32>
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	059a      	lsls	r2, r3, #22
 800ce06:	d402      	bmi.n	800ce0e <_vfiprintf_r+0x32>
 800ce08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce0a:	f7ff fe75 	bl	800caf8 <__retarget_lock_acquire_recursive>
 800ce0e:	89ab      	ldrh	r3, [r5, #12]
 800ce10:	071b      	lsls	r3, r3, #28
 800ce12:	d501      	bpl.n	800ce18 <_vfiprintf_r+0x3c>
 800ce14:	692b      	ldr	r3, [r5, #16]
 800ce16:	b9eb      	cbnz	r3, 800ce54 <_vfiprintf_r+0x78>
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7ff fc46 	bl	800c6ac <__swsetup_r>
 800ce20:	b1c0      	cbz	r0, 800ce54 <_vfiprintf_r+0x78>
 800ce22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce24:	07dc      	lsls	r4, r3, #31
 800ce26:	d50e      	bpl.n	800ce46 <_vfiprintf_r+0x6a>
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce2c:	b01d      	add	sp, #116	; 0x74
 800ce2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce32:	4b7b      	ldr	r3, [pc, #492]	; (800d020 <_vfiprintf_r+0x244>)
 800ce34:	429d      	cmp	r5, r3
 800ce36:	d101      	bne.n	800ce3c <_vfiprintf_r+0x60>
 800ce38:	68b5      	ldr	r5, [r6, #8]
 800ce3a:	e7df      	b.n	800cdfc <_vfiprintf_r+0x20>
 800ce3c:	4b79      	ldr	r3, [pc, #484]	; (800d024 <_vfiprintf_r+0x248>)
 800ce3e:	429d      	cmp	r5, r3
 800ce40:	bf08      	it	eq
 800ce42:	68f5      	ldreq	r5, [r6, #12]
 800ce44:	e7da      	b.n	800cdfc <_vfiprintf_r+0x20>
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	0598      	lsls	r0, r3, #22
 800ce4a:	d4ed      	bmi.n	800ce28 <_vfiprintf_r+0x4c>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce4e:	f7ff fe54 	bl	800cafa <__retarget_lock_release_recursive>
 800ce52:	e7e9      	b.n	800ce28 <_vfiprintf_r+0x4c>
 800ce54:	2300      	movs	r3, #0
 800ce56:	9309      	str	r3, [sp, #36]	; 0x24
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce62:	2330      	movs	r3, #48	; 0x30
 800ce64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d028 <_vfiprintf_r+0x24c>
 800ce68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce6c:	f04f 0901 	mov.w	r9, #1
 800ce70:	4623      	mov	r3, r4
 800ce72:	469a      	mov	sl, r3
 800ce74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce78:	b10a      	cbz	r2, 800ce7e <_vfiprintf_r+0xa2>
 800ce7a:	2a25      	cmp	r2, #37	; 0x25
 800ce7c:	d1f9      	bne.n	800ce72 <_vfiprintf_r+0x96>
 800ce7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce82:	d00b      	beq.n	800ce9c <_vfiprintf_r+0xc0>
 800ce84:	465b      	mov	r3, fp
 800ce86:	4622      	mov	r2, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7ff ff93 	bl	800cdb6 <__sfputs_r>
 800ce90:	3001      	adds	r0, #1
 800ce92:	f000 80aa 	beq.w	800cfea <_vfiprintf_r+0x20e>
 800ce96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce98:	445a      	add	r2, fp
 800ce9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 80a2 	beq.w	800cfea <_vfiprintf_r+0x20e>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb0:	f10a 0a01 	add.w	sl, sl, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cebc:	931a      	str	r3, [sp, #104]	; 0x68
 800cebe:	4654      	mov	r4, sl
 800cec0:	2205      	movs	r2, #5
 800cec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec6:	4858      	ldr	r0, [pc, #352]	; (800d028 <_vfiprintf_r+0x24c>)
 800cec8:	f7f3 f962 	bl	8000190 <memchr>
 800cecc:	9a04      	ldr	r2, [sp, #16]
 800cece:	b9d8      	cbnz	r0, 800cf08 <_vfiprintf_r+0x12c>
 800ced0:	06d1      	lsls	r1, r2, #27
 800ced2:	bf44      	itt	mi
 800ced4:	2320      	movmi	r3, #32
 800ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceda:	0713      	lsls	r3, r2, #28
 800cedc:	bf44      	itt	mi
 800cede:	232b      	movmi	r3, #43	; 0x2b
 800cee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee4:	f89a 3000 	ldrb.w	r3, [sl]
 800cee8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceea:	d015      	beq.n	800cf18 <_vfiprintf_r+0x13c>
 800ceec:	9a07      	ldr	r2, [sp, #28]
 800ceee:	4654      	mov	r4, sl
 800cef0:	2000      	movs	r0, #0
 800cef2:	f04f 0c0a 	mov.w	ip, #10
 800cef6:	4621      	mov	r1, r4
 800cef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cefc:	3b30      	subs	r3, #48	; 0x30
 800cefe:	2b09      	cmp	r3, #9
 800cf00:	d94e      	bls.n	800cfa0 <_vfiprintf_r+0x1c4>
 800cf02:	b1b0      	cbz	r0, 800cf32 <_vfiprintf_r+0x156>
 800cf04:	9207      	str	r2, [sp, #28]
 800cf06:	e014      	b.n	800cf32 <_vfiprintf_r+0x156>
 800cf08:	eba0 0308 	sub.w	r3, r0, r8
 800cf0c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	9304      	str	r3, [sp, #16]
 800cf14:	46a2      	mov	sl, r4
 800cf16:	e7d2      	b.n	800cebe <_vfiprintf_r+0xe2>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	1d19      	adds	r1, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	9103      	str	r1, [sp, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfbb      	ittet	lt
 800cf24:	425b      	neglt	r3, r3
 800cf26:	f042 0202 	orrlt.w	r2, r2, #2
 800cf2a:	9307      	strge	r3, [sp, #28]
 800cf2c:	9307      	strlt	r3, [sp, #28]
 800cf2e:	bfb8      	it	lt
 800cf30:	9204      	strlt	r2, [sp, #16]
 800cf32:	7823      	ldrb	r3, [r4, #0]
 800cf34:	2b2e      	cmp	r3, #46	; 0x2e
 800cf36:	d10c      	bne.n	800cf52 <_vfiprintf_r+0x176>
 800cf38:	7863      	ldrb	r3, [r4, #1]
 800cf3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf3c:	d135      	bne.n	800cfaa <_vfiprintf_r+0x1ce>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	1d1a      	adds	r2, r3, #4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	9203      	str	r2, [sp, #12]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfb8      	it	lt
 800cf4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf4e:	3402      	adds	r4, #2
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d038 <_vfiprintf_r+0x25c>
 800cf56:	7821      	ldrb	r1, [r4, #0]
 800cf58:	2203      	movs	r2, #3
 800cf5a:	4650      	mov	r0, sl
 800cf5c:	f7f3 f918 	bl	8000190 <memchr>
 800cf60:	b140      	cbz	r0, 800cf74 <_vfiprintf_r+0x198>
 800cf62:	2340      	movs	r3, #64	; 0x40
 800cf64:	eba0 000a 	sub.w	r0, r0, sl
 800cf68:	fa03 f000 	lsl.w	r0, r3, r0
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	4303      	orrs	r3, r0
 800cf70:	3401      	adds	r4, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf78:	482c      	ldr	r0, [pc, #176]	; (800d02c <_vfiprintf_r+0x250>)
 800cf7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf7e:	2206      	movs	r2, #6
 800cf80:	f7f3 f906 	bl	8000190 <memchr>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d03f      	beq.n	800d008 <_vfiprintf_r+0x22c>
 800cf88:	4b29      	ldr	r3, [pc, #164]	; (800d030 <_vfiprintf_r+0x254>)
 800cf8a:	bb1b      	cbnz	r3, 800cfd4 <_vfiprintf_r+0x1f8>
 800cf8c:	9b03      	ldr	r3, [sp, #12]
 800cf8e:	3307      	adds	r3, #7
 800cf90:	f023 0307 	bic.w	r3, r3, #7
 800cf94:	3308      	adds	r3, #8
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9a:	443b      	add	r3, r7
 800cf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9e:	e767      	b.n	800ce70 <_vfiprintf_r+0x94>
 800cfa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa4:	460c      	mov	r4, r1
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e7a5      	b.n	800cef6 <_vfiprintf_r+0x11a>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	3401      	adds	r4, #1
 800cfae:	9305      	str	r3, [sp, #20]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f04f 0c0a 	mov.w	ip, #10
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfbc:	3a30      	subs	r2, #48	; 0x30
 800cfbe:	2a09      	cmp	r2, #9
 800cfc0:	d903      	bls.n	800cfca <_vfiprintf_r+0x1ee>
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0c5      	beq.n	800cf52 <_vfiprintf_r+0x176>
 800cfc6:	9105      	str	r1, [sp, #20]
 800cfc8:	e7c3      	b.n	800cf52 <_vfiprintf_r+0x176>
 800cfca:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfce:	4604      	mov	r4, r0
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e7f0      	b.n	800cfb6 <_vfiprintf_r+0x1da>
 800cfd4:	ab03      	add	r3, sp, #12
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	462a      	mov	r2, r5
 800cfda:	4b16      	ldr	r3, [pc, #88]	; (800d034 <_vfiprintf_r+0x258>)
 800cfdc:	a904      	add	r1, sp, #16
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f3af 8000 	nop.w
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	1c78      	adds	r0, r7, #1
 800cfe8:	d1d6      	bne.n	800cf98 <_vfiprintf_r+0x1bc>
 800cfea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfec:	07d9      	lsls	r1, r3, #31
 800cfee:	d405      	bmi.n	800cffc <_vfiprintf_r+0x220>
 800cff0:	89ab      	ldrh	r3, [r5, #12]
 800cff2:	059a      	lsls	r2, r3, #22
 800cff4:	d402      	bmi.n	800cffc <_vfiprintf_r+0x220>
 800cff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff8:	f7ff fd7f 	bl	800cafa <__retarget_lock_release_recursive>
 800cffc:	89ab      	ldrh	r3, [r5, #12]
 800cffe:	065b      	lsls	r3, r3, #25
 800d000:	f53f af12 	bmi.w	800ce28 <_vfiprintf_r+0x4c>
 800d004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d006:	e711      	b.n	800ce2c <_vfiprintf_r+0x50>
 800d008:	ab03      	add	r3, sp, #12
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	462a      	mov	r2, r5
 800d00e:	4b09      	ldr	r3, [pc, #36]	; (800d034 <_vfiprintf_r+0x258>)
 800d010:	a904      	add	r1, sp, #16
 800d012:	4630      	mov	r0, r6
 800d014:	f000 f880 	bl	800d118 <_printf_i>
 800d018:	e7e4      	b.n	800cfe4 <_vfiprintf_r+0x208>
 800d01a:	bf00      	nop
 800d01c:	0800d940 	.word	0x0800d940
 800d020:	0800d960 	.word	0x0800d960
 800d024:	0800d920 	.word	0x0800d920
 800d028:	0800d980 	.word	0x0800d980
 800d02c:	0800d98a 	.word	0x0800d98a
 800d030:	00000000 	.word	0x00000000
 800d034:	0800cdb7 	.word	0x0800cdb7
 800d038:	0800d986 	.word	0x0800d986

0800d03c <_printf_common>:
 800d03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d040:	4616      	mov	r6, r2
 800d042:	4699      	mov	r9, r3
 800d044:	688a      	ldr	r2, [r1, #8]
 800d046:	690b      	ldr	r3, [r1, #16]
 800d048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d04c:	4293      	cmp	r3, r2
 800d04e:	bfb8      	it	lt
 800d050:	4613      	movlt	r3, r2
 800d052:	6033      	str	r3, [r6, #0]
 800d054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d058:	4607      	mov	r7, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	b10a      	cbz	r2, 800d062 <_printf_common+0x26>
 800d05e:	3301      	adds	r3, #1
 800d060:	6033      	str	r3, [r6, #0]
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	0699      	lsls	r1, r3, #26
 800d066:	bf42      	ittt	mi
 800d068:	6833      	ldrmi	r3, [r6, #0]
 800d06a:	3302      	addmi	r3, #2
 800d06c:	6033      	strmi	r3, [r6, #0]
 800d06e:	6825      	ldr	r5, [r4, #0]
 800d070:	f015 0506 	ands.w	r5, r5, #6
 800d074:	d106      	bne.n	800d084 <_printf_common+0x48>
 800d076:	f104 0a19 	add.w	sl, r4, #25
 800d07a:	68e3      	ldr	r3, [r4, #12]
 800d07c:	6832      	ldr	r2, [r6, #0]
 800d07e:	1a9b      	subs	r3, r3, r2
 800d080:	42ab      	cmp	r3, r5
 800d082:	dc26      	bgt.n	800d0d2 <_printf_common+0x96>
 800d084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d088:	1e13      	subs	r3, r2, #0
 800d08a:	6822      	ldr	r2, [r4, #0]
 800d08c:	bf18      	it	ne
 800d08e:	2301      	movne	r3, #1
 800d090:	0692      	lsls	r2, r2, #26
 800d092:	d42b      	bmi.n	800d0ec <_printf_common+0xb0>
 800d094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d098:	4649      	mov	r1, r9
 800d09a:	4638      	mov	r0, r7
 800d09c:	47c0      	blx	r8
 800d09e:	3001      	adds	r0, #1
 800d0a0:	d01e      	beq.n	800d0e0 <_printf_common+0xa4>
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	68e5      	ldr	r5, [r4, #12]
 800d0a6:	6832      	ldr	r2, [r6, #0]
 800d0a8:	f003 0306 	and.w	r3, r3, #6
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	bf08      	it	eq
 800d0b0:	1aad      	subeq	r5, r5, r2
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	6922      	ldr	r2, [r4, #16]
 800d0b6:	bf0c      	ite	eq
 800d0b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0bc:	2500      	movne	r5, #0
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	bfc4      	itt	gt
 800d0c2:	1a9b      	subgt	r3, r3, r2
 800d0c4:	18ed      	addgt	r5, r5, r3
 800d0c6:	2600      	movs	r6, #0
 800d0c8:	341a      	adds	r4, #26
 800d0ca:	42b5      	cmp	r5, r6
 800d0cc:	d11a      	bne.n	800d104 <_printf_common+0xc8>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	e008      	b.n	800d0e4 <_printf_common+0xa8>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	4652      	mov	r2, sl
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	4638      	mov	r0, r7
 800d0da:	47c0      	blx	r8
 800d0dc:	3001      	adds	r0, #1
 800d0de:	d103      	bne.n	800d0e8 <_printf_common+0xac>
 800d0e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e8:	3501      	adds	r5, #1
 800d0ea:	e7c6      	b.n	800d07a <_printf_common+0x3e>
 800d0ec:	18e1      	adds	r1, r4, r3
 800d0ee:	1c5a      	adds	r2, r3, #1
 800d0f0:	2030      	movs	r0, #48	; 0x30
 800d0f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0f6:	4422      	add	r2, r4
 800d0f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d100:	3302      	adds	r3, #2
 800d102:	e7c7      	b.n	800d094 <_printf_common+0x58>
 800d104:	2301      	movs	r3, #1
 800d106:	4622      	mov	r2, r4
 800d108:	4649      	mov	r1, r9
 800d10a:	4638      	mov	r0, r7
 800d10c:	47c0      	blx	r8
 800d10e:	3001      	adds	r0, #1
 800d110:	d0e6      	beq.n	800d0e0 <_printf_common+0xa4>
 800d112:	3601      	adds	r6, #1
 800d114:	e7d9      	b.n	800d0ca <_printf_common+0x8e>
	...

0800d118 <_printf_i>:
 800d118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d11c:	7e0f      	ldrb	r7, [r1, #24]
 800d11e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d120:	2f78      	cmp	r7, #120	; 0x78
 800d122:	4691      	mov	r9, r2
 800d124:	4680      	mov	r8, r0
 800d126:	460c      	mov	r4, r1
 800d128:	469a      	mov	sl, r3
 800d12a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d12e:	d807      	bhi.n	800d140 <_printf_i+0x28>
 800d130:	2f62      	cmp	r7, #98	; 0x62
 800d132:	d80a      	bhi.n	800d14a <_printf_i+0x32>
 800d134:	2f00      	cmp	r7, #0
 800d136:	f000 80d8 	beq.w	800d2ea <_printf_i+0x1d2>
 800d13a:	2f58      	cmp	r7, #88	; 0x58
 800d13c:	f000 80a3 	beq.w	800d286 <_printf_i+0x16e>
 800d140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d148:	e03a      	b.n	800d1c0 <_printf_i+0xa8>
 800d14a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d14e:	2b15      	cmp	r3, #21
 800d150:	d8f6      	bhi.n	800d140 <_printf_i+0x28>
 800d152:	a101      	add	r1, pc, #4	; (adr r1, 800d158 <_printf_i+0x40>)
 800d154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d158:	0800d1b1 	.word	0x0800d1b1
 800d15c:	0800d1c5 	.word	0x0800d1c5
 800d160:	0800d141 	.word	0x0800d141
 800d164:	0800d141 	.word	0x0800d141
 800d168:	0800d141 	.word	0x0800d141
 800d16c:	0800d141 	.word	0x0800d141
 800d170:	0800d1c5 	.word	0x0800d1c5
 800d174:	0800d141 	.word	0x0800d141
 800d178:	0800d141 	.word	0x0800d141
 800d17c:	0800d141 	.word	0x0800d141
 800d180:	0800d141 	.word	0x0800d141
 800d184:	0800d2d1 	.word	0x0800d2d1
 800d188:	0800d1f5 	.word	0x0800d1f5
 800d18c:	0800d2b3 	.word	0x0800d2b3
 800d190:	0800d141 	.word	0x0800d141
 800d194:	0800d141 	.word	0x0800d141
 800d198:	0800d2f3 	.word	0x0800d2f3
 800d19c:	0800d141 	.word	0x0800d141
 800d1a0:	0800d1f5 	.word	0x0800d1f5
 800d1a4:	0800d141 	.word	0x0800d141
 800d1a8:	0800d141 	.word	0x0800d141
 800d1ac:	0800d2bb 	.word	0x0800d2bb
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	1d1a      	adds	r2, r3, #4
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	602a      	str	r2, [r5, #0]
 800d1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e0a3      	b.n	800d30c <_printf_i+0x1f4>
 800d1c4:	6820      	ldr	r0, [r4, #0]
 800d1c6:	6829      	ldr	r1, [r5, #0]
 800d1c8:	0606      	lsls	r6, r0, #24
 800d1ca:	f101 0304 	add.w	r3, r1, #4
 800d1ce:	d50a      	bpl.n	800d1e6 <_printf_i+0xce>
 800d1d0:	680e      	ldr	r6, [r1, #0]
 800d1d2:	602b      	str	r3, [r5, #0]
 800d1d4:	2e00      	cmp	r6, #0
 800d1d6:	da03      	bge.n	800d1e0 <_printf_i+0xc8>
 800d1d8:	232d      	movs	r3, #45	; 0x2d
 800d1da:	4276      	negs	r6, r6
 800d1dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e0:	485e      	ldr	r0, [pc, #376]	; (800d35c <_printf_i+0x244>)
 800d1e2:	230a      	movs	r3, #10
 800d1e4:	e019      	b.n	800d21a <_printf_i+0x102>
 800d1e6:	680e      	ldr	r6, [r1, #0]
 800d1e8:	602b      	str	r3, [r5, #0]
 800d1ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1ee:	bf18      	it	ne
 800d1f0:	b236      	sxthne	r6, r6
 800d1f2:	e7ef      	b.n	800d1d4 <_printf_i+0xbc>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	6820      	ldr	r0, [r4, #0]
 800d1f8:	1d19      	adds	r1, r3, #4
 800d1fa:	6029      	str	r1, [r5, #0]
 800d1fc:	0601      	lsls	r1, r0, #24
 800d1fe:	d501      	bpl.n	800d204 <_printf_i+0xec>
 800d200:	681e      	ldr	r6, [r3, #0]
 800d202:	e002      	b.n	800d20a <_printf_i+0xf2>
 800d204:	0646      	lsls	r6, r0, #25
 800d206:	d5fb      	bpl.n	800d200 <_printf_i+0xe8>
 800d208:	881e      	ldrh	r6, [r3, #0]
 800d20a:	4854      	ldr	r0, [pc, #336]	; (800d35c <_printf_i+0x244>)
 800d20c:	2f6f      	cmp	r7, #111	; 0x6f
 800d20e:	bf0c      	ite	eq
 800d210:	2308      	moveq	r3, #8
 800d212:	230a      	movne	r3, #10
 800d214:	2100      	movs	r1, #0
 800d216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d21a:	6865      	ldr	r5, [r4, #4]
 800d21c:	60a5      	str	r5, [r4, #8]
 800d21e:	2d00      	cmp	r5, #0
 800d220:	bfa2      	ittt	ge
 800d222:	6821      	ldrge	r1, [r4, #0]
 800d224:	f021 0104 	bicge.w	r1, r1, #4
 800d228:	6021      	strge	r1, [r4, #0]
 800d22a:	b90e      	cbnz	r6, 800d230 <_printf_i+0x118>
 800d22c:	2d00      	cmp	r5, #0
 800d22e:	d04d      	beq.n	800d2cc <_printf_i+0x1b4>
 800d230:	4615      	mov	r5, r2
 800d232:	fbb6 f1f3 	udiv	r1, r6, r3
 800d236:	fb03 6711 	mls	r7, r3, r1, r6
 800d23a:	5dc7      	ldrb	r7, [r0, r7]
 800d23c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d240:	4637      	mov	r7, r6
 800d242:	42bb      	cmp	r3, r7
 800d244:	460e      	mov	r6, r1
 800d246:	d9f4      	bls.n	800d232 <_printf_i+0x11a>
 800d248:	2b08      	cmp	r3, #8
 800d24a:	d10b      	bne.n	800d264 <_printf_i+0x14c>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	07de      	lsls	r6, r3, #31
 800d250:	d508      	bpl.n	800d264 <_printf_i+0x14c>
 800d252:	6923      	ldr	r3, [r4, #16]
 800d254:	6861      	ldr	r1, [r4, #4]
 800d256:	4299      	cmp	r1, r3
 800d258:	bfde      	ittt	le
 800d25a:	2330      	movle	r3, #48	; 0x30
 800d25c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d260:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d264:	1b52      	subs	r2, r2, r5
 800d266:	6122      	str	r2, [r4, #16]
 800d268:	f8cd a000 	str.w	sl, [sp]
 800d26c:	464b      	mov	r3, r9
 800d26e:	aa03      	add	r2, sp, #12
 800d270:	4621      	mov	r1, r4
 800d272:	4640      	mov	r0, r8
 800d274:	f7ff fee2 	bl	800d03c <_printf_common>
 800d278:	3001      	adds	r0, #1
 800d27a:	d14c      	bne.n	800d316 <_printf_i+0x1fe>
 800d27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d280:	b004      	add	sp, #16
 800d282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d286:	4835      	ldr	r0, [pc, #212]	; (800d35c <_printf_i+0x244>)
 800d288:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d28c:	6829      	ldr	r1, [r5, #0]
 800d28e:	6823      	ldr	r3, [r4, #0]
 800d290:	f851 6b04 	ldr.w	r6, [r1], #4
 800d294:	6029      	str	r1, [r5, #0]
 800d296:	061d      	lsls	r5, r3, #24
 800d298:	d514      	bpl.n	800d2c4 <_printf_i+0x1ac>
 800d29a:	07df      	lsls	r7, r3, #31
 800d29c:	bf44      	itt	mi
 800d29e:	f043 0320 	orrmi.w	r3, r3, #32
 800d2a2:	6023      	strmi	r3, [r4, #0]
 800d2a4:	b91e      	cbnz	r6, 800d2ae <_printf_i+0x196>
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	f023 0320 	bic.w	r3, r3, #32
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	2310      	movs	r3, #16
 800d2b0:	e7b0      	b.n	800d214 <_printf_i+0xfc>
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	f043 0320 	orr.w	r3, r3, #32
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	2378      	movs	r3, #120	; 0x78
 800d2bc:	4828      	ldr	r0, [pc, #160]	; (800d360 <_printf_i+0x248>)
 800d2be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2c2:	e7e3      	b.n	800d28c <_printf_i+0x174>
 800d2c4:	0659      	lsls	r1, r3, #25
 800d2c6:	bf48      	it	mi
 800d2c8:	b2b6      	uxthmi	r6, r6
 800d2ca:	e7e6      	b.n	800d29a <_printf_i+0x182>
 800d2cc:	4615      	mov	r5, r2
 800d2ce:	e7bb      	b.n	800d248 <_printf_i+0x130>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	6826      	ldr	r6, [r4, #0]
 800d2d4:	6961      	ldr	r1, [r4, #20]
 800d2d6:	1d18      	adds	r0, r3, #4
 800d2d8:	6028      	str	r0, [r5, #0]
 800d2da:	0635      	lsls	r5, r6, #24
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	d501      	bpl.n	800d2e4 <_printf_i+0x1cc>
 800d2e0:	6019      	str	r1, [r3, #0]
 800d2e2:	e002      	b.n	800d2ea <_printf_i+0x1d2>
 800d2e4:	0670      	lsls	r0, r6, #25
 800d2e6:	d5fb      	bpl.n	800d2e0 <_printf_i+0x1c8>
 800d2e8:	8019      	strh	r1, [r3, #0]
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	6123      	str	r3, [r4, #16]
 800d2ee:	4615      	mov	r5, r2
 800d2f0:	e7ba      	b.n	800d268 <_printf_i+0x150>
 800d2f2:	682b      	ldr	r3, [r5, #0]
 800d2f4:	1d1a      	adds	r2, r3, #4
 800d2f6:	602a      	str	r2, [r5, #0]
 800d2f8:	681d      	ldr	r5, [r3, #0]
 800d2fa:	6862      	ldr	r2, [r4, #4]
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	4628      	mov	r0, r5
 800d300:	f7f2 ff46 	bl	8000190 <memchr>
 800d304:	b108      	cbz	r0, 800d30a <_printf_i+0x1f2>
 800d306:	1b40      	subs	r0, r0, r5
 800d308:	6060      	str	r0, [r4, #4]
 800d30a:	6863      	ldr	r3, [r4, #4]
 800d30c:	6123      	str	r3, [r4, #16]
 800d30e:	2300      	movs	r3, #0
 800d310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d314:	e7a8      	b.n	800d268 <_printf_i+0x150>
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	462a      	mov	r2, r5
 800d31a:	4649      	mov	r1, r9
 800d31c:	4640      	mov	r0, r8
 800d31e:	47d0      	blx	sl
 800d320:	3001      	adds	r0, #1
 800d322:	d0ab      	beq.n	800d27c <_printf_i+0x164>
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	079b      	lsls	r3, r3, #30
 800d328:	d413      	bmi.n	800d352 <_printf_i+0x23a>
 800d32a:	68e0      	ldr	r0, [r4, #12]
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	4298      	cmp	r0, r3
 800d330:	bfb8      	it	lt
 800d332:	4618      	movlt	r0, r3
 800d334:	e7a4      	b.n	800d280 <_printf_i+0x168>
 800d336:	2301      	movs	r3, #1
 800d338:	4632      	mov	r2, r6
 800d33a:	4649      	mov	r1, r9
 800d33c:	4640      	mov	r0, r8
 800d33e:	47d0      	blx	sl
 800d340:	3001      	adds	r0, #1
 800d342:	d09b      	beq.n	800d27c <_printf_i+0x164>
 800d344:	3501      	adds	r5, #1
 800d346:	68e3      	ldr	r3, [r4, #12]
 800d348:	9903      	ldr	r1, [sp, #12]
 800d34a:	1a5b      	subs	r3, r3, r1
 800d34c:	42ab      	cmp	r3, r5
 800d34e:	dcf2      	bgt.n	800d336 <_printf_i+0x21e>
 800d350:	e7eb      	b.n	800d32a <_printf_i+0x212>
 800d352:	2500      	movs	r5, #0
 800d354:	f104 0619 	add.w	r6, r4, #25
 800d358:	e7f5      	b.n	800d346 <_printf_i+0x22e>
 800d35a:	bf00      	nop
 800d35c:	0800d991 	.word	0x0800d991
 800d360:	0800d9a2 	.word	0x0800d9a2

0800d364 <_putc_r>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	460d      	mov	r5, r1
 800d368:	4614      	mov	r4, r2
 800d36a:	4606      	mov	r6, r0
 800d36c:	b118      	cbz	r0, 800d376 <_putc_r+0x12>
 800d36e:	6983      	ldr	r3, [r0, #24]
 800d370:	b90b      	cbnz	r3, 800d376 <_putc_r+0x12>
 800d372:	f7ff fb23 	bl	800c9bc <__sinit>
 800d376:	4b1c      	ldr	r3, [pc, #112]	; (800d3e8 <_putc_r+0x84>)
 800d378:	429c      	cmp	r4, r3
 800d37a:	d124      	bne.n	800d3c6 <_putc_r+0x62>
 800d37c:	6874      	ldr	r4, [r6, #4]
 800d37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d380:	07d8      	lsls	r0, r3, #31
 800d382:	d405      	bmi.n	800d390 <_putc_r+0x2c>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	0599      	lsls	r1, r3, #22
 800d388:	d402      	bmi.n	800d390 <_putc_r+0x2c>
 800d38a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d38c:	f7ff fbb4 	bl	800caf8 <__retarget_lock_acquire_recursive>
 800d390:	68a3      	ldr	r3, [r4, #8]
 800d392:	3b01      	subs	r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	60a3      	str	r3, [r4, #8]
 800d398:	da05      	bge.n	800d3a6 <_putc_r+0x42>
 800d39a:	69a2      	ldr	r2, [r4, #24]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	db1c      	blt.n	800d3da <_putc_r+0x76>
 800d3a0:	b2eb      	uxtb	r3, r5
 800d3a2:	2b0a      	cmp	r3, #10
 800d3a4:	d019      	beq.n	800d3da <_putc_r+0x76>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	6022      	str	r2, [r4, #0]
 800d3ac:	701d      	strb	r5, [r3, #0]
 800d3ae:	b2ed      	uxtb	r5, r5
 800d3b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3b2:	07da      	lsls	r2, r3, #31
 800d3b4:	d405      	bmi.n	800d3c2 <_putc_r+0x5e>
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	059b      	lsls	r3, r3, #22
 800d3ba:	d402      	bmi.n	800d3c2 <_putc_r+0x5e>
 800d3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3be:	f7ff fb9c 	bl	800cafa <__retarget_lock_release_recursive>
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	bd70      	pop	{r4, r5, r6, pc}
 800d3c6:	4b09      	ldr	r3, [pc, #36]	; (800d3ec <_putc_r+0x88>)
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	d101      	bne.n	800d3d0 <_putc_r+0x6c>
 800d3cc:	68b4      	ldr	r4, [r6, #8]
 800d3ce:	e7d6      	b.n	800d37e <_putc_r+0x1a>
 800d3d0:	4b07      	ldr	r3, [pc, #28]	; (800d3f0 <_putc_r+0x8c>)
 800d3d2:	429c      	cmp	r4, r3
 800d3d4:	bf08      	it	eq
 800d3d6:	68f4      	ldreq	r4, [r6, #12]
 800d3d8:	e7d1      	b.n	800d37e <_putc_r+0x1a>
 800d3da:	4629      	mov	r1, r5
 800d3dc:	4622      	mov	r2, r4
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f7ff f912 	bl	800c608 <__swbuf_r>
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	e7e3      	b.n	800d3b0 <_putc_r+0x4c>
 800d3e8:	0800d940 	.word	0x0800d940
 800d3ec:	0800d960 	.word	0x0800d960
 800d3f0:	0800d920 	.word	0x0800d920

0800d3f4 <_sbrk_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d06      	ldr	r5, [pc, #24]	; (800d410 <_sbrk_r+0x1c>)
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	602b      	str	r3, [r5, #0]
 800d400:	f7f5 ffa4 	bl	800334c <_sbrk>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_sbrk_r+0x1a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_sbrk_r+0x1a>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	2000128c 	.word	0x2000128c

0800d414 <__sread>:
 800d414:	b510      	push	{r4, lr}
 800d416:	460c      	mov	r4, r1
 800d418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d41c:	f000 f8a0 	bl	800d560 <_read_r>
 800d420:	2800      	cmp	r0, #0
 800d422:	bfab      	itete	ge
 800d424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d426:	89a3      	ldrhlt	r3, [r4, #12]
 800d428:	181b      	addge	r3, r3, r0
 800d42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d42e:	bfac      	ite	ge
 800d430:	6563      	strge	r3, [r4, #84]	; 0x54
 800d432:	81a3      	strhlt	r3, [r4, #12]
 800d434:	bd10      	pop	{r4, pc}

0800d436 <__swrite>:
 800d436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43a:	461f      	mov	r7, r3
 800d43c:	898b      	ldrh	r3, [r1, #12]
 800d43e:	05db      	lsls	r3, r3, #23
 800d440:	4605      	mov	r5, r0
 800d442:	460c      	mov	r4, r1
 800d444:	4616      	mov	r6, r2
 800d446:	d505      	bpl.n	800d454 <__swrite+0x1e>
 800d448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d44c:	2302      	movs	r3, #2
 800d44e:	2200      	movs	r2, #0
 800d450:	f000 f868 	bl	800d524 <_lseek_r>
 800d454:	89a3      	ldrh	r3, [r4, #12]
 800d456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d45e:	81a3      	strh	r3, [r4, #12]
 800d460:	4632      	mov	r2, r6
 800d462:	463b      	mov	r3, r7
 800d464:	4628      	mov	r0, r5
 800d466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d46a:	f000 b817 	b.w	800d49c <_write_r>

0800d46e <__sseek>:
 800d46e:	b510      	push	{r4, lr}
 800d470:	460c      	mov	r4, r1
 800d472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d476:	f000 f855 	bl	800d524 <_lseek_r>
 800d47a:	1c43      	adds	r3, r0, #1
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	bf15      	itete	ne
 800d480:	6560      	strne	r0, [r4, #84]	; 0x54
 800d482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d48a:	81a3      	strheq	r3, [r4, #12]
 800d48c:	bf18      	it	ne
 800d48e:	81a3      	strhne	r3, [r4, #12]
 800d490:	bd10      	pop	{r4, pc}

0800d492 <__sclose>:
 800d492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d496:	f000 b813 	b.w	800d4c0 <_close_r>
	...

0800d49c <_write_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4d07      	ldr	r5, [pc, #28]	; (800d4bc <_write_r+0x20>)
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	4608      	mov	r0, r1
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	602a      	str	r2, [r5, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	f7f5 fefd 	bl	80032aa <_write>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_write_r+0x1e>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_write_r+0x1e>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	2000128c 	.word	0x2000128c

0800d4c0 <_close_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	4d06      	ldr	r5, [pc, #24]	; (800d4dc <_close_r+0x1c>)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	4608      	mov	r0, r1
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	f7f5 ff09 	bl	80032e2 <_close>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	d102      	bne.n	800d4da <_close_r+0x1a>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	b103      	cbz	r3, 800d4da <_close_r+0x1a>
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	bd38      	pop	{r3, r4, r5, pc}
 800d4dc:	2000128c 	.word	0x2000128c

0800d4e0 <_fstat_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	4d07      	ldr	r5, [pc, #28]	; (800d500 <_fstat_r+0x20>)
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	f7f5 ff04 	bl	80032fa <_fstat>
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	d102      	bne.n	800d4fc <_fstat_r+0x1c>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b103      	cbz	r3, 800d4fc <_fstat_r+0x1c>
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	bd38      	pop	{r3, r4, r5, pc}
 800d4fe:	bf00      	nop
 800d500:	2000128c 	.word	0x2000128c

0800d504 <_isatty_r>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	4d06      	ldr	r5, [pc, #24]	; (800d520 <_isatty_r+0x1c>)
 800d508:	2300      	movs	r3, #0
 800d50a:	4604      	mov	r4, r0
 800d50c:	4608      	mov	r0, r1
 800d50e:	602b      	str	r3, [r5, #0]
 800d510:	f7f5 ff03 	bl	800331a <_isatty>
 800d514:	1c43      	adds	r3, r0, #1
 800d516:	d102      	bne.n	800d51e <_isatty_r+0x1a>
 800d518:	682b      	ldr	r3, [r5, #0]
 800d51a:	b103      	cbz	r3, 800d51e <_isatty_r+0x1a>
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	2000128c 	.word	0x2000128c

0800d524 <_lseek_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d07      	ldr	r5, [pc, #28]	; (800d544 <_lseek_r+0x20>)
 800d528:	4604      	mov	r4, r0
 800d52a:	4608      	mov	r0, r1
 800d52c:	4611      	mov	r1, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	602a      	str	r2, [r5, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	f7f5 fefc 	bl	8003330 <_lseek>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_lseek_r+0x1e>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_lseek_r+0x1e>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	2000128c 	.word	0x2000128c

0800d548 <__malloc_lock>:
 800d548:	4801      	ldr	r0, [pc, #4]	; (800d550 <__malloc_lock+0x8>)
 800d54a:	f7ff bad5 	b.w	800caf8 <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	20001280 	.word	0x20001280

0800d554 <__malloc_unlock>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__malloc_unlock+0x8>)
 800d556:	f7ff bad0 	b.w	800cafa <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	20001280 	.word	0x20001280

0800d560 <_read_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d07      	ldr	r5, [pc, #28]	; (800d580 <_read_r+0x20>)
 800d564:	4604      	mov	r4, r0
 800d566:	4608      	mov	r0, r1
 800d568:	4611      	mov	r1, r2
 800d56a:	2200      	movs	r2, #0
 800d56c:	602a      	str	r2, [r5, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	f7f5 fe7e 	bl	8003270 <_read>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d102      	bne.n	800d57e <_read_r+0x1e>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	b103      	cbz	r3, 800d57e <_read_r+0x1e>
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	2000128c 	.word	0x2000128c

0800d584 <_init>:
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d586:	bf00      	nop
 800d588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58a:	bc08      	pop	{r3}
 800d58c:	469e      	mov	lr, r3
 800d58e:	4770      	bx	lr

0800d590 <_fini>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr
