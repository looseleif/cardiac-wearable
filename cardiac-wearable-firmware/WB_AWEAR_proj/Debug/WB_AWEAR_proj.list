
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b170  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800b2b0  0800b2b0  0001b2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6bc  0800b6bc  0001b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b6c8  0800b6c8  0001b6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800b6cc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800b750  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800bfd3  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800c008  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000508  2000095c  0800c019  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e64  0800c019  00020e64  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00032584  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006206  00000000  00000000  00052f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002bd8  00000000  00000000  00059118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002920  00000000  00000000  0005bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d8da  00000000  00000000  0005e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002fdd7  00000000  00000000  0008beea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fce39  00000000  00000000  000bbcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b8afa  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bfb8  00000000  00000000  001b8b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b298 	.word	0x0800b298

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800b298 	.word	0x0800b298

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	80da      	strh	r2, [r3, #6]
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000550:	f107 030e 	add.w	r3, r7, #14
 8000554:	461a      	mov	r2, r3
 8000556:	210f      	movs	r1, #15
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f8a3 	bl	80006a4 <read>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <BH1790GLC_init+0x38>
		return ERR_MID_VAL;
 8000568:	230a      	movs	r3, #10
 800056a:	e04a      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2be0      	cmp	r3, #224	; 0xe0
 8000570:	d001      	beq.n	8000576 <BH1790GLC_init+0x42>
		return ERR_MID_VAL;
 8000572:	230a      	movs	r3, #10
 8000574:	e045      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000576:	f107 030e 	add.w	r3, r7, #14
 800057a:	461a      	mov	r2, r3
 800057c:	2110      	movs	r1, #16
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f890 	bl	80006a4 <read>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <BH1790GLC_init+0x5e>
		return ERR_PID_VAL;
 800058e:	230b      	movs	r3, #11
 8000590:	e037      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b0d      	cmp	r3, #13
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		return ERR_PID_VAL;
 8000598:	230b      	movs	r3, #11
 800059a:	e032      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800059c:	2382      	movs	r3, #130	; 0x82
 800059e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005a0:	230c      	movs	r3, #12
 80005a2:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	2141      	movs	r1, #65	; 0x41
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f855 	bl	8000660 <write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <BH1790GLC_init+0x90>
		return ERR_MEAS_CONTROL1;
 80005c0:	2314      	movs	r3, #20
 80005c2:	e01e      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	3301      	adds	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2142      	movs	r1, #66	; 0x42
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f846 	bl	8000660 <write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BH1790GLC_init+0xae>
		return ERR_MEAS_CONTROL2;
 80005de:	2315      	movs	r3, #21
 80005e0:	e00f      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3302      	adds	r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	2143      	movs	r1, #67	; 0x43
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f837 	bl	8000660 <write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <BH1790GLC_init+0xcc>
		return ERR_MEAS_START;
 80005fc:	2316      	movs	r3, #22
 80005fe:	e000      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	return SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	2304      	movs	r3, #4
 8000618:	2154      	movs	r1, #84	; 0x54
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f864 	bl	80006e8 <many_reads>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 800062a:	231e      	movs	r3, #30
 800062c:	e014      	b.n	8000658 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7a3b      	ldrb	r3, [r7, #8]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	7abb      	ldrb	r3, [r7, #10]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af04      	add	r7, sp, #16
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	21b6      	movs	r1, #182	; 0xb6
 8000688:	f002 fc40 	bl	8002f0c <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <write+0x3a>
		return ret;			//error check
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	e000      	b.n	800069c <write+0x3c>
	}

	return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	21b6      	movs	r1, #182	; 0xb6
 80006cc:	f002 fd32 	bl	8003134 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <read+0x3a>
		return ret;			//error check
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	e000      	b.n	80006e0 <read+0x3c>
	}


	return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	4613      	mov	r3, r2
 80006fa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	b29a      	uxth	r2, r3
 8000704:	7abb      	ldrb	r3, [r7, #10]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	21b6      	movs	r1, #182	; 0xb6
 8000718:	f002 fd0c 	bl	8003134 <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <many_reads+0x42>
		return ret;			//error check
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	e000      	b.n	800072c <many_reads+0x44>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <APPD_EnableCPU2+0x34>)
 800073c:	1d3c      	adds	r4, r7, #4
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	c403      	stmia	r4!, {r0, r1}
 800074a:	8022      	strh	r2, [r4, #0]
 800074c:	3402      	adds	r4, #2
 800074e:	0c13      	lsrs	r3, r2, #16
 8000750:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000752:	f008 fadb 	bl	8008d0c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f007 fd76 	bl	800824a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800075e:	bf00      	nop
}
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bdb0      	pop	{r4, r5, r7, pc}
 8000766:	bf00      	nop
 8000768:	0800b2b0 	.word	0x0800b2b0

0800076c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800077a:	f023 0207 	bic.w	r2, r3, #7
 800077e:	4905      	ldr	r1, [pc, #20]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	58000400 	.word	0x58000400

08000798 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	58000800 	.word	0x58000800

080007c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	cafecafe 	.word	0xcafecafe

080007fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	608b      	str	r3, [r1, #8]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800084a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800087c:	d101      	bne.n	8000882 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008a2:	d101      	bne.n	80008a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_DBGMCU_GetDeviceID+0x18>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e0042000 	.word	0xe0042000

08000904 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <LL_DBGMCU_GetRevisionID+0x18>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e0042000 	.word	0xe0042000

08000920 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	041b      	lsls	r3, r3, #16
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	615a      	str	r2, [r3, #20]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	615a      	str	r2, [r3, #20]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	619a      	str	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ee:	f023 0304 	bic.w	r3, r3, #4
 80009f2:	6113      	str	r3, [r2, #16]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MX_APPE_Config+0x18>)
 8000a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a70:	f000 f824 	bl	8000abc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a74:	f000 f864 	bl	8000b40 <Config_HSE>

  return;
 8000a78:	bf00      	nop
}
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000

08000a80 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000a84:	f000 f870 	bl	8000b68 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a88:	f000 f888 	bl	8000b9c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a8c:	4903      	ldr	r1, [pc, #12]	; (8000a9c <MX_APPE_Init+0x1c>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fdd4 	bl	800163c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a94:	f000 f890 	bl	8000bb8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000ae0 	.word	0x20000ae0

08000aa0 <Init_Smps>:

void Init_Smps(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000aa4:	bf00      	nop
}
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <Init_Exti>:

void Init_Exti(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ab2:	2050      	movs	r0, #80	; 0x50
 8000ab4:	f7ff fe70 	bl	8000798 <LL_EXTI_EnableIT_32_63>

  return;
 8000ab8:	bf00      	nop
}
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000ac0:	f000 f804 	bl	8000acc <Reset_BackupDomain>

  Reset_IPCC();
 8000ac4:	f000 f81a 	bl	8000afc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ad0:	f7ff feca 	bl	8000868 <LL_RCC_IsActiveFlag_PINRST>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <Reset_BackupDomain+0x2a>
 8000ada:	f7ff fed8 	bl	800088e <LL_RCC_IsActiveFlag_SFTRST>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d108      	bne.n	8000af6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000ae4:	f003 fbbe 	bl	8004264 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ae8:	f003 fbbc 	bl	8004264 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000aec:	f7ff fe9a 	bl	8000824 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000af0:	f7ff fea9 	bl	8000846 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
}
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b04:	f7ff fed6 	bl	80008b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b08:	213f      	movs	r1, #63	; 0x3f
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <Reset_IPCC+0x40>)
 8000b0c:	f7ff ff4e 	bl	80009ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b10:	213f      	movs	r1, #63	; 0x3f
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <Reset_IPCC+0x40>)
 8000b14:	f7ff ff58 	bl	80009c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b18:	213f      	movs	r1, #63	; 0x3f
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <Reset_IPCC+0x40>)
 8000b1c:	f7ff ff00 	bl	8000920 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b20:	213f      	movs	r1, #63	; 0x3f
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <Reset_IPCC+0x40>)
 8000b24:	f7ff ff1f 	bl	8000966 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b28:	213f      	movs	r1, #63	; 0x3f
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <Reset_IPCC+0x40>)
 8000b2c:	f7ff ff0a 	bl	8000944 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b30:	213f      	movs	r1, #63	; 0x3f
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <Reset_IPCC+0x40>)
 8000b34:	f7ff ff29 	bl	800098a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b38:	bf00      	nop
}
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58000c00 	.word	0x58000c00

08000b40 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f008 f96c 	bl	8008e24 <OTP_Read>
 8000b4c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe31 	bl	80007c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <System_Init>:

static void System_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b6c:	f7ff ff98 	bl	8000aa0 <Init_Smps>

  Init_Exti();
 8000b70:	f7ff ff9d 	bl	8000aae <Init_Exti>

  Init_Rtc();
 8000b74:	f000 f802 	bl	8000b7c <Init_Rtc>

  return;
 8000b78:	bf00      	nop
}
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Init_Rtc>:

static void Init_Rtc(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <Init_Rtc+0x1c>)
 8000b82:	f7ff ff4c 	bl	8000a1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b86:	2100      	movs	r1, #0
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <Init_Rtc+0x1c>)
 8000b8a:	f7ff ff58 	bl	8000a3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <Init_Rtc+0x1c>)
 8000b90:	f7ff ff38 	bl	8000a04 <LL_RTC_EnableWriteProtection>

  return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40002800 	.word	0x40002800

08000b9c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba4:	f7ff fe2a 	bl	80007fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ba8:	f009 f928 	bl	8009dfc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bac:	2004      	movs	r0, #4
 8000bae:	f7ff fddd 	bl	800076c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bbe:	f007 feef 	bl	80089a0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <appe_Tl_Init+0x50>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2008      	movs	r0, #8
 8000bc8:	f009 fa56 	bl	800a078 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <appe_Tl_Init+0x54>)
 8000bce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <appe_Tl_Init+0x58>)
 8000bd2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <appe_Tl_Init+0x5c>)
 8000bda:	f007 fda7 	bl	800872c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <appe_Tl_Init+0x60>)
 8000be0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <appe_Tl_Init+0x64>)
 8000be4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <appe_Tl_Init+0x68>)
 8000be8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bea:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 f815 	bl	8008c24 <TL_MM_Init>

  TL_Enable();
 8000bfa:	f007 fecb 	bl	8008994 <TL_Enable>

  return;
 8000bfe:	bf00      	nop
}
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	08008765 	.word	0x08008765
 8000c0c:	200005dc 	.word	0x200005dc
 8000c10:	08000c25 	.word	0x08000c25
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	200007f4 	.word	0x200007f4
 8000c1c:	200006e8 	.word	0x200006e8
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c2e:	bf00      	nop
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	330b      	adds	r3, #11
 8000c4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d81f      	bhi.n	8000c9a <APPE_SysUserEvtRx+0x5e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <APPE_SysUserEvtRx+0x24>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000c93 	.word	0x08000c93
 8000c68:	08000c9b 	.word	0x08000c9b
 8000c6c:	08000c9b 	.word	0x08000c9b
 8000c70:	08000c9b 	.word	0x08000c9b
 8000c74:	08000c9b 	.word	0x08000c9b
 8000c78:	08000c9b 	.word	0x08000c9b
 8000c7c:	08000c9b 	.word	0x08000c9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f007 fb0d 	bl	80082a4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f81b 	bl	8000cc6 <APPE_SysEvtReadyProcessing>
    break;
 8000c90:	e004      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f806 	bl	8000ca4 <APPE_SysEvtError>
    break;
 8000c98:	e000      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000c9a:	bf00      	nop
  }

  return;
 8000c9c:	bf00      	nop
}
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000cba:	bf00      	nop
}
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b08a      	sub	sp, #40	; 0x28
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	330b      	adds	r3, #11
 8000cea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d11d      	bne.n	8000d36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000cfa:	f7ff fd1b 	bl	8000734 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d02:	237f      	movs	r3, #127	; 0x7f
 8000d04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d06:	f7ff fdfd 	bl	8000904 <LL_DBGMCU_GetRevisionID>
 8000d0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d12:	f7ff fde9 	bl	80008e8 <LL_DBGMCU_GetDeviceID>
 8000d16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 faa8 	bl	8008278 <SHCI_C2_Config>

    APP_BLE_Init();
 8000d28:	f008 f986 	bl	8009038 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f009 f876 	bl	8009e20 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000d34:	e007      	b.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
  return;
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
}
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d56:	f001 fcad 	bl	80026b4 <HAL_GetTick>
 8000d5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d66:	d00a      	beq.n	8000d7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000d68:	f001 fcbc 	bl	80026e4 <HAL_GetTickFreq>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	e002      	b.n	8000d7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000d78:	f7ff fe34 	bl	80009e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000d7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	f001 fc99 	bl	80026b4 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8f4      	bhi.n	8000d78 <HAL_Delay+0x2a>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f009 f86e 	bl	8009e80 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f009 f85c 	bl	8009e80 <UTIL_SEQ_Run>

  return;
 8000dc8:	bf00      	nop
}
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2008      	movs	r0, #8
 8000ddc:	f009 f96e 	bl	800a0bc <UTIL_SEQ_SetTask>
  return;
 8000de0:	bf00      	nop
}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000df0:	2002      	movs	r0, #2
 8000df2:	f009 f9cf 	bl	800a194 <UTIL_SEQ_SetEvt>
  return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f009 f9e4 	bl	800a1d4 <UTIL_SEQ_WaitEvt>
  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <LL_EXTI_EnableIT_0_31>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e22:	4905      	ldr	r1, [pc, #20]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58000800 	.word	0x58000800

08000e3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]

}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	58000800 	.word	0x58000800

08000e60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000e76:	e005      	b.n	8000e84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d1f5      	bne.n	8000e78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000e8c:	683b      	ldr	r3, [r7, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40002800 	.word	0x40002800

08000ea0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	491d      	ldr	r1, [pc, #116]	; (8000f28 <LinkTimerAfter+0x88>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d009      	beq.n	8000ede <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	4916      	ldr	r1, [pc, #88]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3314      	adds	r3, #20
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3315      	adds	r3, #21
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3314      	adds	r3, #20
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <LinkTimerAfter+0x88>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3315      	adds	r3, #21
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	701a      	strb	r2, [r3, #0]

  return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000978 	.word	0x20000978

08000f2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <LinkTimerBefore+0xb8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d032      	beq.n	8000fae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3315      	adds	r3, #21
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3315      	adds	r3, #21
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3314      	adds	r3, #20
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	4913      	ldr	r1, [pc, #76]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000fac:	e014      	b.n	8000fd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3315      	adds	r3, #21
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3314      	adds	r3, #20
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	701a      	strb	r2, [r3, #0]
  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000a08 	.word	0x20000a08
 8000fe8:	20000978 	.word	0x20000978

08000fec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <linkTimer+0x144>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d118      	bne.n	8001032 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <linkTimer+0x144>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <linkTimer+0x148>)
 8001008:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <linkTimer+0x144>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	4949      	ldr	r1, [pc, #292]	; (8001138 <linkTimer+0x14c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	3315      	adds	r3, #21
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <linkTimer+0x150>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	81fb      	strh	r3, [r7, #14]
 8001030:	e078      	b.n	8001124 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001032:	f000 f909 	bl	8001248 <ReturnTimeElapsed>
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	493e      	ldr	r1, [pc, #248]	; (8001138 <linkTimer+0x14c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	4419      	add	r1, r3
 8001052:	4839      	ldr	r0, [pc, #228]	; (8001138 <linkTimer+0x14c>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4403      	add	r3, r0
 800105e:	3308      	adds	r3, #8
 8001060:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	4934      	ldr	r1, [pc, #208]	; (8001138 <linkTimer+0x14c>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <linkTimer+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <linkTimer+0x14c>)
 8001080:	460b      	mov	r3, r1
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	440b      	add	r3, r1
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d337      	bcc.n	8001104 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <linkTimer+0x144>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800109a:	7b7a      	ldrb	r2, [r7, #13]
 800109c:	4926      	ldr	r1, [pc, #152]	; (8001138 <linkTimer+0x14c>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3315      	adds	r3, #21
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010ae:	e013      	b.n	80010d8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80010b0:	7b7a      	ldrb	r2, [r7, #13]
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <linkTimer+0x14c>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	3315      	adds	r3, #21
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010c4:	7b7a      	ldrb	r2, [r7, #13]
 80010c6:	491c      	ldr	r1, [pc, #112]	; (8001138 <linkTimer+0x14c>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3315      	adds	r3, #21
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d00b      	beq.n	80010f6 <linkTimer+0x10a>
 80010de:	7b3a      	ldrb	r2, [r7, #12]
 80010e0:	4915      	ldr	r1, [pc, #84]	; (8001138 <linkTimer+0x14c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d2dc      	bcs.n	80010b0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80010f6:	7b7a      	ldrb	r2, [r7, #13]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fecf 	bl	8000ea0 <LinkTimerAfter>
 8001102:	e00f      	b.n	8001124 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <linkTimer+0x144>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff0c 	bl	8000f2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <linkTimer+0x144>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <linkTimer+0x148>)
 800111c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <linkTimer+0x144>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001124:	89fb      	ldrh	r3, [r7, #14]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000a08 	.word	0x20000a08
 8001134:	20000a09 	.word	0x20000a09
 8001138:	20000978 	.word	0x20000978
 800113c:	20000a0c 	.word	0x20000a0c

08001140 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <UnlinkTimer+0xf8>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	429a      	cmp	r2, r3
 800115a:	d111      	bne.n	8001180 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <UnlinkTimer+0xf8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <UnlinkTimer+0xfc>)
 8001164:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <UnlinkTimer+0x100>)
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3315      	adds	r3, #21
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <UnlinkTimer+0xf8>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e03e      	b.n	80011fe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	492f      	ldr	r1, [pc, #188]	; (8001240 <UnlinkTimer+0x100>)
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	3314      	adds	r3, #20
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	492a      	ldr	r1, [pc, #168]	; (8001240 <UnlinkTimer+0x100>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3315      	adds	r3, #21
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011a8:	79f9      	ldrb	r1, [r7, #7]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	4824      	ldr	r0, [pc, #144]	; (8001240 <UnlinkTimer+0x100>)
 80011ae:	460b      	mov	r3, r1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4403      	add	r3, r0
 80011b8:	3315      	adds	r3, #21
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	4920      	ldr	r1, [pc, #128]	; (8001240 <UnlinkTimer+0x100>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3315      	adds	r3, #21
 80011cc:	4602      	mov	r2, r0
 80011ce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d013      	beq.n	80011fe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80011d6:	79f9      	ldrb	r1, [r7, #7]
 80011d8:	7bba      	ldrb	r2, [r7, #14]
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <UnlinkTimer+0x100>)
 80011dc:	460b      	mov	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	440b      	add	r3, r1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4403      	add	r3, r0
 80011e6:	3314      	adds	r3, #20
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2d8      	uxtb	r0, r3
 80011ec:	4914      	ldr	r1, [pc, #80]	; (8001240 <UnlinkTimer+0x100>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3314      	adds	r3, #20
 80011fa:	4602      	mov	r2, r0
 80011fc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <UnlinkTimer+0x100>)
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <UnlinkTimer+0xf8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b06      	cmp	r3, #6
 800121a:	d107      	bne.n	800122c <UnlinkTimer+0xec>
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <UnlinkTimer+0x104>)
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	601a      	str	r2, [r3, #0]
  }

  return;
 800122a:	bf00      	nop
 800122c:	bf00      	nop
}
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000a08 	.word	0x20000a08
 800123c:	20000a09 	.word	0x20000a09
 8001240:	20000978 	.word	0x20000978
 8001244:	20000a0c 	.word	0x20000a0c

08001248 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001256:	d026      	beq.n	80012a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001258:	f7ff fe02 	bl	8000e60 <ReadRtcSsrValue>
 800125c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	d805      	bhi.n	8001274 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <ReturnTimeElapsed+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e00a      	b.n	800128a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <ReturnTimeElapsed+0x74>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <ReturnTimeElapsed+0x78>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <ReturnTimeElapsed+0x7c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	40d3      	lsrs	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000a0c 	.word	0x20000a0c
 80012bc:	20000a14 	.word	0x20000a14
 80012c0:	20000a12 	.word	0x20000a12
 80012c4:	20000a11 	.word	0x20000a11

080012c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80012d8:	f7ff fdc2 	bl	8000e60 <ReadRtcSsrValue>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <RestartWakeupCounter+0x9c>)
 80012e0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f001 fb87 	bl	80029f6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80012e8:	e039      	b.n	800135e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d803      	bhi.n	80012f8 <RestartWakeupCounter+0x30>
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <RestartWakeupCounter+0xa0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d002      	beq.n	80012fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80012fe:	bf00      	nop
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <RestartWakeupCounter+0xa4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f8      	beq.n	8001300 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <RestartWakeupCounter+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <RestartWakeupCounter+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800131e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <RestartWakeupCounter+0xa8>)
 8001322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001326:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001328:	2003      	movs	r0, #3
 800132a:	f001 fb72 	bl	8002a12 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <RestartWakeupCounter+0xac>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <RestartWakeupCounter+0xac>)
 800133a:	4313      	orrs	r3, r2
 800133c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800133e:	f7ff fd8f 	bl	8000e60 <ReadRtcSsrValue>
 8001342:	4603      	mov	r3, r0
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <RestartWakeupCounter+0x9c>)
 8001346:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <RestartWakeupCounter+0xa4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <RestartWakeupCounter+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001356:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001358:	f3af 8000 	nop.w
  return ;
 800135c:	bf00      	nop
}
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000a0c 	.word	0x20000a0c
 8001368:	20000a11 	.word	0x20000a11
 800136c:	20000ae0 	.word	0x20000ae0
 8001370:	58000800 	.word	0x58000800
 8001374:	40002800 	.word	0x40002800

08001378 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <RescheduleTimerList+0x11c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d107      	bne.n	800139c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800138c:	bf00      	nop
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <RescheduleTimerList+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f8      	bne.n	800138e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <RescheduleTimerList+0x120>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <RescheduleTimerList+0x120>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <RescheduleTimerList+0x124>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	493a      	ldr	r1, [pc, #232]	; (80014a0 <RescheduleTimerList+0x128>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80013c6:	f7ff ff3f 	bl	8001248 <ReturnTimeElapsed>
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d205      	bcs.n	80013e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e04d      	b.n	800147e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <RescheduleTimerList+0x130>)
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4413      	add	r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d906      	bls.n	8001402 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <RescheduleTimerList+0x130>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e03d      	b.n	800147e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <RescheduleTimerList+0x12c>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	e034      	b.n	800147e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	4922      	ldr	r1, [pc, #136]	; (80014a0 <RescheduleTimerList+0x128>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	429a      	cmp	r2, r3
 800142a:	d20a      	bcs.n	8001442 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	491c      	ldr	r1, [pc, #112]	; (80014a0 <RescheduleTimerList+0x128>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3308      	adds	r3, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e013      	b.n	800146a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	4916      	ldr	r1, [pc, #88]	; (80014a0 <RescheduleTimerList+0x128>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3308      	adds	r3, #8
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	1ac9      	subs	r1, r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <RescheduleTimerList+0x128>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4403      	add	r3, r0
 8001466:	3308      	adds	r3, #8
 8001468:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <RescheduleTimerList+0x128>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3315      	adds	r3, #21
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d1c7      	bne.n	8001414 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff1e 	bl	80012c8 <RestartWakeupCounter>

  return ;
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40002800 	.word	0x40002800
 8001498:	20000ae0 	.word	0x20000ae0
 800149c:	20000a08 	.word	0x20000a08
 80014a0:	20000978 	.word	0x20000978
 80014a4:	20000a10 	.word	0x20000a10
 80014a8:	20000a16 	.word	0x20000a16

080014ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b2:	f3ef 8310 	mrs	r3, PRIMASK
 80014b6:	617b      	str	r3, [r7, #20]
  return(result);
 80014b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ca      	movs	r2, #202	; 0xca
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2253      	movs	r2, #83	; 0x53
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80014e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014ec:	4950      	ldr	r1, [pc, #320]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	330c      	adds	r3, #12
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d16e      	bne.n	80015e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001502:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001506:	494a      	ldr	r1, [pc, #296]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001516:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800151a:	4945      	ldr	r1, [pc, #276]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d04c      	beq.n	80015d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001536:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800153a:	493d      	ldr	r1, [pc, #244]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	330d      	adds	r3, #13
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d124      	bne.n	800159a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdf2 	bl	8001140 <UnlinkTimer>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f383 8810 	msr	PRIMASK, r3
}
 8001566:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001568:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f9b8 	bl	80018f8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	22ca      	movs	r2, #202	; 0xca
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2253      	movs	r2, #83	; 0x53
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	e012      	b.n	80015c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f383 8810 	msr	PRIMASK, r3
}
 80015a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f920 	bl	80017f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22ca      	movs	r2, #202	; 0xca
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2253      	movs	r2, #83	; 0x53
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80015c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4619      	mov	r1, r3
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f000 fa1b 	bl	8001a04 <HW_TS_RTC_Int_AppNot>
 80015ce:	e022      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80015d0:	f7ff fed2 	bl	8001378 <RescheduleTimerList>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f383 8810 	msr	PRIMASK, r3
}
 80015de:	e01a      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015e0:	bf00      	nop
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f8      	beq.n	80015e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001600:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001604:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f383 8810 	msr	PRIMASK, r3
}
 8001614:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800161e:	bf00      	nop
}
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000ae0 	.word	0x20000ae0
 800162c:	20000a08 	.word	0x20000a08
 8001630:	20000978 	.word	0x20000978
 8001634:	20000a10 	.word	0x20000a10
 8001638:	58000800 	.word	0x58000800

0800163c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HW_TS_Init+0x188>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	22ca      	movs	r2, #202	; 0xca
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HW_TS_Init+0x188>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001658:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HW_TS_Init+0x18c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <HW_TS_Init+0x18c>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HW_TS_Init+0x18c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f1c3 0304 	rsb	r3, r3, #4
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HW_TS_Init+0x190>)
 8001678:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HW_TS_Init+0x18c>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001682:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001686:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	fa92 f2a2 	rbit	r2, r2
 800168e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	2a00      	cmp	r2, #0
 8001698:	d101      	bne.n	800169e <HW_TS_Init+0x62>
  {
    return 32U;
 800169a:	2220      	movs	r2, #32
 800169c:	e003      	b.n	80016a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	40d3      	lsrs	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HW_TS_Init+0x194>)
 80016b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HW_TS_Init+0x18c>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HW_TS_Init+0x198>)
 80016c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HW_TS_Init+0x198>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HW_TS_Init+0x194>)
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d8:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HW_TS_Init+0x190>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	40d3      	lsrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d904      	bls.n	80016f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HW_TS_Init+0x19c>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e003      	b.n	80016fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HW_TS_Init+0x19c>)
 80016fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80016fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001700:	f7ff fb9c 	bl	8000e3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001708:	f7ff fb84 	bl	8000e14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HW_TS_Init+0x1a0>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HW_TS_Init+0x1a4>)
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
 8001724:	e00c      	b.n	8001740 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001726:	7ffa      	ldrb	r2, [r7, #31]
 8001728:	492e      	ldr	r1, [pc, #184]	; (80017e4 <HW_TS_Init+0x1a8>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	330c      	adds	r3, #12
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	3301      	adds	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d9ef      	bls.n	8001726 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HW_TS_Init+0x1ac>)
 8001748:	2206      	movs	r2, #6
 800174a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HW_TS_Init+0x188>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HW_TS_Init+0x188>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HW_TS_Init+0x188>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HW_TS_Init+0x188>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800176c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HW_TS_Init+0x1b0>)
 8001770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001776:	2003      	movs	r0, #3
 8001778:	f001 f94b 	bl	8002a12 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HW_TS_Init+0x188>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HW_TS_Init+0x188>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e009      	b.n	80017a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HW_TS_Init+0x188>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800179c:	2003      	movs	r0, #3
 800179e:	f001 f92a 	bl	80029f6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HW_TS_Init+0x188>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80017aa:	2200      	movs	r2, #0
 80017ac:	2103      	movs	r1, #3
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 f8df 	bl	8002972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017b4:	2003      	movs	r0, #3
 80017b6:	f001 f8f6 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  return;
 80017ba:	bf00      	nop
}
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000ae0 	.word	0x20000ae0
 80017c8:	40002800 	.word	0x40002800
 80017cc:	20000a11 	.word	0x20000a11
 80017d0:	20000a12 	.word	0x20000a12
 80017d4:	20000a14 	.word	0x20000a14
 80017d8:	20000a16 	.word	0x20000a16
 80017dc:	20000a10 	.word	0x20000a10
 80017e0:	20000a0c 	.word	0x20000a0c
 80017e4:	20000978 	.word	0x20000978
 80017e8:	20000a08 	.word	0x20000a08
 80017ec:	58000800 	.word	0x58000800

080017f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fa:	f3ef 8310 	mrs	r3, PRIMASK
 80017fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001800:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001808:	2003      	movs	r0, #3
 800180a:	f001 f8da 	bl	80029c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22ca      	movs	r2, #202	; 0xca
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2253      	movs	r2, #83	; 0x53
 800181c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	4930      	ldr	r1, [pc, #192]	; (80018e4 <HW_TS_Stop+0xf4>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	330c      	adds	r3, #12
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d142      	bne.n	80018bc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc80 	bl	8001140 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HW_TS_Stop+0xf8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d12f      	bne.n	80018ac <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HW_TS_Stop+0xfc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001858:	d107      	bne.n	800186a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800185a:	bf00      	nop
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HW_TS_Stop+0xf0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f8      	bne.n	800185c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HW_TS_Stop+0xf0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001878:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800187a:	bf00      	nop
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HW_TS_Stop+0xf0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f8      	beq.n	800187c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HW_TS_Stop+0xf0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800189a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HW_TS_Stop+0x100>)
 800189e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 f8b4 	bl	8002a12 <HAL_NVIC_ClearPendingIRQ>
 80018aa:	e007      	b.n	80018bc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HW_TS_Stop+0x104>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	7cfa      	ldrb	r2, [r7, #19]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80018b8:	f7ff fd5e 	bl	8001378 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HW_TS_Stop+0xf0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018c4:	2003      	movs	r0, #3
 80018c6:	f001 f86e 	bl	80029a6 <HAL_NVIC_EnableIRQ>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f383 8810 	msr	PRIMASK, r3
}
 80018d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018d6:	bf00      	nop
}
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000ae0 	.word	0x20000ae0
 80018e4:	20000978 	.word	0x20000978
 80018e8:	20000a08 	.word	0x20000a08
 80018ec:	40002800 	.word	0x40002800
 80018f0:	58000800 	.word	0x58000800
 80018f4:	20000a09 	.word	0x20000a09

080018f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	493b      	ldr	r1, [pc, #236]	; (80019f4 <HW_TS_Start+0xfc>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	330c      	adds	r3, #12
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d103      	bne.n	8001924 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff66 	bl	80017f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001924:	f3ef 8310 	mrs	r3, PRIMASK
 8001928:	60fb      	str	r3, [r7, #12]
  return(result);
 800192a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800192c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800192e:	b672      	cpsid	i
}
 8001930:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001932:	2003      	movs	r0, #3
 8001934:	f001 f845 	bl	80029c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HW_TS_Start+0x100>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	22ca      	movs	r2, #202	; 0xca
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HW_TS_Start+0x100>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2253      	movs	r2, #83	; 0x53
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	492a      	ldr	r1, [pc, #168]	; (80019f4 <HW_TS_Start+0xfc>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <HW_TS_Start+0xfc>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	4920      	ldr	r1, [pc, #128]	; (80019f4 <HW_TS_Start+0xfc>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb30 	bl	8000fec <linkTimer>
 800198c:	4603      	mov	r3, r0
 800198e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HW_TS_Start+0x104>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HW_TS_Start+0x108>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	7c7a      	ldrb	r2, [r7, #17]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d002      	beq.n	80019a8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80019a2:	f7ff fce9 	bl	8001378 <RescheduleTimerList>
 80019a6:	e013      	b.n	80019d0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	4912      	ldr	r1, [pc, #72]	; (80019f4 <HW_TS_Start+0xfc>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3308      	adds	r3, #8
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	8a7b      	ldrh	r3, [r7, #18]
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HW_TS_Start+0xfc>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4403      	add	r3, r0
 80019cc:	3308      	adds	r3, #8
 80019ce:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HW_TS_Start+0x100>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 ffe4 	bl	80029a6 <HAL_NVIC_EnableIRQ>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f383 8810 	msr	PRIMASK, r3
}
 80019e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019ea:	bf00      	nop
}
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000978 	.word	0x20000978
 80019f8:	20000ae0 	.word	0x20000ae0
 80019fc:	20000a08 	.word	0x20000a08
 8001a00:	20000a09 	.word	0x20000a09

08001a04 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4798      	blx	r3

  return;
 8001a16:	bf00      	nop
}
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <LL_RCC_LSE_SetDriveCapability>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f023 0218 	bic.w	r2, r3, #24
 8001a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_AHB2_GRP1_EnableClock>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a82:	f000 fda9 	bl	80025d8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001a86:	f7fe ffed 	bl	8000a64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8a:	f000 f86d 	bl	8001b68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a8e:	f000 f8cd 	bl	8001c2c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001a92:	f000 f92b 	bl	8001cec <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a96:	f000 f9f3 	bl	8001e80 <MX_GPIO_Init>
  MX_RTC_Init();
 8001a9a:	f000 f96f 	bl	8001d7c <MX_RTC_Init>
  MX_I2C1_Init();
 8001a9e:	f000 f8e5 	bl	8001c6c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001aa2:	f000 f99f 	bl	8001de4 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8001aa6:	f000 f935 	bl	8001d14 <MX_LPTIM1_Init>
  MX_RF_Init();
 8001aaa:	f000 f95f 	bl	8001d6c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring sensor...");
 8001aae:	4825      	ldr	r0, [pc, #148]	; (8001b44 <main+0xc8>)
 8001ab0:	f008 fc64 	bl	800a37c <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f7ff f94a 	bl	8000d4e <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001aba:	4923      	ldr	r1, [pc, #140]	; (8001b48 <main+0xcc>)
 8001abc:	4823      	ldr	r0, [pc, #140]	; (8001b4c <main+0xd0>)
 8001abe:	f7fe fd39 	bl	8000534 <BH1790GLC_init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  if(status != 0){
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <main+0x62>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481f      	ldr	r0, [pc, #124]	; (8001b50 <main+0xd4>)
 8001ad2:	f008 fc53 	bl	800a37c <iprintf>
	  sensorReady = 0;
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <main+0xd8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e007      	b.n	8001aee <main+0x72>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481d      	ldr	r0, [pc, #116]	; (8001b58 <main+0xdc>)
 8001ae4:	f008 fc4a 	bl	800a37c <iprintf>
	  sensorReady = 1;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <main+0xd8>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001af4:	4819      	ldr	r0, [pc, #100]	; (8001b5c <main+0xe0>)
 8001af6:	f002 f941 	bl	8003d7c <HAL_LPTIM_TimeOut_Start_IT>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <main+0x88>
	  Error_Handler();
 8001b00:	f000 fa3a 	bl	8001f78 <Error_Handler>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001b04:	f7fe ffbc 	bl	8000a80 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  // TO DO: FIGURE OUT IF THIS IS A GOOD IDEA... HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);	//enter low power mode
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001b08:	f7ff f946 	bl	8000d98 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <main+0xd8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f9      	beq.n	8001b08 <main+0x8c>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <main+0xd8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <main+0xd0>)
 8001b1c:	f7fe fd75 	bl	800060a <get_val>
 8001b20:	4603      	mov	r3, r0
 8001b22:	71bb      	strb	r3, [r7, #6]
        if(err != 0){
 8001b24:	79bb      	ldrb	r3, [r7, #6]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <main+0xba>
        	printf("Could not read sensor. Error code: %d\n\r", err);
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <main+0xe4>)
 8001b30:	f008 fc24 	bl	800a37c <iprintf>
 8001b34:	e7e8      	b.n	8001b08 <main+0x8c>
        }else{
        	//printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
    		printf("ppg_data[1]: %d\n\r", hrm.ppg_data[1]);
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <main+0xd0>)
 8001b38:	88db      	ldrh	r3, [r3, #6]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <main+0xe8>)
 8001b3e:	f008 fc1d 	bl	800a37c <iprintf>
    MX_APPE_Process();
 8001b42:	e7e1      	b.n	8001b08 <main+0x8c>
 8001b44:	0800b2cc 	.word	0x0800b2cc
 8001b48:	20000a18 	.word	0x20000a18
 8001b4c:	20000b98 	.word	0x20000b98
 8001b50:	0800b2e4 	.word	0x0800b2e4
 8001b54:	20000ba0 	.word	0x20000ba0
 8001b58:	0800b310 	.word	0x0800b310
 8001b5c:	20000aa8 	.word	0x20000aa8
 8001b60:	0800b344 	.word	0x0800b344
 8001b64:	0800b36c 	.word	0x0800b36c

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b09a      	sub	sp, #104	; 0x68
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	2248      	movs	r2, #72	; 0x48
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f008 fbf8 	bl	800a36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b8e:	f002 fb69 	bl	8004264 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001b92:	2010      	movs	r0, #16
 8001b94:	f7ff ff43 	bl	8001a1e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <SystemClock_Config+0xc0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba0:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <SystemClock_Config+0xc0>)
 8001ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <SystemClock_Config+0xc0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001bb4:	2327      	movs	r3, #39	; 0x27
 8001bb6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001bd4:	23a0      	movs	r3, #160	; 0xa0
 8001bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bdc:	f107 0320 	add.w	r3, r7, #32
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fed3 	bl	800498c <HAL_RCC_OscConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001bec:	f000 f9c4 	bl	8001f78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001bf0:	236f      	movs	r3, #111	; 0x6f
 8001bf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fa2f 	bl	8005074 <HAL_RCC_ClockConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001c1c:	f000 f9ac 	bl	8001f78 <Error_Handler>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3768      	adds	r7, #104	; 0x68
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58000400 	.word	0x58000400

08001c2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b094      	sub	sp, #80	; 0x50
 8001c30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c32:	463b      	mov	r3, r7
 8001c34:	2250      	movs	r2, #80	; 0x50
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f008 fb97 	bl	800a36c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001c3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c42:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fe4a 	bl	80058ee <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001c60:	f000 f98a 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001c64:	bf00      	nop
 8001c66:	3750      	adds	r7, #80	; 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_I2C1_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <MX_I2C1_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca8:	f001 f8a0 	bl	8002dec <HAL_I2C_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cb2:	f000 f961 	bl	8001f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001cba:	f001 fe27 	bl	800390c <HAL_I2CEx_ConfigAnalogFilter>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f000 f958 	bl	8001f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ccc:	f001 fe69 	bl	80039a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cd6:	f000 f94f 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000a18 	.word	0x20000a18
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	00707cbb 	.word	0x00707cbb

08001cec <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_IPCC_Init+0x20>)
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <MX_IPCC_Init+0x24>)
 8001cf4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_IPCC_Init+0x20>)
 8001cf8:	f001 fea0 	bl	8003a3c <HAL_IPCC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001d02:	f000 f939 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000a6c 	.word	0x20000a6c
 8001d10:	58000c00 	.word	0x58000c00

08001d14 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <MX_LPTIM1_Init+0x54>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d30:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <MX_LPTIM1_Init+0x50>)
 8001d52:	f001 ff71 	bl	8003c38 <HAL_LPTIM_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001d5c:	f000 f90c 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000aa8 	.word	0x20000aa8
 8001d68:	40007c00 	.word	0x40007c00

08001d6c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_RTC_Init+0x60>)
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <MX_RTC_Init+0x64>)
 8001d84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_RTC_Init+0x60>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <MX_RTC_Init+0x60>)
 8001d8e:	220f      	movs	r2, #15
 8001d90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_RTC_Init+0x60>)
 8001d94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_RTC_Init+0x60>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_RTC_Init+0x60>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <MX_RTC_Init+0x60>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_RTC_Init+0x60>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001db2:	480a      	ldr	r0, [pc, #40]	; (8001ddc <MX_RTC_Init+0x60>)
 8001db4:	f004 f822 	bl	8005dfc <HAL_RTC_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f000 f8db 	bl	8001f78 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_RTC_Init+0x60>)
 8001dc8:	f004 f918 	bl	8005ffc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001dd2:	f000 f8d1 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000ae0 	.word	0x20000ae0
 8001de0:	40002800 	.word	0x40002800

08001de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <MX_USART1_UART_Init+0x98>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e04:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001e08:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e0c:	220c      	movs	r2, #12
 8001e0e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e2e:	4812      	ldr	r0, [pc, #72]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e30:	f004 f9c0 	bl	80061b4 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001e3a:	f000 f89d 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e42:	f004 ff0f 	bl	8006c64 <HAL_UARTEx_SetTxFifoThreshold>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001e4c:	f000 f894 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e50:	2100      	movs	r1, #0
 8001e52:	4809      	ldr	r0, [pc, #36]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e54:	f004 ff44 	bl	8006ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001e5e:	f000 f88b 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USART1_UART_Init+0x94>)
 8001e64:	f004 fec5 	bl	8006bf2 <HAL_UARTEx_DisableFifoMode>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001e6e:	f000 f883 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000b04 	.word	0x20000b04
 8001e7c:	40013800 	.word	0x40013800

08001e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e94:	2004      	movs	r0, #4
 8001e96:	f7ff fdd8 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7ff fdd5 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff fdd2 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea6:	2008      	movs	r0, #8
 8001ea8:	f7ff fdcf 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2123      	movs	r1, #35	; 0x23
 8001eb0:	481d      	ldr	r0, [pc, #116]	; (8001f28 <MX_GPIO_Init+0xa8>)
 8001eb2:	f000 ff45 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4819      	ldr	r0, [pc, #100]	; (8001f2c <MX_GPIO_Init+0xac>)
 8001ec8:	f000 fdb2 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001ecc:	2323      	movs	r3, #35	; 0x23
 8001ece:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4811      	ldr	r0, [pc, #68]	; (8001f28 <MX_GPIO_Init+0xa8>)
 8001ee2:	f000 fda5 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ee6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f000 fd94 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_GPIO_Init+0xb0>)
 8001f1a:	f000 fd89 	bl	8002a30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	48000c00 	.word	0x48000c00

08001f34 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000ba0 	.word	0x20000ba0

08001f54 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f5c:	1d39      	adds	r1, r7, #4
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	2201      	movs	r2, #1
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <__io_putchar+0x20>)
 8001f66:	f004 f975 	bl	8006254 <HAL_UART_Transmit>

  return ch;
 8001f6a:	687b      	ldr	r3, [r7, #4]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000b04 	.word	0x20000b04

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <Error_Handler+0x8>

08001f82 <LL_RCC_EnableRTC>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_AHB2_GRP1_EnableClock>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_AHB3_GRP1_EnableClock>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202c:	68fb      	ldr	r3, [r7, #12]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002070:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002074:	f7ff ffaf 	bl	8001fd6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	202e      	movs	r0, #46	; 0x2e
 800207e:	f000 fc78 	bl	8002972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002082:	202e      	movs	r0, #46	; 0x2e
 8002084:	f000 fc8f 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b09c      	sub	sp, #112	; 0x70
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2250      	movs	r2, #80	; 0x50
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f008 f95d 	bl	800a36c <memset>
  if(hi2c->Instance==I2C1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_I2C_MspInit+0x98>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d12e      	bne.n	800211a <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020bc:	2304      	movs	r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020c0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fc0f 	bl	80058ee <HAL_RCCEx_PeriphCLKConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020d6:	f7ff ff4f 	bl	8001f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2002      	movs	r0, #2
 80020dc:	f7ff ff62 	bl	8001fa4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e6:	2312      	movs	r3, #18
 80020e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f2:	2304      	movs	r3, #4
 80020f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020fa:	4619      	mov	r1, r3
 80020fc:	480a      	ldr	r0, [pc, #40]	; (8002128 <HAL_I2C_MspInit+0x9c>)
 80020fe:	f000 fc97 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002102:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002106:	f7ff ff7f 	bl	8002008 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	201e      	movs	r0, #30
 8002110:	f000 fc2f 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002114:	201e      	movs	r0, #30
 8002116:	f000 fc46 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3770      	adds	r7, #112	; 0x70
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40005400 	.word	0x40005400
 8002128:	48000400 	.word	0x48000400

0800212c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_IPCC_MspInit+0x44>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d113      	bne.n	8002166 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800213e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002142:	f7ff ff48 	bl	8001fd6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002146:	2200      	movs	r2, #0
 8002148:	2100      	movs	r1, #0
 800214a:	202c      	movs	r0, #44	; 0x2c
 800214c:	f000 fc11 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002150:	202c      	movs	r0, #44	; 0x2c
 8002152:	f000 fc28 	bl	80029a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	202d      	movs	r0, #45	; 0x2d
 800215c:	f000 fc09 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002160:	202d      	movs	r0, #45	; 0x2d
 8002162:	f000 fc20 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	58000c00 	.word	0x58000c00

08002174 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b096      	sub	sp, #88	; 0x58
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	2250      	movs	r2, #80	; 0x50
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f008 f8f1 	bl	800a36c <memset>
  if(hlptim->Instance==LPTIM1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <HAL_LPTIM_MspInit+0x60>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d11a      	bne.n	80021ca <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002194:	2310      	movs	r3, #16
 8002196:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002198:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fba3 	bl	80058ee <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80021ae:	f7ff fee3 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80021b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80021b6:	f7ff ff27 	bl	8002008 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	202f      	movs	r0, #47	; 0x2f
 80021c0:	f000 fbd7 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80021c4:	202f      	movs	r0, #47	; 0x2f
 80021c6:	f000 fbee 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3758      	adds	r7, #88	; 0x58
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40007c00 	.word	0x40007c00

080021d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b096      	sub	sp, #88	; 0x58
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	2250      	movs	r2, #80	; 0x50
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f008 f8bf 	bl	800a36c <memset>
  if(hrtc->Instance==RTC)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_RTC_MspInit+0x64>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d11d      	bne.n	8002234 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4618      	mov	r0, r3
 800220a:	f003 fb70 	bl	80058ee <HAL_RCCEx_PeriphCLKConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002214:	f7ff feb0 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002218:	f7ff feb3 	bl	8001f82 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800221c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002220:	f7ff fef2 	bl	8002008 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2003      	movs	r0, #3
 800222a:	f000 fba2 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800222e:	2003      	movs	r0, #3
 8002230:	f000 fbb9 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002234:	bf00      	nop
 8002236:	3758      	adds	r7, #88	; 0x58
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40002800 	.word	0x40002800

08002240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b09c      	sub	sp, #112	; 0x70
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2250      	movs	r2, #80	; 0x50
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f008 f883 	bl	800a36c <memset>
  if(huart->Instance==USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_UART_MspInit+0x84>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d124      	bne.n	80022ba <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002270:	2301      	movs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fb36 	bl	80058ee <HAL_RCCEx_PeriphCLKConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002288:	f7ff fe76 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002290:	f7ff fed3 	bl	800203a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	2002      	movs	r0, #2
 8002296:	f7ff fe85 	bl	8001fa4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800229a:	23c0      	movs	r3, #192	; 0xc0
 800229c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022aa:	2307      	movs	r3, #7
 80022ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022b2:	4619      	mov	r1, r3
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <HAL_UART_MspInit+0x88>)
 80022b6:	f000 fbbb 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	3770      	adds	r7, #112	; 0x70
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40013800 	.word	0x40013800
 80022c8:	48000400 	.word	0x48000400

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002318:	f000 f9b8 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002324:	f7ff f8c2 	bl	80014ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <I2C1_EV_IRQHandler+0x10>)
 8002332:	f001 f819 	bl	8003368 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000a18 	.word	0x20000a18

08002340 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002344:	f007 fc16 	bl	8009b74 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002350:	f007 fc48 	bl	8009be4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800235c:	f000 fd22 	bl	8002da4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <LPTIM1_IRQHandler+0x10>)
 800236a:	f001 fd89 	bl	8003e80 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000aa8 	.word	0x20000aa8

08002378 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
  }

  return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fdc1 	bl	8001f54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
  }
  return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002412:	605a      	str	r2, [r3, #4]
  return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:

int _isatty(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f007 ff3a 	bl	800a2fc <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20030000 	.word	0x20030000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	20000ba4 	.word	0x20000ba4
 80024bc:	20000e68 	.word	0x20000e68

080024c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <SystemInit+0x98>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <SystemInit+0x98>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80024ec:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <SystemInit+0x9c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250a:	f023 0305 	bic.w	r3, r3, #5
 800250e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <SystemInit+0xa0>)
 800252c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <SystemInit+0xa0>)
 8002534:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	faf6fefb 	.word	0xfaf6fefb
 8002560:	22041000 	.word	0x22041000

08002564 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002564:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002566:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002568:	3304      	adds	r3, #4

0800256a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800256a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800256e:	d3f9      	bcc.n	8002564 <CopyDataInit>
  bx lr
 8002570:	4770      	bx	lr

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002572:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002574:	3004      	adds	r0, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002576:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>
  bx lr
 800257a:	4770      	bx	lr

0800257c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800257e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002580:	f7ff ff9e 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002584:	480b      	ldr	r0, [pc, #44]	; (80025b4 <LoopForever+0x6>)
 8002586:	490c      	ldr	r1, [pc, #48]	; (80025b8 <LoopForever+0xa>)
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <LoopForever+0xe>)
 800258a:	2300      	movs	r3, #0
 800258c:	f7ff ffed 	bl	800256a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002590:	480b      	ldr	r0, [pc, #44]	; (80025c0 <LoopForever+0x12>)
 8002592:	490c      	ldr	r1, [pc, #48]	; (80025c4 <LoopForever+0x16>)
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <LoopForever+0x1a>)
 8002596:	2300      	movs	r3, #0
 8002598:	f7ff ffe7 	bl	800256a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800259c:	480b      	ldr	r0, [pc, #44]	; (80025cc <LoopForever+0x1e>)
 800259e:	490c      	ldr	r1, [pc, #48]	; (80025d0 <LoopForever+0x22>)
 80025a0:	2300      	movs	r3, #0
 80025a2:	f7ff ffe8 	bl	8002576 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025a6:	f007 feaf 	bl	800a308 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80025aa:	f7ff fa67 	bl	8001a7c <main>

080025ae <LoopForever>:

LoopForever:
  b LoopForever
 80025ae:	e7fe      	b.n	80025ae <LoopForever>
  ldr   r0, =_estack
 80025b0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80025b4:	20000008 	.word	0x20000008
 80025b8:	2000008c 	.word	0x2000008c
 80025bc:	0800b6cc 	.word	0x0800b6cc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80025c0:	200301e3 	.word	0x200301e3
 80025c4:	200301e3 	.word	0x200301e3
 80025c8:	0800c019 	.word	0x0800c019
  INIT_BSS _sbss, _ebss
 80025cc:	2000095c 	.word	0x2000095c
 80025d0:	20000e64 	.word	0x20000e64

080025d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_IRQHandler>
	...

080025d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_Init+0x3c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a0b      	ldr	r2, [pc, #44]	; (8002614 <HAL_Init+0x3c>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ee:	2003      	movs	r0, #3
 80025f0:	f000 f9b4 	bl	800295c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025f4:	2000      	movs	r0, #0
 80025f6:	f000 f80f 	bl	8002618 <HAL_InitTick>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	71fb      	strb	r3, [r7, #7]
 8002604:	e001      	b.n	800260a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002606:	f7ff fd31 	bl	800206c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800260a:	79fb      	ldrb	r3, [r7, #7]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	58004000 	.word	0x58004000

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_InitTick+0x6c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d024      	beq.n	8002676 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800262c:	f002 fece 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_InitTick+0x6c>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002640:	fbb2 f3f3 	udiv	r3, r2, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f9ca 	bl	80029de <HAL_SYSTICK_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d809      	bhi.n	800266a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002656:	2200      	movs	r2, #0
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	f04f 30ff 	mov.w	r0, #4294967295
 800265e:	f000 f988 	bl	8002972 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_InitTick+0x70>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e007      	b.n	800267a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e004      	b.n	800267a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	e001      	b.n	800267a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000010 	.word	0x20000010
 8002688:	2000000c 	.word	0x2000000c

0800268c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x20>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x24>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_IncTick+0x24>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000010 	.word	0x20000010
 80026b0:	20000ba8 	.word	0x20000ba8

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000ba8 	.word	0x20000ba8

080026cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTickPrio+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_GetTickFreq+0x14>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000010 	.word	0x20000010

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db12      	blt.n	80027d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	490a      	ldr	r1, [pc, #40]	; (80027e0 <__NVIC_DisableIRQ+0x44>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	3320      	adds	r3, #32
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c8:	f3bf 8f4f 	dsb	sy
}
 80027cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ce:	f3bf 8f6f 	isb	sy
}
 80027d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0c      	blt.n	8002810 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4907      	ldr	r1, [pc, #28]	; (800281c <__NVIC_SetPendingIRQ+0x38>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	3340      	adds	r3, #64	; 0x40
 800280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0c      	blt.n	800284c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4907      	ldr	r1, [pc, #28]	; (8002858 <__NVIC_ClearPendingIRQ+0x38>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100

0800285c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	; (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
         );
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002928:	d301      	bcc.n	800292e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292a:	2301      	movs	r3, #1
 800292c:	e00f      	b.n	800294e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <SysTick_Config+0x40>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002936:	210f      	movs	r1, #15
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f7ff ff8e 	bl	800285c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <SysTick_Config+0x40>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <SysTick_Config+0x40>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	e000e010 	.word	0xe000e010

0800295c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fec9 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff fee0 	bl	8002744 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff90 	bl	80028b0 <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5f 	bl	800285c <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fed3 	bl	8002760 <__NVIC_EnableIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fee3 	bl	800279c <__NVIC_DisableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ff96 	bl	8002918 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff feed 	bl	80027e4 <__NVIC_SetPendingIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fefd 	bl	8002820 <__NVIC_ClearPendingIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e14c      	b.n	8002cda <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 813e 	beq.w	8002cd4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d005      	beq.n	8002a70 <HAL_GPIO_Init+0x40>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d130      	bne.n	8002ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0201 	and.w	r2, r3, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d017      	beq.n	8002b0e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d123      	bne.n	8002b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	6939      	ldr	r1, [r7, #16]
 8002b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8098 	beq.w	8002cd4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba4:	4a54      	ldr	r2, [pc, #336]	; (8002cf8 <HAL_GPIO_Init+0x2c8>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bce:	d019      	beq.n	8002c04 <HAL_GPIO_Init+0x1d4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a4a      	ldr	r2, [pc, #296]	; (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <HAL_GPIO_Init+0x1d0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00d      	beq.n	8002bfc <HAL_GPIO_Init+0x1cc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a48      	ldr	r2, [pc, #288]	; (8002d04 <HAL_GPIO_Init+0x2d4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x1c8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a47      	ldr	r2, [pc, #284]	; (8002d08 <HAL_GPIO_Init+0x2d8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d101      	bne.n	8002bf4 <HAL_GPIO_Init+0x1c4>
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	e008      	b.n	8002c06 <HAL_GPIO_Init+0x1d6>
 8002bf4:	2307      	movs	r3, #7
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x1d6>
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e004      	b.n	8002c06 <HAL_GPIO_Init+0x1d6>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e002      	b.n	8002c06 <HAL_GPIO_Init+0x1d6>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_GPIO_Init+0x1d6>
 8002c04:	2300      	movs	r3, #0
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	f002 0203 	and.w	r2, r2, #3
 8002c0c:	0092      	lsls	r2, r2, #2
 8002c0e:	4093      	lsls	r3, r2
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c16:	4938      	ldr	r1, [pc, #224]	; (8002cf8 <HAL_GPIO_Init+0x2c8>)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c24:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c48:	4a30      	ldr	r2, [pc, #192]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c72:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ccc:	4a0f      	ldr	r2, [pc, #60]	; (8002d0c <HAL_GPIO_Init+0x2dc>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aeab 	bne.w	8002a40 <HAL_GPIO_Init+0x10>
  }
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	48000800 	.word	0x48000800
 8002d04:	48000c00 	.word	0x48000c00
 8002d08:	48001000 	.word	0x48001000
 8002d0c:	58000800 	.word	0x58000800

08002d10 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e001      	b.n	8002d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d50:	787b      	ldrb	r3, [r7, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d5e:	887a      	ldrh	r2, [r7, #2]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43d9      	mvns	r1, r3
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	400b      	ands	r3, r1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	619a      	str	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_HSEM_IRQHandler+0x30>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_HSEM_IRQHandler+0x30>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <HAL_HSEM_IRQHandler+0x30>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <HAL_HSEM_IRQHandler+0x30>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f807 	bl	8002dd8 <HAL_HSEM_FreeCallback>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	58001500 	.word	0x58001500

08002dd8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e081      	b.n	8002f02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff f93a 	bl	800208c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e006      	b.n	8002e74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d104      	bne.n	8002e86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69d9      	ldr	r1, [r3, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1a      	ldr	r2, [r3, #32]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 80f9 	bne.w	8003126 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x34>
 8002f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0ed      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Mem_Write+0x4e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0e6      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f62:	f7ff fba7 	bl	80026b4 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fadd 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d1      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2221      	movs	r2, #33	; 0x21
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fac:	88f8      	ldrh	r0, [r7, #6]
 8002fae:	893a      	ldrh	r2, [r7, #8]
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f9ed 	bl	800339c <I2C_RequestMemoryWrite>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0a9      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2bff      	cmp	r3, #255	; 0xff
 8002fdc:	d90e      	bls.n	8002ffc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	2300      	movs	r3, #0
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fc57 	bl	80038a8 <I2C_TransferConfig>
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	b2da      	uxtb	r2, r3
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fc46 	bl	80038a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fad6 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e07b      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d034      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x1c8>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d130      	bne.n	80030d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fa59 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e04d      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2bff      	cmp	r3, #255	; 0xff
 8003094:	d90e      	bls.n	80030b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	22ff      	movs	r2, #255	; 0xff
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	2300      	movs	r3, #0
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fbfb 	bl	80038a8 <I2C_TransferConfig>
 80030b2:	e00f      	b.n	80030d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	2300      	movs	r3, #0
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fbea 	bl	80038a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d19e      	bne.n	800301c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fabc 	bl	8003660 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e01a      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2220      	movs	r2, #32
 80030f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_I2C_Mem_Write+0x224>)
 8003106:	400b      	ands	r3, r1
 8003108:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	fe00e800 	.word	0xfe00e800

08003134 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	460b      	mov	r3, r1
 8003148:	813b      	strh	r3, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b20      	cmp	r3, #32
 8003158:	f040 80fd 	bne.w	8003356 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_I2C_Mem_Read+0x34>
 8003162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0f1      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_I2C_Mem_Read+0x4e>
 800317e:	2302      	movs	r3, #2
 8003180:	e0ea      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800318a:	f7ff fa93 	bl	80026b4 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2319      	movs	r3, #25
 8003196:	2201      	movs	r2, #1
 8003198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f9c9 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0d5      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2222      	movs	r2, #34	; 0x22
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d4:	88f8      	ldrh	r0, [r7, #6]
 80031d6:	893a      	ldrh	r2, [r7, #8]
 80031d8:	8979      	ldrh	r1, [r7, #10]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	4603      	mov	r3, r0
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f92d 	bl	8003444 <I2C_RequestMemoryRead>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0ad      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2bff      	cmp	r3, #255	; 0xff
 8003204:	d90e      	bls.n	8003224 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	b2da      	uxtb	r2, r3
 8003212:	8979      	ldrh	r1, [r7, #10]
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <HAL_I2C_Mem_Read+0x22c>)
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fb43 	bl	80038a8 <I2C_TransferConfig>
 8003222:	e00f      	b.n	8003244 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	b2da      	uxtb	r2, r3
 8003234:	8979      	ldrh	r1, [r7, #10]
 8003236:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_I2C_Mem_Read+0x22c>)
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fb32 	bl	80038a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	2200      	movs	r2, #0
 800324c:	2104      	movs	r1, #4
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f970 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07c      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d034      	beq.n	8003304 <HAL_I2C_Mem_Read+0x1d0>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d130      	bne.n	8003304 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	2200      	movs	r2, #0
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f941 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04d      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2bff      	cmp	r3, #255	; 0xff
 80032c4:	d90e      	bls.n	80032e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	22ff      	movs	r2, #255	; 0xff
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	8979      	ldrh	r1, [r7, #10]
 80032d4:	2300      	movs	r3, #0
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 fae3 	bl	80038a8 <I2C_TransferConfig>
 80032e2:	e00f      	b.n	8003304 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	8979      	ldrh	r1, [r7, #10]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fad2 	bl	80038a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d19a      	bne.n	8003244 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f9a4 	bl	8003660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01a      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2220      	movs	r2, #32
 8003328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_I2C_Mem_Read+0x230>)
 8003336:	400b      	ands	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	80002400 	.word	0x80002400
 8003364:	fe00e800 	.word	0xfe00e800

08003368 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	68f9      	ldr	r1, [r7, #12]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
  }
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <I2C_RequestMemoryWrite+0xa4>)
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa6f 	bl	80038a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	69b9      	ldr	r1, [r7, #24]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8ff 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02c      	b.n	8003438 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
 80033ee:	e015      	b.n	800341c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f8e5 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e012      	b.n	8003438 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2200      	movs	r2, #0
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f884 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	80002000 	.word	0x80002000

08003444 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	460b      	mov	r3, r1
 8003458:	813b      	strh	r3, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <I2C_RequestMemoryRead+0xa4>)
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa1c 	bl	80038a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f8ac 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e02c      	b.n	80034de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
 8003494:	e015      	b.n	80034c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	b29b      	uxth	r3, r3
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f892 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e012      	b.n	80034de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034b8:	893b      	ldrh	r3, [r7, #8]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2140      	movs	r1, #64	; 0x40
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f831 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	80002000 	.word	0x80002000

080034ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d103      	bne.n	800350a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d007      	beq.n	8003528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	619a      	str	r2, [r3, #24]
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003544:	e031      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d02d      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7ff f8b1 	bl	80026b4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d122      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d113      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0be      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035de:	e033      	b.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f87f 	bl	80036e8 <I2C_IsErrorOccurred>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e031      	b.n	8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d025      	beq.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fc:	f7ff f85a 	bl	80026b4 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11a      	bne.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d013      	beq.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e007      	b.n	8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d1c4      	bne.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800366c:	e02f      	b.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f838 	bl	80036e8 <I2C_IsErrorOccurred>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02d      	b.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7ff f817 	bl	80026b4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11a      	bne.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d013      	beq.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d1c8      	bne.n	800366e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d068      	beq.n	80037e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2210      	movs	r2, #16
 800371a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800371c:	e049      	b.n	80037b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d045      	beq.n	80037b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7fe ffc5 	bl	80026b4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_IsErrorOccurred+0x54>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d13a      	bne.n	80037b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800374e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375e:	d121      	bne.n	80037a4 <I2C_IsErrorOccurred+0xbc>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003766:	d01d      	beq.n	80037a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b20      	cmp	r3, #32
 800376c:	d01a      	beq.n	80037a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800377c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800377e:	f7fe ff99 	bl	80026b4 <HAL_GetTick>
 8003782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003784:	e00e      	b.n	80037a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003786:	f7fe ff95 	bl	80026b4 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b19      	cmp	r3, #25
 8003792:	d907      	bls.n	80037a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f043 0320 	orr.w	r3, r3, #32
 800379a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80037a2:	e006      	b.n	80037b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d1e9      	bne.n	8003786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d003      	beq.n	80037c8 <I2C_IsErrorOccurred+0xe0>
 80037c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0aa      	beq.n	800371e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2220      	movs	r2, #32
 80037d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800382a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01c      	beq.n	8003896 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff fe45 	bl	80034ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <I2C_IsErrorOccurred+0x1bc>)
 800386e:	400b      	ands	r3, r1
 8003870:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800389a:	4618      	mov	r0, r3
 800389c:	3728      	adds	r7, #40	; 0x28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	4613      	mov	r3, r2
 80038b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ba:	897b      	ldrh	r3, [r7, #10]
 80038bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c0:	7a7b      	ldrb	r3, [r7, #9]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	0d5b      	lsrs	r3, r3, #21
 80038e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <I2C_TransferConfig+0x60>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	43db      	mvns	r3, r3
 80038ec:	ea02 0103 	and.w	r1, r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	03ff63ff 	.word	0x03ff63ff

0800390c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d138      	bne.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800392c:	2302      	movs	r3, #2
 800392e:	e032      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800395e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d139      	bne.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e033      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	; 0x24
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01e      	beq.n	8003a8c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_IPCC_Init+0x60>)
 8003a50:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fe fb64 	bl	800212c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f000 f85b 	bl	8003b20 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f82c 	bl	8003ad4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003a8a:	e001      	b.n	8003a90 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	58000c00 	.word	0x58000c00

08003aa0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e00f      	b.n	8003b02 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <IPCC_SetDefaultCallbacks+0x44>)
 8003aec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3306      	adds	r3, #6
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <IPCC_SetDefaultCallbacks+0x48>)
 8003afa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d9ec      	bls.n	8003ae2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	08003aa1 	.word	0x08003aa1
 8003b1c:	08003abb 	.word	0x08003abb

08003b20 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003b34:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	223f      	movs	r2, #63	; 0x3f
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_SetLPTIMClockSource>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	401a      	ands	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_GetLPTIMClockSource>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0c1a      	lsrs	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4313      	orrs	r3, r2
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_APB1_GRP1_ForceReset>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <LL_APB1_GRP2_ForceReset>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_APB1_GRP1_ReleaseReset>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c00:	4013      	ands	r3, r2
 8003c02:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_APB1_GRP2_ReleaseReset>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c26:	4013      	ands	r3, r2
 8003c28:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e08f      	b.n	8003d6a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe fa85 	bl	8002174 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d004      	beq.n	8003c8c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8a:	d103      	bne.n	8003c94 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 031e 	bic.w	r3, r3, #30
 8003c92:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d005      	beq.n	8003cac <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_LPTIM_Init+0x13c>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003cbc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003cc2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003cc8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003cce:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d107      	bne.n	8003cee <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d004      	beq.n	8003d00 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfe:	d107      	bne.n	8003d10 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00a      	beq.n	8003d32 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d24:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003d2a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <HAL_LPTIM_Init+0x140>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	e004      	b.n	8003d60 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d5e:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	ff19f1fe 	.word	0xff19f1fe
 8003d78:	40007c00 	.word	0x40007c00

08003d7c <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a38      	ldr	r2, [pc, #224]	; (8003e78 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8003d9a:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da0:	4a36      	ldr	r2, [pc, #216]	; (8003e7c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003da6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003daa:	e007      	b.n	8003dbc <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8003dac:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db2:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2210      	movs	r2, #16
 8003de2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003dec:	2110      	movs	r1, #16
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f92c 	bl	800404c <LPTIM_WaitForFlag>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d101      	bne.n	8003dfe <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e038      	b.n	8003e70 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2208      	movs	r2, #8
 8003e04:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003e0e:	2108      	movs	r1, #8
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f91b 	bl	800404c <LPTIM_WaitForFlag>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d101      	bne.n	8003e20 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e027      	b.n	8003e70 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f943 	bl	80040ac <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f901 	bl	800402e <HAL_LPTIM_GetState>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d101      	bne.n	8003e36 <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e01c      	b.n	8003e70 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0201 	orr.w	r2, r2, #1
 8003e54:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0204 	orr.w	r2, r2, #4
 8003e64:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40007c00 	.word	0x40007c00
 8003e7c:	58000800 	.word	0x58000800

08003e80 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d10d      	bne.n	8003eb2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fe f841 	bl	8001f34 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d10d      	bne.n	8003edc <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d106      	bne.n	8003edc <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f86d 	bl	8003fb6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d10d      	bne.n	8003f06 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d106      	bne.n	8003f06 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2204      	movs	r2, #4
 8003efe:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f862 	bl	8003fca <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d10d      	bne.n	8003f30 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d106      	bne.n	8003f30 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2208      	movs	r2, #8
 8003f28:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f857 	bl	8003fde <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d10d      	bne.n	8003f5a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d106      	bne.n	8003f5a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2210      	movs	r2, #16
 8003f52:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f84c 	bl	8003ff2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d10d      	bne.n	8003f84 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d106      	bne.n	8003f84 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f841 	bl	8004006 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d10d      	bne.n	8003fae <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d106      	bne.n	8003fae <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f836 	bl	800401a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800403c:	b2db      	uxtb	r3, r3
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <LPTIM_WaitForFlag+0x58>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <LPTIM_WaitForFlag+0x5c>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	0b9b      	lsrs	r3, r3, #14
 8004066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3b01      	subs	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	4013      	ands	r3, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d002      	beq.n	8004096 <LPTIM_WaitForFlag+0x4a>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ec      	bne.n	8004070 <LPTIM_WaitForFlag+0x24>

  return result;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20000008 	.word	0x20000008
 80040a8:	d1b71759 	.word	0xd1b71759

080040ac <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08c      	sub	sp, #48	; 0x30
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b8:	f3ef 8310 	mrs	r3, PRIMASK
 80040bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80040be:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c2:	2301      	movs	r3, #1
 80040c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f383 8810 	msr	PRIMASK, r3
}
 80040cc:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a62      	ldr	r2, [pc, #392]	; (800425c <LPTIM_Disable+0x1b0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <LPTIM_Disable+0x34>
 80040d8:	4a61      	ldr	r2, [pc, #388]	; (8004260 <LPTIM_Disable+0x1b4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d006      	beq.n	80040ec <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80040de:	e00b      	b.n	80040f8 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80040e0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80040e4:	f7ff fd4a 	bl	8003b7c <LL_RCC_GetLPTIMClockSource>
 80040e8:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80040ea:	e005      	b.n	80040f8 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80040ec:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80040f0:	f7ff fd44 	bl	8003b7c <LL_RCC_GetLPTIMClockSource>
 80040f4:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80040f6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a4d      	ldr	r2, [pc, #308]	; (800425c <LPTIM_Disable+0x1b0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <LPTIM_Disable+0x86>
 800412a:	4a4d      	ldr	r2, [pc, #308]	; (8004260 <LPTIM_Disable+0x1b4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004130:	e00f      	b.n	8004152 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004132:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004136:	f7ff fd34 	bl	8003ba2 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800413a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800413e:	f7ff fd54 	bl	8003bea <LL_APB1_GRP1_ReleaseReset>
      break;
 8004142:	e006      	b.n	8004152 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004144:	2020      	movs	r0, #32
 8004146:	f7ff fd3e 	bl	8003bc6 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800414a:	2020      	movs	r0, #32
 800414c:	f7ff fd60 	bl	8003c10 <LL_APB1_GRP2_ReleaseReset>
      break;
 8004150:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <LPTIM_Disable+0xb2>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d05f      	beq.n	800421e <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a3e      	ldr	r2, [pc, #248]	; (800425c <LPTIM_Disable+0x1b0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <LPTIM_Disable+0xc4>
 8004168:	4a3d      	ldr	r2, [pc, #244]	; (8004260 <LPTIM_Disable+0x1b4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d005      	beq.n	800417a <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800416e:	e009      	b.n	8004184 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004170:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004174:	f7ff fce8 	bl	8003b48 <LL_RCC_SetLPTIMClockSource>
        break;
 8004178:	e004      	b.n	8004184 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800417a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800417e:	f7ff fce3 	bl	8003b48 <LL_RCC_SetLPTIMClockSource>
        break;
 8004182:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80041a2:	2108      	movs	r1, #8
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff51 	bl	800404c <LPTIM_WaitForFlag>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d103      	bne.n	80041b8 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2203      	movs	r2, #3
 80041b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01a      	beq.n	80041fc <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80041de:	2110      	movs	r1, #16
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff ff33 	bl	800404c <LPTIM_WaitForFlag>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d103      	bne.n	80041f4 <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2203      	movs	r2, #3
 80041f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <LPTIM_Disable+0x1b0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <LPTIM_Disable+0x162>
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <LPTIM_Disable+0x1b4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800420c:	e008      	b.n	8004220 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800420e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004210:	f7ff fc9a 	bl	8003b48 <LL_RCC_SetLPTIMClockSource>
        break;
 8004214:	e004      	b.n	8004220 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004218:	f7ff fc96 	bl	8003b48 <LL_RCC_SetLPTIMClockSource>
        break;
 800421c:	e000      	b.n	8004220 <LPTIM_Disable+0x174>
    }
  }
 800421e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004236:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	621a      	str	r2, [r3, #32]
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f383 8810 	msr	PRIMASK, r3
}
 8004252:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004254:	bf00      	nop
 8004256:	3730      	adds	r7, #48	; 0x30
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40007c00 	.word	0x40007c00
 8004260:	40009400 	.word	0x40009400

08004264 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	58000400 	.word	0x58000400

08004284 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_PWREx_GetVoltageRange+0x18>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	58000400 	.word	0x58000400

080042a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d101      	bne.n	80042b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_RCC_HSE_Enable>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80042c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_RCC_HSE_Disable>:
{
 80042e2:	b480      	push	{r7}
 80042e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_HSE_IsReady>:
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004312:	d101      	bne.n	8004318 <LL_RCC_HSE_IsReady+0x18>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <LL_RCC_HSE_IsReady+0x1a>
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_RCC_HSI_Enable>:
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <LL_RCC_HSI_Disable>:
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_HSI_IsReady>:
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d101      	bne.n	8004378 <LL_RCC_HSI_IsReady+0x18>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <LL_RCC_HSI_IsReady+0x1a>
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_HSI48_Enable>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_RCC_HSI48_Disable>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_RCC_HSI48_IsReady>:
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d101      	bne.n	800440a <LL_RCC_HSI48_IsReady+0x18>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <LL_RCC_HSI48_IsReady+0x1a>
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_RCC_LSE_Enable>:
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <LL_RCC_LSE_Disable>:
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800443c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <LL_RCC_LSE_EnableBypass>:
{
 800445a:	b480      	push	{r7}
 800445c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800445e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_LSE_DisableBypass>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448c:	f023 0304 	bic.w	r3, r3, #4
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_RCC_LSE_IsReady>:
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d101      	bne.n	80044b6 <LL_RCC_LSE_IsReady+0x18>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_RCC_LSE_IsReady+0x1a>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_LSI1_Enable>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044da:	bf00      	nop
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_RCC_LSI1_Disable>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <LL_RCC_LSI1_IsReady>:
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	d101      	bne.n	800451e <LL_RCC_LSI1_IsReady+0x18>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_RCC_LSI1_IsReady+0x1a>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <LL_RCC_LSI2_Enable>:
{
 800452a:	b480      	push	{r7}
 800452c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800452e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_RCC_LSI2_Disable>:
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_RCC_LSI2_IsReady>:
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d101      	bne.n	8004586 <LL_RCC_LSI2_IsReady+0x18>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_RCC_LSI2_IsReady+0x1a>
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_RCC_LSI2_SetTrimming>:
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_RCC_MSI_Enable>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6013      	str	r3, [r2, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <LL_RCC_MSI_Disable>:
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	6013      	str	r3, [r2, #0]
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <LL_RCC_MSI_IsReady>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d101      	bne.n	8004612 <LL_RCC_MSI_IsReady+0x16>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <LL_RCC_MSI_IsReady+0x18>
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_RCC_MSI_SetRange>:
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_RCC_MSI_GetRange>:
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004656:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2bb0      	cmp	r3, #176	; 0xb0
 800465c:	d901      	bls.n	8004662 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800465e:	23b0      	movs	r3, #176	; 0xb0
 8004660:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004662:	687b      	ldr	r3, [r7, #4]
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_RCC_SetSysClkSource>:
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 0203 	bic.w	r2, r3, #3
 80046ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <LL_RCC_GetSysClkSource>:
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <LL_RCC_SetAHBPrescaler>:
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_RCC_SetAHB4Prescaler>:
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800473e:	f023 020f 	bic.w	r2, r3, #15
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_RCC_SetAPB1Prescaler>:
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800476e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_RCC_SetAPB2Prescaler>:
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_RCC_GetAHBPrescaler>:
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_RCC_GetAHB4Prescaler>:
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80047c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_RCC_GetAPB1Prescaler>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_RCC_GetAPB2Prescaler>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80047fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_RCC_PLL_Enable>:
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <LL_RCC_PLL_Disable>:
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800483c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004840:	6013      	str	r3, [r2, #0]
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_RCC_PLL_IsReady>:
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800485e:	d101      	bne.n	8004864 <LL_RCC_PLL_IsReady+0x18>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_RCC_PLL_IsReady+0x1a>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_RCC_PLL_GetN>:
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_RCC_PLL_GetR>:
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_RCC_PLL_GetDivider>:
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_RCC_PLL_GetMainSource>:
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0303 	and.w	r3, r3, #3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d101      	bne.n	80048ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800490a:	d101      	bne.n	8004910 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d101      	bne.n	8004936 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004954:	d101      	bne.n	800495a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004966:	b480      	push	{r7}
 8004968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004974:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004978:	d101      	bne.n	800497e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800498c:	b590      	push	{r4, r7, lr}
 800498e:	b08d      	sub	sp, #52	; 0x34
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e363      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 808d 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ac:	f7ff fe89 	bl	80046c2 <LL_RCC_GetSysClkSource>
 80049b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b2:	f7ff ff82 	bl	80048ba <LL_RCC_PLL_GetMainSource>
 80049b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_RCC_OscConfig+0x3e>
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	2b0c      	cmp	r3, #12
 80049c2:	d147      	bne.n	8004a54 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d144      	bne.n	8004a54 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e347      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80049da:	f7ff fe34 	bl	8004646 <LL_RCC_MSI_GetRange>
 80049de:	4603      	mov	r3, r0
 80049e0:	429c      	cmp	r4, r3
 80049e2:	d914      	bls.n	8004a0e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fd2f 	bl	800544c <RCC_SetFlashLatencyFromMSIRange>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e336      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fe0e 	bl	800461e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fe32 	bl	8004670 <LL_RCC_MSI_SetCalibTrimming>
 8004a0c:	e013      	b.n	8004a36 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fe03 	bl	800461e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fe27 	bl	8004670 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fd10 	bl	800544c <RCC_SetFlashLatencyFromMSIRange>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e317      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a36:	f000 fcc9 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4aa4      	ldr	r2, [pc, #656]	; (8004cd0 <HAL_RCC_OscConfig+0x344>)
 8004a3e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a40:	4ba4      	ldr	r3, [pc, #656]	; (8004cd4 <HAL_RCC_OscConfig+0x348>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fd fde7 	bl	8002618 <HAL_InitTick>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d039      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e308      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01e      	beq.n	8004a9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a5c:	f7ff fdb0 	bl	80045c0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a60:	f7fd fe28 	bl	80026b4 <HAL_GetTick>
 8004a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a68:	f7fd fe24 	bl	80026b4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e2f5      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a7a:	f7ff fdbf 	bl	80045fc <LL_RCC_MSI_IsReady>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f1      	beq.n	8004a68 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fdc8 	bl	800461e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fdec 	bl	8004670 <LL_RCC_MSI_SetCalibTrimming>
 8004a98:	e015      	b.n	8004ac6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a9a:	f7ff fda0 	bl	80045de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a9e:	f7fd fe09 	bl	80026b4 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa6:	f7fd fe05 	bl	80026b4 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e2d6      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004ab8:	f7ff fda0 	bl	80045fc <LL_RCC_MSI_IsReady>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f1      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x11a>
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ac4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d047      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad2:	f7ff fdf6 	bl	80046c2 <LL_RCC_GetSysClkSource>
 8004ad6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad8:	f7ff feef 	bl	80048ba <LL_RCC_PLL_GetMainSource>
 8004adc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_OscConfig+0x164>
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d108      	bne.n	8004afc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d105      	bne.n	8004afc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d134      	bne.n	8004b62 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e2b4      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b04:	d102      	bne.n	8004b0c <HAL_RCC_OscConfig+0x180>
 8004b06:	f7ff fbdd 	bl	80042c4 <LL_RCC_HSE_Enable>
 8004b0a:	e001      	b.n	8004b10 <HAL_RCC_OscConfig+0x184>
 8004b0c:	f7ff fbe9 	bl	80042e2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd fdcc 	bl	80026b4 <HAL_GetTick>
 8004b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fd fdc8 	bl	80026b4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e299      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b32:	f7ff fbe5 	bl	8004300 <LL_RCC_HSE_IsReady>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f1      	beq.n	8004b20 <HAL_RCC_OscConfig+0x194>
 8004b3c:	e011      	b.n	8004b62 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fdb9 	bl	80026b4 <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b46:	f7fd fdb5 	bl	80026b4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b64      	cmp	r3, #100	; 0x64
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e286      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b58:	f7ff fbd2 	bl	8004300 <LL_RCC_HSE_IsReady>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f1      	bne.n	8004b46 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b6e:	f7ff fda8 	bl	80046c2 <LL_RCC_GetSysClkSource>
 8004b72:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b74:	f7ff fea1 	bl	80048ba <LL_RCC_PLL_GetMainSource>
 8004b78:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_OscConfig+0x200>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d10e      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e266      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fbf1 	bl	8004384 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ba2:	e031      	b.n	8004c08 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d019      	beq.n	8004be0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bac:	f7ff fbba 	bl	8004324 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fd fd80 	bl	80026b4 <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7fd fd7c 	bl	80026b4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e24d      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004bca:	f7ff fbc9 	bl	8004360 <LL_RCC_HSI_IsReady>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f1      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fbd3 	bl	8004384 <LL_RCC_HSI_SetCalibTrimming>
 8004bde:	e013      	b.n	8004c08 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be0:	f7ff fbaf 	bl	8004342 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd fd66 	bl	80026b4 <HAL_GetTick>
 8004be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bec:	f7fd fd62 	bl	80026b4 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e233      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bfe:	f7ff fbaf 	bl	8004360 <LL_RCC_HSI_IsReady>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f1      	bne.n	8004bec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a3 	beq.w	8004d68 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d076      	beq.n	8004d18 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d046      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004c36:	f7ff fc66 	bl	8004506 <LL_RCC_LSI1_IsReady>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d113      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004c40:	f7ff fc3f 	bl	80044c2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c44:	f7fd fd36 	bl	80026b4 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c4c:	f7fd fd32 	bl	80026b4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e203      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c5e:	f7ff fc52 	bl	8004506 <LL_RCC_LSI1_IsReady>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f1      	beq.n	8004c4c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004c68:	f7ff fc5f 	bl	800452a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fd fd22 	bl	80026b4 <HAL_GetTick>
 8004c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c74:	f7fd fd1e 	bl	80026b4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e1ef      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c86:	f7ff fc72 	bl	800456e <LL_RCC_LSI2_IsReady>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f1      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fc7c 	bl	8004592 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004c9a:	f7ff fc23 	bl	80044e4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fd fd09 	bl	80026b4 <HAL_GetTick>
 8004ca2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ca6:	f7fd fd05 	bl	80026b4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e1d6      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004cb8:	f7ff fc25 	bl	8004506 <LL_RCC_LSI1_IsReady>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f1      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x31a>
 8004cc2:	e051      	b.n	8004d68 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004cc4:	f7ff fbfd 	bl	80044c2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fcf4 	bl	80026b4 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004cce:	e00c      	b.n	8004cea <HAL_RCC_OscConfig+0x35e>
 8004cd0:	20000008 	.word	0x20000008
 8004cd4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004cd8:	f7fd fcec 	bl	80026b4 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1bd      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004cea:	f7ff fc0c 	bl	8004506 <LL_RCC_LSI1_IsReady>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f1      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004cf4:	f7ff fc2a 	bl	800454c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cfa:	f7fd fcdb 	bl	80026b4 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e1ac      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d0c:	f7ff fc2f 	bl	800456e <LL_RCC_LSI2_IsReady>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f1      	bne.n	8004cfa <HAL_RCC_OscConfig+0x36e>
 8004d16:	e027      	b.n	8004d68 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004d18:	f7ff fc18 	bl	800454c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fd fcca 	bl	80026b4 <HAL_GetTick>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d24:	f7fd fcc6 	bl	80026b4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e197      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d36:	f7ff fc1a 	bl	800456e <LL_RCC_LSI2_IsReady>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f1      	bne.n	8004d24 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004d40:	f7ff fbd0 	bl	80044e4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd fcb6 	bl	80026b4 <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d4c:	f7fd fcb2 	bl	80026b4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e183      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d5e:	f7ff fbd2 	bl	8004506 <LL_RCC_LSI1_IsReady>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f1      	bne.n	8004d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d05b      	beq.n	8004e2c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d74:	4ba7      	ldr	r3, [pc, #668]	; (8005014 <HAL_RCC_OscConfig+0x688>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d114      	bne.n	8004daa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d80:	f7ff fa70 	bl	8004264 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d84:	f7fd fc96 	bl	80026b4 <HAL_GetTick>
 8004d88:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8c:	f7fd fc92 	bl	80026b4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e163      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	4b9d      	ldr	r3, [pc, #628]	; (8005014 <HAL_RCC_OscConfig+0x688>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_RCC_OscConfig+0x42c>
 8004db2:	f7ff fb30 	bl	8004416 <LL_RCC_LSE_Enable>
 8004db6:	e00c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x446>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d104      	bne.n	8004dca <HAL_RCC_OscConfig+0x43e>
 8004dc0:	f7ff fb4b 	bl	800445a <LL_RCC_LSE_EnableBypass>
 8004dc4:	f7ff fb27 	bl	8004416 <LL_RCC_LSE_Enable>
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCC_OscConfig+0x446>
 8004dca:	f7ff fb35 	bl	8004438 <LL_RCC_LSE_Disable>
 8004dce:	f7ff fb55 	bl	800447c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d014      	beq.n	8004e04 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fd fc6b 	bl	80026b4 <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fd fc67 	bl	80026b4 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e136      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004df8:	f7ff fb51 	bl	800449e <LL_RCC_LSE_IsReady>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ef      	beq.n	8004de2 <HAL_RCC_OscConfig+0x456>
 8004e02:	e013      	b.n	8004e2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fd fc56 	bl	80026b4 <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0c:	f7fd fc52 	bl	80026b4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e121      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e22:	f7ff fb3c 	bl	800449e <LL_RCC_LSE_IsReady>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ef      	bne.n	8004e0c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d014      	beq.n	8004e6a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e40:	f7ff fab5 	bl	80043ae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fd fc36 	bl	80026b4 <HAL_GetTick>
 8004e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e4c:	f7fd fc32 	bl	80026b4 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e103      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e5e:	f7ff fac8 	bl	80043f2 <LL_RCC_HSI48_IsReady>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f1      	beq.n	8004e4c <HAL_RCC_OscConfig+0x4c0>
 8004e68:	e013      	b.n	8004e92 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e6a:	f7ff fab1 	bl	80043d0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fd fc21 	bl	80026b4 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e76:	f7fd fc1d 	bl	80026b4 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0ee      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e88:	f7ff fab3 	bl	80043f2 <LL_RCC_HSI48_IsReady>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f1      	bne.n	8004e76 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80e4 	beq.w	8005064 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9c:	f7ff fc11 	bl	80046c2 <LL_RCC_GetSysClkSource>
 8004ea0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	f040 80b4 	bne.w	800501c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0203 	and.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d123      	bne.n	8004f0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d11c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d114      	bne.n	8004f0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d10d      	bne.n	8004f0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d106      	bne.n	8004f0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d05d      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	d058      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e0a1      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f22:	f7ff fc84 	bl	800482e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f26:	f7fd fbc5 	bl	80026b4 <HAL_GetTick>
 8004f2a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fd fbc1 	bl	80026b4 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e092      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1ef      	bne.n	8004f2e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_RCC_OscConfig+0x68c>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f60:	4311      	orrs	r1, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f66:	0212      	lsls	r2, r2, #8
 8004f68:	4311      	orrs	r1, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f6e:	4311      	orrs	r1, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f84:	f7ff fc44 	bl	8004810 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f98:	f7fd fb8c 	bl	80026b4 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fd fb88 	bl	80026b4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e059      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ef      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fc0:	e050      	b.n	8005064 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e04f      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d147      	bne.n	8005064 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fd4:	f7ff fc1c 	bl	8004810 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fe8:	f7fd fb64 	bl	80026b4 <HAL_GetTick>
 8004fec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fd fb60 	bl	80026b4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e031      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ef      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x664>
 8005010:	e028      	b.n	8005064 <HAL_RCC_OscConfig+0x6d8>
 8005012:	bf00      	nop
 8005014:	58000400 	.word	0x58000400
 8005018:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d01e      	beq.n	8005060 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005022:	f7ff fc04 	bl	800482e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fd fb45 	bl	80026b4 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502e:	f7fd fb41 	bl	80026b4 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e012      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ef      	bne.n	800502e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_OscConfig+0x6e4>)
 800505a:	4013      	ands	r3, r2
 800505c:	60cb      	str	r3, [r1, #12]
 800505e:	e001      	b.n	8005064 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3734      	adds	r7, #52	; 0x34
 800506a:	46bd      	mov	sp, r7
 800506c:	bd90      	pop	{r4, r7, pc}
 800506e:	bf00      	nop
 8005070:	eefefffc 	.word	0xeefefffc

08005074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e12d      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	4b98      	ldr	r3, [pc, #608]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d91b      	bls.n	80050ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b95      	ldr	r3, [pc, #596]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 0207 	bic.w	r2, r3, #7
 800509e:	4993      	ldr	r1, [pc, #588]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a6:	f7fd fb05 	bl	80026b4 <HAL_GetTick>
 80050aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050ae:	f7fd fb01 	bl	80026b4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e111      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c0:	4b8a      	ldr	r3, [pc, #552]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d1ef      	bne.n	80050ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fafb 	bl	80046da <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050e4:	f7fd fae6 	bl	80026b4 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050ec:	f7fd fae2 	bl	80026b4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0f2      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80050fe:	f7ff fbe8 	bl	80048d2 <LL_RCC_IsActiveFlag_HPRE>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f1      	beq.n	80050ec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff faf2 	bl	8004702 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800511e:	f7fd fac9 	bl	80026b4 <HAL_GetTick>
 8005122:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005126:	f7fd fac5 	bl	80026b4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e0d5      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005138:	f7ff fbdd 	bl	80048f6 <LL_RCC_IsActiveFlag_C2HPRE>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f1      	beq.n	8005126 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d016      	beq.n	800517c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff faeb 	bl	800472e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005158:	f7fd faac 	bl	80026b4 <HAL_GetTick>
 800515c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005160:	f7fd faa8 	bl	80026b4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0b8      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005172:	f7ff fbd3 	bl	800491c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f1      	beq.n	8005160 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fae5 	bl	800475c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005192:	f7fd fa8f 	bl	80026b4 <HAL_GetTick>
 8005196:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800519a:	f7fd fa8b 	bl	80026b4 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e09b      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80051ac:	f7ff fbc9 	bl	8004942 <LL_RCC_IsActiveFlag_PPRE1>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f1      	beq.n	800519a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fadb 	bl	8004784 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051ce:	f7fd fa71 	bl	80026b4 <HAL_GetTick>
 80051d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051d6:	f7fd fa6d 	bl	80026b4 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e07d      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80051e8:	f7ff fbbd 	bl	8004966 <LL_RCC_IsActiveFlag_PPRE2>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f1      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d043      	beq.n	8005286 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d106      	bne.n	8005214 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005206:	f7ff f87b 	bl	8004300 <LL_RCC_HSE_IsReady>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11e      	bne.n	800524e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e067      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d106      	bne.n	800522a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800521c:	f7ff fb16 	bl	800484c <LL_RCC_PLL_IsReady>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d113      	bne.n	800524e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e05c      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005232:	f7ff f9e3 	bl	80045fc <LL_RCC_MSI_IsReady>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d108      	bne.n	800524e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e051      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005240:	f7ff f88e 	bl	8004360 <LL_RCC_HSI_IsReady>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04a      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fa21 	bl	800469a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005258:	f7fd fa2c 	bl	80026b4 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fd fa28 	bl	80026b4 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e036      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005276:	f7ff fa24 	bl	80046c2 <LL_RCC_GetSysClkSource>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	429a      	cmp	r2, r3
 8005284:	d1ec      	bne.n	8005260 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d21b      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 0207 	bic.w	r2, r3, #7
 800529c:	4913      	ldr	r1, [pc, #76]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fd fa06 	bl	80026b4 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	e008      	b.n	80052be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052ac:	f7fd fa02 	bl	80026b4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e012      	b.n	80052e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_ClockConfig+0x278>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d1ef      	bne.n	80052ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052cc:	f000 f87e 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4a07      	ldr	r2, [pc, #28]	; (80052f0 <HAL_RCC_ClockConfig+0x27c>)
 80052d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80052d6:	f7fd f9f9 	bl	80026cc <HAL_GetTickPrio>
 80052da:	4603      	mov	r3, r0
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fd f99b 	bl	8002618 <HAL_InitTick>
 80052e2:	4603      	mov	r3, r0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	58004000 	.word	0x58004000
 80052f0:	20000008 	.word	0x20000008

080052f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fa:	f7ff f9e2 	bl	80046c2 <LL_RCC_GetSysClkSource>
 80052fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005306:	f7ff f99e 	bl	8004646 <LL_RCC_MSI_GetRange>
 800530a:	4603      	mov	r3, r0
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e04b      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b04      	cmp	r3, #4
 8005320:	d102      	bne.n	8005328 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005322:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e045      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d10a      	bne.n	8005344 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800532e:	f7fe ffb7 	bl	80042a0 <LL_RCC_HSE_IsEnabledDiv2>
 8005332:	4603      	mov	r3, r0
 8005334:	2b01      	cmp	r3, #1
 8005336:	d102      	bne.n	800533e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005338:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e03a      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e037      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005344:	f7ff fab9 	bl	80048ba <LL_RCC_PLL_GetMainSource>
 8005348:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d003      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x64>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d003      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x6a>
 8005356:	e00d      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800535a:	60bb      	str	r3, [r7, #8]
        break;
 800535c:	e015      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800535e:	f7fe ff9f 	bl	80042a0 <LL_RCC_HSE_IsEnabledDiv2>
 8005362:	4603      	mov	r3, r0
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005368:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800536a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800536c:	e00d      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800536e:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005370:	60bb      	str	r3, [r7, #8]
        break;
 8005372:	e00a      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005374:	f7ff f967 	bl	8004646 <LL_RCC_MSI_GetRange>
 8005378:	4603      	mov	r3, r0
 800537a:	091b      	lsrs	r3, r3, #4
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	4a0f      	ldr	r2, [pc, #60]	; (80053c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005386:	60bb      	str	r3, [r7, #8]
        break;
 8005388:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800538a:	f7ff fa71 	bl	8004870 <LL_RCC_PLL_GetN>
 800538e:	4602      	mov	r2, r0
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	fb03 f402 	mul.w	r4, r3, r2
 8005396:	f7ff fa84 	bl	80048a2 <LL_RCC_PLL_GetDivider>
 800539a:	4603      	mov	r3, r0
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	3301      	adds	r3, #1
 80053a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80053a4:	f7ff fa71 	bl	800488a <LL_RCC_PLL_GetR>
 80053a8:	4603      	mov	r3, r0
 80053aa:	0f5b      	lsrs	r3, r3, #29
 80053ac:	3301      	adds	r3, #1
 80053ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80053b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80053b4:	68fb      	ldr	r3, [r7, #12]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd90      	pop	{r4, r7, pc}
 80053be:	bf00      	nop
 80053c0:	0800b584 	.word	0x0800b584
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	01e84800 	.word	0x01e84800

080053cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b598      	push	{r3, r4, r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80053d0:	f7ff ff90 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 80053d4:	4604      	mov	r4, r0
 80053d6:	f7ff f9e9 	bl	80047ac <LL_RCC_GetAHBPrescaler>
 80053da:	4603      	mov	r3, r0
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	4a03      	ldr	r2, [pc, #12]	; (80053f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80053e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	bd98      	pop	{r3, r4, r7, pc}
 80053f0:	0800b524 	.word	0x0800b524

080053f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f4:	b598      	push	{r3, r4, r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053f8:	f7ff ffe8 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053fc:	4604      	mov	r4, r0
 80053fe:	f7ff f9ef 	bl	80047e0 <LL_RCC_GetAPB1Prescaler>
 8005402:	4603      	mov	r3, r0
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	4a04      	ldr	r2, [pc, #16]	; (800541c <HAL_RCC_GetPCLK1Freq+0x28>)
 800540c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd98      	pop	{r3, r4, r7, pc}
 800541c:	0800b564 	.word	0x0800b564

08005420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005420:	b598      	push	{r3, r4, r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005424:	f7ff ffd2 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8005428:	4604      	mov	r4, r0
 800542a:	f7ff f9e5 	bl	80047f8 <LL_RCC_GetAPB2Prescaler>
 800542e:	4603      	mov	r3, r0
 8005430:	0adb      	lsrs	r3, r3, #11
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	4a04      	ldr	r2, [pc, #16]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd98      	pop	{r3, r4, r7, pc}
 8005448:	0800b564 	.word	0x0800b564

0800544c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2bb0      	cmp	r3, #176	; 0xb0
 8005458:	d903      	bls.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e007      	b.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	4a11      	ldr	r2, [pc, #68]	; (80054b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800546c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005470:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005472:	f7ff f9a7 	bl	80047c4 <LL_RCC_GetAHB4Prescaler>
 8005476:	4603      	mov	r3, r0
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	0c9c      	lsrs	r4, r3, #18
 8005496:	f7fe fef5 	bl	8004284 <HAL_PWREx_GetVoltageRange>
 800549a:	4603      	mov	r3, r0
 800549c:	4619      	mov	r1, r3
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f80c 	bl	80054bc <RCC_SetFlashLatency>
 80054a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}
 80054ae:	bf00      	nop
 80054b0:	0800b584 	.word	0x0800b584
 80054b4:	0800b524 	.word	0x0800b524
 80054b8:	431bde83 	.word	0x431bde83

080054bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b093      	sub	sp, #76	; 0x4c
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <RCC_SetFlashLatency+0xe8>)
 80054c8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80054cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80054d2:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <RCC_SetFlashLatency+0xec>)
 80054d4:	f107 031c 	add.w	r3, r7, #28
 80054d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80054da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80054de:	4b33      	ldr	r3, [pc, #204]	; (80055ac <RCC_SetFlashLatency+0xf0>)
 80054e0:	f107 040c 	add.w	r4, r7, #12
 80054e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80054ea:	2300      	movs	r3, #0
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f4:	d11a      	bne.n	800552c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	643b      	str	r3, [r7, #64]	; 0x40
 80054fa:	e013      	b.n	8005524 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80054fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	3348      	adds	r3, #72	; 0x48
 8005502:	443b      	add	r3, r7
 8005504:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d807      	bhi.n	800551e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800550e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	3348      	adds	r3, #72	; 0x48
 8005514:	443b      	add	r3, r7
 8005516:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800551a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800551c:	e020      	b.n	8005560 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	3301      	adds	r3, #1
 8005522:	643b      	str	r3, [r7, #64]	; 0x40
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	2b03      	cmp	r3, #3
 8005528:	d9e8      	bls.n	80054fc <RCC_SetFlashLatency+0x40>
 800552a:	e019      	b.n	8005560 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800552c:	2300      	movs	r3, #0
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005530:	e013      	b.n	800555a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	3348      	adds	r3, #72	; 0x48
 8005538:	443b      	add	r3, r7
 800553a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d807      	bhi.n	8005554 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	3348      	adds	r3, #72	; 0x48
 800554a:	443b      	add	r3, r7
 800554c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005550:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005552:	e005      	b.n	8005560 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005556:	3301      	adds	r3, #1
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555c:	2b02      	cmp	r3, #2
 800555e:	d9e8      	bls.n	8005532 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005560:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <RCC_SetFlashLatency+0xf4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 0207 	bic.w	r2, r3, #7
 8005568:	4911      	ldr	r1, [pc, #68]	; (80055b0 <RCC_SetFlashLatency+0xf4>)
 800556a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556c:	4313      	orrs	r3, r2
 800556e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005570:	f7fd f8a0 	bl	80026b4 <HAL_GetTick>
 8005574:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005576:	e008      	b.n	800558a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005578:	f7fd f89c 	bl	80026b4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e007      	b.n	800559a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <RCC_SetFlashLatency+0xf4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005594:	429a      	cmp	r2, r3
 8005596:	d1ef      	bne.n	8005578 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	374c      	adds	r7, #76	; 0x4c
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0800b380 	.word	0x0800b380
 80055a8:	0800b390 	.word	0x0800b390
 80055ac:	0800b39c 	.word	0x0800b39c
 80055b0:	58004000 	.word	0x58004000

080055b4 <LL_RCC_LSE_IsEnabled>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <LL_RCC_LSE_IsEnabled+0x18>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <LL_RCC_LSE_IsEnabled+0x1a>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <LL_RCC_LSE_IsReady>:
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d101      	bne.n	80055f0 <LL_RCC_LSE_IsReady+0x18>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <LL_RCC_LSE_IsReady+0x1a>
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_RCC_SetRFWKPClockSource>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800560c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_RCC_SetSMPSClockSource>:
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f023 0203 	bic.w	r2, r3, #3
 800563a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4313      	orrs	r3, r2
 8005642:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_RCC_SetSMPSPrescaler>:
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4313      	orrs	r3, r2
 800566a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_RCC_SetUSARTClockSource>:
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	f023 0203 	bic.w	r2, r3, #3
 800568c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <LL_RCC_SetLPUARTClockSource>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_SetI2CClockSource>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80056e8:	43db      	mvns	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80056f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <LL_RCC_SetLPTIMClockSource>:
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005716:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	041b      	lsls	r3, r3, #16
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <LL_RCC_SetSAIClockSource>:
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <LL_RCC_SetRNGClockSource>:
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800577e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_RCC_SetCLK48ClockSource>:
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_SetUSBClockSource>:
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff ffe3 	bl	8005796 <LL_RCC_SetCLK48ClockSource>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <LL_RCC_SetADCClockSource>:
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <LL_RCC_SetRTCClockSource>:
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <LL_RCC_GetRTCClockSource>:
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005840:	4618      	mov	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <LL_RCC_ForceBackupDomainReset>:
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800584e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800585a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005862:	bf00      	nop
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_RCC_ReleaseBackupDomainReset>:
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <LL_RCC_PLLSAI1_Enable>:
{
 800588e:	b480      	push	{r7}
 8005890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800589c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a0:	6013      	str	r3, [r2, #0]
}
 80058a2:	bf00      	nop
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <LL_RCC_PLLSAI1_Disable>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <LL_RCC_PLLSAI1_IsReady>:
{
 80058ca:	b480      	push	{r7}
 80058cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058dc:	d101      	bne.n	80058e2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b088      	sub	sp, #32
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80058f6:	2300      	movs	r3, #0
 80058f8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80058fa:	2300      	movs	r3, #0
 80058fc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d034      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005912:	d021      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005914:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005918:	d81b      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800591a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800591e:	d01d      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005920:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005924:	d815      	bhi.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800592a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800592e:	d110      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005940:	e00d      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f947 	bl	8005bda <RCCEx_PLLSAI1_ConfigNP>
 800594c:	4603      	mov	r3, r0
 800594e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	77fb      	strb	r3, [r7, #31]
        break;
 8005956:	e002      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005958:	bf00      	nop
 800595a:	e000      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800595c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fee8 	bl	800573e <LL_RCC_SetSAIClockSource>
 800596e:	e001      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005970:	7ffb      	ldrb	r3, [r7, #31]
 8005972:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597c:	2b00      	cmp	r3, #0
 800597e:	d046      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005980:	f7ff ff56 	bl	8005830 <LL_RCC_GetRTCClockSource>
 8005984:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	429a      	cmp	r2, r3
 800598e:	d03c      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005990:	f7fe fc68 	bl	8004264 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff ff30 	bl	8005804 <LL_RCC_SetRTCClockSource>
 80059a4:	e02e      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80059a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80059b0:	f7ff ff4b 	bl	800584a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80059b4:	f7ff ff5a 	bl	800586c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80059c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80059d0:	f7ff fdf0 	bl	80055b4 <LL_RCC_LSE_IsEnabled>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d114      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059da:	f7fc fe6b 	bl	80026b4 <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80059e0:	e00b      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fc fe67 	bl	80026b4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d902      	bls.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	77fb      	strb	r3, [r7, #31]
              break;
 80059f8:	e004      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80059fa:	f7ff fded 	bl	80055d8 <LL_RCC_LSE_IsReady>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d1ee      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005a04:	7ffb      	ldrb	r3, [r7, #31]
 8005a06:	77bb      	strb	r3, [r7, #30]
 8005a08:	e001      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fe2a 	bl	8005678 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fe35 	bl	80056a4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe5d 	bl	800570a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fe52 	bl	800570a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fe2a 	bl	80056d0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fe1f 	bl	80056d0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d022      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff fe8d 	bl	80057c2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f8dd 	bl	8005c90 <RCCEx_PLLSAI1_ConfigNQ>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
 8005ae2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02b      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d008      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b02:	d003      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fe2a 	bl	800576a <LL_RCC_SetRNGClockSource>
 8005b16:	e00a      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	2000      	movs	r0, #0
 8005b24:	f7ff fe21 	bl	800576a <LL_RCC_SetRNGClockSource>
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff fe34 	bl	8005796 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005b36:	d107      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d022      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fe3d 	bl	80057d8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b66:	d107      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b76:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b80:	d10b      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f8dd 	bl	8005d46 <RCCEx_PLLSAI1_ConfigNR>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b90:	7ffb      	ldrb	r3, [r7, #31]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
 8005b98:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fd26 	bl	80055fc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fd45 	bl	8005650 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff fd2c 	bl	8005628 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005bd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005be6:	f7ff fe61 	bl	80058ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bea:	f7fc fd63 	bl	80026b4 <HAL_GetTick>
 8005bee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bf0:	e009      	b.n	8005c06 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf2:	f7fc fd5f 	bl	80026b4 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d902      	bls.n	8005c06 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e004      	b.n	8005c10 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c06:	f7ff fe60 	bl	80058ca <LL_RCC_PLLSAI1_IsReady>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f0      	bne.n	8005bf2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d137      	bne.n	8005c86 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c40:	4313      	orrs	r3, r2
 8005c42:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c44:	f7ff fe23 	bl	800588e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c48:	f7fc fd34 	bl	80026b4 <HAL_GetTick>
 8005c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c4e:	e009      	b.n	8005c64 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c50:	f7fc fd30 	bl	80026b4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d902      	bls.n	8005c64 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	73fb      	strb	r3, [r7, #15]
        break;
 8005c62:	e004      	b.n	8005c6e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c64:	f7ff fe31 	bl	80058ca <LL_RCC_PLLSAI1_IsReady>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d1f0      	bne.n	8005c50 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d108      	bne.n	8005c86 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c82:	4313      	orrs	r3, r2
 8005c84:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c9c:	f7ff fe06 	bl	80058ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ca0:	f7fc fd08 	bl	80026b4 <HAL_GetTick>
 8005ca4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ca6:	e009      	b.n	8005cbc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ca8:	f7fc fd04 	bl	80026b4 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d902      	bls.n	8005cbc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cba:	e004      	b.n	8005cc6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cbc:	f7ff fe05 	bl	80058ca <LL_RCC_PLLSAI1_IsReady>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d137      	bne.n	8005d3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005cfa:	f7ff fdc8 	bl	800588e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cfe:	f7fc fcd9 	bl	80026b4 <HAL_GetTick>
 8005d02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d04:	e009      	b.n	8005d1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d06:	f7fc fcd5 	bl	80026b4 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d902      	bls.n	8005d1a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	73fb      	strb	r3, [r7, #15]
        break;
 8005d18:	e004      	b.n	8005d24 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d1a:	f7ff fdd6 	bl	80058ca <LL_RCC_PLLSAI1_IsReady>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d1f0      	bne.n	8005d06 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d108      	bne.n	8005d3c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d52:	f7ff fdab 	bl	80058ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d56:	f7fc fcad 	bl	80026b4 <HAL_GetTick>
 8005d5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d5c:	e009      	b.n	8005d72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d5e:	f7fc fca9 	bl	80026b4 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d902      	bls.n	8005d72 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e004      	b.n	8005d7c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d72:	f7ff fdaa 	bl	80058ca <LL_RCC_PLLSAI1_IsReady>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f0      	bne.n	8005d5e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d137      	bne.n	8005df2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dac:	4313      	orrs	r3, r2
 8005dae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005db0:	f7ff fd6d 	bl	800588e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db4:	f7fc fc7e 	bl	80026b4 <HAL_GetTick>
 8005db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dba:	e009      	b.n	8005dd0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dbc:	f7fc fc7a 	bl	80026b4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d902      	bls.n	8005dd0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8005dce:	e004      	b.n	8005dda <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dd0:	f7ff fd7b 	bl	80058ca <LL_RCC_PLLSAI1_IsReady>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d1f0      	bne.n	8005dbc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d108      	bne.n	8005df2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dee:	4313      	orrs	r3, r2
 8005df0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e09f      	b.n	8005f4e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fc f9d8 	bl	80021d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005e30:	4b49      	ldr	r3, [pc, #292]	; (8005f58 <HAL_RTC_Init+0x15c>)
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d07e      	beq.n	8005f3a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	22ca      	movs	r2, #202	; 0xca
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2253      	movs	r2, #83	; 0x53
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8ab 	bl	8005fa8 <RTC_EnterInitMode>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	22ff      	movs	r2, #255	; 0xff
 8005e5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2204      	movs	r2, #4
 8005e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e067      	b.n	8005f3e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e80:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6899      	ldr	r1, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68d2      	ldr	r2, [r2, #12]
 8005ea8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6919      	ldr	r1, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	041a      	lsls	r2, r3, #16
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ecc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0203 	bic.w	r2, r2, #3
 8005edc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d113      	bne.n	8005f2c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f829 	bl	8005f5c <HAL_RTC_WaitForSynchro>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e010      	b.n	8005f4e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	22ff      	movs	r2, #255	; 0xff
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e001      	b.n	8005f3e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40002800 	.word	0x40002800

08005f5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f74:	f7fc fb9e 	bl	80026b4 <HAL_GetTick>
 8005f78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f7a:	e009      	b.n	8005f90 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f7c:	f7fc fb9a 	bl	80026b4 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8a:	d901      	bls.n	8005f90 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e007      	b.n	8005fa0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0ee      	beq.n	8005f7c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d119      	bne.n	8005ff2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005fc8:	f7fc fb74 	bl	80026b4 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fce:	e009      	b.n	8005fe4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fd0:	f7fc fb70 	bl	80026b4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fde:	d901      	bls.n	8005fe4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e007      	b.n	8005ff4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ee      	beq.n	8005fd0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006012:	2302      	movs	r3, #2
 8006014:	e0a8      	b.n	8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	22ca      	movs	r2, #202	; 0xca
 800602c:	625a      	str	r2, [r3, #36]	; 0x24
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2253      	movs	r2, #83	; 0x53
 8006034:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006044:	f7fc fb36 	bl	80026b4 <HAL_GetTick>
 8006048:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800604a:	e015      	b.n	8006078 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800604c:	f7fc fb32 	bl	80026b4 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605a:	d90d      	bls.n	8006078 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	22ff      	movs	r2, #255	; 0xff
 8006062:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2203      	movs	r2, #3
 8006068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e077      	b.n	8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e2      	bne.n	800604c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006094:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80060a8:	f7fc fb04 	bl	80026b4 <HAL_GetTick>
 80060ac:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80060ae:	e015      	b.n	80060dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060b0:	f7fc fb00 	bl	80026b4 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060be:	d90d      	bls.n	80060dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2203      	movs	r2, #3
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e045      	b.n	8006168 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0e2      	beq.n	80060b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0207 	bic.w	r2, r2, #7
 8006100:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6899      	ldr	r1, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	430a      	orrs	r2, r1
 8006110:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006118:	4a15      	ldr	r2, [pc, #84]	; (8006170 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800611a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800611e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a12      	ldr	r2, [pc, #72]	; (8006170 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800612c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800613c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800614c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	22ff      	movs	r2, #255	; 0xff
 8006154:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	58000800 	.word	0x58000800

08006174 <LL_RCC_GetUSARTClockSource>:
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006180:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4013      	ands	r3, r2
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <LL_RCC_GetLPUARTClockSource>:
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4013      	ands	r3, r2
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e042      	b.n	800624c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fc f831 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2224      	movs	r2, #36	; 0x24
 80061e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8ba 	bl	8006370 <UART_SetConfig>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e022      	b.n	800624c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fad6 	bl	80067c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb5d 	bl	8006904 <UART_CheckIdleState>
 800624a:	4603      	mov	r3, r0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	2b20      	cmp	r3, #32
 800626c:	d17b      	bne.n	8006366 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_UART_Transmit+0x26>
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e074      	b.n	8006368 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2221      	movs	r2, #33	; 0x21
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800628e:	f7fc fa11 	bl	80026b4 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	88fa      	ldrh	r2, [r7, #6]
 80062a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ac:	d108      	bne.n	80062c0 <HAL_UART_Transmit+0x6c>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	e003      	b.n	80062c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c8:	e030      	b.n	800632c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 fbbf 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e03d      	b.n	8006368 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10b      	bne.n	800630a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006300:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	3302      	adds	r3, #2
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e007      	b.n	800631a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3301      	adds	r3, #1
 8006318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1c8      	bne.n	80062ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fb88 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e006      	b.n	8006368 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	4618      	mov	r0, r3
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006374:	b08c      	sub	sp, #48	; 0x30
 8006376:	af00      	add	r7, sp, #0
 8006378:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	431a      	orrs	r2, r3
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	431a      	orrs	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	4313      	orrs	r3, r2
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4baf      	ldr	r3, [pc, #700]	; (800665c <UART_SetConfig+0x2ec>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4aa4      	ldr	r2, [pc, #656]	; (8006660 <UART_SetConfig+0x2f0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d8:	4313      	orrs	r3, r2
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80063e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	f023 010f 	bic.w	r1, r3, #15
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a95      	ldr	r2, [pc, #596]	; (8006664 <UART_SetConfig+0x2f4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d125      	bne.n	8006460 <UART_SetConfig+0xf0>
 8006414:	2003      	movs	r0, #3
 8006416:	f7ff fead 	bl	8006174 <LL_RCC_GetUSARTClockSource>
 800641a:	4603      	mov	r3, r0
 800641c:	2b03      	cmp	r3, #3
 800641e:	d81b      	bhi.n	8006458 <UART_SetConfig+0xe8>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0xb8>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	08006439 	.word	0x08006439
 800642c:	08006449 	.word	0x08006449
 8006430:	08006441 	.word	0x08006441
 8006434:	08006451 	.word	0x08006451
 8006438:	2301      	movs	r3, #1
 800643a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643e:	e042      	b.n	80064c6 <UART_SetConfig+0x156>
 8006440:	2302      	movs	r3, #2
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006446:	e03e      	b.n	80064c6 <UART_SetConfig+0x156>
 8006448:	2304      	movs	r3, #4
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644e:	e03a      	b.n	80064c6 <UART_SetConfig+0x156>
 8006450:	2308      	movs	r3, #8
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006456:	e036      	b.n	80064c6 <UART_SetConfig+0x156>
 8006458:	2310      	movs	r3, #16
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645e:	e032      	b.n	80064c6 <UART_SetConfig+0x156>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a7e      	ldr	r2, [pc, #504]	; (8006660 <UART_SetConfig+0x2f0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d12a      	bne.n	80064c0 <UART_SetConfig+0x150>
 800646a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800646e:	f7ff fe91 	bl	8006194 <LL_RCC_GetLPUARTClockSource>
 8006472:	4603      	mov	r3, r0
 8006474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006478:	d01a      	beq.n	80064b0 <UART_SetConfig+0x140>
 800647a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800647e:	d81b      	bhi.n	80064b8 <UART_SetConfig+0x148>
 8006480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006484:	d00c      	beq.n	80064a0 <UART_SetConfig+0x130>
 8006486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648a:	d815      	bhi.n	80064b8 <UART_SetConfig+0x148>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <UART_SetConfig+0x128>
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006494:	d008      	beq.n	80064a8 <UART_SetConfig+0x138>
 8006496:	e00f      	b.n	80064b8 <UART_SetConfig+0x148>
 8006498:	2300      	movs	r3, #0
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649e:	e012      	b.n	80064c6 <UART_SetConfig+0x156>
 80064a0:	2302      	movs	r3, #2
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a6:	e00e      	b.n	80064c6 <UART_SetConfig+0x156>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ae:	e00a      	b.n	80064c6 <UART_SetConfig+0x156>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b6:	e006      	b.n	80064c6 <UART_SetConfig+0x156>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064be:	e002      	b.n	80064c6 <UART_SetConfig+0x156>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a65      	ldr	r2, [pc, #404]	; (8006660 <UART_SetConfig+0x2f0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	f040 8097 	bne.w	8006600 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d823      	bhi.n	8006522 <UART_SetConfig+0x1b2>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0x170>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006505 	.word	0x08006505
 80064e4:	08006523 	.word	0x08006523
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006523 	.word	0x08006523
 80064f0:	08006513 	.word	0x08006513
 80064f4:	08006523 	.word	0x08006523
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006523 	.word	0x08006523
 8006500:	0800651b 	.word	0x0800651b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fe ff76 	bl	80053f4 <HAL_RCC_GetPCLK1Freq>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800650a:	e010      	b.n	800652e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800650c:	4b56      	ldr	r3, [pc, #344]	; (8006668 <UART_SetConfig+0x2f8>)
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006510:	e00d      	b.n	800652e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006512:	f7fe feef 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 8006516:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006518:	e009      	b.n	800652e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006520:	e005      	b.n	800652e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800652c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 812b 	beq.w	800678c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	4a4c      	ldr	r2, [pc, #304]	; (800666c <UART_SetConfig+0x2fc>)
 800653c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006540:	461a      	mov	r2, r3
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	fbb3 f3f2 	udiv	r3, r3, r2
 8006548:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	429a      	cmp	r2, r3
 8006558:	d305      	bcc.n	8006566 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800656c:	e10e      	b.n	800678c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	2200      	movs	r2, #0
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	60fa      	str	r2, [r7, #12]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	4a3c      	ldr	r2, [pc, #240]	; (800666c <UART_SetConfig+0x2fc>)
 800657c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006580:	b29b      	uxth	r3, r3
 8006582:	2200      	movs	r2, #0
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800658c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006590:	f7f9 fe4e 	bl	8000230 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	020b      	lsls	r3, r1, #8
 80065a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065aa:	0202      	lsls	r2, r0, #8
 80065ac:	6979      	ldr	r1, [r7, #20]
 80065ae:	6849      	ldr	r1, [r1, #4]
 80065b0:	0849      	lsrs	r1, r1, #1
 80065b2:	2000      	movs	r0, #0
 80065b4:	460c      	mov	r4, r1
 80065b6:	4605      	mov	r5, r0
 80065b8:	eb12 0804 	adds.w	r8, r2, r4
 80065bc:	eb43 0905 	adc.w	r9, r3, r5
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	469a      	mov	sl, r3
 80065c8:	4693      	mov	fp, r2
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7f9 fe2d 	bl	8000230 <__aeabi_uldivmod>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4613      	mov	r3, r2
 80065dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e4:	d308      	bcc.n	80065f8 <UART_SetConfig+0x288>
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ec:	d204      	bcs.n	80065f8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e0c9      	b.n	800678c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065fe:	e0c5      	b.n	800678c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006608:	d16d      	bne.n	80066e6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800660a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800660e:	3b01      	subs	r3, #1
 8006610:	2b07      	cmp	r3, #7
 8006612:	d82d      	bhi.n	8006670 <UART_SetConfig+0x300>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x2ac>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	0800663d 	.word	0x0800663d
 8006620:	08006645 	.word	0x08006645
 8006624:	08006671 	.word	0x08006671
 8006628:	0800664b 	.word	0x0800664b
 800662c:	08006671 	.word	0x08006671
 8006630:	08006671 	.word	0x08006671
 8006634:	08006671 	.word	0x08006671
 8006638:	08006653 	.word	0x08006653
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fe fef0 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 8006640:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006642:	e01b      	b.n	800667c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006644:	4b08      	ldr	r3, [pc, #32]	; (8006668 <UART_SetConfig+0x2f8>)
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006648:	e018      	b.n	800667c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664a:	f7fe fe53 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 800664e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006650:	e014      	b.n	800667c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006658:	e010      	b.n	800667c <UART_SetConfig+0x30c>
 800665a:	bf00      	nop
 800665c:	cfff69f3 	.word	0xcfff69f3
 8006660:	40008000 	.word	0x40008000
 8006664:	40013800 	.word	0x40013800
 8006668:	00f42400 	.word	0x00f42400
 800666c:	0800b5c4 	.word	0x0800b5c4
      default:
        pclk = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800667a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8084 	beq.w	800678c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	4a4b      	ldr	r2, [pc, #300]	; (80067b8 <UART_SetConfig+0x448>)
 800668a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800668e:	461a      	mov	r2, r3
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	fbb3 f3f2 	udiv	r3, r3, r2
 8006696:	005a      	lsls	r2, r3, #1
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	441a      	add	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	2b0f      	cmp	r3, #15
 80066ae:	d916      	bls.n	80066de <UART_SetConfig+0x36e>
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b6:	d212      	bcs.n	80066de <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f023 030f 	bic.w	r3, r3, #15
 80066c0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	085b      	lsrs	r3, r3, #1
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	8bfb      	ldrh	r3, [r7, #30]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	8bfa      	ldrh	r2, [r7, #30]
 80066da:	60da      	str	r2, [r3, #12]
 80066dc:	e056      	b.n	800678c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066e4:	e052      	b.n	800678c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066ea:	3b01      	subs	r3, #1
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	d822      	bhi.n	8006736 <UART_SetConfig+0x3c6>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0x388>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	08006719 	.word	0x08006719
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006737 	.word	0x08006737
 8006704:	08006727 	.word	0x08006727
 8006708:	08006737 	.word	0x08006737
 800670c:	08006737 	.word	0x08006737
 8006710:	08006737 	.word	0x08006737
 8006714:	0800672f 	.word	0x0800672f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006718:	f7fe fe82 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 800671c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800671e:	e010      	b.n	8006742 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006720:	4b26      	ldr	r3, [pc, #152]	; (80067bc <UART_SetConfig+0x44c>)
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006724:	e00d      	b.n	8006742 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006726:	f7fe fde5 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006734:	e005      	b.n	8006742 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006740:	bf00      	nop
    }

    if (pclk != 0U)
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d021      	beq.n	800678c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	4a1a      	ldr	r2, [pc, #104]	; (80067b8 <UART_SetConfig+0x448>)
 800674e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006752:	461a      	mov	r2, r3
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	fbb3 f2f2 	udiv	r2, r3, r2
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	441a      	add	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	fbb2 f3f3 	udiv	r3, r2, r3
 800676a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	2b0f      	cmp	r3, #15
 8006770:	d909      	bls.n	8006786 <UART_SetConfig+0x416>
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d205      	bcs.n	8006786 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	b29a      	uxth	r2, r3
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	e002      	b.n	800678c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2201      	movs	r2, #1
 8006790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2201      	movs	r2, #1
 8006798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2200      	movs	r2, #0
 80067a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3730      	adds	r7, #48	; 0x30
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b6:	bf00      	nop
 80067b8:	0800b5c4 	.word	0x0800b5c4
 80067bc:	00f42400 	.word	0x00f42400

080067c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01a      	beq.n	80068d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068be:	d10a      	bne.n	80068d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b098      	sub	sp, #96	; 0x60
 8006908:	af02      	add	r7, sp, #8
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006914:	f7fb fece 	bl	80026b4 <HAL_GetTick>
 8006918:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d12f      	bne.n	8006988 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f88e 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d022      	beq.n	8006988 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006956:	653b      	str	r3, [r7, #80]	; 0x50
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006960:	647b      	str	r3, [r7, #68]	; 0x44
 8006962:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800696e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e063      	b.n	8006a50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b04      	cmp	r3, #4
 8006994:	d149      	bne.n	8006a2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699e:	2200      	movs	r2, #0
 80069a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f857 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d03c      	beq.n	8006a2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	623b      	str	r3, [r7, #32]
   return(result);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30
 80069d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e6      	bne.n	80069b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a02:	61fa      	str	r2, [r7, #28]
 8006a04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	69b9      	ldr	r1, [r7, #24]
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e5      	bne.n	80069e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e012      	b.n	8006a50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3758      	adds	r7, #88	; 0x58
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	e049      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d045      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fb fe1f 	bl	80026b4 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e048      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d031      	beq.n	8006afe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d110      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2208      	movs	r2, #8
 8006aae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f838 	bl	8006b26 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2208      	movs	r2, #8
 8006aba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e029      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad8:	d111      	bne.n	8006afe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f81e 	bl	8006b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e00f      	b.n	8006b1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4013      	ands	r3, r2
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2301      	moveq	r3, #1
 8006b10:	2300      	movne	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d0a6      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b095      	sub	sp, #84	; 0x54
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e6      	bne.n	8006b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	e853 3f00 	ldrex	r3, [r3]
 8006b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b76:	f023 0301 	bic.w	r3, r3, #1
 8006b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3308      	adds	r3, #8
 8006b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e3      	bne.n	8006b60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d118      	bne.n	8006bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f023 0310 	bic.w	r3, r3, #16
 8006bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	613b      	str	r3, [r7, #16]
   return(result);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006be6:	bf00      	nop
 8006be8:	3754      	adds	r7, #84	; 0x54
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e027      	b.n	8006c58 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2224      	movs	r2, #36	; 0x24
 8006c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e02d      	b.n	8006cd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2224      	movs	r2, #36	; 0x24
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f84f 	bl	8006d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e02d      	b.n	8006d54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2224      	movs	r2, #36	; 0x24
 8006d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f811 	bl	8006d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d108      	bne.n	8006d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d7c:	e031      	b.n	8006de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d7e:	2308      	movs	r3, #8
 8006d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d82:	2308      	movs	r3, #8
 8006d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	0e5b      	lsrs	r3, r3, #25
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	0f5b      	lsrs	r3, r3, #29
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	7b3a      	ldrb	r2, [r7, #12]
 8006daa:	4911      	ldr	r1, [pc, #68]	; (8006df0 <UARTEx_SetNbDataToProcess+0x94>)
 8006dac:	5c8a      	ldrb	r2, [r1, r2]
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006db2:	7b3a      	ldrb	r2, [r7, #12]
 8006db4:	490f      	ldr	r1, [pc, #60]	; (8006df4 <UARTEx_SetNbDataToProcess+0x98>)
 8006db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	7b7a      	ldrb	r2, [r7, #13]
 8006dc8:	4909      	ldr	r1, [pc, #36]	; (8006df0 <UARTEx_SetNbDataToProcess+0x94>)
 8006dca:	5c8a      	ldrb	r2, [r1, r2]
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dd0:	7b7a      	ldrb	r2, [r7, #13]
 8006dd2:	4908      	ldr	r1, [pc, #32]	; (8006df4 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	0800b5dc 	.word	0x0800b5dc
 8006df4:	0800b5e4 	.word	0x0800b5e4

08006df8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e02:	f107 0308 	add.w	r3, r7, #8
 8006e06:	2218      	movs	r2, #24
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 f8d8 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e10:	233f      	movs	r3, #63	; 0x3f
 8006e12:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006e14:	2381      	movs	r3, #129	; 0x81
 8006e16:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e20:	f107 0308 	add.w	r3, r7, #8
 8006e24:	2100      	movs	r1, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 fb54 	bl	80084d4 <hci_send_req>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da01      	bge.n	8006e36 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006e32:	23ff      	movs	r3, #255	; 0xff
 8006e34:	e000      	b.n	8006e38 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006e36:	79fb      	ldrb	r3, [r7, #7]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b0ce      	sub	sp, #312	; 0x138
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4605      	mov	r5, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e52:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e56:	462a      	mov	r2, r5
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006e62:	4622      	mov	r2, r4
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e6a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006e6e:	4602      	mov	r2, r0
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e76:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006e7a:	460a      	mov	r2, r1
 8006e7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006e7e:	f107 0310 	add.w	r3, r7, #16
 8006e82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006e86:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	f107 0210 	add.w	r2, r7, #16
 8006e90:	4413      	add	r3, r2
 8006e92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006e96:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006e9a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3309      	adds	r3, #9
 8006ea2:	f107 0210 	add.w	r2, r7, #16
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006eac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006eb0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ec2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ec6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006edc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ee0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006ee4:	8812      	ldrh	r2, [r2, #0]
 8006ee6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eee:	3302      	adds	r3, #2
 8006ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006ef4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ef8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006efc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006f00:	8812      	ldrh	r2, [r2, #0]
 8006f02:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006f10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f14:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f18:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006f20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f24:	3301      	adds	r3, #1
 8006f26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006f2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f2e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006f32:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f38:	3301      	adds	r3, #1
 8006f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f42:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f46:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f56:	3308      	adds	r3, #8
 8006f58:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f5c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 f81d 	bl	8007fa0 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006f66:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006f6a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f6e:	4413      	add	r3, r2
 8006f70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006f74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f78:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006f7c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f82:	3301      	adds	r3, #1
 8006f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006f92:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 f802 	bl	8007fa0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006f9c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006fa0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fae:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006fb2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fb8:	3302      	adds	r3, #2
 8006fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006fc6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fcc:	3302      	adds	r3, #2
 8006fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fd6:	2218      	movs	r2, #24
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fff0 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fe0:	233f      	movs	r3, #63	; 0x3f
 8006fe2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006fe6:	2383      	movs	r3, #131	; 0x83
 8006fe8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006fec:	f107 0310 	add.w	r3, r7, #16
 8006ff0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ffc:	f107 030f 	add.w	r3, r7, #15
 8007000:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007004:	2301      	movs	r3, #1
 8007006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800700a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800700e:	2100      	movs	r1, #0
 8007010:	4618      	mov	r0, r3
 8007012:	f001 fa5f 	bl	80084d4 <hci_send_req>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	da01      	bge.n	8007020 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800701c:	23ff      	movs	r3, #255	; 0xff
 800701e:	e004      	b.n	800702a <aci_gap_set_discoverable+0x1ea>
  return status;
 8007020:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007024:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007028:	781b      	ldrb	r3, [r3, #0]
}
 800702a:	4618      	mov	r0, r3
 800702c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007030:	46bd      	mov	sp, r7
 8007032:	bdb0      	pop	{r4, r5, r7, pc}

08007034 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b0cc      	sub	sp, #304	; 0x130
 8007038:	af00      	add	r7, sp, #0
 800703a:	4602      	mov	r2, r0
 800703c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007040:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007044:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007046:	f107 0310 	add.w	r3, r7, #16
 800704a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007068:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007074:	3301      	adds	r3, #1
 8007076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800707a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800707e:	2218      	movs	r2, #24
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f000 ff9c 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007088:	233f      	movs	r3, #63	; 0x3f
 800708a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800708e:	2385      	movs	r3, #133	; 0x85
 8007090:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007094:	f107 0310 	add.w	r3, r7, #16
 8007098:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800709c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80070a4:	f107 030f 	add.w	r3, r7, #15
 80070a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070b6:	2100      	movs	r1, #0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 fa0b 	bl	80084d4 <hci_send_req>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da01      	bge.n	80070c8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80070c4:	23ff      	movs	r3, #255	; 0xff
 80070c6:	e004      	b.n	80070d2 <aci_gap_set_io_capability+0x9e>
  return status;
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070d0:	781b      	ldrb	r3, [r3, #0]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80070dc:	b5b0      	push	{r4, r5, r7, lr}
 80070de:	b0cc      	sub	sp, #304	; 0x130
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4605      	mov	r5, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80070f2:	462a      	mov	r2, r5
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80070fe:	4622      	mov	r2, r4
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800710a:	4602      	mov	r2, r0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007116:	460a      	mov	r2, r1
 8007118:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800711a:	f107 0310 	add.w	r3, r7, #16
 800711e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800712a:	2200      	movs	r2, #0
 800712c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007138:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800713c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007148:	3301      	adds	r3, #1
 800714a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800714e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007152:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007156:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800715e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007162:	3301      	adds	r3, #1
 8007164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007170:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800717c:	3301      	adds	r3, #1
 800717e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007186:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800718a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007196:	3301      	adds	r3, #1
 8007198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80071a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80071a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071aa:	3301      	adds	r3, #1
 80071ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80071b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80071b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80071ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071be:	3301      	adds	r3, #1
 80071c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80071c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80071cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80071ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071d2:	3301      	adds	r3, #1
 80071d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80071e0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80071e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071e8:	3304      	adds	r3, #4
 80071ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80071ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80071f6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80071f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071fc:	3301      	adds	r3, #1
 80071fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007206:	2218      	movs	r2, #24
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fed8 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007210:	233f      	movs	r3, #63	; 0x3f
 8007212:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007216:	2386      	movs	r3, #134	; 0x86
 8007218:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007228:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800722c:	f107 030f 	add.w	r3, r7, #15
 8007230:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800723a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f001 f947 	bl	80084d4 <hci_send_req>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	da01      	bge.n	8007250 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800724c:	23ff      	movs	r3, #255	; 0xff
 800724e:	e004      	b.n	800725a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007258:	781b      	ldrb	r3, [r3, #0]
}
 800725a:	4618      	mov	r0, r3
 800725c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007260:	46bd      	mov	sp, r7
 8007262:	bdb0      	pop	{r4, r5, r7, pc}

08007264 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b0cc      	sub	sp, #304	; 0x130
 8007268:	af00      	add	r7, sp, #0
 800726a:	4602      	mov	r2, r0
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	6019      	str	r1, [r3, #0]
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800727e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007280:	f107 0310 	add.w	r3, r7, #16
 8007284:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800729a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80072a6:	8812      	ldrh	r2, [r2, #0]
 80072a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80072aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ae:	3302      	adds	r3, #2
 80072b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072bc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80072c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ca:	3304      	adds	r3, #4
 80072cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072d4:	2218      	movs	r2, #24
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fe71 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80072de:	233f      	movs	r3, #63	; 0x3f
 80072e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80072e4:	2388      	movs	r3, #136	; 0x88
 80072e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80072fa:	f107 030f 	add.w	r3, r7, #15
 80072fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007302:	2301      	movs	r3, #1
 8007304:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800730c:	2100      	movs	r1, #0
 800730e:	4618      	mov	r0, r3
 8007310:	f001 f8e0 	bl	80084d4 <hci_send_req>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	da01      	bge.n	800731e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800731a:	23ff      	movs	r3, #255	; 0xff
 800731c:	e004      	b.n	8007328 <aci_gap_pass_key_resp+0xc4>
  return status;
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007326:	781b      	ldrb	r3, [r3, #0]
}
 8007328:	4618      	mov	r0, r3
 800732a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007332:	b590      	push	{r4, r7, lr}
 8007334:	b0cd      	sub	sp, #308	; 0x134
 8007336:	af00      	add	r7, sp, #0
 8007338:	4604      	mov	r4, r0
 800733a:	4608      	mov	r0, r1
 800733c:	4611      	mov	r1, r2
 800733e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007342:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007350:	4622      	mov	r2, r4
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800735c:	4602      	mov	r2, r0
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007368:	460a      	mov	r2, r1
 800736a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800736c:	f107 0310 	add.w	r3, r7, #16
 8007370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007374:	f107 0308 	add.w	r3, r7, #8
 8007378:	2207      	movs	r2, #7
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fe1f 	bl	8007fc0 <Osal_MemSet>
  int index_input = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007390:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007394:	7812      	ldrb	r2, [r2, #0]
 8007396:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739c:	3301      	adds	r3, #1
 800739e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80073ae:	7812      	ldrb	r2, [r2, #0]
 80073b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80073b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b6:	3301      	adds	r3, #1
 80073b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073c4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80073c8:	7812      	ldrb	r2, [r2, #0]
 80073ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80073cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d0:	3301      	adds	r3, #1
 80073d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073da:	2218      	movs	r2, #24
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fdee 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073e4:	233f      	movs	r3, #63	; 0x3f
 80073e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80073ea:	238a      	movs	r3, #138	; 0x8a
 80073ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007408:	2307      	movs	r3, #7
 800740a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800740e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 f85d 	bl	80084d4 <hci_send_req>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	da01      	bge.n	8007424 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007420:	23ff      	movs	r3, #255	; 0xff
 8007422:	e02e      	b.n	8007482 <aci_gap_init+0x150>
  if ( resp.Status )
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <aci_gap_init+0x10c>
    return resp.Status;
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	e021      	b.n	8007482 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007446:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800744a:	b29a      	uxth	r2, r3
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007460:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007464:	b29a      	uxth	r2, r3
 8007466:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800746a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800746c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007470:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007474:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007478:	b29a      	uxth	r2, r3
 800747a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800747e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007488:	46bd      	mov	sp, r7
 800748a:	bd90      	pop	{r4, r7, pc}

0800748c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b0cc      	sub	sp, #304	; 0x130
 8007490:	af00      	add	r7, sp, #0
 8007492:	4602      	mov	r2, r0
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749c:	6019      	str	r1, [r3, #0]
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80074a8:	f107 0310 	add.w	r3, r7, #16
 80074ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074bc:	2300      	movs	r3, #0
 80074be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80074c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074ca:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80074dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e0:	1c58      	adds	r0, r3, #1
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f4:	6819      	ldr	r1, [r3, #0]
 80074f6:	f000 fd53 	bl	8007fa0 <Osal_MemCpy>
  index_input += AdvDataLen;
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007508:	4413      	add	r3, r2
 800750a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800750e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007512:	2218      	movs	r2, #24
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fd52 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800751c:	233f      	movs	r3, #63	; 0x3f
 800751e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007522:	238e      	movs	r3, #142	; 0x8e
 8007524:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007528:	f107 0310 	add.w	r3, r7, #16
 800752c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007538:	f107 030f 	add.w	r3, r7, #15
 800753c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007540:	2301      	movs	r3, #1
 8007542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f000 ffc1 	bl	80084d4 <hci_send_req>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	da01      	bge.n	800755c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007558:	23ff      	movs	r3, #255	; 0xff
 800755a:	e004      	b.n	8007566 <aci_gap_update_adv_data+0xda>
  return status;
 800755c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007560:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007564:	781b      	ldrb	r3, [r3, #0]
}
 8007566:	4618      	mov	r0, r3
 8007568:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800757a:	f107 0308 	add.w	r3, r7, #8
 800757e:	2218      	movs	r2, #24
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fd1c 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007588:	233f      	movs	r3, #63	; 0x3f
 800758a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800758c:	2392      	movs	r3, #146	; 0x92
 800758e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007590:	1dfb      	adds	r3, r7, #7
 8007592:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007594:	2301      	movs	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007598:	f107 0308 	add.w	r3, r7, #8
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 ff98 	bl	80084d4 <hci_send_req>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da01      	bge.n	80075ae <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80075aa:	23ff      	movs	r3, #255	; 0xff
 80075ac:	e000      	b.n	80075b0 <aci_gap_configure_whitelist+0x40>
  return status;
 80075ae:	79fb      	ldrb	r3, [r7, #7]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3720      	adds	r7, #32
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b0cc      	sub	sp, #304	; 0x130
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4602      	mov	r2, r0
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80075d2:	460a      	mov	r2, r1
 80075d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80075d6:	f107 0310 	add.w	r3, r7, #16
 80075da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80075f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075f8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80075fc:	8812      	ldrh	r2, [r2, #0]
 80075fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007604:	3302      	adds	r3, #2
 8007606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800760a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007612:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800761a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800761e:	3301      	adds	r3, #1
 8007620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007624:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007628:	2218      	movs	r2, #24
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fcc7 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007632:	233f      	movs	r3, #63	; 0x3f
 8007634:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007638:	23a5      	movs	r3, #165	; 0xa5
 800763a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800763e:	f107 0310 	add.w	r3, r7, #16
 8007642:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800764a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800764e:	f107 030f 	add.w	r3, r7, #15
 8007652:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007656:	2301      	movs	r3, #1
 8007658:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800765c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f000 ff36 	bl	80084d4 <hci_send_req>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	da01      	bge.n	8007672 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800766e:	23ff      	movs	r3, #255	; 0xff
 8007670:	e004      	b.n	800767c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800767a:	781b      	ldrb	r3, [r3, #0]
}
 800767c:	4618      	mov	r0, r3
 800767e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b088      	sub	sp, #32
 800768a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007690:	f107 0308 	add.w	r3, r7, #8
 8007694:	2218      	movs	r2, #24
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fc91 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 800769e:	233f      	movs	r3, #63	; 0x3f
 80076a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80076a2:	f240 1301 	movw	r3, #257	; 0x101
 80076a6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80076a8:	1dfb      	adds	r3, r7, #7
 80076aa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80076ac:	2301      	movs	r3, #1
 80076ae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076b0:	f107 0308 	add.w	r3, r7, #8
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 ff0c 	bl	80084d4 <hci_send_req>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da01      	bge.n	80076c6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80076c2:	23ff      	movs	r3, #255	; 0xff
 80076c4:	e000      	b.n	80076c8 <aci_gatt_init+0x42>
  return status;
 80076c6:	79fb      	ldrb	r3, [r7, #7]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80076d0:	b590      	push	{r4, r7, lr}
 80076d2:	b0cf      	sub	sp, #316	; 0x13c
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80076dc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80076e0:	6001      	str	r1, [r0, #0]
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076ea:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80076ee:	4622      	mov	r2, r4
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076f6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80076fa:	4602      	mov	r2, r0
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007702:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007706:	460a      	mov	r2, r1
 8007708:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007712:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007716:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d00a      	beq.n	8007736 <aci_gatt_add_service+0x66>
 8007720:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007724:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d101      	bne.n	8007732 <aci_gatt_add_service+0x62>
 800772e:	2311      	movs	r3, #17
 8007730:	e002      	b.n	8007738 <aci_gatt_add_service+0x68>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <aci_gatt_add_service+0x68>
 8007736:	2303      	movs	r3, #3
 8007738:	f107 0210 	add.w	r2, r7, #16
 800773c:	4413      	add	r3, r2
 800773e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007742:	f107 030c 	add.w	r3, r7, #12
 8007746:	2203      	movs	r2, #3
 8007748:	2100      	movs	r1, #0
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fc38 	bl	8007fc0 <Osal_MemSet>
  int index_input = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007756:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800775a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800775e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800776a:	3301      	adds	r3, #1
 800776c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007770:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007774:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d002      	beq.n	8007784 <aci_gatt_add_service+0xb4>
 800777e:	2b02      	cmp	r3, #2
 8007780:	d004      	beq.n	800778c <aci_gatt_add_service+0xbc>
 8007782:	e007      	b.n	8007794 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007784:	2302      	movs	r3, #2
 8007786:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800778a:	e005      	b.n	8007798 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800778c:	2310      	movs	r3, #16
 800778e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007792:	e001      	b.n	8007798 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007794:	2397      	movs	r3, #151	; 0x97
 8007796:	e06c      	b.n	8007872 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007798:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800779c:	1c58      	adds	r0, r3, #1
 800779e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80077a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80077aa:	6819      	ldr	r1, [r3, #0]
 80077ac:	f000 fbf8 	bl	8007fa0 <Osal_MemCpy>
    index_input += size;
 80077b0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80077b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80077b8:	4413      	add	r3, r2
 80077ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80077c6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80077ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077d2:	3301      	adds	r3, #1
 80077d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80077d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80077e0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80077e4:	7812      	ldrb	r2, [r2, #0]
 80077e6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80077e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ec:	3301      	adds	r3, #1
 80077ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077f6:	2218      	movs	r2, #24
 80077f8:	2100      	movs	r1, #0
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fbe0 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007800:	233f      	movs	r3, #63	; 0x3f
 8007802:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007806:	f44f 7381 	mov.w	r3, #258	; 0x102
 800780a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800780e:	f107 0310 	add.w	r3, r7, #16
 8007812:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800781a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007826:	2303      	movs	r3, #3
 8007828:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800782c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fe4e 	bl	80084d4 <hci_send_req>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	da01      	bge.n	8007842 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800783e:	23ff      	movs	r3, #255	; 0xff
 8007840:	e017      	b.n	8007872 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	e00a      	b.n	8007872 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800785c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007864:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007868:	b29a      	uxth	r2, r3
 800786a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800786e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007878:	46bd      	mov	sp, r7
 800787a:	bd90      	pop	{r4, r7, pc}

0800787c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800787c:	b590      	push	{r4, r7, lr}
 800787e:	b0d1      	sub	sp, #324	; 0x144
 8007880:	af00      	add	r7, sp, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800788a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800788e:	600a      	str	r2, [r1, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007896:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800789a:	4622      	mov	r2, r4
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078a2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80078a6:	4602      	mov	r2, r0
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078ae:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80078b2:	460a      	mov	r2, r1
 80078b4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80078b6:	f107 0318 	add.w	r3, r7, #24
 80078ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80078be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078c2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d00a      	beq.n	80078e2 <aci_gatt_add_char+0x66>
 80078cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078d0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d101      	bne.n	80078de <aci_gatt_add_char+0x62>
 80078da:	2313      	movs	r3, #19
 80078dc:	e002      	b.n	80078e4 <aci_gatt_add_char+0x68>
 80078de:	2303      	movs	r3, #3
 80078e0:	e000      	b.n	80078e4 <aci_gatt_add_char+0x68>
 80078e2:	2305      	movs	r3, #5
 80078e4:	f107 0218 	add.w	r2, r7, #24
 80078e8:	4413      	add	r3, r2
 80078ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80078ee:	f107 0314 	add.w	r3, r7, #20
 80078f2:	2203      	movs	r2, #3
 80078f4:	2100      	movs	r1, #0
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fb62 	bl	8007fc0 <Osal_MemSet>
  int index_input = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007902:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007906:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800790a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800790e:	8812      	ldrh	r2, [r2, #0]
 8007910:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007912:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007916:	3302      	adds	r3, #2
 8007918:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800791c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007920:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007924:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007928:	7812      	ldrb	r2, [r2, #0]
 800792a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800792c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007930:	3301      	adds	r3, #1
 8007932:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007936:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800793a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d002      	beq.n	800794a <aci_gatt_add_char+0xce>
 8007944:	2b02      	cmp	r3, #2
 8007946:	d004      	beq.n	8007952 <aci_gatt_add_char+0xd6>
 8007948:	e007      	b.n	800795a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800794a:	2302      	movs	r3, #2
 800794c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007950:	e005      	b.n	800795e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007952:	2310      	movs	r3, #16
 8007954:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007958:	e001      	b.n	800795e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800795a:	2397      	movs	r3, #151	; 0x97
 800795c:	e091      	b.n	8007a82 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800795e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007962:	1cd8      	adds	r0, r3, #3
 8007964:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007968:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800796c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007970:	6819      	ldr	r1, [r3, #0]
 8007972:	f000 fb15 	bl	8007fa0 <Osal_MemCpy>
    index_input += size;
 8007976:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800797a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800797e:	4413      	add	r3, r2
 8007980:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007984:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007988:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800798c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007990:	8812      	ldrh	r2, [r2, #0]
 8007992:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007998:	3302      	adds	r3, #2
 800799a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800799e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079a2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80079a6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80079a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079ac:	3301      	adds	r3, #1
 80079ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80079b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079b6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80079ba:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80079bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079c0:	3301      	adds	r3, #1
 80079c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80079c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079ca:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80079ce:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80079d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079d4:	3301      	adds	r3, #1
 80079d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80079da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079de:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80079e2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80079e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079e8:	3301      	adds	r3, #1
 80079ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80079ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079f2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80079f6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80079f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079fc:	3301      	adds	r3, #1
 80079fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a06:	2218      	movs	r2, #24
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fad8 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a10:	233f      	movs	r3, #63	; 0x3f
 8007a12:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007a16:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007a1a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007a1e:	f107 0318 	add.w	r3, r7, #24
 8007a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007a26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007a36:	2303      	movs	r3, #3
 8007a38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fd46 	bl	80084d4 <hci_send_req>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da01      	bge.n	8007a52 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007a4e:	23ff      	movs	r3, #255	; 0xff
 8007a50:	e017      	b.n	8007a82 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007a52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007a60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	e00a      	b.n	8007a82 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007a6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007a7e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd90      	pop	{r4, r7, pc}

08007a8c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007a8c:	b5b0      	push	{r4, r5, r7, lr}
 8007a8e:	b0cc      	sub	sp, #304	; 0x130
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4605      	mov	r5, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	4610      	mov	r0, r2
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	801a      	strh	r2, [r3, #0]
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aae:	4622      	mov	r2, r4
 8007ab0:	801a      	strh	r2, [r3, #0]
 8007ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007aba:	4602      	mov	r2, r0
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007aca:	f107 0310 	add.w	r3, r7, #16
 8007ace:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007aec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007af0:	8812      	ldrh	r2, [r2, #0]
 8007af2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007af8:	3302      	adds	r3, #2
 8007afa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007b0a:	8812      	ldrh	r2, [r2, #0]
 8007b0c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b12:	3302      	adds	r3, #2
 8007b14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b20:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b3a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	1d98      	adds	r0, r3, #6
 8007b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b56:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007b62:	f000 fa1d 	bl	8007fa0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b74:	4413      	add	r3, r2
 8007b76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b7e:	2218      	movs	r2, #24
 8007b80:	2100      	movs	r1, #0
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fa1c 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b88:	233f      	movs	r3, #63	; 0x3f
 8007b8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007b8e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007b92:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b96:	f107 0310 	add.w	r3, r7, #16
 8007b9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ba2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ba6:	f107 030f 	add.w	r3, r7, #15
 8007baa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fc8a 	bl	80084d4 <hci_send_req>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da01      	bge.n	8007bca <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007bc6:	23ff      	movs	r3, #255	; 0xff
 8007bc8:	e004      	b.n	8007bd4 <aci_gatt_update_char_value+0x148>
  return status;
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bd2:	781b      	ldrb	r3, [r3, #0]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bdb0      	pop	{r4, r5, r7, pc}

08007bde <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b0cc      	sub	sp, #304	; 0x130
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c02:	460a      	mov	r2, r1
 8007c04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007c06:	f107 0310 	add.w	r3, r7, #16
 8007c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c16:	2200      	movs	r2, #0
 8007c18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c34:	3301      	adds	r3, #1
 8007c36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	1c98      	adds	r0, r3, #2
 8007c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	f000 f997 	bl	8007fa0 <Osal_MemCpy>
  index_input += Length;
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c80:	4413      	add	r3, r2
 8007c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c8a:	2218      	movs	r2, #24
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f996 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c94:	233f      	movs	r3, #63	; 0x3f
 8007c96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ca0:	f107 0310 	add.w	r3, r7, #16
 8007ca4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cb0:	f107 030f 	add.w	r3, r7, #15
 8007cb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fc05 	bl	80084d4 <hci_send_req>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da01      	bge.n	8007cd4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007cd0:	23ff      	movs	r3, #255	; 0xff
 8007cd2:	e004      	b.n	8007cde <aci_hal_write_config_data+0x100>
  return status;
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007cdc:	781b      	ldrb	r3, [r3, #0]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b0cc      	sub	sp, #304	; 0x130
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4602      	mov	r2, r0
 8007cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d02:	460a      	mov	r2, r1
 8007d04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007d06:	f107 0310 	add.w	r3, r7, #16
 8007d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d58:	2218      	movs	r2, #24
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 f92f 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d62:	233f      	movs	r3, #63	; 0x3f
 8007d64:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007d68:	230f      	movs	r3, #15
 8007d6a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d6e:	f107 0310 	add.w	r3, r7, #16
 8007d72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d7e:	f107 030f 	add.w	r3, r7, #15
 8007d82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fb9e 	bl	80084d4 <hci_send_req>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da01      	bge.n	8007da2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007d9e:	23ff      	movs	r3, #255	; 0xff
 8007da0:	e004      	b.n	8007dac <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007daa:	781b      	ldrb	r3, [r3, #0]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b0cc      	sub	sp, #304	; 0x130
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007dc6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007dc8:	f107 0310 	add.w	r3, r7, #16
 8007dcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007df6:	3302      	adds	r3, #2
 8007df8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e00:	2218      	movs	r2, #24
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 f8db 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e0a:	233f      	movs	r3, #63	; 0x3f
 8007e0c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007e10:	2318      	movs	r3, #24
 8007e12:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e16:	f107 0310 	add.w	r3, r7, #16
 8007e1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e26:	f107 030f 	add.w	r3, r7, #15
 8007e2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fb4a 	bl	80084d4 <hci_send_req>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da01      	bge.n	8007e4a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007e46:	23ff      	movs	r3, #255	; 0xff
 8007e48:	e004      	b.n	8007e54 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e52:	781b      	ldrb	r3, [r3, #0]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b088      	sub	sp, #32
 8007e62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e68:	f107 0308 	add.w	r3, r7, #8
 8007e6c:	2218      	movs	r2, #24
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f8a5 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x03;
 8007e76:	2303      	movs	r3, #3
 8007e78:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e7e:	1dfb      	adds	r3, r7, #7
 8007e80:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e86:	f107 0308 	add.w	r3, r7, #8
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb21 	bl	80084d4 <hci_send_req>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	da01      	bge.n	8007e9c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e98:	23ff      	movs	r3, #255	; 0xff
 8007e9a:	e000      	b.n	8007e9e <hci_reset+0x40>
  return status;
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007ea6:	b590      	push	{r4, r7, lr}
 8007ea8:	b0cd      	sub	sp, #308	; 0x134
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	4604      	mov	r4, r0
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007eba:	4622      	mov	r2, r4
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ece:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007ed2:	460a      	mov	r2, r1
 8007ed4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007ed6:	f107 0310 	add.w	r3, r7, #16
 8007eda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ef8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f04:	3301      	adds	r3, #1
 8007f06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f2c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007f30:	7812      	ldrb	r2, [r2, #0]
 8007f32:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f42:	2218      	movs	r2, #24
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f83a 	bl	8007fc0 <Osal_MemSet>
  rq.ogf = 0x08;
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007f52:	2331      	movs	r3, #49	; 0x31
 8007f54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f58:	f107 0310 	add.w	r3, r7, #16
 8007f5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f68:	f107 030f 	add.w	r3, r7, #15
 8007f6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 faa9 	bl	80084d4 <hci_send_req>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	da01      	bge.n	8007f8c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007f88:	23ff      	movs	r3, #255	; 0xff
 8007f8a:	e004      	b.n	8007f96 <hci_le_set_default_phy+0xf0>
  return status;
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f94:	781b      	ldrb	r3, [r3, #0]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f002 f9cd 	bl	800a350 <memcpy>
 8007fb6:	4603      	mov	r3, r0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f002 f9cb 	bl	800a36c <memset>
 8007fd6:	4603      	mov	r3, r0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  return;
 8007fe4:	bf00      	nop
}
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007fee:	b480      	push	{r7}
 8007ff0:	af00      	add	r7, sp, #0
  return;
 8007ff2:	bf00      	nop
}
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  return;
 8008000:	bf00      	nop
}
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800800a:	b480      	push	{r7}
 800800c:	af00      	add	r7, sp, #0
  return;
 800800e:	bf00      	nop
}
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
  return;
 800801c:	bf00      	nop
}
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008026:	b480      	push	{r7}
 8008028:	af00      	add	r7, sp, #0
  return;
 800802a:	bf00      	nop
}
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  return;
 8008038:	bf00      	nop
}
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008042:	b480      	push	{r7}
 8008044:	af00      	add	r7, sp, #0
  return;
 8008046:	bf00      	nop
}
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  return;
 8008054:	bf00      	nop
}
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800805e:	b480      	push	{r7}
 8008060:	af00      	add	r7, sp, #0
  return;
 8008062:	bf00      	nop
}
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  return;
 8008070:	bf00      	nop
}
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800807a:	b480      	push	{r7}
 800807c:	af00      	add	r7, sp, #0
  return;
 800807e:	bf00      	nop
}
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  return;
 800808c:	bf00      	nop
}
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008096:	b480      	push	{r7}
 8008098:	af00      	add	r7, sp, #0
  return;
 800809a:	bf00      	nop
}
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  return;
 80080a8:	bf00      	nop
}
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80080b2:	b480      	push	{r7}
 80080b4:	af00      	add	r7, sp, #0
  return;
 80080b6:	bf00      	nop
}
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  return;
 80080c4:	bf00      	nop
}
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80080d4:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <SVCCTL_Init+0x18>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <SVCCTL_Init+0x1c>)
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80080e0:	f000 f806 	bl	80080f0 <SVCCTL_SvcInit>

  return;
 80080e4:	bf00      	nop
}
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20000910 	.word	0x20000910
 80080ec:	20000930 	.word	0x20000930

080080f0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  BAS_Init();
 80080f4:	f7ff ff74 	bl	8007fe0 <BAS_Init>

  BLS_Init();
 80080f8:	f7ff ff79 	bl	8007fee <BLS_Init>

  CRS_STM_Init();
 80080fc:	f7ff ff7e 	bl	8007ffc <CRS_STM_Init>

  DIS_Init();
 8008100:	f7ff ff83 	bl	800800a <DIS_Init>

  EDS_STM_Init();
 8008104:	f7ff ff88 	bl	8008018 <EDS_STM_Init>

  HIDS_Init();
 8008108:	f7ff ff8d 	bl	8008026 <HIDS_Init>

  HRS_Init();
 800810c:	f7ff ff92 	bl	8008034 <HRS_Init>

  HTS_Init();
 8008110:	f7ff ff97 	bl	8008042 <HTS_Init>

  IAS_Init();
 8008114:	f7ff ff9c 	bl	8008050 <IAS_Init>

  LLS_Init();
 8008118:	f7ff ffa1 	bl	800805e <LLS_Init>

  TPS_Init();
 800811c:	f7ff ffa6 	bl	800806c <TPS_Init>

  MOTENV_STM_Init();
 8008120:	f7ff ffab 	bl	800807a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008124:	f7ff ffb0 	bl	8008088 <P2PS_STM_Init>

  ZDD_STM_Init();
 8008128:	f7ff ffb5 	bl	8008096 <ZDD_STM_Init>

  OTAS_STM_Init();
 800812c:	f7ff ffba 	bl	80080a4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008130:	f7ff ffc6 	bl	80080c0 <BVOPUS_STM_Init>

  MESH_Init();
 8008134:	f7ff ffbd 	bl	80080b2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008138:	f001 fb2a 	bl	8009790 <SVCCTL_InitCustomSvc>
  
  return;
 800813c:	bf00      	nop
}
 800813e:	bd80      	pop	{r7, pc}

08008140 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008148:	4b09      	ldr	r3, [pc, #36]	; (8008170 <SVCCTL_RegisterSvcHandler+0x30>)
 800814a:	7f1b      	ldrb	r3, [r3, #28]
 800814c:	4619      	mov	r1, r3
 800814e:	4a08      	ldr	r2, [pc, #32]	; (8008170 <SVCCTL_RegisterSvcHandler+0x30>)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <SVCCTL_RegisterSvcHandler+0x30>)
 8008158:	7f1b      	ldrb	r3, [r3, #28]
 800815a:	3301      	adds	r3, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	4b04      	ldr	r3, [pc, #16]	; (8008170 <SVCCTL_RegisterSvcHandler+0x30>)
 8008160:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008162:	bf00      	nop
}
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000910 	.word	0x20000910

08008174 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2bff      	cmp	r3, #255	; 0xff
 800818c:	d125      	bne.n	80081da <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	3302      	adds	r3, #2
 8008192:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29b      	uxth	r3, r3
 800819a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800819e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081a2:	d118      	bne.n	80081d6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80081a4:	2300      	movs	r3, #0
 80081a6:	757b      	strb	r3, [r7, #21]
 80081a8:	e00d      	b.n	80081c6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80081aa:	7d7b      	ldrb	r3, [r7, #21]
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <SVCCTL_UserEvtRx+0xa4>)
 80081ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d108      	bne.n	80081d2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80081c0:	7d7b      	ldrb	r3, [r7, #21]
 80081c2:	3301      	adds	r3, #1
 80081c4:	757b      	strb	r3, [r7, #21]
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <SVCCTL_UserEvtRx+0xa4>)
 80081c8:	7f1b      	ldrb	r3, [r3, #28]
 80081ca:	7d7a      	ldrb	r2, [r7, #21]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d3ec      	bcc.n	80081aa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80081d0:	e002      	b.n	80081d8 <SVCCTL_UserEvtRx+0x64>
              break;
 80081d2:	bf00      	nop
          break;
 80081d4:	e000      	b.n	80081d8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80081d6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80081d8:	e000      	b.n	80081dc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80081da:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d00f      	beq.n	8008202 <SVCCTL_UserEvtRx+0x8e>
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	dc10      	bgt.n	8008208 <SVCCTL_UserEvtRx+0x94>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <SVCCTL_UserEvtRx+0x7c>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d006      	beq.n	80081fc <SVCCTL_UserEvtRx+0x88>
 80081ee:	e00b      	b.n	8008208 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ff85 	bl	8009100 <SVCCTL_App_Notification>
 80081f6:	4603      	mov	r3, r0
 80081f8:	75bb      	strb	r3, [r7, #22]
      break;
 80081fa:	e008      	b.n	800820e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75bb      	strb	r3, [r7, #22]
      break;
 8008200:	e005      	b.n	800820e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008202:	2300      	movs	r3, #0
 8008204:	75bb      	strb	r3, [r7, #22]
      break;
 8008206:	e002      	b.n	800820e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008208:	2301      	movs	r3, #1
 800820a:	75bb      	strb	r3, [r7, #22]
      break;
 800820c:	bf00      	nop
  }

  return (return_status);
 800820e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000910 	.word	0x20000910

0800821c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008224:	f107 030c 	add.w	r3, r7, #12
 8008228:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	212e      	movs	r1, #46	; 0x2e
 8008234:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008238:	f000 fae2 	bl	8008800 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	330b      	adds	r3, #11
 8008240:	78db      	ldrb	r3, [r3, #3]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3720      	adds	r7, #32
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b088      	sub	sp, #32
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	210f      	movs	r1, #15
 8008262:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008266:	f000 facb 	bl	8008800 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	330b      	adds	r3, #11
 800826e:	78db      	ldrb	r3, [r3, #3]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008280:	f107 030c 	add.w	r3, r7, #12
 8008284:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	2110      	movs	r1, #16
 800828c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008290:	f000 fab6 	bl	8008800 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	330b      	adds	r3, #11
 8008298:	78db      	ldrb	r3, [r3, #3]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3720      	adds	r7, #32
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b08b      	sub	sp, #44	; 0x2c
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80082cc:	4b4a      	ldr	r3, [pc, #296]	; (80083f8 <SHCI_GetWirelessFwInfo+0x154>)
 80082ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80082d4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80082de:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a44      	ldr	r2, [pc, #272]	; (80083fc <SHCI_GetWirelessFwInfo+0x158>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10f      	bne.n	8008310 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e01a      	b.n	8008346 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008318:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800831c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	b2da      	uxtb	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	0c1b      	lsrs	r3, r3, #16
 8008354:	b2da      	uxtb	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	0a1b      	lsrs	r3, r3, #8
 800835e:	b2da      	uxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	b2db      	uxtb	r3, r3
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	b2da      	uxtb	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	0e1b      	lsrs	r3, r3, #24
 8008386:	b2da      	uxtb	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	b2da      	uxtb	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	0a1b      	lsrs	r3, r3, #8
 800839a:	b2da      	uxtb	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	0e1b      	lsrs	r3, r3, #24
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	0a1b      	lsrs	r3, r3, #8
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	372c      	adds	r7, #44	; 0x2c
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	58004000 	.word	0x58004000
 80083fc:	a94656b9 	.word	0xa94656b9

08008400 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	4a08      	ldr	r2, [pc, #32]	; (8008430 <hci_init+0x30>)
 8008410:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008412:	4a08      	ldr	r2, [pc, #32]	; (8008434 <hci_init+0x34>)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008418:	4806      	ldr	r0, [pc, #24]	; (8008434 <hci_init+0x34>)
 800841a:	f000 f973 	bl	8008704 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f8d4 	bl	80085d0 <TlInit>

  return;
 8008428:	bf00      	nop
}
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20000bd4 	.word	0x20000bd4
 8008434:	20000bac 	.word	0x20000bac

08008438 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800843e:	4822      	ldr	r0, [pc, #136]	; (80084c8 <hci_user_evt_proc+0x90>)
 8008440:	f000 fd28 	bl	8008e94 <LST_is_empty>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d12b      	bne.n	80084a2 <hci_user_evt_proc+0x6a>
 800844a:	4b20      	ldr	r3, [pc, #128]	; (80084cc <hci_user_evt_proc+0x94>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d027      	beq.n	80084a2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	4619      	mov	r1, r3
 8008458:	481b      	ldr	r0, [pc, #108]	; (80084c8 <hci_user_evt_proc+0x90>)
 800845a:	f000 fdaa 	bl	8008fb2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800845e:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <hci_user_evt_proc+0x98>)
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800846a:	2301      	movs	r3, #1
 800846c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800846e:	4b18      	ldr	r3, [pc, #96]	; (80084d0 <hci_user_evt_proc+0x98>)
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	1d3a      	adds	r2, r7, #4
 8008474:	4610      	mov	r0, r2
 8008476:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008478:	793a      	ldrb	r2, [r7, #4]
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <hci_user_evt_proc+0x94>)
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e002      	b.n	8008486 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008480:	4b12      	ldr	r3, [pc, #72]	; (80084cc <hci_user_evt_proc+0x94>)
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <hci_user_evt_proc+0x94>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fc03 	bl	8008c9c <TL_MM_EvtDone>
 8008496:	e004      	b.n	80084a2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4619      	mov	r1, r3
 800849c:	480a      	ldr	r0, [pc, #40]	; (80084c8 <hci_user_evt_proc+0x90>)
 800849e:	f000 fd1b 	bl	8008ed8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80084a2:	4809      	ldr	r0, [pc, #36]	; (80084c8 <hci_user_evt_proc+0x90>)
 80084a4:	f000 fcf6 	bl	8008e94 <LST_is_empty>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d107      	bne.n	80084be <hci_user_evt_proc+0x86>
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <hci_user_evt_proc+0x94>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80084b6:	4804      	ldr	r0, [pc, #16]	; (80084c8 <hci_user_evt_proc+0x90>)
 80084b8:	f001 f83a 	bl	8009530 <hci_notify_asynch_evt>
  }


  return;
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
}
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000938 	.word	0x20000938
 80084cc:	20000944 	.word	0x20000944
 80084d0:	20000bac 	.word	0x20000bac

080084d4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80084e0:	2000      	movs	r0, #0
 80084e2:	f000 f8cb 	bl	800867c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80084e6:	2300      	movs	r3, #0
 80084e8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	b21b      	sxth	r3, r3
 80084f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f4:	b21a      	sxth	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	029b      	lsls	r3, r3, #10
 80084fc:	b21b      	sxth	r3, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	b21b      	sxth	r3, r3
 8008502:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	b2d9      	uxtb	r1, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	8bbb      	ldrh	r3, [r7, #28]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f88d 	bl	8008630 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008516:	e04e      	b.n	80085b6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008518:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800851c:	f001 f81f 	bl	800955e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008520:	e043      	b.n	80085aa <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008522:	f107 030c 	add.w	r3, r7, #12
 8008526:	4619      	mov	r1, r3
 8008528:	4828      	ldr	r0, [pc, #160]	; (80085cc <hci_send_req+0xf8>)
 800852a:	f000 fd42 	bl	8008fb2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	7a5b      	ldrb	r3, [r3, #9]
 8008532:	2b0f      	cmp	r3, #15
 8008534:	d114      	bne.n	8008560 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	330b      	adds	r3, #11
 800853a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	885b      	ldrh	r3, [r3, #2]
 8008540:	b29b      	uxth	r3, r3
 8008542:	8bba      	ldrh	r2, [r7, #28]
 8008544:	429a      	cmp	r2, r3
 8008546:	d104      	bne.n	8008552 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	7812      	ldrb	r2, [r2, #0]
 8008550:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d027      	beq.n	80085aa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800855a:	2301      	movs	r3, #1
 800855c:	77fb      	strb	r3, [r7, #31]
 800855e:	e024      	b.n	80085aa <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	330b      	adds	r3, #11
 8008564:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800856c:	b29b      	uxth	r3, r3
 800856e:	8bba      	ldrh	r2, [r7, #28]
 8008570:	429a      	cmp	r2, r3
 8008572:	d114      	bne.n	800859e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	7a9b      	ldrb	r3, [r3, #10]
 8008578:	3b03      	subs	r3, #3
 800857a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695a      	ldr	r2, [r3, #20]
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	429a      	cmp	r2, r3
 8008584:	bfa8      	it	ge
 8008586:	461a      	movge	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6918      	ldr	r0, [r3, #16]
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	1cd9      	adds	r1, r3, #3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	461a      	mov	r2, r3
 800859a:	f001 fed9 	bl	800a350 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80085a6:	2301      	movs	r3, #1
 80085a8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80085aa:	4808      	ldr	r0, [pc, #32]	; (80085cc <hci_send_req+0xf8>)
 80085ac:	f000 fc72 	bl	8008e94 <LST_is_empty>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0b5      	beq.n	8008522 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80085b6:	7ffb      	ldrb	r3, [r7, #31]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ad      	beq.n	8008518 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80085bc:	2001      	movs	r0, #1
 80085be:	f000 f85d 	bl	800867c <NotifyCmdStatus>

  return 0;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	20000bcc 	.word	0x20000bcc

080085d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80085d8:	480f      	ldr	r0, [pc, #60]	; (8008618 <TlInit+0x48>)
 80085da:	f000 fc4b 	bl	8008e74 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80085de:	4a0f      	ldr	r2, [pc, #60]	; (800861c <TlInit+0x4c>)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80085e4:	480e      	ldr	r0, [pc, #56]	; (8008620 <TlInit+0x50>)
 80085e6:	f000 fc45 	bl	8008e74 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80085ea:	4b0e      	ldr	r3, [pc, #56]	; (8008624 <TlInit+0x54>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80085f0:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <TlInit+0x58>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <TlInit+0x5c>)
 80085fe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008600:	4b09      	ldr	r3, [pc, #36]	; (8008628 <TlInit+0x58>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f107 0208 	add.w	r2, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
  }

  return;
 800860c:	bf00      	nop
 800860e:	bf00      	nop
}
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000bcc 	.word	0x20000bcc
 800861c:	20000940 	.word	0x20000940
 8008620:	20000938 	.word	0x20000938
 8008624:	20000944 	.word	0x20000944
 8008628:	20000bac 	.word	0x20000bac
 800862c:	080086bd 	.word	0x080086bd

08008630 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	603a      	str	r2, [r7, #0]
 800863a:	80fb      	strh	r3, [r7, #6]
 800863c:	460b      	mov	r3, r1
 800863e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008640:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <SendCmd+0x44>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	88fa      	ldrh	r2, [r7, #6]
 8008646:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <SendCmd+0x44>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	797a      	ldrb	r2, [r7, #5]
 8008650:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <SendCmd+0x44>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	330c      	adds	r3, #12
 8008658:	797a      	ldrb	r2, [r7, #5]
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	4618      	mov	r0, r3
 800865e:	f001 fe77 	bl	800a350 <memcpy>

  hciContext.io.Send(0,0);
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <SendCmd+0x48>)
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2100      	movs	r1, #0
 8008668:	2000      	movs	r0, #0
 800866a:	4798      	blx	r3

  return;
 800866c:	bf00      	nop
}
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000940 	.word	0x20000940
 8008678:	20000bac 	.word	0x20000bac

0800867c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <NotifyCmdStatus+0x3c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008694:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <NotifyCmdStatus+0x3c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2000      	movs	r0, #0
 800869a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800869c:	e008      	b.n	80086b0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800869e:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <NotifyCmdStatus+0x3c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80086a6:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <NotifyCmdStatus+0x3c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2001      	movs	r0, #1
 80086ac:	4798      	blx	r3
  return;
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
}
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20000bd4 	.word	0x20000bd4

080086bc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7a5b      	ldrb	r3, [r3, #9]
 80086c8:	2b0f      	cmp	r3, #15
 80086ca:	d003      	beq.n	80086d4 <TlEvtReceived+0x18>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	7a5b      	ldrb	r3, [r3, #9]
 80086d0:	2b0e      	cmp	r3, #14
 80086d2:	d107      	bne.n	80086e4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4809      	ldr	r0, [pc, #36]	; (80086fc <TlEvtReceived+0x40>)
 80086d8:	f000 fc24 	bl	8008f24 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80086dc:	2000      	movs	r0, #0
 80086de:	f000 ff33 	bl	8009548 <hci_cmd_resp_release>
 80086e2:	e006      	b.n	80086f2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4806      	ldr	r0, [pc, #24]	; (8008700 <TlEvtReceived+0x44>)
 80086e8:	f000 fc1c 	bl	8008f24 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80086ec:	4804      	ldr	r0, [pc, #16]	; (8008700 <TlEvtReceived+0x44>)
 80086ee:	f000 ff1f 	bl	8009530 <hci_notify_asynch_evt>
  }

  return;
 80086f2:	bf00      	nop
}
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000bcc 	.word	0x20000bcc
 8008700:	20000938 	.word	0x20000938

08008704 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a05      	ldr	r2, [pc, #20]	; (8008724 <hci_register_io_bus+0x20>)
 8008710:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a04      	ldr	r2, [pc, #16]	; (8008728 <hci_register_io_bus+0x24>)
 8008716:	611a      	str	r2, [r3, #16]

  return;
 8008718:	bf00      	nop
}
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	08008a15 	.word	0x08008a15
 8008728:	08008a7d 	.word	0x08008a7d

0800872c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	4a08      	ldr	r2, [pc, #32]	; (800875c <shci_init+0x30>)
 800873c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <shci_init+0x34>)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008744:	4806      	ldr	r0, [pc, #24]	; (8008760 <shci_init+0x34>)
 8008746:	f000 f911 	bl	800896c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f894 	bl	800887c <TlInit>

  return;
 8008754:	bf00      	nop
}
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000bf8 	.word	0x20000bf8
 8008760:	20000bd8 	.word	0x20000bd8

08008764 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800876a:	4822      	ldr	r0, [pc, #136]	; (80087f4 <shci_user_evt_proc+0x90>)
 800876c:	f000 fb92 	bl	8008e94 <LST_is_empty>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d12b      	bne.n	80087ce <shci_user_evt_proc+0x6a>
 8008776:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <shci_user_evt_proc+0x94>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d027      	beq.n	80087ce <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800877e:	f107 030c 	add.w	r3, r7, #12
 8008782:	4619      	mov	r1, r3
 8008784:	481b      	ldr	r0, [pc, #108]	; (80087f4 <shci_user_evt_proc+0x90>)
 8008786:	f000 fc14 	bl	8008fb2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800878a:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <shci_user_evt_proc+0x98>)
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00c      	beq.n	80087ac <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008796:	2301      	movs	r3, #1
 8008798:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800879a:	4b18      	ldr	r3, [pc, #96]	; (80087fc <shci_user_evt_proc+0x98>)
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	1d3a      	adds	r2, r7, #4
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80087a4:	793a      	ldrb	r2, [r7, #4]
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <shci_user_evt_proc+0x94>)
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	e002      	b.n	80087b2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <shci_user_evt_proc+0x94>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80087b2:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <shci_user_evt_proc+0x94>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fa6d 	bl	8008c9c <TL_MM_EvtDone>
 80087c2:	e004      	b.n	80087ce <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4619      	mov	r1, r3
 80087c8:	480a      	ldr	r0, [pc, #40]	; (80087f4 <shci_user_evt_proc+0x90>)
 80087ca:	f000 fb85 	bl	8008ed8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80087ce:	4809      	ldr	r0, [pc, #36]	; (80087f4 <shci_user_evt_proc+0x90>)
 80087d0:	f000 fb60 	bl	8008e94 <LST_is_empty>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d107      	bne.n	80087ea <shci_user_evt_proc+0x86>
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <shci_user_evt_proc+0x94>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80087e2:	4804      	ldr	r0, [pc, #16]	; (80087f4 <shci_user_evt_proc+0x90>)
 80087e4:	f7f8 faf4 	bl	8000dd0 <shci_notify_asynch_evt>
  }


  return;
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000948 	.word	0x20000948
 80087f8:	20000958 	.word	0x20000958
 80087fc:	20000bd8 	.word	0x20000bd8

08008800 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60ba      	str	r2, [r7, #8]
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	4603      	mov	r3, r0
 800880c:	81fb      	strh	r3, [r7, #14]
 800880e:	460b      	mov	r3, r1
 8008810:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008812:	2000      	movs	r0, #0
 8008814:	f000 f864 	bl	80088e0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008818:	4b16      	ldr	r3, [pc, #88]	; (8008874 <shci_send+0x74>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	89fa      	ldrh	r2, [r7, #14]
 800881e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008822:	4b14      	ldr	r3, [pc, #80]	; (8008874 <shci_send+0x74>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	7b7a      	ldrb	r2, [r7, #13]
 8008828:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <shci_send+0x74>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	330c      	adds	r3, #12
 8008830:	7b7a      	ldrb	r2, [r7, #13]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	4618      	mov	r0, r3
 8008836:	f001 fd8b 	bl	800a350 <memcpy>

  shciContext.io.Send(0,0);
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <shci_send+0x78>)
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2100      	movs	r1, #0
 8008840:	2000      	movs	r0, #0
 8008842:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008844:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008848:	f7f8 fad9 	bl	8000dfe <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f103 0008 	add.w	r0, r3, #8
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <shci_send+0x74>)
 8008854:	6819      	ldr	r1, [r3, #0]
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <shci_send+0x74>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	789b      	ldrb	r3, [r3, #2]
 800885c:	3303      	adds	r3, #3
 800885e:	461a      	mov	r2, r3
 8008860:	f001 fd76 	bl	800a350 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008864:	2001      	movs	r0, #1
 8008866:	f000 f83b 	bl	80088e0 <Cmd_SetStatus>

  return;
 800886a:	bf00      	nop
}
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000954 	.word	0x20000954
 8008878:	20000bd8 	.word	0x20000bd8

0800887c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008884:	4a10      	ldr	r2, [pc, #64]	; (80088c8 <TlInit+0x4c>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800888a:	4810      	ldr	r0, [pc, #64]	; (80088cc <TlInit+0x50>)
 800888c:	f000 faf2 	bl	8008e74 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008890:	2001      	movs	r0, #1
 8008892:	f000 f825 	bl	80088e0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008896:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <TlInit+0x54>)
 8008898:	2201      	movs	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800889c:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <TlInit+0x58>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00c      	beq.n	80088be <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <TlInit+0x5c>)
 80088aa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <TlInit+0x60>)
 80088ae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80088b0:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <TlInit+0x58>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f107 020c 	add.w	r2, r7, #12
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
  }

  return;
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
}
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000954 	.word	0x20000954
 80088cc:	20000948 	.word	0x20000948
 80088d0:	20000958 	.word	0x20000958
 80088d4:	20000bd8 	.word	0x20000bd8
 80088d8:	08008931 	.word	0x08008931
 80088dc:	08008949 	.word	0x08008949

080088e0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80088f0:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <Cmd_SetStatus+0x48>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80088f8:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <Cmd_SetStatus+0x48>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2000      	movs	r0, #0
 80088fe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <Cmd_SetStatus+0x4c>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008906:	e00b      	b.n	8008920 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008908:	4b08      	ldr	r3, [pc, #32]	; (800892c <Cmd_SetStatus+0x4c>)
 800890a:	2201      	movs	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <Cmd_SetStatus+0x48>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008916:	4b04      	ldr	r3, [pc, #16]	; (8008928 <Cmd_SetStatus+0x48>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2001      	movs	r0, #1
 800891c:	4798      	blx	r3
  return;
 800891e:	bf00      	nop
 8008920:	bf00      	nop
}
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20000bf8 	.word	0x20000bf8
 800892c:	20000950 	.word	0x20000950

08008930 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008938:	2000      	movs	r0, #0
 800893a:	f7f8 fa55 	bl	8000de8 <shci_cmd_resp_release>

  return;
 800893e:	bf00      	nop
}
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	4805      	ldr	r0, [pc, #20]	; (8008968 <TlUserEvtReceived+0x20>)
 8008954:	f000 fae6 	bl	8008f24 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008958:	4803      	ldr	r0, [pc, #12]	; (8008968 <TlUserEvtReceived+0x20>)
 800895a:	f7f8 fa39 	bl	8000dd0 <shci_notify_asynch_evt>

  return;
 800895e:	bf00      	nop
}
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000948 	.word	0x20000948

0800896c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a05      	ldr	r2, [pc, #20]	; (800898c <shci_register_io_bus+0x20>)
 8008978:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a04      	ldr	r2, [pc, #16]	; (8008990 <shci_register_io_bus+0x24>)
 800897e:	611a      	str	r2, [r3, #16]

  return;
 8008980:	bf00      	nop
}
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	08008b29 	.word	0x08008b29
 8008990:	08008b7d 	.word	0x08008b7d

08008994 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008998:	f001 f95e 	bl	8009c58 <HW_IPCC_Enable>

  return;
 800899c:	bf00      	nop
}
 800899e:	bd80      	pop	{r7, pc}

080089a0 <TL_Init>:


void TL_Init( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80089a4:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <TL_Init+0x48>)
 80089a6:	4a11      	ldr	r2, [pc, #68]	; (80089ec <TL_Init+0x4c>)
 80089a8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80089aa:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <TL_Init+0x48>)
 80089ac:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <TL_Init+0x50>)
 80089ae:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <TL_Init+0x48>)
 80089b2:	4a10      	ldr	r2, [pc, #64]	; (80089f4 <TL_Init+0x54>)
 80089b4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80089b6:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <TL_Init+0x48>)
 80089b8:	4a0f      	ldr	r2, [pc, #60]	; (80089f8 <TL_Init+0x58>)
 80089ba:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <TL_Init+0x48>)
 80089be:	4a0f      	ldr	r2, [pc, #60]	; (80089fc <TL_Init+0x5c>)
 80089c0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <TL_Init+0x48>)
 80089c4:	4a0e      	ldr	r2, [pc, #56]	; (8008a00 <TL_Init+0x60>)
 80089c6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <TL_Init+0x48>)
 80089ca:	4a0e      	ldr	r2, [pc, #56]	; (8008a04 <TL_Init+0x64>)
 80089cc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80089ce:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <TL_Init+0x48>)
 80089d0:	4a0d      	ldr	r2, [pc, #52]	; (8008a08 <TL_Init+0x68>)
 80089d2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <TL_Init+0x48>)
 80089d6:	4a0d      	ldr	r2, [pc, #52]	; (8008a0c <TL_Init+0x6c>)
 80089d8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80089da:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <TL_Init+0x48>)
 80089dc:	4a0c      	ldr	r2, [pc, #48]	; (8008a10 <TL_Init+0x70>)
 80089de:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80089e0:	f001 f94e 	bl	8009c80 <HW_IPCC_Init>

  return;
 80089e4:	bf00      	nop
}
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20030000 	.word	0x20030000
 80089ec:	20030028 	.word	0x20030028
 80089f0:	20030048 	.word	0x20030048
 80089f4:	20030058 	.word	0x20030058
 80089f8:	20030068 	.word	0x20030068
 80089fc:	20030070 	.word	0x20030070
 8008a00:	20030078 	.word	0x20030078
 8008a04:	20030080 	.word	0x20030080
 8008a08:	2003009c 	.word	0x2003009c
 8008a0c:	200300a0 	.word	0x200300a0
 8008a10:	200300ac 	.word	0x200300ac

08008a14 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008a20:	4811      	ldr	r0, [pc, #68]	; (8008a68 <TL_BLE_Init+0x54>)
 8008a22:	f000 fa27 	bl	8008e74 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <TL_BLE_Init+0x58>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <TL_BLE_Init+0x5c>)
 8008a40:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <TL_BLE_Init+0x54>)
 8008a46:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008a48:	f001 f930 	bl	8009cac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <TL_BLE_Init+0x60>)
 8008a52:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	4a07      	ldr	r2, [pc, #28]	; (8008a78 <TL_BLE_Init+0x64>)
 8008a5a:	6013      	str	r3, [r2, #0]

  return 0;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200300c8 	.word	0x200300c8
 8008a6c:	20030000 	.word	0x20030000
 8008a70:	20000900 	.word	0x20000900
 8008a74:	20000c04 	.word	0x20000c04
 8008a78:	20000c08 	.word	0x20000c08

08008a7c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <TL_BLE_SendCmd+0x34>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <TL_BLE_SendCmd+0x34>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	f000 f96c 	bl	8008d78 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008aa0:	f001 f90e 	bl	8009cc0 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20030000 	.word	0x20030000

08008ab4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008aba:	e01c      	b.n	8008af6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008abc:	1d3b      	adds	r3, r7, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4812      	ldr	r0, [pc, #72]	; (8008b0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008ac2:	f000 fa76 	bl	8008fb2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7a5b      	ldrb	r3, [r3, #9]
 8008aca:	2b0f      	cmp	r3, #15
 8008acc:	d003      	beq.n	8008ad6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7a5b      	ldrb	r3, [r3, #9]
 8008ad2:	2b0e      	cmp	r3, #14
 8008ad4:	d105      	bne.n	8008ae2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	2002      	movs	r0, #2
 8008adc:	f000 f94c 	bl	8008d78 <OutputDbgTrace>
 8008ae0:	e004      	b.n	8008aec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	2003      	movs	r0, #3
 8008ae8:	f000 f946 	bl	8008d78 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008aec:	4b08      	ldr	r3, [pc, #32]	; (8008b10 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4610      	mov	r0, r2
 8008af4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008af6:	4805      	ldr	r0, [pc, #20]	; (8008b0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008af8:	f000 f9cc 	bl	8008e94 <LST_is_empty>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0dc      	beq.n	8008abc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008b02:	bf00      	nop
}
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200300c8 	.word	0x200300c8
 8008b10:	20000c04 	.word	0x20000c04

08008b14 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4798      	blx	r3

  return;
 8008b1e:	bf00      	nop
}
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000c08 	.word	0x20000c08

08008b28 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008b34:	480d      	ldr	r0, [pc, #52]	; (8008b6c <TL_SYS_Init+0x44>)
 8008b36:	f000 f99d 	bl	8008e74 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <TL_SYS_Init+0x48>)
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4a08      	ldr	r2, [pc, #32]	; (8008b6c <TL_SYS_Init+0x44>)
 8008b4c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008b4e:	f001 f8d9 	bl	8009d04 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a07      	ldr	r2, [pc, #28]	; (8008b74 <TL_SYS_Init+0x4c>)
 8008b58:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	4a06      	ldr	r2, [pc, #24]	; (8008b78 <TL_SYS_Init+0x50>)
 8008b60:	6013      	str	r3, [r2, #0]

  return 0;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200300d0 	.word	0x200300d0
 8008b70:	20030000 	.word	0x20030000
 8008b74:	20000c0c 	.word	0x20000c0c
 8008b78:	20000c10 	.word	0x20000c10

08008b7c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008b88:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <TL_SYS_SendCmd+0x34>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2210      	movs	r2, #16
 8008b90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008b92:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <TL_SYS_SendCmd+0x34>)
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	2004      	movs	r0, #4
 8008b9c:	f000 f8ec 	bl	8008d78 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008ba0:	f001 f8ba 	bl	8009d18 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20030000 	.word	0x20030000

08008bb4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	2005      	movs	r0, #5
 8008bc2:	f000 f8d9 	bl	8008d78 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008bc6:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a03      	ldr	r2, [pc, #12]	; (8008bd8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008bcc:	68d2      	ldr	r2, [r2, #12]
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3

  return;
 8008bd4:	bf00      	nop
}
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20030000 	.word	0x20030000
 8008bdc:	20000c0c 	.word	0x20000c0c

08008be0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008be6:	e00e      	b.n	8008c06 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	480b      	ldr	r0, [pc, #44]	; (8008c1c <HW_IPCC_SYS_EvtNot+0x3c>)
 8008bee:	f000 f9e0 	bl	8008fb2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	2006      	movs	r0, #6
 8008bf8:	f000 f8be 	bl	8008d78 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008bfc:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <HW_IPCC_SYS_EvtNot+0x40>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	4610      	mov	r0, r2
 8008c04:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008c06:	4805      	ldr	r0, [pc, #20]	; (8008c1c <HW_IPCC_SYS_EvtNot+0x3c>)
 8008c08:	f000 f944 	bl	8008e94 <LST_is_empty>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0ea      	beq.n	8008be8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008c12:	bf00      	nop
}
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200300d0 	.word	0x200300d0
 8008c20:	20000c10 	.word	0x20000c10

08008c24 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008c2c:	4817      	ldr	r0, [pc, #92]	; (8008c8c <TL_MM_Init+0x68>)
 8008c2e:	f000 f921 	bl	8008e74 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008c32:	4817      	ldr	r0, [pc, #92]	; (8008c90 <TL_MM_Init+0x6c>)
 8008c34:	f000 f91e 	bl	8008e74 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <TL_MM_Init+0x70>)
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	4a16      	ldr	r2, [pc, #88]	; (8008c98 <TL_MM_Init+0x74>)
 8008c3e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008c40:	4b15      	ldr	r3, [pc, #84]	; (8008c98 <TL_MM_Init+0x74>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6892      	ldr	r2, [r2, #8]
 8008c48:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008c4a:	4b13      	ldr	r3, [pc, #76]	; (8008c98 <TL_MM_Init+0x74>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	68d2      	ldr	r2, [r2, #12]
 8008c52:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <TL_MM_Init+0x74>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <TL_MM_Init+0x68>)
 8008c5a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008c5c:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <TL_MM_Init+0x74>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6812      	ldr	r2, [r2, #0]
 8008c64:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <TL_MM_Init+0x74>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	6852      	ldr	r2, [r2, #4]
 8008c6e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008c70:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <TL_MM_Init+0x74>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6912      	ldr	r2, [r2, #16]
 8008c78:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008c7a:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <TL_MM_Init+0x74>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6952      	ldr	r2, [r2, #20]
 8008c82:	619a      	str	r2, [r3, #24]

  return;
 8008c84:	bf00      	nop
}
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	200300b8 	.word	0x200300b8
 8008c90:	20000bfc 	.word	0x20000bfc
 8008c94:	20030000 	.word	0x20030000
 8008c98:	20000c14 	.word	0x20000c14

08008c9c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4807      	ldr	r0, [pc, #28]	; (8008cc4 <TL_MM_EvtDone+0x28>)
 8008ca8:	f000 f93c 	bl	8008f24 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	2000      	movs	r0, #0
 8008cb0:	f000 f862 	bl	8008d78 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008cb4:	4804      	ldr	r0, [pc, #16]	; (8008cc8 <TL_MM_EvtDone+0x2c>)
 8008cb6:	f001 f855 	bl	8009d64 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008cba:	bf00      	nop
}
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000bfc 	.word	0x20000bfc
 8008cc8:	08008ccd 	.word	0x08008ccd

08008ccc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008cd2:	e00c      	b.n	8008cee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008cd4:	1d3b      	adds	r3, r7, #4
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	480a      	ldr	r0, [pc, #40]	; (8008d04 <SendFreeBuf+0x38>)
 8008cda:	f000 f96a 	bl	8008fb2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008cde:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <SendFreeBuf+0x3c>)
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f91b 	bl	8008f24 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008cee:	4805      	ldr	r0, [pc, #20]	; (8008d04 <SendFreeBuf+0x38>)
 8008cf0:	f000 f8d0 	bl	8008e94 <LST_is_empty>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0ec      	beq.n	8008cd4 <SendFreeBuf+0x8>
  }

  return;
 8008cfa:	bf00      	nop
}
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000bfc 	.word	0x20000bfc
 8008d08:	20030000 	.word	0x20030000

08008d0c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008d10:	4805      	ldr	r0, [pc, #20]	; (8008d28 <TL_TRACES_Init+0x1c>)
 8008d12:	f000 f8af 	bl	8008e74 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <TL_TRACES_Init+0x20>)
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	4a03      	ldr	r2, [pc, #12]	; (8008d28 <TL_TRACES_Init+0x1c>)
 8008d1c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008d1e:	f001 f857 	bl	8009dd0 <HW_IPCC_TRACES_Init>

  return;
 8008d22:	bf00      	nop
}
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200300c0 	.word	0x200300c0
 8008d2c:	20030000 	.word	0x20030000

08008d30 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008d36:	e008      	b.n	8008d4a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008d38:	1d3b      	adds	r3, r7, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4808      	ldr	r0, [pc, #32]	; (8008d60 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008d3e:	f000 f938 	bl	8008fb2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f80d 	bl	8008d64 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008d4a:	4805      	ldr	r0, [pc, #20]	; (8008d60 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008d4c:	f000 f8a2 	bl	8008e94 <LST_is_empty>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0f0      	beq.n	8008d38 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008d56:	bf00      	nop
}
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	200300c0 	.word	0x200300c0

08008d64 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b06      	cmp	r3, #6
 8008d88:	d845      	bhi.n	8008e16 <OutputDbgTrace+0x9e>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <OutputDbgTrace+0x18>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008dad 	.word	0x08008dad
 8008d94:	08008dd1 	.word	0x08008dd1
 8008d98:	08008dd7 	.word	0x08008dd7
 8008d9c:	08008deb 	.word	0x08008deb
 8008da0:	08008df7 	.word	0x08008df7
 8008da4:	08008dfd 	.word	0x08008dfd
 8008da8:	08008e0b 	.word	0x08008e0b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	7a5b      	ldrb	r3, [r3, #9]
 8008db4:	2bff      	cmp	r3, #255	; 0xff
 8008db6:	d005      	beq.n	8008dc4 <OutputDbgTrace+0x4c>
 8008db8:	2bff      	cmp	r3, #255	; 0xff
 8008dba:	dc05      	bgt.n	8008dc8 <OutputDbgTrace+0x50>
 8008dbc:	2b0e      	cmp	r3, #14
 8008dbe:	d005      	beq.n	8008dcc <OutputDbgTrace+0x54>
 8008dc0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008dc2:	e001      	b.n	8008dc8 <OutputDbgTrace+0x50>
          break;
 8008dc4:	bf00      	nop
 8008dc6:	e027      	b.n	8008e18 <OutputDbgTrace+0xa0>
          break;
 8008dc8:	bf00      	nop
 8008dca:	e025      	b.n	8008e18 <OutputDbgTrace+0xa0>
          break;
 8008dcc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008dce:	e023      	b.n	8008e18 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008dd4:	e020      	b.n	8008e18 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	7a5b      	ldrb	r3, [r3, #9]
 8008dde:	2b0e      	cmp	r3, #14
 8008de0:	d001      	beq.n	8008de6 <OutputDbgTrace+0x6e>
 8008de2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008de4:	e000      	b.n	8008de8 <OutputDbgTrace+0x70>
          break;
 8008de6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008de8:	e016      	b.n	8008e18 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	7a5b      	ldrb	r3, [r3, #9]
 8008df2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008df4:	e010      	b.n	8008e18 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008dfa:	e00d      	b.n	8008e18 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	7a5b      	ldrb	r3, [r3, #9]
 8008e04:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008e06:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008e08:	e006      	b.n	8008e18 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	7a5b      	ldrb	r3, [r3, #9]
 8008e12:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008e14:	e000      	b.n	8008e18 <OutputDbgTrace+0xa0>

    default:
      break;
 8008e16:	bf00      	nop
  }

  return;
 8008e18:	bf00      	nop
}
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <OTP_Read+0x48>)
 8008e30:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008e32:	e002      	b.n	8008e3a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3b08      	subs	r3, #8
 8008e38:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	79fa      	ldrb	r2, [r7, #7]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d003      	beq.n	8008e4e <OTP_Read+0x2a>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4a09      	ldr	r2, [pc, #36]	; (8008e70 <OTP_Read+0x4c>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d1f2      	bne.n	8008e34 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3307      	adds	r3, #7
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	79fa      	ldrb	r2, [r7, #7]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d001      	beq.n	8008e5e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	1fff73f8 	.word	0x1fff73f8
 8008e70:	1fff7000 	.word	0x1fff7000

08008e74 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	605a      	str	r2, [r3, #4]
}
 8008e88:	bf00      	nop
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ea6:	b672      	cpsid	i
}
 8008ea8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d102      	bne.n	8008eba <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	75fb      	strb	r3, [r7, #23]
 8008eb8:	e001      	b.n	8008ebe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75fb      	strb	r3, [r7, #23]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f383 8810 	msr	PRIMASK, r3
}
 8008ec8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008eec:	b672      	cpsid	i
}
 8008eee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	605a      	str	r2, [r3, #4]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f383 8810 	msr	PRIMASK, r3
}
 8008f16:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f18:	bf00      	nop
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f34:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f38:	b672      	cpsid	i
}
 8008f3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f64:	bf00      	nop
 8008f66:	371c      	adds	r7, #28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f78:	f3ef 8310 	mrs	r3, PRIMASK
 8008f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f82:	b672      	cpsid	i
}
 8008f84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	6852      	ldr	r2, [r2, #4]
 8008f98:	605a      	str	r2, [r3, #4]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f383 8810 	msr	PRIMASK, r3
}
 8008fa4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b086      	sub	sp, #24
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fc6:	b672      	cpsid	i
}
 8008fc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff ffca 	bl	8008f70 <LST_remove_node>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f383 8810 	msr	PRIMASK, r3
}
 8008fe6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008fe8:	bf00      	nop
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <LL_FLASH_GetUDN+0x14>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	1fff7580 	.word	0x1fff7580

08009008 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800900c:	4b03      	ldr	r3, [pc, #12]	; (800901c <LL_FLASH_GetDeviceID+0x14>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	b2db      	uxtb	r3, r3
}
 8009012:	4618      	mov	r0, r3
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	1fff7584 	.word	0x1fff7584

08009020 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009024:	4b03      	ldr	r3, [pc, #12]	; (8009034 <LL_FLASH_GetSTCompanyID+0x14>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	0a1b      	lsrs	r3, r3, #8
}
 800902a:	4618      	mov	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	1fff7584 	.word	0x1fff7584

08009038 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8009038:	b5b0      	push	{r4, r5, r7, lr}
 800903a:	b090      	sub	sp, #64	; 0x40
 800903c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800903e:	2392      	movs	r3, #146	; 0x92
 8009040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8009044:	4a29      	ldr	r2, [pc, #164]	; (80090ec <APP_BLE_Init+0xb4>)
 8009046:	2100      	movs	r1, #0
 8009048:	2004      	movs	r0, #4
 800904a:	f001 f815 	bl	800a078 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800904e:	2100      	movs	r1, #0
 8009050:	2004      	movs	r0, #4
 8009052:	f001 f833 	bl	800a0bc <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009056:	4b26      	ldr	r3, [pc, #152]	; (80090f0 <APP_BLE_Init+0xb8>)
 8009058:	1d3c      	adds	r4, r7, #4
 800905a:	461d      	mov	r5, r3
 800905c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800905e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800906c:	c403      	stmia	r4!, {r0, r1}
 800906e:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009070:	f000 f906 	bl	8009280 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009074:	2101      	movs	r1, #1
 8009076:	2002      	movs	r0, #2
 8009078:	f000 fed2 	bl	8009e20 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800907c:	4a1d      	ldr	r2, [pc, #116]	; (80090f4 <APP_BLE_Init+0xbc>)
 800907e:	2100      	movs	r1, #0
 8009080:	2002      	movs	r0, #2
 8009082:	f000 fff9 	bl	800a078 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009086:	1d3b      	adds	r3, r7, #4
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff f8c7 	bl	800821c <SHCI_C2_BLE_Init>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009094:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800909c:	f7f8 ff6c 	bl	8001f78 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80090a0:	f000 f904 	bl	80092ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80090a4:	f7ff f814 	bl	80080d0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80090a8:	4b13      	ldr	r3, [pc, #76]	; (80090f8 <APP_BLE_Init+0xc0>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80090b0:	4b11      	ldr	r3, [pc, #68]	; (80090f8 <APP_BLE_Init+0xc0>)
 80090b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090b6:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80090b8:	4a10      	ldr	r2, [pc, #64]	; (80090fc <APP_BLE_Init+0xc4>)
 80090ba:	2100      	movs	r1, #0
 80090bc:	2001      	movs	r0, #1
 80090be:	f000 ffdb 	bl	800a078 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80090c2:	2006      	movs	r0, #6
 80090c4:	f7fe fe77 	bl	8007db6 <aci_hal_set_radio_activity_mask>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80090ce:	f000 fad5 	bl	800967c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <APP_BLE_Init+0xc0>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80090d8:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <APP_BLE_Init+0xc0>)
 80090da:	2200      	movs	r2, #0
 80090dc:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80090de:	2001      	movs	r0, #1
 80090e0:	f000 f998 	bl	8009414 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80090e4:	bf00      	nop
}
 80090e6:	3740      	adds	r7, #64	; 0x40
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bdb0      	pop	{r4, r5, r7, pc}
 80090ec:	080095e5 	.word	0x080095e5
 80090f0:	0800b3ac 	.word	0x0800b3ac
 80090f4:	08008439 	.word	0x08008439
 80090f8:	20000c20 	.word	0x20000c20
 80090fc:	080094fd 	.word	0x080094fd

08009100 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009108:	2392      	movs	r3, #146	; 0x92
 800910a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3301      	adds	r3, #1
 8009112:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2bff      	cmp	r3, #255	; 0xff
 800911a:	d053      	beq.n	80091c4 <SVCCTL_App_Notification+0xc4>
 800911c:	2bff      	cmp	r3, #255	; 0xff
 800911e:	f300 80a1 	bgt.w	8009264 <SVCCTL_App_Notification+0x164>
 8009122:	2b05      	cmp	r3, #5
 8009124:	d002      	beq.n	800912c <SVCCTL_App_Notification+0x2c>
 8009126:	2b3e      	cmp	r3, #62	; 0x3e
 8009128:	d020      	beq.n	800916c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800912a:	e09b      	b.n	8009264 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	3302      	adds	r3, #2
 8009130:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009138:	b29a      	uxth	r2, r3
 800913a:	4b4e      	ldr	r3, [pc, #312]	; (8009274 <SVCCTL_App_Notification+0x174>)
 800913c:	8adb      	ldrh	r3, [r3, #22]
 800913e:	429a      	cmp	r2, r3
 8009140:	d106      	bne.n	8009150 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009142:	4b4c      	ldr	r3, [pc, #304]	; (8009274 <SVCCTL_App_Notification+0x174>)
 8009144:	2200      	movs	r2, #0
 8009146:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009148:	4b4a      	ldr	r3, [pc, #296]	; (8009274 <SVCCTL_App_Notification+0x174>)
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8009150:	2001      	movs	r0, #1
 8009152:	f000 f95f 	bl	8009414 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009156:	4b48      	ldr	r3, [pc, #288]	; (8009278 <SVCCTL_App_Notification+0x178>)
 8009158:	2201      	movs	r2, #1
 800915a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800915c:	4b45      	ldr	r3, [pc, #276]	; (8009274 <SVCCTL_App_Notification+0x174>)
 800915e:	8ada      	ldrh	r2, [r3, #22]
 8009160:	4b45      	ldr	r3, [pc, #276]	; (8009278 <SVCCTL_App_Notification+0x178>)
 8009162:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009164:	4844      	ldr	r0, [pc, #272]	; (8009278 <SVCCTL_App_Notification+0x178>)
 8009166:	f000 fa75 	bl	8009654 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800916a:	e07e      	b.n	800926a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	3302      	adds	r3, #2
 8009170:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d001      	beq.n	800917e <SVCCTL_App_Notification+0x7e>
 800917a:	2b03      	cmp	r3, #3
          break;
 800917c:	e021      	b.n	80091c2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3301      	adds	r3, #1
 8009182:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009184:	4b3b      	ldr	r3, [pc, #236]	; (8009274 <SVCCTL_App_Notification+0x174>)
 8009186:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800918a:	2b04      	cmp	r3, #4
 800918c:	d104      	bne.n	8009198 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800918e:	4b39      	ldr	r3, [pc, #228]	; (8009274 <SVCCTL_App_Notification+0x174>)
 8009190:	2206      	movs	r2, #6
 8009192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009196:	e003      	b.n	80091a0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009198:	4b36      	ldr	r3, [pc, #216]	; (8009274 <SVCCTL_App_Notification+0x174>)
 800919a:	2205      	movs	r2, #5
 800919c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	4b32      	ldr	r3, [pc, #200]	; (8009274 <SVCCTL_App_Notification+0x174>)
 80091aa:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80091ac:	4b32      	ldr	r3, [pc, #200]	; (8009278 <SVCCTL_App_Notification+0x178>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80091b2:	4b30      	ldr	r3, [pc, #192]	; (8009274 <SVCCTL_App_Notification+0x174>)
 80091b4:	8ada      	ldrh	r2, [r3, #22]
 80091b6:	4b30      	ldr	r3, [pc, #192]	; (8009278 <SVCCTL_App_Notification+0x178>)
 80091b8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80091ba:	482f      	ldr	r0, [pc, #188]	; (8009278 <SVCCTL_App_Notification+0x178>)
 80091bc:	f000 fa4a 	bl	8009654 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80091c0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80091c2:	e052      	b.n	800926a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	3302      	adds	r3, #2
 80091c8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091d4:	d040      	beq.n	8009258 <SVCCTL_App_Notification+0x158>
 80091d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091da:	dc45      	bgt.n	8009268 <SVCCTL_App_Notification+0x168>
 80091dc:	2b04      	cmp	r3, #4
 80091de:	d03d      	beq.n	800925c <SVCCTL_App_Notification+0x15c>
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	db41      	blt.n	8009268 <SVCCTL_App_Notification+0x168>
 80091e4:	f240 420a 	movw	r2, #1034	; 0x40a
 80091e8:	4293      	cmp	r3, r2
 80091ea:	dc3d      	bgt.n	8009268 <SVCCTL_App_Notification+0x168>
 80091ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091f0:	dd3a      	ble.n	8009268 <SVCCTL_App_Notification+0x168>
 80091f2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80091f6:	2b09      	cmp	r3, #9
 80091f8:	d836      	bhi.n	8009268 <SVCCTL_App_Notification+0x168>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <SVCCTL_App_Notification+0x100>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009251 	.word	0x08009251
 8009204:	08009229 	.word	0x08009229
 8009208:	08009269 	.word	0x08009269
 800920c:	08009269 	.word	0x08009269
 8009210:	08009269 	.word	0x08009269
 8009214:	08009269 	.word	0x08009269
 8009218:	08009261 	.word	0x08009261
 800921c:	08009269 	.word	0x08009269
 8009220:	0800923d 	.word	0x0800923d
 8009224:	08009261 	.word	0x08009261
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009228:	4b12      	ldr	r3, [pc, #72]	; (8009274 <SVCCTL_App_Notification+0x174>)
 800922a:	8adb      	ldrh	r3, [r3, #22]
 800922c:	4913      	ldr	r1, [pc, #76]	; (800927c <SVCCTL_App_Notification+0x17c>)
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe f818 	bl	8007264 <aci_gap_pass_key_resp>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800923a:	e012      	b.n	8009262 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <SVCCTL_App_Notification+0x174>)
 800923e:	8adb      	ldrh	r3, [r3, #22]
 8009240:	2101      	movs	r1, #1
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe f9b8 	bl	80075b8 <aci_gap_numeric_comparison_value_confirm_yesno>
 8009248:	4603      	mov	r3, r0
 800924a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800924e:	e008      	b.n	8009262 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	3302      	adds	r3, #2
 8009254:	61bb      	str	r3, [r7, #24]
          break;
 8009256:	e004      	b.n	8009262 <SVCCTL_App_Notification+0x162>
          break;
 8009258:	bf00      	nop
 800925a:	e005      	b.n	8009268 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800925c:	bf00      	nop
 800925e:	e003      	b.n	8009268 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009260:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009262:	e001      	b.n	8009268 <SVCCTL_App_Notification+0x168>
      break;
 8009264:	bf00      	nop
 8009266:	e000      	b.n	800926a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009268:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800926a:	2301      	movs	r3, #1
}
 800926c:	4618      	mov	r0, r3
 800926e:	3728      	adds	r7, #40	; 0x28
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000c20 	.word	0x20000c20
 8009278:	20000ca4 	.word	0x20000ca4
 800927c:	0001b207 	.word	0x0001b207

08009280 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <Ble_Tl_Init+0x20>)
 8009288:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <Ble_Tl_Init+0x24>)
 800928c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800928e:	463b      	mov	r3, r7
 8009290:	4619      	mov	r1, r3
 8009292:	4805      	ldr	r0, [pc, #20]	; (80092a8 <Ble_Tl_Init+0x28>)
 8009294:	f7ff f8b4 	bl	8008400 <hci_init>

  return;
 8009298:	bf00      	nop
}
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	200300d8 	.word	0x200300d8
 80092a4:	080095ad 	.word	0x080095ad
 80092a8:	08009575 	.word	0x08009575

080092ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80092ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ae:	b08d      	sub	sp, #52	; 0x34
 80092b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80092b2:	2300      	movs	r3, #0
 80092b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80092b6:	2392      	movs	r3, #146	; 0x92
 80092b8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80092ba:	f7fe fdd0 	bl	8007e5e <hci_reset>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80092c2:	f000 f8d7 	bl	8009474 <BleGetBdAddress>
 80092c6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	2106      	movs	r1, #6
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7fe fc86 	bl	8007bde <aci_hal_write_config_data>
 80092d2:	4603      	mov	r3, r0
 80092d4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80092d6:	4a4a      	ldr	r2, [pc, #296]	; (8009400 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80092d8:	2110      	movs	r1, #16
 80092da:	2018      	movs	r0, #24
 80092dc:	f7fe fc7f 	bl	8007bde <aci_hal_write_config_data>
 80092e0:	4603      	mov	r3, r0
 80092e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80092e4:	4a47      	ldr	r2, [pc, #284]	; (8009404 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80092e6:	2110      	movs	r1, #16
 80092e8:	2008      	movs	r0, #8
 80092ea:	f7fe fc78 	bl	8007bde <aci_hal_write_config_data>
 80092ee:	4603      	mov	r3, r0
 80092f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80092f2:	2118      	movs	r1, #24
 80092f4:	2001      	movs	r0, #1
 80092f6:	f7fe fcf7 	bl	8007ce8 <aci_hal_set_tx_power_level>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80092fe:	f7fe f9c2 	bl	8007686 <aci_gatt_init>
 8009302:	4603      	mov	r3, r0
 8009304:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d01f      	beq.n	8009358 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009318:	4b3b      	ldr	r3, [pc, #236]	; (8009408 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800931a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800931c:	1dba      	adds	r2, r7, #6
 800931e:	7bf8      	ldrb	r0, [r7, #15]
 8009320:	1cbb      	adds	r3, r7, #2
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	4613      	mov	r3, r2
 800932a:	2208      	movs	r2, #8
 800932c:	2100      	movs	r1, #0
 800932e:	f7fe f800 	bl	8007332 <aci_gap_init>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009336:	88fc      	ldrh	r4, [r7, #6]
 8009338:	88bd      	ldrh	r5, [r7, #4]
 800933a:	68b8      	ldr	r0, [r7, #8]
 800933c:	f7f6 ff20 	bl	8000180 <strlen>
 8009340:	4603      	mov	r3, r0
 8009342:	b2da      	uxtb	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	2200      	movs	r2, #0
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	f7fe fb9c 	bl	8007a8c <aci_gatt_update_char_value>
 8009354:	4603      	mov	r3, r0
 8009356:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009358:	88f8      	ldrh	r0, [r7, #6]
 800935a:	8879      	ldrh	r1, [r7, #2]
 800935c:	463b      	mov	r3, r7
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	2302      	movs	r3, #2
 8009362:	2200      	movs	r2, #0
 8009364:	f7fe fb92 	bl	8007a8c <aci_gatt_update_char_value>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800936c:	2202      	movs	r2, #2
 800936e:	2102      	movs	r1, #2
 8009370:	2000      	movs	r0, #0
 8009372:	f7fe fd98 	bl	8007ea6 <hci_le_set_default_phy>
 8009376:	4603      	mov	r3, r0
 8009378:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800937a:	4b24      	ldr	r3, [pc, #144]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800937c:	2201      	movs	r2, #1
 800937e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009380:	4b22      	ldr	r3, [pc, #136]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	4618      	mov	r0, r3
 8009386:	f7fd fe55 	bl	8007034 <aci_gap_set_io_capability>
 800938a:	4603      	mov	r3, r0
 800938c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800938e:	4b1f      	ldr	r3, [pc, #124]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009390:	2201      	movs	r2, #1
 8009392:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009394:	4b1d      	ldr	r3, [pc, #116]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009396:	2208      	movs	r2, #8
 8009398:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800939a:	4b1c      	ldr	r3, [pc, #112]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800939c:	2210      	movs	r2, #16
 800939e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80093a0:	4b1a      	ldr	r3, [pc, #104]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80093a6:	4b19      	ldr	r3, [pc, #100]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093a8:	4a19      	ldr	r2, [pc, #100]	; (8009410 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80093aa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80093ac:	4b17      	ldr	r3, [pc, #92]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80093b2:	4b16      	ldr	r3, [pc, #88]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093b4:	789c      	ldrb	r4, [r3, #2]
 80093b6:	4b15      	ldr	r3, [pc, #84]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093b8:	785d      	ldrb	r5, [r3, #1]
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093bc:	791b      	ldrb	r3, [r3, #4]
 80093be:	4a13      	ldr	r2, [pc, #76]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093c0:	7952      	ldrb	r2, [r2, #5]
 80093c2:	4912      	ldr	r1, [pc, #72]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093c4:	78c9      	ldrb	r1, [r1, #3]
 80093c6:	4811      	ldr	r0, [pc, #68]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093c8:	6880      	ldr	r0, [r0, #8]
 80093ca:	2600      	movs	r6, #0
 80093cc:	9604      	str	r6, [sp, #16]
 80093ce:	9003      	str	r0, [sp, #12]
 80093d0:	9102      	str	r1, [sp, #8]
 80093d2:	9201      	str	r2, [sp, #4]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	2300      	movs	r3, #0
 80093d8:	2201      	movs	r2, #1
 80093da:	4629      	mov	r1, r5
 80093dc:	4620      	mov	r0, r4
 80093de:	f7fd fe7d 	bl	80070dc <aci_gap_set_authentication_requirement>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80093e8:	789b      	ldrb	r3, [r3, #2]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80093ee:	f7fe f8bf 	bl	8007570 <aci_gap_configure_whitelist>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80093f6:	bf00      	nop
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093fe:	bf00      	nop
 8009400:	0800b5f4 	.word	0x0800b5f4
 8009404:	0800b604 	.word	0x0800b604
 8009408:	0800b3e8 	.word	0x0800b3e8
 800940c:	20000c20 	.word	0x20000c20
 8009410:	0001b207 	.word	0x0001b207

08009414 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af08      	add	r7, sp, #32
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800941e:	2392      	movs	r3, #146	; 0x92
 8009420:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009422:	4a12      	ldr	r2, [pc, #72]	; (800946c <Adv_Request+0x58>)
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800942a:	2300      	movs	r3, #0
 800942c:	9306      	str	r3, [sp, #24]
 800942e:	2300      	movs	r3, #0
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	2300      	movs	r3, #0
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	2300      	movs	r3, #0
 8009438:	9303      	str	r3, [sp, #12]
 800943a:	2300      	movs	r3, #0
 800943c:	9302      	str	r3, [sp, #8]
 800943e:	2300      	movs	r3, #0
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	2300      	movs	r3, #0
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	2300      	movs	r3, #0
 8009448:	22a0      	movs	r2, #160	; 0xa0
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	2000      	movs	r0, #0
 800944e:	f7fd fcf7 	bl	8006e40 <aci_gap_set_discoverable>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009456:	4906      	ldr	r1, [pc, #24]	; (8009470 <Adv_Request+0x5c>)
 8009458:	2009      	movs	r0, #9
 800945a:	f7fe f817 	bl	800748c <aci_gap_update_adv_data>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8009462:	bf00      	nop
}
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20000c20 	.word	0x20000c20
 8009470:	20000014 	.word	0x20000014

08009474 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800947a:	f7ff fdb9 	bl	8008ff0 <LL_FLASH_GetUDN>
 800947e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009486:	d023      	beq.n	80094d0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009488:	f7ff fdca 	bl	8009020 <LL_FLASH_GetSTCompanyID>
 800948c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800948e:	f7ff fdbb 	bl	8009008 <LL_FLASH_GetDeviceID>
 8009492:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	b2da      	uxtb	r2, r3
 8009498:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <BleGetBdAddress+0x80>)
 800949a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	4b14      	ldr	r3, [pc, #80]	; (80094f4 <BleGetBdAddress+0x80>)
 80094a4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <BleGetBdAddress+0x80>)
 80094ac:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <BleGetBdAddress+0x80>)
 80094b4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	0a1b      	lsrs	r3, r3, #8
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	4b0d      	ldr	r3, [pc, #52]	; (80094f4 <BleGetBdAddress+0x80>)
 80094be:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <BleGetBdAddress+0x80>)
 80094c8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80094ca:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <BleGetBdAddress+0x80>)
 80094cc:	617b      	str	r3, [r7, #20]
 80094ce:	e00b      	b.n	80094e8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80094d0:	2000      	movs	r0, #0
 80094d2:	f7ff fca7 	bl	8008e24 <OTP_Read>
 80094d6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e001      	b.n	80094e8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80094e4:	4b04      	ldr	r3, [pc, #16]	; (80094f8 <BleGetBdAddress+0x84>)
 80094e6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80094e8:	697b      	ldr	r3, [r7, #20]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000c18 	.word	0x20000c18
 80094f8:	0800b5ec 	.word	0x0800b5ec

080094fc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009502:	4b0a      	ldr	r3, [pc, #40]	; (800952c <Adv_Cancel+0x30>)
 8009504:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009508:	2b05      	cmp	r3, #5
 800950a:	d00a      	beq.n	8009522 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800950c:	2392      	movs	r3, #146	; 0x92
 800950e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009510:	f7fd fc72 	bl	8006df8 <aci_gap_set_non_discoverable>
 8009514:	4603      	mov	r3, r0
 8009516:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <Adv_Cancel+0x30>)
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009520:	bf00      	nop
 8009522:	bf00      	nop
}
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000c20 	.word	0x20000c20

08009530 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009538:	2100      	movs	r1, #0
 800953a:	2002      	movs	r0, #2
 800953c:	f000 fdbe 	bl	800a0bc <UTIL_SEQ_SetTask>

  return;
 8009540:	bf00      	nop
}
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009550:	2001      	movs	r0, #1
 8009552:	f000 fe1f 	bl	800a194 <UTIL_SEQ_SetEvt>

  return;
 8009556:	bf00      	nop
}
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009566:	2001      	movs	r0, #1
 8009568:	f000 fe34 	bl	800a1d4 <UTIL_SEQ_WaitEvt>

  return;
 800956c:	bf00      	nop
}
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	3308      	adds	r3, #8
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fdf4 	bl	8008174 <SVCCTL_UserEvtRx>
 800958c:	4603      	mov	r3, r0
 800958e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800959c:	e003      	b.n	80095a6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
  return;
 80095a4:	bf00      	nop
}
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <BLE_StatusNot+0x16>
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d006      	beq.n	80095ce <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80095c0:	e00b      	b.n	80095da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80095c2:	2307      	movs	r3, #7
 80095c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 fda4 	bl	800a114 <UTIL_SEQ_PauseTask>
      break;
 80095cc:	e005      	b.n	80095da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80095ce:	2307      	movs	r3, #7
 80095d0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fdbe 	bl	800a154 <UTIL_SEQ_ResumeTask>
      break;
 80095d8:	bf00      	nop
  }

  return;
 80095da:	bf00      	nop
}
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <myTask>:
/* mySvc */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 80095e8:	2110      	movs	r1, #16
 80095ea:	480a      	ldr	r0, [pc, #40]	; (8009614 <myTask+0x30>)
 80095ec:	f7f9 fb90 	bl	8002d10 <HAL_GPIO_ReadPin>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d108      	bne.n	8009608 <myTask+0x24>
		UpdateCharData[0] ^= 0x1;
 80095f6:	4b08      	ldr	r3, [pc, #32]	; (8009618 <myTask+0x34>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	f083 0301 	eor.w	r3, r3, #1
 80095fe:	b2da      	uxtb	r2, r3
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <myTask+0x34>)
 8009602:	701a      	strb	r2, [r3, #0]
		Custom_Mycharnotify_Update_Char();
 8009604:	f000 f842 	bl	800968c <Custom_Mycharnotify_Update_Char>
	}
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8009608:	2100      	movs	r1, #0
 800960a:	2004      	movs	r0, #4
 800960c:	f000 fd56 	bl	800a0bc <UTIL_SEQ_SetTask>
}
 8009610:	bf00      	nop
 8009612:	bd80      	pop	{r7, pc}
 8009614:	48000800 	.word	0x48000800
 8009618:	20000ca8 	.word	0x20000ca8

0800961c <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d006      	beq.n	800963a <Custom_STM_App_Notification+0x1e>
 800962c:	2b02      	cmp	r3, #2
 800962e:	dc06      	bgt.n	800963e <Custom_STM_App_Notification+0x22>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <Custom_STM_App_Notification+0x26>
 8009634:	2b01      	cmp	r3, #1
 8009636:	d006      	beq.n	8009646 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009638:	e001      	b.n	800963e <Custom_STM_App_Notification+0x22>
      break;
 800963a:	bf00      	nop
 800963c:	e004      	b.n	8009648 <Custom_STM_App_Notification+0x2c>
      break;
 800963e:	bf00      	nop
 8009640:	e002      	b.n	8009648 <Custom_STM_App_Notification+0x2c>
      break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <Custom_STM_App_Notification+0x2c>
      break;
 8009646:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8009648:	bf00      	nop
}
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <Custom_APP_Notification+0x16>
 8009664:	2b01      	cmp	r3, #1
 8009666:	d002      	beq.n	800966e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009668:	e002      	b.n	8009670 <Custom_APP_Notification+0x1c>
      break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <Custom_APP_Notification+0x1c>
      break;
 800966e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009670:	bf00      	nop
}
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009680:	bf00      	nop
}
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
	...

0800968c <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* mySvc */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/

  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <Custom_Mycharnotify_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <Custom_Mycharnotify_Update_Char+0x24>)
 800969e:	2001      	movs	r0, #1
 80096a0:	f000 f926 	bl	80098f0 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
}
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000ca8 	.word	0x20000ca8

080096b4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3301      	adds	r3, #1
 80096c6:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2bff      	cmp	r3, #255	; 0xff
 80096ce:	d153      	bne.n	8009778 <Custom_STM_Event_Handler+0xc4>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	3302      	adds	r3, #2
 80096d4:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f640 4214 	movw	r2, #3092	; 0xc14
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d043      	beq.n	800976c <Custom_STM_Event_Handler+0xb8>
 80096e4:	f640 4214 	movw	r2, #3092	; 0xc14
 80096e8:	4293      	cmp	r3, r2
 80096ea:	dc41      	bgt.n	8009770 <Custom_STM_Event_Handler+0xbc>
 80096ec:	f640 4201 	movw	r2, #3073	; 0xc01
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d003      	beq.n	80096fc <Custom_STM_Event_Handler+0x48>
 80096f4:	f640 4213 	movw	r2, #3091	; 0xc13
 80096f8:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80096fa:	e03c      	b.n	8009776 <Custom_STM_Event_Handler+0xc2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	3302      	adds	r3, #2
 8009700:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	885b      	ldrh	r3, [r3, #2]
 8009706:	b29b      	uxth	r3, r3
 8009708:	461a      	mov	r2, r3
 800970a:	4b1f      	ldr	r3, [pc, #124]	; (8009788 <Custom_STM_Event_Handler+0xd4>)
 800970c:	889b      	ldrh	r3, [r3, #4]
 800970e:	3302      	adds	r3, #2
 8009710:	429a      	cmp	r2, r3
 8009712:	d119      	bne.n	8009748 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	7a1b      	ldrb	r3, [r3, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <Custom_STM_Event_Handler+0x74>
 8009722:	2b01      	cmp	r3, #1
 8009724:	d008      	beq.n	8009738 <Custom_STM_Event_Handler+0x84>
              break;
 8009726:	e020      	b.n	800976a <Custom_STM_Event_Handler+0xb6>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8009728:	2302      	movs	r3, #2
 800972a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff ff73 	bl	800961c <Custom_STM_App_Notification>
                break;
 8009736:	e018      	b.n	800976a <Custom_STM_Event_Handler+0xb6>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8009738:	2301      	movs	r3, #1
 800973a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800973c:	f107 0308 	add.w	r3, r7, #8
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ff6b 	bl	800961c <Custom_STM_App_Notification>
                break;
 8009746:	e010      	b.n	800976a <Custom_STM_Event_Handler+0xb6>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	885b      	ldrh	r3, [r3, #2]
 800974c:	b29b      	uxth	r3, r3
 800974e:	461a      	mov	r2, r3
 8009750:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <Custom_STM_Event_Handler+0xd4>)
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	3301      	adds	r3, #1
 8009756:	429a      	cmp	r2, r3
 8009758:	d10c      	bne.n	8009774 <Custom_STM_Event_Handler+0xc0>
            return_value = SVCCTL_EvtAckFlowEnable;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8009760:	2101      	movs	r1, #1
 8009762:	480a      	ldr	r0, [pc, #40]	; (800978c <Custom_STM_Event_Handler+0xd8>)
 8009764:	f7f9 fb04 	bl	8002d70 <HAL_GPIO_TogglePin>
          break;
 8009768:	e004      	b.n	8009774 <Custom_STM_Event_Handler+0xc0>
 800976a:	e003      	b.n	8009774 <Custom_STM_Event_Handler+0xc0>
          break;
 800976c:	bf00      	nop
 800976e:	e004      	b.n	800977a <Custom_STM_Event_Handler+0xc6>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009770:	bf00      	nop
 8009772:	e002      	b.n	800977a <Custom_STM_Event_Handler+0xc6>
          break;
 8009774:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009776:	e000      	b.n	800977a <Custom_STM_Event_Handler+0xc6>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009778:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800977a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800977e:	4618      	mov	r0, r3
 8009780:	3728      	adds	r7, #40	; 0x28
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20000da0 	.word	0x20000da0
 800978c:	48000400 	.word	0x48000400

08009790 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	; 0x30
 8009794:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009796:	2392      	movs	r3, #146	; 0x92
 8009798:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800979a:	484f      	ldr	r0, [pc, #316]	; (80098d8 <SVCCTL_InitCustomSvc+0x148>)
 800979c:	f7fe fcd0 	bl	8008140 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 80097a0:	238f      	movs	r3, #143	; 0x8f
 80097a2:	713b      	strb	r3, [r7, #4]
 80097a4:	23e5      	movs	r3, #229	; 0xe5
 80097a6:	717b      	strb	r3, [r7, #5]
 80097a8:	23b3      	movs	r3, #179	; 0xb3
 80097aa:	71bb      	strb	r3, [r7, #6]
 80097ac:	23d5      	movs	r3, #213	; 0xd5
 80097ae:	71fb      	strb	r3, [r7, #7]
 80097b0:	232e      	movs	r3, #46	; 0x2e
 80097b2:	723b      	strb	r3, [r7, #8]
 80097b4:	237f      	movs	r3, #127	; 0x7f
 80097b6:	727b      	strb	r3, [r7, #9]
 80097b8:	234a      	movs	r3, #74	; 0x4a
 80097ba:	72bb      	strb	r3, [r7, #10]
 80097bc:	2398      	movs	r3, #152	; 0x98
 80097be:	72fb      	strb	r3, [r7, #11]
 80097c0:	232a      	movs	r3, #42	; 0x2a
 80097c2:	733b      	strb	r3, [r7, #12]
 80097c4:	2348      	movs	r3, #72	; 0x48
 80097c6:	737b      	strb	r3, [r7, #13]
 80097c8:	237a      	movs	r3, #122	; 0x7a
 80097ca:	73bb      	strb	r3, [r7, #14]
 80097cc:	23cc      	movs	r3, #204	; 0xcc
 80097ce:	73fb      	strb	r3, [r7, #15]
 80097d0:	2300      	movs	r3, #0
 80097d2:	743b      	strb	r3, [r7, #16]
 80097d4:	2300      	movs	r3, #0
 80097d6:	747b      	strb	r3, [r7, #17]
 80097d8:	2300      	movs	r3, #0
 80097da:	74bb      	strb	r3, [r7, #18]
 80097dc:	2300      	movs	r3, #0
 80097de:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80097e0:	1d39      	adds	r1, r7, #4
 80097e2:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <SVCCTL_InitCustomSvc+0x14c>)
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	2306      	movs	r3, #6
 80097e8:	2201      	movs	r2, #1
 80097ea:	2002      	movs	r0, #2
 80097ec:	f7fd ff70 	bl	80076d0 <aci_gatt_add_service>
 80097f0:	4603      	mov	r3, r0
 80097f2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 80097f4:	2319      	movs	r3, #25
 80097f6:	713b      	strb	r3, [r7, #4]
 80097f8:	23ed      	movs	r3, #237	; 0xed
 80097fa:	717b      	strb	r3, [r7, #5]
 80097fc:	2382      	movs	r3, #130	; 0x82
 80097fe:	71bb      	strb	r3, [r7, #6]
 8009800:	23ae      	movs	r3, #174	; 0xae
 8009802:	71fb      	strb	r3, [r7, #7]
 8009804:	23ed      	movs	r3, #237	; 0xed
 8009806:	723b      	strb	r3, [r7, #8]
 8009808:	2321      	movs	r3, #33	; 0x21
 800980a:	727b      	strb	r3, [r7, #9]
 800980c:	234c      	movs	r3, #76	; 0x4c
 800980e:	72bb      	strb	r3, [r7, #10]
 8009810:	239d      	movs	r3, #157	; 0x9d
 8009812:	72fb      	strb	r3, [r7, #11]
 8009814:	2341      	movs	r3, #65	; 0x41
 8009816:	733b      	strb	r3, [r7, #12]
 8009818:	2345      	movs	r3, #69	; 0x45
 800981a:	737b      	strb	r3, [r7, #13]
 800981c:	2322      	movs	r3, #34	; 0x22
 800981e:	73bb      	strb	r3, [r7, #14]
 8009820:	238e      	movs	r3, #142	; 0x8e
 8009822:	73fb      	strb	r3, [r7, #15]
 8009824:	2300      	movs	r3, #0
 8009826:	743b      	strb	r3, [r7, #16]
 8009828:	2300      	movs	r3, #0
 800982a:	747b      	strb	r3, [r7, #17]
 800982c:	2300      	movs	r3, #0
 800982e:	74bb      	strb	r3, [r7, #18]
 8009830:	2300      	movs	r3, #0
 8009832:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8009834:	4b29      	ldr	r3, [pc, #164]	; (80098dc <SVCCTL_InitCustomSvc+0x14c>)
 8009836:	8818      	ldrh	r0, [r3, #0]
 8009838:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <SVCCTL_InitCustomSvc+0x150>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	b29b      	uxth	r3, r3
 800983e:	1d3a      	adds	r2, r7, #4
 8009840:	4928      	ldr	r1, [pc, #160]	; (80098e4 <SVCCTL_InitCustomSvc+0x154>)
 8009842:	9105      	str	r1, [sp, #20]
 8009844:	2100      	movs	r1, #0
 8009846:	9104      	str	r1, [sp, #16]
 8009848:	2110      	movs	r1, #16
 800984a:	9103      	str	r1, [sp, #12]
 800984c:	2101      	movs	r1, #1
 800984e:	9102      	str	r1, [sp, #8]
 8009850:	2100      	movs	r1, #0
 8009852:	9101      	str	r1, [sp, #4]
 8009854:	2108      	movs	r1, #8
 8009856:	9100      	str	r1, [sp, #0]
 8009858:	2102      	movs	r1, #2
 800985a:	f7fe f80f 	bl	800787c <aci_gatt_add_char>
 800985e:	4603      	mov	r3, r0
 8009860:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MYCHARWRITE \n\r");
  }
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8009862:	2319      	movs	r3, #25
 8009864:	713b      	strb	r3, [r7, #4]
 8009866:	23ed      	movs	r3, #237	; 0xed
 8009868:	717b      	strb	r3, [r7, #5]
 800986a:	2382      	movs	r3, #130	; 0x82
 800986c:	71bb      	strb	r3, [r7, #6]
 800986e:	23ae      	movs	r3, #174	; 0xae
 8009870:	71fb      	strb	r3, [r7, #7]
 8009872:	23ed      	movs	r3, #237	; 0xed
 8009874:	723b      	strb	r3, [r7, #8]
 8009876:	2321      	movs	r3, #33	; 0x21
 8009878:	727b      	strb	r3, [r7, #9]
 800987a:	234c      	movs	r3, #76	; 0x4c
 800987c:	72bb      	strb	r3, [r7, #10]
 800987e:	239d      	movs	r3, #157	; 0x9d
 8009880:	72fb      	strb	r3, [r7, #11]
 8009882:	2341      	movs	r3, #65	; 0x41
 8009884:	733b      	strb	r3, [r7, #12]
 8009886:	2345      	movs	r3, #69	; 0x45
 8009888:	737b      	strb	r3, [r7, #13]
 800988a:	2322      	movs	r3, #34	; 0x22
 800988c:	73bb      	strb	r3, [r7, #14]
 800988e:	238e      	movs	r3, #142	; 0x8e
 8009890:	73fb      	strb	r3, [r7, #15]
 8009892:	2301      	movs	r3, #1
 8009894:	743b      	strb	r3, [r7, #16]
 8009896:	2300      	movs	r3, #0
 8009898:	747b      	strb	r3, [r7, #17]
 800989a:	2300      	movs	r3, #0
 800989c:	74bb      	strb	r3, [r7, #18]
 800989e:	2300      	movs	r3, #0
 80098a0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <SVCCTL_InitCustomSvc+0x14c>)
 80098a4:	8818      	ldrh	r0, [r3, #0]
 80098a6:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <SVCCTL_InitCustomSvc+0x158>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	1d3a      	adds	r2, r7, #4
 80098ae:	490f      	ldr	r1, [pc, #60]	; (80098ec <SVCCTL_InitCustomSvc+0x15c>)
 80098b0:	9105      	str	r1, [sp, #20]
 80098b2:	2100      	movs	r1, #0
 80098b4:	9104      	str	r1, [sp, #16]
 80098b6:	2110      	movs	r1, #16
 80098b8:	9103      	str	r1, [sp, #12]
 80098ba:	2107      	movs	r1, #7
 80098bc:	9102      	str	r1, [sp, #8]
 80098be:	2100      	movs	r1, #0
 80098c0:	9101      	str	r1, [sp, #4]
 80098c2:	2110      	movs	r1, #16
 80098c4:	9100      	str	r1, [sp, #0]
 80098c6:	2102      	movs	r1, #2
 80098c8:	f7fd ffd8 	bl	800787c <aci_gatt_add_char>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80098d0:	bf00      	nop
}
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	080096b5 	.word	0x080096b5
 80098dc:	20000da0 	.word	0x20000da0
 80098e0:	2000001d 	.word	0x2000001d
 80098e4:	20000da2 	.word	0x20000da2
 80098e8:	2000001e 	.word	0x2000001e
 80098ec:	20000da4 	.word	0x20000da4

080098f0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af02      	add	r7, sp, #8
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80098fc:	2392      	movs	r3, #146	; 0x92
 80098fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <Custom_STM_App_Update_Char+0x1c>
 8009906:	2b01      	cmp	r3, #1
 8009908:	d00f      	beq.n	800992a <Custom_STM_App_Update_Char+0x3a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800990a:	e01d      	b.n	8009948 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800990c:	4b11      	ldr	r3, [pc, #68]	; (8009954 <Custom_STM_App_Update_Char+0x64>)
 800990e:	8818      	ldrh	r0, [r3, #0]
 8009910:	4b10      	ldr	r3, [pc, #64]	; (8009954 <Custom_STM_App_Update_Char+0x64>)
 8009912:	8859      	ldrh	r1, [r3, #2]
 8009914:	4b10      	ldr	r3, [pc, #64]	; (8009958 <Custom_STM_App_Update_Char+0x68>)
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	4613      	mov	r3, r2
 800991e:	2200      	movs	r2, #0
 8009920:	f7fe f8b4 	bl	8007a8c <aci_gatt_update_char_value>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]
      break;
 8009928:	e00e      	b.n	8009948 <Custom_STM_App_Update_Char+0x58>
      ret = aci_gatt_update_char_value(CustomContext.CustomMysvcHdle,
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <Custom_STM_App_Update_Char+0x64>)
 800992c:	8818      	ldrh	r0, [r3, #0]
 800992e:	4b09      	ldr	r3, [pc, #36]	; (8009954 <Custom_STM_App_Update_Char+0x64>)
 8009930:	8899      	ldrh	r1, [r3, #4]
 8009932:	4b0a      	ldr	r3, [pc, #40]	; (800995c <Custom_STM_App_Update_Char+0x6c>)
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	4613      	mov	r3, r2
 800993c:	2200      	movs	r2, #0
 800993e:	f7fe f8a5 	bl	8007a8c <aci_gatt_update_char_value>
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]
      break;
 8009946:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000da0 	.word	0x20000da0
 8009958:	2000001d 	.word	0x2000001d
 800995c:	2000001e 	.word	0x2000001e

08009960 <LL_PWR_EnableBootC2>:
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <LL_PWR_EnableBootC2+0x1c>)
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	4a04      	ldr	r2, [pc, #16]	; (800997c <LL_PWR_EnableBootC2+0x1c>)
 800996a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800996e:	60d3      	str	r3, [r2, #12]
}
 8009970:	bf00      	nop
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	58000400 	.word	0x58000400

08009980 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009988:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800998a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800998e:	4905      	ldr	r1, [pc, #20]	; (80099a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4313      	orrs	r3, r2
 8009994:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	58000800 	.word	0x58000800

080099a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80099b2:	6a1a      	ldr	r2, [r3, #32]
 80099b4:	4904      	ldr	r1, [pc, #16]	; (80099c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	620b      	str	r3, [r1, #32]
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	58000800 	.word	0x58000800

080099cc <LL_AHB3_GRP1_EnableClock>:
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80099d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80099e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4013      	ands	r3, r2
 80099ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80099f0:	68fb      	ldr	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a0a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a1e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4013      	ands	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <LL_C1_IPCC_EnableIT_TXF>:
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	601a      	str	r2, [r3, #0]
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <LL_C1_IPCC_EnableIT_RXO>:
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f043 0201 	orr.w	r2, r3, #1
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	601a      	str	r2, [r3, #0]
}
 8009a6a:	bf00      	nop
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	401a      	ands	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	605a      	str	r2, [r3, #4]
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	041b      	lsls	r3, r3, #16
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	605a      	str	r2, [r3, #4]
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	609a      	str	r2, [r3, #8]
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	041a      	lsls	r2, r3, #16
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	4013      	ands	r3, r2
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d101      	bne.n	8009b3a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e000      	b.n	8009b3c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d101      	bne.n	8009b64 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009b60:	2301      	movs	r3, #1
 8009b62:	e000      	b.n	8009b66 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
	...

08009b74 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009b78:	2102      	movs	r1, #2
 8009b7a:	4819      	ldr	r0, [pc, #100]	; (8009be0 <HW_IPCC_Rx_Handler+0x6c>)
 8009b7c:	f7ff ffe4 	bl	8009b48 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <HW_IPCC_Rx_Handler+0x26>
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <HW_IPCC_Rx_Handler+0x6c>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	43db      	mvns	r3, r3
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009b94:	f000 f8da 	bl	8009d4c <HW_IPCC_SYS_EvtHandler>
 8009b98:	e01f      	b.n	8009bda <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	4810      	ldr	r0, [pc, #64]	; (8009be0 <HW_IPCC_Rx_Handler+0x6c>)
 8009b9e:	f7ff ffd3 	bl	8009b48 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d008      	beq.n	8009bba <HW_IPCC_Rx_Handler+0x46>
 8009ba8:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <HW_IPCC_Rx_Handler+0x6c>)
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8009bb4:	f000 f88e 	bl	8009cd4 <HW_IPCC_BLE_EvtHandler>
 8009bb8:	e00f      	b.n	8009bda <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009bba:	2108      	movs	r1, #8
 8009bbc:	4808      	ldr	r0, [pc, #32]	; (8009be0 <HW_IPCC_Rx_Handler+0x6c>)
 8009bbe:	f7ff ffc3 	bl	8009b48 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <HW_IPCC_Rx_Handler+0x68>
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HW_IPCC_Rx_Handler+0x6c>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	f003 0308 	and.w	r3, r3, #8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009bd6:	f000 f905 	bl	8009de4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
}
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	58000c00 	.word	0x58000c00

08009be4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009be8:	2102      	movs	r1, #2
 8009bea:	481a      	ldr	r0, [pc, #104]	; (8009c54 <HW_IPCC_Tx_Handler+0x70>)
 8009bec:	f7ff ff97 	bl	8009b1e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <HW_IPCC_Tx_Handler+0x26>
 8009bf6:	4b17      	ldr	r3, [pc, #92]	; (8009c54 <HW_IPCC_Tx_Handler+0x70>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009c04:	f000 f896 	bl	8009d34 <HW_IPCC_SYS_CmdEvtHandler>
 8009c08:	e020      	b.n	8009c4c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009c0a:	2108      	movs	r1, #8
 8009c0c:	4811      	ldr	r0, [pc, #68]	; (8009c54 <HW_IPCC_Tx_Handler+0x70>)
 8009c0e:	f7ff ff86 	bl	8009b1e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d109      	bne.n	8009c2c <HW_IPCC_Tx_Handler+0x48>
 8009c18:	4b0e      	ldr	r3, [pc, #56]	; (8009c54 <HW_IPCC_Tx_Handler+0x70>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	43db      	mvns	r3, r3
 8009c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009c26:	f000 f8bf 	bl	8009da8 <HW_IPCC_MM_FreeBufHandler>
 8009c2a:	e00f      	b.n	8009c4c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009c2c:	2120      	movs	r1, #32
 8009c2e:	4809      	ldr	r0, [pc, #36]	; (8009c54 <HW_IPCC_Tx_Handler+0x70>)
 8009c30:	f7ff ff75 	bl	8009b1e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <HW_IPCC_Tx_Handler+0x6a>
 8009c3a:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <HW_IPCC_Tx_Handler+0x70>)
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	43db      	mvns	r3, r3
 8009c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009c48:	f000 f850 	bl	8009cec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
}
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	58000c00 	.word	0x58000c00

08009c58 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009c5c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009c60:	f7ff fecd 	bl	80099fe <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009c64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009c68:	f7ff fe9e 	bl	80099a8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009c6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009c70:	f7ff fe86 	bl	8009980 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009c74:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009c76:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009c78:	f7ff fe72 	bl	8009960 <LL_PWR_EnableBootC2>

  return;
 8009c7c:	bf00      	nop
}
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009c84:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009c88:	f7ff fea0 	bl	80099cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009c8c:	4806      	ldr	r0, [pc, #24]	; (8009ca8 <HW_IPCC_Init+0x28>)
 8009c8e:	f7ff fee2 	bl	8009a56 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009c92:	4805      	ldr	r0, [pc, #20]	; (8009ca8 <HW_IPCC_Init+0x28>)
 8009c94:	f7ff fecf 	bl	8009a36 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009c98:	202c      	movs	r0, #44	; 0x2c
 8009c9a:	f7f8 fe84 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009c9e:	202d      	movs	r0, #45	; 0x2d
 8009ca0:	f7f8 fe81 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  return;
 8009ca4:	bf00      	nop
}
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	58000c00 	.word	0x58000c00

08009cac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	4802      	ldr	r0, [pc, #8]	; (8009cbc <HW_IPCC_BLE_Init+0x10>)
 8009cb4:	f7ff ff04 	bl	8009ac0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009cb8:	bf00      	nop
}
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	58000c00 	.word	0x58000c00

08009cc0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	4802      	ldr	r0, [pc, #8]	; (8009cd0 <HW_IPCC_BLE_SendCmd+0x10>)
 8009cc8:	f7ff ff1a 	bl	8009b00 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009ccc:	bf00      	nop
}
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	58000c00 	.word	0x58000c00

08009cd4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009cd8:	f7fe feec 	bl	8008ab4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009cdc:	2101      	movs	r1, #1
 8009cde:	4802      	ldr	r0, [pc, #8]	; (8009ce8 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009ce0:	f7ff ff00 	bl	8009ae4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009ce4:	bf00      	nop
}
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	58000c00 	.word	0x58000c00

08009cec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009cf0:	2120      	movs	r1, #32
 8009cf2:	4803      	ldr	r0, [pc, #12]	; (8009d00 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009cf4:	f7ff fed2 	bl	8009a9c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009cf8:	f7fe ff0c 	bl	8008b14 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009cfc:	bf00      	nop
}
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	58000c00 	.word	0x58000c00

08009d04 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009d08:	2102      	movs	r1, #2
 8009d0a:	4802      	ldr	r0, [pc, #8]	; (8009d14 <HW_IPCC_SYS_Init+0x10>)
 8009d0c:	f7ff fed8 	bl	8009ac0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009d10:	bf00      	nop
}
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	58000c00 	.word	0x58000c00

08009d18 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d1c:	2102      	movs	r1, #2
 8009d1e:	4804      	ldr	r0, [pc, #16]	; (8009d30 <HW_IPCC_SYS_SendCmd+0x18>)
 8009d20:	f7ff feee 	bl	8009b00 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d24:	2102      	movs	r1, #2
 8009d26:	4802      	ldr	r0, [pc, #8]	; (8009d30 <HW_IPCC_SYS_SendCmd+0x18>)
 8009d28:	f7ff fea5 	bl	8009a76 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009d2c:	bf00      	nop
}
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	58000c00 	.word	0x58000c00

08009d34 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d38:	2102      	movs	r1, #2
 8009d3a:	4803      	ldr	r0, [pc, #12]	; (8009d48 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009d3c:	f7ff feae 	bl	8009a9c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009d40:	f7fe ff38 	bl	8008bb4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009d44:	bf00      	nop
}
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	58000c00 	.word	0x58000c00

08009d4c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009d50:	f7fe ff46 	bl	8008be0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009d54:	2102      	movs	r1, #2
 8009d56:	4802      	ldr	r0, [pc, #8]	; (8009d60 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009d58:	f7ff fec4 	bl	8009ae4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009d5c:	bf00      	nop
}
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	58000c00 	.word	0x58000c00

08009d64 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009d6c:	2108      	movs	r1, #8
 8009d6e:	480c      	ldr	r0, [pc, #48]	; (8009da0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009d70:	f7ff fed5 	bl	8009b1e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009d7a:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009d80:	2108      	movs	r1, #8
 8009d82:	4807      	ldr	r0, [pc, #28]	; (8009da0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009d84:	f7ff fe77 	bl	8009a76 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009d88:	e006      	b.n	8009d98 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009d8e:	2108      	movs	r1, #8
 8009d90:	4803      	ldr	r0, [pc, #12]	; (8009da0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009d92:	f7ff feb5 	bl	8009b00 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009d96:	bf00      	nop
}
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	58000c00 	.word	0x58000c00
 8009da4:	20000da8 	.word	0x20000da8

08009da8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009dac:	2108      	movs	r1, #8
 8009dae:	4806      	ldr	r0, [pc, #24]	; (8009dc8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009db0:	f7ff fe74 	bl	8009a9c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009dba:	2108      	movs	r1, #8
 8009dbc:	4802      	ldr	r0, [pc, #8]	; (8009dc8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009dbe:	f7ff fe9f 	bl	8009b00 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009dc2:	bf00      	nop
}
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	58000c00 	.word	0x58000c00
 8009dcc:	20000da8 	.word	0x20000da8

08009dd0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	4802      	ldr	r0, [pc, #8]	; (8009de0 <HW_IPCC_TRACES_Init+0x10>)
 8009dd8:	f7ff fe72 	bl	8009ac0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009ddc:	bf00      	nop
}
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	58000c00 	.word	0x58000c00

08009de4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009de8:	f7fe ffa2 	bl	8008d30 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009dec:	2108      	movs	r1, #8
 8009dee:	4802      	ldr	r0, [pc, #8]	; (8009df8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009df0:	f7ff fe78 	bl	8009ae4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009df4:	bf00      	nop
}
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	58000c00 	.word	0x58000c00

08009dfc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <UTIL_LPM_Init+0x1c>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e06:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <UTIL_LPM_Init+0x20>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009e0c:	bf00      	nop
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000dac 	.word	0x20000dac
 8009e1c:	20000db0 	.word	0x20000db0

08009e20 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e30:	613b      	str	r3, [r7, #16]
  return(result);
 8009e32:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e36:	b672      	cpsid	i
}
 8009e38:	bf00      	nop
  
  switch(state)
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <UTIL_LPM_SetOffMode+0x32>
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d10e      	bne.n	8009e62 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <UTIL_LPM_SetOffMode+0x5c>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	4a0b      	ldr	r2, [pc, #44]	; (8009e7c <UTIL_LPM_SetOffMode+0x5c>)
 8009e4e:	6013      	str	r3, [r2, #0]
      break;
 8009e50:	e008      	b.n	8009e64 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	43da      	mvns	r2, r3
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <UTIL_LPM_SetOffMode+0x5c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	4a07      	ldr	r2, [pc, #28]	; (8009e7c <UTIL_LPM_SetOffMode+0x5c>)
 8009e5e:	6013      	str	r3, [r2, #0]
      break;
 8009e60:	e000      	b.n	8009e64 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009e62:	bf00      	nop
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f383 8810 	msr	PRIMASK, r3
}
 8009e6e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009e70:	bf00      	nop
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000db0 	.word	0x20000db0

08009e80 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b090      	sub	sp, #64	; 0x40
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009e88:	4b73      	ldr	r3, [pc, #460]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009e8e:	4b72      	ldr	r3, [pc, #456]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4013      	ands	r3, r2
 8009e96:	4a70      	ldr	r2, [pc, #448]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 8009e98:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009e9a:	4b70      	ldr	r3, [pc, #448]	; (800a05c <UTIL_SEQ_Run+0x1dc>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009ea0:	4b6f      	ldr	r3, [pc, #444]	; (800a060 <UTIL_SEQ_Run+0x1e0>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009ea6:	4b6f      	ldr	r3, [pc, #444]	; (800a064 <UTIL_SEQ_Run+0x1e4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009eac:	4b6e      	ldr	r3, [pc, #440]	; (800a068 <UTIL_SEQ_Run+0x1e8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009eb2:	e08d      	b.n	8009fd0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009eb8:	e002      	b.n	8009ec0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009ec0:	4a6a      	ldr	r2, [pc, #424]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	401a      	ands	r2, r3
 8009ecc:	4b62      	ldr	r3, [pc, #392]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0f1      	beq.n	8009eba <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009ed6:	4a65      	ldr	r2, [pc, #404]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eda:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	401a      	ands	r2, r3
 8009ee2:	4b5d      	ldr	r3, [pc, #372]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009eea:	4a60      	ldr	r2, [pc, #384]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009efc:	4a5b      	ldr	r2, [pc, #364]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f00:	00db      	lsls	r3, r3, #3
 8009f02:	4413      	add	r3, r2
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009f0a:	4a58      	ldr	r2, [pc, #352]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	4413      	add	r3, r2
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	4013      	ands	r3, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 f9b3 	bl	800a284 <SEQ_BitPosition>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	461a      	mov	r2, r3
 8009f22:	4b53      	ldr	r3, [pc, #332]	; (800a070 <UTIL_SEQ_Run+0x1f0>)
 8009f24:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009f26:	4a51      	ldr	r2, [pc, #324]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4413      	add	r3, r2
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	4b4f      	ldr	r3, [pc, #316]	; (800a070 <UTIL_SEQ_Run+0x1f0>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2101      	movs	r1, #1
 8009f36:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3a:	43db      	mvns	r3, r3
 8009f3c:	401a      	ands	r2, r3
 8009f3e:	494b      	ldr	r1, [pc, #300]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	440b      	add	r3, r1
 8009f46:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f48:	f3ef 8310 	mrs	r3, PRIMASK
 8009f4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f4e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009f50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f52:	b672      	cpsid	i
}
 8009f54:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009f56:	4b46      	ldr	r3, [pc, #280]	; (800a070 <UTIL_SEQ_Run+0x1f0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f60:	43da      	mvns	r2, r3
 8009f62:	4b3e      	ldr	r3, [pc, #248]	; (800a05c <UTIL_SEQ_Run+0x1dc>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4013      	ands	r3, r2
 8009f68:	4a3c      	ldr	r2, [pc, #240]	; (800a05c <UTIL_SEQ_Run+0x1dc>)
 8009f6a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f70:	e013      	b.n	8009f9a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f74:	3b01      	subs	r3, #1
 8009f76:	4a3d      	ldr	r2, [pc, #244]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009f78:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009f7c:	4b3c      	ldr	r3, [pc, #240]	; (800a070 <UTIL_SEQ_Run+0x1f0>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2201      	movs	r2, #1
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43da      	mvns	r2, r3
 8009f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	400a      	ands	r2, r1
 8009f8e:	4937      	ldr	r1, [pc, #220]	; (800a06c <UTIL_SEQ_Run+0x1ec>)
 8009f90:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f96:	3b01      	subs	r3, #1
 8009f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e8      	bne.n	8009f72 <UTIL_SEQ_Run+0xf2>
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f383 8810 	msr	PRIMASK, r3
}
 8009faa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009fac:	4b30      	ldr	r3, [pc, #192]	; (800a070 <UTIL_SEQ_Run+0x1f0>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a30      	ldr	r2, [pc, #192]	; (800a074 <UTIL_SEQ_Run+0x1f4>)
 8009fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fb6:	4798      	blx	r3

    local_taskset = TaskSet;
 8009fb8:	4b28      	ldr	r3, [pc, #160]	; (800a05c <UTIL_SEQ_Run+0x1dc>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009fbe:	4b28      	ldr	r3, [pc, #160]	; (800a060 <UTIL_SEQ_Run+0x1e0>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009fc4:	4b27      	ldr	r3, [pc, #156]	; (800a064 <UTIL_SEQ_Run+0x1e4>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009fca:	4b27      	ldr	r3, [pc, #156]	; (800a068 <UTIL_SEQ_Run+0x1e8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	401a      	ands	r2, r3
 8009fd6:	4b20      	ldr	r3, [pc, #128]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d005      	beq.n	8009fec <UTIL_SEQ_Run+0x16c>
 8009fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f43f af64 	beq.w	8009eb4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009fec:	4b20      	ldr	r3, [pc, #128]	; (800a070 <UTIL_SEQ_Run+0x1f0>)
 8009fee:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009ff4:	f000 f938 	bl	800a268 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ffc:	613b      	str	r3, [r7, #16]
  return(result);
 8009ffe:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a000:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a002:	b672      	cpsid	i
}
 800a004:	bf00      	nop
  local_taskset = TaskSet;
 800a006:	4b15      	ldr	r3, [pc, #84]	; (800a05c <UTIL_SEQ_Run+0x1dc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a00c:	4b14      	ldr	r3, [pc, #80]	; (800a060 <UTIL_SEQ_Run+0x1e0>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a012:	4b14      	ldr	r3, [pc, #80]	; (800a064 <UTIL_SEQ_Run+0x1e4>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	401a      	ands	r2, r3
 800a01e:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4013      	ands	r3, r2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d107      	bne.n	800a038 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <UTIL_SEQ_Run+0x1e8>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02e:	4013      	ands	r3, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a034:	f7f6 feb8 	bl	8000da8 <UTIL_SEQ_Idle>
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f383 8810 	msr	PRIMASK, r3
}
 800a042:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a044:	f000 f917 	bl	800a276 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a048:	4a03      	ldr	r2, [pc, #12]	; (800a058 <UTIL_SEQ_Run+0x1d8>)
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	6013      	str	r3, [r2, #0]

  return;
 800a04e:	bf00      	nop
}
 800a050:	3740      	adds	r7, #64	; 0x40
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000024 	.word	0x20000024
 800a05c:	20000db4 	.word	0x20000db4
 800a060:	20000db8 	.word	0x20000db8
 800a064:	20000020 	.word	0x20000020
 800a068:	20000dbc 	.word	0x20000dbc
 800a06c:	20000e44 	.word	0x20000e44
 800a070:	20000dc0 	.word	0x20000dc0
 800a074:	20000dc4 	.word	0x20000dc4

0800a078 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a084:	f3ef 8310 	mrs	r3, PRIMASK
 800a088:	617b      	str	r3, [r7, #20]
  return(result);
 800a08a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a08c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a08e:	b672      	cpsid	i
}
 800a090:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 f8f6 	bl	800a284 <SEQ_BitPosition>
 800a098:	4603      	mov	r3, r0
 800a09a:	4619      	mov	r1, r3
 800a09c:	4a06      	ldr	r2, [pc, #24]	; (800a0b8 <UTIL_SEQ_RegTask+0x40>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	f383 8810 	msr	PRIMASK, r3
}
 800a0ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a0b0:	bf00      	nop
}
 800a0b2:	3720      	adds	r7, #32
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20000dc4 	.word	0x20000dc4

0800a0bc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a0ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0d0:	b672      	cpsid	i
}
 800a0d2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a0d4:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <UTIL_SEQ_SetTask+0x50>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	4a0b      	ldr	r2, [pc, #44]	; (800a10c <UTIL_SEQ_SetTask+0x50>)
 800a0de:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a0e0:	4a0b      	ldr	r2, [pc, #44]	; (800a110 <UTIL_SEQ_SetTask+0x54>)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	4908      	ldr	r1, [pc, #32]	; (800a110 <UTIL_SEQ_SetTask+0x54>)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f383 8810 	msr	PRIMASK, r3
}
 800a0fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a100:	bf00      	nop
}
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20000db4 	.word	0x20000db4
 800a110:	20000e44 	.word	0x20000e44

0800a114 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a11c:	f3ef 8310 	mrs	r3, PRIMASK
 800a120:	60fb      	str	r3, [r7, #12]
  return(result);
 800a122:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a126:	b672      	cpsid	i
}
 800a128:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	43da      	mvns	r2, r3
 800a12e:	4b08      	ldr	r3, [pc, #32]	; (800a150 <UTIL_SEQ_PauseTask+0x3c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4013      	ands	r3, r2
 800a134:	4a06      	ldr	r2, [pc, #24]	; (800a150 <UTIL_SEQ_PauseTask+0x3c>)
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f383 8810 	msr	PRIMASK, r3
}
 800a142:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a144:	bf00      	nop
}
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	20000020 	.word	0x20000020

0800a154 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a15c:	f3ef 8310 	mrs	r3, PRIMASK
 800a160:	60fb      	str	r3, [r7, #12]
  return(result);
 800a162:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a166:	b672      	cpsid	i
}
 800a168:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a16a:	4b09      	ldr	r3, [pc, #36]	; (800a190 <UTIL_SEQ_ResumeTask+0x3c>)
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4313      	orrs	r3, r2
 800a172:	4a07      	ldr	r2, [pc, #28]	; (800a190 <UTIL_SEQ_ResumeTask+0x3c>)
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f383 8810 	msr	PRIMASK, r3
}
 800a180:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a182:	bf00      	nop
}
 800a184:	371c      	adds	r7, #28
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	20000020 	.word	0x20000020

0800a194 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a19c:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a6:	b672      	cpsid	i
}
 800a1a8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <UTIL_SEQ_SetEvt+0x3c>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	4a07      	ldr	r2, [pc, #28]	; (800a1d0 <UTIL_SEQ_SetEvt+0x3c>)
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f383 8810 	msr	PRIMASK, r3
}
 800a1c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a1c2:	bf00      	nop
}
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	20000db8 	.word	0x20000db8

0800a1d4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a1dc:	4b1f      	ldr	r3, [pc, #124]	; (800a25c <UTIL_SEQ_WaitEvt+0x88>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a1e2:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <UTIL_SEQ_WaitEvt+0x88>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d102      	bne.n	800a1f2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e005      	b.n	800a1fe <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a1f2:	4b1a      	ldr	r3, [pc, #104]	; (800a25c <UTIL_SEQ_WaitEvt+0x88>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a1fe:	4b18      	ldr	r3, [pc, #96]	; (800a260 <UTIL_SEQ_WaitEvt+0x8c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a204:	4a16      	ldr	r2, [pc, #88]	; (800a260 <UTIL_SEQ_WaitEvt+0x8c>)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a20a:	e003      	b.n	800a214 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	69f8      	ldr	r0, [r7, #28]
 800a210:	f7f6 fdd1 	bl	8000db6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a214:	4b13      	ldr	r3, [pc, #76]	; (800a264 <UTIL_SEQ_WaitEvt+0x90>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d0f5      	beq.n	800a20c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a220:	4a0e      	ldr	r2, [pc, #56]	; (800a25c <UTIL_SEQ_WaitEvt+0x88>)
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a226:	f3ef 8310 	mrs	r3, PRIMASK
 800a22a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a22c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a22e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a230:	b672      	cpsid	i
}
 800a232:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	43da      	mvns	r2, r3
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <UTIL_SEQ_WaitEvt+0x90>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4013      	ands	r3, r2
 800a23e:	4a09      	ldr	r2, [pc, #36]	; (800a264 <UTIL_SEQ_WaitEvt+0x90>)
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f383 8810 	msr	PRIMASK, r3
}
 800a24c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a24e:	4a04      	ldr	r2, [pc, #16]	; (800a260 <UTIL_SEQ_WaitEvt+0x8c>)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	6013      	str	r3, [r2, #0]
  return;
 800a254:	bf00      	nop
}
 800a256:	3720      	adds	r7, #32
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20000dc0 	.word	0x20000dc0
 800a260:	20000dbc 	.word	0x20000dbc
 800a264:	20000db8 	.word	0x20000db8

0800a268 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a26c:	bf00      	nop
}
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a276:	b480      	push	{r7}
 800a278:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a27a:	bf00      	nop
}
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	0c1b      	lsrs	r3, r3, #16
 800a298:	041b      	lsls	r3, r3, #16
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <SEQ_BitPosition+0x24>
 800a29e:	2310      	movs	r3, #16
 800a2a0:	73fb      	strb	r3, [r7, #15]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	041b      	lsls	r3, r3, #16
 800a2a6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d105      	bne.n	800a2be <SEQ_BitPosition+0x3a>
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	73fb      	strb	r3, [r7, #15]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	021b      	lsls	r3, r3, #8
 800a2bc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <SEQ_BitPosition+0x50>
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	73fb      	strb	r3, [r7, #15]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	011b      	lsls	r3, r3, #4
 800a2d2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	0f1b      	lsrs	r3, r3, #28
 800a2d8:	4a07      	ldr	r2, [pc, #28]	; (800a2f8 <SEQ_BitPosition+0x74>)
 800a2da:	5cd2      	ldrb	r2, [r2, r3]
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4413      	add	r3, r2
 800a2e0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	f1c3 031f 	rsb	r3, r3, #31
 800a2e8:	b2db      	uxtb	r3, r3
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	0800b614 	.word	0x0800b614

0800a2fc <__errno>:
 800a2fc:	4b01      	ldr	r3, [pc, #4]	; (800a304 <__errno+0x8>)
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20000028 	.word	0x20000028

0800a308 <__libc_init_array>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	4d0d      	ldr	r5, [pc, #52]	; (800a340 <__libc_init_array+0x38>)
 800a30c:	4c0d      	ldr	r4, [pc, #52]	; (800a344 <__libc_init_array+0x3c>)
 800a30e:	1b64      	subs	r4, r4, r5
 800a310:	10a4      	asrs	r4, r4, #2
 800a312:	2600      	movs	r6, #0
 800a314:	42a6      	cmp	r6, r4
 800a316:	d109      	bne.n	800a32c <__libc_init_array+0x24>
 800a318:	4d0b      	ldr	r5, [pc, #44]	; (800a348 <__libc_init_array+0x40>)
 800a31a:	4c0c      	ldr	r4, [pc, #48]	; (800a34c <__libc_init_array+0x44>)
 800a31c:	f000 ffbc 	bl	800b298 <_init>
 800a320:	1b64      	subs	r4, r4, r5
 800a322:	10a4      	asrs	r4, r4, #2
 800a324:	2600      	movs	r6, #0
 800a326:	42a6      	cmp	r6, r4
 800a328:	d105      	bne.n	800a336 <__libc_init_array+0x2e>
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a330:	4798      	blx	r3
 800a332:	3601      	adds	r6, #1
 800a334:	e7ee      	b.n	800a314 <__libc_init_array+0xc>
 800a336:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33a:	4798      	blx	r3
 800a33c:	3601      	adds	r6, #1
 800a33e:	e7f2      	b.n	800a326 <__libc_init_array+0x1e>
 800a340:	0800b6c4 	.word	0x0800b6c4
 800a344:	0800b6c4 	.word	0x0800b6c4
 800a348:	0800b6c4 	.word	0x0800b6c4
 800a34c:	0800b6c8 	.word	0x0800b6c8

0800a350 <memcpy>:
 800a350:	440a      	add	r2, r1
 800a352:	4291      	cmp	r1, r2
 800a354:	f100 33ff 	add.w	r3, r0, #4294967295
 800a358:	d100      	bne.n	800a35c <memcpy+0xc>
 800a35a:	4770      	bx	lr
 800a35c:	b510      	push	{r4, lr}
 800a35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a366:	4291      	cmp	r1, r2
 800a368:	d1f9      	bne.n	800a35e <memcpy+0xe>
 800a36a:	bd10      	pop	{r4, pc}

0800a36c <memset>:
 800a36c:	4402      	add	r2, r0
 800a36e:	4603      	mov	r3, r0
 800a370:	4293      	cmp	r3, r2
 800a372:	d100      	bne.n	800a376 <memset+0xa>
 800a374:	4770      	bx	lr
 800a376:	f803 1b01 	strb.w	r1, [r3], #1
 800a37a:	e7f9      	b.n	800a370 <memset+0x4>

0800a37c <iprintf>:
 800a37c:	b40f      	push	{r0, r1, r2, r3}
 800a37e:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <iprintf+0x2c>)
 800a380:	b513      	push	{r0, r1, r4, lr}
 800a382:	681c      	ldr	r4, [r3, #0]
 800a384:	b124      	cbz	r4, 800a390 <iprintf+0x14>
 800a386:	69a3      	ldr	r3, [r4, #24]
 800a388:	b913      	cbnz	r3, 800a390 <iprintf+0x14>
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 f866 	bl	800a45c <__sinit>
 800a390:	ab05      	add	r3, sp, #20
 800a392:	9a04      	ldr	r2, [sp, #16]
 800a394:	68a1      	ldr	r1, [r4, #8]
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 f9bd 	bl	800a718 <_vfiprintf_r>
 800a39e:	b002      	add	sp, #8
 800a3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a4:	b004      	add	sp, #16
 800a3a6:	4770      	bx	lr
 800a3a8:	20000028 	.word	0x20000028

0800a3ac <std>:
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	b510      	push	{r4, lr}
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ba:	6083      	str	r3, [r0, #8]
 800a3bc:	8181      	strh	r1, [r0, #12]
 800a3be:	6643      	str	r3, [r0, #100]	; 0x64
 800a3c0:	81c2      	strh	r2, [r0, #14]
 800a3c2:	6183      	str	r3, [r0, #24]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	2208      	movs	r2, #8
 800a3c8:	305c      	adds	r0, #92	; 0x5c
 800a3ca:	f7ff ffcf 	bl	800a36c <memset>
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <std+0x38>)
 800a3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3d2:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <std+0x3c>)
 800a3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <std+0x40>)
 800a3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <std+0x44>)
 800a3dc:	6224      	str	r4, [r4, #32]
 800a3de:	6323      	str	r3, [r4, #48]	; 0x30
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800acc1 	.word	0x0800acc1
 800a3e8:	0800ace3 	.word	0x0800ace3
 800a3ec:	0800ad1b 	.word	0x0800ad1b
 800a3f0:	0800ad3f 	.word	0x0800ad3f

0800a3f4 <_cleanup_r>:
 800a3f4:	4901      	ldr	r1, [pc, #4]	; (800a3fc <_cleanup_r+0x8>)
 800a3f6:	f000 b8af 	b.w	800a558 <_fwalk_reent>
 800a3fa:	bf00      	nop
 800a3fc:	0800b019 	.word	0x0800b019

0800a400 <__sfmoreglue>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	2268      	movs	r2, #104	; 0x68
 800a404:	1e4d      	subs	r5, r1, #1
 800a406:	4355      	muls	r5, r2
 800a408:	460e      	mov	r6, r1
 800a40a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a40e:	f000 f8e5 	bl	800a5dc <_malloc_r>
 800a412:	4604      	mov	r4, r0
 800a414:	b140      	cbz	r0, 800a428 <__sfmoreglue+0x28>
 800a416:	2100      	movs	r1, #0
 800a418:	e9c0 1600 	strd	r1, r6, [r0]
 800a41c:	300c      	adds	r0, #12
 800a41e:	60a0      	str	r0, [r4, #8]
 800a420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a424:	f7ff ffa2 	bl	800a36c <memset>
 800a428:	4620      	mov	r0, r4
 800a42a:	bd70      	pop	{r4, r5, r6, pc}

0800a42c <__sfp_lock_acquire>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__sfp_lock_acquire+0x8>)
 800a42e:	f000 b8b3 	b.w	800a598 <__retarget_lock_acquire_recursive>
 800a432:	bf00      	nop
 800a434:	20000e55 	.word	0x20000e55

0800a438 <__sfp_lock_release>:
 800a438:	4801      	ldr	r0, [pc, #4]	; (800a440 <__sfp_lock_release+0x8>)
 800a43a:	f000 b8ae 	b.w	800a59a <__retarget_lock_release_recursive>
 800a43e:	bf00      	nop
 800a440:	20000e55 	.word	0x20000e55

0800a444 <__sinit_lock_acquire>:
 800a444:	4801      	ldr	r0, [pc, #4]	; (800a44c <__sinit_lock_acquire+0x8>)
 800a446:	f000 b8a7 	b.w	800a598 <__retarget_lock_acquire_recursive>
 800a44a:	bf00      	nop
 800a44c:	20000e56 	.word	0x20000e56

0800a450 <__sinit_lock_release>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__sinit_lock_release+0x8>)
 800a452:	f000 b8a2 	b.w	800a59a <__retarget_lock_release_recursive>
 800a456:	bf00      	nop
 800a458:	20000e56 	.word	0x20000e56

0800a45c <__sinit>:
 800a45c:	b510      	push	{r4, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	f7ff fff0 	bl	800a444 <__sinit_lock_acquire>
 800a464:	69a3      	ldr	r3, [r4, #24]
 800a466:	b11b      	cbz	r3, 800a470 <__sinit+0x14>
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46c:	f7ff bff0 	b.w	800a450 <__sinit_lock_release>
 800a470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a474:	6523      	str	r3, [r4, #80]	; 0x50
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <__sinit+0x68>)
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <__sinit+0x6c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a47e:	42a3      	cmp	r3, r4
 800a480:	bf04      	itt	eq
 800a482:	2301      	moveq	r3, #1
 800a484:	61a3      	streq	r3, [r4, #24]
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f820 	bl	800a4cc <__sfp>
 800a48c:	6060      	str	r0, [r4, #4]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 f81c 	bl	800a4cc <__sfp>
 800a494:	60a0      	str	r0, [r4, #8]
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f818 	bl	800a4cc <__sfp>
 800a49c:	2200      	movs	r2, #0
 800a49e:	60e0      	str	r0, [r4, #12]
 800a4a0:	2104      	movs	r1, #4
 800a4a2:	6860      	ldr	r0, [r4, #4]
 800a4a4:	f7ff ff82 	bl	800a3ac <std>
 800a4a8:	68a0      	ldr	r0, [r4, #8]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	2109      	movs	r1, #9
 800a4ae:	f7ff ff7d 	bl	800a3ac <std>
 800a4b2:	68e0      	ldr	r0, [r4, #12]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	2112      	movs	r1, #18
 800a4b8:	f7ff ff78 	bl	800a3ac <std>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	61a3      	str	r3, [r4, #24]
 800a4c0:	e7d2      	b.n	800a468 <__sinit+0xc>
 800a4c2:	bf00      	nop
 800a4c4:	0800b624 	.word	0x0800b624
 800a4c8:	0800a3f5 	.word	0x0800a3f5

0800a4cc <__sfp>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	f7ff ffac 	bl	800a42c <__sfp_lock_acquire>
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <__sfp+0x84>)
 800a4d6:	681e      	ldr	r6, [r3, #0]
 800a4d8:	69b3      	ldr	r3, [r6, #24]
 800a4da:	b913      	cbnz	r3, 800a4e2 <__sfp+0x16>
 800a4dc:	4630      	mov	r0, r6
 800a4de:	f7ff ffbd 	bl	800a45c <__sinit>
 800a4e2:	3648      	adds	r6, #72	; 0x48
 800a4e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	d503      	bpl.n	800a4f4 <__sfp+0x28>
 800a4ec:	6833      	ldr	r3, [r6, #0]
 800a4ee:	b30b      	cbz	r3, 800a534 <__sfp+0x68>
 800a4f0:	6836      	ldr	r6, [r6, #0]
 800a4f2:	e7f7      	b.n	800a4e4 <__sfp+0x18>
 800a4f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4f8:	b9d5      	cbnz	r5, 800a530 <__sfp+0x64>
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <__sfp+0x88>)
 800a4fc:	60e3      	str	r3, [r4, #12]
 800a4fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a502:	6665      	str	r5, [r4, #100]	; 0x64
 800a504:	f000 f847 	bl	800a596 <__retarget_lock_init_recursive>
 800a508:	f7ff ff96 	bl	800a438 <__sfp_lock_release>
 800a50c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a514:	6025      	str	r5, [r4, #0]
 800a516:	61a5      	str	r5, [r4, #24]
 800a518:	2208      	movs	r2, #8
 800a51a:	4629      	mov	r1, r5
 800a51c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a520:	f7ff ff24 	bl	800a36c <memset>
 800a524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a52c:	4620      	mov	r0, r4
 800a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a530:	3468      	adds	r4, #104	; 0x68
 800a532:	e7d9      	b.n	800a4e8 <__sfp+0x1c>
 800a534:	2104      	movs	r1, #4
 800a536:	4638      	mov	r0, r7
 800a538:	f7ff ff62 	bl	800a400 <__sfmoreglue>
 800a53c:	4604      	mov	r4, r0
 800a53e:	6030      	str	r0, [r6, #0]
 800a540:	2800      	cmp	r0, #0
 800a542:	d1d5      	bne.n	800a4f0 <__sfp+0x24>
 800a544:	f7ff ff78 	bl	800a438 <__sfp_lock_release>
 800a548:	230c      	movs	r3, #12
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	e7ee      	b.n	800a52c <__sfp+0x60>
 800a54e:	bf00      	nop
 800a550:	0800b624 	.word	0x0800b624
 800a554:	ffff0001 	.word	0xffff0001

0800a558 <_fwalk_reent>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4606      	mov	r6, r0
 800a55e:	4688      	mov	r8, r1
 800a560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a564:	2700      	movs	r7, #0
 800a566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a56a:	f1b9 0901 	subs.w	r9, r9, #1
 800a56e:	d505      	bpl.n	800a57c <_fwalk_reent+0x24>
 800a570:	6824      	ldr	r4, [r4, #0]
 800a572:	2c00      	cmp	r4, #0
 800a574:	d1f7      	bne.n	800a566 <_fwalk_reent+0xe>
 800a576:	4638      	mov	r0, r7
 800a578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57c:	89ab      	ldrh	r3, [r5, #12]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d907      	bls.n	800a592 <_fwalk_reent+0x3a>
 800a582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a586:	3301      	adds	r3, #1
 800a588:	d003      	beq.n	800a592 <_fwalk_reent+0x3a>
 800a58a:	4629      	mov	r1, r5
 800a58c:	4630      	mov	r0, r6
 800a58e:	47c0      	blx	r8
 800a590:	4307      	orrs	r7, r0
 800a592:	3568      	adds	r5, #104	; 0x68
 800a594:	e7e9      	b.n	800a56a <_fwalk_reent+0x12>

0800a596 <__retarget_lock_init_recursive>:
 800a596:	4770      	bx	lr

0800a598 <__retarget_lock_acquire_recursive>:
 800a598:	4770      	bx	lr

0800a59a <__retarget_lock_release_recursive>:
 800a59a:	4770      	bx	lr

0800a59c <sbrk_aligned>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4e0e      	ldr	r6, [pc, #56]	; (800a5d8 <sbrk_aligned+0x3c>)
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	6831      	ldr	r1, [r6, #0]
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	b911      	cbnz	r1, 800a5ae <sbrk_aligned+0x12>
 800a5a8:	f000 fb7a 	bl	800aca0 <_sbrk_r>
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 fb75 	bl	800aca0 <_sbrk_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d00a      	beq.n	800a5d0 <sbrk_aligned+0x34>
 800a5ba:	1cc4      	adds	r4, r0, #3
 800a5bc:	f024 0403 	bic.w	r4, r4, #3
 800a5c0:	42a0      	cmp	r0, r4
 800a5c2:	d007      	beq.n	800a5d4 <sbrk_aligned+0x38>
 800a5c4:	1a21      	subs	r1, r4, r0
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 fb6a 	bl	800aca0 <_sbrk_r>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d101      	bne.n	800a5d4 <sbrk_aligned+0x38>
 800a5d0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	20000e5c 	.word	0x20000e5c

0800a5dc <_malloc_r>:
 800a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	1ccd      	adds	r5, r1, #3
 800a5e2:	f025 0503 	bic.w	r5, r5, #3
 800a5e6:	3508      	adds	r5, #8
 800a5e8:	2d0c      	cmp	r5, #12
 800a5ea:	bf38      	it	cc
 800a5ec:	250c      	movcc	r5, #12
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	db01      	blt.n	800a5f8 <_malloc_r+0x1c>
 800a5f4:	42a9      	cmp	r1, r5
 800a5f6:	d905      	bls.n	800a604 <_malloc_r+0x28>
 800a5f8:	230c      	movs	r3, #12
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	2600      	movs	r6, #0
 800a5fe:	4630      	mov	r0, r6
 800a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a604:	4e2e      	ldr	r6, [pc, #184]	; (800a6c0 <_malloc_r+0xe4>)
 800a606:	f000 fdbb 	bl	800b180 <__malloc_lock>
 800a60a:	6833      	ldr	r3, [r6, #0]
 800a60c:	461c      	mov	r4, r3
 800a60e:	bb34      	cbnz	r4, 800a65e <_malloc_r+0x82>
 800a610:	4629      	mov	r1, r5
 800a612:	4638      	mov	r0, r7
 800a614:	f7ff ffc2 	bl	800a59c <sbrk_aligned>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	4604      	mov	r4, r0
 800a61c:	d14d      	bne.n	800a6ba <_malloc_r+0xde>
 800a61e:	6834      	ldr	r4, [r6, #0]
 800a620:	4626      	mov	r6, r4
 800a622:	2e00      	cmp	r6, #0
 800a624:	d140      	bne.n	800a6a8 <_malloc_r+0xcc>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	4631      	mov	r1, r6
 800a62a:	4638      	mov	r0, r7
 800a62c:	eb04 0803 	add.w	r8, r4, r3
 800a630:	f000 fb36 	bl	800aca0 <_sbrk_r>
 800a634:	4580      	cmp	r8, r0
 800a636:	d13a      	bne.n	800a6ae <_malloc_r+0xd2>
 800a638:	6821      	ldr	r1, [r4, #0]
 800a63a:	3503      	adds	r5, #3
 800a63c:	1a6d      	subs	r5, r5, r1
 800a63e:	f025 0503 	bic.w	r5, r5, #3
 800a642:	3508      	adds	r5, #8
 800a644:	2d0c      	cmp	r5, #12
 800a646:	bf38      	it	cc
 800a648:	250c      	movcc	r5, #12
 800a64a:	4629      	mov	r1, r5
 800a64c:	4638      	mov	r0, r7
 800a64e:	f7ff ffa5 	bl	800a59c <sbrk_aligned>
 800a652:	3001      	adds	r0, #1
 800a654:	d02b      	beq.n	800a6ae <_malloc_r+0xd2>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	442b      	add	r3, r5
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	e00e      	b.n	800a67c <_malloc_r+0xa0>
 800a65e:	6822      	ldr	r2, [r4, #0]
 800a660:	1b52      	subs	r2, r2, r5
 800a662:	d41e      	bmi.n	800a6a2 <_malloc_r+0xc6>
 800a664:	2a0b      	cmp	r2, #11
 800a666:	d916      	bls.n	800a696 <_malloc_r+0xba>
 800a668:	1961      	adds	r1, r4, r5
 800a66a:	42a3      	cmp	r3, r4
 800a66c:	6025      	str	r5, [r4, #0]
 800a66e:	bf18      	it	ne
 800a670:	6059      	strne	r1, [r3, #4]
 800a672:	6863      	ldr	r3, [r4, #4]
 800a674:	bf08      	it	eq
 800a676:	6031      	streq	r1, [r6, #0]
 800a678:	5162      	str	r2, [r4, r5]
 800a67a:	604b      	str	r3, [r1, #4]
 800a67c:	4638      	mov	r0, r7
 800a67e:	f104 060b 	add.w	r6, r4, #11
 800a682:	f000 fd83 	bl	800b18c <__malloc_unlock>
 800a686:	f026 0607 	bic.w	r6, r6, #7
 800a68a:	1d23      	adds	r3, r4, #4
 800a68c:	1af2      	subs	r2, r6, r3
 800a68e:	d0b6      	beq.n	800a5fe <_malloc_r+0x22>
 800a690:	1b9b      	subs	r3, r3, r6
 800a692:	50a3      	str	r3, [r4, r2]
 800a694:	e7b3      	b.n	800a5fe <_malloc_r+0x22>
 800a696:	6862      	ldr	r2, [r4, #4]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	bf0c      	ite	eq
 800a69c:	6032      	streq	r2, [r6, #0]
 800a69e:	605a      	strne	r2, [r3, #4]
 800a6a0:	e7ec      	b.n	800a67c <_malloc_r+0xa0>
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	6864      	ldr	r4, [r4, #4]
 800a6a6:	e7b2      	b.n	800a60e <_malloc_r+0x32>
 800a6a8:	4634      	mov	r4, r6
 800a6aa:	6876      	ldr	r6, [r6, #4]
 800a6ac:	e7b9      	b.n	800a622 <_malloc_r+0x46>
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	603b      	str	r3, [r7, #0]
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f000 fd6a 	bl	800b18c <__malloc_unlock>
 800a6b8:	e7a1      	b.n	800a5fe <_malloc_r+0x22>
 800a6ba:	6025      	str	r5, [r4, #0]
 800a6bc:	e7de      	b.n	800a67c <_malloc_r+0xa0>
 800a6be:	bf00      	nop
 800a6c0:	20000e58 	.word	0x20000e58

0800a6c4 <__sfputc_r>:
 800a6c4:	6893      	ldr	r3, [r2, #8]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	b410      	push	{r4}
 800a6cc:	6093      	str	r3, [r2, #8]
 800a6ce:	da08      	bge.n	800a6e2 <__sfputc_r+0x1e>
 800a6d0:	6994      	ldr	r4, [r2, #24]
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	db01      	blt.n	800a6da <__sfputc_r+0x16>
 800a6d6:	290a      	cmp	r1, #10
 800a6d8:	d103      	bne.n	800a6e2 <__sfputc_r+0x1e>
 800a6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6de:	f000 bb33 	b.w	800ad48 <__swbuf_r>
 800a6e2:	6813      	ldr	r3, [r2, #0]
 800a6e4:	1c58      	adds	r0, r3, #1
 800a6e6:	6010      	str	r0, [r2, #0]
 800a6e8:	7019      	strb	r1, [r3, #0]
 800a6ea:	4608      	mov	r0, r1
 800a6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <__sfputs_r>:
 800a6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	460f      	mov	r7, r1
 800a6f8:	4614      	mov	r4, r2
 800a6fa:	18d5      	adds	r5, r2, r3
 800a6fc:	42ac      	cmp	r4, r5
 800a6fe:	d101      	bne.n	800a704 <__sfputs_r+0x12>
 800a700:	2000      	movs	r0, #0
 800a702:	e007      	b.n	800a714 <__sfputs_r+0x22>
 800a704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a708:	463a      	mov	r2, r7
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7ff ffda 	bl	800a6c4 <__sfputc_r>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d1f3      	bne.n	800a6fc <__sfputs_r+0xa>
 800a714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a718 <_vfiprintf_r>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	460d      	mov	r5, r1
 800a71e:	b09d      	sub	sp, #116	; 0x74
 800a720:	4614      	mov	r4, r2
 800a722:	4698      	mov	r8, r3
 800a724:	4606      	mov	r6, r0
 800a726:	b118      	cbz	r0, 800a730 <_vfiprintf_r+0x18>
 800a728:	6983      	ldr	r3, [r0, #24]
 800a72a:	b90b      	cbnz	r3, 800a730 <_vfiprintf_r+0x18>
 800a72c:	f7ff fe96 	bl	800a45c <__sinit>
 800a730:	4b89      	ldr	r3, [pc, #548]	; (800a958 <_vfiprintf_r+0x240>)
 800a732:	429d      	cmp	r5, r3
 800a734:	d11b      	bne.n	800a76e <_vfiprintf_r+0x56>
 800a736:	6875      	ldr	r5, [r6, #4]
 800a738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a73a:	07d9      	lsls	r1, r3, #31
 800a73c:	d405      	bmi.n	800a74a <_vfiprintf_r+0x32>
 800a73e:	89ab      	ldrh	r3, [r5, #12]
 800a740:	059a      	lsls	r2, r3, #22
 800a742:	d402      	bmi.n	800a74a <_vfiprintf_r+0x32>
 800a744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a746:	f7ff ff27 	bl	800a598 <__retarget_lock_acquire_recursive>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	071b      	lsls	r3, r3, #28
 800a74e:	d501      	bpl.n	800a754 <_vfiprintf_r+0x3c>
 800a750:	692b      	ldr	r3, [r5, #16]
 800a752:	b9eb      	cbnz	r3, 800a790 <_vfiprintf_r+0x78>
 800a754:	4629      	mov	r1, r5
 800a756:	4630      	mov	r0, r6
 800a758:	f000 fb5a 	bl	800ae10 <__swsetup_r>
 800a75c:	b1c0      	cbz	r0, 800a790 <_vfiprintf_r+0x78>
 800a75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a760:	07dc      	lsls	r4, r3, #31
 800a762:	d50e      	bpl.n	800a782 <_vfiprintf_r+0x6a>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	b01d      	add	sp, #116	; 0x74
 800a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76e:	4b7b      	ldr	r3, [pc, #492]	; (800a95c <_vfiprintf_r+0x244>)
 800a770:	429d      	cmp	r5, r3
 800a772:	d101      	bne.n	800a778 <_vfiprintf_r+0x60>
 800a774:	68b5      	ldr	r5, [r6, #8]
 800a776:	e7df      	b.n	800a738 <_vfiprintf_r+0x20>
 800a778:	4b79      	ldr	r3, [pc, #484]	; (800a960 <_vfiprintf_r+0x248>)
 800a77a:	429d      	cmp	r5, r3
 800a77c:	bf08      	it	eq
 800a77e:	68f5      	ldreq	r5, [r6, #12]
 800a780:	e7da      	b.n	800a738 <_vfiprintf_r+0x20>
 800a782:	89ab      	ldrh	r3, [r5, #12]
 800a784:	0598      	lsls	r0, r3, #22
 800a786:	d4ed      	bmi.n	800a764 <_vfiprintf_r+0x4c>
 800a788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a78a:	f7ff ff06 	bl	800a59a <__retarget_lock_release_recursive>
 800a78e:	e7e9      	b.n	800a764 <_vfiprintf_r+0x4c>
 800a790:	2300      	movs	r3, #0
 800a792:	9309      	str	r3, [sp, #36]	; 0x24
 800a794:	2320      	movs	r3, #32
 800a796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79e:	2330      	movs	r3, #48	; 0x30
 800a7a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a964 <_vfiprintf_r+0x24c>
 800a7a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7a8:	f04f 0901 	mov.w	r9, #1
 800a7ac:	4623      	mov	r3, r4
 800a7ae:	469a      	mov	sl, r3
 800a7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b4:	b10a      	cbz	r2, 800a7ba <_vfiprintf_r+0xa2>
 800a7b6:	2a25      	cmp	r2, #37	; 0x25
 800a7b8:	d1f9      	bne.n	800a7ae <_vfiprintf_r+0x96>
 800a7ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a7be:	d00b      	beq.n	800a7d8 <_vfiprintf_r+0xc0>
 800a7c0:	465b      	mov	r3, fp
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7ff ff93 	bl	800a6f2 <__sfputs_r>
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	f000 80aa 	beq.w	800a926 <_vfiprintf_r+0x20e>
 800a7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d4:	445a      	add	r2, fp
 800a7d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 80a2 	beq.w	800a926 <_vfiprintf_r+0x20e>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ec:	f10a 0a01 	add.w	sl, sl, #1
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	9307      	str	r3, [sp, #28]
 800a7f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a7fa:	4654      	mov	r4, sl
 800a7fc:	2205      	movs	r2, #5
 800a7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a802:	4858      	ldr	r0, [pc, #352]	; (800a964 <_vfiprintf_r+0x24c>)
 800a804:	f7f5 fcc4 	bl	8000190 <memchr>
 800a808:	9a04      	ldr	r2, [sp, #16]
 800a80a:	b9d8      	cbnz	r0, 800a844 <_vfiprintf_r+0x12c>
 800a80c:	06d1      	lsls	r1, r2, #27
 800a80e:	bf44      	itt	mi
 800a810:	2320      	movmi	r3, #32
 800a812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a816:	0713      	lsls	r3, r2, #28
 800a818:	bf44      	itt	mi
 800a81a:	232b      	movmi	r3, #43	; 0x2b
 800a81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a820:	f89a 3000 	ldrb.w	r3, [sl]
 800a824:	2b2a      	cmp	r3, #42	; 0x2a
 800a826:	d015      	beq.n	800a854 <_vfiprintf_r+0x13c>
 800a828:	9a07      	ldr	r2, [sp, #28]
 800a82a:	4654      	mov	r4, sl
 800a82c:	2000      	movs	r0, #0
 800a82e:	f04f 0c0a 	mov.w	ip, #10
 800a832:	4621      	mov	r1, r4
 800a834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a838:	3b30      	subs	r3, #48	; 0x30
 800a83a:	2b09      	cmp	r3, #9
 800a83c:	d94e      	bls.n	800a8dc <_vfiprintf_r+0x1c4>
 800a83e:	b1b0      	cbz	r0, 800a86e <_vfiprintf_r+0x156>
 800a840:	9207      	str	r2, [sp, #28]
 800a842:	e014      	b.n	800a86e <_vfiprintf_r+0x156>
 800a844:	eba0 0308 	sub.w	r3, r0, r8
 800a848:	fa09 f303 	lsl.w	r3, r9, r3
 800a84c:	4313      	orrs	r3, r2
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	46a2      	mov	sl, r4
 800a852:	e7d2      	b.n	800a7fa <_vfiprintf_r+0xe2>
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	1d19      	adds	r1, r3, #4
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	9103      	str	r1, [sp, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bfbb      	ittet	lt
 800a860:	425b      	neglt	r3, r3
 800a862:	f042 0202 	orrlt.w	r2, r2, #2
 800a866:	9307      	strge	r3, [sp, #28]
 800a868:	9307      	strlt	r3, [sp, #28]
 800a86a:	bfb8      	it	lt
 800a86c:	9204      	strlt	r2, [sp, #16]
 800a86e:	7823      	ldrb	r3, [r4, #0]
 800a870:	2b2e      	cmp	r3, #46	; 0x2e
 800a872:	d10c      	bne.n	800a88e <_vfiprintf_r+0x176>
 800a874:	7863      	ldrb	r3, [r4, #1]
 800a876:	2b2a      	cmp	r3, #42	; 0x2a
 800a878:	d135      	bne.n	800a8e6 <_vfiprintf_r+0x1ce>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	1d1a      	adds	r2, r3, #4
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	9203      	str	r2, [sp, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	bfb8      	it	lt
 800a886:	f04f 33ff 	movlt.w	r3, #4294967295
 800a88a:	3402      	adds	r4, #2
 800a88c:	9305      	str	r3, [sp, #20]
 800a88e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a974 <_vfiprintf_r+0x25c>
 800a892:	7821      	ldrb	r1, [r4, #0]
 800a894:	2203      	movs	r2, #3
 800a896:	4650      	mov	r0, sl
 800a898:	f7f5 fc7a 	bl	8000190 <memchr>
 800a89c:	b140      	cbz	r0, 800a8b0 <_vfiprintf_r+0x198>
 800a89e:	2340      	movs	r3, #64	; 0x40
 800a8a0:	eba0 000a 	sub.w	r0, r0, sl
 800a8a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a8a8:	9b04      	ldr	r3, [sp, #16]
 800a8aa:	4303      	orrs	r3, r0
 800a8ac:	3401      	adds	r4, #1
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b4:	482c      	ldr	r0, [pc, #176]	; (800a968 <_vfiprintf_r+0x250>)
 800a8b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ba:	2206      	movs	r2, #6
 800a8bc:	f7f5 fc68 	bl	8000190 <memchr>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d03f      	beq.n	800a944 <_vfiprintf_r+0x22c>
 800a8c4:	4b29      	ldr	r3, [pc, #164]	; (800a96c <_vfiprintf_r+0x254>)
 800a8c6:	bb1b      	cbnz	r3, 800a910 <_vfiprintf_r+0x1f8>
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	3307      	adds	r3, #7
 800a8cc:	f023 0307 	bic.w	r3, r3, #7
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	9303      	str	r3, [sp, #12]
 800a8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d6:	443b      	add	r3, r7
 800a8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8da:	e767      	b.n	800a7ac <_vfiprintf_r+0x94>
 800a8dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	e7a5      	b.n	800a832 <_vfiprintf_r+0x11a>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	3401      	adds	r4, #1
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f04f 0c0a 	mov.w	ip, #10
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f8:	3a30      	subs	r2, #48	; 0x30
 800a8fa:	2a09      	cmp	r2, #9
 800a8fc:	d903      	bls.n	800a906 <_vfiprintf_r+0x1ee>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0c5      	beq.n	800a88e <_vfiprintf_r+0x176>
 800a902:	9105      	str	r1, [sp, #20]
 800a904:	e7c3      	b.n	800a88e <_vfiprintf_r+0x176>
 800a906:	fb0c 2101 	mla	r1, ip, r1, r2
 800a90a:	4604      	mov	r4, r0
 800a90c:	2301      	movs	r3, #1
 800a90e:	e7f0      	b.n	800a8f2 <_vfiprintf_r+0x1da>
 800a910:	ab03      	add	r3, sp, #12
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	462a      	mov	r2, r5
 800a916:	4b16      	ldr	r3, [pc, #88]	; (800a970 <_vfiprintf_r+0x258>)
 800a918:	a904      	add	r1, sp, #16
 800a91a:	4630      	mov	r0, r6
 800a91c:	f3af 8000 	nop.w
 800a920:	4607      	mov	r7, r0
 800a922:	1c78      	adds	r0, r7, #1
 800a924:	d1d6      	bne.n	800a8d4 <_vfiprintf_r+0x1bc>
 800a926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a928:	07d9      	lsls	r1, r3, #31
 800a92a:	d405      	bmi.n	800a938 <_vfiprintf_r+0x220>
 800a92c:	89ab      	ldrh	r3, [r5, #12]
 800a92e:	059a      	lsls	r2, r3, #22
 800a930:	d402      	bmi.n	800a938 <_vfiprintf_r+0x220>
 800a932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a934:	f7ff fe31 	bl	800a59a <__retarget_lock_release_recursive>
 800a938:	89ab      	ldrh	r3, [r5, #12]
 800a93a:	065b      	lsls	r3, r3, #25
 800a93c:	f53f af12 	bmi.w	800a764 <_vfiprintf_r+0x4c>
 800a940:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a942:	e711      	b.n	800a768 <_vfiprintf_r+0x50>
 800a944:	ab03      	add	r3, sp, #12
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	462a      	mov	r2, r5
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <_vfiprintf_r+0x258>)
 800a94c:	a904      	add	r1, sp, #16
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 f880 	bl	800aa54 <_printf_i>
 800a954:	e7e4      	b.n	800a920 <_vfiprintf_r+0x208>
 800a956:	bf00      	nop
 800a958:	0800b648 	.word	0x0800b648
 800a95c:	0800b668 	.word	0x0800b668
 800a960:	0800b628 	.word	0x0800b628
 800a964:	0800b688 	.word	0x0800b688
 800a968:	0800b692 	.word	0x0800b692
 800a96c:	00000000 	.word	0x00000000
 800a970:	0800a6f3 	.word	0x0800a6f3
 800a974:	0800b68e 	.word	0x0800b68e

0800a978 <_printf_common>:
 800a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	4616      	mov	r6, r2
 800a97e:	4699      	mov	r9, r3
 800a980:	688a      	ldr	r2, [r1, #8]
 800a982:	690b      	ldr	r3, [r1, #16]
 800a984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a988:	4293      	cmp	r3, r2
 800a98a:	bfb8      	it	lt
 800a98c:	4613      	movlt	r3, r2
 800a98e:	6033      	str	r3, [r6, #0]
 800a990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a994:	4607      	mov	r7, r0
 800a996:	460c      	mov	r4, r1
 800a998:	b10a      	cbz	r2, 800a99e <_printf_common+0x26>
 800a99a:	3301      	adds	r3, #1
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	0699      	lsls	r1, r3, #26
 800a9a2:	bf42      	ittt	mi
 800a9a4:	6833      	ldrmi	r3, [r6, #0]
 800a9a6:	3302      	addmi	r3, #2
 800a9a8:	6033      	strmi	r3, [r6, #0]
 800a9aa:	6825      	ldr	r5, [r4, #0]
 800a9ac:	f015 0506 	ands.w	r5, r5, #6
 800a9b0:	d106      	bne.n	800a9c0 <_printf_common+0x48>
 800a9b2:	f104 0a19 	add.w	sl, r4, #25
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	6832      	ldr	r2, [r6, #0]
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	dc26      	bgt.n	800aa0e <_printf_common+0x96>
 800a9c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9c4:	1e13      	subs	r3, r2, #0
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	bf18      	it	ne
 800a9ca:	2301      	movne	r3, #1
 800a9cc:	0692      	lsls	r2, r2, #26
 800a9ce:	d42b      	bmi.n	800aa28 <_printf_common+0xb0>
 800a9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	47c0      	blx	r8
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d01e      	beq.n	800aa1c <_printf_common+0xa4>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	68e5      	ldr	r5, [r4, #12]
 800a9e2:	6832      	ldr	r2, [r6, #0]
 800a9e4:	f003 0306 	and.w	r3, r3, #6
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	bf08      	it	eq
 800a9ec:	1aad      	subeq	r5, r5, r2
 800a9ee:	68a3      	ldr	r3, [r4, #8]
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	bf0c      	ite	eq
 800a9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9f8:	2500      	movne	r5, #0
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	bfc4      	itt	gt
 800a9fe:	1a9b      	subgt	r3, r3, r2
 800aa00:	18ed      	addgt	r5, r5, r3
 800aa02:	2600      	movs	r6, #0
 800aa04:	341a      	adds	r4, #26
 800aa06:	42b5      	cmp	r5, r6
 800aa08:	d11a      	bne.n	800aa40 <_printf_common+0xc8>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e008      	b.n	800aa20 <_printf_common+0xa8>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4652      	mov	r2, sl
 800aa12:	4649      	mov	r1, r9
 800aa14:	4638      	mov	r0, r7
 800aa16:	47c0      	blx	r8
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d103      	bne.n	800aa24 <_printf_common+0xac>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	3501      	adds	r5, #1
 800aa26:	e7c6      	b.n	800a9b6 <_printf_common+0x3e>
 800aa28:	18e1      	adds	r1, r4, r3
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	2030      	movs	r0, #48	; 0x30
 800aa2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa32:	4422      	add	r2, r4
 800aa34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	e7c7      	b.n	800a9d0 <_printf_common+0x58>
 800aa40:	2301      	movs	r3, #1
 800aa42:	4622      	mov	r2, r4
 800aa44:	4649      	mov	r1, r9
 800aa46:	4638      	mov	r0, r7
 800aa48:	47c0      	blx	r8
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d0e6      	beq.n	800aa1c <_printf_common+0xa4>
 800aa4e:	3601      	adds	r6, #1
 800aa50:	e7d9      	b.n	800aa06 <_printf_common+0x8e>
	...

0800aa54 <_printf_i>:
 800aa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa58:	7e0f      	ldrb	r7, [r1, #24]
 800aa5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa5c:	2f78      	cmp	r7, #120	; 0x78
 800aa5e:	4691      	mov	r9, r2
 800aa60:	4680      	mov	r8, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	469a      	mov	sl, r3
 800aa66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa6a:	d807      	bhi.n	800aa7c <_printf_i+0x28>
 800aa6c:	2f62      	cmp	r7, #98	; 0x62
 800aa6e:	d80a      	bhi.n	800aa86 <_printf_i+0x32>
 800aa70:	2f00      	cmp	r7, #0
 800aa72:	f000 80d8 	beq.w	800ac26 <_printf_i+0x1d2>
 800aa76:	2f58      	cmp	r7, #88	; 0x58
 800aa78:	f000 80a3 	beq.w	800abc2 <_printf_i+0x16e>
 800aa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa84:	e03a      	b.n	800aafc <_printf_i+0xa8>
 800aa86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa8a:	2b15      	cmp	r3, #21
 800aa8c:	d8f6      	bhi.n	800aa7c <_printf_i+0x28>
 800aa8e:	a101      	add	r1, pc, #4	; (adr r1, 800aa94 <_printf_i+0x40>)
 800aa90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa94:	0800aaed 	.word	0x0800aaed
 800aa98:	0800ab01 	.word	0x0800ab01
 800aa9c:	0800aa7d 	.word	0x0800aa7d
 800aaa0:	0800aa7d 	.word	0x0800aa7d
 800aaa4:	0800aa7d 	.word	0x0800aa7d
 800aaa8:	0800aa7d 	.word	0x0800aa7d
 800aaac:	0800ab01 	.word	0x0800ab01
 800aab0:	0800aa7d 	.word	0x0800aa7d
 800aab4:	0800aa7d 	.word	0x0800aa7d
 800aab8:	0800aa7d 	.word	0x0800aa7d
 800aabc:	0800aa7d 	.word	0x0800aa7d
 800aac0:	0800ac0d 	.word	0x0800ac0d
 800aac4:	0800ab31 	.word	0x0800ab31
 800aac8:	0800abef 	.word	0x0800abef
 800aacc:	0800aa7d 	.word	0x0800aa7d
 800aad0:	0800aa7d 	.word	0x0800aa7d
 800aad4:	0800ac2f 	.word	0x0800ac2f
 800aad8:	0800aa7d 	.word	0x0800aa7d
 800aadc:	0800ab31 	.word	0x0800ab31
 800aae0:	0800aa7d 	.word	0x0800aa7d
 800aae4:	0800aa7d 	.word	0x0800aa7d
 800aae8:	0800abf7 	.word	0x0800abf7
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	602a      	str	r2, [r5, #0]
 800aaf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aafc:	2301      	movs	r3, #1
 800aafe:	e0a3      	b.n	800ac48 <_printf_i+0x1f4>
 800ab00:	6820      	ldr	r0, [r4, #0]
 800ab02:	6829      	ldr	r1, [r5, #0]
 800ab04:	0606      	lsls	r6, r0, #24
 800ab06:	f101 0304 	add.w	r3, r1, #4
 800ab0a:	d50a      	bpl.n	800ab22 <_printf_i+0xce>
 800ab0c:	680e      	ldr	r6, [r1, #0]
 800ab0e:	602b      	str	r3, [r5, #0]
 800ab10:	2e00      	cmp	r6, #0
 800ab12:	da03      	bge.n	800ab1c <_printf_i+0xc8>
 800ab14:	232d      	movs	r3, #45	; 0x2d
 800ab16:	4276      	negs	r6, r6
 800ab18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab1c:	485e      	ldr	r0, [pc, #376]	; (800ac98 <_printf_i+0x244>)
 800ab1e:	230a      	movs	r3, #10
 800ab20:	e019      	b.n	800ab56 <_printf_i+0x102>
 800ab22:	680e      	ldr	r6, [r1, #0]
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab2a:	bf18      	it	ne
 800ab2c:	b236      	sxthne	r6, r6
 800ab2e:	e7ef      	b.n	800ab10 <_printf_i+0xbc>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	6820      	ldr	r0, [r4, #0]
 800ab34:	1d19      	adds	r1, r3, #4
 800ab36:	6029      	str	r1, [r5, #0]
 800ab38:	0601      	lsls	r1, r0, #24
 800ab3a:	d501      	bpl.n	800ab40 <_printf_i+0xec>
 800ab3c:	681e      	ldr	r6, [r3, #0]
 800ab3e:	e002      	b.n	800ab46 <_printf_i+0xf2>
 800ab40:	0646      	lsls	r6, r0, #25
 800ab42:	d5fb      	bpl.n	800ab3c <_printf_i+0xe8>
 800ab44:	881e      	ldrh	r6, [r3, #0]
 800ab46:	4854      	ldr	r0, [pc, #336]	; (800ac98 <_printf_i+0x244>)
 800ab48:	2f6f      	cmp	r7, #111	; 0x6f
 800ab4a:	bf0c      	ite	eq
 800ab4c:	2308      	moveq	r3, #8
 800ab4e:	230a      	movne	r3, #10
 800ab50:	2100      	movs	r1, #0
 800ab52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab56:	6865      	ldr	r5, [r4, #4]
 800ab58:	60a5      	str	r5, [r4, #8]
 800ab5a:	2d00      	cmp	r5, #0
 800ab5c:	bfa2      	ittt	ge
 800ab5e:	6821      	ldrge	r1, [r4, #0]
 800ab60:	f021 0104 	bicge.w	r1, r1, #4
 800ab64:	6021      	strge	r1, [r4, #0]
 800ab66:	b90e      	cbnz	r6, 800ab6c <_printf_i+0x118>
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	d04d      	beq.n	800ac08 <_printf_i+0x1b4>
 800ab6c:	4615      	mov	r5, r2
 800ab6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab72:	fb03 6711 	mls	r7, r3, r1, r6
 800ab76:	5dc7      	ldrb	r7, [r0, r7]
 800ab78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab7c:	4637      	mov	r7, r6
 800ab7e:	42bb      	cmp	r3, r7
 800ab80:	460e      	mov	r6, r1
 800ab82:	d9f4      	bls.n	800ab6e <_printf_i+0x11a>
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d10b      	bne.n	800aba0 <_printf_i+0x14c>
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	07de      	lsls	r6, r3, #31
 800ab8c:	d508      	bpl.n	800aba0 <_printf_i+0x14c>
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	4299      	cmp	r1, r3
 800ab94:	bfde      	ittt	le
 800ab96:	2330      	movle	r3, #48	; 0x30
 800ab98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aba0:	1b52      	subs	r2, r2, r5
 800aba2:	6122      	str	r2, [r4, #16]
 800aba4:	f8cd a000 	str.w	sl, [sp]
 800aba8:	464b      	mov	r3, r9
 800abaa:	aa03      	add	r2, sp, #12
 800abac:	4621      	mov	r1, r4
 800abae:	4640      	mov	r0, r8
 800abb0:	f7ff fee2 	bl	800a978 <_printf_common>
 800abb4:	3001      	adds	r0, #1
 800abb6:	d14c      	bne.n	800ac52 <_printf_i+0x1fe>
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	b004      	add	sp, #16
 800abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc2:	4835      	ldr	r0, [pc, #212]	; (800ac98 <_printf_i+0x244>)
 800abc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abc8:	6829      	ldr	r1, [r5, #0]
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	f851 6b04 	ldr.w	r6, [r1], #4
 800abd0:	6029      	str	r1, [r5, #0]
 800abd2:	061d      	lsls	r5, r3, #24
 800abd4:	d514      	bpl.n	800ac00 <_printf_i+0x1ac>
 800abd6:	07df      	lsls	r7, r3, #31
 800abd8:	bf44      	itt	mi
 800abda:	f043 0320 	orrmi.w	r3, r3, #32
 800abde:	6023      	strmi	r3, [r4, #0]
 800abe0:	b91e      	cbnz	r6, 800abea <_printf_i+0x196>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	f023 0320 	bic.w	r3, r3, #32
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	2310      	movs	r3, #16
 800abec:	e7b0      	b.n	800ab50 <_printf_i+0xfc>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	f043 0320 	orr.w	r3, r3, #32
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	2378      	movs	r3, #120	; 0x78
 800abf8:	4828      	ldr	r0, [pc, #160]	; (800ac9c <_printf_i+0x248>)
 800abfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abfe:	e7e3      	b.n	800abc8 <_printf_i+0x174>
 800ac00:	0659      	lsls	r1, r3, #25
 800ac02:	bf48      	it	mi
 800ac04:	b2b6      	uxthmi	r6, r6
 800ac06:	e7e6      	b.n	800abd6 <_printf_i+0x182>
 800ac08:	4615      	mov	r5, r2
 800ac0a:	e7bb      	b.n	800ab84 <_printf_i+0x130>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	6826      	ldr	r6, [r4, #0]
 800ac10:	6961      	ldr	r1, [r4, #20]
 800ac12:	1d18      	adds	r0, r3, #4
 800ac14:	6028      	str	r0, [r5, #0]
 800ac16:	0635      	lsls	r5, r6, #24
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	d501      	bpl.n	800ac20 <_printf_i+0x1cc>
 800ac1c:	6019      	str	r1, [r3, #0]
 800ac1e:	e002      	b.n	800ac26 <_printf_i+0x1d2>
 800ac20:	0670      	lsls	r0, r6, #25
 800ac22:	d5fb      	bpl.n	800ac1c <_printf_i+0x1c8>
 800ac24:	8019      	strh	r1, [r3, #0]
 800ac26:	2300      	movs	r3, #0
 800ac28:	6123      	str	r3, [r4, #16]
 800ac2a:	4615      	mov	r5, r2
 800ac2c:	e7ba      	b.n	800aba4 <_printf_i+0x150>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	602a      	str	r2, [r5, #0]
 800ac34:	681d      	ldr	r5, [r3, #0]
 800ac36:	6862      	ldr	r2, [r4, #4]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f7f5 faa8 	bl	8000190 <memchr>
 800ac40:	b108      	cbz	r0, 800ac46 <_printf_i+0x1f2>
 800ac42:	1b40      	subs	r0, r0, r5
 800ac44:	6060      	str	r0, [r4, #4]
 800ac46:	6863      	ldr	r3, [r4, #4]
 800ac48:	6123      	str	r3, [r4, #16]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac50:	e7a8      	b.n	800aba4 <_printf_i+0x150>
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	462a      	mov	r2, r5
 800ac56:	4649      	mov	r1, r9
 800ac58:	4640      	mov	r0, r8
 800ac5a:	47d0      	blx	sl
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d0ab      	beq.n	800abb8 <_printf_i+0x164>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	079b      	lsls	r3, r3, #30
 800ac64:	d413      	bmi.n	800ac8e <_printf_i+0x23a>
 800ac66:	68e0      	ldr	r0, [r4, #12]
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	4298      	cmp	r0, r3
 800ac6c:	bfb8      	it	lt
 800ac6e:	4618      	movlt	r0, r3
 800ac70:	e7a4      	b.n	800abbc <_printf_i+0x168>
 800ac72:	2301      	movs	r3, #1
 800ac74:	4632      	mov	r2, r6
 800ac76:	4649      	mov	r1, r9
 800ac78:	4640      	mov	r0, r8
 800ac7a:	47d0      	blx	sl
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d09b      	beq.n	800abb8 <_printf_i+0x164>
 800ac80:	3501      	adds	r5, #1
 800ac82:	68e3      	ldr	r3, [r4, #12]
 800ac84:	9903      	ldr	r1, [sp, #12]
 800ac86:	1a5b      	subs	r3, r3, r1
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	dcf2      	bgt.n	800ac72 <_printf_i+0x21e>
 800ac8c:	e7eb      	b.n	800ac66 <_printf_i+0x212>
 800ac8e:	2500      	movs	r5, #0
 800ac90:	f104 0619 	add.w	r6, r4, #25
 800ac94:	e7f5      	b.n	800ac82 <_printf_i+0x22e>
 800ac96:	bf00      	nop
 800ac98:	0800b699 	.word	0x0800b699
 800ac9c:	0800b6aa 	.word	0x0800b6aa

0800aca0 <_sbrk_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d06      	ldr	r5, [pc, #24]	; (800acbc <_sbrk_r+0x1c>)
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f7 fbd2 	bl	8002454 <_sbrk>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_sbrk_r+0x1a>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_sbrk_r+0x1a>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20000e60 	.word	0x20000e60

0800acc0 <__sread>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	460c      	mov	r4, r1
 800acc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc8:	f000 fab2 	bl	800b230 <_read_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	bfab      	itete	ge
 800acd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acd2:	89a3      	ldrhlt	r3, [r4, #12]
 800acd4:	181b      	addge	r3, r3, r0
 800acd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acda:	bfac      	ite	ge
 800acdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acde:	81a3      	strhlt	r3, [r4, #12]
 800ace0:	bd10      	pop	{r4, pc}

0800ace2 <__swrite>:
 800ace2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace6:	461f      	mov	r7, r3
 800ace8:	898b      	ldrh	r3, [r1, #12]
 800acea:	05db      	lsls	r3, r3, #23
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	4616      	mov	r6, r2
 800acf2:	d505      	bpl.n	800ad00 <__swrite+0x1e>
 800acf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf8:	2302      	movs	r3, #2
 800acfa:	2200      	movs	r2, #0
 800acfc:	f000 f9c8 	bl	800b090 <_lseek_r>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	463b      	mov	r3, r7
 800ad10:	4628      	mov	r0, r5
 800ad12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad16:	f000 b869 	b.w	800adec <_write_r>

0800ad1a <__sseek>:
 800ad1a:	b510      	push	{r4, lr}
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 f9b5 	bl	800b090 <_lseek_r>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	bf15      	itete	ne
 800ad2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad36:	81a3      	strheq	r3, [r4, #12]
 800ad38:	bf18      	it	ne
 800ad3a:	81a3      	strhne	r3, [r4, #12]
 800ad3c:	bd10      	pop	{r4, pc}

0800ad3e <__sclose>:
 800ad3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad42:	f000 b8d3 	b.w	800aeec <_close_r>
	...

0800ad48 <__swbuf_r>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	460e      	mov	r6, r1
 800ad4c:	4614      	mov	r4, r2
 800ad4e:	4605      	mov	r5, r0
 800ad50:	b118      	cbz	r0, 800ad5a <__swbuf_r+0x12>
 800ad52:	6983      	ldr	r3, [r0, #24]
 800ad54:	b90b      	cbnz	r3, 800ad5a <__swbuf_r+0x12>
 800ad56:	f7ff fb81 	bl	800a45c <__sinit>
 800ad5a:	4b21      	ldr	r3, [pc, #132]	; (800ade0 <__swbuf_r+0x98>)
 800ad5c:	429c      	cmp	r4, r3
 800ad5e:	d12b      	bne.n	800adb8 <__swbuf_r+0x70>
 800ad60:	686c      	ldr	r4, [r5, #4]
 800ad62:	69a3      	ldr	r3, [r4, #24]
 800ad64:	60a3      	str	r3, [r4, #8]
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	071a      	lsls	r2, r3, #28
 800ad6a:	d52f      	bpl.n	800adcc <__swbuf_r+0x84>
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	b36b      	cbz	r3, 800adcc <__swbuf_r+0x84>
 800ad70:	6923      	ldr	r3, [r4, #16]
 800ad72:	6820      	ldr	r0, [r4, #0]
 800ad74:	1ac0      	subs	r0, r0, r3
 800ad76:	6963      	ldr	r3, [r4, #20]
 800ad78:	b2f6      	uxtb	r6, r6
 800ad7a:	4283      	cmp	r3, r0
 800ad7c:	4637      	mov	r7, r6
 800ad7e:	dc04      	bgt.n	800ad8a <__swbuf_r+0x42>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4628      	mov	r0, r5
 800ad84:	f000 f948 	bl	800b018 <_fflush_r>
 800ad88:	bb30      	cbnz	r0, 800add8 <__swbuf_r+0x90>
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	60a3      	str	r3, [r4, #8]
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	701e      	strb	r6, [r3, #0]
 800ad98:	6963      	ldr	r3, [r4, #20]
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	4283      	cmp	r3, r0
 800ad9e:	d004      	beq.n	800adaa <__swbuf_r+0x62>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	07db      	lsls	r3, r3, #31
 800ada4:	d506      	bpl.n	800adb4 <__swbuf_r+0x6c>
 800ada6:	2e0a      	cmp	r6, #10
 800ada8:	d104      	bne.n	800adb4 <__swbuf_r+0x6c>
 800adaa:	4621      	mov	r1, r4
 800adac:	4628      	mov	r0, r5
 800adae:	f000 f933 	bl	800b018 <_fflush_r>
 800adb2:	b988      	cbnz	r0, 800add8 <__swbuf_r+0x90>
 800adb4:	4638      	mov	r0, r7
 800adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <__swbuf_r+0x9c>)
 800adba:	429c      	cmp	r4, r3
 800adbc:	d101      	bne.n	800adc2 <__swbuf_r+0x7a>
 800adbe:	68ac      	ldr	r4, [r5, #8]
 800adc0:	e7cf      	b.n	800ad62 <__swbuf_r+0x1a>
 800adc2:	4b09      	ldr	r3, [pc, #36]	; (800ade8 <__swbuf_r+0xa0>)
 800adc4:	429c      	cmp	r4, r3
 800adc6:	bf08      	it	eq
 800adc8:	68ec      	ldreq	r4, [r5, #12]
 800adca:	e7ca      	b.n	800ad62 <__swbuf_r+0x1a>
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f81e 	bl	800ae10 <__swsetup_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	d0cb      	beq.n	800ad70 <__swbuf_r+0x28>
 800add8:	f04f 37ff 	mov.w	r7, #4294967295
 800addc:	e7ea      	b.n	800adb4 <__swbuf_r+0x6c>
 800adde:	bf00      	nop
 800ade0:	0800b648 	.word	0x0800b648
 800ade4:	0800b668 	.word	0x0800b668
 800ade8:	0800b628 	.word	0x0800b628

0800adec <_write_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_write_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7f7 fad9 	bl	80023b2 <_write>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_write_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_write_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20000e60 	.word	0x20000e60

0800ae10 <__swsetup_r>:
 800ae10:	4b32      	ldr	r3, [pc, #200]	; (800aedc <__swsetup_r+0xcc>)
 800ae12:	b570      	push	{r4, r5, r6, lr}
 800ae14:	681d      	ldr	r5, [r3, #0]
 800ae16:	4606      	mov	r6, r0
 800ae18:	460c      	mov	r4, r1
 800ae1a:	b125      	cbz	r5, 800ae26 <__swsetup_r+0x16>
 800ae1c:	69ab      	ldr	r3, [r5, #24]
 800ae1e:	b913      	cbnz	r3, 800ae26 <__swsetup_r+0x16>
 800ae20:	4628      	mov	r0, r5
 800ae22:	f7ff fb1b 	bl	800a45c <__sinit>
 800ae26:	4b2e      	ldr	r3, [pc, #184]	; (800aee0 <__swsetup_r+0xd0>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d10f      	bne.n	800ae4c <__swsetup_r+0x3c>
 800ae2c:	686c      	ldr	r4, [r5, #4]
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae34:	0719      	lsls	r1, r3, #28
 800ae36:	d42c      	bmi.n	800ae92 <__swsetup_r+0x82>
 800ae38:	06dd      	lsls	r5, r3, #27
 800ae3a:	d411      	bmi.n	800ae60 <__swsetup_r+0x50>
 800ae3c:	2309      	movs	r3, #9
 800ae3e:	6033      	str	r3, [r6, #0]
 800ae40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	e03e      	b.n	800aeca <__swsetup_r+0xba>
 800ae4c:	4b25      	ldr	r3, [pc, #148]	; (800aee4 <__swsetup_r+0xd4>)
 800ae4e:	429c      	cmp	r4, r3
 800ae50:	d101      	bne.n	800ae56 <__swsetup_r+0x46>
 800ae52:	68ac      	ldr	r4, [r5, #8]
 800ae54:	e7eb      	b.n	800ae2e <__swsetup_r+0x1e>
 800ae56:	4b24      	ldr	r3, [pc, #144]	; (800aee8 <__swsetup_r+0xd8>)
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	bf08      	it	eq
 800ae5c:	68ec      	ldreq	r4, [r5, #12]
 800ae5e:	e7e6      	b.n	800ae2e <__swsetup_r+0x1e>
 800ae60:	0758      	lsls	r0, r3, #29
 800ae62:	d512      	bpl.n	800ae8a <__swsetup_r+0x7a>
 800ae64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae66:	b141      	cbz	r1, 800ae7a <__swsetup_r+0x6a>
 800ae68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae6c:	4299      	cmp	r1, r3
 800ae6e:	d002      	beq.n	800ae76 <__swsetup_r+0x66>
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 f991 	bl	800b198 <_free_r>
 800ae76:	2300      	movs	r3, #0
 800ae78:	6363      	str	r3, [r4, #52]	; 0x34
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae80:	81a3      	strh	r3, [r4, #12]
 800ae82:	2300      	movs	r3, #0
 800ae84:	6063      	str	r3, [r4, #4]
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	f043 0308 	orr.w	r3, r3, #8
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	b94b      	cbnz	r3, 800aeaa <__swsetup_r+0x9a>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aea0:	d003      	beq.n	800aeaa <__swsetup_r+0x9a>
 800aea2:	4621      	mov	r1, r4
 800aea4:	4630      	mov	r0, r6
 800aea6:	f000 f92b 	bl	800b100 <__smakebuf_r>
 800aeaa:	89a0      	ldrh	r0, [r4, #12]
 800aeac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeb0:	f010 0301 	ands.w	r3, r0, #1
 800aeb4:	d00a      	beq.n	800aecc <__swsetup_r+0xbc>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60a3      	str	r3, [r4, #8]
 800aeba:	6963      	ldr	r3, [r4, #20]
 800aebc:	425b      	negs	r3, r3
 800aebe:	61a3      	str	r3, [r4, #24]
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	b943      	cbnz	r3, 800aed6 <__swsetup_r+0xc6>
 800aec4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aec8:	d1ba      	bne.n	800ae40 <__swsetup_r+0x30>
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	0781      	lsls	r1, r0, #30
 800aece:	bf58      	it	pl
 800aed0:	6963      	ldrpl	r3, [r4, #20]
 800aed2:	60a3      	str	r3, [r4, #8]
 800aed4:	e7f4      	b.n	800aec0 <__swsetup_r+0xb0>
 800aed6:	2000      	movs	r0, #0
 800aed8:	e7f7      	b.n	800aeca <__swsetup_r+0xba>
 800aeda:	bf00      	nop
 800aedc:	20000028 	.word	0x20000028
 800aee0:	0800b648 	.word	0x0800b648
 800aee4:	0800b668 	.word	0x0800b668
 800aee8:	0800b628 	.word	0x0800b628

0800aeec <_close_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_close_r+0x1c>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	f7f7 fa77 	bl	80023ea <_close>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_close_r+0x1a>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_close_r+0x1a>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	20000e60 	.word	0x20000e60

0800af0c <__sflush_r>:
 800af0c:	898a      	ldrh	r2, [r1, #12]
 800af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af12:	4605      	mov	r5, r0
 800af14:	0710      	lsls	r0, r2, #28
 800af16:	460c      	mov	r4, r1
 800af18:	d458      	bmi.n	800afcc <__sflush_r+0xc0>
 800af1a:	684b      	ldr	r3, [r1, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc05      	bgt.n	800af2c <__sflush_r+0x20>
 800af20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af22:	2b00      	cmp	r3, #0
 800af24:	dc02      	bgt.n	800af2c <__sflush_r+0x20>
 800af26:	2000      	movs	r0, #0
 800af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d0f9      	beq.n	800af26 <__sflush_r+0x1a>
 800af32:	2300      	movs	r3, #0
 800af34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af38:	682f      	ldr	r7, [r5, #0]
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	d032      	beq.n	800afa4 <__sflush_r+0x98>
 800af3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	075a      	lsls	r2, r3, #29
 800af44:	d505      	bpl.n	800af52 <__sflush_r+0x46>
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	1ac0      	subs	r0, r0, r3
 800af4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af4c:	b10b      	cbz	r3, 800af52 <__sflush_r+0x46>
 800af4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af50:	1ac0      	subs	r0, r0, r3
 800af52:	2300      	movs	r3, #0
 800af54:	4602      	mov	r2, r0
 800af56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b0      	blx	r6
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	d106      	bne.n	800af72 <__sflush_r+0x66>
 800af64:	6829      	ldr	r1, [r5, #0]
 800af66:	291d      	cmp	r1, #29
 800af68:	d82c      	bhi.n	800afc4 <__sflush_r+0xb8>
 800af6a:	4a2a      	ldr	r2, [pc, #168]	; (800b014 <__sflush_r+0x108>)
 800af6c:	40ca      	lsrs	r2, r1
 800af6e:	07d6      	lsls	r6, r2, #31
 800af70:	d528      	bpl.n	800afc4 <__sflush_r+0xb8>
 800af72:	2200      	movs	r2, #0
 800af74:	6062      	str	r2, [r4, #4]
 800af76:	04d9      	lsls	r1, r3, #19
 800af78:	6922      	ldr	r2, [r4, #16]
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	d504      	bpl.n	800af88 <__sflush_r+0x7c>
 800af7e:	1c42      	adds	r2, r0, #1
 800af80:	d101      	bne.n	800af86 <__sflush_r+0x7a>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	b903      	cbnz	r3, 800af88 <__sflush_r+0x7c>
 800af86:	6560      	str	r0, [r4, #84]	; 0x54
 800af88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af8a:	602f      	str	r7, [r5, #0]
 800af8c:	2900      	cmp	r1, #0
 800af8e:	d0ca      	beq.n	800af26 <__sflush_r+0x1a>
 800af90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af94:	4299      	cmp	r1, r3
 800af96:	d002      	beq.n	800af9e <__sflush_r+0x92>
 800af98:	4628      	mov	r0, r5
 800af9a:	f000 f8fd 	bl	800b198 <_free_r>
 800af9e:	2000      	movs	r0, #0
 800afa0:	6360      	str	r0, [r4, #52]	; 0x34
 800afa2:	e7c1      	b.n	800af28 <__sflush_r+0x1c>
 800afa4:	6a21      	ldr	r1, [r4, #32]
 800afa6:	2301      	movs	r3, #1
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b0      	blx	r6
 800afac:	1c41      	adds	r1, r0, #1
 800afae:	d1c7      	bne.n	800af40 <__sflush_r+0x34>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0c4      	beq.n	800af40 <__sflush_r+0x34>
 800afb6:	2b1d      	cmp	r3, #29
 800afb8:	d001      	beq.n	800afbe <__sflush_r+0xb2>
 800afba:	2b16      	cmp	r3, #22
 800afbc:	d101      	bne.n	800afc2 <__sflush_r+0xb6>
 800afbe:	602f      	str	r7, [r5, #0]
 800afc0:	e7b1      	b.n	800af26 <__sflush_r+0x1a>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	e7ad      	b.n	800af28 <__sflush_r+0x1c>
 800afcc:	690f      	ldr	r7, [r1, #16]
 800afce:	2f00      	cmp	r7, #0
 800afd0:	d0a9      	beq.n	800af26 <__sflush_r+0x1a>
 800afd2:	0793      	lsls	r3, r2, #30
 800afd4:	680e      	ldr	r6, [r1, #0]
 800afd6:	bf08      	it	eq
 800afd8:	694b      	ldreq	r3, [r1, #20]
 800afda:	600f      	str	r7, [r1, #0]
 800afdc:	bf18      	it	ne
 800afde:	2300      	movne	r3, #0
 800afe0:	eba6 0807 	sub.w	r8, r6, r7
 800afe4:	608b      	str	r3, [r1, #8]
 800afe6:	f1b8 0f00 	cmp.w	r8, #0
 800afea:	dd9c      	ble.n	800af26 <__sflush_r+0x1a>
 800afec:	6a21      	ldr	r1, [r4, #32]
 800afee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aff0:	4643      	mov	r3, r8
 800aff2:	463a      	mov	r2, r7
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	2800      	cmp	r0, #0
 800affa:	dc06      	bgt.n	800b00a <__sflush_r+0xfe>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e78e      	b.n	800af28 <__sflush_r+0x1c>
 800b00a:	4407      	add	r7, r0
 800b00c:	eba8 0800 	sub.w	r8, r8, r0
 800b010:	e7e9      	b.n	800afe6 <__sflush_r+0xda>
 800b012:	bf00      	nop
 800b014:	20400001 	.word	0x20400001

0800b018 <_fflush_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	690b      	ldr	r3, [r1, #16]
 800b01c:	4605      	mov	r5, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b913      	cbnz	r3, 800b028 <_fflush_r+0x10>
 800b022:	2500      	movs	r5, #0
 800b024:	4628      	mov	r0, r5
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	b118      	cbz	r0, 800b032 <_fflush_r+0x1a>
 800b02a:	6983      	ldr	r3, [r0, #24]
 800b02c:	b90b      	cbnz	r3, 800b032 <_fflush_r+0x1a>
 800b02e:	f7ff fa15 	bl	800a45c <__sinit>
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <_fflush_r+0x6c>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d11b      	bne.n	800b070 <_fflush_r+0x58>
 800b038:	686c      	ldr	r4, [r5, #4]
 800b03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0ef      	beq.n	800b022 <_fflush_r+0xa>
 800b042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b044:	07d0      	lsls	r0, r2, #31
 800b046:	d404      	bmi.n	800b052 <_fflush_r+0x3a>
 800b048:	0599      	lsls	r1, r3, #22
 800b04a:	d402      	bmi.n	800b052 <_fflush_r+0x3a>
 800b04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b04e:	f7ff faa3 	bl	800a598 <__retarget_lock_acquire_recursive>
 800b052:	4628      	mov	r0, r5
 800b054:	4621      	mov	r1, r4
 800b056:	f7ff ff59 	bl	800af0c <__sflush_r>
 800b05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b05c:	07da      	lsls	r2, r3, #31
 800b05e:	4605      	mov	r5, r0
 800b060:	d4e0      	bmi.n	800b024 <_fflush_r+0xc>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d4dd      	bmi.n	800b024 <_fflush_r+0xc>
 800b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06a:	f7ff fa96 	bl	800a59a <__retarget_lock_release_recursive>
 800b06e:	e7d9      	b.n	800b024 <_fflush_r+0xc>
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <_fflush_r+0x70>)
 800b072:	429c      	cmp	r4, r3
 800b074:	d101      	bne.n	800b07a <_fflush_r+0x62>
 800b076:	68ac      	ldr	r4, [r5, #8]
 800b078:	e7df      	b.n	800b03a <_fflush_r+0x22>
 800b07a:	4b04      	ldr	r3, [pc, #16]	; (800b08c <_fflush_r+0x74>)
 800b07c:	429c      	cmp	r4, r3
 800b07e:	bf08      	it	eq
 800b080:	68ec      	ldreq	r4, [r5, #12]
 800b082:	e7da      	b.n	800b03a <_fflush_r+0x22>
 800b084:	0800b648 	.word	0x0800b648
 800b088:	0800b668 	.word	0x0800b668
 800b08c:	0800b628 	.word	0x0800b628

0800b090 <_lseek_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_lseek_r+0x20>)
 800b094:	4604      	mov	r4, r0
 800b096:	4608      	mov	r0, r1
 800b098:	4611      	mov	r1, r2
 800b09a:	2200      	movs	r2, #0
 800b09c:	602a      	str	r2, [r5, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f7f7 f9ca 	bl	8002438 <_lseek>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_lseek_r+0x1e>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_lseek_r+0x1e>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20000e60 	.word	0x20000e60

0800b0b4 <__swhatbuf_r>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	460e      	mov	r6, r1
 800b0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	b096      	sub	sp, #88	; 0x58
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	461d      	mov	r5, r3
 800b0c4:	da08      	bge.n	800b0d8 <__swhatbuf_r+0x24>
 800b0c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	602a      	str	r2, [r5, #0]
 800b0ce:	061a      	lsls	r2, r3, #24
 800b0d0:	d410      	bmi.n	800b0f4 <__swhatbuf_r+0x40>
 800b0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d6:	e00e      	b.n	800b0f6 <__swhatbuf_r+0x42>
 800b0d8:	466a      	mov	r2, sp
 800b0da:	f000 f8bb 	bl	800b254 <_fstat_r>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	dbf1      	blt.n	800b0c6 <__swhatbuf_r+0x12>
 800b0e2:	9a01      	ldr	r2, [sp, #4]
 800b0e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0ec:	425a      	negs	r2, r3
 800b0ee:	415a      	adcs	r2, r3
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	e7ee      	b.n	800b0d2 <__swhatbuf_r+0x1e>
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	b016      	add	sp, #88	; 0x58
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b100 <__smakebuf_r>:
 800b100:	898b      	ldrh	r3, [r1, #12]
 800b102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b104:	079d      	lsls	r5, r3, #30
 800b106:	4606      	mov	r6, r0
 800b108:	460c      	mov	r4, r1
 800b10a:	d507      	bpl.n	800b11c <__smakebuf_r+0x1c>
 800b10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	6123      	str	r3, [r4, #16]
 800b114:	2301      	movs	r3, #1
 800b116:	6163      	str	r3, [r4, #20]
 800b118:	b002      	add	sp, #8
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	ab01      	add	r3, sp, #4
 800b11e:	466a      	mov	r2, sp
 800b120:	f7ff ffc8 	bl	800b0b4 <__swhatbuf_r>
 800b124:	9900      	ldr	r1, [sp, #0]
 800b126:	4605      	mov	r5, r0
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff fa57 	bl	800a5dc <_malloc_r>
 800b12e:	b948      	cbnz	r0, 800b144 <__smakebuf_r+0x44>
 800b130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b134:	059a      	lsls	r2, r3, #22
 800b136:	d4ef      	bmi.n	800b118 <__smakebuf_r+0x18>
 800b138:	f023 0303 	bic.w	r3, r3, #3
 800b13c:	f043 0302 	orr.w	r3, r3, #2
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	e7e3      	b.n	800b10c <__smakebuf_r+0xc>
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <__smakebuf_r+0x7c>)
 800b146:	62b3      	str	r3, [r6, #40]	; 0x28
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	6020      	str	r0, [r4, #0]
 800b14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	9b00      	ldr	r3, [sp, #0]
 800b154:	6163      	str	r3, [r4, #20]
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	6120      	str	r0, [r4, #16]
 800b15a:	b15b      	cbz	r3, 800b174 <__smakebuf_r+0x74>
 800b15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b160:	4630      	mov	r0, r6
 800b162:	f000 f889 	bl	800b278 <_isatty_r>
 800b166:	b128      	cbz	r0, 800b174 <__smakebuf_r+0x74>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	f023 0303 	bic.w	r3, r3, #3
 800b16e:	f043 0301 	orr.w	r3, r3, #1
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	89a0      	ldrh	r0, [r4, #12]
 800b176:	4305      	orrs	r5, r0
 800b178:	81a5      	strh	r5, [r4, #12]
 800b17a:	e7cd      	b.n	800b118 <__smakebuf_r+0x18>
 800b17c:	0800a3f5 	.word	0x0800a3f5

0800b180 <__malloc_lock>:
 800b180:	4801      	ldr	r0, [pc, #4]	; (800b188 <__malloc_lock+0x8>)
 800b182:	f7ff ba09 	b.w	800a598 <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	20000e54 	.word	0x20000e54

0800b18c <__malloc_unlock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	; (800b194 <__malloc_unlock+0x8>)
 800b18e:	f7ff ba04 	b.w	800a59a <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	20000e54 	.word	0x20000e54

0800b198 <_free_r>:
 800b198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b19a:	2900      	cmp	r1, #0
 800b19c:	d044      	beq.n	800b228 <_free_r+0x90>
 800b19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a2:	9001      	str	r0, [sp, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1aa:	bfb8      	it	lt
 800b1ac:	18e4      	addlt	r4, r4, r3
 800b1ae:	f7ff ffe7 	bl	800b180 <__malloc_lock>
 800b1b2:	4a1e      	ldr	r2, [pc, #120]	; (800b22c <_free_r+0x94>)
 800b1b4:	9801      	ldr	r0, [sp, #4]
 800b1b6:	6813      	ldr	r3, [r2, #0]
 800b1b8:	b933      	cbnz	r3, 800b1c8 <_free_r+0x30>
 800b1ba:	6063      	str	r3, [r4, #4]
 800b1bc:	6014      	str	r4, [r2, #0]
 800b1be:	b003      	add	sp, #12
 800b1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1c4:	f7ff bfe2 	b.w	800b18c <__malloc_unlock>
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d908      	bls.n	800b1de <_free_r+0x46>
 800b1cc:	6825      	ldr	r5, [r4, #0]
 800b1ce:	1961      	adds	r1, r4, r5
 800b1d0:	428b      	cmp	r3, r1
 800b1d2:	bf01      	itttt	eq
 800b1d4:	6819      	ldreq	r1, [r3, #0]
 800b1d6:	685b      	ldreq	r3, [r3, #4]
 800b1d8:	1949      	addeq	r1, r1, r5
 800b1da:	6021      	streq	r1, [r4, #0]
 800b1dc:	e7ed      	b.n	800b1ba <_free_r+0x22>
 800b1de:	461a      	mov	r2, r3
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	b10b      	cbz	r3, 800b1e8 <_free_r+0x50>
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	d9fa      	bls.n	800b1de <_free_r+0x46>
 800b1e8:	6811      	ldr	r1, [r2, #0]
 800b1ea:	1855      	adds	r5, r2, r1
 800b1ec:	42a5      	cmp	r5, r4
 800b1ee:	d10b      	bne.n	800b208 <_free_r+0x70>
 800b1f0:	6824      	ldr	r4, [r4, #0]
 800b1f2:	4421      	add	r1, r4
 800b1f4:	1854      	adds	r4, r2, r1
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	6011      	str	r1, [r2, #0]
 800b1fa:	d1e0      	bne.n	800b1be <_free_r+0x26>
 800b1fc:	681c      	ldr	r4, [r3, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	6053      	str	r3, [r2, #4]
 800b202:	4421      	add	r1, r4
 800b204:	6011      	str	r1, [r2, #0]
 800b206:	e7da      	b.n	800b1be <_free_r+0x26>
 800b208:	d902      	bls.n	800b210 <_free_r+0x78>
 800b20a:	230c      	movs	r3, #12
 800b20c:	6003      	str	r3, [r0, #0]
 800b20e:	e7d6      	b.n	800b1be <_free_r+0x26>
 800b210:	6825      	ldr	r5, [r4, #0]
 800b212:	1961      	adds	r1, r4, r5
 800b214:	428b      	cmp	r3, r1
 800b216:	bf04      	itt	eq
 800b218:	6819      	ldreq	r1, [r3, #0]
 800b21a:	685b      	ldreq	r3, [r3, #4]
 800b21c:	6063      	str	r3, [r4, #4]
 800b21e:	bf04      	itt	eq
 800b220:	1949      	addeq	r1, r1, r5
 800b222:	6021      	streq	r1, [r4, #0]
 800b224:	6054      	str	r4, [r2, #4]
 800b226:	e7ca      	b.n	800b1be <_free_r+0x26>
 800b228:	b003      	add	sp, #12
 800b22a:	bd30      	pop	{r4, r5, pc}
 800b22c:	20000e58 	.word	0x20000e58

0800b230 <_read_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d07      	ldr	r5, [pc, #28]	; (800b250 <_read_r+0x20>)
 800b234:	4604      	mov	r4, r0
 800b236:	4608      	mov	r0, r1
 800b238:	4611      	mov	r1, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	602a      	str	r2, [r5, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f7f7 f89a 	bl	8002378 <_read>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_read_r+0x1e>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_read_r+0x1e>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	20000e60 	.word	0x20000e60

0800b254 <_fstat_r>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	4d07      	ldr	r5, [pc, #28]	; (800b274 <_fstat_r+0x20>)
 800b258:	2300      	movs	r3, #0
 800b25a:	4604      	mov	r4, r0
 800b25c:	4608      	mov	r0, r1
 800b25e:	4611      	mov	r1, r2
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f7f7 f8ce 	bl	8002402 <_fstat>
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	d102      	bne.n	800b270 <_fstat_r+0x1c>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	b103      	cbz	r3, 800b270 <_fstat_r+0x1c>
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	bd38      	pop	{r3, r4, r5, pc}
 800b272:	bf00      	nop
 800b274:	20000e60 	.word	0x20000e60

0800b278 <_isatty_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d06      	ldr	r5, [pc, #24]	; (800b294 <_isatty_r+0x1c>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	f7f7 f8cd 	bl	8002422 <_isatty>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_isatty_r+0x1a>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_isatty_r+0x1a>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	20000e60 	.word	0x20000e60

0800b298 <_init>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr

0800b2a4 <_fini>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	bf00      	nop
 800b2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2aa:	bc08      	pop	{r3}
 800b2ac:	469e      	mov	lr, r3
 800b2ae:	4770      	bx	lr
