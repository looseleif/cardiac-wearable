
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011994  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  08011ad8  08011ad8  00021ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801339c  0801339c  0002339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080133a4  080133a4  000233a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080133a8  080133a8  000233a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000008  080133ac  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  200001fc  080135a0  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000a80  08013e23  00030a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000ab8  08013e58  00030ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001efc  20000acc  08013e69  00030acc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200029c8  08013e69  000329c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030ac9  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 15 .debug_info   0003802f  00000000  00000000  00030af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007089  00000000  00000000  00068b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003060  00000000  00000000  0006fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002d60  00000000  00000000  00072c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f9de  00000000  00000000  00075978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000381a5  00000000  00000000  000a5356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00100f80  00000000  00000000  000dd4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001de47b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000dc6c  00000000  00000000  001de4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000acc 	.word	0x20000acc
 800015c:	00000000 	.word	0x00000000
 8000160:	08011abc 	.word	0x08011abc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000ad0 	.word	0x20000ad0
 800017c:	08011abc 	.word	0x08011abc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468e      	mov	lr, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14d      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4694      	mov	ip, r2
 8000b9a:	d969      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b152      	cbz	r2, 8000bb8 <__udivmoddi4+0x30>
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	f1c2 0120 	rsb	r1, r2, #32
 8000baa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bbc:	0c21      	lsrs	r1, r4, #16
 8000bbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000bc2:	fa1f f78c 	uxth.w	r7, ip
 8000bc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bce:	fb06 f107 	mul.w	r1, r6, r7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bde:	f080 811f 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 811c 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000be8:	3e02      	subs	r6, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 f707 	mul.w	r7, r0, r7
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0c:	f080 810a 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	f240 8107 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	2600      	movs	r6, #0
 8000c22:	b11d      	cbz	r5, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c5 4300 	strd	r4, r3, [r5]
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80ef 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	469e      	mov	lr, r3
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000c6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8092 	bne.w	8000da2 <__udivmoddi4+0x21a>
 8000c7e:	eba1 010c 	sub.w	r1, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2601      	movs	r6, #1
 8000c8c:	0c20      	lsrs	r0, r4, #16
 8000c8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c92:	fb07 1113 	mls	r1, r7, r3, r1
 8000c96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	4288      	cmp	r0, r1
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79c      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ce8:	f1c6 0720 	rsb	r7, r6, #32
 8000cec:	40b3      	lsls	r3, r6
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40f9      	lsrs	r1, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f306 	lsl.w	r3, r0, r6
 8000d0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 1118 	mls	r1, r9, r8, r1
 8000d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	4288      	cmp	r0, r1
 8000d22:	fa02 f206 	lsl.w	r2, r2, r6
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	1a09      	subs	r1, r1, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d48:	fb09 1110 	mls	r1, r9, r0, r1
 8000d4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	458e      	cmp	lr, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	458e      	cmp	lr, r1
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba1 010e 	sub.w	r1, r1, lr
 8000d76:	42a1      	cmp	r1, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb61 010e 	sbc.w	r1, r1, lr
 8000d8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d92:	40f1      	lsrs	r1, r6
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c5 7100 	strd	r7, r1, [r5]
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	f1c2 0320 	rsb	r3, r2, #32
 8000da6:	40d8      	lsrs	r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa21 f303 	lsr.w	r3, r1, r3
 8000db0:	4091      	lsls	r1, r2
 8000db2:	4301      	orrs	r1, r0
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dc0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc4:	0c0b      	lsrs	r3, r1, #16
 8000dc6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dca:	fb00 f60e 	mul.w	r6, r0, lr
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	429e      	cmp	r6, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	b289      	uxth	r1, r1
 8000dec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000df0:	fb07 3316 	mls	r3, r7, r6, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3e02      	subs	r6, #2
 8000e10:	4461      	add	r1, ip
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	462e      	mov	r6, r5
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	e705      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e20:	4606      	mov	r6, r0
 8000e22:	e6e3      	b.n	8000bec <__udivmoddi4+0x64>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f8      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4646      	mov	r6, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4640      	mov	r0, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4461      	add	r1, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <BH1790GLC_init>:

/*****************************************************************************
INIT FUNCTION
******************************************************************************/
uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	80da      	strh	r2, [r3, #6]

	dev->samples_index = 0;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0

	for(int i=0; i<NUM_SAMPLES; i++){
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <BH1790GLC_init+0x40>
		dev->smooth_array[i] = 0;
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	2200      	movs	r2, #0
 8000e94:	805a      	strh	r2, [r3, #2]
	for(int i=0; i<NUM_SAMPLES; i++){
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ea2:	dbf0      	blt.n	8000e86 <BH1790GLC_init+0x2a>
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000ea4:	f107 0312 	add.w	r3, r7, #18
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	210f      	movs	r1, #15
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fbc5 	bl	800163c <read>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000eb6:	7cfb      	ldrb	r3, [r7, #19]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <BH1790GLC_init+0x64>
		return ERR_MID_VAL;
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	e04a      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}
	if(regData != BH1790GLC_MID_VAL){
 8000ec0:	7cbb      	ldrb	r3, [r7, #18]
 8000ec2:	2be0      	cmp	r3, #224	; 0xe0
 8000ec4:	d001      	beq.n	8000eca <BH1790GLC_init+0x6e>
		return ERR_MID_VAL;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	e045      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000eca:	f107 0312 	add.w	r3, r7, #18
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fbb2 	bl	800163c <read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000edc:	7cfb      	ldrb	r3, [r7, #19]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <BH1790GLC_init+0x8a>
		return ERR_PID_VAL;
 8000ee2:	230b      	movs	r3, #11
 8000ee4:	e037      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000ee6:	7cbb      	ldrb	r3, [r7, #18]
 8000ee8:	2b0d      	cmp	r3, #13
 8000eea:	d001      	beq.n	8000ef0 <BH1790GLC_init+0x94>
		return ERR_PID_VAL;
 8000eec:	230b      	movs	r3, #11
 8000eee:	e032      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 8000ef0:	2382      	movs	r3, #130	; 0x82
 8000ef2:	733b      	strb	r3, [r7, #12]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	737b      	strb	r3, [r7, #13]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73bb      	strb	r3, [r7, #14]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	461a      	mov	r2, r3
 8000f02:	2141      	movs	r1, #65	; 0x41
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fb77 	bl	80015f8 <write>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f0e:	7cfb      	ldrb	r3, [r7, #19]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <BH1790GLC_init+0xbc>
		return ERR_MEAS_CONTROL1;
 8000f14:	2314      	movs	r3, #20
 8000f16:	e01e      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2142      	movs	r1, #66	; 0x42
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fb68 	bl	80015f8 <write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <BH1790GLC_init+0xda>
		return ERR_MEAS_CONTROL2;
 8000f32:	2315      	movs	r3, #21
 8000f34:	e00f      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2143      	movs	r1, #67	; 0x43
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fb59 	bl	80015f8 <write>
 8000f46:	4603      	mov	r3, r0
 8000f48:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f4a:	7cfb      	ldrb	r3, [r7, #19]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <BH1790GLC_init+0xf8>
		return ERR_MEAS_START;
 8000f50:	2316      	movs	r3, #22
 8000f52:	e000      	b.n	8000f56 <BH1790GLC_init+0xfa>
	}

	return SUCCESS;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <get_val>:
******************************************************************************/
/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000f66:	f107 0208 	add.w	r2, r7, #8
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	2154      	movs	r1, #84	; 0x54
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fb86 	bl	8001680 <many_reads>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 8000f7e:	231e      	movs	r3, #30
 8000f80:	e014      	b.n	8000fac <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 8000f82:	7a7b      	ldrb	r3, [r7, #9]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7a3b      	ldrb	r3, [r7, #8]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <add_sample>:
	}

	return SUCCESS;
}

uint8_t add_sample( BH1790GLC *dev ){
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]


	dev->ppg_samples[dev->samples_index] = dev->ppg_data[1];
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	88d9      	ldrh	r1, [r3, #6]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3204      	adds	r2, #4
 8000fcc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	dev->samples_index++;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0


	if(dev->samples_index==NUM_SAMPLES){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000fe6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fea:	d105      	bne.n	8000ff8 <add_sample+0x44>

		dev->samples_index = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
		return 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e008      	b.n	800100a <add_sample+0x56>
	}
	else if(dev->ppg_data[0] > led_off_threshold) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	889b      	ldrh	r3, [r3, #4]
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d903      	bls.n	8001008 <add_sample+0x54>
		dev->samples_index = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
	}

	return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <ppg_calculate>:

uint8_t ppg_calculate( BH1790GLC *dev ){
 8001018:	b580      	push	{r7, lr}
 800101a:	f5ad 6d11 	sub.w	sp, sp, #2320	; 0x910
 800101e:	af00      	add	r7, sp, #0
 8001020:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001024:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8001028:	6018      	str	r0, [r3, #0]

	  //uint16_t smooth_array[NUM_SAMPLES];
	  int deriv_array[NUM_SAMPLES-1];

	  uint16_t raw_data_1;
	  float smooth_data_1 = 0;
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8001032:	6013      	str	r3, [r2, #0]
	  float lpf_beta = 0.075;
 8001034:	4bc3      	ldr	r3, [pc, #780]	; (8001344 <ppg_calculate+0x32c>)
 8001036:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800103a:	6013      	str	r3, [r2, #0]

	  for(int i = 0; i < NUM_SAMPLES; i++){
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8001042:	e088      	b.n	8001156 <ppg_calculate+0x13e>

		  raw_data_1 = dev->ppg_samples[i];
 8001044:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001048:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8001052:	3204      	adds	r2, #4
 8001054:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001058:	f8a7 387e 	strh.w	r3, [r7, #2174]	; 0x87e
		  smooth_data_1 = smooth_data_1 - (lpf_beta*(smooth_data_1 - raw_data_1));
 800105c:	f8b7 387e 	ldrh.w	r3, [r7, #2174]	; 0x87e
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 800106c:	ed93 7a00 	vldr	s14, [r3]
 8001070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001074:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001080:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001090:	edc3 7a00 	vstr	s15, [r3]
		  dev->smooth_array[i] = smooth_data_1;
 8001094:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	b299      	uxth	r1, r3
 80010a6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80010aa:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 80010b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	460a      	mov	r2, r1
 80010be:	805a      	strh	r2, [r3, #2]


		  if(i!=0){
 80010c0:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d041      	beq.n	800114c <ppg_calculate+0x134>


			  int deriv = (int)dev->smooth_array[i] - (int)dev->smooth_array[i-1];
 80010c8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80010cc:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 80010d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	885b      	ldrh	r3, [r3, #2]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 80010ec:	f6a2 120c 	subw	r2, r2, #2316	; 0x90c
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	885b      	ldrh	r3, [r3, #2]
 80010fc:	1acb      	subs	r3, r1, r3
 80010fe:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
			  if(deriv<255 || deriv>-255){ // check 255 value later
 8001102:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001106:	2bfe      	cmp	r3, #254	; 0xfe
 8001108:	dd04      	ble.n	8001114 <ppg_calculate+0xfc>
 800110a:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800110e:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8001112:	db0a      	blt.n	800112a <ppg_calculate+0x112>

				 deriv_array[i] = deriv;
 8001114:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001118:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800111c:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8001120:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001128:	e010      	b.n	800114c <ppg_calculate+0x134>

			  } else {

				 deriv_array[i] = deriv_array[i-1];
 800112a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800112e:	1e5a      	subs	r2, r3, #1
 8001130:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001134:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800113c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001140:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001144:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int i = 0; i < NUM_SAMPLES; i++){
 800114c:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8001150:	3301      	adds	r3, #1
 8001152:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8001156:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800115a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800115e:	f6ff af71 	blt.w	8001044 <ppg_calculate+0x2c>

		  }

	  }

	  int pos = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
	  int neg = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900

	  int pos_check = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
	  int neg_check = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

	  int peak_vals[40] = {};
 800117a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800117e:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8001182:	4618      	mov	r0, r3
 8001184:	23a0      	movs	r3, #160	; 0xa0
 8001186:	461a      	mov	r2, r3
 8001188:	2100      	movs	r1, #0
 800118a:	f00d fdbd 	bl	800ed08 <memset>
	  int peak_count = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8


	  for(int j = 0; j < NUM_SAMPLES-1; j++){
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800119a:	e066      	b.n	800126a <ppg_calculate+0x252>



		  if(deriv_array[j]>0 && pos_check==0){
 800119c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80011a0:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80011a4:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd13      	ble.n	80011d8 <ppg_calculate+0x1c0>
 80011b0:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10f      	bne.n	80011d8 <ppg_calculate+0x1c0>

			  neg = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
			  pos++;
 80011be:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904

			  if(pos==3){
 80011c8:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d147      	bne.n	8001260 <ppg_calculate+0x248>

				  pos_check = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
			  if(pos==3){
 80011d6:	e043      	b.n	8001260 <ppg_calculate+0x248>

			  }

		  } else if (deriv_array[j]<0 && pos_check==1) {
 80011d8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80011dc:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80011e0:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da28      	bge.n	800123e <ppg_calculate+0x226>
 80011ec:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d124      	bne.n	800123e <ppg_calculate+0x226>

			  pos = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
			  neg++;
 80011fa:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900

			  if(neg==3){
 8001204:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 8001208:	2b03      	cmp	r3, #3
 800120a:	d129      	bne.n	8001260 <ppg_calculate+0x248>

				  neg_check = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
				  peak_vals[peak_count] = j;
 8001212:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001216:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 800121a:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
 800121e:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 8001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  peak_count++;
 8001226:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8

				  pos_check = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
				  neg_check = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
			  if(neg==3){
 800123c:	e010      	b.n	8001260 <ppg_calculate+0x248>

			  }


		  } else if (deriv_array[j]<0 && pos_check==0){
 800123e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001242:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001246:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	da06      	bge.n	8001260 <ppg_calculate+0x248>
 8001252:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <ppg_calculate+0x248>
			  pos = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
	  for(int j = 0; j < NUM_SAMPLES-1; j++){
 8001260:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8001264:	3301      	adds	r3, #1
 8001266:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800126a:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800126e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001272:	dd93      	ble.n	800119c <ppg_calculate+0x184>

	  }

	  //printf("{");

	  for(int k = 0; k<40; k++){
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 38f0 	str.w	r3, [r7, #2288]	; 0x8f0
 800127a:	e004      	b.n	8001286 <ppg_calculate+0x26e>
 800127c:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 8001280:	3301      	adds	r3, #1
 8001282:	f8c7 38f0 	str.w	r3, [r7, #2288]	; 0x8f0
 8001286:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 800128a:	2b27      	cmp	r3, #39	; 0x27
 800128c:	ddf6      	ble.n	800127c <ppg_calculate+0x264>
		  //printf("[%d],", peak_vals[k]);

	  }
	  //printf("}\n");

	  double sum = 0;
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 800129a:	e9c1 2300 	strd	r2, r3, [r1]

	  for (int k = 1; k < peak_count; k++) {
 800129e:	2301      	movs	r3, #1
 80012a0:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 80012a4:	e027      	b.n	80012f6 <ppg_calculate+0x2de>
	    sum += peak_vals[k] - peak_vals[k - 1];
 80012a6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80012aa:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80012ae:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 80012b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012b6:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80012ba:	1e59      	subs	r1, r3, #1
 80012bc:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80012c0:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80012c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f902 	bl	80004d4 <__aeabi_i2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 80012d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012dc:	f7fe ffae 	bl	800023c <__adddf3>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 80012e8:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 1; k < peak_count; k++) {
 80012ec:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 80012f0:	3301      	adds	r3, #1
 80012f2:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 80012f6:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 80012fa:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbd1      	blt.n	80012a6 <ppg_calculate+0x28e>
	  }

	  double mean_interval = sum / (peak_count - 1);
 8001302:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001306:	3b01      	subs	r3, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f8e3 	bl	80004d4 <__aeabi_i2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8001316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800131a:	f7ff fa6f 	bl	80007fc <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 8001326:	e9c1 2300 	strd	r2, r3, [r1]

	  double squared_diff_sum = 0;
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8001336:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 1; k < peak_count; k++) {
 800133a:	2301      	movs	r3, #1
 800133c:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8001340:	e040      	b.n	80013c4 <ppg_calculate+0x3ac>
 8001342:	bf00      	nop
 8001344:	3d99999a 	.word	0x3d99999a
	    double diff = peak_vals[k] - peak_vals[k - 1] - mean_interval;
 8001348:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800134c:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8001350:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 8001354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001358:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 800135c:	1e59      	subs	r1, r3, #1
 800135e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001362:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8001366:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8b1 	bl	80004d4 <__aeabi_i2d>
 8001372:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7fe ff5d 	bl	8000238 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001386:	e9c1 2300 	strd	r2, r3, [r1]
	    squared_diff_sum += diff * diff;
 800138a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800139a:	f7ff f905 	bl	80005a8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80013a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013aa:	f7fe ff47 	bl	800023c <__adddf3>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80013b6:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 1; k < peak_count; k++) {
 80013ba:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 80013be:	3301      	adds	r3, #1
 80013c0:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 80013c4:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 80013c8:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbbb      	blt.n	8001348 <ppg_calculate+0x330>
	  }

	  double std_deviation = sqrt(squared_diff_sum / (peak_count - 1));  // Calculate the standard deviation of the intervals
 80013d0:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f87c 	bl	80004d4 <__aeabi_i2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80013e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013e8:	f7ff fa08 	bl	80007fc <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	f010 fa80 	bl	8011900 <sqrt>
 8001400:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8001404:	ed83 0b00 	vstr	d0, [r3]
	  double cv = std_deviation / mean_interval; // Calculate the coefficient of variation (CV)
 8001408:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8001414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001418:	f7ff f9f0 	bl	80007fc <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8001424:	e9c1 2300 	strd	r2, r3, [r1]

	  double cv_threshold;
	     int af_detected_cv = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
	     int af_detected_tpr = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 38a0 	str.w	r3, [r7, #2208]	; 0x8a0

	     // Check for atrial fibrillation using cv threshold
	     if (peak_count >= 3 && peak_count <= 40)
 8001434:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001438:	2b02      	cmp	r3, #2
 800143a:	dd34      	ble.n	80014a6 <ppg_calculate+0x48e>
 800143c:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001440:	2b28      	cmp	r3, #40	; 0x28
 8001442:	dc30      	bgt.n	80014a6 <ppg_calculate+0x48e>
	     {
	         cv_threshold = 0.412 - (0.156 * (peak_count - 3)) / (40 - 3);
 8001444:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001448:	3b03      	subs	r3, #3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f842 	bl	80004d4 <__aeabi_i2d>
 8001450:	a367      	add	r3, pc, #412	; (adr r3, 80015f0 <ppg_calculate+0x5d8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8a7 	bl	80005a8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <ppg_calculate+0x5d0>)
 8001468:	f7ff f9c8 	bl	80007fc <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	a157      	add	r1, pc, #348	; (adr r1, 80015d0 <ppg_calculate+0x5b8>)
 8001472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001476:	f7fe fedf 	bl	8000238 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	f607 0198 	addw	r1, r7, #2200	; 0x898
 8001482:	e9c1 2300 	strd	r2, r3, [r1]

	         if (cv > cv_threshold)
 8001486:	f607 0398 	addw	r3, r7, #2200	; 0x898
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8001492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001496:	f7ff fb17 	bl	8000ac8 <__aeabi_dcmpgt>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <ppg_calculate+0x48e>
	         {
	             af_detected_cv = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
	         }
	     }

	     // Calculate turning point ratio
	     int turning_points = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0

	     for (int j = 1; j < NUM_SAMPLES-2; j++)
 80014ac:	2301      	movs	r3, #1
 80014ae:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 80014b2:	e055      	b.n	8001560 <ppg_calculate+0x548>
	     {
	         if ((deriv_array[j] > deriv_array[j - 1] && deriv_array[j] > deriv_array[j + 1]) ||
 80014b4:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014b8:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014bc:	f8d7 28cc 	ldr.w	r2, [r7, #2252]	; 0x8cc
 80014c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014c4:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 80014c8:	1e59      	subs	r1, r3, #1
 80014ca:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014ce:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dd12      	ble.n	8001500 <ppg_calculate+0x4e8>
 80014da:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014de:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014e2:	f8d7 28cc 	ldr.w	r2, [r7, #2252]	; 0x8cc
 80014e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014ea:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014f4:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dc25      	bgt.n	800154c <ppg_calculate+0x534>
	             (deriv_array[j] < deriv_array[j - 1] && deriv_array[j] < deriv_array[j + 1]))
 8001500:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001504:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001508:	f8d7 28cc 	ldr.w	r2, [r7, #2252]	; 0x8cc
 800150c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001510:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8001514:	1e59      	subs	r1, r3, #1
 8001516:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800151a:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800151e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	         if ((deriv_array[j] > deriv_array[j - 1] && deriv_array[j] > deriv_array[j + 1]) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	da17      	bge.n	8001556 <ppg_calculate+0x53e>
	             (deriv_array[j] < deriv_array[j - 1] && deriv_array[j] < deriv_array[j + 1]))
 8001526:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800152a:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800152e:	f8d7 28cc 	ldr.w	r2, [r7, #2252]	; 0x8cc
 8001532:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001536:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 800153a:	1c59      	adds	r1, r3, #1
 800153c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001540:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001544:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001548:	429a      	cmp	r2, r3
 800154a:	da04      	bge.n	8001556 <ppg_calculate+0x53e>
	         {
	             turning_points++;
 800154c:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 8001550:	3301      	adds	r3, #1
 8001552:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
	     for (int j = 1; j < NUM_SAMPLES-2; j++)
 8001556:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 800155a:	3301      	adds	r3, #1
 800155c:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8001560:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 8001564:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001568:	dba4      	blt.n	80014b4 <ppg_calculate+0x49c>
	         }
	     }

	     double turning_point_ratio = (double)turning_points / (double)(NUM_SAMPLES-2);
 800156a:	f8d7 08d0 	ldr.w	r0, [r7, #2256]	; 0x8d0
 800156e:	f7fe ffb1 	bl	80004d4 <__aeabi_i2d>
 8001572:	a319      	add	r3, pc, #100	; (adr r3, 80015d8 <ppg_calculate+0x5c0>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f940 	bl	80007fc <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8001584:	e9c1 2300 	strd	r2, r3, [r1]

	    // printf("Turning Point Ratio: %f\n", turning_point_ratio);

	     // Check for atrial fibrillation using turning point ratio threshold
	     double tpr_threshold = 0.275;
 8001588:	a315      	add	r3, pc, #84	; (adr r3, 80015e0 <ppg_calculate+0x5c8>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f607 0188 	addw	r1, r7, #2184	; 0x888
 8001592:	e9c1 2300 	strd	r2, r3, [r1]
	     if (turning_point_ratio >= tpr_threshold)
 8001596:	f607 0388 	addw	r3, r7, #2184	; 0x888
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80015a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a6:	f7ff fa85 	bl	8000ab4 <__aeabi_dcmpge>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <ppg_calculate+0x59e>
	     {
	         af_detected_tpr = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f8c7 38a0 	str.w	r3, [r7, #2208]	; 0x8a0
	     else
	     {
	         //printf("Atrial fibrillation not detected.\n");
	     }

	     printf("Coefficient of Variation: %f\n", cv);
 80015b6:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	480b      	ldr	r0, [pc, #44]	; (80015ec <ppg_calculate+0x5d4>)
 80015c0:	f00e f814 	bl	800f5ec <iprintf>


	 }
 80015c4:	bf00      	nop
 80015c6:	4618      	mov	r0, r3
 80015c8:	f507 6711 	add.w	r7, r7, #2320	; 0x910
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	3f7ced91 	.word	0x3f7ced91
 80015d4:	3fda5e35 	.word	0x3fda5e35
 80015d8:	00000000 	.word	0x00000000
 80015dc:	407f2000 	.word	0x407f2000
 80015e0:	9999999a 	.word	0x9999999a
 80015e4:	3fd19999 	.word	0x3fd19999
 80015e8:	40428000 	.word	0x40428000
 80015ec:	08011ad8 	.word	0x08011ad8
 80015f0:	d916872b 	.word	0xd916872b
 80015f4:	3fc3f7ce 	.word	0x3fc3f7ce

080015f8 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	460b      	mov	r3, r1
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	b29a      	uxth	r2, r3
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2301      	movs	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2301      	movs	r3, #1
 800161e:	21b6      	movs	r1, #182	; 0xb6
 8001620:	f003 fd88 	bl	8005134 <HAL_I2C_Mem_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <write+0x3a>
		return ret;			//error check
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	e000      	b.n	8001634 <write+0x3c>
	}

	return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af04      	add	r7, sp, #16
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	460b      	mov	r3, r1
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	b29a      	uxth	r2, r3
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2301      	movs	r3, #1
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	21b6      	movs	r1, #182	; 0xb6
 8001664:	f003 fe7a 	bl	800535c <HAL_I2C_Mem_Read>
 8001668:	4603      	mov	r3, r0
 800166a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <read+0x3a>
		return ret;			//error check
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	e000      	b.n	8001678 <read+0x3c>
	}


	return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af04      	add	r7, sp, #16
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	461a      	mov	r2, r3
 800168c:	460b      	mov	r3, r1
 800168e:	72fb      	strb	r3, [r7, #11]
 8001690:	4613      	mov	r3, r2
 8001692:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	b29a      	uxth	r2, r3
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a4:	9102      	str	r1, [sp, #8]
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	21b6      	movs	r1, #182	; 0xb6
 80016b0:	f003 fe54 	bl	800535c <HAL_I2C_Mem_Read>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <many_reads+0x42>
		return ret;			//error check
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	e000      	b.n	80016c4 <many_reads+0x44>
	}

	return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <ICM_PowerOn>:
INIT FUNCTIONS
******************************************************************************/
/*
 * Sequence to setup ICM290948 as early as possible after power on
 */
uint8_t ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	dev->spiHandle = spiHandle;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	829a      	strh	r2, [r3, #20]

	/* Take initial reads to make sure SPI is working */
	uint8_t ret;
	ret = ICM_WHOAMI(dev);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8f4 	bl	8001900 <ICM_WHOAMI>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
	if (ret != WHO_AM_I){
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	2bea      	cmp	r3, #234	; 0xea
 8001720:	d001      	beq.n	8001726 <ICM_PowerOn+0x5a>
		return ERR_WHO_AM_I;
 8001722:	230a      	movs	r3, #10
 8001724:	e028      	b.n	8001778 <ICM_PowerOn+0xac>
	}

	/* SPI is working -> start setting up the sensor */
	ICM_CSHigh();
 8001726:	f000 f91b 	bl	8001960 <ICM_CSHigh>
	HAL_Delay(10);
 800172a:	200a      	movs	r0, #10
 800172c:	f000 fea8 	bl	8002480 <HAL_Delay>
	ICM_SelectBank(dev, USER_BANK_0);
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8f6 	bl	8001924 <ICM_SelectBank>
	HAL_Delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f000 fea1 	bl	8002480 <HAL_Delay>
	ICM_Disable_I2C(dev);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f900 	bl	8001944 <ICM_Disable_I2C>
	HAL_Delay(10);
 8001744:	200a      	movs	r0, #10
 8001746:	f000 fe9b 	bl	8002480 <HAL_Delay>
	ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 800174a:	2101      	movs	r1, #1
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f913 	bl	8001978 <ICM_SetClock>
	HAL_Delay(10);
 8001752:	200a      	movs	r0, #10
 8001754:	f000 fe94 	bl	8002480 <HAL_Delay>
	ICM_AccelGyroOff(dev);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f91d 	bl	8001998 <ICM_AccelGyroOff>
	HAL_Delay(20);
 800175e:	2014      	movs	r0, #20
 8001760:	f000 fe8e 	bl	8002480 <HAL_Delay>
	ICM_AccelGyroOn(dev);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f924 	bl	80019b2 <ICM_AccelGyroOn>
	HAL_Delay(10);
 800176a:	200a      	movs	r0, #10
 800176c:	f000 fe88 	bl	8002480 <HAL_Delay>
	ICM_Initialize(dev);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f805 	bl	8001780 <ICM_Initialize>

	return SUCCESS;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <ICM_Initialize>:

uint8_t ICM_Initialize(ICM20948 *dev) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(dev, USER_BANK_2);
 8001788:	2120      	movs	r1, #32
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8ca 	bl	8001924 <ICM_SelectBank>
	HAL_Delay(20);
 8001790:	2014      	movs	r0, #20
 8001792:	f000 fe75 	bl	8002480 <HAL_Delay>
	ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 8001796:	2229      	movs	r2, #41	; 0x29
 8001798:	2100      	movs	r1, #0
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f916 	bl	80019cc <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80017a0:	200a      	movs	r0, #10
 80017a2:	f000 fe6d 	bl	8002480 <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(dev, 0x00, 0x0A);
 80017a6:	220a      	movs	r2, #10
 80017a8:	2100      	movs	r1, #0
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f982 	bl	8001ab4 <ICM_WriteOneByte>
	HAL_Delay(10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 fe65 	bl	8002480 <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 16G (0x0C) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(dev, 0x14, (0x0C | 0x11));	// 8G --> 0x04
 80017b6:	221d      	movs	r2, #29
 80017b8:	2114      	movs	r1, #20
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f97a 	bl	8001ab4 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(dev, 0x10, 0x00);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2110      	movs	r1, #16
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f975 	bl	8001ab4 <ICM_WriteOneByte>
	HAL_Delay(10);
 80017ca:	200a      	movs	r0, #10
 80017cc:	f000 fe58 	bl	8002480 <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(dev, 0x11, 0x0A);
 80017d0:	220a      	movs	r2, #10
 80017d2:	2111      	movs	r1, #17
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f96d 	bl	8001ab4 <ICM_WriteOneByte>
	HAL_Delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f000 fe50 	bl	8002480 <HAL_Delay>

	ICM_SelectBank(dev, USER_BANK_2);
 80017e0:	2120      	movs	r1, #32
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f89e 	bl	8001924 <ICM_SelectBank>
	HAL_Delay(20);
 80017e8:	2014      	movs	r0, #20
 80017ea:	f000 fe49 	bl	8002480 <HAL_Delay>
//	// Initialize magnetometer
//	ICM_Mag_Write(dev, 0x32, 0x01); // Reset AK8963
//	HAL_Delay(1000);
//	ICM_Mag_Write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output

	return SUCCESS;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <ICM_ReadAccelGyroData>:
DATA ACQUISITION FUNCTIONS
******************************************************************************/
/*
 * Read Accelerometer and Gyro data
 */
void ICM_ReadAccelGyroData(ICM20948 *dev) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(dev, 0x2D, raw_data, 12);
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	230c      	movs	r3, #12
 8001806:	212d      	movs	r1, #45	; 0x2d
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f8f5 	bl	80019f8 <ICM_readBytes>

	dev->accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	7b7b      	ldrb	r3, [r7, #13]
 8001816:	b21b      	sxth	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b21a      	sxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21a      	sxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8001832:	7c3b      	ldrb	r3, [r7, #16]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	7c7b      	ldrb	r3, [r7, #17]
 800183a:	b21b      	sxth	r3, r3
 800183c:	4313      	orrs	r3, r2
 800183e:	b21a      	sxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8001844:	7cbb      	ldrb	r3, [r7, #18]
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21b      	sxth	r3, r3
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8001858:	7d3b      	ldrb	r3, [r7, #20]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	7d7b      	ldrb	r3, [r7, #21]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b21b      	sxth	r3, r3
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 800186c:	7dbb      	ldrb	r3, [r7, #22]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	81da      	strh	r2, [r3, #14]

	dev->accel_data[0] = dev->accel_data[0] / 8;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	da00      	bge.n	800188c <ICM_ReadAccelGyroData+0x94>
 800188a:	3307      	adds	r3, #7
 800188c:	10db      	asrs	r3, r3, #3
 800188e:	b21a      	sxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = dev->accel_data[1] / 8;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da00      	bge.n	80018a0 <ICM_ReadAccelGyroData+0xa8>
 800189e:	3307      	adds	r3, #7
 80018a0:	10db      	asrs	r3, r3, #3
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = dev->accel_data[2] / 8;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da00      	bge.n	80018b4 <ICM_ReadAccelGyroData+0xbc>
 80018b2:	3307      	adds	r3, #7
 80018b4:	10db      	asrs	r3, r3, #3
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	895b      	ldrh	r3, [r3, #10]
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <ICM_ReadAccelGyroData+0x104>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	899b      	ldrh	r3, [r3, #12]
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <ICM_ReadAccelGyroData+0x104>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	89db      	ldrh	r3, [r3, #14]
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <ICM_ReadAccelGyroData+0x104>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	81da      	strh	r2, [r3, #14]
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	10624dd3 	.word	0x10624dd3

08001900 <ICM_WHOAMI>:


/*****************************************************************************
CONFIG HELPERS
******************************************************************************/
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 800190c:	f107 030f 	add.w	r3, r7, #15
 8001910:	461a      	mov	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f89d 	bl	8001a54 <ICM_ReadOneByte>
	return spiData;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <ICM_SelectBank>:

void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	461a      	mov	r2, r3
 8001934:	217f      	movs	r1, #127	; 0x7f
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f8bc 	bl	8001ab4 <ICM_WriteOneByte>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <ICM_Disable_I2C>:

void ICM_Disable_I2C(ICM20948 *dev) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 800194c:	2278      	movs	r2, #120	; 0x78
 800194e:	2103      	movs	r1, #3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f8af 	bl	8001ab4 <ICM_WriteOneByte>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <ICM_CSHigh>:

void ICM_CSHigh(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2110      	movs	r1, #16
 8001968:	4802      	ldr	r0, [pc, #8]	; (8001974 <ICM_CSHigh+0x14>)
 800196a:	f003 fb17 	bl	8004f9c <HAL_GPIO_WritePin>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	48000400 	.word	0x48000400

08001978 <ICM_SetClock>:

void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}

void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	461a      	mov	r2, r3
 8001988:	2106      	movs	r1, #6
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f892 	bl	8001ab4 <ICM_WriteOneByte>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(ICM20948 *dev) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 80019a0:	223f      	movs	r2, #63	; 0x3f
 80019a2:	2107      	movs	r1, #7
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f885 	bl	8001ab4 <ICM_WriteOneByte>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(ICM20948 *dev) {
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 80019ba:	2200      	movs	r2, #0
 80019bc:	2107      	movs	r1, #7
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f878 	bl	8001ab4 <ICM_WriteOneByte>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ICM_SetGyroRateLPF>:

void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
 80019d8:	4613      	mov	r3, r2
 80019da:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	78bb      	ldrb	r3, [r7, #2]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	2101      	movs	r1, #1
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f863 	bl	8001ab4 <ICM_WriteOneByte>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <ICM_readBytes>:

/*****************************************************************************
LOW-LEVEL FUNCTIONS
******************************************************************************/
void ICM_readBytes(ICM20948 *dev, uint8_t reg, uint8_t *pData, uint16_t Size)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	72fb      	strb	r3, [r7, #11]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2110      	movs	r1, #16
 8001a1a:	480d      	ldr	r0, [pc, #52]	; (8001a50 <ICM_readBytes+0x58>)
 8001a1c:	f003 fabe 	bl	8004f9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f107 010b 	add.w	r1, r7, #11
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f006 fd59 	bl	80084e2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spiHandle, pData, Size, 100);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	893a      	ldrh	r2, [r7, #8]
 8001a36:	2364      	movs	r3, #100	; 0x64
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	f006 fec0 	bl	80087be <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2110      	movs	r1, #16
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <ICM_readBytes+0x58>)
 8001a44:	f003 faaa 	bl	8004f9c <HAL_GPIO_WritePin>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	48000400 	.word	0x48000400

08001a54 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	reg = reg | 0x80;													//first bit 1 indicates read
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//enable SPI
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2110      	movs	r1, #16
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <ICM_ReadOneByte+0x5c>)
 8001a72:	f003 fa93 	bl	8004f9c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			//turn off green LED

	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f107 010b 	add.w	r1, r7, #11
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	2201      	movs	r2, #1
 8001a82:	f006 fd2e 	bl	80084e2 <HAL_SPI_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(dev->spiHandle, pData, 1, 100);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	2364      	movs	r3, #100	; 0x64
 8001a90:	2201      	movs	r2, #1
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f006 fe93 	bl	80087be <HAL_SPI_Receive>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//disable SPI
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <ICM_ReadOneByte+0x5c>)
 8001aa2:	f003 fa7b 	bl	8004f9c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);			//turn on green LED
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;

	reg = reg & 0x7F;													//first bit 0 indicates write
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//set CS pin low
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2110      	movs	r1, #16
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <ICM_WriteOneByte+0x5c>)
 8001ad4:	f003 fa62 	bl	8004f9c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	1cf9      	adds	r1, r7, #3
 8001ade:	2364      	movs	r3, #100	; 0x64
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f006 fcfe 	bl	80084e2 <HAL_SPI_Transmit>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->spiHandle, &Data, 1, 100);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	1cb9      	adds	r1, r7, #2
 8001af0:	2364      	movs	r3, #100	; 0x64
 8001af2:	2201      	movs	r2, #1
 8001af4:	f006 fcf5 	bl	80084e2 <HAL_SPI_Transmit>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//set CS pin high
 8001afc:	2201      	movs	r2, #1
 8001afe:	2110      	movs	r1, #16
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <ICM_WriteOneByte+0x5c>)
 8001b02:	f003 fa4b 	bl	8004f9c <HAL_GPIO_WritePin>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	48000400 	.word	0x48000400

08001b14 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b22:	4905      	ldr	r1, [pc, #20]	; (8001b38 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	58000800 	.word	0x58000800

08001b3c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b60:	68fb      	ldr	r3, [r7, #12]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001baa:	f002 fbaf 	bl	800430c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001bae:	f002 fbb3 	bl	8004318 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001bb2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001bb6:	f7ff ffad 	bl	8001b14 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001bba:	f00a ff21 	bl	800ca00 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001bbe:	f000 f821 	bl	8001c04 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001bc2:	f000 f8c3 	bl	8001d4c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001bc6:	bf00      	nop
}
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <APPD_EnableCPU2+0x34>)
 8001bd4:	1d3c      	adds	r4, r7, #4
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001be0:	c403      	stmia	r4!, {r0, r1}
 8001be2:	8022      	strh	r2, [r4, #0]
 8001be4:	3402      	adds	r4, #2
 8001be6:	0c13      	lsrs	r3, r2, #16
 8001be8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001bea:	f00a fe45 	bl	800c878 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00a f8e0 	bl	800bdb6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001bf6:	bf00      	nop
}
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	08011af8 	.word	0x08011af8

08001c04 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
 8001c28:	e038      	b.n	8001c9c <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001c2a:	7ffb      	ldrb	r3, [r7, #31]
 8001c2c:	4a44      	ldr	r2, [pc, #272]	; (8001d40 <APPD_SetCPU2GpioConfig+0x13c>)
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	799b      	ldrb	r3, [r3, #6]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d02b      	beq.n	8001c90 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <APPD_SetCPU2GpioConfig+0x13c>)
 8001c3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c40:	4a40      	ldr	r2, [pc, #256]	; (8001d44 <APPD_SetCPU2GpioConfig+0x140>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01b      	beq.n	8001c7e <APPD_SetCPU2GpioConfig+0x7a>
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <APPD_SetCPU2GpioConfig+0x140>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d823      	bhi.n	8001c94 <APPD_SetCPU2GpioConfig+0x90>
 8001c4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c50:	d003      	beq.n	8001c5a <APPD_SetCPU2GpioConfig+0x56>
 8001c52:	4a3d      	ldr	r2, [pc, #244]	; (8001d48 <APPD_SetCPU2GpioConfig+0x144>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d009      	beq.n	8001c6c <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8001c58:	e01c      	b.n	8001c94 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <APPD_SetCPU2GpioConfig+0x13c>)
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	889a      	ldrh	r2, [r3, #4]
 8001c64:	8bbb      	ldrh	r3, [r7, #28]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	83bb      	strh	r3, [r7, #28]
          break;
 8001c6a:	e014      	b.n	8001c96 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <APPD_SetCPU2GpioConfig+0x13c>)
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	889a      	ldrh	r2, [r3, #4]
 8001c76:	8b7b      	ldrh	r3, [r7, #26]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	837b      	strh	r3, [r7, #26]
          break;
 8001c7c:	e00b      	b.n	8001c96 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <APPD_SetCPU2GpioConfig+0x13c>)
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	889a      	ldrh	r2, [r3, #4]
 8001c88:	8b3b      	ldrh	r3, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	833b      	strh	r3, [r7, #24]
          break;
 8001c8e:	e002      	b.n	8001c96 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8001c90:	bf00      	nop
 8001c92:	e000      	b.n	8001c96 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8001c94:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	2b25      	cmp	r3, #37	; 0x25
 8001ca0:	d9c3      	bls.n	8001c2a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001cae:	8bbb      	ldrh	r3, [r7, #28]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d014      	beq.n	8001cde <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001cb4:	8bbb      	ldrh	r3, [r7, #28]
 8001cb6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff ff3f 	bl	8001b3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff ff55 	bl	8001b6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f002 fff6 	bl	8004cbc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001cd0:	8bbb      	ldrh	r3, [r7, #28]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f003 f95f 	bl	8004f9c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001cde:	8b7b      	ldrh	r3, [r7, #26]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d012      	beq.n	8001d0a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001ce4:	8b7b      	ldrh	r3, [r7, #26]
 8001ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f7ff ff27 	bl	8001b3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f7ff ff3d 	bl	8001b6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4813      	ldr	r0, [pc, #76]	; (8001d48 <APPD_SetCPU2GpioConfig+0x144>)
 8001cfa:	f002 ffdf 	bl	8004cbc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001cfe:	8b7b      	ldrh	r3, [r7, #26]
 8001d00:	2200      	movs	r2, #0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4810      	ldr	r0, [pc, #64]	; (8001d48 <APPD_SetCPU2GpioConfig+0x144>)
 8001d06:	f003 f949 	bl	8004f9c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001d0a:	8b3b      	ldrh	r3, [r7, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001d10:	8b3b      	ldrh	r3, [r7, #24]
 8001d12:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	2004      	movs	r0, #4
 8001d16:	f7ff ff11 	bl	8001b3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001d1a:	2004      	movs	r0, #4
 8001d1c:	f7ff ff27 	bl	8001b6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <APPD_SetCPU2GpioConfig+0x140>)
 8001d26:	f002 ffc9 	bl	8004cbc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001d2a:	8b3b      	ldrh	r3, [r7, #24]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <APPD_SetCPU2GpioConfig+0x140>)
 8001d32:	f003 f933 	bl	8004f9c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
}
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	08012d94 	.word	0x08012d94
 8001d44:	48000800 	.word	0x48000800
 8001d48:	48000400 	.word	0x48000400

08001d4c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001d50:	bf00      	nop
}
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8001d5e:	f001 fcdb 	bl	8003718 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001d62:	bf00      	nop
}
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001d74:	897a      	ldrh	r2, [r7, #10]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f001 f9ea 	bl	8003154 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001d80:	bf00      	nop
}
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d96:	f023 0207 	bic.w	r2, r3, #7
 8001d9a:	4905      	ldr	r1, [pc, #20]	; (8001db0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	58000400 	.word	0x58000400

08001db4 <LL_EXTI_EnableIT_32_63>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8001dbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001dc2:	4905      	ldr	r1, [pc, #20]	; (8001dd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	58000800 	.word	0x58000800

08001ddc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001dea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001df6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	cafecafe 	.word	0xcafecafe

08001e18 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e98:	d101      	bne.n	8001e9e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ebe:	d101      	bne.n	8001ec4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_AHB3_GRP1_EnableClock>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <LL_DBGMCU_GetDeviceID+0x18>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e0042000 	.word	0xe0042000

08001f20 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <LL_DBGMCU_GetRevisionID+0x18>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	b29b      	uxth	r3, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e0042000 	.word	0xe0042000

08001f3c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	605a      	str	r2, [r3, #4]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	605a      	str	r2, [r3, #4]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	615a      	str	r2, [r3, #20]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	615a      	str	r2, [r3, #20]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	609a      	str	r2, [r3, #8]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	619a      	str	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <LL_LPM_EnableSleep+0x1c>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <LL_LPM_EnableSleep+0x1c>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6113      	str	r3, [r2, #16]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	22ca      	movs	r2, #202	; 0xca
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2253      	movs	r2, #83	; 0x53
 800204c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 0207 	bic.w	r2, r3, #7
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <MX_APPE_Config+0x18>)
 8002086:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800208a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800208c:	f000 f826 	bl	80020dc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002090:	f000 f866 	bl	8002160 <Config_HSE>

  return;
 8002094:	bf00      	nop
}
 8002096:	bd80      	pop	{r7, pc}
 8002098:	58004000 	.word	0x58004000

0800209c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80020a0:	f000 f872 	bl	8002188 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80020a4:	f000 f88a 	bl	80021bc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80020a8:	4904      	ldr	r1, [pc, #16]	; (80020bc <MX_APPE_Init+0x20>)
 80020aa:	2000      	movs	r0, #0
 80020ac:	f000 fe60 	bl	8002d70 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();		//For BLE
 80020b0:	f7ff fd79 	bl	8001ba6 <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80020b4:	f000 f890 	bl	80021d8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80020b8:	bf00      	nop
}
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000c54 	.word	0x20000c54

080020c0 <Init_Smps>:

void Init_Smps(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80020c4:	bf00      	nop
}
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <Init_Exti>:

void Init_Exti(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80020d2:	2050      	movs	r0, #80	; 0x50
 80020d4:	f7ff fe6e 	bl	8001db4 <LL_EXTI_EnableIT_32_63>

  return;
 80020d8:	bf00      	nop
}
 80020da:	bd80      	pop	{r7, pc}

080020dc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80020e0:	f000 f804 	bl	80020ec <Reset_BackupDomain>

  Reset_IPCC();
 80020e4:	f000 f81a 	bl	800211c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80020e8:	bf00      	nop
}
 80020ea:	bd80      	pop	{r7, pc}

080020ec <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80020f0:	f7ff fec8 	bl	8001e84 <LL_RCC_IsActiveFlag_PINRST>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <Reset_BackupDomain+0x2a>
 80020fa:	f7ff fed6 	bl	8001eaa <LL_RCC_IsActiveFlag_SFTRST>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d108      	bne.n	8002116 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002104:	f004 f9c2 	bl	800648c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8002108:	f004 f9c0 	bl	800648c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800210c:	f7ff fe98 	bl	8001e40 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002110:	f7ff fea7 	bl	8001e62 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002114:	bf00      	nop
 8002116:	bf00      	nop
}
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002120:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002124:	f7ff fed4 	bl	8001ed0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002128:	213f      	movs	r1, #63	; 0x3f
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <Reset_IPCC+0x40>)
 800212c:	f7ff ff4c 	bl	8001fc8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8002130:	213f      	movs	r1, #63	; 0x3f
 8002132:	480a      	ldr	r0, [pc, #40]	; (800215c <Reset_IPCC+0x40>)
 8002134:	f7ff ff56 	bl	8001fe4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002138:	213f      	movs	r1, #63	; 0x3f
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <Reset_IPCC+0x40>)
 800213c:	f7ff fefe 	bl	8001f3c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8002140:	213f      	movs	r1, #63	; 0x3f
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <Reset_IPCC+0x40>)
 8002144:	f7ff ff1d 	bl	8001f82 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002148:	213f      	movs	r1, #63	; 0x3f
 800214a:	4804      	ldr	r0, [pc, #16]	; (800215c <Reset_IPCC+0x40>)
 800214c:	f7ff ff08 	bl	8001f60 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8002150:	213f      	movs	r1, #63	; 0x3f
 8002152:	4802      	ldr	r0, [pc, #8]	; (800215c <Reset_IPCC+0x40>)
 8002154:	f7ff ff27 	bl	8001fa6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002158:	bf00      	nop
}
 800215a:	bd80      	pop	{r7, pc}
 800215c:	58000c00 	.word	0x58000c00

08002160 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002166:	2000      	movs	r0, #0
 8002168:	f00a fcc8 	bl	800cafc <OTP_Read>
 800216c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	799b      	ldrb	r3, [r3, #6]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fe2f 	bl	8001ddc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800217e:	bf00      	nop
 8002180:	bf00      	nop
}
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <System_Init>:

static void System_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  Init_Smps();
 800218c:	f7ff ff98 	bl	80020c0 <Init_Smps>

  Init_Exti();
 8002190:	f7ff ff9d 	bl	80020ce <Init_Exti>

  Init_Rtc();
 8002194:	f000 f802 	bl	800219c <Init_Rtc>

  return;
 8002198:	bf00      	nop
}
 800219a:	bd80      	pop	{r7, pc}

0800219c <Init_Rtc>:

static void Init_Rtc(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80021a0:	4805      	ldr	r0, [pc, #20]	; (80021b8 <Init_Rtc+0x1c>)
 80021a2:	f7ff ff4a 	bl	800203a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80021a6:	2100      	movs	r1, #0
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <Init_Rtc+0x1c>)
 80021aa:	f7ff ff56 	bl	800205a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <Init_Rtc+0x1c>)
 80021b0:	f7ff ff36 	bl	8002020 <LL_RTC_EnableWriteProtection>

  return;
 80021b4:	bf00      	nop
}
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40002800 	.word	0x40002800

080021bc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80021c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021c4:	f7ff fe28 	bl	8001e18 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80021c8:	f00c fae6 	bl	800e798 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80021cc:	2004      	movs	r0, #4
 80021ce:	f7ff fddb 	bl	8001d88 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80021d2:	bf00      	nop
}
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80021de:	f00a f995 	bl	800c50c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <appe_Tl_Init+0x50>)
 80021e4:	2100      	movs	r1, #0
 80021e6:	2008      	movs	r0, #8
 80021e8:	f00c fc14 	bl	800ea14 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <appe_Tl_Init+0x54>)
 80021ee:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <appe_Tl_Init+0x58>)
 80021f2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80021f4:	463b      	mov	r3, r7
 80021f6:	4619      	mov	r1, r3
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <appe_Tl_Init+0x5c>)
 80021fa:	f00a f84d 	bl	800c298 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <appe_Tl_Init+0x60>)
 8002200:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <appe_Tl_Init+0x64>)
 8002204:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <appe_Tl_Init+0x68>)
 8002208:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800220a:	f240 533c 	movw	r3, #1340	; 0x53c
 800220e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	4618      	mov	r0, r3
 8002216:	f00a fabb 	bl	800c790 <TL_MM_Init>

  TL_Enable();
 800221a:	f00a f971 	bl	800c500 <TL_Enable>

  return;
 800221e:	bf00      	nop
}
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	0800c2d1 	.word	0x0800c2d1
 800222c:	2000074c 	.word	0x2000074c
 8002230:	08002245 	.word	0x08002245
 8002234:	0800225d 	.word	0x0800225d
 8002238:	20000964 	.word	0x20000964
 800223c:	20000858 	.word	0x20000858
 8002240:	20000210 	.word	0x20000210

08002244 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800224e:	bf00      	nop
}
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	330b      	adds	r3, #11
 800226a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8002276:	2b07      	cmp	r3, #7
 8002278:	d860      	bhi.n	800233c <APPE_SysUserEvtRx+0xe0>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <APPE_SysUserEvtRx+0x24>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	080022a1 	.word	0x080022a1
 8002284:	080022e3 	.word	0x080022e3
 8002288:	080022f1 	.word	0x080022f1
 800228c:	0800233d 	.word	0x0800233d
 8002290:	0800230d 	.word	0x0800230d
 8002294:	0800231d 	.word	0x0800231d
 8002298:	08002325 	.word	0x08002325
 800229c:	08002335 	.word	0x08002335
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	4618      	mov	r0, r3
 80022a6:	f009 fdb3 	bl	800be10 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80022aa:	7b3b      	ldrb	r3, [r7, #12]
 80022ac:	4619      	mov	r1, r3
 80022ae:	7b7b      	ldrb	r3, [r7, #13]
 80022b0:	461a      	mov	r2, r3
 80022b2:	7bbb      	ldrb	r3, [r7, #14]
 80022b4:	4824      	ldr	r0, [pc, #144]	; (8002348 <APPE_SysUserEvtRx+0xec>)
 80022b6:	f00d f999 	bl	800f5ec <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80022ba:	7c3b      	ldrb	r3, [r7, #16]
 80022bc:	4619      	mov	r1, r3
 80022be:	4823      	ldr	r0, [pc, #140]	; (800234c <APPE_SysUserEvtRx+0xf0>)
 80022c0:	f00d f994 	bl	800f5ec <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80022c4:	7dbb      	ldrb	r3, [r7, #22]
 80022c6:	4619      	mov	r1, r3
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	461a      	mov	r2, r3
 80022cc:	7e3b      	ldrb	r3, [r7, #24]
 80022ce:	4820      	ldr	r0, [pc, #128]	; (8002350 <APPE_SysUserEvtRx+0xf4>)
 80022d0:	f00d f98c 	bl	800f5ec <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80022d4:	481f      	ldr	r0, [pc, #124]	; (8002354 <APPE_SysUserEvtRx+0xf8>)
 80022d6:	f00d f989 	bl	800f5ec <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f870 	bl	80023c0 <APPE_SysEvtReadyProcessing>
    break;
 80022e0:	e02d      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80022e2:	481d      	ldr	r0, [pc, #116]	; (8002358 <APPE_SysUserEvtRx+0xfc>)
 80022e4:	f00d f982 	bl	800f5ec <iprintf>
    APPE_SysEvtError(pPayload);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f843 	bl	8002374 <APPE_SysEvtError>
    break;
 80022ee:	e026      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80022f0:	481a      	ldr	r0, [pc, #104]	; (800235c <APPE_SysUserEvtRx+0x100>)
 80022f2:	f00d fa17 	bl	800f724 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80022fa:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	461a      	mov	r2, r3
 8002304:	4816      	ldr	r0, [pc, #88]	; (8002360 <APPE_SysUserEvtRx+0x104>)
 8002306:	f00d f971 	bl	800f5ec <iprintf>
    break;
 800230a:	e018      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	4813      	ldr	r0, [pc, #76]	; (8002364 <APPE_SysUserEvtRx+0x108>)
 8002316:	f00d f969 	bl	800f5ec <iprintf>
    break;
 800231a:	e010      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800231c:	4812      	ldr	r0, [pc, #72]	; (8002368 <APPE_SysUserEvtRx+0x10c>)
 800231e:	f00d f965 	bl	800f5ec <iprintf>
    break;
 8002322:	e00c      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	480f      	ldr	r0, [pc, #60]	; (800236c <APPE_SysUserEvtRx+0x110>)
 800232e:	f00d f95d 	bl	800f5ec <iprintf>
    break;
 8002332:	e004      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8002334:	480e      	ldr	r0, [pc, #56]	; (8002370 <APPE_SysUserEvtRx+0x114>)
 8002336:	f00d f959 	bl	800f5ec <iprintf>
    break;
 800233a:	e000      	b.n	800233e <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 800233c:	bf00      	nop
  }

  return;
 800233e:	bf00      	nop
}
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	08011b14 	.word	0x08011b14
 800234c:	08011b38 	.word	0x08011b38
 8002350:	08011b54 	.word	0x08011b54
 8002354:	08011b6c 	.word	0x08011b6c
 8002358:	08011b8c 	.word	0x08011b8c
 800235c:	08011bb0 	.word	0x08011bb0
 8002360:	08011c00 	.word	0x08011c00
 8002364:	08011c28 	.word	0x08011c28
 8002368:	08011c64 	.word	0x08011c64
 800236c:	08011c88 	.word	0x08011c88
 8002370:	08011cc4 	.word	0x08011cc4

08002374 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	330b      	adds	r3, #11
 8002382:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3302      	adds	r3, #2
 8002388:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	4808      	ldr	r0, [pc, #32]	; (80023b4 <APPE_SysEvtError+0x40>)
 8002392:	f00d f92b 	bl	800f5ec <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800239e:	4806      	ldr	r0, [pc, #24]	; (80023b8 <APPE_SysEvtError+0x44>)
 80023a0:	f00d f9c0 	bl	800f724 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80023a4:	e003      	b.n	80023ae <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <APPE_SysEvtError+0x48>)
 80023a8:	f00d f9bc 	bl	800f724 <puts>
  return;
 80023ac:	bf00      	nop
}
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	08011ce8 	.word	0x08011ce8
 80023b8:	08011d18 	.word	0x08011d18
 80023bc:	08011d54 	.word	0x08011d54

080023c0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	330b      	adds	r3, #11
 80023e4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3302      	adds	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d128      	bne.n	8002446 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80023f4:	481d      	ldr	r0, [pc, #116]	; (800246c <APPE_SysEvtReadyProcessing+0xac>)
 80023f6:	f00d f995 	bl	800f724 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80023fa:	f7ff fbe7 	bl	8001bcc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80023fe:	230f      	movs	r3, #15
 8002400:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002402:	237f      	movs	r3, #127	; 0x7f
 8002404:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002406:	f7ff fd8b 	bl	8001f20 <LL_DBGMCU_GetRevisionID>
 800240a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800240c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240e:	4818      	ldr	r0, [pc, #96]	; (8002470 <APPE_SysEvtReadyProcessing+0xb0>)
 8002410:	f00d f8ec 	bl	800f5ec <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	b29b      	uxth	r3, r3
 8002418:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800241a:	f7ff fd73 	bl	8001f04 <LL_DBGMCU_GetDeviceID>
 800241e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002420:	6a39      	ldr	r1, [r7, #32]
 8002422:	4814      	ldr	r0, [pc, #80]	; (8002474 <APPE_SysEvtReadyProcessing+0xb4>)
 8002424:	f00d f8e2 	bl	800f5ec <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	b29b      	uxth	r3, r3
 800242c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f009 fcd6 	bl	800bde4 <SHCI_C2_Config>

    APP_BLE_Init();
 8002438:	f00b f86c 	bl	800d514 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800243c:	2100      	movs	r1, #0
 800243e:	2001      	movs	r0, #1
 8002440:	f00c f9bc 	bl	800e7bc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002444:	e00e      	b.n	8002464 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d106      	bne.n	800245c <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800244e:	480a      	ldr	r0, [pc, #40]	; (8002478 <APPE_SysEvtReadyProcessing+0xb8>)
 8002450:	f00d f8cc 	bl	800f5ec <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
  return;
 800245a:	e003      	b.n	8002464 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <APPE_SysEvtReadyProcessing+0xbc>)
 800245e:	f00d f8c5 	bl	800f5ec <iprintf>
  return;
 8002462:	bf00      	nop
}
 8002464:	3728      	adds	r7, #40	; 0x28
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	08011d8c 	.word	0x08011d8c
 8002470:	08011da8 	.word	0x08011da8
 8002474:	08011dcc 	.word	0x08011dcc
 8002478:	08011dec 	.word	0x08011dec
 800247c:	08011e20 	.word	0x08011e20

08002480 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f001 ff1c 	bl	80042c4 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002498:	d00a      	beq.n	80024b0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800249a:	f001 ff2b 	bl	80042f4 <HAL_GetTickFreq>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a8:	e002      	b.n	80024b0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80024aa:	f7ff fda9 	bl	8002000 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80024ae:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80024b0:	f001 ff08 	bl	80042c4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8f4      	bhi.n	80024aa <HAL_Delay+0x2a>
  }
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80024ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d2:	f00c f9a3 	bl	800e81c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}

080024da <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80024de:	bf00      	nop
}
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80024f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f6:	f00c f991 	bl	800e81c <UTIL_SEQ_Run>

  return;
 80024fa:	bf00      	nop
}
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800250a:	2100      	movs	r1, #0
 800250c:	2008      	movs	r0, #8
 800250e:	f00c faa3 	bl	800ea58 <UTIL_SEQ_SetTask>
  return;
 8002512:	bf00      	nop
}
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002522:	2002      	movs	r0, #2
 8002524:	f00c fb04 	bl	800eb30 <UTIL_SEQ_SetEvt>
  return;
 8002528:	bf00      	nop
}
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002538:	2002      	movs	r0, #2
 800253a:	f00c fb19 	bl	800eb70 <UTIL_SEQ_WaitEvt>
  return;
 800253e:	bf00      	nop
}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <LL_EXTI_EnableIT_0_31>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <LL_EXTI_EnableIT_0_31+0x24>)
 8002552:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002556:	4905      	ldr	r1, [pc, #20]	; (800256c <LL_EXTI_EnableIT_0_31+0x24>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	58000800 	.word	0x58000800

08002570 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4904      	ldr	r1, [pc, #16]	; (8002590 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	58000800 	.word	0x58000800

08002594 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <ReadRtcSsrValue+0x3c>)
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	b29b      	uxth	r3, r3
 80025a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <ReadRtcSsrValue+0x3c>)
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80025aa:	e005      	b.n	80025b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <ReadRtcSsrValue+0x3c>)
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1f5      	bne.n	80025ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80025c0:	683b      	ldr	r3, [r7, #0]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40002800 	.word	0x40002800

080025d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	460a      	mov	r2, r1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80025e4:	79ba      	ldrb	r2, [r7, #6]
 80025e6:	491d      	ldr	r1, [pc, #116]	; (800265c <LinkTimerAfter+0x88>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	3315      	adds	r3, #21
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d009      	beq.n	8002612 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <LinkTimerAfter+0x88>)
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	3314      	adds	r3, #20
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	4911      	ldr	r1, [pc, #68]	; (800265c <LinkTimerAfter+0x88>)
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3315      	adds	r3, #21
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002626:	79fa      	ldrb	r2, [r7, #7]
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <LinkTimerAfter+0x88>)
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	3314      	adds	r3, #20
 8002636:	79ba      	ldrb	r2, [r7, #6]
 8002638:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800263a:	79ba      	ldrb	r2, [r7, #6]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <LinkTimerAfter+0x88>)
 800263e:	4613      	mov	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	3315      	adds	r3, #21
 800264a:	79fa      	ldrb	r2, [r7, #7]
 800264c:	701a      	strb	r2, [r3, #0]

  return;
 800264e:	bf00      	nop
}
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000ae8 	.word	0x20000ae8

08002660 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	4613      	mov	r3, r2
 800266e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <LinkTimerBefore+0xb8>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	79ba      	ldrb	r2, [r7, #6]
 8002678:	429a      	cmp	r2, r3
 800267a:	d032      	beq.n	80026e2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800267c:	79ba      	ldrb	r2, [r7, #6]
 800267e:	4927      	ldr	r1, [pc, #156]	; (800271c <LinkTimerBefore+0xbc>)
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3314      	adds	r3, #20
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	4922      	ldr	r1, [pc, #136]	; (800271c <LinkTimerBefore+0xbc>)
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	3315      	adds	r3, #21
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80026a4:	79fa      	ldrb	r2, [r7, #7]
 80026a6:	491d      	ldr	r1, [pc, #116]	; (800271c <LinkTimerBefore+0xbc>)
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	3315      	adds	r3, #21
 80026b4:	79ba      	ldrb	r2, [r7, #6]
 80026b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80026b8:	79fa      	ldrb	r2, [r7, #7]
 80026ba:	4918      	ldr	r1, [pc, #96]	; (800271c <LinkTimerBefore+0xbc>)
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	3314      	adds	r3, #20
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026cc:	79ba      	ldrb	r2, [r7, #6]
 80026ce:	4913      	ldr	r1, [pc, #76]	; (800271c <LinkTimerBefore+0xbc>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	3314      	adds	r3, #20
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80026e0:	e014      	b.n	800270c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	490d      	ldr	r1, [pc, #52]	; (800271c <LinkTimerBefore+0xbc>)
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	3315      	adds	r3, #21
 80026f2:	79ba      	ldrb	r2, [r7, #6]
 80026f4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026f6:	79ba      	ldrb	r2, [r7, #6]
 80026f8:	4908      	ldr	r1, [pc, #32]	; (800271c <LinkTimerBefore+0xbc>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	3314      	adds	r3, #20
 8002706:	79fa      	ldrb	r2, [r7, #7]
 8002708:	701a      	strb	r2, [r3, #0]
  return;
 800270a:	bf00      	nop
}
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000b78 	.word	0x20000b78
 800271c:	20000ae8 	.word	0x20000ae8

08002720 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800272a:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <linkTimer+0x144>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b06      	cmp	r3, #6
 8002732:	d118      	bne.n	8002766 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <linkTimer+0x144>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <linkTimer+0x148>)
 800273c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800273e:	4a49      	ldr	r2, [pc, #292]	; (8002864 <linkTimer+0x144>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	4949      	ldr	r1, [pc, #292]	; (800286c <linkTimer+0x14c>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	3315      	adds	r3, #21
 8002754:	2206      	movs	r2, #6
 8002756:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <linkTimer+0x150>)
 800275a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800275e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	81fb      	strh	r3, [r7, #14]
 8002764:	e078      	b.n	8002858 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002766:	f000 f909 	bl	800297c <ReturnTimeElapsed>
 800276a:	4603      	mov	r3, r0
 800276c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	493e      	ldr	r1, [pc, #248]	; (800286c <linkTimer+0x14c>)
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	3308      	adds	r3, #8
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	89fb      	ldrh	r3, [r7, #14]
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	4419      	add	r1, r3
 8002786:	4839      	ldr	r0, [pc, #228]	; (800286c <linkTimer+0x14c>)
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4403      	add	r3, r0
 8002792:	3308      	adds	r3, #8
 8002794:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002796:	79fa      	ldrb	r2, [r7, #7]
 8002798:	4934      	ldr	r1, [pc, #208]	; (800286c <linkTimer+0x14c>)
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3308      	adds	r3, #8
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80027aa:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <linkTimer+0x144>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4619      	mov	r1, r3
 80027b2:	4a2e      	ldr	r2, [pc, #184]	; (800286c <linkTimer+0x14c>)
 80027b4:	460b      	mov	r3, r1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	440b      	add	r3, r1
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	3308      	adds	r3, #8
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d337      	bcc.n	8002838 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <linkTimer+0x144>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80027ce:	7b7a      	ldrb	r2, [r7, #13]
 80027d0:	4926      	ldr	r1, [pc, #152]	; (800286c <linkTimer+0x14c>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	3315      	adds	r3, #21
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027e2:	e013      	b.n	800280c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80027e4:	7b7a      	ldrb	r2, [r7, #13]
 80027e6:	4921      	ldr	r1, [pc, #132]	; (800286c <linkTimer+0x14c>)
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	3315      	adds	r3, #21
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80027f8:	7b7a      	ldrb	r2, [r7, #13]
 80027fa:	491c      	ldr	r1, [pc, #112]	; (800286c <linkTimer+0x14c>)
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3315      	adds	r3, #21
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800280c:	7b3b      	ldrb	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d00b      	beq.n	800282a <linkTimer+0x10a>
 8002812:	7b3a      	ldrb	r2, [r7, #12]
 8002814:	4915      	ldr	r1, [pc, #84]	; (800286c <linkTimer+0x14c>)
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3308      	adds	r3, #8
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	d2dc      	bcs.n	80027e4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800282a:	7b7a      	ldrb	r2, [r7, #13]
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fecf 	bl	80025d4 <LinkTimerAfter>
 8002836:	e00f      	b.n	8002858 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <linkTimer+0x144>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff0c 	bl	8002660 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <linkTimer+0x144>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <linkTimer+0x148>)
 8002850:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <linkTimer+0x144>)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002858:	89fb      	ldrh	r3, [r7, #14]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000b78 	.word	0x20000b78
 8002868:	20000b79 	.word	0x20000b79
 800286c:	20000ae8 	.word	0x20000ae8
 8002870:	20000b7c 	.word	0x20000b7c

08002874 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	460a      	mov	r2, r1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	4613      	mov	r3, r2
 8002882:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <UnlinkTimer+0xf8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	79fa      	ldrb	r2, [r7, #7]
 800288c:	429a      	cmp	r2, r3
 800288e:	d111      	bne.n	80028b4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <UnlinkTimer+0xf8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b36      	ldr	r3, [pc, #216]	; (8002970 <UnlinkTimer+0xfc>)
 8002898:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800289a:	79fa      	ldrb	r2, [r7, #7]
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <UnlinkTimer+0x100>)
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	3315      	adds	r3, #21
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <UnlinkTimer+0xf8>)
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e03e      	b.n	8002932 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80028b4:	79fa      	ldrb	r2, [r7, #7]
 80028b6:	492f      	ldr	r1, [pc, #188]	; (8002974 <UnlinkTimer+0x100>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3314      	adds	r3, #20
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80028c8:	79fa      	ldrb	r2, [r7, #7]
 80028ca:	492a      	ldr	r1, [pc, #168]	; (8002974 <UnlinkTimer+0x100>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	3315      	adds	r3, #21
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80028dc:	79f9      	ldrb	r1, [r7, #7]
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	4824      	ldr	r0, [pc, #144]	; (8002974 <UnlinkTimer+0x100>)
 80028e2:	460b      	mov	r3, r1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4403      	add	r3, r0
 80028ec:	3315      	adds	r3, #21
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2d8      	uxtb	r0, r3
 80028f2:	4920      	ldr	r1, [pc, #128]	; (8002974 <UnlinkTimer+0x100>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3315      	adds	r3, #21
 8002900:	4602      	mov	r2, r0
 8002902:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002904:	7bbb      	ldrb	r3, [r7, #14]
 8002906:	2b06      	cmp	r3, #6
 8002908:	d013      	beq.n	8002932 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800290a:	79f9      	ldrb	r1, [r7, #7]
 800290c:	7bba      	ldrb	r2, [r7, #14]
 800290e:	4819      	ldr	r0, [pc, #100]	; (8002974 <UnlinkTimer+0x100>)
 8002910:	460b      	mov	r3, r1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	440b      	add	r3, r1
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4403      	add	r3, r0
 800291a:	3314      	adds	r3, #20
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2d8      	uxtb	r0, r3
 8002920:	4914      	ldr	r1, [pc, #80]	; (8002974 <UnlinkTimer+0x100>)
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	3314      	adds	r3, #20
 800292e:	4602      	mov	r2, r0
 8002930:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002932:	79fa      	ldrb	r2, [r7, #7]
 8002934:	490f      	ldr	r1, [pc, #60]	; (8002974 <UnlinkTimer+0x100>)
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	330c      	adds	r3, #12
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <UnlinkTimer+0xf8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b06      	cmp	r3, #6
 800294e:	d107      	bne.n	8002960 <UnlinkTimer+0xec>
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <UnlinkTimer+0x104>)
 8002958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800295c:	601a      	str	r2, [r3, #0]
  }

  return;
 800295e:	bf00      	nop
 8002960:	bf00      	nop
}
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	20000b78 	.word	0x20000b78
 8002970:	20000b79 	.word	0x20000b79
 8002974:	20000ae8 	.word	0x20000ae8
 8002978:	20000b7c 	.word	0x20000b7c

0800297c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002982:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <ReturnTimeElapsed+0x70>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298a:	d026      	beq.n	80029da <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800298c:	f7ff fe02 	bl	8002594 <ReadRtcSsrValue>
 8002990:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <ReturnTimeElapsed+0x70>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d805      	bhi.n	80029a8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <ReturnTimeElapsed+0x70>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	e00a      	b.n	80029be <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <ReturnTimeElapsed+0x74>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <ReturnTimeElapsed+0x70>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <ReturnTimeElapsed+0x78>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <ReturnTimeElapsed+0x7c>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	40d3      	lsrs	r3, r2
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	e001      	b.n	80029de <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	b29b      	uxth	r3, r3
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000b7c 	.word	0x20000b7c
 80029f0:	20000b84 	.word	0x20000b84
 80029f4:	20000b82 	.word	0x20000b82
 80029f8:	20000b81 	.word	0x20000b81

080029fc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d108      	bne.n	8002a1e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a0c:	f7ff fdc2 	bl	8002594 <ReadRtcSsrValue>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <RestartWakeupCounter+0x9c>)
 8002a14:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002a16:	2003      	movs	r0, #3
 8002a18:	f001 fe01 	bl	800461e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002a1c:	e039      	b.n	8002a92 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d803      	bhi.n	8002a2c <RestartWakeupCounter+0x30>
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <RestartWakeupCounter+0xa0>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d002      	beq.n	8002a32 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002a32:	bf00      	nop
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <RestartWakeupCounter+0xa4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f8      	beq.n	8002a34 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <RestartWakeupCounter+0xa4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <RestartWakeupCounter+0xa4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a52:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <RestartWakeupCounter+0xa8>)
 8002a56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a5a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f001 fdec 	bl	800463a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <RestartWakeupCounter+0xac>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <RestartWakeupCounter+0xac>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a72:	f7ff fd8f 	bl	8002594 <ReadRtcSsrValue>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <RestartWakeupCounter+0x9c>)
 8002a7a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <RestartWakeupCounter+0xa4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <RestartWakeupCounter+0xa4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a8a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002a8c:	f3af 8000 	nop.w
  return ;
 8002a90:	bf00      	nop
}
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000b7c 	.word	0x20000b7c
 8002a9c:	20000b81 	.word	0x20000b81
 8002aa0:	20000c54 	.word	0x20000c54
 8002aa4:	58000800 	.word	0x58000800
 8002aa8:	40002800 	.word	0x40002800

08002aac <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002ab2:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <RescheduleTimerList+0x11c>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abe:	d107      	bne.n	8002ad0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002ac0:	bf00      	nop
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <RescheduleTimerList+0x120>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f8      	bne.n	8002ac2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002ad0:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <RescheduleTimerList+0x120>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <RescheduleTimerList+0x120>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ade:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <RescheduleTimerList+0x124>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	493a      	ldr	r1, [pc, #232]	; (8002bd4 <RescheduleTimerList+0x128>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3308      	adds	r3, #8
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002afa:	f7ff ff3f 	bl	800297c <ReturnTimeElapsed>
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d205      	bcs.n	8002b16 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b0e:	4b32      	ldr	r3, [pc, #200]	; (8002bd8 <RescheduleTimerList+0x12c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e04d      	b.n	8002bb2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <RescheduleTimerList+0x130>)
 8002b1a:	8812      	ldrh	r2, [r2, #0]
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	4413      	add	r3, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d906      	bls.n	8002b36 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002b28:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <RescheduleTimerList+0x130>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <RescheduleTimerList+0x12c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e03d      	b.n	8002bb2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <RescheduleTimerList+0x12c>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b46:	e034      	b.n	8002bb2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	4922      	ldr	r1, [pc, #136]	; (8002bd4 <RescheduleTimerList+0x128>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	3308      	adds	r3, #8
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d20a      	bcs.n	8002b76 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	491c      	ldr	r1, [pc, #112]	; (8002bd4 <RescheduleTimerList+0x128>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3308      	adds	r3, #8
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e013      	b.n	8002b9e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <RescheduleTimerList+0x128>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	3308      	adds	r3, #8
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	1ac9      	subs	r1, r1, r3
 8002b8e:	4811      	ldr	r0, [pc, #68]	; (8002bd4 <RescheduleTimerList+0x128>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4403      	add	r3, r0
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <RescheduleTimerList+0x128>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3315      	adds	r3, #21
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d1c7      	bne.n	8002b48 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002bb8:	89bb      	ldrh	r3, [r7, #12]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff1e 	bl	80029fc <RestartWakeupCounter>

  return ;
 8002bc0:	bf00      	nop
}
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40002800 	.word	0x40002800
 8002bcc:	20000c54 	.word	0x20000c54
 8002bd0:	20000b78 	.word	0x20000b78
 8002bd4:	20000ae8 	.word	0x20000ae8
 8002bd8:	20000b80 	.word	0x20000b80
 8002bdc:	20000b86 	.word	0x20000b86

08002be0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	; 0x28
 8002be4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bea:	617b      	str	r3, [r7, #20]
  return(result);
 8002bec:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf0:	b672      	cpsid	i
}
 8002bf2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	22ca      	movs	r2, #202	; 0xca
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
 8002bfc:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2253      	movs	r2, #83	; 0x53
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002c04:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c12:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002c14:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002c1c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c20:	4950      	ldr	r1, [pc, #320]	; (8002d64 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d16e      	bne.n	8002d14 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002c36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c3a:	494a      	ldr	r1, [pc, #296]	; (8002d64 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002c4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c4e:	4945      	ldr	r1, [pc, #276]	; (8002d64 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04c      	beq.n	8002d04 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002c6a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c6e:	493d      	ldr	r1, [pc, #244]	; (8002d64 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	330d      	adds	r3, #13
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d124      	bne.n	8002cce <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fdf2 	bl	8002874 <UnlinkTimer>
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002c9c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ca0:	4930      	ldr	r1, [pc, #192]	; (8002d64 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3304      	adds	r3, #4
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f9b8 	bl	800302c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	22ca      	movs	r2, #202	; 0xca
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2253      	movs	r2, #83	; 0x53
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
 8002ccc:	e012      	b.n	8002cf4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f920 	bl	8002f24 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	22ca      	movs	r2, #202	; 0xca
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2253      	movs	r2, #83	; 0x53
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	69b8      	ldr	r0, [r7, #24]
 8002cfe:	f000 fa1b 	bl	8003138 <HW_TS_RTC_Int_AppNot>
 8002d02:	e022      	b.n	8002d4a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002d04:	f7ff fed2 	bl	8002aac <RescheduleTimerList>
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f383 8810 	msr	PRIMASK, r3
}
 8002d12:	e01a      	b.n	8002d4a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002d14:	bf00      	nop
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f8      	beq.n	8002d16 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002d34:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002d52:	bf00      	nop
}
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000c54 	.word	0x20000c54
 8002d60:	20000b78 	.word	0x20000b78
 8002d64:	20000ae8 	.word	0x20000ae8
 8002d68:	20000b80 	.word	0x20000b80
 8002d6c:	58000800 	.word	0x58000800

08002d70 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HW_TS_Init+0x188>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	22ca      	movs	r2, #202	; 0xca
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
 8002d84:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <HW_TS_Init+0x188>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2253      	movs	r2, #83	; 0x53
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d8c:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <HW_TS_Init+0x18c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HW_TS_Init+0x18c>)
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002d98:	4b58      	ldr	r3, [pc, #352]	; (8002efc <HW_TS_Init+0x18c>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f1c3 0304 	rsb	r3, r3, #4
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HW_TS_Init+0x190>)
 8002dac:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HW_TS_Init+0x18c>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002db6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002dba:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	fa92 f2a2 	rbit	r2, r2
 8002dc2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d101      	bne.n	8002dd2 <HW_TS_Init+0x62>
  {
    return 32U;
 8002dce:	2220      	movs	r2, #32
 8002dd0:	e003      	b.n	8002dda <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	40d3      	lsrs	r3, r2
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <HW_TS_Init+0x194>)
 8002de4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002de6:	4b45      	ldr	r3, [pc, #276]	; (8002efc <HW_TS_Init+0x18c>)
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b44      	ldr	r3, [pc, #272]	; (8002f08 <HW_TS_Init+0x198>)
 8002df8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002dfa:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HW_TS_Init+0x198>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <HW_TS_Init+0x194>)
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <HW_TS_Init+0x190>)
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	40d3      	lsrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d904      	bls.n	8002e28 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HW_TS_Init+0x19c>)
 8002e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	e003      	b.n	8002e30 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HW_TS_Init+0x19c>)
 8002e2e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e34:	f7ff fb9c 	bl	8002570 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e3c:	f7ff fb84 	bl	8002548 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d13d      	bne.n	8002ec2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HW_TS_Init+0x1a0>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e4c:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HW_TS_Init+0x1a4>)
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e52:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e00c      	b.n	8002e74 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002e5a:	7ffa      	ldrb	r2, [r7, #31]
 8002e5c:	492e      	ldr	r1, [pc, #184]	; (8002f18 <HW_TS_Init+0x1a8>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	330c      	adds	r3, #12
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	3301      	adds	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d9ef      	bls.n	8002e5a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002e7a:	4b28      	ldr	r3, [pc, #160]	; (8002f1c <HW_TS_Init+0x1ac>)
 8002e7c:	2206      	movs	r2, #6
 8002e7e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HW_TS_Init+0x188>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HW_TS_Init+0x188>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HW_TS_Init+0x188>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HW_TS_Init+0x188>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002ea0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <HW_TS_Init+0x1b0>)
 8002ea4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ea8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002eaa:	2003      	movs	r0, #3
 8002eac:	f001 fbc5 	bl	800463a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <HW_TS_Init+0x188>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HW_TS_Init+0x188>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e009      	b.n	8002ed6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HW_TS_Init+0x188>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f001 fba4 	bl	800461e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HW_TS_Init+0x188>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	22ff      	movs	r2, #255	; 0xff
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	2003      	movs	r0, #3
 8002ee4:	f001 fb59 	bl	800459a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ee8:	2003      	movs	r0, #3
 8002eea:	f001 fb70 	bl	80045ce <HAL_NVIC_EnableIRQ>

  return;
 8002eee:	bf00      	nop
}
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000c54 	.word	0x20000c54
 8002efc:	40002800 	.word	0x40002800
 8002f00:	20000b81 	.word	0x20000b81
 8002f04:	20000b82 	.word	0x20000b82
 8002f08:	20000b84 	.word	0x20000b84
 8002f0c:	20000b86 	.word	0x20000b86
 8002f10:	20000b80 	.word	0x20000b80
 8002f14:	20000b7c 	.word	0x20000b7c
 8002f18:	20000ae8 	.word	0x20000ae8
 8002f1c:	20000b78 	.word	0x20000b78
 8002f20:	58000800 	.word	0x58000800

08002f24 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f34:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f38:	b672      	cpsid	i
}
 8002f3a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	f001 fb54 	bl	80045ea <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HW_TS_Stop+0xf0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	22ca      	movs	r2, #202	; 0xca
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
 8002f4a:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HW_TS_Stop+0xf0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2253      	movs	r2, #83	; 0x53
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002f52:	79fa      	ldrb	r2, [r7, #7]
 8002f54:	4930      	ldr	r1, [pc, #192]	; (8003018 <HW_TS_Stop+0xf4>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	440b      	add	r3, r1
 8002f60:	330c      	adds	r3, #12
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d142      	bne.n	8002ff0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fc80 	bl	8002874 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HW_TS_Stop+0xf8>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d12f      	bne.n	8002fe0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HW_TS_Stop+0xfc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8c:	d107      	bne.n	8002f9e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002f8e:	bf00      	nop
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HW_TS_Stop+0xf0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f8      	bne.n	8002f90 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HW_TS_Stop+0xf0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HW_TS_Stop+0xf0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002fae:	bf00      	nop
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HW_TS_Stop+0xf0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f8      	beq.n	8002fb0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HW_TS_Stop+0xf0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HW_TS_Stop+0xf0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002fce:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HW_TS_Stop+0x100>)
 8002fd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002fd6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f001 fb2e 	bl	800463a <HAL_NVIC_ClearPendingIRQ>
 8002fde:	e007      	b.n	8002ff0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HW_TS_Stop+0x104>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	7cfa      	ldrb	r2, [r7, #19]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002fec:	f7ff fd5e 	bl	8002aac <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HW_TS_Stop+0xf0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	f001 fae8 	bl	80045ce <HAL_NVIC_EnableIRQ>
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800300a:	bf00      	nop
}
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000c54 	.word	0x20000c54
 8003018:	20000ae8 	.word	0x20000ae8
 800301c:	20000b78 	.word	0x20000b78
 8003020:	40002800 	.word	0x40002800
 8003024:	58000800 	.word	0x58000800
 8003028:	20000b79 	.word	0x20000b79

0800302c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	493b      	ldr	r1, [pc, #236]	; (8003128 <HW_TS_Start+0xfc>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	330c      	adds	r3, #12
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d103      	bne.n	8003058 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff66 	bl	8002f24 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	60fb      	str	r3, [r7, #12]
  return(result);
 800305e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003060:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003062:	b672      	cpsid	i
}
 8003064:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003066:	2003      	movs	r0, #3
 8003068:	f001 fabf 	bl	80045ea <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HW_TS_Start+0x100>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	22ca      	movs	r2, #202	; 0xca
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HW_TS_Start+0x100>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2253      	movs	r2, #83	; 0x53
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	492a      	ldr	r1, [pc, #168]	; (8003128 <HW_TS_Start+0xfc>)
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	330c      	adds	r3, #12
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003090:	79fa      	ldrb	r2, [r7, #7]
 8003092:	4925      	ldr	r1, [pc, #148]	; (8003128 <HW_TS_Start+0xfc>)
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3308      	adds	r3, #8
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80030a4:	79fa      	ldrb	r2, [r7, #7]
 80030a6:	4920      	ldr	r1, [pc, #128]	; (8003128 <HW_TS_Start+0xfc>)
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3304      	adds	r3, #4
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fb30 	bl	8002720 <linkTimer>
 80030c0:	4603      	mov	r3, r0
 80030c2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HW_TS_Start+0x104>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <HW_TS_Start+0x108>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	7c7a      	ldrb	r2, [r7, #17]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d002      	beq.n	80030dc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80030d6:	f7ff fce9 	bl	8002aac <RescheduleTimerList>
 80030da:	e013      	b.n	8003104 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80030dc:	79fa      	ldrb	r2, [r7, #7]
 80030de:	4912      	ldr	r1, [pc, #72]	; (8003128 <HW_TS_Start+0xfc>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	3308      	adds	r3, #8
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	8a7b      	ldrh	r3, [r7, #18]
 80030f0:	79fa      	ldrb	r2, [r7, #7]
 80030f2:	1ac9      	subs	r1, r1, r3
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <HW_TS_Start+0xfc>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4403      	add	r3, r0
 8003100:	3308      	adds	r3, #8
 8003102:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HW_TS_Start+0x100>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	22ff      	movs	r2, #255	; 0xff
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800310c:	2003      	movs	r0, #3
 800310e:	f001 fa5e 	bl	80045ce <HAL_NVIC_EnableIRQ>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f383 8810 	msr	PRIMASK, r3
}
 800311c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800311e:	bf00      	nop
}
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000ae8 	.word	0x20000ae8
 800312c:	20000c54 	.word	0x20000c54
 8003130:	20000b78 	.word	0x20000b78
 8003134:	20000b79 	.word	0x20000b79

08003138 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	460b      	mov	r3, r1
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4798      	blx	r3

  return;
 800314a:	bf00      	nop
}
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	4613      	mov	r3, r2
 8003164:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800316a:	2300      	movs	r3, #0
 800316c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10e      	bne.n	8003192 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8003174:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HW_UART_Transmit_DMA+0x80>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HW_UART_Transmit_DMA+0x84>)
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HW_UART_Transmit_DMA+0x88>)
 800317e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003180:	89bb      	ldrh	r3, [r7, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	4814      	ldr	r0, [pc, #80]	; (80031d8 <HW_UART_Transmit_DMA+0x84>)
 8003188:	f006 f9a8 	bl	80094dc <HAL_UART_Transmit_DMA>
 800318c:	4603      	mov	r3, r0
 800318e:	75fb      	strb	r3, [r7, #23]
            break;
 8003190:	e000      	b.n	8003194 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8003192:	bf00      	nop
    }

    switch (hal_status)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d816      	bhi.n	80031c8 <HW_UART_Transmit_DMA+0x74>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HW_UART_Transmit_DMA+0x4c>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031b7 	.word	0x080031b7
 80031a8:	080031bd 	.word	0x080031bd
 80031ac:	080031c3 	.word	0x080031c3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75bb      	strb	r3, [r7, #22]
            break;
 80031b4:	e009      	b.n	80031ca <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75bb      	strb	r3, [r7, #22]
            break;
 80031ba:	e006      	b.n	80031ca <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80031bc:	2302      	movs	r3, #2
 80031be:	75bb      	strb	r3, [r7, #22]
            break;
 80031c0:	e003      	b.n	80031ca <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80031c2:	2303      	movs	r3, #3
 80031c4:	75bb      	strb	r3, [r7, #22]
            break;
 80031c6:	e000      	b.n	80031ca <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80031c8:	bf00      	nop
    }

    return hw_status;
 80031ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000b88 	.word	0x20000b88
 80031d8:	20000d9c 	.word	0x20000d9c
 80031dc:	40013800 	.word	0x40013800

080031e0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_UART_TxCpltCallback+0x34>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d107      	bne.n	8003204 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_UART_TxCpltCallback+0x38>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_UART_TxCpltCallback+0x38>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4798      	blx	r3
            }
            break;
 8003202:	e001      	b.n	8003208 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003208:	bf00      	nop
    }

    return;
 800320a:	bf00      	nop
}
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40013800 	.word	0x40013800
 8003218:	20000b88 	.word	0x20000b88

0800321c <LL_RCC_LSE_SetDriveCapability>:
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f023 0218 	bic.w	r2, r3, #24
 8003230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_AHB1_GRP1_EnableClock>:
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4313      	orrs	r3, r2
 800325e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_AHB2_GRP1_EnableClock>:
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4313      	orrs	r3, r2
 8003290:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032b2:	f000 ff99 	bl	80041e8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80032b6:	f7fe fee3 	bl	8002080 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032ba:	f000 f8b1 	bl	8003420 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80032be:	f000 f911 	bl	80034e4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80032c2:	f000 f96f 	bl	80035a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032c6:	f000 fa9f 	bl	8003808 <MX_GPIO_Init>
  MX_DMA_Init();
 80032ca:	f000 fa73 	bl	80037b4 <MX_DMA_Init>
  MX_RTC_Init();
 80032ce:	f000 f9b1 	bl	8003634 <MX_RTC_Init>
  MX_I2C1_Init();
 80032d2:	f000 f927 	bl	8003524 <MX_I2C1_Init>
  MX_LPTIM1_Init();
 80032d6:	f000 f979 	bl	80035cc <MX_LPTIM1_Init>
  MX_SPI1_Init();
 80032da:	f000 f9df 	bl	800369c <MX_SPI1_Init>
  MX_RF_Init();
 80032de:	f000 f9a1 	bl	8003624 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 80032e2:	4843      	ldr	r0, [pc, #268]	; (80033f0 <main+0x144>)
 80032e4:	f00c f982 	bl	800f5ec <iprintf>
  HAL_Delay(10);									//wait as a precaution
 80032e8:	200a      	movs	r0, #10
 80032ea:	f7ff f8c9 	bl	8002480 <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 80032ee:	4941      	ldr	r1, [pc, #260]	; (80033f4 <main+0x148>)
 80032f0:	4841      	ldr	r0, [pc, #260]	; (80033f8 <main+0x14c>)
 80032f2:	f7fd fdb3 	bl	8000e5c <BH1790GLC_init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	70fb      	strb	r3, [r7, #3]
  if(status != 0){
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <main+0x66>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	4619      	mov	r1, r3
 8003304:	483d      	ldr	r0, [pc, #244]	; (80033fc <main+0x150>)
 8003306:	f00c f971 	bl	800f5ec <iprintf>
	  sensorReady = 0;
 800330a:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <main+0x154>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <main+0x76>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	4619      	mov	r1, r3
 8003316:	483b      	ldr	r0, [pc, #236]	; (8003404 <main+0x158>)
 8003318:	f00c f968 	bl	800f5ec <iprintf>
	  sensorReady = 1;
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <main+0x154>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8003322:	2200      	movs	r2, #0
 8003324:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8003328:	4837      	ldr	r0, [pc, #220]	; (8003408 <main+0x15c>)
 800332a:	f002 fe3b 	bl	8005fa4 <HAL_LPTIM_TimeOut_Start_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <main+0x8c>
	  Error_Handler();
 8003334:	f000 fad2 	bl	80038dc <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 8003338:	4834      	ldr	r0, [pc, #208]	; (800340c <main+0x160>)
 800333a:	f00c f957 	bl	800f5ec <iprintf>
  HAL_Delay(10);									//wait as a precaution
 800333e:	200a      	movs	r0, #10
 8003340:	f7ff f89e 	bl	8002480 <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);				//specify register bank
 8003344:	2100      	movs	r1, #0
 8003346:	4832      	ldr	r0, [pc, #200]	; (8003410 <main+0x164>)
 8003348:	f7fe faec 	bl	8001924 <ICM_SelectBank>
  HAL_Delay(10);									//wait as a precaution
 800334c:	200a      	movs	r0, #10
 800334e:	f7ff f897 	bl	8002480 <HAL_Delay>
  ICM_PowerOn(&imu, &hspi1);						//configure sensor
 8003352:	4930      	ldr	r1, [pc, #192]	; (8003414 <main+0x168>)
 8003354:	482e      	ldr	r0, [pc, #184]	; (8003410 <main+0x164>)
 8003356:	f7fe f9b9 	bl	80016cc <ICM_PowerOn>
  HAL_Delay(10);									//wait as a precaution
 800335a:	200a      	movs	r0, #10
 800335c:	f7ff f890 	bl	8002480 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003360:	f7fe fe9c 	bl	800209c <MX_APPE_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003364:	f7ff f8b1 	bl	80024ca <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336c:	f00b fa56 	bl	800e81c <UTIL_SEQ_Run>

    if(sensorReady){
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <main+0x154>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02f      	beq.n	80033d8 <main+0x12c>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <main+0x154>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]

        uint8_t err;
        err = get_val(&hrm);
 800337e:	481e      	ldr	r0, [pc, #120]	; (80033f8 <main+0x14c>)
 8003380:	f7fd fded 	bl	8000f5e <get_val>
 8003384:	4603      	mov	r3, r0
 8003386:	70bb      	strb	r3, [r7, #2]
        if(err != 0){
 8003388:	78bb      	ldrb	r3, [r7, #2]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d124      	bne.n	80033d8 <main+0x12c>
        	//printf("Could not read sensor. Error code: %d\n\r", err);
        }else{
        	if(add_sample(&hrm)==1){
 800338e:	481a      	ldr	r0, [pc, #104]	; (80033f8 <main+0x14c>)
 8003390:	f7fd fe10 	bl	8000fb4 <add_sample>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d11e      	bne.n	80033d8 <main+0x12c>

        		//printf("HELLO\n");
        		ppg_calculate(&hrm);
 800339a:	4817      	ldr	r0, [pc, #92]	; (80033f8 <main+0x14c>)
 800339c:	f7fd fe3c 	bl	8001018 <ppg_calculate>
        		for(int i = 100; i < 500; i++){
 80033a0:	2364      	movs	r3, #100	; 0x64
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	e014      	b.n	80033d0 <main+0x124>
        			printf("smooth_array: %d\n", hrm.smooth_array[i]);
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <main+0x14c>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	885b      	ldrh	r3, [r3, #2]
 80033b4:	4619      	mov	r1, r3
 80033b6:	4818      	ldr	r0, [pc, #96]	; (8003418 <main+0x16c>)
 80033b8:	f00c f918 	bl	800f5ec <iprintf>
        			AFIB_DETECTED = 0x50;
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <main+0x170>)
 80033be:	2250      	movs	r2, #80	; 0x50
 80033c0:	701a      	strb	r2, [r3, #0]
        	        UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 80033c2:	2100      	movs	r1, #0
 80033c4:	2004      	movs	r0, #4
 80033c6:	f00b fb47 	bl	800ea58 <UTIL_SEQ_SetTask>
        		for(int i = 100; i < 500; i++){
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3301      	adds	r3, #1
 80033ce:	607b      	str	r3, [r7, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033d6:	dbe6      	blt.n	80033a6 <main+0xfa>
    }else{
    	//not ready
    }

	// Select User Bank 0
	ICM_SelectBank(&imu, USER_BANK_0);
 80033d8:	2100      	movs	r1, #0
 80033da:	480d      	ldr	r0, [pc, #52]	; (8003410 <main+0x164>)
 80033dc:	f7fe faa2 	bl	8001924 <ICM_SelectBank>
	//HAL_Delay(10);

	// Obtain accelerometer and gyro data
	ICM_ReadAccelGyroData(&imu);
 80033e0:	480b      	ldr	r0, [pc, #44]	; (8003410 <main+0x164>)
 80033e2:	f7fe fa09 	bl	80017f8 <ICM_ReadAccelGyroData>
	// Obtain magnetometer data
//	ICM_ReadMagData(&imu, imu.mag_data);

	// Print raw axis data values to screen
	//printf("X: %i, Y: %i, Z: %i\n", imu.accel_data[0], imu.accel_data[1], imu.accel_data[2]);
	HAL_Delay(5);
 80033e6:	2005      	movs	r0, #5
 80033e8:	f7ff f84a 	bl	8002480 <HAL_Delay>
    MX_APPE_Process();
 80033ec:	e7ba      	b.n	8003364 <main+0xb8>
 80033ee:	bf00      	nop
 80033f0:	08011e54 	.word	0x08011e54
 80033f4:	20000b8c 	.word	0x20000b8c
 80033f8:	20000ef0 	.word	0x20000ef0
 80033fc:	08011e70 	.word	0x08011e70
 8003400:	200016e4 	.word	0x200016e4
 8003404:	08011e9c 	.word	0x08011e9c
 8003408:	20000c1c 	.word	0x20000c1c
 800340c:	08011ed0 	.word	0x08011ed0
 8003410:	200016cc 	.word	0x200016cc
 8003414:	20000c78 	.word	0x20000c78
 8003418:	08011ee4 	.word	0x08011ee4
 800341c:	20000008 	.word	0x20000008

08003420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b09a      	sub	sp, #104	; 0x68
 8003424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	2248      	movs	r2, #72	; 0x48
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f00b fc6a 	bl	800ed08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	615a      	str	r2, [r3, #20]
 8003444:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003446:	f003 f821 	bl	800648c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800344a:	2010      	movs	r0, #16
 800344c:	f7ff fee6 	bl	800321c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <SystemClock_Config+0xc0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003458:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <SystemClock_Config+0xc0>)
 800345a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <SystemClock_Config+0xc0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800346c:	2327      	movs	r3, #39	; 0x27
 800346e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003476:	2301      	movs	r3, #1
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800347a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003480:	2301      	movs	r3, #1
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003484:	2340      	movs	r3, #64	; 0x40
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003488:	2300      	movs	r3, #0
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800348c:	23a0      	movs	r3, #160	; 0xa0
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003490:	2300      	movs	r3, #0
 8003492:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003494:	f107 0320 	add.w	r3, r7, #32
 8003498:	4618      	mov	r0, r3
 800349a:	f003 fb8b 	bl	8006bb4 <HAL_RCC_OscConfig>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80034a4:	f000 fa1a 	bl	80038dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80034a8:	236f      	movs	r3, #111	; 0x6f
 80034aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 fee7 	bl	800729c <HAL_RCC_ClockConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80034d4:	f000 fa02 	bl	80038dc <Error_Handler>
  }
}
 80034d8:	bf00      	nop
 80034da:	3768      	adds	r7, #104	; 0x68
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58000400 	.word	0x58000400

080034e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b094      	sub	sp, #80	; 0x50
 80034e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034ea:	463b      	mov	r3, r7
 80034ec:	2250      	movs	r2, #80	; 0x50
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00b fc09 	bl	800ed08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80034f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80034fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003502:	2300      	movs	r3, #0
 8003504:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003506:	2300      	movs	r3, #0
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800350a:	463b      	mov	r3, r7
 800350c:	4618      	mov	r0, r3
 800350e:	f004 fb02 	bl	8007b16 <HAL_RCCEx_PeriphCLKConfig>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003518:	f000 f9e0 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800351c:	bf00      	nop
 800351e:	3750      	adds	r7, #80	; 0x50
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <MX_I2C1_Init+0x74>)
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <MX_I2C1_Init+0x78>)
 800352c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <MX_I2C1_Init+0x74>)
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <MX_I2C1_Init+0x7c>)
 8003532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <MX_I2C1_Init+0x74>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800353a:	4b17      	ldr	r3, [pc, #92]	; (8003598 <MX_I2C1_Init+0x74>)
 800353c:	2201      	movs	r2, #1
 800353e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003540:	4b15      	ldr	r3, [pc, #84]	; (8003598 <MX_I2C1_Init+0x74>)
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <MX_I2C1_Init+0x74>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <MX_I2C1_Init+0x74>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <MX_I2C1_Init+0x74>)
 8003554:	2200      	movs	r2, #0
 8003556:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <MX_I2C1_Init+0x74>)
 800355a:	2200      	movs	r2, #0
 800355c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800355e:	480e      	ldr	r0, [pc, #56]	; (8003598 <MX_I2C1_Init+0x74>)
 8003560:	f001 fd58 	bl	8005014 <HAL_I2C_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800356a:	f000 f9b7 	bl	80038dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800356e:	2100      	movs	r1, #0
 8003570:	4809      	ldr	r0, [pc, #36]	; (8003598 <MX_I2C1_Init+0x74>)
 8003572:	f002 fadf 	bl	8005b34 <HAL_I2CEx_ConfigAnalogFilter>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800357c:	f000 f9ae 	bl	80038dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003580:	2100      	movs	r1, #0
 8003582:	4805      	ldr	r0, [pc, #20]	; (8003598 <MX_I2C1_Init+0x74>)
 8003584:	f002 fb21 	bl	8005bca <HAL_I2CEx_ConfigDigitalFilter>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800358e:	f000 f9a5 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000b8c 	.word	0x20000b8c
 800359c:	40005400 	.word	0x40005400
 80035a0:	00707cbb 	.word	0x00707cbb

080035a4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <MX_IPCC_Init+0x20>)
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <MX_IPCC_Init+0x24>)
 80035ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80035ae:	4805      	ldr	r0, [pc, #20]	; (80035c4 <MX_IPCC_Init+0x20>)
 80035b0:	f002 fb58 	bl	8005c64 <HAL_IPCC_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80035ba:	f000 f98f 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000be0 	.word	0x20000be0
 80035c8:	58000c00 	.word	0x58000c00

080035cc <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <MX_LPTIM1_Init+0x54>)
 80035d4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035d8:	2200      	movs	r2, #0
 80035da:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035e8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <MX_LPTIM1_Init+0x50>)
 80035fe:	2200      	movs	r2, #0
 8003600:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <MX_LPTIM1_Init+0x50>)
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <MX_LPTIM1_Init+0x50>)
 800360a:	f002 fc29 	bl	8005e60 <HAL_LPTIM_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003614:	f000 f962 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000c1c 	.word	0x20000c1c
 8003620:	40007c00 	.word	0x40007c00

08003624 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003638:	4b16      	ldr	r3, [pc, #88]	; (8003694 <MX_RTC_Init+0x60>)
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <MX_RTC_Init+0x64>)
 800363c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <MX_RTC_Init+0x60>)
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <MX_RTC_Init+0x60>)
 8003646:	220f      	movs	r2, #15
 8003648:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <MX_RTC_Init+0x60>)
 800364c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003650:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <MX_RTC_Init+0x60>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <MX_RTC_Init+0x60>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <MX_RTC_Init+0x60>)
 8003660:	2200      	movs	r2, #0
 8003662:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <MX_RTC_Init+0x60>)
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800366a:	480a      	ldr	r0, [pc, #40]	; (8003694 <MX_RTC_Init+0x60>)
 800366c:	f004 fcda 	bl	8008024 <HAL_RTC_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003676:	f000 f931 	bl	80038dc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	4805      	ldr	r0, [pc, #20]	; (8003694 <MX_RTC_Init+0x60>)
 8003680:	f004 fdd0 	bl	8008224 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800368a:	f000 f927 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000c54 	.word	0x20000c54
 8003698:	40002800 	.word	0x40002800

0800369c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <MX_SPI1_Init+0x74>)
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <MX_SPI1_Init+0x78>)
 80036a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036a6:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <MX_SPI1_Init+0x74>)
 80036a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <MX_SPI1_Init+0x74>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <MX_SPI1_Init+0x74>)
 80036b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <MX_SPI1_Init+0x74>)
 80036be:	2202      	movs	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <MX_SPI1_Init+0x74>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <MX_SPI1_Init+0x74>)
 80036ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <MX_SPI1_Init+0x74>)
 80036d2:	2218      	movs	r2, #24
 80036d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <MX_SPI1_Init+0x74>)
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <MX_SPI1_Init+0x74>)
 80036de:	2200      	movs	r2, #0
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <MX_SPI1_Init+0x74>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <MX_SPI1_Init+0x74>)
 80036ea:	2207      	movs	r2, #7
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <MX_SPI1_Init+0x74>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <MX_SPI1_Init+0x74>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036fa:	4805      	ldr	r0, [pc, #20]	; (8003710 <MX_SPI1_Init+0x74>)
 80036fc:	f004 fe4e 	bl	800839c <HAL_SPI_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003706:	f000 f8e9 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000c78 	.word	0x20000c78
 8003714:	40013000 	.word	0x40013000

08003718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <MX_USART1_UART_Init+0x94>)
 800371e:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <MX_USART1_UART_Init+0x98>)
 8003720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <MX_USART1_UART_Init+0x94>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003738:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800373c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003740:	220c      	movs	r2, #12
 8003742:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <MX_USART1_UART_Init+0x94>)
 800374c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003752:	4b16      	ldr	r3, [pc, #88]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003754:	2200      	movs	r2, #0
 8003756:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <MX_USART1_UART_Init+0x94>)
 800375a:	2200      	movs	r2, #0
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003760:	2200      	movs	r2, #0
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003764:	4811      	ldr	r0, [pc, #68]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003766:	f005 fe69 	bl	800943c <HAL_UART_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8003770:	f000 f8b4 	bl	80038dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003774:	2100      	movs	r1, #0
 8003776:	480d      	ldr	r0, [pc, #52]	; (80037ac <MX_USART1_UART_Init+0x94>)
 8003778:	f007 f829 	bl	800a7ce <HAL_UARTEx_SetTxFifoThreshold>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8003782:	f000 f8ab 	bl	80038dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003786:	2100      	movs	r1, #0
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <MX_USART1_UART_Init+0x94>)
 800378a:	f007 f85e 	bl	800a84a <HAL_UARTEx_SetRxFifoThreshold>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8003794:	f000 f8a2 	bl	80038dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <MX_USART1_UART_Init+0x94>)
 800379a:	f006 ffdf 	bl	800a75c <HAL_UARTEx_DisableFifoMode>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80037a4:	f000 f89a 	bl	80038dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000d9c 	.word	0x20000d9c
 80037b0:	40013800 	.word	0x40013800

080037b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80037b8:	2004      	movs	r0, #4
 80037ba:	f7ff fd45 	bl	8003248 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037be:	2001      	movs	r0, #1
 80037c0:	f7ff fd42 	bl	8003248 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2100      	movs	r1, #0
 80037c8:	200b      	movs	r0, #11
 80037ca:	f000 fee6 	bl	800459a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037ce:	200b      	movs	r0, #11
 80037d0:	f000 fefd 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	200c      	movs	r0, #12
 80037da:	f000 fede 	bl	800459a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80037de:	200c      	movs	r0, #12
 80037e0:	f000 fef5 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	200d      	movs	r0, #13
 80037ea:	f000 fed6 	bl	800459a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80037ee:	200d      	movs	r0, #13
 80037f0:	f000 feed 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2100      	movs	r1, #0
 80037f8:	200e      	movs	r0, #14
 80037fa:	f000 fece 	bl	800459a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80037fe:	200e      	movs	r0, #14
 8003800:	f000 fee5 	bl	80045ce <HAL_NVIC_EnableIRQ>

}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}

08003808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	2004      	movs	r0, #4
 800381e:	f7ff fd2c 	bl	800327a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	2002      	movs	r0, #2
 8003824:	f7ff fd29 	bl	800327a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003828:	2001      	movs	r0, #1
 800382a:	f7ff fd26 	bl	800327a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800382e:	2008      	movs	r0, #8
 8003830:	f7ff fd23 	bl	800327a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8003834:	2200      	movs	r2, #0
 8003836:	213b      	movs	r1, #59	; 0x3b
 8003838:	481d      	ldr	r0, [pc, #116]	; (80038b0 <MX_GPIO_Init+0xa8>)
 800383a:	f001 fbaf 	bl	8004f9c <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800383e:	2310      	movs	r3, #16
 8003840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003846:	2301      	movs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	4619      	mov	r1, r3
 800384e:	4819      	ldr	r0, [pc, #100]	; (80038b4 <MX_GPIO_Init+0xac>)
 8003850:	f001 fa34 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 PB4
                           LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8003854:	233b      	movs	r3, #59	; 0x3b
 8003856:	607b      	str	r3, [r7, #4]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003858:	2301      	movs	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	4619      	mov	r1, r3
 8003868:	4811      	ldr	r0, [pc, #68]	; (80038b0 <MX_GPIO_Init+0xa8>)
 800386a:	f001 fa27 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800386e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003880:	230a      	movs	r3, #10
 8003882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	4619      	mov	r1, r3
 8003888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388c:	f001 fa16 	bl	8004cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8003890:	2303      	movs	r3, #3
 8003892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003894:	2300      	movs	r3, #0
 8003896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4805      	ldr	r0, [pc, #20]	; (80038b8 <MX_GPIO_Init+0xb0>)
 80038a2:	f001 fa0b 	bl	8004cbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038a6:	bf00      	nop
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	48000400 	.word	0x48000400
 80038b4:	48000800 	.word	0x48000800
 80038b8:	48000c00 	.word	0x48000c00

080038bc <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	200016e4 	.word	0x200016e4

080038dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80038e0:	b672      	cpsid	i
}
 80038e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <Error_Handler+0x8>

080038e6 <LL_RCC_EnableRTC>:
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <LL_AHB2_GRP1_EnableClock>:
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4313      	orrs	r3, r2
 800391e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <LL_AHB3_GRP1_EnableClock>:
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4313      	orrs	r3, r2
 8003950:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_APB1_GRP1_EnableClock>:
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800397a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4313      	orrs	r3, r2
 8003982:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003990:	68fb      	ldr	r3, [r7, #12]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_APB2_GRP1_EnableClock>:
{
 800399e:	b480      	push	{r7}
 80039a0:	b085      	sub	sp, #20
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4013      	ands	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80039d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039d8:	f7ff ffaf 	bl	800393a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	202e      	movs	r0, #46	; 0x2e
 80039e2:	f000 fdda 	bl	800459a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80039e6:	202e      	movs	r0, #46	; 0x2e
 80039e8:	f000 fdf1 	bl	80045ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b09c      	sub	sp, #112	; 0x70
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a08:	f107 030c 	add.w	r3, r7, #12
 8003a0c:	2250      	movs	r2, #80	; 0x50
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f00b f979 	bl	800ed08 <memset>
  if(hi2c->Instance==I2C1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_I2C_MspInit+0x98>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d12e      	bne.n	8003a7e <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a20:	2304      	movs	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a24:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a2a:	f107 030c 	add.w	r3, r7, #12
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 f871 	bl	8007b16 <HAL_RCCEx_PeriphCLKConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003a3a:	f7ff ff4f 	bl	80038dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a3e:	2002      	movs	r0, #2
 8003a40:	f7ff ff62 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a4a:	2312      	movs	r3, #18
 8003a4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a56:	2304      	movs	r3, #4
 8003a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480a      	ldr	r0, [pc, #40]	; (8003a8c <HAL_I2C_MspInit+0x9c>)
 8003a62:	f001 f92b 	bl	8004cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a66:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a6a:	f7ff ff7f 	bl	800396c <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	201e      	movs	r0, #30
 8003a74:	f000 fd91 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003a78:	201e      	movs	r0, #30
 8003a7a:	f000 fda8 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a7e:	bf00      	nop
 8003a80:	3770      	adds	r7, #112	; 0x70
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40005400 	.word	0x40005400
 8003a8c:	48000400 	.word	0x48000400

08003a90 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_IPCC_MspInit+0x44>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d113      	bne.n	8003aca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003aa2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003aa6:	f7ff ff48 	bl	800393a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	202c      	movs	r0, #44	; 0x2c
 8003ab0:	f000 fd73 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003ab4:	202c      	movs	r0, #44	; 0x2c
 8003ab6:	f000 fd8a 	bl	80045ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	202d      	movs	r0, #45	; 0x2d
 8003ac0:	f000 fd6b 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003ac4:	202d      	movs	r0, #45	; 0x2d
 8003ac6:	f000 fd82 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	58000c00 	.word	0x58000c00

08003ad8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b096      	sub	sp, #88	; 0x58
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	2250      	movs	r2, #80	; 0x50
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f00b f90d 	bl	800ed08 <memset>
  if(hlptim->Instance==LPTIM1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_LPTIM_MspInit+0x60>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d11a      	bne.n	8003b2e <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003af8:	2310      	movs	r3, #16
 8003afa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003afc:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 f805 	bl	8007b16 <HAL_RCCEx_PeriphCLKConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8003b12:	f7ff fee3 	bl	80038dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003b16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003b1a:	f7ff ff27 	bl	800396c <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2100      	movs	r1, #0
 8003b22:	202f      	movs	r0, #47	; 0x2f
 8003b24:	f000 fd39 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003b28:	202f      	movs	r0, #47	; 0x2f
 8003b2a:	f000 fd50 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003b2e:	bf00      	nop
 8003b30:	3758      	adds	r7, #88	; 0x58
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40007c00 	.word	0x40007c00

08003b3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b096      	sub	sp, #88	; 0x58
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	2250      	movs	r2, #80	; 0x50
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f00b f8db 	bl	800ed08 <memset>
  if(hrtc->Instance==RTC)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <HAL_RTC_MspInit+0x64>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d11d      	bne.n	8003b98 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b68:	f107 0308 	add.w	r3, r7, #8
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 ffd2 	bl	8007b16 <HAL_RCCEx_PeriphCLKConfig>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003b78:	f7ff feb0 	bl	80038dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b7c:	f7ff feb3 	bl	80038e6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003b80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003b84:	f7ff fef2 	bl	800396c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f000 fd04 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003b92:	2003      	movs	r0, #3
 8003b94:	f000 fd1b 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b98:	bf00      	nop
 8003b9a:	3758      	adds	r7, #88	; 0x58
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40002800 	.word	0x40002800

08003ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <HAL_SPI_MspInit+0x110>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d171      	bne.n	8003caa <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003bca:	f7ff fee8 	bl	800399e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f7ff fe9a 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003bd4:	23c2      	movs	r3, #194	; 0xc2
 8003bd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003be4:	2305      	movs	r3, #5
 8003be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	4619      	mov	r1, r3
 8003bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf2:	f001 f863 	bl	8004cbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003bf8:	4a30      	ldr	r2, [pc, #192]	; (8003cbc <HAL_SPI_MspInit+0x118>)
 8003bfa:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003bfe:	2206      	movs	r2, #6
 8003c00:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c02:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003c2c:	4822      	ldr	r0, [pc, #136]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c2e:	f000 fd13 	bl	8004658 <HAL_DMA_Init>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8003c38:	f7ff fe50 	bl	80038dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_SPI_MspInit+0x114>)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_SPI_MspInit+0x120>)
 8003c4c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c50:	2207      	movs	r2, #7
 8003c52:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c56:	2210      	movs	r2, #16
 8003c58:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c7e:	4810      	ldr	r0, [pc, #64]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c80:	f000 fcea 	bl	8004658 <HAL_DMA_Init>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8003c8a:	f7ff fe27 	bl	80038dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_SPI_MspInit+0x11c>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2022      	movs	r0, #34	; 0x22
 8003ca0:	f000 fc7b 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ca4:	2022      	movs	r0, #34	; 0x22
 8003ca6:	f000 fc92 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003caa:	bf00      	nop
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40013000 	.word	0x40013000
 8003cb8:	20000cdc 	.word	0x20000cdc
 8003cbc:	40020008 	.word	0x40020008
 8003cc0:	20000d3c 	.word	0x20000d3c
 8003cc4:	4002001c 	.word	0x4002001c

08003cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b09c      	sub	sp, #112	; 0x70
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ce0:	f107 030c 	add.w	r3, r7, #12
 8003ce4:	2250      	movs	r2, #80	; 0x50
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f00b f80d 	bl	800ed08 <memset>
  if(huart->Instance==USART1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a43      	ldr	r2, [pc, #268]	; (8003e00 <HAL_UART_MspInit+0x138>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d17f      	bne.n	8003df8 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	4618      	mov	r0, r3
 8003d06:	f003 ff06 	bl	8007b16 <HAL_RCCEx_PeriphCLKConfig>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d10:	f7ff fde4 	bl	80038dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d18:	f7ff fe41 	bl	800399e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	f7ff fdf3 	bl	8003908 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003d22:	23c0      	movs	r3, #192	; 0xc0
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d32:	2307      	movs	r3, #7
 8003d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4831      	ldr	r0, [pc, #196]	; (8003e04 <HAL_UART_MspInit+0x13c>)
 8003d3e:	f000 ffbd 	bl	8004cbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d44:	4a31      	ldr	r2, [pc, #196]	; (8003e0c <HAL_UART_MspInit+0x144>)
 8003d46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003d48:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d4a:	220e      	movs	r2, #14
 8003d4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d54:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d5a:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d60:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d66:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003d6c:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d72:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003d78:	4823      	ldr	r0, [pc, #140]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d7a:	f000 fc6d 	bl	8004658 <HAL_DMA_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003d84:	f7ff fdaa 	bl	80038dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_UART_MspInit+0x140>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003d98:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_UART_MspInit+0x14c>)
 8003d9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003d9e:	220f      	movs	r2, #15
 8003da0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003da2:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003da4:	2210      	movs	r2, #16
 8003da6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003db4:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003dcc:	4810      	ldr	r0, [pc, #64]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003dce:	f000 fc43 	bl	8004658 <HAL_DMA_Init>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8003dd8:	f7ff fd80 	bl	80038dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003de2:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <HAL_UART_MspInit+0x148>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2100      	movs	r1, #0
 8003dec:	2024      	movs	r0, #36	; 0x24
 8003dee:	f000 fbd4 	bl	800459a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003df2:	2024      	movs	r0, #36	; 0x24
 8003df4:	f000 fbeb 	bl	80045ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003df8:	bf00      	nop
 8003dfa:	3770      	adds	r7, #112	; 0x70
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40013800 	.word	0x40013800
 8003e04:	48000400 	.word	0x48000400
 8003e08:	20000e30 	.word	0x20000e30
 8003e0c:	40020030 	.word	0x40020030
 8003e10:	20000e90 	.word	0x20000e90
 8003e14:	40020044 	.word	0x40020044

08003e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <NMI_Handler+0x4>

08003e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <HardFault_Handler+0x4>

08003e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <MemManage_Handler+0x4>

08003e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <BusFault_Handler+0x4>

08003e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e34:	e7fe      	b.n	8003e34 <UsageFault_Handler+0x4>

08003e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e64:	f000 fa1a 	bl	800429c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003e70:	f7fe feb6 	bl	8002be0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <DMA1_Channel1_IRQHandler+0x10>)
 8003e7e:	f000 fdcc 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000cdc 	.word	0x20000cdc

08003e8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <DMA1_Channel2_IRQHandler+0x10>)
 8003e92:	f000 fdc2 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000d3c 	.word	0x20000d3c

08003ea0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <DMA1_Channel3_IRQHandler+0x10>)
 8003ea6:	f000 fdb8 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000e30 	.word	0x20000e30

08003eb4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <DMA1_Channel4_IRQHandler+0x10>)
 8003eba:	f000 fdae 	bl	8004a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000e90 	.word	0x20000e90

08003ec8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <I2C1_EV_IRQHandler+0x10>)
 8003ece:	f001 fb5f 	bl	8005590 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000b8c 	.word	0x20000b8c

08003edc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <SPI1_IRQHandler+0x10>)
 8003ee2:	f004 ffaf 	bl	8008e44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000c78 	.word	0x20000c78

08003ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <USART1_IRQHandler+0x10>)
 8003ef6:	f005 fb71 	bl	80095dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000d9c 	.word	0x20000d9c

08003f04 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003f08:	f00a fb02 	bl	800e510 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003f14:	f00a fb34 	bl	800e580 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003f20:	f001 f854 	bl	8004fcc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <LPTIM1_IRQHandler+0x10>)
 8003f2e:	f002 f8bb 	bl	80060a8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000c1c 	.word	0x20000c1c

08003f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return 1;
 8003f40:	2301      	movs	r3, #1
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <_kill>:

int _kill(int pid, int sig)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f56:	f00a fe9f 	bl	800ec98 <__errno>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2216      	movs	r2, #22
 8003f5e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_exit>:

void _exit (int status)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ffe7 	bl	8003f4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f7e:	e7fe      	b.n	8003f7e <_exit+0x12>

08003f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	e00a      	b.n	8003fa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f92:	f3af 8000 	nop.w
 8003f96:	4601      	mov	r1, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	60ba      	str	r2, [r7, #8]
 8003f9e:	b2ca      	uxtb	r2, r1
 8003fa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	dbf0      	blt.n	8003f92 <_read+0x12>
  }

  return len;
 8003fb0:	687b      	ldr	r3, [r7, #4]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_close>:
  }
  return len;
}

int _close(int file)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_isatty>:

int _isatty(int file)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ffa:	2301      	movs	r3, #1
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <_sbrk+0x5c>)
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <_sbrk+0x60>)
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <_sbrk+0x64>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <_sbrk+0x64>)
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <_sbrk+0x68>)
 8004044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <_sbrk+0x64>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d207      	bcs.n	8004064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004054:	f00a fe20 	bl	800ec98 <__errno>
 8004058:	4603      	mov	r3, r0
 800405a:	220c      	movs	r2, #12
 800405c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800405e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004062:	e009      	b.n	8004078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004064:	4b08      	ldr	r3, [pc, #32]	; (8004088 <_sbrk+0x64>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <_sbrk+0x64>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	4a05      	ldr	r2, [pc, #20]	; (8004088 <_sbrk+0x64>)
 8004074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004076:	68fb      	ldr	r3, [r7, #12]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20030000 	.word	0x20030000
 8004084:	00000400 	.word	0x00000400
 8004088:	200016e8 	.word	0x200016e8
 800408c:	200029c8 	.word	0x200029c8

08004090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <SystemInit+0x98>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	4a23      	ldr	r2, [pc, #140]	; (8004128 <SystemInit+0x98>)
 800409c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80040bc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <SystemInit+0x9c>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040da:	f023 0305 	bic.w	r3, r3, #5
 80040de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fa:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <SystemInit+0xa0>)
 80040fc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	4a0b      	ldr	r2, [pc, #44]	; (8004130 <SystemInit+0xa0>)
 8004104:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004114:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
}
 800411e:	bf00      	nop
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00
 800412c:	faf6fefb 	.word	0xfaf6fefb
 8004130:	22041000 	.word	0x22041000

08004134 <CopyDataInit>:
 8004134:	58d4      	ldr	r4, [r2, r3]
 8004136:	50c4      	str	r4, [r0, r3]
 8004138:	3304      	adds	r3, #4

0800413a <LoopCopyDataInit>:
 800413a:	18c4      	adds	r4, r0, r3
 800413c:	428c      	cmp	r4, r1
 800413e:	d3f9      	bcc.n	8004134 <CopyDataInit>
 8004140:	4770      	bx	lr

08004142 <FillZerobss>:
 8004142:	6003      	str	r3, [r0, #0]
 8004144:	3004      	adds	r0, #4

08004146 <LoopFillZerobss>:
 8004146:	4288      	cmp	r0, r1
 8004148:	d3fb      	bcc.n	8004142 <FillZerobss>
 800414a:	4770      	bx	lr

0800414c <Reset_Handler>:
 800414c:	480c      	ldr	r0, [pc, #48]	; (8004180 <LoopForever+0x2>)
 800414e:	4685      	mov	sp, r0
 8004150:	f7ff ff9e 	bl	8004090 <SystemInit>
 8004154:	480b      	ldr	r0, [pc, #44]	; (8004184 <LoopForever+0x6>)
 8004156:	490c      	ldr	r1, [pc, #48]	; (8004188 <LoopForever+0xa>)
 8004158:	4a0c      	ldr	r2, [pc, #48]	; (800418c <LoopForever+0xe>)
 800415a:	2300      	movs	r3, #0
 800415c:	f7ff ffed 	bl	800413a <LoopCopyDataInit>
 8004160:	480b      	ldr	r0, [pc, #44]	; (8004190 <LoopForever+0x12>)
 8004162:	490c      	ldr	r1, [pc, #48]	; (8004194 <LoopForever+0x16>)
 8004164:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <LoopForever+0x1a>)
 8004166:	2300      	movs	r3, #0
 8004168:	f7ff ffe7 	bl	800413a <LoopCopyDataInit>
 800416c:	480b      	ldr	r0, [pc, #44]	; (800419c <LoopForever+0x1e>)
 800416e:	490c      	ldr	r1, [pc, #48]	; (80041a0 <LoopForever+0x22>)
 8004170:	2300      	movs	r3, #0
 8004172:	f7ff ffe8 	bl	8004146 <LoopFillZerobss>
 8004176:	f00a fd95 	bl	800eca4 <__libc_init_array>
 800417a:	f7ff f897 	bl	80032ac <main>

0800417e <LoopForever>:
 800417e:	e7fe      	b.n	800417e <LoopForever>
 8004180:	20030000 	.word	0x20030000
 8004184:	20000008 	.word	0x20000008
 8004188:	200001fc 	.word	0x200001fc
 800418c:	080133ac 	.word	0x080133ac
 8004190:	200301e3 	.word	0x200301e3
 8004194:	200301e3 	.word	0x200301e3
 8004198:	08013e69 	.word	0x08013e69
 800419c:	20000acc 	.word	0x20000acc
 80041a0:	200029c8 	.word	0x200029c8

080041a4 <ADC1_IRQHandler>:
 80041a4:	e7fe      	b.n	80041a4 <ADC1_IRQHandler>
	...

080041a8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6053      	str	r3, [r2, #4]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e0042000 	.word	0xe0042000

080041c8 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	6053      	str	r3, [r2, #4]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e0042000 	.word	0xe0042000

080041e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <HAL_Init+0x3c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <HAL_Init+0x3c>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fe:	2003      	movs	r0, #3
 8004200:	f000 f9c0 	bl	8004584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004204:	2000      	movs	r0, #0
 8004206:	f000 f80f 	bl	8004228 <HAL_InitTick>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	71fb      	strb	r3, [r7, #7]
 8004214:	e001      	b.n	800421a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004216:	f7ff fbdb 	bl	80039d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800421a:	79fb      	ldrb	r3, [r7, #7]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	58004000 	.word	0x58004000

08004228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004234:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_InitTick+0x6c>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d024      	beq.n	8004286 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800423c:	f003 f9da 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_InitTick+0x6c>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f9d6 	bl	8004606 <HAL_SYSTICK_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	d809      	bhi.n	800427a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004266:	2200      	movs	r2, #0
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426e:	f000 f994 	bl	800459a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <HAL_InitTick+0x70>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e007      	b.n	800428a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
 800427e:	e004      	b.n	800428a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	e001      	b.n	800428a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000014 	.word	0x20000014
 8004298:	20000010 	.word	0x20000010

0800429c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_IncTick+0x20>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_IncTick+0x24>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4413      	add	r3, r2
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_IncTick+0x24>)
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000014 	.word	0x20000014
 80042c0:	200016ec 	.word	0x200016ec

080042c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return uwTick;
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_GetTick+0x14>)
 80042ca:	681b      	ldr	r3, [r3, #0]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	200016ec 	.word	0x200016ec

080042dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_GetTickPrio+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000010 	.word	0x20000010

080042f4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_GetTickFreq+0x14>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000014 	.word	0x20000014

0800430c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004310:	f7ff ff4a 	bl	80041a8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800431c:	f7ff ff54 	bl	80041c8 <LL_DBGMCU_EnableDBGStopMode>
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}

08004324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004340:	4013      	ands	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800434c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	60d3      	str	r3, [r2, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <__NVIC_GetPriorityGrouping+0x18>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	f003 0307 	and.w	r3, r3, #7
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db0b      	blt.n	80043b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 021f 	and.w	r2, r3, #31
 80043a0:	4907      	ldr	r1, [pc, #28]	; (80043c0 <__NVIC_EnableIRQ+0x38>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2001      	movs	r0, #1
 80043aa:	fa00 f202 	lsl.w	r2, r0, r2
 80043ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e100 	.word	0xe000e100

080043c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	db12      	blt.n	80043fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	490a      	ldr	r1, [pc, #40]	; (8004408 <__NVIC_DisableIRQ+0x44>)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2001      	movs	r0, #1
 80043e6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ea:	3320      	adds	r3, #32
 80043ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80043f0:	f3bf 8f4f 	dsb	sy
}
 80043f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043f6:	f3bf 8f6f 	isb	sy
}
 80043fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db0c      	blt.n	8004438 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4907      	ldr	r1, [pc, #28]	; (8004444 <__NVIC_SetPendingIRQ+0x38>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2001      	movs	r0, #1
 800442e:	fa00 f202 	lsl.w	r2, r0, r2
 8004432:	3340      	adds	r3, #64	; 0x40
 8004434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	e000e100 	.word	0xe000e100

08004448 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	2b00      	cmp	r3, #0
 8004458:	db0c      	blt.n	8004474 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	f003 021f 	and.w	r2, r3, #31
 8004460:	4907      	ldr	r1, [pc, #28]	; (8004480 <__NVIC_ClearPendingIRQ+0x38>)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2001      	movs	r0, #1
 800446a:	fa00 f202 	lsl.w	r2, r0, r2
 800446e:	3360      	adds	r3, #96	; 0x60
 8004470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000e100 	.word	0xe000e100

08004484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	2b00      	cmp	r3, #0
 8004496:	db0a      	blt.n	80044ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	490c      	ldr	r1, [pc, #48]	; (80044d0 <__NVIC_SetPriority+0x4c>)
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	440b      	add	r3, r1
 80044a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044ac:	e00a      	b.n	80044c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4908      	ldr	r1, [pc, #32]	; (80044d4 <__NVIC_SetPriority+0x50>)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3b04      	subs	r3, #4
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	440b      	add	r3, r1
 80044c2:	761a      	strb	r2, [r3, #24]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000e100 	.word	0xe000e100
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	; 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f1c3 0307 	rsb	r3, r3, #7
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	bf28      	it	cs
 80044f6:	2304      	movcs	r3, #4
 80044f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2b06      	cmp	r3, #6
 8004500:	d902      	bls.n	8004508 <NVIC_EncodePriority+0x30>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3b03      	subs	r3, #3
 8004506:	e000      	b.n	800450a <NVIC_EncodePriority+0x32>
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	401a      	ands	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	43d9      	mvns	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004530:	4313      	orrs	r3, r2
         );
}
 8004532:	4618      	mov	r0, r3
 8004534:	3724      	adds	r7, #36	; 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004550:	d301      	bcc.n	8004556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004552:	2301      	movs	r3, #1
 8004554:	e00f      	b.n	8004576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <SysTick_Config+0x40>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800455e:	210f      	movs	r1, #15
 8004560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004564:	f7ff ff8e 	bl	8004484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <SysTick_Config+0x40>)
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <SysTick_Config+0x40>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010

08004584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fec9 	bl	8004324 <__NVIC_SetPriorityGrouping>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045a8:	f7ff fee0 	bl	800436c <__NVIC_GetPriorityGrouping>
 80045ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	6978      	ldr	r0, [r7, #20]
 80045b4:	f7ff ff90 	bl	80044d8 <NVIC_EncodePriority>
 80045b8:	4602      	mov	r2, r0
 80045ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff5f 	bl	8004484 <__NVIC_SetPriority>
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4603      	mov	r3, r0
 80045d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fed3 	bl	8004388 <__NVIC_EnableIRQ>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fee3 	bl	80043c4 <__NVIC_DisableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ff96 	bl	8004540 <SysTick_Config>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	4603      	mov	r3, r0
 8004626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff feed 	bl	800440c <__NVIC_SetPendingIRQ>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff fefd 	bl	8004448 <__NVIC_ClearPendingIRQ>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e08e      	b.n	8004788 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_DMA_Init+0x138>)
 8004672:	429a      	cmp	r2, r3
 8004674:	d80f      	bhi.n	8004696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <HAL_DMA_Init+0x13c>)
 800467e:	4413      	add	r3, r2
 8004680:	4a45      	ldr	r2, [pc, #276]	; (8004798 <HAL_DMA_Init+0x140>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	009a      	lsls	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_DMA_Init+0x144>)
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
 8004694:	e00e      	b.n	80046b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <HAL_DMA_Init+0x148>)
 800469e:	4413      	add	r3, r2
 80046a0:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <HAL_DMA_Init+0x140>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	009a      	lsls	r2, r3, #2
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <HAL_DMA_Init+0x14c>)
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa74 	bl	8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004714:	d102      	bne.n	800471c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004728:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004732:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d010      	beq.n	800475e <HAL_DMA_Init+0x106>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d80c      	bhi.n	800475e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fa93 	bl	8004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	e008      	b.n	8004770 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40020407 	.word	0x40020407
 8004794:	bffdfff8 	.word	0xbffdfff8
 8004798:	cccccccd 	.word	0xcccccccd
 800479c:	40020000 	.word	0x40020000
 80047a0:	bffdfbf8 	.word	0xbffdfbf8
 80047a4:	40020400 	.word	0x40020400

080047a8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_DMA_Start_IT+0x20>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e066      	b.n	8004896 <HAL_DMA_Start_IT+0xee>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d155      	bne.n	8004888 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f9b9 	bl	8004b78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 020e 	orr.w	r2, r2, #14
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e00f      	b.n	8004840 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0204 	bic.w	r2, r2, #4
 800482e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 020a 	orr.w	r2, r2, #10
 800483e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004874:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e005      	b.n	8004894 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004890:	2302      	movs	r3, #2
 8004892:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e04f      	b.n	8004950 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d008      	beq.n	80048ce <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2204      	movs	r2, #4
 80048c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e040      	b.n	8004950 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 020e 	bic.w	r2, r2, #14
 80048dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	f003 021c 	and.w	r2, r3, #28
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2101      	movs	r1, #1
 800490c:	fa01 f202 	lsl.w	r2, r1, r2
 8004910:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800491a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004932:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800493c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d005      	beq.n	8004980 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2204      	movs	r2, #4
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e047      	b.n	8004a10 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020e 	bic.w	r2, r2, #14
 800498e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f003 021c 	and.w	r2, r3, #28
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f202 	lsl.w	r2, r1, r2
 80049c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
    }
  }
  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f003 031c 	and.w	r3, r3, #28
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d026      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7a>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0204 	bic.w	r2, r2, #4
 8004a6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f003 021c 	and.w	r2, r3, #28
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d071      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a92:	e06c      	b.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	f003 031c 	and.w	r3, r3, #28
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02e      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xec>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d029      	beq.n	8004b06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10b      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 020a 	bic.w	r2, r2, #10
 8004ace:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	f003 021c 	and.w	r2, r3, #28
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d038      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b04:	e033      	b.n	8004b6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f003 031c 	and.w	r3, r3, #28
 8004b0e:	2208      	movs	r2, #8
 8004b10:	409a      	lsls	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02a      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x156>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d025      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 020e 	bic.w	r2, r2, #14
 8004b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	f003 021c 	and.w	r2, r3, #28
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
}
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ba0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f003 021c 	and.w	r2, r3, #28
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d108      	bne.n	8004bd8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bd6:	e007      	b.n	8004be8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b17      	ldr	r3, [pc, #92]	; (8004c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d80a      	bhi.n	8004c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c14:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6493      	str	r3, [r2, #72]	; 0x48
 8004c1c:	e007      	b.n	8004c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	089b      	lsrs	r3, r3, #2
 8004c24:	009a      	lsls	r2, r3, #2
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c28:	4413      	add	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3b08      	subs	r3, #8
 8004c36:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40020407 	.word	0x40020407
 8004c64:	4002081c 	.word	0x4002081c
 8004c68:	cccccccd 	.word	0xcccccccd
 8004c6c:	40020880 	.word	0x40020880

08004c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c80:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004c94:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	1000823f 	.word	0x1000823f
 8004cb8:	40020940 	.word	0x40020940

08004cbc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cca:	e14c      	b.n	8004f66 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 813e 	beq.w	8004f60 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d005      	beq.n	8004cfc <HAL_GPIO_Init+0x40>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d130      	bne.n	8004d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	2203      	movs	r2, #3
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d32:	2201      	movs	r2, #1
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0201 	and.w	r2, r3, #1
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d017      	beq.n	8004d9a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	2203      	movs	r2, #3
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d123      	bne.n	8004dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	6939      	ldr	r1, [r7, #16]
 8004dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2203      	movs	r2, #3
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8098 	beq.w	8004f60 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004e30:	4a54      	ldr	r2, [pc, #336]	; (8004f84 <HAL_GPIO_Init+0x2c8>)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	3302      	adds	r3, #2
 8004e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	220f      	movs	r2, #15
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e5a:	d019      	beq.n	8004e90 <HAL_GPIO_Init+0x1d4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a4a      	ldr	r2, [pc, #296]	; (8004f88 <HAL_GPIO_Init+0x2cc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_GPIO_Init+0x1d0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a49      	ldr	r2, [pc, #292]	; (8004f8c <HAL_GPIO_Init+0x2d0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00d      	beq.n	8004e88 <HAL_GPIO_Init+0x1cc>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a48      	ldr	r2, [pc, #288]	; (8004f90 <HAL_GPIO_Init+0x2d4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <HAL_GPIO_Init+0x1c8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a47      	ldr	r2, [pc, #284]	; (8004f94 <HAL_GPIO_Init+0x2d8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d101      	bne.n	8004e80 <HAL_GPIO_Init+0x1c4>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	e008      	b.n	8004e92 <HAL_GPIO_Init+0x1d6>
 8004e80:	2307      	movs	r3, #7
 8004e82:	e006      	b.n	8004e92 <HAL_GPIO_Init+0x1d6>
 8004e84:	2303      	movs	r3, #3
 8004e86:	e004      	b.n	8004e92 <HAL_GPIO_Init+0x1d6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e002      	b.n	8004e92 <HAL_GPIO_Init+0x1d6>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_GPIO_Init+0x1d6>
 8004e90:	2300      	movs	r3, #0
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	f002 0203 	and.w	r2, r2, #3
 8004e98:	0092      	lsls	r2, r2, #2
 8004e9a:	4093      	lsls	r3, r2
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ea2:	4938      	ldr	r1, [pc, #224]	; (8004f84 <HAL_GPIO_Init+0x2c8>)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eb0:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ed4:	4a30      	ldr	r2, [pc, #192]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004efe:	4a26      	ldr	r2, [pc, #152]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004f32:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f58:	4a0f      	ldr	r2, [pc, #60]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3301      	adds	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f47f aeab 	bne.w	8004ccc <HAL_GPIO_Init+0x10>
  }
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40010000 	.word	0x40010000
 8004f88:	48000400 	.word	0x48000400
 8004f8c:	48000800 	.word	0x48000800
 8004f90:	48000c00 	.word	0x48000c00
 8004f94:	48001000 	.word	0x48001000
 8004f98:	58000800 	.word	0x58000800

08004f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	807b      	strh	r3, [r7, #2]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fac:	787b      	ldrb	r3, [r7, #1]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fb8:	e002      	b.n	8004fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_HSEM_IRQHandler+0x30>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <HAL_HSEM_IRQHandler+0x30>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	4906      	ldr	r1, [pc, #24]	; (8004ffc <HAL_HSEM_IRQHandler+0x30>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004fe6:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <HAL_HSEM_IRQHandler+0x30>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f807 	bl	8005000 <HAL_HSEM_FreeCallback>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	58001500 	.word	0x58001500

08005000 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e081      	b.n	800512a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fe fcd8 	bl	80039f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	; 0x24
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d107      	bne.n	800508e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	e006      	b.n	800509c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800509a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d104      	bne.n	80050ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69d9      	ldr	r1, [r3, #28]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	4603      	mov	r3, r0
 8005144:	817b      	strh	r3, [r7, #10]
 8005146:	460b      	mov	r3, r1
 8005148:	813b      	strh	r3, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b20      	cmp	r3, #32
 8005158:	f040 80f9 	bne.w	800534e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_I2C_Mem_Write+0x34>
 8005162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0ed      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_I2C_Mem_Write+0x4e>
 800517e:	2302      	movs	r3, #2
 8005180:	e0e6      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800518a:	f7ff f89b 	bl	80042c4 <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2319      	movs	r3, #25
 8005196:	2201      	movs	r2, #1
 8005198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fadd 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0d1      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2221      	movs	r2, #33	; 0x21
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2240      	movs	r2, #64	; 0x40
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051d4:	88f8      	ldrh	r0, [r7, #6]
 80051d6:	893a      	ldrh	r2, [r7, #8]
 80051d8:	8979      	ldrh	r1, [r7, #10]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4603      	mov	r3, r0
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f9ed 	bl	80055c4 <I2C_RequestMemoryWrite>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0a9      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	2bff      	cmp	r3, #255	; 0xff
 8005204:	d90e      	bls.n	8005224 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	22ff      	movs	r2, #255	; 0xff
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	b2da      	uxtb	r2, r3
 8005212:	8979      	ldrh	r1, [r7, #10]
 8005214:	2300      	movs	r3, #0
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fc57 	bl	8005ad0 <I2C_TransferConfig>
 8005222:	e00f      	b.n	8005244 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	b2da      	uxtb	r2, r3
 8005234:	8979      	ldrh	r1, [r7, #10]
 8005236:	2300      	movs	r3, #0
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fc46 	bl	8005ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fad6 	bl	80057fa <I2C_WaitOnTXISFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e07b      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d034      	beq.n	80052fc <HAL_I2C_Mem_Write+0x1c8>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d130      	bne.n	80052fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fa59 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e04d      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2bff      	cmp	r3, #255	; 0xff
 80052bc:	d90e      	bls.n	80052dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	2300      	movs	r3, #0
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fbfb 	bl	8005ad0 <I2C_TransferConfig>
 80052da:	e00f      	b.n	80052fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	2300      	movs	r3, #0
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fbea 	bl	8005ad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d19e      	bne.n	8005244 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fabc 	bl	8005888 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e01a      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2220      	movs	r2, #32
 8005320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <HAL_I2C_Mem_Write+0x224>)
 800532e:	400b      	ands	r3, r1
 8005330:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	fe00e800 	.word	0xfe00e800

0800535c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	4608      	mov	r0, r1
 8005366:	4611      	mov	r1, r2
 8005368:	461a      	mov	r2, r3
 800536a:	4603      	mov	r3, r0
 800536c:	817b      	strh	r3, [r7, #10]
 800536e:	460b      	mov	r3, r1
 8005370:	813b      	strh	r3, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b20      	cmp	r3, #32
 8005380:	f040 80fd 	bne.w	800557e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_I2C_Mem_Read+0x34>
 800538a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005396:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0f1      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_I2C_Mem_Read+0x4e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e0ea      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053b2:	f7fe ff87 	bl	80042c4 <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2319      	movs	r3, #25
 80053be:	2201      	movs	r2, #1
 80053c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f9c9 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0d5      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2222      	movs	r2, #34	; 0x22
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2240      	movs	r2, #64	; 0x40
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053fc:	88f8      	ldrh	r0, [r7, #6]
 80053fe:	893a      	ldrh	r2, [r7, #8]
 8005400:	8979      	ldrh	r1, [r7, #10]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	4603      	mov	r3, r0
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f92d 	bl	800566c <I2C_RequestMemoryRead>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0ad      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2bff      	cmp	r3, #255	; 0xff
 800542c:	d90e      	bls.n	800544c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	b2da      	uxtb	r2, r3
 800543a:	8979      	ldrh	r1, [r7, #10]
 800543c:	4b52      	ldr	r3, [pc, #328]	; (8005588 <HAL_I2C_Mem_Read+0x22c>)
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fb43 	bl	8005ad0 <I2C_TransferConfig>
 800544a:	e00f      	b.n	800546c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	b2da      	uxtb	r2, r3
 800545c:	8979      	ldrh	r1, [r7, #10]
 800545e:	4b4a      	ldr	r3, [pc, #296]	; (8005588 <HAL_I2C_Mem_Read+0x22c>)
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fb32 	bl	8005ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	2200      	movs	r2, #0
 8005474:	2104      	movs	r1, #4
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f970 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e07c      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d034      	beq.n	800552c <HAL_I2C_Mem_Read+0x1d0>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d130      	bne.n	800552c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	2200      	movs	r2, #0
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f941 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04d      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2bff      	cmp	r3, #255	; 0xff
 80054ec:	d90e      	bls.n	800550c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	8979      	ldrh	r1, [r7, #10]
 80054fc:	2300      	movs	r3, #0
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 fae3 	bl	8005ad0 <I2C_TransferConfig>
 800550a:	e00f      	b.n	800552c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	b2da      	uxtb	r2, r3
 800551c:	8979      	ldrh	r1, [r7, #10]
 800551e:	2300      	movs	r3, #0
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fad2 	bl	8005ad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d19a      	bne.n	800546c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f9a4 	bl	8005888 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e01a      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2220      	movs	r2, #32
 8005550:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6859      	ldr	r1, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_I2C_Mem_Read+0x230>)
 800555e:	400b      	ands	r3, r1
 8005560:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	80002400 	.word	0x80002400
 800558c:	fe00e800 	.word	0xfe00e800

08005590 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
  }
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	4608      	mov	r0, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	461a      	mov	r2, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	817b      	strh	r3, [r7, #10]
 80055d6:	460b      	mov	r3, r1
 80055d8:	813b      	strh	r3, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	8979      	ldrh	r1, [r7, #10]
 80055e4:	4b20      	ldr	r3, [pc, #128]	; (8005668 <I2C_RequestMemoryWrite+0xa4>)
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fa6f 	bl	8005ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f8ff 	bl	80057fa <I2C_WaitOnTXISFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e02c      	b.n	8005660 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d105      	bne.n	8005618 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800560c:	893b      	ldrh	r3, [r7, #8]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	629a      	str	r2, [r3, #40]	; 0x28
 8005616:	e015      	b.n	8005644 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005618:	893b      	ldrh	r3, [r7, #8]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	b29b      	uxth	r3, r3
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8e5 	bl	80057fa <I2C_WaitOnTXISFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e012      	b.n	8005660 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800563a:	893b      	ldrh	r3, [r7, #8]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2200      	movs	r2, #0
 800564c:	2180      	movs	r1, #128	; 0x80
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f884 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	80002000 	.word	0x80002000

0800566c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	4608      	mov	r0, r1
 8005676:	4611      	mov	r1, r2
 8005678:	461a      	mov	r2, r3
 800567a:	4603      	mov	r3, r0
 800567c:	817b      	strh	r3, [r7, #10]
 800567e:	460b      	mov	r3, r1
 8005680:	813b      	strh	r3, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	8979      	ldrh	r1, [r7, #10]
 800568c:	4b20      	ldr	r3, [pc, #128]	; (8005710 <I2C_RequestMemoryRead+0xa4>)
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	2300      	movs	r3, #0
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fa1c 	bl	8005ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	69b9      	ldr	r1, [r7, #24]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f8ac 	bl	80057fa <I2C_WaitOnTXISFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e02c      	b.n	8005706 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d105      	bne.n	80056be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b2:	893b      	ldrh	r3, [r7, #8]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
 80056bc:	e015      	b.n	80056ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056be:	893b      	ldrh	r3, [r7, #8]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	69b9      	ldr	r1, [r7, #24]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f892 	bl	80057fa <I2C_WaitOnTXISFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e012      	b.n	8005706 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056e0:	893b      	ldrh	r3, [r7, #8]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2140      	movs	r1, #64	; 0x40
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f831 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	80002000 	.word	0x80002000

08005714 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d103      	bne.n	8005732 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d007      	beq.n	8005750 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	619a      	str	r2, [r3, #24]
  }
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576c:	e031      	b.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005774:	d02d      	beq.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fe fda5 	bl	80042c4 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d122      	bne.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4013      	ands	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d113      	bne.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e00f      	b.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699a      	ldr	r2, [r3, #24]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d0be      	beq.n	800576e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005806:	e033      	b.n	8005870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f87f 	bl	8005910 <I2C_IsErrorOccurred>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e031      	b.n	8005880 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005822:	d025      	beq.n	8005870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fe fd4e 	bl	80042c4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11a      	bne.n	8005870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d013      	beq.n	8005870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e007      	b.n	8005880 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b02      	cmp	r3, #2
 800587c:	d1c4      	bne.n	8005808 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005894:	e02f      	b.n	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f838 	bl	8005910 <I2C_IsErrorOccurred>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02d      	b.n	8005906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fe fd0b 	bl	80042c4 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11a      	bne.n	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d013      	beq.n	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e007      	b.n	8005906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b20      	cmp	r3, #32
 8005902:	d1c8      	bne.n	8005896 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d068      	beq.n	8005a0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2210      	movs	r2, #16
 8005942:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005944:	e049      	b.n	80059da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594c:	d045      	beq.n	80059da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fe fcb9 	bl	80042c4 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <I2C_IsErrorOccurred+0x54>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d13a      	bne.n	80059da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005976:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005986:	d121      	bne.n	80059cc <I2C_IsErrorOccurred+0xbc>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800598e:	d01d      	beq.n	80059cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	2b20      	cmp	r3, #32
 8005994:	d01a      	beq.n	80059cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059a6:	f7fe fc8d 	bl	80042c4 <HAL_GetTick>
 80059aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ac:	e00e      	b.n	80059cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059ae:	f7fe fc89 	bl	80042c4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b19      	cmp	r3, #25
 80059ba:	d907      	bls.n	80059cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	f043 0320 	orr.w	r3, r3, #32
 80059c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80059ca:	e006      	b.n	80059da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d1e9      	bne.n	80059ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d003      	beq.n	80059f0 <I2C_IsErrorOccurred+0xe0>
 80059e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0aa      	beq.n	8005946 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2220      	movs	r2, #32
 80059fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	f043 0304 	orr.w	r3, r3, #4
 8005a06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	f043 0308 	orr.w	r3, r3, #8
 8005a48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00b      	beq.n	8005a7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	f043 0302 	orr.w	r3, r3, #2
 8005a6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff fe45 	bl	8005714 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <I2C_IsErrorOccurred+0x1bc>)
 8005a96:	400b      	ands	r3, r1
 8005a98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3728      	adds	r7, #40	; 0x28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	fe00e800 	.word	0xfe00e800

08005ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	817b      	strh	r3, [r7, #10]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ae8:	7a7b      	ldrb	r3, [r7, #9]
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005af0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005afe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	0d5b      	lsrs	r3, r3, #21
 8005b0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <I2C_TransferConfig+0x60>)
 8005b10:	430b      	orrs	r3, r1
 8005b12:	43db      	mvns	r3, r3
 8005b14:	ea02 0103 	and.w	r1, r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	03ff63ff 	.word	0x03ff63ff

08005b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d138      	bne.n	8005bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e032      	b.n	8005bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d139      	bne.n	8005c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e033      	b.n	8005c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2224      	movs	r2, #36	; 0x24
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01e      	beq.n	8005cb4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_IPCC_Init+0x60>)
 8005c78:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fd ff02 	bl	8003a90 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005c8c:	68b8      	ldr	r0, [r7, #8]
 8005c8e:	f000 f85b 	bl	8005d48 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f82c 	bl	8005cfc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005cb2:	e001      	b.n	8005cb8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	58000c00 	.word	0x58000c00

08005cc8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	4613      	mov	r3, r2
 8005cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e00f      	b.n	8005d2a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <IPCC_SetDefaultCallbacks+0x44>)
 8005d14:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3306      	adds	r3, #6
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	4a08      	ldr	r2, [pc, #32]	; (8005d44 <IPCC_SetDefaultCallbacks+0x48>)
 8005d22:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d9ec      	bls.n	8005d0a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	08005cc9 	.word	0x08005cc9
 8005d44:	08005ce3 	.word	0x08005ce3

08005d48 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	223f      	movs	r2, #63	; 0x3f
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <LL_RCC_SetLPTIMClockSource>:
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0c1b      	lsrs	r3, r3, #16
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	43db      	mvns	r3, r3
 8005d88:	401a      	ands	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <LL_RCC_GetLPTIMClockSource>:
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8005dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4013      	ands	r3, r2
 8005db8:	0c1a      	lsrs	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4313      	orrs	r3, r2
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_APB1_GRP1_ForceReset>:
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_APB1_GRP2_ForceReset>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8005df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <LL_APB1_GRP1_ReleaseReset>:
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e28:	4013      	ands	r3, r2
 8005e2a:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_APB1_GRP2_ReleaseReset>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4e:	4013      	ands	r3, r2
 8005e50:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e08f      	b.n	8005f92 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fd fe23 	bl	8003ad8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d004      	beq.n	8005eb4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eb2:	d103      	bne.n	8005ebc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 031e 	bic.w	r3, r3, #30
 8005eba:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d005      	beq.n	8005ed4 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005ece:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4b31      	ldr	r3, [pc, #196]	; (8005f9c <HAL_LPTIM_Init+0x13c>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005ee4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005eea:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005ef0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8005ef6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d107      	bne.n	8005f16 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d004      	beq.n	8005f28 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f26:	d107      	bne.n	8005f38 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005f30:	4313      	orrs	r3, r2
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00a      	beq.n	8005f5a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005f4c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005f52:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a0e      	ldr	r2, [pc, #56]	; (8005fa0 <HAL_LPTIM_Init+0x140>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	621a      	str	r2, [r3, #32]
 8005f7c:	e004      	b.n	8005f88 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f86:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	ff19f1fe 	.word	0xff19f1fe
 8005fa0:	40007c00 	.word	0x40007c00

08005fa4 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d108      	bne.n	8005fd4 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8005fc2:	4b38      	ldr	r3, [pc, #224]	; (80060a4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	4a36      	ldr	r2, [pc, #216]	; (80060a4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005fd2:	e007      	b.n	8005fe4 <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8005fd4:	4b33      	ldr	r3, [pc, #204]	; (80060a4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fda:	4a32      	ldr	r2, [pc, #200]	; (80060a4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2210      	movs	r2, #16
 800600a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006014:	2110      	movs	r1, #16
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f92c 	bl	8006274 <LPTIM_WaitForFlag>
 800601c:	4603      	mov	r3, r0
 800601e:	2b03      	cmp	r3, #3
 8006020:	d101      	bne.n	8006026 <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e038      	b.n	8006098 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2208      	movs	r2, #8
 800602c:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006036:	2108      	movs	r1, #8
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f91b 	bl	8006274 <LPTIM_WaitForFlag>
 800603e:	4603      	mov	r3, r0
 8006040:	2b03      	cmp	r3, #3
 8006042:	d101      	bne.n	8006048 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e027      	b.n	8006098 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f943 	bl	80062d4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f901 	bl	8006256 <HAL_LPTIM_GetState>
 8006054:	4603      	mov	r3, r0
 8006056:	2b03      	cmp	r3, #3
 8006058:	d101      	bne.n	800605e <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e01c      	b.n	8006098 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0201 	orr.w	r2, r2, #1
 800606c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0204 	orr.w	r2, r2, #4
 800608c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40007c00 	.word	0x40007c00
 80060a4:	58000800 	.word	0x58000800

080060a8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d10d      	bne.n	80060da <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d106      	bne.n	80060da <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2201      	movs	r2, #1
 80060d2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fd fbf1 	bl	80038bc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d10d      	bne.n	8006104 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d106      	bne.n	8006104 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2202      	movs	r2, #2
 80060fc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f86d 	bl	80061de <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b04      	cmp	r3, #4
 8006110:	d10d      	bne.n	800612e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b04      	cmp	r3, #4
 800611e:	d106      	bne.n	800612e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2204      	movs	r2, #4
 8006126:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f862 	bl	80061f2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b08      	cmp	r3, #8
 800613a:	d10d      	bne.n	8006158 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b08      	cmp	r3, #8
 8006148:	d106      	bne.n	8006158 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2208      	movs	r2, #8
 8006150:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f857 	bl	8006206 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b10      	cmp	r3, #16
 8006164:	d10d      	bne.n	8006182 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b10      	cmp	r3, #16
 8006172:	d106      	bne.n	8006182 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2210      	movs	r2, #16
 800617a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f84c 	bl	800621a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b20      	cmp	r3, #32
 800618e:	d10d      	bne.n	80061ac <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b20      	cmp	r3, #32
 800619c:	d106      	bne.n	80061ac <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2220      	movs	r2, #32
 80061a4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f841 	bl	800622e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d10d      	bne.n	80061d6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d106      	bne.n	80061d6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2240      	movs	r2, #64	; 0x40
 80061ce:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f836 	bl	8006242 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006264:	b2db      	uxtb	r3, r3
}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <LPTIM_WaitForFlag+0x58>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <LPTIM_WaitForFlag+0x5c>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	0b9b      	lsrs	r3, r3, #14
 800628e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3b01      	subs	r3, #1
 800629c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	4013      	ands	r3, r2
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d002      	beq.n	80062be <LPTIM_WaitForFlag+0x4a>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1ec      	bne.n	8006298 <LPTIM_WaitForFlag+0x24>

  return result;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	2000000c 	.word	0x2000000c
 80062d0:	d1b71759 	.word	0xd1b71759

080062d4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	; 0x30
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e0:	f3ef 8310 	mrs	r3, PRIMASK
 80062e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80062e6:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80062e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ea:	2301      	movs	r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a62      	ldr	r2, [pc, #392]	; (8006484 <LPTIM_Disable+0x1b0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <LPTIM_Disable+0x34>
 8006300:	4a61      	ldr	r2, [pc, #388]	; (8006488 <LPTIM_Disable+0x1b4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d006      	beq.n	8006314 <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006306:	e00b      	b.n	8006320 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006308:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800630c:	f7ff fd4a 	bl	8005da4 <LL_RCC_GetLPTIMClockSource>
 8006310:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8006312:	e005      	b.n	8006320 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006314:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006318:	f7ff fd44 	bl	8005da4 <LL_RCC_GetLPTIMClockSource>
 800631c:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 800631e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a4d      	ldr	r2, [pc, #308]	; (8006484 <LPTIM_Disable+0x1b0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d003      	beq.n	800635a <LPTIM_Disable+0x86>
 8006352:	4a4d      	ldr	r2, [pc, #308]	; (8006488 <LPTIM_Disable+0x1b4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8006358:	e00f      	b.n	800637a <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800635a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800635e:	f7ff fd34 	bl	8005dca <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8006362:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006366:	f7ff fd54 	bl	8005e12 <LL_APB1_GRP1_ReleaseReset>
      break;
 800636a:	e006      	b.n	800637a <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800636c:	2020      	movs	r0, #32
 800636e:	f7ff fd3e 	bl	8005dee <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8006372:	2020      	movs	r0, #32
 8006374:	f7ff fd60 	bl	8005e38 <LL_APB1_GRP2_ReleaseReset>
      break;
 8006378:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <LPTIM_Disable+0xb2>
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d05f      	beq.n	8006446 <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a3e      	ldr	r2, [pc, #248]	; (8006484 <LPTIM_Disable+0x1b0>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <LPTIM_Disable+0xc4>
 8006390:	4a3d      	ldr	r2, [pc, #244]	; (8006488 <LPTIM_Disable+0x1b4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d005      	beq.n	80063a2 <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006396:	e009      	b.n	80063ac <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8006398:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800639c:	f7ff fce8 	bl	8005d70 <LL_RCC_SetLPTIMClockSource>
        break;
 80063a0:	e004      	b.n	80063ac <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80063a2:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80063a6:	f7ff fce3 	bl	8005d70 <LL_RCC_SetLPTIMClockSource>
        break;
 80063aa:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01a      	beq.n	80063e8 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80063ca:	2108      	movs	r1, #8
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ff51 	bl	8006274 <LPTIM_WaitForFlag>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d103      	bne.n	80063e0 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2203      	movs	r2, #3
 80063dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2208      	movs	r2, #8
 80063e6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01a      	beq.n	8006424 <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8006406:	2110      	movs	r1, #16
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff ff33 	bl	8006274 <LPTIM_WaitForFlag>
 800640e:	4603      	mov	r3, r0
 8006410:	2b03      	cmp	r3, #3
 8006412:	d103      	bne.n	800641c <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2203      	movs	r2, #3
 8006418:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2210      	movs	r2, #16
 8006422:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a16      	ldr	r2, [pc, #88]	; (8006484 <LPTIM_Disable+0x1b0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <LPTIM_Disable+0x162>
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <LPTIM_Disable+0x1b4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8006434:	e008      	b.n	8006448 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8006436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006438:	f7ff fc9a 	bl	8005d70 <LL_RCC_SetLPTIMClockSource>
        break;
 800643c:	e004      	b.n	8006448 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800643e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006440:	f7ff fc96 	bl	8005d70 <LL_RCC_SetLPTIMClockSource>
        break;
 8006444:	e000      	b.n	8006448 <LPTIM_Disable+0x174>
    }
  }
 8006446:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	621a      	str	r2, [r3, #32]
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f383 8810 	msr	PRIMASK, r3
}
 800647a:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800647c:	bf00      	nop
 800647e:	3730      	adds	r7, #48	; 0x30
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40007c00 	.word	0x40007c00
 8006488:	40009400 	.word	0x40009400

0800648c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	58000400 	.word	0x58000400

080064ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	58000400 	.word	0x58000400

080064c8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80064cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064da:	d101      	bne.n	80064e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <LL_RCC_HSE_Enable>:
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80064f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_RCC_HSE_Disable>:
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800650e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651c:	6013      	str	r3, [r2, #0]
}
 800651e:	bf00      	nop
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_RCC_HSE_IsReady>:
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800653a:	d101      	bne.n	8006540 <LL_RCC_HSE_IsReady+0x18>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <LL_RCC_HSE_IsReady+0x1a>
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <LL_RCC_HSI_Enable>:
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655e:	6013      	str	r3, [r2, #0]
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <LL_RCC_HSI_Disable>:
{
 800656a:	b480      	push	{r7}
 800656c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657c:	6013      	str	r3, [r2, #0]
}
 800657e:	bf00      	nop
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <LL_RCC_HSI_IsReady>:
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659a:	d101      	bne.n	80065a0 <LL_RCC_HSI_IsReady+0x18>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <LL_RCC_HSI_IsReady+0x1a>
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065c6:	4313      	orrs	r3, r2
 80065c8:	604b      	str	r3, [r1, #4]
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <LL_RCC_HSI48_Enable>:
{
 80065d6:	b480      	push	{r7}
 80065d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80065ee:	bf00      	nop
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <LL_RCC_HSI48_Disable>:
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80065fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_RCC_HSI48_IsReady>:
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800661e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d101      	bne.n	8006632 <LL_RCC_HSI48_IsReady+0x18>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <LL_RCC_HSI48_IsReady+0x1a>
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <LL_RCC_LSE_Enable>:
{
 800663e:	b480      	push	{r7}
 8006640:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LL_RCC_LSE_Disable>:
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <LL_RCC_LSE_EnableBypass>:
{
 8006682:	b480      	push	{r7}
 8006684:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006692:	f043 0304 	orr.w	r3, r3, #4
 8006696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800669a:	bf00      	nop
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <LL_RCC_LSE_DisableBypass>:
{
 80066a4:	b480      	push	{r7}
 80066a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80066bc:	bf00      	nop
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <LL_RCC_LSE_IsReady>:
{
 80066c6:	b480      	push	{r7}
 80066c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d101      	bne.n	80066de <LL_RCC_LSE_IsReady+0x18>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <LL_RCC_LSE_IsReady+0x1a>
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <LL_RCC_LSI1_Enable>:
{
 80066ea:	b480      	push	{r7}
 80066ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006702:	bf00      	nop
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <LL_RCC_LSI1_Disable>:
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_RCC_LSI1_IsReady>:
{
 800672e:	b480      	push	{r7}
 8006730:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d101      	bne.n	8006746 <LL_RCC_LSI1_IsReady+0x18>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <LL_RCC_LSI1_IsReady+0x1a>
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <LL_RCC_LSI2_Enable>:
{
 8006752:	b480      	push	{r7}
 8006754:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800675a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800675e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006762:	f043 0304 	orr.w	r3, r3, #4
 8006766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800676a:	bf00      	nop
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_RCC_LSI2_Disable>:
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800678c:	bf00      	nop
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <LL_RCC_LSI2_IsReady>:
{
 8006796:	b480      	push	{r7}
 8006798:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800679a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800679e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d101      	bne.n	80067ae <LL_RCC_LSI2_IsReady+0x18>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <LL_RCC_LSI2_IsReady+0x1a>
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <LL_RCC_LSI2_SetTrimming>:
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067d6:	4313      	orrs	r3, r2
 80067d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <LL_RCC_MSI_Enable>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80067ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067f6:	f043 0301 	orr.w	r3, r3, #1
 80067fa:	6013      	str	r3, [r2, #0]
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <LL_RCC_MSI_Disable>:
{
 8006806:	b480      	push	{r7}
 8006808:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	6013      	str	r3, [r2, #0]
}
 800681a:	bf00      	nop
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <LL_RCC_MSI_IsReady>:
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b02      	cmp	r3, #2
 8006834:	d101      	bne.n	800683a <LL_RCC_MSI_IsReady+0x16>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <LL_RCC_MSI_IsReady+0x18>
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <LL_RCC_MSI_SetRange>:
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <LL_RCC_MSI_GetRange>:
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800687e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2bb0      	cmp	r3, #176	; 0xb0
 8006884:	d901      	bls.n	800688a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006886:	23b0      	movs	r3, #176	; 0xb0
 8006888:	607b      	str	r3, [r7, #4]
  return msiRange;
 800688a:	687b      	ldr	r3, [r7, #4]
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80068a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068b2:	4313      	orrs	r3, r2
 80068b4:	604b      	str	r3, [r1, #4]
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <LL_RCC_SetSysClkSource>:
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80068ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f023 0203 	bic.w	r2, r3, #3
 80068d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <LL_RCC_GetSysClkSource>:
{
 80068ea:	b480      	push	{r7}
 80068ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 030c 	and.w	r3, r3, #12
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <LL_RCC_SetAHBPrescaler>:
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800690a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <LL_C2_RCC_SetAHBPrescaler>:
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800693a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800693e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4313      	orrs	r3, r2
 8006946:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_RCC_SetAHB4Prescaler>:
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006966:	f023 020f 	bic.w	r2, r3, #15
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <LL_RCC_SetAPB1Prescaler>:
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800698c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4313      	orrs	r3, r2
 800699e:	608b      	str	r3, [r1, #8]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <LL_RCC_SetAPB2Prescaler>:
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	608b      	str	r3, [r1, #8]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <LL_RCC_GetAHBPrescaler>:
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_RCC_GetAHB4Prescaler>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <LL_RCC_GetAPB1Prescaler>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_RCC_GetAPB2Prescaler>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <LL_RCC_PLL_Enable>:
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4a:	6013      	str	r3, [r2, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <LL_RCC_PLL_Disable>:
{
 8006a56:	b480      	push	{r7}
 8006a58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a68:	6013      	str	r3, [r2, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <LL_RCC_PLL_IsReady>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a86:	d101      	bne.n	8006a8c <LL_RCC_PLL_IsReady+0x18>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <LL_RCC_PLL_IsReady+0x1a>
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <LL_RCC_PLL_GetN>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <LL_RCC_PLL_GetR>:
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <LL_RCC_PLL_GetDivider>:
{
 8006aca:	b480      	push	{r7}
 8006acc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <LL_RCC_PLL_GetMainSource>:
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0303 	and.w	r3, r3, #3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_RCC_IsActiveFlag_HPRE>:
{
 8006afa:	b480      	push	{r7}
 8006afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d101      	bne.n	8006b12 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b32:	d101      	bne.n	8006b38 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d101      	bne.n	8006b5e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b7c:	d101      	bne.n	8006b82 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba0:	d101      	bne.n	8006ba6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b08d      	sub	sp, #52	; 0x34
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e363      	b.n	800728e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 808d 	beq.w	8006cee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd4:	f7ff fe89 	bl	80068ea <LL_RCC_GetSysClkSource>
 8006bd8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006bda:	f7ff ff82 	bl	8006ae2 <LL_RCC_PLL_GetMainSource>
 8006bde:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x3e>
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	2b0c      	cmp	r3, #12
 8006bea:	d147      	bne.n	8006c7c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d144      	bne.n	8006c7c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e347      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006c02:	f7ff fe34 	bl	800686e <LL_RCC_MSI_GetRange>
 8006c06:	4603      	mov	r3, r0
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	d914      	bls.n	8006c36 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fd2f 	bl	8007674 <RCC_SetFlashLatencyFromMSIRange>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e336      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fe0e 	bl	8006846 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fe32 	bl	8006898 <LL_RCC_MSI_SetCalibTrimming>
 8006c34:	e013      	b.n	8006c5e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fe03 	bl	8006846 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fe27 	bl	8006898 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fd10 	bl	8007674 <RCC_SetFlashLatencyFromMSIRange>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e317      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006c5e:	f000 fcc9 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4aa4      	ldr	r2, [pc, #656]	; (8006ef8 <HAL_RCC_OscConfig+0x344>)
 8006c66:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c68:	4ba4      	ldr	r3, [pc, #656]	; (8006efc <HAL_RCC_OscConfig+0x348>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fd fadb 	bl	8004228 <HAL_InitTick>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d039      	beq.n	8006cec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e308      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01e      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c84:	f7ff fdb0 	bl	80067e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c88:	f7fd fb1c 	bl	80042c4 <HAL_GetTick>
 8006c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c90:	f7fd fb18 	bl	80042c4 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e2f5      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ca2:	f7ff fdbf 	bl	8006824 <LL_RCC_MSI_IsReady>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f1      	beq.n	8006c90 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fdc8 	bl	8006846 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fdec 	bl	8006898 <LL_RCC_MSI_SetCalibTrimming>
 8006cc0:	e015      	b.n	8006cee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cc2:	f7ff fda0 	bl	8006806 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cc6:	f7fd fafd 	bl	80042c4 <HAL_GetTick>
 8006cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006cce:	f7fd faf9 	bl	80042c4 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e2d6      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006ce0:	f7ff fda0 	bl	8006824 <LL_RCC_MSI_IsReady>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f1      	bne.n	8006cce <HAL_RCC_OscConfig+0x11a>
 8006cea:	e000      	b.n	8006cee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006cec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d047      	beq.n	8006d8a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfa:	f7ff fdf6 	bl	80068ea <LL_RCC_GetSysClkSource>
 8006cfe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d00:	f7ff feef 	bl	8006ae2 <LL_RCC_PLL_GetMainSource>
 8006d04:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_OscConfig+0x164>
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d108      	bne.n	8006d24 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d105      	bne.n	8006d24 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d134      	bne.n	8006d8a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e2b4      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2c:	d102      	bne.n	8006d34 <HAL_RCC_OscConfig+0x180>
 8006d2e:	f7ff fbdd 	bl	80064ec <LL_RCC_HSE_Enable>
 8006d32:	e001      	b.n	8006d38 <HAL_RCC_OscConfig+0x184>
 8006d34:	f7ff fbe9 	bl	800650a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d40:	f7fd fac0 	bl	80042c4 <HAL_GetTick>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d48:	f7fd fabc 	bl	80042c4 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b64      	cmp	r3, #100	; 0x64
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e299      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006d5a:	f7ff fbe5 	bl	8006528 <LL_RCC_HSE_IsReady>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f1      	beq.n	8006d48 <HAL_RCC_OscConfig+0x194>
 8006d64:	e011      	b.n	8006d8a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d66:	f7fd faad 	bl	80042c4 <HAL_GetTick>
 8006d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d6e:	f7fd faa9 	bl	80042c4 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b64      	cmp	r3, #100	; 0x64
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e286      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006d80:	f7ff fbd2 	bl	8006528 <LL_RCC_HSE_IsReady>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f1      	bne.n	8006d6e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d04c      	beq.n	8006e30 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d96:	f7ff fda8 	bl	80068ea <LL_RCC_GetSysClkSource>
 8006d9a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d9c:	f7ff fea1 	bl	8006ae2 <LL_RCC_PLL_GetMainSource>
 8006da0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d005      	beq.n	8006db4 <HAL_RCC_OscConfig+0x200>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b0c      	cmp	r3, #12
 8006dac:	d10e      	bne.n	8006dcc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d10b      	bne.n	8006dcc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e266      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff fbf1 	bl	80065ac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006dca:	e031      	b.n	8006e30 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d019      	beq.n	8006e08 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dd4:	f7ff fbba 	bl	800654c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fd fa74 	bl	80042c4 <HAL_GetTick>
 8006ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de0:	f7fd fa70 	bl	80042c4 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e24d      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006df2:	f7ff fbc9 	bl	8006588 <LL_RCC_HSI_IsReady>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f1      	beq.n	8006de0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fbd3 	bl	80065ac <LL_RCC_HSI_SetCalibTrimming>
 8006e06:	e013      	b.n	8006e30 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e08:	f7ff fbaf 	bl	800656a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fd fa5a 	bl	80042c4 <HAL_GetTick>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e14:	f7fd fa56 	bl	80042c4 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e233      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e26:	f7ff fbaf 	bl	8006588 <LL_RCC_HSI_IsReady>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f1      	bne.n	8006e14 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80a3 	beq.w	8006f90 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d076      	beq.n	8006f40 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d046      	beq.n	8006eec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006e5e:	f7ff fc66 	bl	800672e <LL_RCC_LSI1_IsReady>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d113      	bne.n	8006e90 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006e68:	f7ff fc3f 	bl	80066ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e6c:	f7fd fa2a 	bl	80042c4 <HAL_GetTick>
 8006e70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e74:	f7fd fa26 	bl	80042c4 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e203      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006e86:	f7ff fc52 	bl	800672e <LL_RCC_LSI1_IsReady>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0f1      	beq.n	8006e74 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006e90:	f7ff fc5f 	bl	8006752 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fd fa16 	bl	80042c4 <HAL_GetTick>
 8006e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e9c:	f7fd fa12 	bl	80042c4 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e1ef      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006eae:	f7ff fc72 	bl	8006796 <LL_RCC_LSI2_IsReady>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f1      	beq.n	8006e9c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff fc7c 	bl	80067ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006ec2:	f7ff fc23 	bl	800670c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec6:	f7fd f9fd 	bl	80042c4 <HAL_GetTick>
 8006eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ece:	f7fd f9f9 	bl	80042c4 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e1d6      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006ee0:	f7ff fc25 	bl	800672e <LL_RCC_LSI1_IsReady>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f1      	bne.n	8006ece <HAL_RCC_OscConfig+0x31a>
 8006eea:	e051      	b.n	8006f90 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006eec:	f7ff fbfd 	bl	80066ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fd f9e8 	bl	80042c4 <HAL_GetTick>
 8006ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006ef6:	e00c      	b.n	8006f12 <HAL_RCC_OscConfig+0x35e>
 8006ef8:	2000000c 	.word	0x2000000c
 8006efc:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006f00:	f7fd f9e0 	bl	80042c4 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e1bd      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006f12:	f7ff fc0c 	bl	800672e <LL_RCC_LSI1_IsReady>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f1      	beq.n	8006f00 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006f1c:	f7ff fc2a 	bl	8006774 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006f22:	f7fd f9cf 	bl	80042c4 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e1ac      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006f34:	f7ff fc2f 	bl	8006796 <LL_RCC_LSI2_IsReady>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f1      	bne.n	8006f22 <HAL_RCC_OscConfig+0x36e>
 8006f3e:	e027      	b.n	8006f90 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006f40:	f7ff fc18 	bl	8006774 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f44:	f7fd f9be 	bl	80042c4 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006f4c:	f7fd f9ba 	bl	80042c4 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e197      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006f5e:	f7ff fc1a 	bl	8006796 <LL_RCC_LSI2_IsReady>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f1      	bne.n	8006f4c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006f68:	f7ff fbd0 	bl	800670c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f6c:	f7fd f9aa 	bl	80042c4 <HAL_GetTick>
 8006f70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006f74:	f7fd f9a6 	bl	80042c4 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e183      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006f86:	f7ff fbd2 	bl	800672e <LL_RCC_LSI1_IsReady>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f1      	bne.n	8006f74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05b      	beq.n	8007054 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f9c:	4ba7      	ldr	r3, [pc, #668]	; (800723c <HAL_RCC_OscConfig+0x688>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d114      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006fa8:	f7ff fa70 	bl	800648c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fac:	f7fd f98a 	bl	80042c4 <HAL_GetTick>
 8006fb0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb4:	f7fd f986 	bl	80042c4 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e163      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc6:	4b9d      	ldr	r3, [pc, #628]	; (800723c <HAL_RCC_OscConfig+0x688>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d102      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x42c>
 8006fda:	f7ff fb30 	bl	800663e <LL_RCC_LSE_Enable>
 8006fde:	e00c      	b.n	8006ffa <HAL_RCC_OscConfig+0x446>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	d104      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x43e>
 8006fe8:	f7ff fb4b 	bl	8006682 <LL_RCC_LSE_EnableBypass>
 8006fec:	f7ff fb27 	bl	800663e <LL_RCC_LSE_Enable>
 8006ff0:	e003      	b.n	8006ffa <HAL_RCC_OscConfig+0x446>
 8006ff2:	f7ff fb35 	bl	8006660 <LL_RCC_LSE_Disable>
 8006ff6:	f7ff fb55 	bl	80066a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d014      	beq.n	800702c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007002:	f7fd f95f 	bl	80042c4 <HAL_GetTick>
 8007006:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007008:	e00a      	b.n	8007020 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800700a:	f7fd f95b 	bl	80042c4 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	f241 3288 	movw	r2, #5000	; 0x1388
 8007018:	4293      	cmp	r3, r2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e136      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007020:	f7ff fb51 	bl	80066c6 <LL_RCC_LSE_IsReady>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0ef      	beq.n	800700a <HAL_RCC_OscConfig+0x456>
 800702a:	e013      	b.n	8007054 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702c:	f7fd f94a 	bl	80042c4 <HAL_GetTick>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007032:	e00a      	b.n	800704a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007034:	f7fd f946 	bl	80042c4 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007042:	4293      	cmp	r3, r2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e121      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800704a:	f7ff fb3c 	bl	80066c6 <LL_RCC_LSE_IsReady>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ef      	bne.n	8007034 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d02c      	beq.n	80070ba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	2b00      	cmp	r3, #0
 8007066:	d014      	beq.n	8007092 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007068:	f7ff fab5 	bl	80065d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706c:	f7fd f92a 	bl	80042c4 <HAL_GetTick>
 8007070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007074:	f7fd f926 	bl	80042c4 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e103      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007086:	f7ff fac8 	bl	800661a <LL_RCC_HSI48_IsReady>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0f1      	beq.n	8007074 <HAL_RCC_OscConfig+0x4c0>
 8007090:	e013      	b.n	80070ba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007092:	f7ff fab1 	bl	80065f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007096:	f7fd f915 	bl	80042c4 <HAL_GetTick>
 800709a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800709c:	e008      	b.n	80070b0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800709e:	f7fd f911 	bl	80042c4 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e0ee      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80070b0:	f7ff fab3 	bl	800661a <LL_RCC_HSI48_IsReady>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f1      	bne.n	800709e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80e4 	beq.w	800728c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c4:	f7ff fc11 	bl	80068ea <LL_RCC_GetSysClkSource>
 80070c8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80070ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	f040 80b4 	bne.w	8007244 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0203 	and.w	r2, r3, #3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d123      	bne.n	8007132 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d11c      	bne.n	8007132 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007104:	429a      	cmp	r2, r3
 8007106:	d114      	bne.n	8007132 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007112:	429a      	cmp	r2, r3
 8007114:	d10d      	bne.n	8007132 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007120:	429a      	cmp	r2, r3
 8007122:	d106      	bne.n	8007132 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800712e:	429a      	cmp	r2, r3
 8007130:	d05d      	beq.n	80071ee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b0c      	cmp	r3, #12
 8007136:	d058      	beq.n	80071ea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e0a1      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800714a:	f7ff fc84 	bl	8006a56 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800714e:	f7fd f8b9 	bl	80042c4 <HAL_GetTick>
 8007152:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007156:	f7fd f8b5 	bl	80042c4 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e092      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1ef      	bne.n	8007156 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	4b30      	ldr	r3, [pc, #192]	; (8007240 <HAL_RCC_OscConfig+0x68c>)
 800717e:	4013      	ands	r3, r2
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007188:	4311      	orrs	r1, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800718e:	0212      	lsls	r2, r2, #8
 8007190:	4311      	orrs	r1, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007196:	4311      	orrs	r1, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800719c:	4311      	orrs	r1, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071a2:	430a      	orrs	r2, r1
 80071a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80071ac:	f7ff fc44 	bl	8006a38 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071c0:	f7fd f880 	bl	80042c4 <HAL_GetTick>
 80071c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c8:	f7fd f87c 	bl	80042c4 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e059      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ef      	beq.n	80071c8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071e8:	e050      	b.n	800728c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e04f      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d147      	bne.n	800728c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071fc:	f7ff fc1c 	bl	8006a38 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007210:	f7fd f858 	bl	80042c4 <HAL_GetTick>
 8007214:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007218:	f7fd f854 	bl	80042c4 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e031      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800722a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0ef      	beq.n	8007218 <HAL_RCC_OscConfig+0x664>
 8007238:	e028      	b.n	800728c <HAL_RCC_OscConfig+0x6d8>
 800723a:	bf00      	nop
 800723c:	58000400 	.word	0x58000400
 8007240:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b0c      	cmp	r3, #12
 8007248:	d01e      	beq.n	8007288 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724a:	f7ff fc04 	bl	8006a56 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724e:	f7fd f839 	bl	80042c4 <HAL_GetTick>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007256:	f7fd f835 	bl	80042c4 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e012      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1ef      	bne.n	8007256 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007280:	4b05      	ldr	r3, [pc, #20]	; (8007298 <HAL_RCC_OscConfig+0x6e4>)
 8007282:	4013      	ands	r3, r2
 8007284:	60cb      	str	r3, [r1, #12]
 8007286:	e001      	b.n	800728c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3734      	adds	r7, #52	; 0x34
 8007292:	46bd      	mov	sp, r7
 8007294:	bd90      	pop	{r4, r7, pc}
 8007296:	bf00      	nop
 8007298:	eefefffc 	.word	0xeefefffc

0800729c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e12d      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072b0:	4b98      	ldr	r3, [pc, #608]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d91b      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b95      	ldr	r3, [pc, #596]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f023 0207 	bic.w	r2, r3, #7
 80072c6:	4993      	ldr	r1, [pc, #588]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ce:	f7fc fff9 	bl	80042c4 <HAL_GetTick>
 80072d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072d6:	f7fc fff5 	bl	80042c4 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e111      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e8:	4b8a      	ldr	r3, [pc, #552]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d1ef      	bne.n	80072d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d016      	beq.n	8007330 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fafb 	bl	8006902 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800730c:	f7fc ffda 	bl	80042c4 <HAL_GetTick>
 8007310:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007312:	e008      	b.n	8007326 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007314:	f7fc ffd6 	bl	80042c4 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0f2      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007326:	f7ff fbe8 	bl	8006afa <LL_RCC_IsActiveFlag_HPRE>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f1      	beq.n	8007314 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d016      	beq.n	800736a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff faf2 	bl	800692a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007346:	f7fc ffbd 	bl	80042c4 <HAL_GetTick>
 800734a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800734c:	e008      	b.n	8007360 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800734e:	f7fc ffb9 	bl	80042c4 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e0d5      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007360:	f7ff fbdd 	bl	8006b1e <LL_RCC_IsActiveFlag_C2HPRE>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f1      	beq.n	800734e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d016      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff faeb 	bl	8006956 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007380:	f7fc ffa0 	bl	80042c4 <HAL_GetTick>
 8007384:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007386:	e008      	b.n	800739a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007388:	f7fc ff9c 	bl	80042c4 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e0b8      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800739a:	f7ff fbd3 	bl	8006b44 <LL_RCC_IsActiveFlag_SHDHPRE>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0f1      	beq.n	8007388 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d016      	beq.n	80073de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fae5 	bl	8006984 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80073ba:	f7fc ff83 	bl	80042c4 <HAL_GetTick>
 80073be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80073c2:	f7fc ff7f 	bl	80042c4 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e09b      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80073d4:	f7ff fbc9 	bl	8006b6a <LL_RCC_IsActiveFlag_PPRE1>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f1      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fadb 	bl	80069ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80073f6:	f7fc ff65 	bl	80042c4 <HAL_GetTick>
 80073fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80073fe:	f7fc ff61 	bl	80042c4 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e07d      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007410:	f7ff fbbd 	bl	8006b8e <LL_RCC_IsActiveFlag_PPRE2>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f1      	beq.n	80073fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d043      	beq.n	80074ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d106      	bne.n	800743c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800742e:	f7ff f87b 	bl	8006528 <LL_RCC_HSE_IsReady>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d11e      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e067      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d106      	bne.n	8007452 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007444:	f7ff fb16 	bl	8006a74 <LL_RCC_PLL_IsReady>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d113      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e05c      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800745a:	f7ff f9e3 	bl	8006824 <LL_RCC_MSI_IsReady>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d108      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e051      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007468:	f7ff f88e 	bl	8006588 <LL_RCC_HSI_IsReady>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e04a      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fa21 	bl	80068c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007480:	f7fc ff20 	bl	80042c4 <HAL_GetTick>
 8007484:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007486:	e00a      	b.n	800749e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007488:	f7fc ff1c 	bl	80042c4 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f241 3288 	movw	r2, #5000	; 0x1388
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e036      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749e:	f7ff fa24 	bl	80068ea <LL_RCC_GetSysClkSource>
 80074a2:	4602      	mov	r2, r0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d1ec      	bne.n	8007488 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074ae:	4b19      	ldr	r3, [pc, #100]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d21b      	bcs.n	80074f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074bc:	4b15      	ldr	r3, [pc, #84]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f023 0207 	bic.w	r2, r3, #7
 80074c4:	4913      	ldr	r1, [pc, #76]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074cc:	f7fc fefa 	bl	80042c4 <HAL_GetTick>
 80074d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80074d4:	f7fc fef6 	bl	80042c4 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e012      	b.n	800750c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e6:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <HAL_RCC_ClockConfig+0x278>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d1ef      	bne.n	80074d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80074f4:	f000 f87e 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 80074f8:	4603      	mov	r3, r0
 80074fa:	4a07      	ldr	r2, [pc, #28]	; (8007518 <HAL_RCC_ClockConfig+0x27c>)
 80074fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80074fe:	f7fc feed 	bl	80042dc <HAL_GetTickPrio>
 8007502:	4603      	mov	r3, r0
 8007504:	4618      	mov	r0, r3
 8007506:	f7fc fe8f 	bl	8004228 <HAL_InitTick>
 800750a:	4603      	mov	r3, r0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	58004000 	.word	0x58004000
 8007518:	2000000c 	.word	0x2000000c

0800751c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007522:	f7ff f9e2 	bl	80068ea <LL_RCC_GetSysClkSource>
 8007526:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800752e:	f7ff f99e 	bl	800686e <LL_RCC_MSI_GetRange>
 8007532:	4603      	mov	r3, r0
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	4a2b      	ldr	r2, [pc, #172]	; (80075e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e04b      	b.n	80075dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b04      	cmp	r3, #4
 8007548:	d102      	bne.n	8007550 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800754a:	4b28      	ldr	r3, [pc, #160]	; (80075ec <HAL_RCC_GetSysClockFreq+0xd0>)
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	e045      	b.n	80075dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b08      	cmp	r3, #8
 8007554:	d10a      	bne.n	800756c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007556:	f7fe ffb7 	bl	80064c8 <LL_RCC_HSE_IsEnabledDiv2>
 800755a:	4603      	mov	r3, r0
 800755c:	2b01      	cmp	r3, #1
 800755e:	d102      	bne.n	8007566 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e03a      	b.n	80075dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007566:	4b22      	ldr	r3, [pc, #136]	; (80075f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e037      	b.n	80075dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800756c:	f7ff fab9 	bl	8006ae2 <LL_RCC_PLL_GetMainSource>
 8007570:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d003      	beq.n	8007580 <HAL_RCC_GetSysClockFreq+0x64>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d003      	beq.n	8007586 <HAL_RCC_GetSysClockFreq+0x6a>
 800757e:	e00d      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007580:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007582:	60bb      	str	r3, [r7, #8]
        break;
 8007584:	e015      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007586:	f7fe ff9f 	bl	80064c8 <LL_RCC_HSE_IsEnabledDiv2>
 800758a:	4603      	mov	r3, r0
 800758c:	2b01      	cmp	r3, #1
 800758e:	d102      	bne.n	8007596 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007590:	4b16      	ldr	r3, [pc, #88]	; (80075ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8007592:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007594:	e00d      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007596:	4b16      	ldr	r3, [pc, #88]	; (80075f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007598:	60bb      	str	r3, [r7, #8]
        break;
 800759a:	e00a      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800759c:	f7ff f967 	bl	800686e <LL_RCC_MSI_GetRange>
 80075a0:	4603      	mov	r3, r0
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	4a0f      	ldr	r2, [pc, #60]	; (80075e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80075aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ae:	60bb      	str	r3, [r7, #8]
        break;
 80075b0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80075b2:	f7ff fa71 	bl	8006a98 <LL_RCC_PLL_GetN>
 80075b6:	4602      	mov	r2, r0
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	fb03 f402 	mul.w	r4, r3, r2
 80075be:	f7ff fa84 	bl	8006aca <LL_RCC_PLL_GetDivider>
 80075c2:	4603      	mov	r3, r0
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	3301      	adds	r3, #1
 80075c8:	fbb4 f4f3 	udiv	r4, r4, r3
 80075cc:	f7ff fa71 	bl	8006ab2 <LL_RCC_PLL_GetR>
 80075d0:	4603      	mov	r3, r0
 80075d2:	0f5b      	lsrs	r3, r3, #29
 80075d4:	3301      	adds	r3, #1
 80075d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80075da:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd90      	pop	{r4, r7, pc}
 80075e6:	bf00      	nop
 80075e8:	08012f24 	.word	0x08012f24
 80075ec:	00f42400 	.word	0x00f42400
 80075f0:	01e84800 	.word	0x01e84800

080075f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f4:	b598      	push	{r3, r4, r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80075f8:	f7ff ff90 	bl	800751c <HAL_RCC_GetSysClockFreq>
 80075fc:	4604      	mov	r4, r0
 80075fe:	f7ff f9e9 	bl	80069d4 <LL_RCC_GetAHBPrescaler>
 8007602:	4603      	mov	r3, r0
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	4a03      	ldr	r2, [pc, #12]	; (8007618 <HAL_RCC_GetHCLKFreq+0x24>)
 800760c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007610:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd98      	pop	{r3, r4, r7, pc}
 8007618:	08012ec4 	.word	0x08012ec4

0800761c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800761c:	b598      	push	{r3, r4, r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007620:	f7ff ffe8 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8007624:	4604      	mov	r4, r0
 8007626:	f7ff f9ef 	bl	8006a08 <LL_RCC_GetAPB1Prescaler>
 800762a:	4603      	mov	r3, r0
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	4a04      	ldr	r2, [pc, #16]	; (8007644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	bd98      	pop	{r3, r4, r7, pc}
 8007644:	08012f04 	.word	0x08012f04

08007648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007648:	b598      	push	{r3, r4, r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800764c:	f7ff ffd2 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8007650:	4604      	mov	r4, r0
 8007652:	f7ff f9e5 	bl	8006a20 <LL_RCC_GetAPB2Prescaler>
 8007656:	4603      	mov	r3, r0
 8007658:	0adb      	lsrs	r3, r3, #11
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	4a04      	ldr	r2, [pc, #16]	; (8007670 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	fa24 f303 	lsr.w	r3, r4, r3
}
 800766c:	4618      	mov	r0, r3
 800766e:	bd98      	pop	{r3, r4, r7, pc}
 8007670:	08012f04 	.word	0x08012f04

08007674 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007674:	b590      	push	{r4, r7, lr}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2bb0      	cmp	r3, #176	; 0xb0
 8007680:	d903      	bls.n	800768a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007682:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e007      	b.n	800769a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	4a11      	ldr	r2, [pc, #68]	; (80076d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007698:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800769a:	f7ff f9a7 	bl	80069ec <LL_RCC_GetAHB4Prescaler>
 800769e:	4603      	mov	r3, r0
 80076a0:	091b      	lsrs	r3, r3, #4
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80076a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80076b8:	fba2 2303 	umull	r2, r3, r2, r3
 80076bc:	0c9c      	lsrs	r4, r3, #18
 80076be:	f7fe fef5 	bl	80064ac <HAL_PWREx_GetVoltageRange>
 80076c2:	4603      	mov	r3, r0
 80076c4:	4619      	mov	r1, r3
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f80c 	bl	80076e4 <RCC_SetFlashLatency>
 80076cc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd90      	pop	{r4, r7, pc}
 80076d6:	bf00      	nop
 80076d8:	08012f24 	.word	0x08012f24
 80076dc:	08012ec4 	.word	0x08012ec4
 80076e0:	431bde83 	.word	0x431bde83

080076e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b093      	sub	sp, #76	; 0x4c
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80076ee:	4b37      	ldr	r3, [pc, #220]	; (80077cc <RCC_SetFlashLatency+0xe8>)
 80076f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80076f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80076fa:	4a35      	ldr	r2, [pc, #212]	; (80077d0 <RCC_SetFlashLatency+0xec>)
 80076fc:	f107 031c 	add.w	r3, r7, #28
 8007700:	ca07      	ldmia	r2, {r0, r1, r2}
 8007702:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007706:	4b33      	ldr	r3, [pc, #204]	; (80077d4 <RCC_SetFlashLatency+0xf0>)
 8007708:	f107 040c 	add.w	r4, r7, #12
 800770c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800770e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007712:	2300      	movs	r3, #0
 8007714:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d11a      	bne.n	8007754 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800771e:	2300      	movs	r3, #0
 8007720:	643b      	str	r3, [r7, #64]	; 0x40
 8007722:	e013      	b.n	800774c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	3348      	adds	r3, #72	; 0x48
 800772a:	443b      	add	r3, r7
 800772c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d807      	bhi.n	8007746 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	3348      	adds	r3, #72	; 0x48
 800773c:	443b      	add	r3, r7
 800773e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007742:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007744:	e020      	b.n	8007788 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007748:	3301      	adds	r3, #1
 800774a:	643b      	str	r3, [r7, #64]	; 0x40
 800774c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774e:	2b03      	cmp	r3, #3
 8007750:	d9e8      	bls.n	8007724 <RCC_SetFlashLatency+0x40>
 8007752:	e019      	b.n	8007788 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007754:	2300      	movs	r3, #0
 8007756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007758:	e013      	b.n	8007782 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800775a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	3348      	adds	r3, #72	; 0x48
 8007760:	443b      	add	r3, r7
 8007762:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d807      	bhi.n	800777c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	3348      	adds	r3, #72	; 0x48
 8007772:	443b      	add	r3, r7
 8007774:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007778:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800777a:	e005      	b.n	8007788 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800777c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777e:	3301      	adds	r3, #1
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007784:	2b02      	cmp	r3, #2
 8007786:	d9e8      	bls.n	800775a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007788:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <RCC_SetFlashLatency+0xf4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f023 0207 	bic.w	r2, r3, #7
 8007790:	4911      	ldr	r1, [pc, #68]	; (80077d8 <RCC_SetFlashLatency+0xf4>)
 8007792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007794:	4313      	orrs	r3, r2
 8007796:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007798:	f7fc fd94 	bl	80042c4 <HAL_GetTick>
 800779c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800779e:	e008      	b.n	80077b2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077a0:	f7fc fd90 	bl	80042c4 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d901      	bls.n	80077b2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e007      	b.n	80077c2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <RCC_SetFlashLatency+0xf4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077bc:	429a      	cmp	r2, r3
 80077be:	d1ef      	bne.n	80077a0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	374c      	adds	r7, #76	; 0x4c
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd90      	pop	{r4, r7, pc}
 80077ca:	bf00      	nop
 80077cc:	08011ef8 	.word	0x08011ef8
 80077d0:	08011f08 	.word	0x08011f08
 80077d4:	08011f14 	.word	0x08011f14
 80077d8:	58004000 	.word	0x58004000

080077dc <LL_RCC_LSE_IsEnabled>:
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80077e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <LL_RCC_LSE_IsEnabled+0x18>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <LL_RCC_LSE_IsEnabled+0x1a>
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <LL_RCC_LSE_IsReady>:
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b02      	cmp	r3, #2
 8007812:	d101      	bne.n	8007818 <LL_RCC_LSE_IsReady+0x18>
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <LL_RCC_LSE_IsReady+0x1a>
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <LL_RCC_SetRFWKPClockSource>:
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800782c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007834:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <LL_RCC_SetSMPSClockSource>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f023 0203 	bic.w	r2, r3, #3
 8007862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4313      	orrs	r3, r2
 800786a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <LL_RCC_SetSMPSPrescaler>:
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800788a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4313      	orrs	r3, r2
 8007892:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <LL_RCC_SetUSARTClockSource>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80078a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b0:	f023 0203 	bic.w	r2, r3, #3
 80078b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <LL_RCC_SetLPUARTClockSource>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80078d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <LL_RCC_SetI2CClockSource>:
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007904:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	091b      	lsrs	r3, r3, #4
 800790c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007910:	43db      	mvns	r3, r3
 8007912:	401a      	ands	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800791c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007920:	4313      	orrs	r3, r2
 8007922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <LL_RCC_SetLPTIMClockSource>:
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800793a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0c1b      	lsrs	r3, r3, #16
 8007946:	041b      	lsls	r3, r3, #16
 8007948:	43db      	mvns	r3, r3
 800794a:	401a      	ands	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_RCC_SetSAIClockSource>:
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800796e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800797a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <LL_RCC_SetRNGClockSource>:
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80079a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <LL_RCC_SetCLK48ClockSource>:
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80079c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4313      	orrs	r3, r2
 80079da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <LL_RCC_SetUSBClockSource>:
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ffe3 	bl	80079be <LL_RCC_SetCLK48ClockSource>
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <LL_RCC_SetADCClockSource>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <LL_RCC_SetRTCClockSource>:
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <LL_RCC_GetRTCClockSource>:
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <LL_RCC_ForceBackupDomainReset>:
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007a8a:	bf00      	nop
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007aac:	bf00      	nop
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <LL_RCC_PLLSAI1_Enable>:
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ac8:	6013      	str	r3, [r2, #0]
}
 8007aca:	bf00      	nop
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <LL_RCC_PLLSAI1_Disable>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ae6:	6013      	str	r3, [r2, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <LL_RCC_PLLSAI1_IsReady>:
{
 8007af2:	b480      	push	{r7}
 8007af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b04:	d101      	bne.n	8007b0a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b088      	sub	sp, #32
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007b1e:	2300      	movs	r3, #0
 8007b20:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007b22:	2300      	movs	r3, #0
 8007b24:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d034      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b3a:	d021      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007b3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b40:	d81b      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b46:	d01d      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b4c:	d815      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b56:	d110      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b66:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007b68:	e00d      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f947 	bl	8007e02 <RCCEx_PLLSAI1_ConfigNP>
 8007b74:	4603      	mov	r3, r0
 8007b76:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007b78:	e005      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	77fb      	strb	r3, [r7, #31]
        break;
 8007b7e:	e002      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007b80:	bf00      	nop
 8007b82:	e000      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b86:	7ffb      	ldrb	r3, [r7, #31]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fee8 	bl	8007966 <LL_RCC_SetSAIClockSource>
 8007b96:	e001      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b98:	7ffb      	ldrb	r3, [r7, #31]
 8007b9a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d046      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007ba8:	f7ff ff56 	bl	8007a58 <LL_RCC_GetRTCClockSource>
 8007bac:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d03c      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007bb8:	f7fe fc68 	bl	800648c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff ff30 	bl	8007a2c <LL_RCC_SetRTCClockSource>
 8007bcc:	e02e      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007bd8:	f7ff ff4b 	bl	8007a72 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007bdc:	f7ff ff5a 	bl	8007a94 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007bf8:	f7ff fdf0 	bl	80077dc <LL_RCC_LSE_IsEnabled>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d114      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c02:	f7fc fb5f 	bl	80042c4 <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007c08:	e00b      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0a:	f7fc fb5b 	bl	80042c4 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d902      	bls.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	77fb      	strb	r3, [r7, #31]
              break;
 8007c20:	e004      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007c22:	f7ff fded 	bl	8007800 <LL_RCC_LSE_IsReady>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d1ee      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007c2c:	7ffb      	ldrb	r3, [r7, #31]
 8007c2e:	77bb      	strb	r3, [r7, #30]
 8007c30:	e001      	b.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c32:	7ffb      	ldrb	r3, [r7, #31]
 8007c34:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff fe2a 	bl	80078a0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fe35 	bl	80078cc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fe5d 	bl	8007932 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d004      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff fe52 	bl	8007932 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fe2a 	bl	80078f8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff fe1f 	bl	80078f8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d022      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fe8d 	bl	80079ea <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd8:	d107      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ce8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cf2:	d10b      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f8dd 	bl	8007eb8 <RCCEx_PLLSAI1_ConfigNQ>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007d02:	7ffb      	ldrb	r3, [r7, #31]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007d08:	7ffb      	ldrb	r3, [r7, #31]
 8007d0a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02b      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d20:	d008      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d2a:	d003      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d105      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff fe2a 	bl	8007992 <LL_RCC_SetRNGClockSource>
 8007d3e:	e00a      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f7ff fe21 	bl	8007992 <LL_RCC_SetRNGClockSource>
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff fe34 	bl	80079be <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007d5e:	d107      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d022      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff fe3d 	bl	8007a00 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d8e:	d107      	bne.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d9e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007da8:	d10b      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f8dd 	bl	8007f6e <RCCEx_PLLSAI1_ConfigNR>
 8007db4:	4603      	mov	r3, r0
 8007db6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007db8:	7ffb      	ldrb	r3, [r7, #31]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007dbe:	7ffb      	ldrb	r3, [r7, #31]
 8007dc0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff fd26 	bl	8007824 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d009      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fd45 	bl	8007878 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fd2c 	bl	8007850 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007df8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e0e:	f7ff fe61 	bl	8007ad4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e12:	f7fc fa57 	bl	80042c4 <HAL_GetTick>
 8007e16:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e18:	e009      	b.n	8007e2e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e1a:	f7fc fa53 	bl	80042c4 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d902      	bls.n	8007e2e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2c:	e004      	b.n	8007e38 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e2e:	f7ff fe60 	bl	8007af2 <LL_RCC_PLLSAI1_IsReady>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f0      	bne.n	8007e1a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d137      	bne.n	8007eae <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e52:	4313      	orrs	r3, r2
 8007e54:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007e6c:	f7ff fe23 	bl	8007ab6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e70:	f7fc fa28 	bl	80042c4 <HAL_GetTick>
 8007e74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e76:	e009      	b.n	8007e8c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e78:	f7fc fa24 	bl	80042c4 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d902      	bls.n	8007e8c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	73fb      	strb	r3, [r7, #15]
        break;
 8007e8a:	e004      	b.n	8007e96 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e8c:	f7ff fe31 	bl	8007af2 <LL_RCC_PLLSAI1_IsReady>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d1f0      	bne.n	8007e78 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d108      	bne.n	8007eae <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007ec4:	f7ff fe06 	bl	8007ad4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ec8:	f7fc f9fc 	bl	80042c4 <HAL_GetTick>
 8007ecc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ece:	e009      	b.n	8007ee4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ed0:	f7fc f9f8 	bl	80042c4 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d902      	bls.n	8007ee4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee2:	e004      	b.n	8007eee <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007ee4:	f7ff fe05 	bl	8007af2 <LL_RCC_PLLSAI1_IsReady>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d137      	bne.n	8007f64 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007f22:	f7ff fdc8 	bl	8007ab6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f26:	f7fc f9cd 	bl	80042c4 <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f2c:	e009      	b.n	8007f42 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f2e:	f7fc f9c9 	bl	80042c4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d902      	bls.n	8007f42 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
        break;
 8007f40:	e004      	b.n	8007f4c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f42:	f7ff fdd6 	bl	8007af2 <LL_RCC_PLLSAI1_IsReady>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d1f0      	bne.n	8007f2e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d108      	bne.n	8007f64 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f60:	4313      	orrs	r3, r2
 8007f62:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007f7a:	f7ff fdab 	bl	8007ad4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f7e:	f7fc f9a1 	bl	80042c4 <HAL_GetTick>
 8007f82:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f84:	e009      	b.n	8007f9a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f86:	f7fc f99d 	bl	80042c4 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d902      	bls.n	8007f9a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	e004      	b.n	8007fa4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f9a:	f7ff fdaa 	bl	8007af2 <LL_RCC_PLLSAI1_IsReady>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1f0      	bne.n	8007f86 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d137      	bne.n	800801a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007fd8:	f7ff fd6d 	bl	8007ab6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fdc:	f7fc f972 	bl	80042c4 <HAL_GetTick>
 8007fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007fe2:	e009      	b.n	8007ff8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fe4:	f7fc f96e 	bl	80042c4 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d902      	bls.n	8007ff8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ff6:	e004      	b.n	8008002 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ff8:	f7ff fd7b 	bl	8007af2 <LL_RCC_PLLSAI1_IsReady>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d1f0      	bne.n	8007fe4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d108      	bne.n	800801a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008016:	4313      	orrs	r3, r2
 8008018:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e09f      	b.n	8008176 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fb fd76 	bl	8003b3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008058:	4b49      	ldr	r3, [pc, #292]	; (8008180 <HAL_RTC_Init+0x15c>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b10      	cmp	r3, #16
 8008062:	d07e      	beq.n	8008162 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	22ca      	movs	r2, #202	; 0xca
 800806a:	625a      	str	r2, [r3, #36]	; 0x24
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2253      	movs	r2, #83	; 0x53
 8008072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f8ab 	bl	80081d0 <RTC_EnterInitMode>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2204      	movs	r2, #4
 800808c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
 8008094:	e067      	b.n	8008166 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6812      	ldr	r2, [r2, #0]
 80080a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6899      	ldr	r1, [r3, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	68d2      	ldr	r2, [r2, #12]
 80080d0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6919      	ldr	r1, [r3, #16]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	041a      	lsls	r2, r3, #16
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080f4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0203 	bic.w	r2, r2, #3
 8008104:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d113      	bne.n	8008154 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f829 	bl	8008184 <HAL_RTC_WaitForSynchro>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00d      	beq.n	8008154 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	22ff      	movs	r2, #255	; 0xff
 800813e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2204      	movs	r2, #4
 8008144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e010      	b.n	8008176 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	22ff      	movs	r2, #255	; 0xff
 800815a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e001      	b.n	8008166 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40002800 	.word	0x40002800

08008184 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800819a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800819c:	f7fc f892 	bl	80042c4 <HAL_GetTick>
 80081a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80081a2:	e009      	b.n	80081b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081a4:	f7fc f88e 	bl	80042c4 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081b2:	d901      	bls.n	80081b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e007      	b.n	80081c8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0ee      	beq.n	80081a4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d119      	bne.n	800821a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081f0:	f7fc f868 	bl	80042c4 <HAL_GetTick>
 80081f4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081f6:	e009      	b.n	800820c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80081f8:	f7fc f864 	bl	80042c4 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008206:	d901      	bls.n	800820c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e007      	b.n	800821c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0ee      	beq.n	80081f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800823a:	2302      	movs	r3, #2
 800823c:	e0a8      	b.n	8008390 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	22ca      	movs	r2, #202	; 0xca
 8008254:	625a      	str	r2, [r3, #36]	; 0x24
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2253      	movs	r2, #83	; 0x53
 800825c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008268:	2b00      	cmp	r3, #0
 800826a:	d020      	beq.n	80082ae <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800826c:	f7fc f82a 	bl	80042c4 <HAL_GetTick>
 8008270:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008272:	e015      	b.n	80082a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008274:	f7fc f826 	bl	80042c4 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008282:	d90d      	bls.n	80082a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	22ff      	movs	r2, #255	; 0xff
 800828a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2203      	movs	r2, #3
 8008290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e077      	b.n	8008390 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e2      	bne.n	8008274 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689a      	ldr	r2, [r3, #8]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082bc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80082ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80082d0:	f7fb fff8 	bl	80042c4 <HAL_GetTick>
 80082d4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80082d6:	e015      	b.n	8008304 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082d8:	f7fb fff4 	bl	80042c4 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e6:	d90d      	bls.n	8008304 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	22ff      	movs	r2, #255	; 0xff
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2203      	movs	r2, #3
 80082f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e045      	b.n	8008390 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0e2      	beq.n	80082d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0207 	bic.w	r2, r2, #7
 8008328:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6899      	ldr	r1, [r3, #8]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	430a      	orrs	r2, r1
 8008338:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800833a:	4b17      	ldr	r3, [pc, #92]	; (8008398 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008340:	4a15      	ldr	r2, [pc, #84]	; (8008398 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008346:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a12      	ldr	r2, [pc, #72]	; (8008398 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008354:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008364:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008374:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	22ff      	movs	r2, #255	; 0xff
 800837c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	58000800 	.word	0x58000800

0800839c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e095      	b.n	80084da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d108      	bne.n	80083c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083be:	d009      	beq.n	80083d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	61da      	str	r2, [r3, #28]
 80083c6:	e005      	b.n	80083d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fb fbd8 	bl	8003ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800840a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008414:	d902      	bls.n	800841c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	e002      	b.n	8008422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800841c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800842a:	d007      	beq.n	800843c <HAL_SPI_Init+0xa0>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008434:	d002      	beq.n	800843c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847e:	ea42 0103 	orr.w	r1, r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	f003 0204 	and.w	r2, r3, #4
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	f003 0310 	and.w	r3, r3, #16
 80084a4:	431a      	orrs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80084b8:	ea42 0103 	orr.w	r1, r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b088      	sub	sp, #32
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_SPI_Transmit+0x22>
 8008500:	2302      	movs	r3, #2
 8008502:	e158      	b.n	80087b6 <HAL_SPI_Transmit+0x2d4>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800850c:	f7fb feda 	bl	80042c4 <HAL_GetTick>
 8008510:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	d002      	beq.n	8008528 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008522:	2302      	movs	r3, #2
 8008524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008526:	e13d      	b.n	80087a4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_SPI_Transmit+0x52>
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008538:	e134      	b.n	80087a4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2203      	movs	r2, #3
 800853e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	88fa      	ldrh	r2, [r7, #6]
 8008552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008584:	d10f      	bne.n	80085a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b40      	cmp	r3, #64	; 0x40
 80085b2:	d007      	beq.n	80085c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085cc:	d94b      	bls.n	8008666 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <HAL_SPI_Transmit+0xfa>
 80085d6:	8afb      	ldrh	r3, [r7, #22]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d13e      	bne.n	800865a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	881a      	ldrh	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	1c9a      	adds	r2, r3, #2
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008600:	e02b      	b.n	800865a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b02      	cmp	r3, #2
 800860e:	d112      	bne.n	8008636 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	881a      	ldrh	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	1c9a      	adds	r2, r3, #2
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008634:	e011      	b.n	800865a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008636:	f7fb fe45 	bl	80042c4 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d803      	bhi.n	800864e <HAL_SPI_Transmit+0x16c>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800864c:	d102      	bne.n	8008654 <HAL_SPI_Transmit+0x172>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008658:	e0a4      	b.n	80087a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800865e:	b29b      	uxth	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1ce      	bne.n	8008602 <HAL_SPI_Transmit+0x120>
 8008664:	e07c      	b.n	8008760 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <HAL_SPI_Transmit+0x192>
 800866e:	8afb      	ldrh	r3, [r7, #22]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d170      	bne.n	8008756 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b01      	cmp	r3, #1
 800867c:	d912      	bls.n	80086a4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	881a      	ldrh	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	1c9a      	adds	r2, r3, #2
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b02      	subs	r3, #2
 800869c:	b29a      	uxth	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086a2:	e058      	b.n	8008756 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	330c      	adds	r3, #12
 80086ae:	7812      	ldrb	r2, [r2, #0]
 80086b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80086ca:	e044      	b.n	8008756 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d12b      	bne.n	8008732 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d912      	bls.n	800870a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	881a      	ldrh	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	1c9a      	adds	r2, r3, #2
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b02      	subs	r3, #2
 8008702:	b29a      	uxth	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008708:	e025      	b.n	8008756 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	7812      	ldrb	r2, [r2, #0]
 8008716:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008730:	e011      	b.n	8008756 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008732:	f7fb fdc7 	bl	80042c4 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d803      	bhi.n	800874a <HAL_SPI_Transmit+0x268>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008748:	d102      	bne.n	8008750 <HAL_SPI_Transmit+0x26e>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008754:	e026      	b.n	80087a4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875a:	b29b      	uxth	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1b5      	bne.n	80086cc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fe03 	bl	8009370 <SPI_EndRxTxTransaction>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800877e:	2300      	movs	r3, #0
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	613b      	str	r3, [r7, #16]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	613b      	str	r3, [r7, #16]
 8008792:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	77fb      	strb	r3, [r7, #31]
 80087a0:	e000      	b.n	80087a4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80087a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80087b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3720      	adds	r7, #32
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b088      	sub	sp, #32
 80087c2:	af02      	add	r7, sp, #8
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087da:	d112      	bne.n	8008802 <HAL_SPI_Receive+0x44>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10e      	bne.n	8008802 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2204      	movs	r2, #4
 80087e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	4613      	mov	r3, r2
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f910 	bl	8008a1e <HAL_SPI_TransmitReceive>
 80087fe:	4603      	mov	r3, r0
 8008800:	e109      	b.n	8008a16 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_SPI_Receive+0x52>
 800880c:	2302      	movs	r3, #2
 800880e:	e102      	b.n	8008a16 <HAL_SPI_Receive+0x258>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008818:	f7fb fd54 	bl	80042c4 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b01      	cmp	r3, #1
 8008828:	d002      	beq.n	8008830 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800882a:	2302      	movs	r3, #2
 800882c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800882e:	e0e9      	b.n	8008a04 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <HAL_SPI_Receive+0x7e>
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008840:	e0e0      	b.n	8008a04 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2204      	movs	r2, #4
 8008846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	88fa      	ldrh	r2, [r7, #6]
 800885a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	88fa      	ldrh	r2, [r7, #6]
 8008862:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800888c:	d908      	bls.n	80088a0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	e007      	b.n	80088b0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088b8:	d10f      	bne.n	80088da <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	d007      	beq.n	80088f8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008900:	d867      	bhi.n	80089d2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008902:	e030      	b.n	8008966 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b01      	cmp	r3, #1
 8008910:	d117      	bne.n	8008942 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f103 020c 	add.w	r2, r3, #12
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	7812      	ldrb	r2, [r2, #0]
 8008920:	b2d2      	uxtb	r2, r2
 8008922:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008940:	e011      	b.n	8008966 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008942:	f7fb fcbf 	bl	80042c4 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d803      	bhi.n	800895a <HAL_SPI_Receive+0x19c>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008958:	d102      	bne.n	8008960 <HAL_SPI_Receive+0x1a2>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008964:	e04e      	b.n	8008a04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1c8      	bne.n	8008904 <HAL_SPI_Receive+0x146>
 8008972:	e034      	b.n	80089de <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b01      	cmp	r3, #1
 8008980:	d115      	bne.n	80089ae <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	b292      	uxth	r2, r2
 800898e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	1c9a      	adds	r2, r3, #2
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80089ac:	e011      	b.n	80089d2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089ae:	f7fb fc89 	bl	80042c4 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d803      	bhi.n	80089c6 <HAL_SPI_Receive+0x208>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c4:	d102      	bne.n	80089cc <HAL_SPI_Receive+0x20e>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089d0:	e018      	b.n	8008a04 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1ca      	bne.n	8008974 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 fc6c 	bl	80092c0 <SPI_EndRxTransaction>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
 8008a00:	e000      	b.n	8008a04 <HAL_SPI_Receive+0x246>
  }

error :
 8008a02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b08a      	sub	sp, #40	; 0x28
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
 8008a2a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_SPI_TransmitReceive+0x26>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e1fb      	b.n	8008e3c <HAL_SPI_TransmitReceive+0x41e>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a4c:	f7fb fc3a 	bl	80042c4 <HAL_GetTick>
 8008a50:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a58:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008a60:	887b      	ldrh	r3, [r7, #2]
 8008a62:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008a64:	887b      	ldrh	r3, [r7, #2]
 8008a66:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a68:	7efb      	ldrb	r3, [r7, #27]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d00e      	beq.n	8008a8c <HAL_SPI_TransmitReceive+0x6e>
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a74:	d106      	bne.n	8008a84 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <HAL_SPI_TransmitReceive+0x66>
 8008a7e:	7efb      	ldrb	r3, [r7, #27]
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d003      	beq.n	8008a8c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008a84:	2302      	movs	r3, #2
 8008a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008a8a:	e1cd      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <HAL_SPI_TransmitReceive+0x80>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <HAL_SPI_TransmitReceive+0x80>
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008aa4:	e1c0      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d003      	beq.n	8008aba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	887a      	ldrh	r2, [r7, #2]
 8008aca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	887a      	ldrh	r2, [r7, #2]
 8008ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	887a      	ldrh	r2, [r7, #2]
 8008ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	887a      	ldrh	r2, [r7, #2]
 8008ae6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008afc:	d802      	bhi.n	8008b04 <HAL_SPI_TransmitReceive+0xe6>
 8008afe:	8a3b      	ldrh	r3, [r7, #16]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d908      	bls.n	8008b16 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b12:	605a      	str	r2, [r3, #4]
 8008b14:	e007      	b.n	8008b26 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b24:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d007      	beq.n	8008b44 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b4c:	d97c      	bls.n	8008c48 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <HAL_SPI_TransmitReceive+0x13e>
 8008b56:	8a7b      	ldrh	r3, [r7, #18]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d169      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	881a      	ldrh	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	1c9a      	adds	r2, r3, #2
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b80:	e056      	b.n	8008c30 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d11b      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x1aa>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d016      	beq.n	8008bc8 <HAL_SPI_TransmitReceive+0x1aa>
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d113      	bne.n	8008bc8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	881a      	ldrh	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	1c9a      	adds	r2, r3, #2
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d11c      	bne.n	8008c10 <HAL_SPI_TransmitReceive+0x1f2>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d016      	beq.n	8008c10 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	b292      	uxth	r2, r2
 8008bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf4:	1c9a      	adds	r2, r3, #2
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c10:	f7fb fb58 	bl	80042c4 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d807      	bhi.n	8008c30 <HAL_SPI_TransmitReceive+0x212>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c26:	d003      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008c2e:	e0fb      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1a3      	bne.n	8008b82 <HAL_SPI_TransmitReceive+0x164>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d19d      	bne.n	8008b82 <HAL_SPI_TransmitReceive+0x164>
 8008c46:	e0df      	b.n	8008e08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x23a>
 8008c50:	8a7b      	ldrh	r3, [r7, #18]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	f040 80cb 	bne.w	8008dee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d912      	bls.n	8008c88 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	881a      	ldrh	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	1c9a      	adds	r2, r3, #2
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	3b02      	subs	r3, #2
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c86:	e0b2      	b.n	8008dee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cae:	e09e      	b.n	8008dee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d134      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x30a>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d02f      	beq.n	8008d28 <HAL_SPI_TransmitReceive+0x30a>
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d12c      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d912      	bls.n	8008cfe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	881a      	ldrh	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	1c9a      	adds	r2, r3, #2
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	3b02      	subs	r3, #2
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cfc:	e012      	b.n	8008d24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	330c      	adds	r3, #12
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d148      	bne.n	8008dc8 <HAL_SPI_TransmitReceive+0x3aa>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d042      	beq.n	8008dc8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d923      	bls.n	8008d96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d58:	b292      	uxth	r2, r2
 8008d5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	1c9a      	adds	r2, r3, #2
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	3b02      	subs	r3, #2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d81f      	bhi.n	8008dc4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d92:	605a      	str	r2, [r3, #4]
 8008d94:	e016      	b.n	8008dc4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f103 020c 	add.w	r2, r3, #12
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dc8:	f7fb fa7c 	bl	80042c4 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d803      	bhi.n	8008de0 <HAL_SPI_TransmitReceive+0x3c2>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dde:	d102      	bne.n	8008de6 <HAL_SPI_TransmitReceive+0x3c8>
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008dec:	e01c      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f af5b 	bne.w	8008cb0 <HAL_SPI_TransmitReceive+0x292>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f47f af54 	bne.w	8008cb0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 faaf 	bl	8009370 <SPI_EndRxTxTransaction>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d006      	beq.n	8008e26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	661a      	str	r2, [r3, #96]	; 0x60
 8008e24:	e000      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008e26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3728      	adds	r7, #40	; 0x28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	099b      	lsrs	r3, r3, #6
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10f      	bne.n	8008e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	099b      	lsrs	r3, r3, #6
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
    return;
 8008e86:	e0d7      	b.n	8009038 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00a      	beq.n	8008eaa <HAL_SPI_IRQHandler+0x66>
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	09db      	lsrs	r3, r3, #7
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
    return;
 8008ea8:	e0c6      	b.n	8009038 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_SPI_IRQHandler+0x8c>
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	099b      	lsrs	r3, r3, #6
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	0a1b      	lsrs	r3, r3, #8
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 80b4 	beq.w	8009038 <HAL_SPI_IRQHandler+0x1f4>
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80ad 	beq.w	8009038 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	099b      	lsrs	r3, r3, #6
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d023      	beq.n	8008f32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d011      	beq.n	8008f1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efa:	f043 0204 	orr.w	r2, r3, #4
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	e00b      	b.n	8008f32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	613b      	str	r3, [r7, #16]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	693b      	ldr	r3, [r7, #16]
        return;
 8008f30:	e082      	b.n	8009038 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d014      	beq.n	8008f68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f42:	f043 0201 	orr.w	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00c      	beq.n	8008f8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f78:	f043 0208 	orr.w	r2, r3, #8
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d04f      	beq.n	8009036 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fa4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <HAL_SPI_IRQHandler+0x17e>
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d034      	beq.n	800902c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0203 	bic.w	r2, r2, #3
 8008fd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d011      	beq.n	8008ffe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fde:	4a18      	ldr	r2, [pc, #96]	; (8009040 <HAL_SPI_IRQHandler+0x1fc>)
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fb fcb8 	bl	800495c <HAL_DMA_Abort_IT>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900a:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <HAL_SPI_IRQHandler+0x1fc>)
 800900c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	4618      	mov	r0, r3
 8009014:	f7fb fca2 	bl	800495c <HAL_DMA_Abort_IT>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800902a:	e003      	b.n	8009034 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f809 	bl	8009044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009032:	e000      	b.n	8009036 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009034:	bf00      	nop
    return;
 8009036:	bf00      	nop
  }
}
 8009038:	3720      	adds	r7, #32
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	08009059 	.word	0x08009059

08009044 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff ffe5 	bl	8009044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800907a:	bf00      	nop
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	4613      	mov	r3, r2
 8009092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009094:	f7fb f916 	bl	80042c4 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	4413      	add	r3, r2
 80090a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090a4:	f7fb f90e 	bl	80042c4 <HAL_GetTick>
 80090a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090aa:	4b39      	ldr	r3, [pc, #228]	; (8009190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	015b      	lsls	r3, r3, #5
 80090b0:	0d1b      	lsrs	r3, r3, #20
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	fb02 f303 	mul.w	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ba:	e054      	b.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c2:	d050      	beq.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090c4:	f7fb f8fe 	bl	80042c4 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d902      	bls.n	80090da <SPI_WaitFlagStateUntilTimeout+0x56>
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d13d      	bne.n	8009156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090f2:	d111      	bne.n	8009118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fc:	d004      	beq.n	8009108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009106:	d107      	bne.n	8009118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009120:	d10f      	bne.n	8009142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e017      	b.n	8009186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	3b01      	subs	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4013      	ands	r3, r2
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	bf0c      	ite	eq
 8009176:	2301      	moveq	r3, #1
 8009178:	2300      	movne	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	429a      	cmp	r2, r3
 8009182:	d19b      	bne.n	80090bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	2000000c 	.word	0x2000000c

08009194 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08a      	sub	sp, #40	; 0x28
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80091a6:	f7fb f88d 	bl	80042c4 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	1a9b      	subs	r3, r3, r2
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	4413      	add	r3, r2
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80091b6:	f7fb f885 	bl	80042c4 <HAL_GetTick>
 80091ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80091c4:	4b3d      	ldr	r3, [pc, #244]	; (80092bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	00da      	lsls	r2, r3, #3
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	0d1b      	lsrs	r3, r3, #20
 80091d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
 80091da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80091dc:	e060      	b.n	80092a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80091e4:	d107      	bne.n	80091f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d104      	bne.n	80091f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fc:	d050      	beq.n	80092a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091fe:	f7fb f861 	bl	80042c4 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920a:	429a      	cmp	r2, r3
 800920c:	d902      	bls.n	8009214 <SPI_WaitFifoStateUntilTimeout+0x80>
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	d13d      	bne.n	8009290 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800922c:	d111      	bne.n	8009252 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009236:	d004      	beq.n	8009242 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009240:	d107      	bne.n	8009252 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009250:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800925a:	d10f      	bne.n	800927c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800927a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e010      	b.n	80092b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	3b01      	subs	r3, #1
 800929e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	4013      	ands	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d196      	bne.n	80091de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3728      	adds	r7, #40	; 0x28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	2000000c 	.word	0x2000000c

080092c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092d4:	d111      	bne.n	80092fa <SPI_EndRxTransaction+0x3a>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092de:	d004      	beq.n	80092ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092e8:	d107      	bne.n	80092fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2200      	movs	r2, #0
 8009302:	2180      	movs	r1, #128	; 0x80
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7ff febd 	bl	8009084 <SPI_WaitFlagStateUntilTimeout>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d007      	beq.n	8009320 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009314:	f043 0220 	orr.w	r2, r3, #32
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e023      	b.n	8009368 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009328:	d11d      	bne.n	8009366 <SPI_EndRxTransaction+0xa6>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009332:	d004      	beq.n	800933e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800933c:	d113      	bne.n	8009366 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff ff22 	bl	8009194 <SPI_WaitFifoStateUntilTimeout>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935a:	f043 0220 	orr.w	r2, r3, #32
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e000      	b.n	8009368 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af02      	add	r7, sp, #8
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2200      	movs	r2, #0
 8009384:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff ff03 	bl	8009194 <SPI_WaitFifoStateUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009398:	f043 0220 	orr.w	r2, r3, #32
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e027      	b.n	80093f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2200      	movs	r2, #0
 80093ac:	2180      	movs	r1, #128	; 0x80
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fe68 	bl	8009084 <SPI_WaitFlagStateUntilTimeout>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093be:	f043 0220 	orr.w	r2, r3, #32
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e014      	b.n	80093f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f7ff fedc 	bl	8009194 <SPI_WaitFifoStateUntilTimeout>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d007      	beq.n	80093f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e6:	f043 0220 	orr.w	r2, r3, #32
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e000      	b.n	80093f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <LL_RCC_GetUSARTClockSource>:
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009408:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4013      	ands	r3, r2
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <LL_RCC_GetLPUARTClockSource>:
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009428:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4013      	ands	r3, r2
}
 8009430:	4618      	mov	r0, r3
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e042      	b.n	80094d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009454:	2b00      	cmp	r3, #0
 8009456:	d106      	bne.n	8009466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7fa fc31 	bl	8003cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2224      	movs	r2, #36	; 0x24
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0201 	bic.w	r2, r2, #1
 800947c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fbf0 	bl	8009c64 <UART_SetConfig>
 8009484:	4603      	mov	r3, r0
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e022      	b.n	80094d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fe0c 	bl	800a0b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689a      	ldr	r2, [r3, #8]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f042 0201 	orr.w	r2, r2, #1
 80094ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fe93 	bl	800a1f8 <UART_CheckIdleState>
 80094d2:	4603      	mov	r3, r0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	; 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d167      	bne.n	80095c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <HAL_UART_Transmit_DMA+0x24>
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d101      	bne.n	8009504 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e060      	b.n	80095c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	88fa      	ldrh	r2, [r7, #6]
 800950e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	88fa      	ldrh	r2, [r7, #6]
 8009516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2221      	movs	r2, #33	; 0x21
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d028      	beq.n	8009584 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <HAL_UART_Transmit_DMA+0xf4>)
 8009538:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800953e:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <HAL_UART_Transmit_DMA+0xf8>)
 8009540:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009546:	4a24      	ldr	r2, [pc, #144]	; (80095d8 <HAL_UART_Transmit_DMA+0xfc>)
 8009548:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954e:	2200      	movs	r2, #0
 8009550:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955a:	4619      	mov	r1, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3328      	adds	r3, #40	; 0x28
 8009562:	461a      	mov	r2, r3
 8009564:	88fb      	ldrh	r3, [r7, #6]
 8009566:	f7fb f91f 	bl	80047a8 <HAL_DMA_Start_IT>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d009      	beq.n	8009584 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2210      	movs	r2, #16
 8009574:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e020      	b.n	80095c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2240      	movs	r2, #64	; 0x40
 800958a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	613b      	str	r3, [r7, #16]
   return(result);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ac:	623a      	str	r2, [r7, #32]
 80095ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	69f9      	ldr	r1, [r7, #28]
 80095b2:	6a3a      	ldr	r2, [r7, #32]
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e5      	bne.n	800958c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	e000      	b.n	80095c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80095c4:	2302      	movs	r3, #2
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3728      	adds	r7, #40	; 0x28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	0800a569 	.word	0x0800a569
 80095d4:	0800a603 	.word	0x0800a603
 80095d8:	0800a61f 	.word	0x0800a61f

080095dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b0ba      	sub	sp, #232	; 0xe8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009606:	f640 030f 	movw	r3, #2063	; 0x80f
 800960a:	4013      	ands	r3, r2
 800960c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11b      	bne.n	8009650 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961c:	f003 0320 	and.w	r3, r3, #32
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d105      	bne.n	800963c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d009      	beq.n	8009650 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 82e3 	beq.w	8009c0c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	4798      	blx	r3
      }
      return;
 800964e:	e2dd      	b.n	8009c0c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 8123 	beq.w	80098a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800965a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800965e:	4b8d      	ldr	r3, [pc, #564]	; (8009894 <HAL_UART_IRQHandler+0x2b8>)
 8009660:	4013      	ands	r3, r2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009666:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800966a:	4b8b      	ldr	r3, [pc, #556]	; (8009898 <HAL_UART_IRQHandler+0x2bc>)
 800966c:	4013      	ands	r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 8116 	beq.w	80098a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d011      	beq.n	80096a4 <HAL_UART_IRQHandler+0xc8>
 8009680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2201      	movs	r2, #1
 8009692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969a:	f043 0201 	orr.w	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d011      	beq.n	80096d4 <HAL_UART_IRQHandler+0xf8>
 80096b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2202      	movs	r2, #2
 80096c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ca:	f043 0204 	orr.w	r2, r3, #4
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d011      	beq.n	8009704 <HAL_UART_IRQHandler+0x128>
 80096e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2204      	movs	r2, #4
 80096f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096fa:	f043 0202 	orr.w	r2, r3, #2
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009708:	f003 0308 	and.w	r3, r3, #8
 800970c:	2b00      	cmp	r3, #0
 800970e:	d017      	beq.n	8009740 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d105      	bne.n	8009728 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800971c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009720:	4b5c      	ldr	r3, [pc, #368]	; (8009894 <HAL_UART_IRQHandler+0x2b8>)
 8009722:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2208      	movs	r2, #8
 800972e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009736:	f043 0208 	orr.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009748:	2b00      	cmp	r3, #0
 800974a:	d012      	beq.n	8009772 <HAL_UART_IRQHandler+0x196>
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00c      	beq.n	8009772 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009768:	f043 0220 	orr.w	r2, r3, #32
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 8249 	beq.w	8009c10 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009782:	f003 0320 	and.w	r3, r3, #32
 8009786:	2b00      	cmp	r3, #0
 8009788:	d013      	beq.n	80097b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800978a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800978e:	f003 0320 	and.w	r3, r3, #32
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800979a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	d005      	beq.n	80097d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d054      	beq.n	8009880 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fe60 	bl	800a49c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	2b40      	cmp	r3, #64	; 0x40
 80097e8:	d146      	bne.n	8009878 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800981a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800982e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1d9      	bne.n	80097ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800983c:	2b00      	cmp	r3, #0
 800983e:	d017      	beq.n	8009870 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009846:	4a15      	ldr	r2, [pc, #84]	; (800989c <HAL_UART_IRQHandler+0x2c0>)
 8009848:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009850:	4618      	mov	r0, r3
 8009852:	f7fb f883 	bl	800495c <HAL_DMA_Abort_IT>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d019      	beq.n	8009890 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800986a:	4610      	mov	r0, r2
 800986c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986e:	e00f      	b.n	8009890 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f9e1 	bl	8009c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009876:	e00b      	b.n	8009890 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f9dd 	bl	8009c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987e:	e007      	b.n	8009890 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f9d9 	bl	8009c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800988e:	e1bf      	b.n	8009c10 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009890:	bf00      	nop
    return;
 8009892:	e1bd      	b.n	8009c10 <HAL_UART_IRQHandler+0x634>
 8009894:	10000001 	.word	0x10000001
 8009898:	04000120 	.word	0x04000120
 800989c:	0800a69f 	.word	0x0800a69f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	f040 8153 	bne.w	8009b50 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ae:	f003 0310 	and.w	r3, r3, #16
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 814c 	beq.w	8009b50 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 8145 	beq.w	8009b50 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2210      	movs	r2, #16
 80098cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	f040 80bb 	bne.w	8009a54 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 818f 	beq.w	8009c14 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009900:	429a      	cmp	r2, r3
 8009902:	f080 8187 	bcs.w	8009c14 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800990c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	f040 8087 	bne.w	8009a32 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800993c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800994e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009952:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800995a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1da      	bne.n	8009924 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800997e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009980:	f023 0301 	bic.w	r3, r3, #1
 8009984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3308      	adds	r3, #8
 800998e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009992:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009996:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800999a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e1      	bne.n	800996e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e3      	bne.n	80099aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2220      	movs	r2, #32
 80099e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a00:	f023 0310 	bic.w	r3, r3, #16
 8009a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e4      	bne.n	80099f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fa ff36 	bl	800489e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f8fd 	bl	8009c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a52:	e0df      	b.n	8009c14 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80d1 	beq.w	8009c18 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80cc 	beq.w	8009c18 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a88:	e853 3f00 	ldrex	r3, [r3]
 8009a8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e4      	bne.n	8009a80 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009acc:	f023 0301 	bic.w	r3, r3, #1
 8009ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ade:	633a      	str	r2, [r7, #48]	; 0x30
 8009ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e1      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	e853 3f00 	ldrex	r3, [r3]
 8009b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0310 	bic.w	r3, r3, #16
 8009b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2c:	69b9      	ldr	r1, [r7, #24]
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	e841 2300 	strex	r3, r2, [r1]
 8009b34:	617b      	str	r3, [r7, #20]
   return(result);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e4      	bne.n	8009b06 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f87f 	bl	8009c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b4e:	e063      	b.n	8009c18 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00e      	beq.n	8009b7a <HAL_UART_IRQHandler+0x59e>
 8009b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d008      	beq.n	8009b7a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fdd4 	bl	800a720 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b78:	e051      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d014      	beq.n	8009bb0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d008      	beq.n	8009bb0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d03a      	beq.n	8009c1c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	4798      	blx	r3
    }
    return;
 8009bae:	e035      	b.n	8009c1c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d009      	beq.n	8009bd0 <HAL_UART_IRQHandler+0x5f4>
 8009bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fd7e 	bl	800a6ca <UART_EndTransmit_IT>
    return;
 8009bce:	e026      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d009      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x614>
 8009bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fdad 	bl	800a748 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bee:	e016      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d010      	beq.n	8009c1e <HAL_UART_IRQHandler+0x642>
 8009bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da0c      	bge.n	8009c1e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fd95 	bl	800a734 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c0a:	e008      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
      return;
 8009c0c:	bf00      	nop
 8009c0e:	e006      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
    return;
 8009c10:	bf00      	nop
 8009c12:	e004      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
      return;
 8009c14:	bf00      	nop
 8009c16:	e002      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
      return;
 8009c18:	bf00      	nop
 8009c1a:	e000      	b.n	8009c1e <HAL_UART_IRQHandler+0x642>
    return;
 8009c1c:	bf00      	nop
  }
}
 8009c1e:	37e8      	adds	r7, #232	; 0xe8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c68:	b08c      	sub	sp, #48	; 0x30
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	689a      	ldr	r2, [r3, #8]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	4baf      	ldr	r3, [pc, #700]	; (8009f50 <UART_SetConfig+0x2ec>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	6812      	ldr	r2, [r2, #0]
 8009c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4aa4      	ldr	r2, [pc, #656]	; (8009f54 <UART_SetConfig+0x2f0>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d004      	beq.n	8009cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009cda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	6812      	ldr	r2, [r2, #0]
 8009ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	f023 010f 	bic.w	r1, r3, #15
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a95      	ldr	r2, [pc, #596]	; (8009f58 <UART_SetConfig+0x2f4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d125      	bne.n	8009d54 <UART_SetConfig+0xf0>
 8009d08:	2003      	movs	r0, #3
 8009d0a:	f7ff fb77 	bl	80093fc <LL_RCC_GetUSARTClockSource>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d81b      	bhi.n	8009d4c <UART_SetConfig+0xe8>
 8009d14:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0xb8>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009d2d 	.word	0x08009d2d
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d35 	.word	0x08009d35
 8009d28:	08009d45 	.word	0x08009d45
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d32:	e042      	b.n	8009dba <UART_SetConfig+0x156>
 8009d34:	2302      	movs	r3, #2
 8009d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d3a:	e03e      	b.n	8009dba <UART_SetConfig+0x156>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d42:	e03a      	b.n	8009dba <UART_SetConfig+0x156>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d4a:	e036      	b.n	8009dba <UART_SetConfig+0x156>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d52:	e032      	b.n	8009dba <UART_SetConfig+0x156>
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a7e      	ldr	r2, [pc, #504]	; (8009f54 <UART_SetConfig+0x2f0>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d12a      	bne.n	8009db4 <UART_SetConfig+0x150>
 8009d5e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009d62:	f7ff fb5b 	bl	800941c <LL_RCC_GetLPUARTClockSource>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d6c:	d01a      	beq.n	8009da4 <UART_SetConfig+0x140>
 8009d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d72:	d81b      	bhi.n	8009dac <UART_SetConfig+0x148>
 8009d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d78:	d00c      	beq.n	8009d94 <UART_SetConfig+0x130>
 8009d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d7e:	d815      	bhi.n	8009dac <UART_SetConfig+0x148>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d003      	beq.n	8009d8c <UART_SetConfig+0x128>
 8009d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d88:	d008      	beq.n	8009d9c <UART_SetConfig+0x138>
 8009d8a:	e00f      	b.n	8009dac <UART_SetConfig+0x148>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d92:	e012      	b.n	8009dba <UART_SetConfig+0x156>
 8009d94:	2302      	movs	r3, #2
 8009d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d9a:	e00e      	b.n	8009dba <UART_SetConfig+0x156>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009da2:	e00a      	b.n	8009dba <UART_SetConfig+0x156>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009daa:	e006      	b.n	8009dba <UART_SetConfig+0x156>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db2:	e002      	b.n	8009dba <UART_SetConfig+0x156>
 8009db4:	2310      	movs	r3, #16
 8009db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a65      	ldr	r2, [pc, #404]	; (8009f54 <UART_SetConfig+0x2f0>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	f040 8097 	bne.w	8009ef4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d823      	bhi.n	8009e16 <UART_SetConfig+0x1b2>
 8009dce:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <UART_SetConfig+0x170>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009e17 	.word	0x08009e17
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e17 	.word	0x08009e17
 8009de4:	08009e07 	.word	0x08009e07
 8009de8:	08009e17 	.word	0x08009e17
 8009dec:	08009e17 	.word	0x08009e17
 8009df0:	08009e17 	.word	0x08009e17
 8009df4:	08009e0f 	.word	0x08009e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df8:	f7fd fc10 	bl	800761c <HAL_RCC_GetPCLK1Freq>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dfe:	e010      	b.n	8009e22 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e00:	4b56      	ldr	r3, [pc, #344]	; (8009f5c <UART_SetConfig+0x2f8>)
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e04:	e00d      	b.n	8009e22 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e06:	f7fd fb89 	bl	800751c <HAL_RCC_GetSysClockFreq>
 8009e0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e0c:	e009      	b.n	8009e22 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e14:	e005      	b.n	8009e22 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 812b 	beq.w	800a080 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	4a4c      	ldr	r2, [pc, #304]	; (8009f60 <UART_SetConfig+0x2fc>)
 8009e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	4613      	mov	r3, r2
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	4413      	add	r3, r2
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d305      	bcc.n	8009e5a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d903      	bls.n	8009e62 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e60:	e10e      	b.n	800a080 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	2200      	movs	r2, #0
 8009e66:	60bb      	str	r3, [r7, #8]
 8009e68:	60fa      	str	r2, [r7, #12]
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	4a3c      	ldr	r2, [pc, #240]	; (8009f60 <UART_SetConfig+0x2fc>)
 8009e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2200      	movs	r2, #0
 8009e78:	603b      	str	r3, [r7, #0]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e84:	f7f6 fe68 	bl	8000b58 <__aeabi_uldivmod>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	4619      	mov	r1, r3
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	020b      	lsls	r3, r1, #8
 8009e9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e9e:	0202      	lsls	r2, r0, #8
 8009ea0:	6979      	ldr	r1, [r7, #20]
 8009ea2:	6849      	ldr	r1, [r1, #4]
 8009ea4:	0849      	lsrs	r1, r1, #1
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	4605      	mov	r5, r0
 8009eac:	eb12 0804 	adds.w	r8, r2, r4
 8009eb0:	eb43 0905 	adc.w	r9, r3, r5
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	469a      	mov	sl, r3
 8009ebc:	4693      	mov	fp, r2
 8009ebe:	4652      	mov	r2, sl
 8009ec0:	465b      	mov	r3, fp
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	f7f6 fe47 	bl	8000b58 <__aeabi_uldivmod>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4613      	mov	r3, r2
 8009ed0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ed8:	d308      	bcc.n	8009eec <UART_SetConfig+0x288>
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee0:	d204      	bcs.n	8009eec <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6a3a      	ldr	r2, [r7, #32]
 8009ee8:	60da      	str	r2, [r3, #12]
 8009eea:	e0c9      	b.n	800a080 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009ef2:	e0c5      	b.n	800a080 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009efc:	d16d      	bne.n	8009fda <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b07      	cmp	r3, #7
 8009f06:	d82d      	bhi.n	8009f64 <UART_SetConfig+0x300>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x2ac>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f3f 	.word	0x08009f3f
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f65 	.word	0x08009f65
 8009f28:	08009f65 	.word	0x08009f65
 8009f2c:	08009f47 	.word	0x08009f47
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f30:	f7fd fb8a 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 8009f34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f36:	e01b      	b.n	8009f70 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f38:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <UART_SetConfig+0x2f8>)
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f3c:	e018      	b.n	8009f70 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f3e:	f7fd faed 	bl	800751c <HAL_RCC_GetSysClockFreq>
 8009f42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f44:	e014      	b.n	8009f70 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f4c:	e010      	b.n	8009f70 <UART_SetConfig+0x30c>
 8009f4e:	bf00      	nop
 8009f50:	cfff69f3 	.word	0xcfff69f3
 8009f54:	40008000 	.word	0x40008000
 8009f58:	40013800 	.word	0x40013800
 8009f5c:	00f42400 	.word	0x00f42400
 8009f60:	08012f64 	.word	0x08012f64
      default:
        pclk = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 8084 	beq.w	800a080 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	4a4b      	ldr	r2, [pc, #300]	; (800a0ac <UART_SetConfig+0x448>)
 8009f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f82:	461a      	mov	r2, r3
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f8a:	005a      	lsls	r2, r3, #1
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	085b      	lsrs	r3, r3, #1
 8009f92:	441a      	add	r2, r3
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	2b0f      	cmp	r3, #15
 8009fa2:	d916      	bls.n	8009fd2 <UART_SetConfig+0x36e>
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009faa:	d212      	bcs.n	8009fd2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f023 030f 	bic.w	r3, r3, #15
 8009fb4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	8bfb      	ldrh	r3, [r7, #30]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	8bfa      	ldrh	r2, [r7, #30]
 8009fce:	60da      	str	r2, [r3, #12]
 8009fd0:	e056      	b.n	800a080 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fd8:	e052      	b.n	800a080 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	2b07      	cmp	r3, #7
 8009fe2:	d822      	bhi.n	800a02a <UART_SetConfig+0x3c6>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <UART_SetConfig+0x388>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a015 	.word	0x0800a015
 8009ff4:	0800a02b 	.word	0x0800a02b
 8009ff8:	0800a01b 	.word	0x0800a01b
 8009ffc:	0800a02b 	.word	0x0800a02b
 800a000:	0800a02b 	.word	0x0800a02b
 800a004:	0800a02b 	.word	0x0800a02b
 800a008:	0800a023 	.word	0x0800a023
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a00c:	f7fd fb1c 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 800a010:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a012:	e010      	b.n	800a036 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a014:	4b26      	ldr	r3, [pc, #152]	; (800a0b0 <UART_SetConfig+0x44c>)
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a018:	e00d      	b.n	800a036 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a01a:	f7fd fa7f 	bl	800751c <HAL_RCC_GetSysClockFreq>
 800a01e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a020:	e009      	b.n	800a036 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a028:	e005      	b.n	800a036 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a034:	bf00      	nop
    }

    if (pclk != 0U)
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d021      	beq.n	800a080 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	4a1a      	ldr	r2, [pc, #104]	; (800a0ac <UART_SetConfig+0x448>)
 800a042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a046:	461a      	mov	r2, r3
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	441a      	add	r2, r3
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a05e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	2b0f      	cmp	r3, #15
 800a064:	d909      	bls.n	800a07a <UART_SetConfig+0x416>
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a06c:	d205      	bcs.n	800a07a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a06e:	6a3b      	ldr	r3, [r7, #32]
 800a070:	b29a      	uxth	r2, r3
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	60da      	str	r2, [r3, #12]
 800a078:	e002      	b.n	800a080 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2201      	movs	r2, #1
 800a084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2200      	movs	r2, #0
 800a094:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a09c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3730      	adds	r7, #48	; 0x30
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0aa:	bf00      	nop
 800a0ac:	08012f64 	.word	0x08012f64
 800a0b0:	00f42400 	.word	0x00f42400

0800a0b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00a      	beq.n	800a0de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00a      	beq.n	800a122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	f003 0308 	and.w	r3, r3, #8
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a148:	f003 0310 	and.w	r3, r3, #16
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	430a      	orrs	r2, r1
 800a164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01a      	beq.n	800a1ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b2:	d10a      	bne.n	800a1ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	605a      	str	r2, [r3, #4]
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b098      	sub	sp, #96	; 0x60
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a208:	f7fa f85c 	bl	80042c4 <HAL_GetTick>
 800a20c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0308 	and.w	r3, r3, #8
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d12f      	bne.n	800a27c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a21c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a224:	2200      	movs	r2, #0
 800a226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f88e 	bl	800a34c <UART_WaitOnFlagUntilTimeout>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d022      	beq.n	800a27c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a24a:	653b      	str	r3, [r7, #80]	; 0x50
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a254:	647b      	str	r3, [r7, #68]	; 0x44
 800a256:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e6      	bne.n	800a236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e063      	b.n	800a344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0304 	and.w	r3, r3, #4
 800a286:	2b04      	cmp	r3, #4
 800a288:	d149      	bne.n	800a31e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a28a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a292:	2200      	movs	r2, #0
 800a294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f857 	bl	800a34c <UART_WaitOnFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d03c      	beq.n	800a31e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c2:	633b      	str	r3, [r7, #48]	; 0x30
 800a2c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e6      	bne.n	800a2a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f023 0301 	bic.w	r3, r3, #1
 800a2ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2f6:	61fa      	str	r2, [r7, #28]
 800a2f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	69b9      	ldr	r1, [r7, #24]
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	617b      	str	r3, [r7, #20]
   return(result);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e5      	bne.n	800a2d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2220      	movs	r2, #32
 800a30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e012      	b.n	800a344 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3758      	adds	r7, #88	; 0x58
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	4613      	mov	r3, r2
 800a35a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35c:	e049      	b.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a364:	d045      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a366:	f7f9 ffad 	bl	80042c4 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <UART_WaitOnFlagUntilTimeout+0x30>
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e048      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d031      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f003 0308 	and.w	r3, r3, #8
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d110      	bne.n	800a3be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2208      	movs	r2, #8
 800a3a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f879 	bl	800a49c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e029      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3cc:	d111      	bne.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f85f 	bl	800a49c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e00f      	b.n	800a412 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69da      	ldr	r2, [r3, #28]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	bf0c      	ite	eq
 800a402:	2301      	moveq	r3, #1
 800a404:	2300      	movne	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	461a      	mov	r2, r3
 800a40a:	79fb      	ldrb	r3, [r7, #7]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d0a6      	beq.n	800a35e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b08f      	sub	sp, #60	; 0x3c
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a436:	637b      	str	r3, [r7, #52]	; 0x34
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a442:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e6      	bne.n	800a422 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3308      	adds	r3, #8
 800a45a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	e853 3f00 	ldrex	r3, [r3]
 800a462:	60bb      	str	r3, [r7, #8]
   return(result);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a46a:	633b      	str	r3, [r7, #48]	; 0x30
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a474:	61ba      	str	r2, [r7, #24]
 800a476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6979      	ldr	r1, [r7, #20]
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	e841 2300 	strex	r3, r2, [r1]
 800a480:	613b      	str	r3, [r7, #16]
   return(result);
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e5      	bne.n	800a454 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2220      	movs	r2, #32
 800a48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a490:	bf00      	nop
 800a492:	373c      	adds	r7, #60	; 0x3c
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b095      	sub	sp, #84	; 0x54
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a4c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a4c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e6      	bne.n	800a4a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4ec:	f023 0301 	bic.w	r3, r3, #1
 800a4f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e3      	bne.n	800a4d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a512:	2b01      	cmp	r3, #1
 800a514:	d118      	bne.n	800a548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60bb      	str	r3, [r7, #8]
   return(result);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f023 0310 	bic.w	r3, r3, #16
 800a52a:	647b      	str	r3, [r7, #68]	; 0x44
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	461a      	mov	r2, r3
 800a532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	613b      	str	r3, [r7, #16]
   return(result);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e6      	bne.n	800a516 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a55c:	bf00      	nop
 800a55e:	3754      	adds	r7, #84	; 0x54
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b090      	sub	sp, #64	; 0x40
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d137      	bne.n	800a5f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a586:	2200      	movs	r2, #0
 800a588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3308      	adds	r3, #8
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	e853 3f00 	ldrex	r3, [r3]
 800a59a:	623b      	str	r3, [r7, #32]
   return(result);
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5ac:	633a      	str	r2, [r7, #48]	; 0x30
 800a5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b4:	e841 2300 	strex	r3, r2, [r1]
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1e5      	bne.n	800a58c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	61fb      	str	r3, [r7, #28]
 800a5e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	69b9      	ldr	r1, [r7, #24]
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e6      	bne.n	800a5c0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5f2:	e002      	b.n	800a5fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a5f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a5f6:	f7f8 fdf3 	bl	80031e0 <HAL_UART_TxCpltCallback>
}
 800a5fa:	bf00      	nop
 800a5fc:	3740      	adds	r7, #64	; 0x40
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fb07 	bl	8009c24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a616:	bf00      	nop
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a632:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	d109      	bne.n	800a65e <UART_DMAError+0x40>
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2b21      	cmp	r3, #33	; 0x21
 800a64e:	d106      	bne.n	800a65e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a658:	6978      	ldr	r0, [r7, #20]
 800a65a:	f7ff fede 	bl	800a41a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a668:	2b40      	cmp	r3, #64	; 0x40
 800a66a:	d109      	bne.n	800a680 <UART_DMAError+0x62>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b22      	cmp	r3, #34	; 0x22
 800a670:	d106      	bne.n	800a680 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2200      	movs	r2, #0
 800a676:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a67a:	6978      	ldr	r0, [r7, #20]
 800a67c:	f7ff ff0e 	bl	800a49c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a686:	f043 0210 	orr.w	r2, r3, #16
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a690:	6978      	ldr	r0, [r7, #20]
 800a692:	f7ff fad1 	bl	8009c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a696:	bf00      	nop
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff fabb 	bl	8009c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e6      	bne.n	800a6d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7f8 fd64 	bl	80031e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a718:	bf00      	nop
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d101      	bne.n	800a772 <HAL_UARTEx_DisableFifoMode+0x16>
 800a76e:	2302      	movs	r3, #2
 800a770:	e027      	b.n	800a7c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2224      	movs	r2, #36	; 0x24
 800a77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0201 	bic.w	r2, r2, #1
 800a798:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2220      	movs	r2, #32
 800a7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d101      	bne.n	800a7e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	e02d      	b.n	800a842 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2224      	movs	r2, #36	; 0x24
 800a7f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 0201 	bic.w	r2, r2, #1
 800a80c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f850 	bl	800a8c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a85e:	2302      	movs	r3, #2
 800a860:	e02d      	b.n	800a8be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2224      	movs	r2, #36	; 0x24
 800a86e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f812 	bl	800a8c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d108      	bne.n	800a8ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8e8:	e031      	b.n	800a94e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8ea:	2308      	movs	r3, #8
 800a8ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8ee:	2308      	movs	r3, #8
 800a8f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	0e5b      	lsrs	r3, r3, #25
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 0307 	and.w	r3, r3, #7
 800a900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	0f5b      	lsrs	r3, r3, #29
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	7b3a      	ldrb	r2, [r7, #12]
 800a916:	4911      	ldr	r1, [pc, #68]	; (800a95c <UARTEx_SetNbDataToProcess+0x94>)
 800a918:	5c8a      	ldrb	r2, [r1, r2]
 800a91a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a91e:	7b3a      	ldrb	r2, [r7, #12]
 800a920:	490f      	ldr	r1, [pc, #60]	; (800a960 <UARTEx_SetNbDataToProcess+0x98>)
 800a922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a924:	fb93 f3f2 	sdiv	r3, r3, r2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	7b7a      	ldrb	r2, [r7, #13]
 800a934:	4909      	ldr	r1, [pc, #36]	; (800a95c <UARTEx_SetNbDataToProcess+0x94>)
 800a936:	5c8a      	ldrb	r2, [r1, r2]
 800a938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a93c:	7b7a      	ldrb	r2, [r7, #13]
 800a93e:	4908      	ldr	r1, [pc, #32]	; (800a960 <UARTEx_SetNbDataToProcess+0x98>)
 800a940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a942:	fb93 f3f2 	sdiv	r3, r3, r2
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a94e:	bf00      	nop
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	08012f7c 	.word	0x08012f7c
 800a960:	08012f84 	.word	0x08012f84

0800a964 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a96e:	f107 0308 	add.w	r3, r7, #8
 800a972:	2218      	movs	r2, #24
 800a974:	2100      	movs	r1, #0
 800a976:	4618      	mov	r0, r3
 800a978:	f001 f8d8 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a97c:	233f      	movs	r3, #63	; 0x3f
 800a97e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a980:	2381      	movs	r3, #129	; 0x81
 800a982:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a984:	1dfb      	adds	r3, r7, #7
 800a986:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a988:	2301      	movs	r3, #1
 800a98a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a98c:	f107 0308 	add.w	r3, r7, #8
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f001 fb54 	bl	800c040 <hci_send_req>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da01      	bge.n	800a9a2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a99e:	23ff      	movs	r3, #255	; 0xff
 800a9a0:	e000      	b.n	800a9a4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3720      	adds	r7, #32
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800a9ac:	b5b0      	push	{r4, r5, r7, lr}
 800a9ae:	b0ce      	sub	sp, #312	; 0x138
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9be:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9d6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800a9da:	4602      	mov	r2, r0
 800a9dc:	801a      	strh	r2, [r3, #0]
 800a9de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a9e2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a9ea:	f107 0310 	add.w	r3, r7, #16
 800a9ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a9f2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	f107 0210 	add.w	r2, r7, #16
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800aa02:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aa06:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800aa0a:	4413      	add	r3, r2
 800aa0c:	3309      	adds	r3, #9
 800aa0e:	f107 0210 	add.w	r2, r7, #16
 800aa12:	4413      	add	r3, r2
 800aa14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aa1c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800aa20:	2200      	movs	r2, #0
 800aa22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800aa2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa32:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800aa36:	7812      	ldrb	r2, [r2, #0]
 800aa38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa3e:	3301      	adds	r3, #1
 800aa40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800aa44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa48:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa4c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800aa50:	8812      	ldrh	r2, [r2, #0]
 800aa52:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800aa56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa5a:	3302      	adds	r3, #2
 800aa5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800aa60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa68:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800aa6c:	8812      	ldrh	r2, [r2, #0]
 800aa6e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800aa72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa76:	3302      	adds	r3, #2
 800aa78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800aa7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa80:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aa84:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800aa88:	7812      	ldrb	r2, [r2, #0]
 800aa8a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800aa8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa90:	3301      	adds	r3, #1
 800aa92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800aa96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa9a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800aa9e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800aaa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800aaaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aaae:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aab2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800aab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aab8:	3301      	adds	r3, #1
 800aaba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800aabe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aac2:	3308      	adds	r3, #8
 800aac4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800aac8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800aacc:	4618      	mov	r0, r3
 800aace:	f001 f81d 	bl	800bb0c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800aad2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800aad6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aada:	4413      	add	r3, r2
 800aadc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800aae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aae4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aae8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800aaea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaee:	3301      	adds	r3, #1
 800aaf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800aaf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aaf8:	3301      	adds	r3, #1
 800aafa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aafe:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f802 	bl	800bb0c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ab08:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800ab0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ab10:	4413      	add	r3, r2
 800ab12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800ab16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab1a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ab1e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ab20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab24:	3302      	adds	r3, #2
 800ab26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800ab2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab2e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ab32:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ab34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab38:	3302      	adds	r3, #2
 800ab3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab42:	2218      	movs	r2, #24
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fff0 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab4c:	233f      	movs	r3, #63	; 0x3f
 800ab4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800ab52:	2383      	movs	r3, #131	; 0x83
 800ab54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab58:	f107 0310 	add.w	r3, r7, #16
 800ab5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab68:	f107 030f 	add.w	r3, r7, #15
 800ab6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 fa5f 	bl	800c040 <hci_send_req>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	da01      	bge.n	800ab8c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ab88:	23ff      	movs	r3, #255	; 0xff
 800ab8a:	e004      	b.n	800ab96 <aci_gap_set_discoverable+0x1ea>
  return status;
 800ab8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ab94:	781b      	ldrb	r3, [r3, #0]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bdb0      	pop	{r4, r5, r7, pc}

0800aba0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b0cc      	sub	sp, #304	; 0x130
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4602      	mov	r2, r0
 800aba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800abb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800abb2:	f107 0310 	add.w	r3, r7, #16
 800abb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800abba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abbe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800abcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abd4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800abd8:	7812      	ldrb	r2, [r2, #0]
 800abda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abe0:	3301      	adds	r3, #1
 800abe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800abe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abea:	2218      	movs	r2, #24
 800abec:	2100      	movs	r1, #0
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 ff9c 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800abf4:	233f      	movs	r3, #63	; 0x3f
 800abf6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800abfa:	2385      	movs	r3, #133	; 0x85
 800abfc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac00:	f107 0310 	add.w	r3, r7, #16
 800ac04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ac08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ac10:	f107 030f 	add.w	r3, r7, #15
 800ac14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac22:	2100      	movs	r1, #0
 800ac24:	4618      	mov	r0, r3
 800ac26:	f001 fa0b 	bl	800c040 <hci_send_req>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	da01      	bge.n	800ac34 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ac30:	23ff      	movs	r3, #255	; 0xff
 800ac32:	e004      	b.n	800ac3e <aci_gap_set_io_capability+0x9e>
  return status;
 800ac34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ac3c:	781b      	ldrb	r3, [r3, #0]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ac48:	b5b0      	push	{r4, r5, r7, lr}
 800ac4a:	b0cc      	sub	sp, #304	; 0x130
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4605      	mov	r5, r0
 800ac50:	460c      	mov	r4, r1
 800ac52:	4610      	mov	r0, r2
 800ac54:	4619      	mov	r1, r3
 800ac56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac5a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ac5e:	462a      	mov	r2, r5
 800ac60:	701a      	strb	r2, [r3, #0]
 800ac62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	701a      	strb	r2, [r3, #0]
 800ac6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac72:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ac76:	4602      	mov	r2, r0
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac82:	460a      	mov	r2, r1
 800ac84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ac86:	f107 0310 	add.w	r3, r7, #16
 800ac8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800aca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aca8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800acac:	7812      	ldrb	r2, [r2, #0]
 800acae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800acb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acb4:	3301      	adds	r3, #1
 800acb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800acba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acc2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800acca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acce:	3301      	adds	r3, #1
 800acd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800acd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acd8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acdc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ace0:	7812      	ldrb	r2, [r2, #0]
 800ace2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ace4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ace8:	3301      	adds	r3, #1
 800acea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800acee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acf2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acf6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800acfa:	7812      	ldrb	r2, [r2, #0]
 800acfc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800acfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad02:	3301      	adds	r3, #1
 800ad04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ad08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad0c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ad10:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ad12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad16:	3301      	adds	r3, #1
 800ad18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800ad1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad20:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ad24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ad26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800ad30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad34:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ad38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ad3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad3e:	3301      	adds	r3, #1
 800ad40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800ad44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad48:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ad4c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ad50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad54:	3304      	adds	r3, #4
 800ad56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800ad5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad5e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ad62:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ad64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad68:	3301      	adds	r3, #1
 800ad6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ad6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad72:	2218      	movs	r2, #24
 800ad74:	2100      	movs	r1, #0
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 fed8 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad7c:	233f      	movs	r3, #63	; 0x3f
 800ad7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800ad82:	2386      	movs	r3, #134	; 0x86
 800ad84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad88:	f107 0310 	add.w	r3, r7, #16
 800ad8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad98:	f107 030f 	add.w	r3, r7, #15
 800ad9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ada0:	2301      	movs	r3, #1
 800ada2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ada6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f001 f947 	bl	800c040 <hci_send_req>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	da01      	bge.n	800adbc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800adb8:	23ff      	movs	r3, #255	; 0xff
 800adba:	e004      	b.n	800adc6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800adbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adc0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800adc4:	781b      	ldrb	r3, [r3, #0]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800adcc:	46bd      	mov	sp, r7
 800adce:	bdb0      	pop	{r4, r5, r7, pc}

0800add0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b0cc      	sub	sp, #304	; 0x130
 800add4:	af00      	add	r7, sp, #0
 800add6:	4602      	mov	r2, r0
 800add8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800addc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ade0:	6019      	str	r1, [r3, #0]
 800ade2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ade6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800adea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800adec:	f107 0310 	add.w	r3, r7, #16
 800adf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800adf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adf8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800adfc:	2200      	movs	r2, #0
 800adfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ae06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ae12:	8812      	ldrh	r2, [r2, #0]
 800ae14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ae16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae1a:	3302      	adds	r3, #2
 800ae1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800ae20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae28:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800ae2c:	6812      	ldr	r2, [r2, #0]
 800ae2e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800ae32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae36:	3304      	adds	r3, #4
 800ae38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ae3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae40:	2218      	movs	r2, #24
 800ae42:	2100      	movs	r1, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fe71 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae4a:	233f      	movs	r3, #63	; 0x3f
 800ae4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800ae50:	2388      	movs	r3, #136	; 0x88
 800ae52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ae56:	f107 0310 	add.w	r3, r7, #16
 800ae5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ae66:	f107 030f 	add.w	r3, r7, #15
 800ae6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ae74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f001 f8e0 	bl	800c040 <hci_send_req>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	da01      	bge.n	800ae8a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800ae86:	23ff      	movs	r3, #255	; 0xff
 800ae88:	e004      	b.n	800ae94 <aci_gap_pass_key_resp+0xc4>
  return status;
 800ae8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae92:	781b      	ldrb	r3, [r3, #0]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800ae9e:	b590      	push	{r4, r7, lr}
 800aea0:	b0cd      	sub	sp, #308	; 0x134
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	4604      	mov	r4, r0
 800aea6:	4608      	mov	r0, r1
 800aea8:	4611      	mov	r1, r2
 800aeaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aeae:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aeb8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800aebc:	4622      	mov	r2, r4
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aec4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800aec8:	4602      	mov	r2, r0
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aed0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800aed4:	460a      	mov	r2, r1
 800aed6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800aed8:	f107 0310 	add.w	r3, r7, #16
 800aedc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800aee0:	f107 0308 	add.w	r3, r7, #8
 800aee4:	2207      	movs	r2, #7
 800aee6:	2100      	movs	r1, #0
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fe1f 	bl	800bb2c <Osal_MemSet>
  int index_input = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800aef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aef8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aefc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800af00:	7812      	ldrb	r2, [r2, #0]
 800af02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af08:	3301      	adds	r3, #1
 800af0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800af0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af16:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800af1a:	7812      	ldrb	r2, [r2, #0]
 800af1c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800af1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af22:	3301      	adds	r3, #1
 800af24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800af28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af30:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800af34:	7812      	ldrb	r2, [r2, #0]
 800af36:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800af38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af3c:	3301      	adds	r3, #1
 800af3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800af42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af46:	2218      	movs	r2, #24
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 fdee 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800af50:	233f      	movs	r3, #63	; 0x3f
 800af52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800af56:	238a      	movs	r3, #138	; 0x8a
 800af58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af5c:	f107 0310 	add.w	r3, r7, #16
 800af60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800af6c:	f107 0308 	add.w	r3, r7, #8
 800af70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800af74:	2307      	movs	r3, #7
 800af76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af7e:	2100      	movs	r1, #0
 800af80:	4618      	mov	r0, r3
 800af82:	f001 f85d 	bl	800c040 <hci_send_req>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	da01      	bge.n	800af90 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800af8c:	23ff      	movs	r3, #255	; 0xff
 800af8e:	e02e      	b.n	800afee <aci_gap_init+0x150>
  if ( resp.Status )
 800af90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <aci_gap_init+0x10c>
    return resp.Status;
 800af9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afa2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	e021      	b.n	800afee <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800afaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800afc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afc8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afcc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800afd6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800afd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afdc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afe0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800afea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd90      	pop	{r4, r7, pc}

0800aff8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b0cc      	sub	sp, #304	; 0x130
 800affc:	af00      	add	r7, sp, #0
 800affe:	4602      	mov	r2, r0
 800b000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b008:	6019      	str	r1, [r3, #0]
 800b00a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b00e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b012:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b014:	f107 0310 	add.w	r3, r7, #16
 800b018:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b01c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b020:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b024:	2200      	movs	r2, #0
 800b026:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800b02e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b032:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b036:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b03a:	7812      	ldrb	r2, [r2, #0]
 800b03c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b03e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b042:	3301      	adds	r3, #1
 800b044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800b048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b04c:	1c58      	adds	r0, r3, #1
 800b04e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b052:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b056:	781a      	ldrb	r2, [r3, #0]
 800b058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b060:	6819      	ldr	r1, [r3, #0]
 800b062:	f000 fd53 	bl	800bb0c <Osal_MemCpy>
  index_input += AdvDataLen;
 800b066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b06a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b074:	4413      	add	r3, r2
 800b076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b07a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b07e:	2218      	movs	r2, #24
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f000 fd52 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b088:	233f      	movs	r3, #63	; 0x3f
 800b08a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b08e:	238e      	movs	r3, #142	; 0x8e
 800b090:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b094:	f107 0310 	add.w	r3, r7, #16
 800b098:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b09c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b0a4:	f107 030f 	add.w	r3, r7, #15
 800b0a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b0b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 ffc1 	bl	800c040 <hci_send_req>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	da01      	bge.n	800b0c8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800b0c4:	23ff      	movs	r3, #255	; 0xff
 800b0c6:	e004      	b.n	800b0d2 <aci_gap_update_adv_data+0xda>
  return status;
 800b0c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b0d0:	781b      	ldrb	r3, [r3, #0]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b0e6:	f107 0308 	add.w	r3, r7, #8
 800b0ea:	2218      	movs	r2, #24
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fd1c 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0f4:	233f      	movs	r3, #63	; 0x3f
 800b0f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b0f8:	2392      	movs	r3, #146	; 0x92
 800b0fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b0fc:	1dfb      	adds	r3, r7, #7
 800b0fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b100:	2301      	movs	r3, #1
 800b102:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b104:	f107 0308 	add.w	r3, r7, #8
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 ff98 	bl	800c040 <hci_send_req>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	da01      	bge.n	800b11a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b116:	23ff      	movs	r3, #255	; 0xff
 800b118:	e000      	b.n	800b11c <aci_gap_configure_whitelist+0x40>
  return status;
 800b11a:	79fb      	ldrb	r3, [r7, #7]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b0cc      	sub	sp, #304	; 0x130
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4602      	mov	r2, r0
 800b12c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b130:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b134:	801a      	strh	r2, [r3, #0]
 800b136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b13a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b13e:	460a      	mov	r2, r1
 800b140:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800b142:	f107 0310 	add.w	r3, r7, #16
 800b146:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b14a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b14e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b160:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b164:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b168:	8812      	ldrh	r2, [r2, #0]
 800b16a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b170:	3302      	adds	r3, #2
 800b172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800b176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b17a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b17e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b182:	7812      	ldrb	r2, [r2, #0]
 800b184:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b186:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b18a:	3301      	adds	r3, #1
 800b18c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b190:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b194:	2218      	movs	r2, #24
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fcc7 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b19e:	233f      	movs	r3, #63	; 0x3f
 800b1a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800b1a4:	23a5      	movs	r3, #165	; 0xa5
 800b1a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b1aa:	f107 0310 	add.w	r3, r7, #16
 800b1ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b1b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1ba:	f107 030f 	add.w	r3, r7, #15
 800b1be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b1c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 ff36 	bl	800c040 <hci_send_req>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da01      	bge.n	800b1de <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800b1da:	23ff      	movs	r3, #255	; 0xff
 800b1dc:	e004      	b.n	800b1e8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800b1de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b1e6:	781b      	ldrb	r3, [r3, #0]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b088      	sub	sp, #32
 800b1f6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b1fc:	f107 0308 	add.w	r3, r7, #8
 800b200:	2218      	movs	r2, #24
 800b202:	2100      	movs	r1, #0
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fc91 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b20a:	233f      	movs	r3, #63	; 0x3f
 800b20c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b20e:	f240 1301 	movw	r3, #257	; 0x101
 800b212:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b214:	1dfb      	adds	r3, r7, #7
 800b216:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b218:	2301      	movs	r3, #1
 800b21a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b21c:	f107 0308 	add.w	r3, r7, #8
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f000 ff0c 	bl	800c040 <hci_send_req>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	da01      	bge.n	800b232 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b22e:	23ff      	movs	r3, #255	; 0xff
 800b230:	e000      	b.n	800b234 <aci_gatt_init+0x42>
  return status;
 800b232:	79fb      	ldrb	r3, [r7, #7]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3720      	adds	r7, #32
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b0cf      	sub	sp, #316	; 0x13c
 800b240:	af00      	add	r7, sp, #0
 800b242:	4604      	mov	r4, r0
 800b244:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800b248:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800b24c:	6001      	str	r1, [r0, #0]
 800b24e:	4610      	mov	r0, r2
 800b250:	4619      	mov	r1, r3
 800b252:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b256:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b25a:	4622      	mov	r2, r4
 800b25c:	701a      	strb	r2, [r3, #0]
 800b25e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b262:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b266:	4602      	mov	r2, r0
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b26e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b272:	460a      	mov	r2, r1
 800b274:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b276:	f107 0310 	add.w	r3, r7, #16
 800b27a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b27e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b282:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d00a      	beq.n	800b2a2 <aci_gatt_add_service+0x66>
 800b28c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b290:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d101      	bne.n	800b29e <aci_gatt_add_service+0x62>
 800b29a:	2311      	movs	r3, #17
 800b29c:	e002      	b.n	800b2a4 <aci_gatt_add_service+0x68>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e000      	b.n	800b2a4 <aci_gatt_add_service+0x68>
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	f107 0210 	add.w	r2, r7, #16
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b2ae:	f107 030c 	add.w	r3, r7, #12
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fc38 	bl	800bb2c <Osal_MemSet>
  int index_input = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800b2c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2c6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b2ca:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b2d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800b2dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b2e0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d002      	beq.n	800b2f0 <aci_gatt_add_service+0xb4>
 800b2ea:	2b02      	cmp	r3, #2
 800b2ec:	d004      	beq.n	800b2f8 <aci_gatt_add_service+0xbc>
 800b2ee:	e007      	b.n	800b300 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b2f6:	e005      	b.n	800b304 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800b2f8:	2310      	movs	r3, #16
 800b2fa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b2fe:	e001      	b.n	800b304 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800b300:	2397      	movs	r3, #151	; 0x97
 800b302:	e06c      	b.n	800b3de <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800b304:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b308:	1c58      	adds	r0, r3, #1
 800b30a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b30e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b312:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b316:	6819      	ldr	r1, [r3, #0]
 800b318:	f000 fbf8 	bl	800bb0c <Osal_MemCpy>
    index_input += size;
 800b31c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b320:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b324:	4413      	add	r3, r2
 800b326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800b32a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b32e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b332:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800b336:	7812      	ldrb	r2, [r2, #0]
 800b338:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b33a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b33e:	3301      	adds	r3, #1
 800b340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800b344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b348:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b34c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800b350:	7812      	ldrb	r2, [r2, #0]
 800b352:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b354:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b358:	3301      	adds	r3, #1
 800b35a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b35e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b362:	2218      	movs	r2, #24
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f000 fbe0 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b36c:	233f      	movs	r3, #63	; 0x3f
 800b36e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b372:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b376:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b37a:	f107 0310 	add.w	r3, r7, #16
 800b37e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b386:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b38a:	f107 030c 	add.w	r3, r7, #12
 800b38e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b392:	2303      	movs	r3, #3
 800b394:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b398:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b39c:	2100      	movs	r1, #0
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fe4e 	bl	800c040 <hci_send_req>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	da01      	bge.n	800b3ae <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800b3aa:	23ff      	movs	r3, #255	; 0xff
 800b3ac:	e017      	b.n	800b3de <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800b3ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b3b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d005      	beq.n	800b3c8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800b3bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b3c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	e00a      	b.n	800b3de <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800b3c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b3cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b3da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd90      	pop	{r4, r7, pc}

0800b3e8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800b3e8:	b590      	push	{r4, r7, lr}
 800b3ea:	b0d1      	sub	sp, #324	; 0x144
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800b3f6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800b3fa:	600a      	str	r2, [r1, #0]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b402:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b406:	4622      	mov	r2, r4
 800b408:	801a      	strh	r2, [r3, #0]
 800b40a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b40e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b412:	4602      	mov	r2, r0
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b41a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b41e:	460a      	mov	r2, r1
 800b420:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b422:	f107 0318 	add.w	r3, r7, #24
 800b426:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b42a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b42e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d00a      	beq.n	800b44e <aci_gatt_add_char+0x66>
 800b438:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b43c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b02      	cmp	r3, #2
 800b444:	d101      	bne.n	800b44a <aci_gatt_add_char+0x62>
 800b446:	2313      	movs	r3, #19
 800b448:	e002      	b.n	800b450 <aci_gatt_add_char+0x68>
 800b44a:	2303      	movs	r3, #3
 800b44c:	e000      	b.n	800b450 <aci_gatt_add_char+0x68>
 800b44e:	2305      	movs	r3, #5
 800b450:	f107 0218 	add.w	r2, r7, #24
 800b454:	4413      	add	r3, r2
 800b456:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b45a:	f107 0314 	add.w	r3, r7, #20
 800b45e:	2203      	movs	r2, #3
 800b460:	2100      	movs	r1, #0
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fb62 	bl	800bb2c <Osal_MemSet>
  int index_input = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800b46e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b472:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800b476:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800b47a:	8812      	ldrh	r2, [r2, #0]
 800b47c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b47e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b482:	3302      	adds	r3, #2
 800b484:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800b488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b48c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800b490:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800b494:	7812      	ldrb	r2, [r2, #0]
 800b496:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b498:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b49c:	3301      	adds	r3, #1
 800b49e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800b4a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4a6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d002      	beq.n	800b4b6 <aci_gatt_add_char+0xce>
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d004      	beq.n	800b4be <aci_gatt_add_char+0xd6>
 800b4b4:	e007      	b.n	800b4c6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b4bc:	e005      	b.n	800b4ca <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800b4be:	2310      	movs	r3, #16
 800b4c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b4c4:	e001      	b.n	800b4ca <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800b4c6:	2397      	movs	r3, #151	; 0x97
 800b4c8:	e091      	b.n	800b5ee <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800b4ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b4ce:	1cd8      	adds	r0, r3, #3
 800b4d0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b4d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b4d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	f000 fb15 	bl	800bb0c <Osal_MemCpy>
    index_input += size;
 800b4e2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b4e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800b4f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b4f4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800b4f8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b4fc:	8812      	ldrh	r2, [r2, #0]
 800b4fe:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b504:	3302      	adds	r3, #2
 800b506:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800b50a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b50e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b512:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b518:	3301      	adds	r3, #1
 800b51a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800b51e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b522:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b526:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b528:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b52c:	3301      	adds	r3, #1
 800b52e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800b532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b536:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b53a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b53c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b540:	3301      	adds	r3, #1
 800b542:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800b546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b54a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b54e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b550:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b554:	3301      	adds	r3, #1
 800b556:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800b55a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b55e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b562:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b564:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b568:	3301      	adds	r3, #1
 800b56a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b56e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b572:	2218      	movs	r2, #24
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f000 fad8 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b57c:	233f      	movs	r3, #63	; 0x3f
 800b57e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b582:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b586:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b58a:	f107 0318 	add.w	r3, r7, #24
 800b58e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b592:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b596:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b59a:	f107 0314 	add.w	r3, r7, #20
 800b59e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b5a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fd46 	bl	800c040 <hci_send_req>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	da01      	bge.n	800b5be <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800b5ba:	23ff      	movs	r3, #255	; 0xff
 800b5bc:	e017      	b.n	800b5ee <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800b5be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b5c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d005      	beq.n	800b5d8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800b5cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b5d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	e00a      	b.n	800b5ee <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800b5d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b5dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b5ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd90      	pop	{r4, r7, pc}

0800b5f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800b5f8:	b5b0      	push	{r4, r5, r7, lr}
 800b5fa:	b0cc      	sub	sp, #304	; 0x130
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4605      	mov	r5, r0
 800b600:	460c      	mov	r4, r1
 800b602:	4610      	mov	r0, r2
 800b604:	4619      	mov	r1, r3
 800b606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b60a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b60e:	462a      	mov	r2, r5
 800b610:	801a      	strh	r2, [r3, #0]
 800b612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b61a:	4622      	mov	r2, r4
 800b61c:	801a      	strh	r2, [r3, #0]
 800b61e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b622:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800b626:	4602      	mov	r2, r0
 800b628:	701a      	strb	r2, [r3, #0]
 800b62a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b62e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b632:	460a      	mov	r2, r1
 800b634:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b636:	f107 0310 	add.w	r3, r7, #16
 800b63a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b63e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b642:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b646:	2200      	movs	r2, #0
 800b648:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800b650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b654:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b658:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b65c:	8812      	ldrh	r2, [r2, #0]
 800b65e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b660:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b664:	3302      	adds	r3, #2
 800b666:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800b66a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b66e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b672:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b676:	8812      	ldrh	r2, [r2, #0]
 800b678:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b67a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b67e:	3302      	adds	r3, #2
 800b680:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800b684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b688:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b68c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800b690:	7812      	ldrb	r2, [r2, #0]
 800b692:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b698:	3301      	adds	r3, #1
 800b69a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800b69e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b6a6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b6aa:	7812      	ldrb	r2, [r2, #0]
 800b6ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b6ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800b6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6bc:	1d98      	adds	r0, r3, #6
 800b6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b6ce:	f000 fa1d 	bl	800bb0c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b6d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6d6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b6e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6ea:	2218      	movs	r2, #24
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fa1c 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6f4:	233f      	movs	r3, #63	; 0x3f
 800b6f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b6fa:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b6fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b702:	f107 0310 	add.w	r3, r7, #16
 800b706:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b70e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b712:	f107 030f 	add.w	r3, r7, #15
 800b716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b720:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f000 fc8a 	bl	800c040 <hci_send_req>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	da01      	bge.n	800b736 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800b732:	23ff      	movs	r3, #255	; 0xff
 800b734:	e004      	b.n	800b740 <aci_gatt_update_char_value+0x148>
  return status;
 800b736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b73a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b73e:	781b      	ldrb	r3, [r3, #0]
}
 800b740:	4618      	mov	r0, r3
 800b742:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b746:	46bd      	mov	sp, r7
 800b748:	bdb0      	pop	{r4, r5, r7, pc}

0800b74a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b0cc      	sub	sp, #304	; 0x130
 800b74e:	af00      	add	r7, sp, #0
 800b750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b75e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b762:	4602      	mov	r2, r0
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b76a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b76e:	460a      	mov	r2, r1
 800b770:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b772:	f107 0310 	add.w	r3, r7, #16
 800b776:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b77e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800b78c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b790:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b794:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b798:	7812      	ldrb	r2, [r2, #0]
 800b79a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b79c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800b7a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b7ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b7b2:	7812      	ldrb	r2, [r2, #0]
 800b7b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b7b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b7c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7c4:	1c98      	adds	r0, r3, #2
 800b7c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7d8:	6819      	ldr	r1, [r3, #0]
 800b7da:	f000 f997 	bl	800bb0c <Osal_MemCpy>
  index_input += Length;
 800b7de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7e2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b7f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7f6:	2218      	movs	r2, #24
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f996 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b800:	233f      	movs	r3, #63	; 0x3f
 800b802:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b806:	230c      	movs	r3, #12
 800b808:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b80c:	f107 0310 	add.w	r3, r7, #16
 800b810:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b814:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b818:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b81c:	f107 030f 	add.w	r3, r7, #15
 800b820:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b824:	2301      	movs	r3, #1
 800b826:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b82a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b82e:	2100      	movs	r1, #0
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fc05 	bl	800c040 <hci_send_req>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	da01      	bge.n	800b840 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800b83c:	23ff      	movs	r3, #255	; 0xff
 800b83e:	e004      	b.n	800b84a <aci_hal_write_config_data+0x100>
  return status;
 800b840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b848:	781b      	ldrb	r3, [r3, #0]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b0cc      	sub	sp, #304	; 0x130
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4602      	mov	r2, r0
 800b85c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b860:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b864:	701a      	strb	r2, [r3, #0]
 800b866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b86a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b86e:	460a      	mov	r2, r1
 800b870:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b872:	f107 0310 	add.w	r3, r7, #16
 800b876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b87a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b87e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b882:	2200      	movs	r2, #0
 800b884:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800b88c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b890:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b894:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b898:	7812      	ldrb	r2, [r2, #0]
 800b89a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800b8a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b8ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b8b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b8c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8c4:	2218      	movs	r2, #24
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 f92f 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b8ce:	233f      	movs	r3, #63	; 0x3f
 800b8d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b8d4:	230f      	movs	r3, #15
 800b8d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b8da:	f107 0310 	add.w	r3, r7, #16
 800b8de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b8e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b8ea:	f107 030f 	add.w	r3, r7, #15
 800b8ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b8f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 fb9e 	bl	800c040 <hci_send_req>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	da01      	bge.n	800b90e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800b90a:	23ff      	movs	r3, #255	; 0xff
 800b90c:	e004      	b.n	800b918 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800b90e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b912:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b916:	781b      	ldrb	r3, [r3, #0]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b0cc      	sub	sp, #304	; 0x130
 800b926:	af00      	add	r7, sp, #0
 800b928:	4602      	mov	r2, r0
 800b92a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b92e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b932:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b934:	f107 0310 	add.w	r3, r7, #16
 800b938:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b93c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b940:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b944:	2200      	movs	r2, #0
 800b946:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800b94e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b952:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b956:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b95a:	8812      	ldrh	r2, [r2, #0]
 800b95c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b95e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b962:	3302      	adds	r3, #2
 800b964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b96c:	2218      	movs	r2, #24
 800b96e:	2100      	movs	r1, #0
 800b970:	4618      	mov	r0, r3
 800b972:	f000 f8db 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800b976:	233f      	movs	r3, #63	; 0x3f
 800b978:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b97c:	2318      	movs	r3, #24
 800b97e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b982:	f107 0310 	add.w	r3, r7, #16
 800b986:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b98a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b98e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b992:	f107 030f 	add.w	r3, r7, #15
 800b996:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b9a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fb4a 	bl	800c040 <hci_send_req>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da01      	bge.n	800b9b6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800b9b2:	23ff      	movs	r3, #255	; 0xff
 800b9b4:	e004      	b.n	800b9c0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800b9b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b9be:	781b      	ldrb	r3, [r3, #0]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	2218      	movs	r2, #24
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f8a5 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x03;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b9ea:	1dfb      	adds	r3, r7, #7
 800b9ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b9f2:	f107 0308 	add.w	r3, r7, #8
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 fb21 	bl	800c040 <hci_send_req>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da01      	bge.n	800ba08 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ba04:	23ff      	movs	r3, #255	; 0xff
 800ba06:	e000      	b.n	800ba0a <hci_reset+0x40>
  return status;
 800ba08:	79fb      	ldrb	r3, [r7, #7]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3720      	adds	r7, #32
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800ba12:	b590      	push	{r4, r7, lr}
 800ba14:	b0cd      	sub	sp, #308	; 0x134
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	4604      	mov	r4, r0
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba22:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ba26:	4622      	mov	r2, r4
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba2e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ba32:	4602      	mov	r2, r0
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba3a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ba3e:	460a      	mov	r2, r1
 800ba40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800ba42:	f107 0310 	add.w	r3, r7, #16
 800ba46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ba4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ba52:	2200      	movs	r2, #0
 800ba54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ba5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ba64:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ba6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba70:	3301      	adds	r3, #1
 800ba72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ba76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ba7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ba82:	7812      	ldrb	r2, [r2, #0]
 800ba84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ba86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ba90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ba98:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ba9c:	7812      	ldrb	r2, [r2, #0]
 800ba9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800baa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baa4:	3301      	adds	r3, #1
 800baa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800baaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800baae:	2218      	movs	r2, #24
 800bab0:	2100      	movs	r1, #0
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 f83a 	bl	800bb2c <Osal_MemSet>
  rq.ogf = 0x08;
 800bab8:	2308      	movs	r3, #8
 800baba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800babe:	2331      	movs	r3, #49	; 0x31
 800bac0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bac4:	f107 0310 	add.w	r3, r7, #16
 800bac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bacc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bad0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bad4:	f107 030f 	add.w	r3, r7, #15
 800bad8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800badc:	2301      	movs	r3, #1
 800bade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bae2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bae6:	2100      	movs	r1, #0
 800bae8:	4618      	mov	r0, r3
 800baea:	f000 faa9 	bl	800c040 <hci_send_req>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	da01      	bge.n	800baf8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800baf4:	23ff      	movs	r3, #255	; 0xff
 800baf6:	e004      	b.n	800bb02 <hci_le_set_default_phy+0xf0>
  return status;
 800baf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bafc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bb00:	781b      	ldrb	r3, [r3, #0]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd90      	pop	{r4, r7, pc}

0800bb0c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	68b9      	ldr	r1, [r7, #8]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f003 f8e5 	bl	800ecec <memcpy>
 800bb22:	4603      	mov	r3, r0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68b9      	ldr	r1, [r7, #8]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f003 f8e3 	bl	800ed08 <memset>
 800bb42:	4603      	mov	r3, r0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0
  return;
 800bb50:	bf00      	nop
}
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	af00      	add	r7, sp, #0
  return;
 800bb5e:	bf00      	nop
}
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800bb68:	b480      	push	{r7}
 800bb6a:	af00      	add	r7, sp, #0
  return;
 800bb6c:	bf00      	nop
}
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800bb76:	b480      	push	{r7}
 800bb78:	af00      	add	r7, sp, #0
  return;
 800bb7a:	bf00      	nop
}
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
  return;
 800bb88:	bf00      	nop
}
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800bb92:	b480      	push	{r7}
 800bb94:	af00      	add	r7, sp, #0
  return;
 800bb96:	bf00      	nop
}
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
  return;
 800bba4:	bf00      	nop
}
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800bbae:	b480      	push	{r7}
 800bbb0:	af00      	add	r7, sp, #0
  return;
 800bbb2:	bf00      	nop
}
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0
  return;
 800bbc0:	bf00      	nop
}
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800bbca:	b480      	push	{r7}
 800bbcc:	af00      	add	r7, sp, #0
  return;
 800bbce:	bf00      	nop
}
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
  return;
 800bbdc:	bf00      	nop
}
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	af00      	add	r7, sp, #0
  return;
 800bbea:	bf00      	nop
}
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
  return;
 800bbf8:	bf00      	nop
}
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800bc02:	b480      	push	{r7}
 800bc04:	af00      	add	r7, sp, #0
  return;
 800bc06:	bf00      	nop
}
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800bc10:	b480      	push	{r7}
 800bc12:	af00      	add	r7, sp, #0
  return;
 800bc14:	bf00      	nop
}
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800bc1e:	b480      	push	{r7}
 800bc20:	af00      	add	r7, sp, #0
  return;
 800bc22:	bf00      	nop
}
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  return;
 800bc30:	bf00      	nop
}
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bc40:	4b04      	ldr	r3, [pc, #16]	; (800bc54 <SVCCTL_Init+0x18>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bc46:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <SVCCTL_Init+0x1c>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bc4c:	f000 f806 	bl	800bc5c <SVCCTL_SvcInit>

  return;
 800bc50:	bf00      	nop
}
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20000a80 	.word	0x20000a80
 800bc58:	20000aa0 	.word	0x20000aa0

0800bc5c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  BAS_Init();
 800bc60:	f7ff ff74 	bl	800bb4c <BAS_Init>

  BLS_Init();
 800bc64:	f7ff ff79 	bl	800bb5a <BLS_Init>

  CRS_STM_Init();
 800bc68:	f7ff ff7e 	bl	800bb68 <CRS_STM_Init>

  DIS_Init();
 800bc6c:	f7ff ff83 	bl	800bb76 <DIS_Init>

  EDS_STM_Init();
 800bc70:	f7ff ff88 	bl	800bb84 <EDS_STM_Init>

  HIDS_Init();
 800bc74:	f7ff ff8d 	bl	800bb92 <HIDS_Init>

  HRS_Init();
 800bc78:	f7ff ff92 	bl	800bba0 <HRS_Init>

  HTS_Init();
 800bc7c:	f7ff ff97 	bl	800bbae <HTS_Init>

  IAS_Init();
 800bc80:	f7ff ff9c 	bl	800bbbc <IAS_Init>

  LLS_Init();
 800bc84:	f7ff ffa1 	bl	800bbca <LLS_Init>

  TPS_Init();
 800bc88:	f7ff ffa6 	bl	800bbd8 <TPS_Init>

  MOTENV_STM_Init();
 800bc8c:	f7ff ffab 	bl	800bbe6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bc90:	f7ff ffb0 	bl	800bbf4 <P2PS_STM_Init>

  ZDD_STM_Init();
 800bc94:	f7ff ffb5 	bl	800bc02 <ZDD_STM_Init>

  OTAS_STM_Init();
 800bc98:	f7ff ffba 	bl	800bc10 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bc9c:	f7ff ffc6 	bl	800bc2c <BVOPUS_STM_Init>

  MESH_Init();
 800bca0:	f7ff ffbd 	bl	800bc1e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bca4:	f002 f9f2 	bl	800e08c <SVCCTL_InitCustomSvc>
  
  return;
 800bca8:	bf00      	nop
}
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bcb4:	4b09      	ldr	r3, [pc, #36]	; (800bcdc <SVCCTL_RegisterSvcHandler+0x30>)
 800bcb6:	7f1b      	ldrb	r3, [r3, #28]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4a08      	ldr	r2, [pc, #32]	; (800bcdc <SVCCTL_RegisterSvcHandler+0x30>)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bcc2:	4b06      	ldr	r3, [pc, #24]	; (800bcdc <SVCCTL_RegisterSvcHandler+0x30>)
 800bcc4:	7f1b      	ldrb	r3, [r3, #28]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	4b04      	ldr	r3, [pc, #16]	; (800bcdc <SVCCTL_RegisterSvcHandler+0x30>)
 800bccc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800bcce:	bf00      	nop
}
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000a80 	.word	0x20000a80

0800bce0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3301      	adds	r3, #1
 800bcec:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2bff      	cmp	r3, #255	; 0xff
 800bcf8:	d125      	bne.n	800bd46 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3302      	adds	r3, #2
 800bcfe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd0e:	d118      	bne.n	800bd42 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bd10:	2300      	movs	r3, #0
 800bd12:	757b      	strb	r3, [r7, #21]
 800bd14:	e00d      	b.n	800bd32 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bd16:	7d7b      	ldrb	r3, [r7, #21]
 800bd18:	4a1a      	ldr	r2, [pc, #104]	; (800bd84 <SVCCTL_UserEvtRx+0xa4>)
 800bd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	4798      	blx	r3
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d108      	bne.n	800bd3e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bd2c:	7d7b      	ldrb	r3, [r7, #21]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	757b      	strb	r3, [r7, #21]
 800bd32:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <SVCCTL_UserEvtRx+0xa4>)
 800bd34:	7f1b      	ldrb	r3, [r3, #28]
 800bd36:	7d7a      	ldrb	r2, [r7, #21]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d3ec      	bcc.n	800bd16 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800bd3c:	e002      	b.n	800bd44 <SVCCTL_UserEvtRx+0x64>
              break;
 800bd3e:	bf00      	nop
          break;
 800bd40:	e000      	b.n	800bd44 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800bd42:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800bd44:	e000      	b.n	800bd48 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800bd46:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d00f      	beq.n	800bd6e <SVCCTL_UserEvtRx+0x8e>
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	dc10      	bgt.n	800bd74 <SVCCTL_UserEvtRx+0x94>
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <SVCCTL_UserEvtRx+0x7c>
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d006      	beq.n	800bd68 <SVCCTL_UserEvtRx+0x88>
 800bd5a:	e00b      	b.n	800bd74 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f001 fc5d 	bl	800d61c <SVCCTL_App_Notification>
 800bd62:	4603      	mov	r3, r0
 800bd64:	75bb      	strb	r3, [r7, #22]
      break;
 800bd66:	e008      	b.n	800bd7a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	75bb      	strb	r3, [r7, #22]
      break;
 800bd6c:	e005      	b.n	800bd7a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	75bb      	strb	r3, [r7, #22]
      break;
 800bd72:	e002      	b.n	800bd7a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bd74:	2301      	movs	r3, #1
 800bd76:	75bb      	strb	r3, [r7, #22]
      break;
 800bd78:	bf00      	nop
  }

  return (return_status);
 800bd7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000a80 	.word	0x20000a80

0800bd88 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bd90:	f107 030c 	add.w	r3, r7, #12
 800bd94:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	212e      	movs	r1, #46	; 0x2e
 800bda0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bda4:	f000 fae2 	bl	800c36c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	330b      	adds	r3, #11
 800bdac:	78db      	ldrb	r3, [r3, #3]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3720      	adds	r7, #32
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bdbe:	f107 030c 	add.w	r3, r7, #12
 800bdc2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	210f      	movs	r1, #15
 800bdce:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800bdd2:	f000 facb 	bl	800c36c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	330b      	adds	r3, #11
 800bdda:	78db      	ldrb	r3, [r3, #3]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3720      	adds	r7, #32
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bdec:	f107 030c 	add.w	r3, r7, #12
 800bdf0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	2110      	movs	r1, #16
 800bdf8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800bdfc:	f000 fab6 	bl	800c36c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	330b      	adds	r3, #11
 800be04:	78db      	ldrb	r3, [r3, #3]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3720      	adds	r7, #32
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800be10:	b480      	push	{r7}
 800be12:	b08b      	sub	sp, #44	; 0x2c
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800be2c:	2300      	movs	r3, #0
 800be2e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800be30:	2300      	movs	r3, #0
 800be32:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800be38:	4b4a      	ldr	r3, [pc, #296]	; (800bf64 <SHCI_GetWirelessFwInfo+0x154>)
 800be3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be40:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800be4a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a44      	ldr	r2, [pc, #272]	; (800bf68 <SHCI_GetWirelessFwInfo+0x158>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d10f      	bne.n	800be7c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	69db      	ldr	r3, [r3, #28]
 800be6c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	e01a      	b.n	800beb2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800be84:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800be88:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	0e1b      	lsrs	r3, r3, #24
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	0c1b      	lsrs	r3, r3, #16
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	0a1b      	lsrs	r3, r3, #8
 800beca:	b2da      	uxtb	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	091b      	lsrs	r3, r3, #4
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	f003 030f 	and.w	r3, r3, #15
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	f003 030f 	and.w	r3, r3, #15
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	0e1b      	lsrs	r3, r3, #24
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bef8:	6a3b      	ldr	r3, [r7, #32]
 800befa:	0c1b      	lsrs	r3, r3, #16
 800befc:	b2da      	uxtb	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	0a1b      	lsrs	r3, r3, #8
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	0e1b      	lsrs	r3, r3, #24
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	0c1b      	lsrs	r3, r3, #16
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	0a1b      	lsrs	r3, r3, #8
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	0e1b      	lsrs	r3, r3, #24
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	0c1b      	lsrs	r3, r3, #16
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	372c      	adds	r7, #44	; 0x2c
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	58004000 	.word	0x58004000
 800bf68:	a94656b9 	.word	0xa94656b9

0800bf6c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	4a08      	ldr	r2, [pc, #32]	; (800bf9c <hci_init+0x30>)
 800bf7c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bf7e:	4a08      	ldr	r2, [pc, #32]	; (800bfa0 <hci_init+0x34>)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bf84:	4806      	ldr	r0, [pc, #24]	; (800bfa0 <hci_init+0x34>)
 800bf86:	f000 f973 	bl	800c270 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 f8d4 	bl	800c13c <TlInit>

  return;
 800bf94:	bf00      	nop
}
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	20001718 	.word	0x20001718
 800bfa0:	200016f0 	.word	0x200016f0

0800bfa4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bfaa:	4822      	ldr	r0, [pc, #136]	; (800c034 <hci_user_evt_proc+0x90>)
 800bfac:	f000 fdde 	bl	800cb6c <LST_is_empty>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d12b      	bne.n	800c00e <hci_user_evt_proc+0x6a>
 800bfb6:	4b20      	ldr	r3, [pc, #128]	; (800c038 <hci_user_evt_proc+0x94>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d027      	beq.n	800c00e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bfbe:	f107 030c 	add.w	r3, r7, #12
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	481b      	ldr	r0, [pc, #108]	; (800c034 <hci_user_evt_proc+0x90>)
 800bfc6:	f000 fe60 	bl	800cc8a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800bfca:	4b1c      	ldr	r3, [pc, #112]	; (800c03c <hci_user_evt_proc+0x98>)
 800bfcc:	69db      	ldr	r3, [r3, #28]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00c      	beq.n	800bfec <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bfda:	4b18      	ldr	r3, [pc, #96]	; (800c03c <hci_user_evt_proc+0x98>)
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	1d3a      	adds	r2, r7, #4
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bfe4:	793a      	ldrb	r2, [r7, #4]
 800bfe6:	4b14      	ldr	r3, [pc, #80]	; (800c038 <hci_user_evt_proc+0x94>)
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	e002      	b.n	800bff2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bfec:	4b12      	ldr	r3, [pc, #72]	; (800c038 <hci_user_evt_proc+0x94>)
 800bfee:	2201      	movs	r2, #1
 800bff0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bff2:	4b11      	ldr	r3, [pc, #68]	; (800c038 <hci_user_evt_proc+0x94>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d004      	beq.n	800c004 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fc03 	bl	800c808 <TL_MM_EvtDone>
 800c002:	e004      	b.n	800c00e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4619      	mov	r1, r3
 800c008:	480a      	ldr	r0, [pc, #40]	; (800c034 <hci_user_evt_proc+0x90>)
 800c00a:	f000 fdd1 	bl	800cbb0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c00e:	4809      	ldr	r0, [pc, #36]	; (800c034 <hci_user_evt_proc+0x90>)
 800c010:	f000 fdac 	bl	800cb6c <LST_is_empty>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d107      	bne.n	800c02a <hci_user_evt_proc+0x86>
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <hci_user_evt_proc+0x94>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c022:	4804      	ldr	r0, [pc, #16]	; (800c034 <hci_user_evt_proc+0x90>)
 800c024:	f001 ff22 	bl	800de6c <hci_notify_asynch_evt>
  }


  return;
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
}
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20000aa8 	.word	0x20000aa8
 800c038:	20000ab4 	.word	0x20000ab4
 800c03c:	200016f0 	.word	0x200016f0

0800c040 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	460b      	mov	r3, r1
 800c04a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c04c:	2000      	movs	r0, #0
 800c04e:	f000 f8cb 	bl	800c1e8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c052:	2300      	movs	r3, #0
 800c054:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	885b      	ldrh	r3, [r3, #2]
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c060:	b21a      	sxth	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	029b      	lsls	r3, r3, #10
 800c068:	b21b      	sxth	r3, r3
 800c06a:	4313      	orrs	r3, r2
 800c06c:	b21b      	sxth	r3, r3
 800c06e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	b2d9      	uxtb	r1, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689a      	ldr	r2, [r3, #8]
 800c07a:	8bbb      	ldrh	r3, [r7, #28]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 f88d 	bl	800c19c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c082:	e04e      	b.n	800c122 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c084:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c088:	f001 ff07 	bl	800de9a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c08c:	e043      	b.n	800c116 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c08e:	f107 030c 	add.w	r3, r7, #12
 800c092:	4619      	mov	r1, r3
 800c094:	4828      	ldr	r0, [pc, #160]	; (800c138 <hci_send_req+0xf8>)
 800c096:	f000 fdf8 	bl	800cc8a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	7a5b      	ldrb	r3, [r3, #9]
 800c09e:	2b0f      	cmp	r3, #15
 800c0a0:	d114      	bne.n	800c0cc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	330b      	adds	r3, #11
 800c0a6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	885b      	ldrh	r3, [r3, #2]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	8bba      	ldrh	r2, [r7, #28]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d104      	bne.n	800c0be <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	693a      	ldr	r2, [r7, #16]
 800c0ba:	7812      	ldrb	r2, [r2, #0]
 800c0bc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	785b      	ldrb	r3, [r3, #1]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d027      	beq.n	800c116 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	77fb      	strb	r3, [r7, #31]
 800c0ca:	e024      	b.n	800c116 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	330b      	adds	r3, #11
 800c0d0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	8bba      	ldrh	r2, [r7, #28]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d114      	bne.n	800c10a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	7a9b      	ldrb	r3, [r3, #10]
 800c0e4:	3b03      	subs	r3, #3
 800c0e6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	695a      	ldr	r2, [r3, #20]
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	bfa8      	it	ge
 800c0f2:	461a      	movge	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6918      	ldr	r0, [r3, #16]
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	1cd9      	adds	r1, r3, #3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	461a      	mov	r2, r3
 800c106:	f002 fdf1 	bl	800ecec <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d001      	beq.n	800c116 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c112:	2301      	movs	r3, #1
 800c114:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c116:	4808      	ldr	r0, [pc, #32]	; (800c138 <hci_send_req+0xf8>)
 800c118:	f000 fd28 	bl	800cb6c <LST_is_empty>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0b5      	beq.n	800c08e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c122:	7ffb      	ldrb	r3, [r7, #31]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0ad      	beq.n	800c084 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c128:	2001      	movs	r0, #1
 800c12a:	f000 f85d 	bl	800c1e8 <NotifyCmdStatus>

  return 0;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	20001710 	.word	0x20001710

0800c13c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c144:	480f      	ldr	r0, [pc, #60]	; (800c184 <TlInit+0x48>)
 800c146:	f000 fd01 	bl	800cb4c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c14a:	4a0f      	ldr	r2, [pc, #60]	; (800c188 <TlInit+0x4c>)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c150:	480e      	ldr	r0, [pc, #56]	; (800c18c <TlInit+0x50>)
 800c152:	f000 fcfb 	bl	800cb4c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c156:	4b0e      	ldr	r3, [pc, #56]	; (800c190 <TlInit+0x54>)
 800c158:	2201      	movs	r2, #1
 800c15a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c15c:	4b0d      	ldr	r3, [pc, #52]	; (800c194 <TlInit+0x58>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c168:	4b0b      	ldr	r3, [pc, #44]	; (800c198 <TlInit+0x5c>)
 800c16a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c16c:	4b09      	ldr	r3, [pc, #36]	; (800c194 <TlInit+0x58>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f107 0208 	add.w	r2, r7, #8
 800c174:	4610      	mov	r0, r2
 800c176:	4798      	blx	r3
  }

  return;
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
}
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	20001710 	.word	0x20001710
 800c188:	20000ab0 	.word	0x20000ab0
 800c18c:	20000aa8 	.word	0x20000aa8
 800c190:	20000ab4 	.word	0x20000ab4
 800c194:	200016f0 	.word	0x200016f0
 800c198:	0800c229 	.word	0x0800c229

0800c19c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	603a      	str	r2, [r7, #0]
 800c1a6:	80fb      	strh	r3, [r7, #6]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <SendCmd+0x44>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	88fa      	ldrh	r2, [r7, #6]
 800c1b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c1b6:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <SendCmd+0x44>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	797a      	ldrb	r2, [r7, #5]
 800c1bc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c1be:	4b08      	ldr	r3, [pc, #32]	; (800c1e0 <SendCmd+0x44>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	330c      	adds	r3, #12
 800c1c4:	797a      	ldrb	r2, [r7, #5]
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f002 fd8f 	bl	800ecec <memcpy>

  hciContext.io.Send(0,0);
 800c1ce:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <SendCmd+0x48>)
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	4798      	blx	r3

  return;
 800c1d8:	bf00      	nop
}
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20000ab0 	.word	0x20000ab0
 800c1e4:	200016f0 	.word	0x200016f0

0800c1e8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d108      	bne.n	800c20a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c1f8:	4b0a      	ldr	r3, [pc, #40]	; (800c224 <NotifyCmdStatus+0x3c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00d      	beq.n	800c21c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c200:	4b08      	ldr	r3, [pc, #32]	; (800c224 <NotifyCmdStatus+0x3c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2000      	movs	r0, #0
 800c206:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c208:	e008      	b.n	800c21c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c20a:	4b06      	ldr	r3, [pc, #24]	; (800c224 <NotifyCmdStatus+0x3c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c212:	4b04      	ldr	r3, [pc, #16]	; (800c224 <NotifyCmdStatus+0x3c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2001      	movs	r0, #1
 800c218:	4798      	blx	r3
  return;
 800c21a:	bf00      	nop
 800c21c:	bf00      	nop
}
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	20001718 	.word	0x20001718

0800c228 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7a5b      	ldrb	r3, [r3, #9]
 800c234:	2b0f      	cmp	r3, #15
 800c236:	d003      	beq.n	800c240 <TlEvtReceived+0x18>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	7a5b      	ldrb	r3, [r3, #9]
 800c23c:	2b0e      	cmp	r3, #14
 800c23e:	d107      	bne.n	800c250 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c240:	6879      	ldr	r1, [r7, #4]
 800c242:	4809      	ldr	r0, [pc, #36]	; (800c268 <TlEvtReceived+0x40>)
 800c244:	f000 fcda 	bl	800cbfc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c248:	2000      	movs	r0, #0
 800c24a:	f001 fe1b 	bl	800de84 <hci_cmd_resp_release>
 800c24e:	e006      	b.n	800c25e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	4806      	ldr	r0, [pc, #24]	; (800c26c <TlEvtReceived+0x44>)
 800c254:	f000 fcd2 	bl	800cbfc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c258:	4804      	ldr	r0, [pc, #16]	; (800c26c <TlEvtReceived+0x44>)
 800c25a:	f001 fe07 	bl	800de6c <hci_notify_asynch_evt>
  }

  return;
 800c25e:	bf00      	nop
}
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20001710 	.word	0x20001710
 800c26c:	20000aa8 	.word	0x20000aa8

0800c270 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a05      	ldr	r2, [pc, #20]	; (800c290 <hci_register_io_bus+0x20>)
 800c27c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a04      	ldr	r2, [pc, #16]	; (800c294 <hci_register_io_bus+0x24>)
 800c282:	611a      	str	r2, [r3, #16]

  return;
 800c284:	bf00      	nop
}
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	0800c581 	.word	0x0800c581
 800c294:	0800c5e9 	.word	0x0800c5e9

0800c298 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	4a08      	ldr	r2, [pc, #32]	; (800c2c8 <shci_init+0x30>)
 800c2a8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c2aa:	4a08      	ldr	r2, [pc, #32]	; (800c2cc <shci_init+0x34>)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c2b0:	4806      	ldr	r0, [pc, #24]	; (800c2cc <shci_init+0x34>)
 800c2b2:	f000 f911 	bl	800c4d8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f894 	bl	800c3e8 <TlInit>

  return;
 800c2c0:	bf00      	nop
}
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	2000173c 	.word	0x2000173c
 800c2cc:	2000171c 	.word	0x2000171c

0800c2d0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c2d6:	4822      	ldr	r0, [pc, #136]	; (800c360 <shci_user_evt_proc+0x90>)
 800c2d8:	f000 fc48 	bl	800cb6c <LST_is_empty>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d12b      	bne.n	800c33a <shci_user_evt_proc+0x6a>
 800c2e2:	4b20      	ldr	r3, [pc, #128]	; (800c364 <shci_user_evt_proc+0x94>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d027      	beq.n	800c33a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	481b      	ldr	r0, [pc, #108]	; (800c360 <shci_user_evt_proc+0x90>)
 800c2f2:	f000 fcca 	bl	800cc8a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c2f6:	4b1c      	ldr	r3, [pc, #112]	; (800c368 <shci_user_evt_proc+0x98>)
 800c2f8:	69db      	ldr	r3, [r3, #28]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00c      	beq.n	800c318 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c302:	2301      	movs	r3, #1
 800c304:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c306:	4b18      	ldr	r3, [pc, #96]	; (800c368 <shci_user_evt_proc+0x98>)
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	1d3a      	adds	r2, r7, #4
 800c30c:	4610      	mov	r0, r2
 800c30e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c310:	793a      	ldrb	r2, [r7, #4]
 800c312:	4b14      	ldr	r3, [pc, #80]	; (800c364 <shci_user_evt_proc+0x94>)
 800c314:	701a      	strb	r2, [r3, #0]
 800c316:	e002      	b.n	800c31e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c318:	4b12      	ldr	r3, [pc, #72]	; (800c364 <shci_user_evt_proc+0x94>)
 800c31a:	2201      	movs	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c31e:	4b11      	ldr	r3, [pc, #68]	; (800c364 <shci_user_evt_proc+0x94>)
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d004      	beq.n	800c330 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 fa6d 	bl	800c808 <TL_MM_EvtDone>
 800c32e:	e004      	b.n	800c33a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4619      	mov	r1, r3
 800c334:	480a      	ldr	r0, [pc, #40]	; (800c360 <shci_user_evt_proc+0x90>)
 800c336:	f000 fc3b 	bl	800cbb0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c33a:	4809      	ldr	r0, [pc, #36]	; (800c360 <shci_user_evt_proc+0x90>)
 800c33c:	f000 fc16 	bl	800cb6c <LST_is_empty>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d107      	bne.n	800c356 <shci_user_evt_proc+0x86>
 800c346:	4b07      	ldr	r3, [pc, #28]	; (800c364 <shci_user_evt_proc+0x94>)
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c34e:	4804      	ldr	r0, [pc, #16]	; (800c360 <shci_user_evt_proc+0x90>)
 800c350:	f7f6 f8d7 	bl	8002502 <shci_notify_asynch_evt>
  }


  return;
 800c354:	bf00      	nop
 800c356:	bf00      	nop
}
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	20000ab8 	.word	0x20000ab8
 800c364:	20000ac8 	.word	0x20000ac8
 800c368:	2000171c 	.word	0x2000171c

0800c36c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	60ba      	str	r2, [r7, #8]
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	4603      	mov	r3, r0
 800c378:	81fb      	strh	r3, [r7, #14]
 800c37a:	460b      	mov	r3, r1
 800c37c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c37e:	2000      	movs	r0, #0
 800c380:	f000 f864 	bl	800c44c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c384:	4b16      	ldr	r3, [pc, #88]	; (800c3e0 <shci_send+0x74>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	89fa      	ldrh	r2, [r7, #14]
 800c38a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c38e:	4b14      	ldr	r3, [pc, #80]	; (800c3e0 <shci_send+0x74>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	7b7a      	ldrb	r2, [r7, #13]
 800c394:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <shci_send+0x74>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	330c      	adds	r3, #12
 800c39c:	7b7a      	ldrb	r2, [r7, #13]
 800c39e:	68b9      	ldr	r1, [r7, #8]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f002 fca3 	bl	800ecec <memcpy>

  shciContext.io.Send(0,0);
 800c3a6:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <shci_send+0x78>)
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c3b0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c3b4:	f7f6 f8bc 	bl	8002530 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f103 0008 	add.w	r0, r3, #8
 800c3be:	4b08      	ldr	r3, [pc, #32]	; (800c3e0 <shci_send+0x74>)
 800c3c0:	6819      	ldr	r1, [r3, #0]
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <shci_send+0x74>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	789b      	ldrb	r3, [r3, #2]
 800c3c8:	3303      	adds	r3, #3
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f002 fc8e 	bl	800ecec <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	f000 f83b 	bl	800c44c <Cmd_SetStatus>

  return;
 800c3d6:	bf00      	nop
}
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20000ac4 	.word	0x20000ac4
 800c3e4:	2000171c 	.word	0x2000171c

0800c3e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c3f0:	4a10      	ldr	r2, [pc, #64]	; (800c434 <TlInit+0x4c>)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c3f6:	4810      	ldr	r0, [pc, #64]	; (800c438 <TlInit+0x50>)
 800c3f8:	f000 fba8 	bl	800cb4c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c3fc:	2001      	movs	r0, #1
 800c3fe:	f000 f825 	bl	800c44c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c402:	4b0e      	ldr	r3, [pc, #56]	; (800c43c <TlInit+0x54>)
 800c404:	2201      	movs	r2, #1
 800c406:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c408:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <TlInit+0x58>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00c      	beq.n	800c42a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c414:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <TlInit+0x5c>)
 800c416:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <TlInit+0x60>)
 800c41a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c41c:	4b08      	ldr	r3, [pc, #32]	; (800c440 <TlInit+0x58>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f107 020c 	add.w	r2, r7, #12
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
  }

  return;
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
}
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20000ac4 	.word	0x20000ac4
 800c438:	20000ab8 	.word	0x20000ab8
 800c43c:	20000ac8 	.word	0x20000ac8
 800c440:	2000171c 	.word	0x2000171c
 800c444:	0800c49d 	.word	0x0800c49d
 800c448:	0800c4b5 	.word	0x0800c4b5

0800c44c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c456:	79fb      	ldrb	r3, [r7, #7]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10b      	bne.n	800c474 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <Cmd_SetStatus+0x48>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c464:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <Cmd_SetStatus+0x48>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2000      	movs	r0, #0
 800c46a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c46c:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <Cmd_SetStatus+0x4c>)
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c472:	e00b      	b.n	800c48c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c474:	4b08      	ldr	r3, [pc, #32]	; (800c498 <Cmd_SetStatus+0x4c>)
 800c476:	2201      	movs	r2, #1
 800c478:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c47a:	4b06      	ldr	r3, [pc, #24]	; (800c494 <Cmd_SetStatus+0x48>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d004      	beq.n	800c48c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c482:	4b04      	ldr	r3, [pc, #16]	; (800c494 <Cmd_SetStatus+0x48>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2001      	movs	r0, #1
 800c488:	4798      	blx	r3
  return;
 800c48a:	bf00      	nop
 800c48c:	bf00      	nop
}
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	2000173c 	.word	0x2000173c
 800c498:	20000ac0 	.word	0x20000ac0

0800c49c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	f7f6 f838 	bl	800251a <shci_cmd_resp_release>

  return;
 800c4aa:	bf00      	nop
}
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c4bc:	6879      	ldr	r1, [r7, #4]
 800c4be:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <TlUserEvtReceived+0x20>)
 800c4c0:	f000 fb9c 	bl	800cbfc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c4c4:	4803      	ldr	r0, [pc, #12]	; (800c4d4 <TlUserEvtReceived+0x20>)
 800c4c6:	f7f6 f81c 	bl	8002502 <shci_notify_asynch_evt>

  return;
 800c4ca:	bf00      	nop
}
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000ab8 	.word	0x20000ab8

0800c4d8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a05      	ldr	r2, [pc, #20]	; (800c4f8 <shci_register_io_bus+0x20>)
 800c4e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a04      	ldr	r2, [pc, #16]	; (800c4fc <shci_register_io_bus+0x24>)
 800c4ea:	611a      	str	r2, [r3, #16]

  return;
 800c4ec:	bf00      	nop
}
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	0800c695 	.word	0x0800c695
 800c4fc:	0800c6e9 	.word	0x0800c6e9

0800c500 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c504:	f002 f876 	bl	800e5f4 <HW_IPCC_Enable>

  return;
 800c508:	bf00      	nop
}
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <TL_Init>:


void TL_Init( void )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c510:	4b10      	ldr	r3, [pc, #64]	; (800c554 <TL_Init+0x48>)
 800c512:	4a11      	ldr	r2, [pc, #68]	; (800c558 <TL_Init+0x4c>)
 800c514:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c516:	4b0f      	ldr	r3, [pc, #60]	; (800c554 <TL_Init+0x48>)
 800c518:	4a10      	ldr	r2, [pc, #64]	; (800c55c <TL_Init+0x50>)
 800c51a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c51c:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <TL_Init+0x48>)
 800c51e:	4a10      	ldr	r2, [pc, #64]	; (800c560 <TL_Init+0x54>)
 800c520:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c522:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <TL_Init+0x48>)
 800c524:	4a0f      	ldr	r2, [pc, #60]	; (800c564 <TL_Init+0x58>)
 800c526:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <TL_Init+0x48>)
 800c52a:	4a0f      	ldr	r2, [pc, #60]	; (800c568 <TL_Init+0x5c>)
 800c52c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c52e:	4b09      	ldr	r3, [pc, #36]	; (800c554 <TL_Init+0x48>)
 800c530:	4a0e      	ldr	r2, [pc, #56]	; (800c56c <TL_Init+0x60>)
 800c532:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c534:	4b07      	ldr	r3, [pc, #28]	; (800c554 <TL_Init+0x48>)
 800c536:	4a0e      	ldr	r2, [pc, #56]	; (800c570 <TL_Init+0x64>)
 800c538:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c53a:	4b06      	ldr	r3, [pc, #24]	; (800c554 <TL_Init+0x48>)
 800c53c:	4a0d      	ldr	r2, [pc, #52]	; (800c574 <TL_Init+0x68>)
 800c53e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c540:	4b04      	ldr	r3, [pc, #16]	; (800c554 <TL_Init+0x48>)
 800c542:	4a0d      	ldr	r2, [pc, #52]	; (800c578 <TL_Init+0x6c>)
 800c544:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c546:	4b03      	ldr	r3, [pc, #12]	; (800c554 <TL_Init+0x48>)
 800c548:	4a0c      	ldr	r2, [pc, #48]	; (800c57c <TL_Init+0x70>)
 800c54a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c54c:	f002 f866 	bl	800e61c <HW_IPCC_Init>

  return;
 800c550:	bf00      	nop
}
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20030000 	.word	0x20030000
 800c558:	20030028 	.word	0x20030028
 800c55c:	20030048 	.word	0x20030048
 800c560:	20030058 	.word	0x20030058
 800c564:	20030068 	.word	0x20030068
 800c568:	20030070 	.word	0x20030070
 800c56c:	20030078 	.word	0x20030078
 800c570:	20030080 	.word	0x20030080
 800c574:	2003009c 	.word	0x2003009c
 800c578:	200300a0 	.word	0x200300a0
 800c57c:	200300ac 	.word	0x200300ac

0800c580 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c58c:	4811      	ldr	r0, [pc, #68]	; (800c5d4 <TL_BLE_Init+0x54>)
 800c58e:	f000 fadd 	bl	800cb4c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c592:	4b11      	ldr	r3, [pc, #68]	; (800c5d8 <TL_BLE_Init+0x58>)
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	689a      	ldr	r2, [r3, #8]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	4a0c      	ldr	r2, [pc, #48]	; (800c5dc <TL_BLE_Init+0x5c>)
 800c5ac:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	4a08      	ldr	r2, [pc, #32]	; (800c5d4 <TL_BLE_Init+0x54>)
 800c5b2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c5b4:	f002 f848 	bl	800e648 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a08      	ldr	r2, [pc, #32]	; (800c5e0 <TL_BLE_Init+0x60>)
 800c5be:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	4a07      	ldr	r2, [pc, #28]	; (800c5e4 <TL_BLE_Init+0x64>)
 800c5c6:	6013      	str	r3, [r2, #0]

  return 0;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	200300c8 	.word	0x200300c8
 800c5d8:	20030000 	.word	0x20030000
 800c5dc:	20000a70 	.word	0x20000a70
 800c5e0:	20001748 	.word	0x20001748
 800c5e4:	2000174c 	.word	0x2000174c

0800c5e8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <TL_BLE_SendCmd+0x34>)
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c5fe:	4b07      	ldr	r3, [pc, #28]	; (800c61c <TL_BLE_SendCmd+0x34>)
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4619      	mov	r1, r3
 800c606:	2001      	movs	r0, #1
 800c608:	f000 f96c 	bl	800c8e4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c60c:	f002 f826 	bl	800e65c <HW_IPCC_BLE_SendCmd>

  return 0;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20030000 	.word	0x20030000

0800c620 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c626:	e01c      	b.n	800c662 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c628:	1d3b      	adds	r3, r7, #4
 800c62a:	4619      	mov	r1, r3
 800c62c:	4812      	ldr	r0, [pc, #72]	; (800c678 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c62e:	f000 fb2c 	bl	800cc8a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	7a5b      	ldrb	r3, [r3, #9]
 800c636:	2b0f      	cmp	r3, #15
 800c638:	d003      	beq.n	800c642 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	7a5b      	ldrb	r3, [r3, #9]
 800c63e:	2b0e      	cmp	r3, #14
 800c640:	d105      	bne.n	800c64e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4619      	mov	r1, r3
 800c646:	2002      	movs	r0, #2
 800c648:	f000 f94c 	bl	800c8e4 <OutputDbgTrace>
 800c64c:	e004      	b.n	800c658 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4619      	mov	r1, r3
 800c652:	2003      	movs	r0, #3
 800c654:	f000 f946 	bl	800c8e4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c658:	4b08      	ldr	r3, [pc, #32]	; (800c67c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	4610      	mov	r0, r2
 800c660:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c662:	4805      	ldr	r0, [pc, #20]	; (800c678 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c664:	f000 fa82 	bl	800cb6c <LST_is_empty>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0dc      	beq.n	800c628 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c66e:	bf00      	nop
}
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	200300c8 	.word	0x200300c8
 800c67c:	20001748 	.word	0x20001748

0800c680 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c684:	4b02      	ldr	r3, [pc, #8]	; (800c690 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4798      	blx	r3

  return;
 800c68a:	bf00      	nop
}
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	2000174c 	.word	0x2000174c

0800c694 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c6a0:	480d      	ldr	r0, [pc, #52]	; (800c6d8 <TL_SYS_Init+0x44>)
 800c6a2:	f000 fa53 	bl	800cb4c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c6a6:	4b0d      	ldr	r3, [pc, #52]	; (800c6dc <TL_SYS_Init+0x48>)
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	4a08      	ldr	r2, [pc, #32]	; (800c6d8 <TL_SYS_Init+0x44>)
 800c6b8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c6ba:	f001 fff1 	bl	800e6a0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a07      	ldr	r2, [pc, #28]	; (800c6e0 <TL_SYS_Init+0x4c>)
 800c6c4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	4a06      	ldr	r2, [pc, #24]	; (800c6e4 <TL_SYS_Init+0x50>)
 800c6cc:	6013      	str	r3, [r2, #0]

  return 0;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	200300d0 	.word	0x200300d0
 800c6dc:	20030000 	.word	0x20030000
 800c6e0:	20001750 	.word	0x20001750
 800c6e4:	20001754 	.word	0x20001754

0800c6e8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c6f4:	4b09      	ldr	r3, [pc, #36]	; (800c71c <TL_SYS_SendCmd+0x34>)
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2210      	movs	r2, #16
 800c6fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c6fe:	4b07      	ldr	r3, [pc, #28]	; (800c71c <TL_SYS_SendCmd+0x34>)
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4619      	mov	r1, r3
 800c706:	2004      	movs	r0, #4
 800c708:	f000 f8ec 	bl	800c8e4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c70c:	f001 ffd2 	bl	800e6b4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20030000 	.word	0x20030000

0800c720 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c724:	4b07      	ldr	r3, [pc, #28]	; (800c744 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4619      	mov	r1, r3
 800c72c:	2005      	movs	r0, #5
 800c72e:	f000 f8d9 	bl	800c8e4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c732:	4b05      	ldr	r3, [pc, #20]	; (800c748 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a03      	ldr	r2, [pc, #12]	; (800c744 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c738:	68d2      	ldr	r2, [r2, #12]
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	4610      	mov	r0, r2
 800c73e:	4798      	blx	r3

  return;
 800c740:	bf00      	nop
}
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20030000 	.word	0x20030000
 800c748:	20001750 	.word	0x20001750

0800c74c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c752:	e00e      	b.n	800c772 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c754:	1d3b      	adds	r3, r7, #4
 800c756:	4619      	mov	r1, r3
 800c758:	480b      	ldr	r0, [pc, #44]	; (800c788 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c75a:	f000 fa96 	bl	800cc8a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4619      	mov	r1, r3
 800c762:	2006      	movs	r0, #6
 800c764:	f000 f8be 	bl	800c8e4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c768:	4b08      	ldr	r3, [pc, #32]	; (800c78c <HW_IPCC_SYS_EvtNot+0x40>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	4610      	mov	r0, r2
 800c770:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c772:	4805      	ldr	r0, [pc, #20]	; (800c788 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c774:	f000 f9fa 	bl	800cb6c <LST_is_empty>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0ea      	beq.n	800c754 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c77e:	bf00      	nop
}
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200300d0 	.word	0x200300d0
 800c78c:	20001754 	.word	0x20001754

0800c790 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c798:	4817      	ldr	r0, [pc, #92]	; (800c7f8 <TL_MM_Init+0x68>)
 800c79a:	f000 f9d7 	bl	800cb4c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c79e:	4817      	ldr	r0, [pc, #92]	; (800c7fc <TL_MM_Init+0x6c>)
 800c7a0:	f000 f9d4 	bl	800cb4c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c7a4:	4b16      	ldr	r3, [pc, #88]	; (800c800 <TL_MM_Init+0x70>)
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	4a16      	ldr	r2, [pc, #88]	; (800c804 <TL_MM_Init+0x74>)
 800c7aa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c7ac:	4b15      	ldr	r3, [pc, #84]	; (800c804 <TL_MM_Init+0x74>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	6892      	ldr	r2, [r2, #8]
 800c7b4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c7b6:	4b13      	ldr	r3, [pc, #76]	; (800c804 <TL_MM_Init+0x74>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	68d2      	ldr	r2, [r2, #12]
 800c7be:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c7c0:	4b10      	ldr	r3, [pc, #64]	; (800c804 <TL_MM_Init+0x74>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a0c      	ldr	r2, [pc, #48]	; (800c7f8 <TL_MM_Init+0x68>)
 800c7c6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c7c8:	4b0e      	ldr	r3, [pc, #56]	; (800c804 <TL_MM_Init+0x74>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	6812      	ldr	r2, [r2, #0]
 800c7d0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c7d2:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <TL_MM_Init+0x74>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6852      	ldr	r2, [r2, #4]
 800c7da:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <TL_MM_Init+0x74>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6912      	ldr	r2, [r2, #16]
 800c7e4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c7e6:	4b07      	ldr	r3, [pc, #28]	; (800c804 <TL_MM_Init+0x74>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	6952      	ldr	r2, [r2, #20]
 800c7ee:	619a      	str	r2, [r3, #24]

  return;
 800c7f0:	bf00      	nop
}
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	200300b8 	.word	0x200300b8
 800c7fc:	20001740 	.word	0x20001740
 800c800:	20030000 	.word	0x20030000
 800c804:	20001758 	.word	0x20001758

0800c808 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	4807      	ldr	r0, [pc, #28]	; (800c830 <TL_MM_EvtDone+0x28>)
 800c814:	f000 f9f2 	bl	800cbfc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c818:	6879      	ldr	r1, [r7, #4]
 800c81a:	2000      	movs	r0, #0
 800c81c:	f000 f862 	bl	800c8e4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c820:	4804      	ldr	r0, [pc, #16]	; (800c834 <TL_MM_EvtDone+0x2c>)
 800c822:	f001 ff6d 	bl	800e700 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c826:	bf00      	nop
}
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	20001740 	.word	0x20001740
 800c834:	0800c839 	.word	0x0800c839

0800c838 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c83e:	e00c      	b.n	800c85a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c840:	1d3b      	adds	r3, r7, #4
 800c842:	4619      	mov	r1, r3
 800c844:	480a      	ldr	r0, [pc, #40]	; (800c870 <SendFreeBuf+0x38>)
 800c846:	f000 fa20 	bl	800cc8a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c84a:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <SendFreeBuf+0x3c>)
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	4611      	mov	r1, r2
 800c854:	4618      	mov	r0, r3
 800c856:	f000 f9d1 	bl	800cbfc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c85a:	4805      	ldr	r0, [pc, #20]	; (800c870 <SendFreeBuf+0x38>)
 800c85c:	f000 f986 	bl	800cb6c <LST_is_empty>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0ec      	beq.n	800c840 <SendFreeBuf+0x8>
  }

  return;
 800c866:	bf00      	nop
}
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	20001740 	.word	0x20001740
 800c874:	20030000 	.word	0x20030000

0800c878 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c87c:	4805      	ldr	r0, [pc, #20]	; (800c894 <TL_TRACES_Init+0x1c>)
 800c87e:	f000 f965 	bl	800cb4c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c882:	4b05      	ldr	r3, [pc, #20]	; (800c898 <TL_TRACES_Init+0x20>)
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	4a03      	ldr	r2, [pc, #12]	; (800c894 <TL_TRACES_Init+0x1c>)
 800c888:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c88a:	f001 ff6f 	bl	800e76c <HW_IPCC_TRACES_Init>

  return;
 800c88e:	bf00      	nop
}
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	200300c0 	.word	0x200300c0
 800c898:	20030000 	.word	0x20030000

0800c89c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c8a2:	e008      	b.n	800c8b6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c8a4:	1d3b      	adds	r3, r7, #4
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4808      	ldr	r0, [pc, #32]	; (800c8cc <HW_IPCC_TRACES_EvtNot+0x30>)
 800c8aa:	f000 f9ee 	bl	800cc8a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f000 f80d 	bl	800c8d0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c8b6:	4805      	ldr	r0, [pc, #20]	; (800c8cc <HW_IPCC_TRACES_EvtNot+0x30>)
 800c8b8:	f000 f958 	bl	800cb6c <LST_is_empty>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d0f0      	beq.n	800c8a4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c8c2:	bf00      	nop
}
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	200300c0 	.word	0x200300c0

0800c8d0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	6039      	str	r1, [r7, #0]
 800c8ee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	2b06      	cmp	r3, #6
 800c8f4:	d845      	bhi.n	800c982 <OutputDbgTrace+0x9e>
 800c8f6:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <OutputDbgTrace+0x18>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800c919 	.word	0x0800c919
 800c900:	0800c93d 	.word	0x0800c93d
 800c904:	0800c943 	.word	0x0800c943
 800c908:	0800c957 	.word	0x0800c957
 800c90c:	0800c963 	.word	0x0800c963
 800c910:	0800c969 	.word	0x0800c969
 800c914:	0800c977 	.word	0x0800c977
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	7a5b      	ldrb	r3, [r3, #9]
 800c920:	2bff      	cmp	r3, #255	; 0xff
 800c922:	d005      	beq.n	800c930 <OutputDbgTrace+0x4c>
 800c924:	2bff      	cmp	r3, #255	; 0xff
 800c926:	dc05      	bgt.n	800c934 <OutputDbgTrace+0x50>
 800c928:	2b0e      	cmp	r3, #14
 800c92a:	d005      	beq.n	800c938 <OutputDbgTrace+0x54>
 800c92c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c92e:	e001      	b.n	800c934 <OutputDbgTrace+0x50>
          break;
 800c930:	bf00      	nop
 800c932:	e027      	b.n	800c984 <OutputDbgTrace+0xa0>
          break;
 800c934:	bf00      	nop
 800c936:	e025      	b.n	800c984 <OutputDbgTrace+0xa0>
          break;
 800c938:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c93a:	e023      	b.n	800c984 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c940:	e020      	b.n	800c984 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	7a5b      	ldrb	r3, [r3, #9]
 800c94a:	2b0e      	cmp	r3, #14
 800c94c:	d001      	beq.n	800c952 <OutputDbgTrace+0x6e>
 800c94e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c950:	e000      	b.n	800c954 <OutputDbgTrace+0x70>
          break;
 800c952:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c954:	e016      	b.n	800c984 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	7a5b      	ldrb	r3, [r3, #9]
 800c95e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c960:	e010      	b.n	800c984 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c966:	e00d      	b.n	800c984 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	7a5b      	ldrb	r3, [r3, #9]
 800c970:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c972:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c974:	e006      	b.n	800c984 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	7a5b      	ldrb	r3, [r3, #9]
 800c97e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c980:	e000      	b.n	800c984 <OutputDbgTrace+0xa0>

    default:
      break;
 800c982:	bf00      	nop
  }

  return;
 800c984:	bf00      	nop
}
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c996:	f3ef 8310 	mrs	r3, PRIMASK
 800c99a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c99c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800c99e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9a0:	b672      	cpsid	i
}
 800c9a2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800c9a4:	1cbb      	adds	r3, r7, #2
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	4812      	ldr	r0, [pc, #72]	; (800c9f4 <DbgTrace_TxCpltCallback+0x64>)
 800c9aa:	f000 fbe6 	bl	800d17a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800c9ae:	1cbb      	adds	r3, r7, #2
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	4810      	ldr	r0, [pc, #64]	; (800c9f4 <DbgTrace_TxCpltCallback+0x64>)
 800c9b4:	f000 fcd2 	bl	800d35c <CircularQueue_Sense>
 800c9b8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00c      	beq.n	800c9da <DbgTrace_TxCpltCallback+0x4a>
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ca:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800c9cc:	887b      	ldrh	r3, [r7, #2]
 800c9ce:	4a0a      	ldr	r2, [pc, #40]	; (800c9f8 <DbgTrace_TxCpltCallback+0x68>)
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6938      	ldr	r0, [r7, #16]
 800c9d4:	f7f5 f9c7 	bl	8001d66 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800c9d8:	e008      	b.n	800c9ec <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800c9da:	4b08      	ldr	r3, [pc, #32]	; (800c9fc <DbgTrace_TxCpltCallback+0x6c>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ea:	bf00      	nop
}
 800c9ec:	bf00      	nop
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	2000175c 	.word	0x2000175c
 800c9f8:	0800c991 	.word	0x0800c991
 800c9fc:	20000015 	.word	0x20000015

0800ca00 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ca06:	f7f5 f9a8 	bl	8001d5a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ca0a:	2302      	movs	r3, #2
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca14:	4903      	ldr	r1, [pc, #12]	; (800ca24 <DbgTraceInit+0x24>)
 800ca16:	4804      	ldr	r0, [pc, #16]	; (800ca28 <DbgTraceInit+0x28>)
 800ca18:	f000 f956 	bl	800ccc8 <CircularQueue_Init>
#endif 
#endif
  return;
 800ca1c:	bf00      	nop
}
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	2000177c 	.word	0x2000177c
 800ca28:	2000175c 	.word	0x2000175c

0800ca2c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	68b9      	ldr	r1, [r7, #8]
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 f805 	bl	800ca4c <DbgTraceWrite>
 800ca42:	4603      	mov	r3, r0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08a      	sub	sp, #40	; 0x28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca60:	61bb      	str	r3, [r7, #24]
  return(result);
 800ca62:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ca64:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca6c:	d102      	bne.n	800ca74 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	627b      	str	r3, [r7, #36]	; 0x24
 800ca72:	e037      	b.n	800cae4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d006      	beq.n	800ca88 <DbgTraceWrite+0x3c>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d003      	beq.n	800ca88 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ca80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca84:	627b      	str	r3, [r7, #36]	; 0x24
 800ca86:	e02d      	b.n	800cae4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d02a      	beq.n	800cae4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ca92:	b672      	cpsid	i
}
 800ca94:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	68b9      	ldr	r1, [r7, #8]
 800ca9e:	4814      	ldr	r0, [pc, #80]	; (800caf0 <DbgTraceWrite+0xa4>)
 800caa0:	f000 f944 	bl	800cd2c <CircularQueue_Add>
 800caa4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d015      	beq.n	800cad8 <DbgTraceWrite+0x8c>
 800caac:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <DbgTraceWrite+0xa8>)
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d010      	beq.n	800cad8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800cab6:	4b0f      	ldr	r3, [pc, #60]	; (800caf4 <DbgTraceWrite+0xa8>)
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
 800cabc:	6a3b      	ldr	r3, [r7, #32]
 800cabe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f383 8810 	msr	PRIMASK, r3
}
 800cac6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	b29b      	uxth	r3, r3
 800cacc:	4a0a      	ldr	r2, [pc, #40]	; (800caf8 <DbgTraceWrite+0xac>)
 800cace:	4619      	mov	r1, r3
 800cad0:	69f8      	ldr	r0, [r7, #28]
 800cad2:	f7f5 f948 	bl	8001d66 <DbgOutputTraces>
 800cad6:	e005      	b.n	800cae4 <DbgTraceWrite+0x98>
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f383 8810 	msr	PRIMASK, r3
}
 800cae2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800cae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3728      	adds	r7, #40	; 0x28
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	2000175c 	.word	0x2000175c
 800caf4:	20000015 	.word	0x20000015
 800caf8:	0800c991 	.word	0x0800c991

0800cafc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800cb06:	4b0f      	ldr	r3, [pc, #60]	; (800cb44 <OTP_Read+0x48>)
 800cb08:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cb0a:	e002      	b.n	800cb12 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3b08      	subs	r3, #8
 800cb10:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3307      	adds	r3, #7
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	79fa      	ldrb	r2, [r7, #7]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d003      	beq.n	800cb26 <OTP_Read+0x2a>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	4a09      	ldr	r2, [pc, #36]	; (800cb48 <OTP_Read+0x4c>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d1f2      	bne.n	800cb0c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	3307      	adds	r3, #7
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	79fa      	ldrb	r2, [r7, #7]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d001      	beq.n	800cb36 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cb36:	68fb      	ldr	r3, [r7, #12]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	1fff73f8 	.word	0x1fff73f8
 800cb48:	1fff7000 	.word	0x1fff7000

0800cb4c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	605a      	str	r2, [r3, #4]
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb74:	f3ef 8310 	mrs	r3, PRIMASK
 800cb78:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb7e:	b672      	cpsid	i
}
 800cb80:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d102      	bne.n	800cb92 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	75fb      	strb	r3, [r7, #23]
 800cb90:	e001      	b.n	800cb96 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	f383 8810 	msr	PRIMASK, r3
}
 800cba0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800cba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	371c      	adds	r7, #28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr

0800cbb0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbba:	f3ef 8310 	mrs	r3, PRIMASK
 800cbbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cbc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbc4:	b672      	cpsid	i
}
 800cbc6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	605a      	str	r2, [r3, #4]
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	f383 8810 	msr	PRIMASK, r3
}
 800cbee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cbf0:	bf00      	nop
 800cbf2:	371c      	adds	r7, #28
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc06:	f3ef 8310 	mrs	r3, PRIMASK
 800cc0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cc0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc10:	b672      	cpsid	i
}
 800cc12:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f383 8810 	msr	PRIMASK, r3
}
 800cc3a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cc3c:	bf00      	nop
 800cc3e:	371c      	adds	r7, #28
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc50:	f3ef 8310 	mrs	r3, PRIMASK
 800cc54:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cc58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc5a:	b672      	cpsid	i
}
 800cc5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	6812      	ldr	r2, [r2, #0]
 800cc66:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	6852      	ldr	r2, [r2, #4]
 800cc70:	605a      	str	r2, [r3, #4]
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f383 8810 	msr	PRIMASK, r3
}
 800cc7c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cc7e:	bf00      	nop
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b086      	sub	sp, #24
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc94:	f3ef 8310 	mrs	r3, PRIMASK
 800cc98:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cc9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc9e:	b672      	cpsid	i
}
 800cca0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff ffca 	bl	800cc48 <LST_remove_node>
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f383 8810 	msr	PRIMASK, r3
}
 800ccbe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ccc0:	bf00      	nop
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	887a      	ldrh	r2, [r7, #2]
 800ccfe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	7e3a      	ldrb	r2, [r7, #24]
 800cd04:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800cd06:	7e3b      	ldrb	r3, [r7, #24]
 800cd08:	f003 0302 	and.w	r3, r3, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d006      	beq.n	800cd1e <CircularQueue_Init+0x56>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	891b      	ldrh	r3, [r3, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd1c:	e000      	b.n	800cd20 <CircularQueue_Init+0x58>
  }
  return 0;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08e      	sub	sp, #56	; 0x38
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800cd40:	2300      	movs	r3, #0
 800cd42:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800cd44:	2300      	movs	r3, #0
 800cd46:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800cd48:	2300      	movs	r3, #0
 800cd4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800cd50:	2300      	movs	r3, #0
 800cd52:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800cd54:	2300      	movs	r3, #0
 800cd56:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d101      	bne.n	800cd64 <CircularQueue_Add+0x38>
 800cd60:	2302      	movs	r3, #2
 800cd62:	e000      	b.n	800cd66 <CircularQueue_Add+0x3a>
 800cd64:	2300      	movs	r3, #0
 800cd66:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d02a      	beq.n	800cdc6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	891b      	ldrh	r3, [r3, #8]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d123      	bne.n	800cdc0 <CircularQueue_Add+0x94>
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	4413      	add	r3, r2
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6819      	ldr	r1, [r3, #0]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	1c58      	adds	r0, r3, #1
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	4298      	cmp	r0, r3
 800cd96:	d306      	bcc.n	800cda6 <CircularQueue_Add+0x7a>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6918      	ldr	r0, [r3, #16]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	1ac3      	subs	r3, r0, r3
 800cda2:	3301      	adds	r3, #1
 800cda4:	e002      	b.n	800cdac <CircularQueue_Add+0x80>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	440b      	add	r3, r1
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	021b      	lsls	r3, r3, #8
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	4413      	add	r3, r2
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	3302      	adds	r3, #2
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	e001      	b.n	800cdc4 <CircularQueue_Add+0x98>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	891b      	ldrh	r3, [r3, #8]
 800cdc4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	891b      	ldrh	r3, [r3, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	891b      	ldrh	r3, [r3, #8]
 800cdd2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	691a      	ldr	r2, [r3, #16]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d307      	bcc.n	800cdf0 <CircularQueue_Add+0xc4>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6919      	ldr	r1, [r3, #16]
 800cde8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cdea:	440b      	add	r3, r1
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	e000      	b.n	800cdf2 <CircularQueue_Add+0xc6>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800cdf4:	88fa      	ldrh	r2, [r7, #6]
 800cdf6:	7ffb      	ldrb	r3, [r7, #31]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	fb02 f303 	mul.w	r3, r2, r3
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d80b      	bhi.n	800ce20 <CircularQueue_Add+0xf4>
 800ce08:	88fa      	ldrh	r2, [r7, #6]
 800ce0a:	7ffb      	ldrb	r3, [r7, #31]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	461a      	mov	r2, r3
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce16:	fb01 f202 	mul.w	r2, r1, r2
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	e000      	b.n	800ce22 <CircularQueue_Add+0xf6>
 800ce20:	2300      	movs	r3, #0
 800ce22:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800ce24:	7dfa      	ldrb	r2, [r7, #23]
 800ce26:	7ffb      	ldrb	r3, [r7, #31]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	bf8c      	ite	hi
 800ce2c:	2301      	movhi	r3, #1
 800ce2e:	2300      	movls	r3, #0
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800ce34:	7fbb      	ldrb	r3, [r7, #30]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d008      	beq.n	800ce4c <CircularQueue_Add+0x120>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	7f1b      	ldrb	r3, [r3, #28]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d002      	beq.n	800ce4c <CircularQueue_Add+0x120>
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	e000      	b.n	800ce4e <CircularQueue_Add+0x122>
 800ce4c:	8bbb      	ldrh	r3, [r7, #28]
 800ce4e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ce50:	7fbb      	ldrb	r3, [r7, #30]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d008      	beq.n	800ce68 <CircularQueue_Add+0x13c>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	7f1b      	ldrb	r3, [r3, #28]
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d002      	beq.n	800ce68 <CircularQueue_Add+0x13c>
 800ce62:	7ffb      	ldrb	r3, [r7, #31]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	e000      	b.n	800ce6a <CircularQueue_Add+0x13e>
 800ce68:	8bbb      	ldrh	r3, [r7, #28]
 800ce6a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ce6c:	88fb      	ldrh	r3, [r7, #6]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 817e 	beq.w	800d170 <CircularQueue_Add+0x444>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	695a      	ldr	r2, [r3, #20]
 800ce78:	88f9      	ldrh	r1, [r7, #6]
 800ce7a:	7ffb      	ldrb	r3, [r7, #31]
 800ce7c:	440b      	add	r3, r1
 800ce7e:	4619      	mov	r1, r3
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	fb01 f303 	mul.w	r3, r1, r3
 800ce86:	441a      	add	r2, r3
 800ce88:	8bbb      	ldrh	r3, [r7, #28]
 800ce8a:	441a      	add	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	f200 816d 	bhi.w	800d170 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ce96:	2300      	movs	r3, #0
 800ce98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce9a:	e14a      	b.n	800d132 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	691a      	ldr	r2, [r3, #16]
 800cea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cea2:	441a      	add	r2, r3
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d307      	bcc.n	800cebc <CircularQueue_Add+0x190>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ceb2:	441a      	add	r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	e003      	b.n	800cec4 <CircularQueue_Add+0x198>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	691a      	ldr	r2, [r3, #16]
 800cec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cec2:	4413      	add	r3, r2
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	891b      	ldrh	r3, [r3, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d130      	bne.n	800cf38 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	1c59      	adds	r1, r3, #1
 800cede:	6339      	str	r1, [r7, #48]	; 0x30
 800cee0:	4413      	add	r3, r2
 800cee2:	88fa      	ldrh	r2, [r7, #6]
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d304      	bcc.n	800cefc <CircularQueue_Add+0x1d0>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	e000      	b.n	800cefe <CircularQueue_Add+0x1d2>
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800cf00:	88fb      	ldrh	r3, [r7, #6]
 800cf02:	0a1b      	lsrs	r3, r3, #8
 800cf04:	b298      	uxth	r0, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0c:	1c59      	adds	r1, r3, #1
 800cf0e:	6339      	str	r1, [r7, #48]	; 0x30
 800cf10:	4413      	add	r3, r2
 800cf12:	b2c2      	uxtb	r2, r0
 800cf14:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d304      	bcc.n	800cf2a <CircularQueue_Add+0x1fe>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	e000      	b.n	800cf2c <CircularQueue_Add+0x200>
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	695b      	ldr	r3, [r3, #20]
 800cf32:	1c9a      	adds	r2, r3, #2
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800cf38:	88fa      	ldrh	r2, [r7, #6]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6859      	ldr	r1, [r3, #4]
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	1acb      	subs	r3, r1, r3
 800cf42:	4293      	cmp	r3, r2
 800cf44:	bf28      	it	cs
 800cf46:	4613      	movcs	r3, r2
 800cf48:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800cf4a:	88fb      	ldrh	r3, [r7, #6]
 800cf4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d007      	beq.n	800cf62 <CircularQueue_Add+0x236>
 800cf52:	88fb      	ldrh	r3, [r7, #6]
 800cf54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d225      	bcs.n	800cfa6 <CircularQueue_Add+0x27a>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	7f1b      	ldrb	r3, [r3, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d121      	bne.n	800cfa6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	18d0      	adds	r0, r2, r3
 800cf6a:	88fb      	ldrh	r3, [r7, #6]
 800cf6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf6e:	fb02 f303 	mul.w	r3, r2, r3
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	4413      	add	r3, r2
 800cf76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf78:	4619      	mov	r1, r3
 800cf7a:	f001 feb7 	bl	800ecec <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	695a      	ldr	r2, [r3, #20]
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	441a      	add	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800cf92:	88fa      	ldrh	r2, [r7, #6]
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800cf9a:	7ffb      	ldrb	r3, [r7, #31]
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	88fb      	ldrh	r3, [r7, #6]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cfa4:	e0a4      	b.n	800d0f0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800cfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 80a1 	beq.w	800d0f0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	7f1b      	ldrb	r3, [r3, #28]
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d03a      	beq.n	800d030 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	891b      	ldrh	r3, [r3, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10d      	bne.n	800cfde <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	3b02      	subs	r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	22ff      	movs	r2, #255	; 0xff
 800cfce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	4413      	add	r3, r2
 800cfda:	22ff      	movs	r2, #255	; 0xff
 800cfdc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	695a      	ldr	r2, [r3, #20]
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	441a      	add	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800cfee:	88fb      	ldrh	r3, [r7, #6]
 800cff0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800cff2:	2300      	movs	r3, #0
 800cff4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	891b      	ldrh	r3, [r3, #8]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d16f      	bne.n	800d0de <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	1c59      	adds	r1, r3, #1
 800d006:	6339      	str	r1, [r7, #48]	; 0x30
 800d008:	4413      	add	r3, r2
 800d00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d00c:	b2d2      	uxtb	r2, r2
 800d00e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	0a18      	lsrs	r0, r3, #8
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	1c59      	adds	r1, r3, #1
 800d01c:	6339      	str	r1, [r7, #48]	; 0x30
 800d01e:	4413      	add	r3, r2
 800d020:	b2c2      	uxtb	r2, r0
 800d022:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	1c9a      	adds	r2, r3, #2
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	615a      	str	r2, [r3, #20]
 800d02e:	e056      	b.n	800d0de <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	7f1b      	ldrb	r3, [r3, #28]
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d050      	beq.n	800d0de <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	891b      	ldrh	r3, [r3, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d14a      	bne.n	800d0da <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	3b02      	subs	r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d050:	b2d2      	uxtb	r2, r2
 800d052:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d056:	0a19      	lsrs	r1, r3, #8
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	3b01      	subs	r3, #1
 800d060:	4413      	add	r3, r2
 800d062:	b2ca      	uxtb	r2, r1
 800d064:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	18d0      	adds	r0, r2, r3
 800d06e:	88fb      	ldrh	r3, [r7, #6]
 800d070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d072:	fb02 f303 	mul.w	r3, r2, r3
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	4413      	add	r3, r2
 800d07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d07c:	4619      	mov	r1, r3
 800d07e:	f001 fe35 	bl	800ecec <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	695a      	ldr	r2, [r3, #20]
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	441a      	add	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d092:	88fa      	ldrh	r2, [r7, #6]
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ae:	1c59      	adds	r1, r3, #1
 800d0b0:	6339      	str	r1, [r7, #48]	; 0x30
 800d0b2:	4413      	add	r3, r2
 800d0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0bc:	0a18      	lsrs	r0, r3, #8
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	1c59      	adds	r1, r3, #1
 800d0c6:	6339      	str	r1, [r7, #48]	; 0x30
 800d0c8:	4413      	add	r3, r2
 800d0ca:	b2c2      	uxtb	r2, r0
 800d0cc:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	1c9a      	adds	r2, r3, #2
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	615a      	str	r2, [r3, #20]
 800d0d8:	e001      	b.n	800d0de <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e049      	b.n	800d172 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d0de:	7ffb      	ldrb	r3, [r7, #31]
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	4413      	add	r3, r2
 800d0e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d015      	beq.n	800d122 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fc:	18d0      	adds	r0, r2, r3
 800d0fe:	88fb      	ldrh	r3, [r7, #6]
 800d100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d102:	fb03 f202 	mul.w	r2, r3, r2
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	4413      	add	r3, r2
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4413      	add	r3, r2
 800d10e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d110:	4619      	mov	r1, r3
 800d112:	f001 fdeb 	bl	800ecec <memcpy>
        q->byteCount += NbBytesToCopy;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	695a      	ldr	r2, [r3, #20]
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	441a      	add	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	3301      	adds	r3, #1
 800d130:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	f4ff aeb0 	bcc.w	800ce9c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6919      	ldr	r1, [r3, #16]
 800d144:	7ffb      	ldrb	r3, [r7, #31]
 800d146:	4419      	add	r1, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	4299      	cmp	r1, r3
 800d14e:	d307      	bcc.n	800d160 <CircularQueue_Add+0x434>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6919      	ldr	r1, [r3, #16]
 800d154:	7ffb      	ldrb	r3, [r7, #31]
 800d156:	4419      	add	r1, r3
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	1acb      	subs	r3, r1, r3
 800d15e:	e003      	b.n	800d168 <CircularQueue_Add+0x43c>
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6919      	ldr	r1, [r3, #16]
 800d164:	7ffb      	ldrb	r3, [r7, #31]
 800d166:	440b      	add	r3, r1
 800d168:	4413      	add	r3, r2
 800d16a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	e000      	b.n	800d172 <CircularQueue_Add+0x446>
    return NULL;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3738      	adds	r7, #56	; 0x38
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b085      	sub	sp, #20
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800d188:	2300      	movs	r3, #0
 800d18a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	891b      	ldrh	r3, [r3, #8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d101      	bne.n	800d198 <CircularQueue_Remove+0x1e>
 800d194:	2302      	movs	r3, #2
 800d196:	e000      	b.n	800d19a <CircularQueue_Remove+0x20>
 800d198:	2300      	movs	r3, #0
 800d19a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	695b      	ldr	r3, [r3, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 80cc 	beq.w	800d342 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	891b      	ldrh	r3, [r3, #8]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d121      	bne.n	800d1f6 <CircularQueue_Remove+0x7c>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6819      	ldr	r1, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	1c58      	adds	r0, r3, #1
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	4298      	cmp	r0, r3
 800d1d0:	d306      	bcc.n	800d1e0 <CircularQueue_Remove+0x66>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68d8      	ldr	r0, [r3, #12]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	1ac3      	subs	r3, r0, r3
 800d1dc:	3301      	adds	r3, #1
 800d1de:	e002      	b.n	800d1e6 <CircularQueue_Remove+0x6c>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	440b      	add	r3, r1
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	021b      	lsls	r3, r3, #8
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	4413      	add	r3, r2
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	e001      	b.n	800d1fa <CircularQueue_Remove+0x80>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	891b      	ldrh	r3, [r3, #8]
 800d1fa:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7f1b      	ldrb	r3, [r3, #28]
 800d200:	f003 0301 	and.w	r3, r3, #1
 800d204:	2b00      	cmp	r3, #0
 800d206:	d057      	beq.n	800d2b8 <CircularQueue_Remove+0x13e>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	7f1b      	ldrb	r3, [r3, #28]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b00      	cmp	r3, #0
 800d212:	d151      	bne.n	800d2b8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d214:	897b      	ldrh	r3, [r7, #10]
 800d216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d103      	bne.n	800d226 <CircularQueue_Remove+0xac>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	891b      	ldrh	r3, [r3, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d012      	beq.n	800d24c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68da      	ldr	r2, [r3, #12]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d22e:	429a      	cmp	r2, r3
 800d230:	d942      	bls.n	800d2b8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	891b      	ldrh	r3, [r3, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d03e      	beq.n	800d2b8 <CircularQueue_Remove+0x13e>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	8912      	ldrh	r2, [r2, #8]
 800d248:	4293      	cmp	r3, r2
 800d24a:	d235      	bcs.n	800d2b8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	695a      	ldr	r2, [r3, #20]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	68d9      	ldr	r1, [r3, #12]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	1acb      	subs	r3, r1, r3
 800d25a:	441a      	add	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	891b      	ldrh	r3, [r3, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d121      	bne.n	800d2b2 <CircularQueue_Remove+0x138>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	4413      	add	r3, r2
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6819      	ldr	r1, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	1c58      	adds	r0, r3, #1
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	4298      	cmp	r0, r3
 800d28c:	d306      	bcc.n	800d29c <CircularQueue_Remove+0x122>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68d8      	ldr	r0, [r3, #12]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	1ac3      	subs	r3, r0, r3
 800d298:	3301      	adds	r3, #1
 800d29a:	e002      	b.n	800d2a2 <CircularQueue_Remove+0x128>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	440b      	add	r3, r1
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	021b      	lsls	r3, r3, #8
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	4413      	add	r3, r2
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	e001      	b.n	800d2b6 <CircularQueue_Remove+0x13c>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	891b      	ldrh	r3, [r3, #8]
 800d2b6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68d9      	ldr	r1, [r3, #12]
 800d2c0:	7a7b      	ldrb	r3, [r7, #9]
 800d2c2:	4419      	add	r1, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4299      	cmp	r1, r3
 800d2ca:	d307      	bcc.n	800d2dc <CircularQueue_Remove+0x162>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	68d9      	ldr	r1, [r3, #12]
 800d2d0:	7a7b      	ldrb	r3, [r7, #9]
 800d2d2:	4419      	add	r1, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	1acb      	subs	r3, r1, r3
 800d2da:	e003      	b.n	800d2e4 <CircularQueue_Remove+0x16a>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68d9      	ldr	r1, [r3, #12]
 800d2e0:	7a7b      	ldrb	r3, [r7, #9]
 800d2e2:	440b      	add	r3, r1
 800d2e4:	4413      	add	r3, r2
 800d2e6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	695b      	ldr	r3, [r3, #20]
 800d2ec:	8979      	ldrh	r1, [r7, #10]
 800d2ee:	7a7a      	ldrb	r2, [r7, #9]
 800d2f0:	440a      	add	r2, r1
 800d2f2:	1a9a      	subs	r2, r3, r2
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	695b      	ldr	r3, [r3, #20]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d01b      	beq.n	800d338 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	897b      	ldrh	r3, [r7, #10]
 800d306:	441a      	add	r2, r3
 800d308:	7a7b      	ldrb	r3, [r7, #9]
 800d30a:	441a      	add	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	429a      	cmp	r2, r3
 800d312:	d309      	bcc.n	800d328 <CircularQueue_Remove+0x1ae>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68da      	ldr	r2, [r3, #12]
 800d318:	897b      	ldrh	r3, [r7, #10]
 800d31a:	441a      	add	r2, r3
 800d31c:	7a7b      	ldrb	r3, [r7, #9]
 800d31e:	441a      	add	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	e005      	b.n	800d334 <CircularQueue_Remove+0x1ba>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	897b      	ldrh	r3, [r7, #10]
 800d32e:	441a      	add	r2, r3
 800d330:	7a7b      	ldrb	r3, [r7, #9]
 800d332:	4413      	add	r3, r2
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	1e5a      	subs	r2, r3, #1
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	897a      	ldrh	r2, [r7, #10]
 800d34c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800d34e:	68fb      	ldr	r3, [r7, #12]
}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b087      	sub	sp, #28
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800d36a:	2300      	movs	r3, #0
 800d36c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	891b      	ldrh	r3, [r3, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <CircularQueue_Sense+0x1e>
 800d376:	2302      	movs	r3, #2
 800d378:	e000      	b.n	800d37c <CircularQueue_Sense+0x20>
 800d37a:	2300      	movs	r3, #0
 800d37c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f000 8090 	beq.w	800d4b0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	891b      	ldrh	r3, [r3, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d121      	bne.n	800d3e2 <CircularQueue_Sense+0x86>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6819      	ldr	r1, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	1c58      	adds	r0, r3, #1
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	4298      	cmp	r0, r3
 800d3bc:	d306      	bcc.n	800d3cc <CircularQueue_Sense+0x70>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68d8      	ldr	r0, [r3, #12]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	1ac3      	subs	r3, r0, r3
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	e002      	b.n	800d3d2 <CircularQueue_Sense+0x76>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	440b      	add	r3, r1
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	021b      	lsls	r3, r3, #8
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	4413      	add	r3, r2
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	e001      	b.n	800d3e6 <CircularQueue_Sense+0x8a>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	891b      	ldrh	r3, [r3, #8]
 800d3e6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	7f1b      	ldrb	r3, [r3, #28]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d048      	beq.n	800d486 <CircularQueue_Sense+0x12a>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7f1b      	ldrb	r3, [r3, #28]
 800d3f8:	f003 0302 	and.w	r3, r3, #2
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d142      	bne.n	800d486 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d400:	8a7b      	ldrh	r3, [r7, #18]
 800d402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d406:	4293      	cmp	r3, r2
 800d408:	d103      	bne.n	800d412 <CircularQueue_Sense+0xb6>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	891b      	ldrh	r3, [r3, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d012      	beq.n	800d438 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	68da      	ldr	r2, [r3, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d933      	bls.n	800d486 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	891b      	ldrh	r3, [r3, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d02f      	beq.n	800d486 <CircularQueue_Sense+0x12a>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	8912      	ldrh	r2, [r2, #8]
 800d434:	4293      	cmp	r3, r2
 800d436:	d226      	bcs.n	800d486 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800d438:	2300      	movs	r3, #0
 800d43a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	891b      	ldrh	r3, [r3, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d11d      	bne.n	800d480 <CircularQueue_Sense+0x124>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	4413      	add	r3, r2
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6819      	ldr	r1, [r3, #0]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	1c58      	adds	r0, r3, #1
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	4298      	cmp	r0, r3
 800d45e:	d305      	bcc.n	800d46c <CircularQueue_Sense+0x110>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	1ac3      	subs	r3, r0, r3
 800d468:	3301      	adds	r3, #1
 800d46a:	e001      	b.n	800d470 <CircularQueue_Sense+0x114>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	3301      	adds	r3, #1
 800d470:	440b      	add	r3, r1
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	b29b      	uxth	r3, r3
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	b29b      	uxth	r3, r3
 800d47a:	4413      	add	r3, r2
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	e001      	b.n	800d484 <CircularQueue_Sense+0x128>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	891b      	ldrh	r3, [r3, #8]
 800d484:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	7af9      	ldrb	r1, [r7, #11]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4419      	add	r1, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	4299      	cmp	r1, r3
 800d496:	d306      	bcc.n	800d4a6 <CircularQueue_Sense+0x14a>
 800d498:	7af9      	ldrb	r1, [r7, #11]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4419      	add	r1, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	1acb      	subs	r3, r1, r3
 800d4a4:	e002      	b.n	800d4ac <CircularQueue_Sense+0x150>
 800d4a6:	7af9      	ldrb	r1, [r7, #11]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	440b      	add	r3, r1
 800d4ac:	4413      	add	r3, r2
 800d4ae:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d002      	beq.n	800d4bc <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	8a7a      	ldrh	r2, [r7, #18]
 800d4ba:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800d4bc:	697b      	ldr	r3, [r7, #20]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
	...

0800d4cc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800d4d0:	4b03      	ldr	r3, [pc, #12]	; (800d4e0 <LL_FLASH_GetUDN+0x14>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	1fff7580 	.word	0x1fff7580

0800d4e4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800d4e8:	4b03      	ldr	r3, [pc, #12]	; (800d4f8 <LL_FLASH_GetDeviceID+0x14>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	b2db      	uxtb	r3, r3
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	1fff7584 	.word	0x1fff7584

0800d4fc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800d500:	4b03      	ldr	r3, [pc, #12]	; (800d510 <LL_FLASH_GetSTCompanyID+0x14>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	0a1b      	lsrs	r3, r3, #8
}
 800d506:	4618      	mov	r0, r3
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	1fff7584 	.word	0x1fff7584

0800d514 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800d514:	b5b0      	push	{r4, r5, r7, lr}
 800d516:	b090      	sub	sp, #64	; 0x40
 800d518:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d51a:	2392      	movs	r3, #146	; 0x92
 800d51c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800d520:	4a35      	ldr	r2, [pc, #212]	; (800d5f8 <APP_BLE_Init+0xe4>)
 800d522:	2100      	movs	r1, #0
 800d524:	2004      	movs	r0, #4
 800d526:	f001 fa75 	bl	800ea14 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800d52a:	2100      	movs	r1, #0
 800d52c:	2004      	movs	r0, #4
 800d52e:	f001 fa93 	bl	800ea58 <UTIL_SEQ_SetTask>

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800d532:	4b32      	ldr	r3, [pc, #200]	; (800d5fc <APP_BLE_Init+0xe8>)
 800d534:	1d3c      	adds	r4, r7, #4
 800d536:	461d      	mov	r5, r3
 800d538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d53a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d53e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d548:	c403      	stmia	r4!, {r0, r1}
 800d54a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800d54c:	f000 fa2a 	bl	800d9a4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800d550:	2101      	movs	r1, #1
 800d552:	2002      	movs	r0, #2
 800d554:	f001 f932 	bl	800e7bc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800d558:	4a29      	ldr	r2, [pc, #164]	; (800d600 <APP_BLE_Init+0xec>)
 800d55a:	2100      	movs	r1, #0
 800d55c:	2002      	movs	r0, #2
 800d55e:	f001 fa59 	bl	800ea14 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d562:	1d3b      	adds	r3, r7, #4
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fc0f 	bl	800bd88 <SHCI_C2_BLE_Init>
 800d56a:	4603      	mov	r3, r0
 800d56c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800d570:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d574:	2b00      	cmp	r3, #0
 800d576:	d008      	beq.n	800d58a <APP_BLE_Init+0x76>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800d578:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d57c:	4619      	mov	r1, r3
 800d57e:	4821      	ldr	r0, [pc, #132]	; (800d604 <APP_BLE_Init+0xf0>)
 800d580:	f002 f834 	bl	800f5ec <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800d584:	f7f6 f9aa 	bl	80038dc <Error_Handler>
 800d588:	e002      	b.n	800d590 <APP_BLE_Init+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800d58a:	481f      	ldr	r0, [pc, #124]	; (800d608 <APP_BLE_Init+0xf4>)
 800d58c:	f002 f82e 	bl	800f5ec <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800d590:	f000 fa1e 	bl	800d9d0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800d594:	f7fe fb52 	bl	800bc3c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d598:	4b1c      	ldr	r3, [pc, #112]	; (800d60c <APP_BLE_Init+0xf8>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800d5a0:	4b1a      	ldr	r3, [pc, #104]	; (800d60c <APP_BLE_Init+0xf8>)
 800d5a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5a6:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800d5a8:	4a19      	ldr	r2, [pc, #100]	; (800d610 <APP_BLE_Init+0xfc>)
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	2001      	movs	r0, #1
 800d5ae:	f001 fa31 	bl	800ea14 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800d5b2:	2006      	movs	r0, #6
 800d5b4:	f7fe f9b5 	bl	800b922 <aci_hal_set_radio_activity_mask>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800d5be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d006      	beq.n	800d5d4 <APP_BLE_Init+0xc0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800d5c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	4811      	ldr	r0, [pc, #68]	; (800d614 <APP_BLE_Init+0x100>)
 800d5ce:	f002 f80d 	bl	800f5ec <iprintf>
 800d5d2:	e002      	b.n	800d5da <APP_BLE_Init+0xc6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800d5d4:	4810      	ldr	r0, [pc, #64]	; (800d618 <APP_BLE_Init+0x104>)
 800d5d6:	f002 f809 	bl	800f5ec <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800d5da:	f000 fcdf 	bl	800df9c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800d5de:	4b0b      	ldr	r3, [pc, #44]	; (800d60c <APP_BLE_Init+0xf8>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800d5e4:	4b09      	ldr	r3, [pc, #36]	; (800d60c <APP_BLE_Init+0xf8>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	f000 fb7e 	bl	800dcec <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800d5f0:	bf00      	nop
}
 800d5f2:	3740      	adds	r7, #64	; 0x40
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5f8:	0800df21 	.word	0x0800df21
 800d5fc:	08012000 	.word	0x08012000
 800d600:	0800bfa5 	.word	0x0800bfa5
 800d604:	08011f24 	.word	0x08011f24
 800d608:	08011f5c 	.word	0x08011f5c
 800d60c:	20002784 	.word	0x20002784
 800d610:	0800de15 	.word	0x0800de15
 800d614:	08011f84 	.word	0x08011f84
 800d618:	08011fc8 	.word	0x08011fc8

0800d61c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800d61c:	b5b0      	push	{r4, r5, r7, lr}
 800d61e:	b08e      	sub	sp, #56	; 0x38
 800d620:	af04      	add	r7, sp, #16
 800d622:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800d624:	2392      	movs	r3, #146	; 0x92
 800d626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3301      	adds	r3, #1
 800d62e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	2bff      	cmp	r3, #255	; 0xff
 800d636:	f000 80d7 	beq.w	800d7e8 <SVCCTL_App_Notification+0x1cc>
 800d63a:	2bff      	cmp	r3, #255	; 0xff
 800d63c:	f300 81aa 	bgt.w	800d994 <SVCCTL_App_Notification+0x378>
 800d640:	2b05      	cmp	r3, #5
 800d642:	d002      	beq.n	800d64a <SVCCTL_App_Notification+0x2e>
 800d644:	2b3e      	cmp	r3, #62	; 0x3e
 800d646:	d02e      	beq.n	800d6a6 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800d648:	e1a4      	b.n	800d994 <SVCCTL_App_Notification+0x378>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	3302      	adds	r3, #2
 800d64e:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d656:	b29a      	uxth	r2, r3
 800d658:	4bb5      	ldr	r3, [pc, #724]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d65a:	8adb      	ldrh	r3, [r3, #22]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d114      	bne.n	800d68a <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800d660:	4bb3      	ldr	r3, [pc, #716]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d662:	2200      	movs	r2, #0
 800d664:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d666:	4bb2      	ldr	r3, [pc, #712]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800d66e:	48b1      	ldr	r0, [pc, #708]	; (800d934 <SVCCTL_App_Notification+0x318>)
 800d670:	f002 f858 	bl	800f724 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d67a:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d67c:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d682:	461a      	mov	r2, r3
 800d684:	48ac      	ldr	r0, [pc, #688]	; (800d938 <SVCCTL_App_Notification+0x31c>)
 800d686:	f001 ffb1 	bl	800f5ec <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800d68a:	2001      	movs	r0, #1
 800d68c:	f000 fb2e 	bl	800dcec <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800d690:	4baa      	ldr	r3, [pc, #680]	; (800d93c <SVCCTL_App_Notification+0x320>)
 800d692:	2201      	movs	r2, #1
 800d694:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d696:	4ba6      	ldr	r3, [pc, #664]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d698:	8ada      	ldrh	r2, [r3, #22]
 800d69a:	4ba8      	ldr	r3, [pc, #672]	; (800d93c <SVCCTL_App_Notification+0x320>)
 800d69c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800d69e:	48a7      	ldr	r0, [pc, #668]	; (800d93c <SVCCTL_App_Notification+0x320>)
 800d6a0:	f000 fc68 	bl	800df74 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800d6a4:	e179      	b.n	800d99a <SVCCTL_App_Notification+0x37e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	3302      	adds	r3, #2
 800d6aa:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d02e      	beq.n	800d712 <SVCCTL_App_Notification+0xf6>
 800d6b4:	2b03      	cmp	r3, #3
 800d6b6:	f040 8095 	bne.w	800d7e4 <SVCCTL_App_Notification+0x1c8>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800d6c0:	489f      	ldr	r0, [pc, #636]	; (800d940 <SVCCTL_App_Notification+0x324>)
 800d6c2:	f002 f82f 	bl	800f724 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d6cc:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7f2 ff00 	bl	80004d4 <__aeabi_i2d>
 800d6d4:	f04f 0200 	mov.w	r2, #0
 800d6d8:	4b9a      	ldr	r3, [pc, #616]	; (800d944 <SVCCTL_App_Notification+0x328>)
 800d6da:	f7f2 ff65 	bl	80005a8 <__aeabi_dmul>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d6ec:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d6ee:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4413      	add	r3, r2
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	9400      	str	r4, [sp, #0]
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	488f      	ldr	r0, [pc, #572]	; (800d948 <SVCCTL_App_Notification+0x32c>)
 800d70c:	f001 ff6e 	bl	800f5ec <iprintf>
          break;
 800d710:	e069      	b.n	800d7e6 <SVCCTL_App_Notification+0x1ca>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	3301      	adds	r3, #1
 800d716:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	4619      	mov	r1, r3
 800d722:	488a      	ldr	r0, [pc, #552]	; (800d94c <SVCCTL_App_Notification+0x330>)
 800d724:	f001 ff62 	bl	800f5ec <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d72c:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d732:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d738:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d73e:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d744:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d74a:	9302      	str	r3, [sp, #8]
 800d74c:	9101      	str	r1, [sp, #4]
 800d74e:	9200      	str	r2, [sp, #0]
 800d750:	462b      	mov	r3, r5
 800d752:	4622      	mov	r2, r4
 800d754:	4601      	mov	r1, r0
 800d756:	487e      	ldr	r0, [pc, #504]	; (800d950 <SVCCTL_App_Notification+0x334>)
 800d758:	f001 ff48 	bl	800f5ec <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800d762:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d764:	4618      	mov	r0, r3
 800d766:	f7f2 feb5 	bl	80004d4 <__aeabi_i2d>
 800d76a:	f04f 0200 	mov.w	r2, #0
 800d76e:	4b75      	ldr	r3, [pc, #468]	; (800d944 <SVCCTL_App_Notification+0x328>)
 800d770:	f7f2 ff1a 	bl	80005a8 <__aeabi_dmul>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4610      	mov	r0, r2
 800d77a:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800d782:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d784:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d790:	4613      	mov	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	9301      	str	r3, [sp, #4]
 800d79a:	9400      	str	r4, [sp, #0]
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4869      	ldr	r0, [pc, #420]	; (800d948 <SVCCTL_App_Notification+0x32c>)
 800d7a2:	f001 ff23 	bl	800f5ec <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800d7a6:	4b62      	ldr	r3, [pc, #392]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d7a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7ac:	2b04      	cmp	r3, #4
 800d7ae:	d104      	bne.n	800d7ba <SVCCTL_App_Notification+0x19e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800d7b0:	4b5f      	ldr	r3, [pc, #380]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d7b2:	2206      	movs	r2, #6
 800d7b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800d7b8:	e003      	b.n	800d7c2 <SVCCTL_App_Notification+0x1a6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800d7ba:	4b5d      	ldr	r3, [pc, #372]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d7bc:	2205      	movs	r2, #5
 800d7be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	4b59      	ldr	r3, [pc, #356]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d7cc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800d7ce:	4b5b      	ldr	r3, [pc, #364]	; (800d93c <SVCCTL_App_Notification+0x320>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d7d4:	4b56      	ldr	r3, [pc, #344]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d7d6:	8ada      	ldrh	r2, [r3, #22]
 800d7d8:	4b58      	ldr	r3, [pc, #352]	; (800d93c <SVCCTL_App_Notification+0x320>)
 800d7da:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800d7dc:	4857      	ldr	r0, [pc, #348]	; (800d93c <SVCCTL_App_Notification+0x320>)
 800d7de:	f000 fbc9 	bl	800df74 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800d7e2:	e000      	b.n	800d7e6 <SVCCTL_App_Notification+0x1ca>
          break;
 800d7e4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800d7e6:	e0d8      	b.n	800d99a <SVCCTL_App_Notification+0x37e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	3302      	adds	r3, #2
 800d7ec:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7f8:	f000 80c8 	beq.w	800d98c <SVCCTL_App_Notification+0x370>
 800d7fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d800:	f300 80ca 	bgt.w	800d998 <SVCCTL_App_Notification+0x37c>
 800d804:	2b04      	cmp	r3, #4
 800d806:	f000 80c3 	beq.w	800d990 <SVCCTL_App_Notification+0x374>
 800d80a:	2b04      	cmp	r3, #4
 800d80c:	f2c0 80c4 	blt.w	800d998 <SVCCTL_App_Notification+0x37c>
 800d810:	f240 420a 	movw	r2, #1034	; 0x40a
 800d814:	4293      	cmp	r3, r2
 800d816:	f300 80bf 	bgt.w	800d998 <SVCCTL_App_Notification+0x37c>
 800d81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d81e:	f340 80bb 	ble.w	800d998 <SVCCTL_App_Notification+0x37c>
 800d822:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800d826:	2b09      	cmp	r3, #9
 800d828:	f200 80b6 	bhi.w	800d998 <SVCCTL_App_Notification+0x37c>
 800d82c:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <SVCCTL_App_Notification+0x218>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d8f9 	.word	0x0800d8f9
 800d838:	0800d86d 	.word	0x0800d86d
 800d83c:	0800d999 	.word	0x0800d999
 800d840:	0800d999 	.word	0x0800d999
 800d844:	0800d999 	.word	0x0800d999
 800d848:	0800d999 	.word	0x0800d999
 800d84c:	0800d85d 	.word	0x0800d85d
 800d850:	0800d999 	.word	0x0800d999
 800d854:	0800d8a3 	.word	0x0800d8a3
 800d858:	0800d865 	.word	0x0800d865
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800d85c:	483d      	ldr	r0, [pc, #244]	; (800d954 <SVCCTL_App_Notification+0x338>)
 800d85e:	f001 fec5 	bl	800f5ec <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800d862:	e096      	b.n	800d992 <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800d864:	483c      	ldr	r0, [pc, #240]	; (800d958 <SVCCTL_App_Notification+0x33c>)
 800d866:	f001 ff5d 	bl	800f724 <puts>
          break;
 800d86a:	e092      	b.n	800d992 <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800d86c:	483b      	ldr	r0, [pc, #236]	; (800d95c <SVCCTL_App_Notification+0x340>)
 800d86e:	f001 ff59 	bl	800f724 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800d872:	4b2f      	ldr	r3, [pc, #188]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d874:	8adb      	ldrh	r3, [r3, #22]
 800d876:	493a      	ldr	r1, [pc, #232]	; (800d960 <SVCCTL_App_Notification+0x344>)
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fd faa9 	bl	800add0 <aci_gap_pass_key_resp>
 800d87e:	4603      	mov	r3, r0
 800d880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800d884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <SVCCTL_App_Notification+0x27e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800d88c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d890:	4619      	mov	r1, r3
 800d892:	4834      	ldr	r0, [pc, #208]	; (800d964 <SVCCTL_App_Notification+0x348>)
 800d894:	f001 feaa 	bl	800f5ec <iprintf>
          break;
 800d898:	e07b      	b.n	800d992 <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800d89a:	4833      	ldr	r0, [pc, #204]	; (800d968 <SVCCTL_App_Notification+0x34c>)
 800d89c:	f001 ff42 	bl	800f724 <puts>
          break;
 800d8a0:	e077      	b.n	800d992 <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800d8a2:	4832      	ldr	r0, [pc, #200]	; (800d96c <SVCCTL_App_Notification+0x350>)
 800d8a4:	f001 ff3e 	bl	800f724 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800d8ac:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	482f      	ldr	r0, [pc, #188]	; (800d970 <SVCCTL_App_Notification+0x354>)
 800d8b4:	f001 fe9a 	bl	800f5ec <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800d8bc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	482c      	ldr	r0, [pc, #176]	; (800d974 <SVCCTL_App_Notification+0x358>)
 800d8c4:	f001 fe92 	bl	800f5ec <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800d8c8:	4b19      	ldr	r3, [pc, #100]	; (800d930 <SVCCTL_App_Notification+0x314>)
 800d8ca:	8adb      	ldrh	r3, [r3, #22]
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fd fc28 	bl	800b124 <aci_gap_numeric_comparison_value_confirm_yesno>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800d8da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d006      	beq.n	800d8f0 <SVCCTL_App_Notification+0x2d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800d8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4823      	ldr	r0, [pc, #140]	; (800d978 <SVCCTL_App_Notification+0x35c>)
 800d8ea:	f001 fe7f 	bl	800f5ec <iprintf>
          break;
 800d8ee:	e050      	b.n	800d992 <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800d8f0:	4822      	ldr	r0, [pc, #136]	; (800d97c <SVCCTL_App_Notification+0x360>)
 800d8f2:	f001 ff17 	bl	800f724 <puts>
          break;
 800d8f6:	e04c      	b.n	800d992 <SVCCTL_App_Notification+0x376>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	3302      	adds	r3, #2
 800d8fc:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800d8fe:	4820      	ldr	r0, [pc, #128]	; (800d980 <SVCCTL_App_Notification+0x364>)
 800d900:	f001 ff10 	bl	800f724 <puts>
          if (p_pairing_complete->Status != 0)
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	789b      	ldrb	r3, [r3, #2]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d009      	beq.n	800d920 <SVCCTL_App_Notification+0x304>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	789b      	ldrb	r3, [r3, #2]
 800d910:	4619      	mov	r1, r3
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	78db      	ldrb	r3, [r3, #3]
 800d916:	461a      	mov	r2, r3
 800d918:	481a      	ldr	r0, [pc, #104]	; (800d984 <SVCCTL_App_Notification+0x368>)
 800d91a:	f001 fe67 	bl	800f5ec <iprintf>
 800d91e:	e002      	b.n	800d926 <SVCCTL_App_Notification+0x30a>
            APP_DBG_MSG("     - Pairing Success\n");
 800d920:	4819      	ldr	r0, [pc, #100]	; (800d988 <SVCCTL_App_Notification+0x36c>)
 800d922:	f001 feff 	bl	800f724 <puts>
          APP_DBG_MSG("\n");
 800d926:	200a      	movs	r0, #10
 800d928:	f001 fe78 	bl	800f61c <putchar>
          break;
 800d92c:	e031      	b.n	800d992 <SVCCTL_App_Notification+0x376>
 800d92e:	bf00      	nop
 800d930:	20002784 	.word	0x20002784
 800d934:	0801203c 	.word	0x0801203c
 800d938:	08012068 	.word	0x08012068
 800d93c:	20002808 	.word	0x20002808
 800d940:	080120a4 	.word	0x080120a4
 800d944:	3ff40000 	.word	0x3ff40000
 800d948:	080120d8 	.word	0x080120d8
 800d94c:	08012144 	.word	0x08012144
 800d950:	0801218c 	.word	0x0801218c
 800d954:	080121dc 	.word	0x080121dc
 800d958:	08012204 	.word	0x08012204
 800d95c:	08012234 	.word	0x08012234
 800d960:	0001b207 	.word	0x0001b207
 800d964:	0801225c 	.word	0x0801225c
 800d968:	08012290 	.word	0x08012290
 800d96c:	080122b8 	.word	0x080122b8
 800d970:	080122ec 	.word	0x080122ec
 800d974:	08012308 	.word	0x08012308
 800d978:	08012320 	.word	0x08012320
 800d97c:	08012370 	.word	0x08012370
 800d980:	080123b8 	.word	0x080123b8
 800d984:	080123e4 	.word	0x080123e4
 800d988:	08012420 	.word	0x08012420
          break;
 800d98c:	bf00      	nop
 800d98e:	e003      	b.n	800d998 <SVCCTL_App_Notification+0x37c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800d990:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d992:	e001      	b.n	800d998 <SVCCTL_App_Notification+0x37c>
      break;
 800d994:	bf00      	nop
 800d996:	e000      	b.n	800d99a <SVCCTL_App_Notification+0x37e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d998:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800d99a:	2301      	movs	r3, #1
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3728      	adds	r7, #40	; 0x28
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bdb0      	pop	{r4, r5, r7, pc}

0800d9a4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d9aa:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <Ble_Tl_Init+0x20>)
 800d9ac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d9ae:	4b06      	ldr	r3, [pc, #24]	; (800d9c8 <Ble_Tl_Init+0x24>)
 800d9b0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d9b2:	463b      	mov	r3, r7
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	4805      	ldr	r0, [pc, #20]	; (800d9cc <Ble_Tl_Init+0x28>)
 800d9b8:	f7fe fad8 	bl	800bf6c <hci_init>

  return;
 800d9bc:	bf00      	nop
}
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	200300d8 	.word	0x200300d8
 800d9c8:	0800dee9 	.word	0x0800dee9
 800d9cc:	0800deb1 	.word	0x0800deb1

0800d9d0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9d2:	b08d      	sub	sp, #52	; 0x34
 800d9d4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d9da:	2392      	movs	r3, #146	; 0x92
 800d9dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800d9de:	48a5      	ldr	r0, [pc, #660]	; (800dc74 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d9e0:	f001 fea0 	bl	800f724 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d9e4:	f7fd fff1 	bl	800b9ca <hci_reset>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d005      	beq.n	800d9fe <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	48a0      	ldr	r0, [pc, #640]	; (800dc78 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800d9f8:	f001 fdf8 	bl	800f5ec <iprintf>
 800d9fc:	e002      	b.n	800da04 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800d9fe:	489f      	ldr	r0, [pc, #636]	; (800dc7c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800da00:	f001 fe90 	bl	800f724 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800da04:	f000 f9c2 	bl	800dd8c <BleGetBdAddress>
 800da08:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	2106      	movs	r1, #6
 800da0e:	2000      	movs	r0, #0
 800da10:	f7fd fe9b 	bl	800b74a <aci_hal_write_config_data>
 800da14:	4603      	mov	r3, r0
 800da16:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d005      	beq.n	800da2a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	4619      	mov	r1, r3
 800da22:	4897      	ldr	r0, [pc, #604]	; (800dc80 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800da24:	f001 fde2 	bl	800f5ec <iprintf>
 800da28:	e021      	b.n	800da6e <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800da2a:	4896      	ldr	r0, [pc, #600]	; (800dc84 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800da2c:	f001 fe7a 	bl	800f724 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	3305      	adds	r3, #5
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	4618      	mov	r0, r3
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	3304      	adds	r3, #4
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	461c      	mov	r4, r3
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	3303      	adds	r3, #3
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	461d      	mov	r5, r3
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	3302      	adds	r3, #2
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	3301      	adds	r3, #1
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	4619      	mov	r1, r3
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	9302      	str	r3, [sp, #8]
 800da5e:	9101      	str	r1, [sp, #4]
 800da60:	9200      	str	r2, [sp, #0]
 800da62:	462b      	mov	r3, r5
 800da64:	4622      	mov	r2, r4
 800da66:	4601      	mov	r1, r0
 800da68:	4887      	ldr	r0, [pc, #540]	; (800dc88 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800da6a:	f001 fdbf 	bl	800f5ec <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800da6e:	4a87      	ldr	r2, [pc, #540]	; (800dc8c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800da70:	2110      	movs	r1, #16
 800da72:	2018      	movs	r0, #24
 800da74:	f7fd fe69 	bl	800b74a <aci_hal_write_config_data>
 800da78:	4603      	mov	r3, r0
 800da7a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d005      	beq.n	800da8e <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	4619      	mov	r1, r3
 800da86:	4882      	ldr	r0, [pc, #520]	; (800dc90 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800da88:	f001 fdb0 	bl	800f5ec <iprintf>
 800da8c:	e002      	b.n	800da94 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800da8e:	4881      	ldr	r0, [pc, #516]	; (800dc94 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800da90:	f001 fe48 	bl	800f724 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800da94:	4a80      	ldr	r2, [pc, #512]	; (800dc98 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800da96:	2110      	movs	r1, #16
 800da98:	2008      	movs	r0, #8
 800da9a:	f7fd fe56 	bl	800b74a <aci_hal_write_config_data>
 800da9e:	4603      	mov	r3, r0
 800daa0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800daa2:	7dfb      	ldrb	r3, [r7, #23]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d005      	beq.n	800dab4 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
 800daaa:	4619      	mov	r1, r3
 800daac:	487b      	ldr	r0, [pc, #492]	; (800dc9c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800daae:	f001 fd9d 	bl	800f5ec <iprintf>
 800dab2:	e002      	b.n	800daba <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800dab4:	487a      	ldr	r0, [pc, #488]	; (800dca0 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800dab6:	f001 fe35 	bl	800f724 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800daba:	2118      	movs	r1, #24
 800dabc:	2001      	movs	r0, #1
 800dabe:	f7fd fec9 	bl	800b854 <aci_hal_set_tx_power_level>
 800dac2:	4603      	mov	r3, r0
 800dac4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d005      	beq.n	800dad8 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800dacc:	7dfb      	ldrb	r3, [r7, #23]
 800dace:	4619      	mov	r1, r3
 800dad0:	4874      	ldr	r0, [pc, #464]	; (800dca4 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800dad2:	f001 fd8b 	bl	800f5ec <iprintf>
 800dad6:	e002      	b.n	800dade <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800dad8:	4873      	ldr	r0, [pc, #460]	; (800dca8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800dada:	f001 fe23 	bl	800f724 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800dade:	f7fd fb88 	bl	800b1f2 <aci_gatt_init>
 800dae2:	4603      	mov	r3, r0
 800dae4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d005      	beq.n	800daf8 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800daec:	7dfb      	ldrb	r3, [r7, #23]
 800daee:	4619      	mov	r1, r3
 800daf0:	486e      	ldr	r0, [pc, #440]	; (800dcac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800daf2:	f001 fd7b 	bl	800f5ec <iprintf>
 800daf6:	e002      	b.n	800dafe <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800daf8:	486d      	ldr	r0, [pc, #436]	; (800dcb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dafa:	f001 fe13 	bl	800f724 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800db02:	7bfb      	ldrb	r3, [r7, #15]
 800db04:	f043 0301 	orr.w	r3, r3, #1
 800db08:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d02b      	beq.n	800db68 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800db10:	4b68      	ldr	r3, [pc, #416]	; (800dcb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800db12:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800db14:	1dba      	adds	r2, r7, #6
 800db16:	7bf8      	ldrb	r0, [r7, #15]
 800db18:	1cbb      	adds	r3, r7, #2
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	1d3b      	adds	r3, r7, #4
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	4613      	mov	r3, r2
 800db22:	2208      	movs	r2, #8
 800db24:	2100      	movs	r1, #0
 800db26:	f7fd f9ba 	bl	800ae9e <aci_gap_init>
 800db2a:	4603      	mov	r3, r0
 800db2c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	4619      	mov	r1, r3
 800db38:	485f      	ldr	r0, [pc, #380]	; (800dcb8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800db3a:	f001 fd57 	bl	800f5ec <iprintf>
 800db3e:	e002      	b.n	800db46 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800db40:	485e      	ldr	r0, [pc, #376]	; (800dcbc <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800db42:	f001 fdef 	bl	800f724 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800db46:	88fc      	ldrh	r4, [r7, #6]
 800db48:	88bd      	ldrh	r5, [r7, #4]
 800db4a:	68b8      	ldr	r0, [r7, #8]
 800db4c:	f7f2 fb18 	bl	8000180 <strlen>
 800db50:	4603      	mov	r3, r0
 800db52:	b2da      	uxtb	r2, r3
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	4613      	mov	r3, r2
 800db5a:	2200      	movs	r2, #0
 800db5c:	4629      	mov	r1, r5
 800db5e:	4620      	mov	r0, r4
 800db60:	f7fd fd4a 	bl	800b5f8 <aci_gatt_update_char_value>
 800db64:	4603      	mov	r3, r0
 800db66:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800db68:	88f8      	ldrh	r0, [r7, #6]
 800db6a:	8879      	ldrh	r1, [r7, #2]
 800db6c:	463b      	mov	r3, r7
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	2302      	movs	r3, #2
 800db72:	2200      	movs	r2, #0
 800db74:	f7fd fd40 	bl	800b5f8 <aci_gatt_update_char_value>
 800db78:	4603      	mov	r3, r0
 800db7a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800db7c:	2202      	movs	r2, #2
 800db7e:	2102      	movs	r1, #2
 800db80:	2000      	movs	r0, #0
 800db82:	f7fd ff46 	bl	800ba12 <hci_le_set_default_phy>
 800db86:	4603      	mov	r3, r0
 800db88:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d005      	beq.n	800db9c <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800db90:	7dfb      	ldrb	r3, [r7, #23]
 800db92:	4619      	mov	r1, r3
 800db94:	484a      	ldr	r0, [pc, #296]	; (800dcc0 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800db96:	f001 fd29 	bl	800f5ec <iprintf>
 800db9a:	e002      	b.n	800dba2 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800db9c:	4849      	ldr	r0, [pc, #292]	; (800dcc4 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800db9e:	f001 fdc1 	bl	800f724 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800dba2:	4b49      	ldr	r3, [pc, #292]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dba4:	2201      	movs	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800dba8:	4b47      	ldr	r3, [pc, #284]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fc fff7 	bl	800aba0 <aci_gap_set_io_capability>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d005      	beq.n	800dbc8 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4842      	ldr	r0, [pc, #264]	; (800dccc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800dbc2:	f001 fd13 	bl	800f5ec <iprintf>
 800dbc6:	e002      	b.n	800dbce <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800dbc8:	4841      	ldr	r0, [pc, #260]	; (800dcd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800dbca:	f001 fdab 	bl	800f724 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800dbce:	4b3e      	ldr	r3, [pc, #248]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800dbd4:	4b3c      	ldr	r3, [pc, #240]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbd6:	2208      	movs	r2, #8
 800dbd8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800dbda:	4b3b      	ldr	r3, [pc, #236]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbdc:	2210      	movs	r2, #16
 800dbde:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800dbe0:	4b39      	ldr	r3, [pc, #228]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800dbe6:	4b38      	ldr	r3, [pc, #224]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbe8:	4a3a      	ldr	r2, [pc, #232]	; (800dcd4 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800dbea:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800dbec:	4b36      	ldr	r3, [pc, #216]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800dbf2:	4b35      	ldr	r3, [pc, #212]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbf4:	789c      	ldrb	r4, [r3, #2]
 800dbf6:	4b34      	ldr	r3, [pc, #208]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbf8:	785d      	ldrb	r5, [r3, #1]
 800dbfa:	4b33      	ldr	r3, [pc, #204]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dbfc:	791b      	ldrb	r3, [r3, #4]
 800dbfe:	4a32      	ldr	r2, [pc, #200]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dc00:	7952      	ldrb	r2, [r2, #5]
 800dc02:	4931      	ldr	r1, [pc, #196]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dc04:	78c9      	ldrb	r1, [r1, #3]
 800dc06:	4830      	ldr	r0, [pc, #192]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dc08:	6880      	ldr	r0, [r0, #8]
 800dc0a:	2600      	movs	r6, #0
 800dc0c:	9604      	str	r6, [sp, #16]
 800dc0e:	9003      	str	r0, [sp, #12]
 800dc10:	9102      	str	r1, [sp, #8]
 800dc12:	9201      	str	r2, [sp, #4]
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	2300      	movs	r3, #0
 800dc18:	2201      	movs	r2, #1
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7fd f813 	bl	800ac48 <aci_gap_set_authentication_requirement>
 800dc22:	4603      	mov	r3, r0
 800dc24:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d005      	beq.n	800dc38 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800dc2c:	7dfb      	ldrb	r3, [r7, #23]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4829      	ldr	r0, [pc, #164]	; (800dcd8 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800dc32:	f001 fcdb 	bl	800f5ec <iprintf>
 800dc36:	e002      	b.n	800dc3e <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800dc38:	4828      	ldr	r0, [pc, #160]	; (800dcdc <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800dc3a:	f001 fd73 	bl	800f724 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800dc3e:	4b22      	ldr	r3, [pc, #136]	; (800dcc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dc40:	789b      	ldrb	r3, [r3, #2]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00f      	beq.n	800dc66 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800dc46:	f7fd fa49 	bl	800b0dc <aci_gap_configure_whitelist>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d005      	beq.n	800dc60 <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800dc54:	7dfb      	ldrb	r3, [r7, #23]
 800dc56:	4619      	mov	r1, r3
 800dc58:	4821      	ldr	r0, [pc, #132]	; (800dce0 <Ble_Hci_Gap_Gatt_Init+0x310>)
 800dc5a:	f001 fcc7 	bl	800f5ec <iprintf>
 800dc5e:	e002      	b.n	800dc66 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800dc60:	4820      	ldr	r0, [pc, #128]	; (800dce4 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800dc62:	f001 fd5f 	bl	800f724 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800dc66:	4820      	ldr	r0, [pc, #128]	; (800dce8 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800dc68:	f001 fcc0 	bl	800f5ec <iprintf>
}
 800dc6c:	bf00      	nop
 800dc6e:	371c      	adds	r7, #28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc74:	08012438 	.word	0x08012438
 800dc78:	08012464 	.word	0x08012464
 800dc7c:	08012494 	.word	0x08012494
 800dc80:	080124b4 	.word	0x080124b4
 800dc84:	08012510 	.word	0x08012510
 800dc88:	0801255c 	.word	0x0801255c
 800dc8c:	08012f94 	.word	0x08012f94
 800dc90:	08012598 	.word	0x08012598
 800dc94:	080125f0 	.word	0x080125f0
 800dc98:	08012fa4 	.word	0x08012fa4
 800dc9c:	08012638 	.word	0x08012638
 800dca0:	08012690 	.word	0x08012690
 800dca4:	080126d8 	.word	0x080126d8
 800dca8:	08012718 	.word	0x08012718
 800dcac:	08012748 	.word	0x08012748
 800dcb0:	0801277c 	.word	0x0801277c
 800dcb4:	080127a0 	.word	0x080127a0
 800dcb8:	080127ac 	.word	0x080127ac
 800dcbc:	080127dc 	.word	0x080127dc
 800dcc0:	080127fc 	.word	0x080127fc
 800dcc4:	08012838 	.word	0x08012838
 800dcc8:	20002784 	.word	0x20002784
 800dccc:	08012864 	.word	0x08012864
 800dcd0:	080128a4 	.word	0x080128a4
 800dcd4:	0001b207 	.word	0x0001b207
 800dcd8:	080128d4 	.word	0x080128d4
 800dcdc:	08012920 	.word	0x08012920
 800dce0:	0801295c 	.word	0x0801295c
 800dce4:	0801299c 	.word	0x0801299c
 800dce8:	080129cc 	.word	0x080129cc

0800dcec <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08c      	sub	sp, #48	; 0x30
 800dcf0:	af08      	add	r7, sp, #32
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800dcf6:	2392      	movs	r3, #146	; 0x92
 800dcf8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800dcfa:	4a1e      	ldr	r2, [pc, #120]	; (800dd74 <Adv_Request+0x88>)
 800dcfc:	79fb      	ldrb	r3, [r7, #7]
 800dcfe:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800dd02:	2300      	movs	r3, #0
 800dd04:	9306      	str	r3, [sp, #24]
 800dd06:	2300      	movs	r3, #0
 800dd08:	9305      	str	r3, [sp, #20]
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	9303      	str	r3, [sp, #12]
 800dd12:	2300      	movs	r3, #0
 800dd14:	9302      	str	r3, [sp, #8]
 800dd16:	2300      	movs	r3, #0
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	22a0      	movs	r2, #160	; 0xa0
 800dd22:	2180      	movs	r1, #128	; 0x80
 800dd24:	2000      	movs	r0, #0
 800dd26:	f7fc fe41 	bl	800a9ac <aci_gap_set_discoverable>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800dd2e:	7bfb      	ldrb	r3, [r7, #15]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d005      	beq.n	800dd40 <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	4619      	mov	r1, r3
 800dd38:	480f      	ldr	r0, [pc, #60]	; (800dd78 <Adv_Request+0x8c>)
 800dd3a:	f001 fc57 	bl	800f5ec <iprintf>
 800dd3e:	e002      	b.n	800dd46 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800dd40:	480e      	ldr	r0, [pc, #56]	; (800dd7c <Adv_Request+0x90>)
 800dd42:	f001 fcef 	bl	800f724 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800dd46:	490e      	ldr	r1, [pc, #56]	; (800dd80 <Adv_Request+0x94>)
 800dd48:	2007      	movs	r0, #7
 800dd4a:	f7fd f955 	bl	800aff8 <aci_gap_update_adv_data>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800dd52:	7bfb      	ldrb	r3, [r7, #15]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800dd58:	7bfb      	ldrb	r3, [r7, #15]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4809      	ldr	r0, [pc, #36]	; (800dd84 <Adv_Request+0x98>)
 800dd5e:	f001 fc45 	bl	800f5ec <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800dd62:	e003      	b.n	800dd6c <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800dd64:	4808      	ldr	r0, [pc, #32]	; (800dd88 <Adv_Request+0x9c>)
 800dd66:	f001 fc41 	bl	800f5ec <iprintf>
  return;
 800dd6a:	bf00      	nop
}
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	20002784 	.word	0x20002784
 800dd78:	080129f8 	.word	0x080129f8
 800dd7c:	08012a30 	.word	0x08012a30
 800dd80:	20000018 	.word	0x20000018
 800dd84:	08012a58 	.word	0x08012a58
 800dd88:	08012a8c 	.word	0x08012a8c

0800dd8c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800dd92:	f7ff fb9b 	bl	800d4cc <LL_FLASH_GetUDN>
 800dd96:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd9e:	d023      	beq.n	800dde8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800dda0:	f7ff fbac 	bl	800d4fc <LL_FLASH_GetSTCompanyID>
 800dda4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800dda6:	f7ff fb9d 	bl	800d4e4 <LL_FLASH_GetDeviceID>
 800ddaa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	4b16      	ldr	r3, [pc, #88]	; (800de0c <BleGetBdAddress+0x80>)
 800ddb2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	0a1b      	lsrs	r3, r3, #8
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	4b14      	ldr	r3, [pc, #80]	; (800de0c <BleGetBdAddress+0x80>)
 800ddbc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	4b12      	ldr	r3, [pc, #72]	; (800de0c <BleGetBdAddress+0x80>)
 800ddc4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	4b10      	ldr	r3, [pc, #64]	; (800de0c <BleGetBdAddress+0x80>)
 800ddcc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	0a1b      	lsrs	r3, r3, #8
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	4b0d      	ldr	r3, [pc, #52]	; (800de0c <BleGetBdAddress+0x80>)
 800ddd6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	0c1b      	lsrs	r3, r3, #16
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <BleGetBdAddress+0x80>)
 800dde0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800dde2:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <BleGetBdAddress+0x80>)
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	e00b      	b.n	800de00 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800dde8:	2000      	movs	r0, #0
 800ddea:	f7fe fe87 	bl	800cafc <OTP_Read>
 800ddee:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	617b      	str	r3, [r7, #20]
 800ddfa:	e001      	b.n	800de00 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ddfc:	4b04      	ldr	r3, [pc, #16]	; (800de10 <BleGetBdAddress+0x84>)
 800ddfe:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800de00:	697b      	ldr	r3, [r7, #20]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	2000277c 	.word	0x2000277c
 800de10:	08012f8c 	.word	0x08012f8c

0800de14 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800de1a:	4b10      	ldr	r3, [pc, #64]	; (800de5c <Adv_Cancel+0x48>)
 800de1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de20:	2b05      	cmp	r3, #5
 800de22:	d017      	beq.n	800de54 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800de24:	2392      	movs	r3, #146	; 0x92
 800de26:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800de28:	f7fc fd9c 	bl	800a964 <aci_gap_set_non_discoverable>
 800de2c:	4603      	mov	r3, r0
 800de2e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800de30:	4b0a      	ldr	r3, [pc, #40]	; (800de5c <Adv_Cancel+0x48>)
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d003      	beq.n	800de46 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800de3e:	4808      	ldr	r0, [pc, #32]	; (800de60 <Adv_Cancel+0x4c>)
 800de40:	f001 fbd4 	bl	800f5ec <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800de44:	e006      	b.n	800de54 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800de46:	4807      	ldr	r0, [pc, #28]	; (800de64 <Adv_Cancel+0x50>)
 800de48:	f001 fbd0 	bl	800f5ec <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800de4c:	4806      	ldr	r0, [pc, #24]	; (800de68 <Adv_Cancel+0x54>)
 800de4e:	f001 fbcd 	bl	800f5ec <iprintf>
  return;
 800de52:	bf00      	nop
 800de54:	bf00      	nop
}
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	20002784 	.word	0x20002784
 800de60:	08012ab4 	.word	0x08012ab4
 800de64:	08012ad8 	.word	0x08012ad8
 800de68:	08012ae0 	.word	0x08012ae0

0800de6c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800de74:	2100      	movs	r1, #0
 800de76:	2002      	movs	r0, #2
 800de78:	f000 fdee 	bl	800ea58 <UTIL_SEQ_SetTask>

  return;
 800de7c:	bf00      	nop
}
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800de8c:	2001      	movs	r0, #1
 800de8e:	f000 fe4f 	bl	800eb30 <UTIL_SEQ_SetEvt>

  return;
 800de92:	bf00      	nop
}
 800de94:	3708      	adds	r7, #8
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b082      	sub	sp, #8
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800dea2:	2001      	movs	r0, #1
 800dea4:	f000 fe64 	bl	800eb70 <UTIL_SEQ_WaitEvt>

  return;
 800dea8:	bf00      	nop
}
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	3308      	adds	r3, #8
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fd ff0c 	bl	800bce0 <SVCCTL_UserEvtRx>
 800dec8:	4603      	mov	r3, r0
 800deca:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800decc:	7afb      	ldrb	r3, [r7, #11]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d003      	beq.n	800deda <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2201      	movs	r2, #1
 800ded6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ded8:	e003      	b.n	800dee2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2200      	movs	r2, #0
 800dede:	701a      	strb	r2, [r3, #0]
  return;
 800dee0:	bf00      	nop
}
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	4603      	mov	r3, r0
 800def0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800def2:	79fb      	ldrb	r3, [r7, #7]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <BLE_StatusNot+0x16>
 800def8:	2b01      	cmp	r3, #1
 800defa:	d006      	beq.n	800df0a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800defc:	e00b      	b.n	800df16 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800defe:	2307      	movs	r3, #7
 800df00:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	f000 fdd4 	bl	800eab0 <UTIL_SEQ_PauseTask>
      break;
 800df08:	e005      	b.n	800df16 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800df0a:	2307      	movs	r3, #7
 800df0c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f000 fdee 	bl	800eaf0 <UTIL_SEQ_ResumeTask>
      break;
 800df14:	bf00      	nop
  }

  return;
 800df16:	bf00      	nop
}
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
	...

0800df20 <myTask>:
/* CUSTOM_SVC */
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
void myTask(void){
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
	UpdateCharData[0] = AFIB_DETECTED;
 800df24:	4b03      	ldr	r3, [pc, #12]	; (800df34 <myTask+0x14>)
 800df26:	781a      	ldrb	r2, [r3, #0]
 800df28:	4b03      	ldr	r3, [pc, #12]	; (800df38 <myTask+0x18>)
 800df2a:	701a      	strb	r2, [r3, #0]
	Custom_Mycharnotify_Update_Char();
 800df2c:	f000 f83e 	bl	800dfac <Custom_Mycharnotify_Update_Char>
}
 800df30:	bf00      	nop
 800df32:	bd80      	pop	{r7, pc}
 800df34:	20000008 	.word	0x20000008
 800df38:	2000280c 	.word	0x2000280c

0800df3c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d80b      	bhi.n	800df64 <Custom_STM_App_Notification+0x28>
 800df4c:	a201      	add	r2, pc, #4	; (adr r2, 800df54 <Custom_STM_App_Notification+0x18>)
 800df4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df52:	bf00      	nop
 800df54:	0800df65 	.word	0x0800df65
 800df58:	0800df65 	.word	0x0800df65
 800df5c:	0800df65 	.word	0x0800df65
 800df60:	0800df65 	.word	0x0800df65

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800df64:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800df66:	bf00      	nop
}
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop

0800df74 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <Custom_APP_Notification+0x16>
 800df84:	2b01      	cmp	r3, #1
 800df86:	d002      	beq.n	800df8e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800df88:	e002      	b.n	800df90 <Custom_APP_Notification+0x1c>
      break;
 800df8a:	bf00      	nop
 800df8c:	e000      	b.n	800df90 <Custom_APP_Notification+0x1c>
      break;
 800df8e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800df90:	bf00      	nop
}
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800dfa0:	bf00      	nop
}
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
	...

0800dfac <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

/* CUSTOM_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mycharnotify_UC_1*/
  updateflag = 1;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END Mycharnotify_UC_1*/

  if (updateflag != 0)
 800dfba:	79fb      	ldrb	r3, [r7, #7]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <Custom_Mycharnotify_Update_Char+0x1e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800dfc0:	4904      	ldr	r1, [pc, #16]	; (800dfd4 <Custom_Mycharnotify_Update_Char+0x28>)
 800dfc2:	2001      	movs	r0, #1
 800dfc4:	f000 f942 	bl	800e24c <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mycharnotify_UC_Last*/

  /* USER CODE END Mycharnotify_UC_Last*/
  return;
 800dfc8:	bf00      	nop
 800dfca:	bf00      	nop
}
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	2000280c 	.word	0x2000280c

0800dfd8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08a      	sub	sp, #40	; 0x28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	2bff      	cmp	r3, #255	; 0xff
 800dff2:	d141      	bne.n	800e078 <Custom_STM_Event_Handler+0xa0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800dff4:	6a3b      	ldr	r3, [r7, #32]
 800dff6:	3302      	adds	r3, #2
 800dff8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	f640 4214 	movw	r2, #3092	; 0xc14
 800e004:	4293      	cmp	r3, r2
 800e006:	d033      	beq.n	800e070 <Custom_STM_Event_Handler+0x98>
 800e008:	f640 4214 	movw	r2, #3092	; 0xc14
 800e00c:	4293      	cmp	r3, r2
 800e00e:	dc31      	bgt.n	800e074 <Custom_STM_Event_Handler+0x9c>
 800e010:	f640 4201 	movw	r2, #3073	; 0xc01
 800e014:	4293      	cmp	r3, r2
 800e016:	d003      	beq.n	800e020 <Custom_STM_Event_Handler+0x48>
 800e018:	f640 4213 	movw	r2, #3091	; 0xc13
 800e01c:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800e01e:	e02a      	b.n	800e076 <Custom_STM_Event_Handler+0x9e>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	3302      	adds	r3, #2
 800e024:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	885b      	ldrh	r3, [r3, #2]
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	461a      	mov	r2, r3
 800e02e:	4b16      	ldr	r3, [pc, #88]	; (800e088 <Custom_STM_Event_Handler+0xb0>)
 800e030:	889b      	ldrh	r3, [r3, #4]
 800e032:	3302      	adds	r3, #2
 800e034:	429a      	cmp	r2, r3
 800e036:	d119      	bne.n	800e06c <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800e038:	2301      	movs	r3, #1
 800e03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	7a1b      	ldrb	r3, [r3, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <Custom_STM_Event_Handler+0x74>
 800e046:	2b01      	cmp	r3, #1
 800e048:	d008      	beq.n	800e05c <Custom_STM_Event_Handler+0x84>
              break;
 800e04a:	e010      	b.n	800e06e <Custom_STM_Event_Handler+0x96>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e050:	f107 0308 	add.w	r3, r7, #8
 800e054:	4618      	mov	r0, r3
 800e056:	f7ff ff71 	bl	800df3c <Custom_STM_App_Notification>
                break;
 800e05a:	e008      	b.n	800e06e <Custom_STM_Event_Handler+0x96>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800e05c:	2302      	movs	r3, #2
 800e05e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e060:	f107 0308 	add.w	r3, r7, #8
 800e064:	4618      	mov	r0, r3
 800e066:	f7ff ff69 	bl	800df3c <Custom_STM_App_Notification>
                break;
 800e06a:	e000      	b.n	800e06e <Custom_STM_Event_Handler+0x96>
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/
 800e06c:	bf00      	nop
          break;
 800e06e:	e002      	b.n	800e076 <Custom_STM_Event_Handler+0x9e>
          break;
 800e070:	bf00      	nop
 800e072:	e002      	b.n	800e07a <Custom_STM_Event_Handler+0xa2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800e074:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e076:	e000      	b.n	800e07a <Custom_STM_Event_Handler+0xa2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800e078:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800e07a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800e07e:	4618      	mov	r0, r3
 800e080:	3728      	adds	r7, #40	; 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20002904 	.word	0x20002904

0800e08c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08c      	sub	sp, #48	; 0x30
 800e090:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e092:	2392      	movs	r3, #146	; 0x92
 800e094:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800e096:	4861      	ldr	r0, [pc, #388]	; (800e21c <SVCCTL_InitCustomSvc+0x190>)
 800e098:	f7fd fe08 	bl	800bcac <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_CUSTOM_SVC_UUID(uuid.Char_UUID_128);
 800e09c:	238f      	movs	r3, #143	; 0x8f
 800e09e:	713b      	strb	r3, [r7, #4]
 800e0a0:	23e5      	movs	r3, #229	; 0xe5
 800e0a2:	717b      	strb	r3, [r7, #5]
 800e0a4:	23b3      	movs	r3, #179	; 0xb3
 800e0a6:	71bb      	strb	r3, [r7, #6]
 800e0a8:	23d5      	movs	r3, #213	; 0xd5
 800e0aa:	71fb      	strb	r3, [r7, #7]
 800e0ac:	232e      	movs	r3, #46	; 0x2e
 800e0ae:	723b      	strb	r3, [r7, #8]
 800e0b0:	237f      	movs	r3, #127	; 0x7f
 800e0b2:	727b      	strb	r3, [r7, #9]
 800e0b4:	234a      	movs	r3, #74	; 0x4a
 800e0b6:	72bb      	strb	r3, [r7, #10]
 800e0b8:	2398      	movs	r3, #152	; 0x98
 800e0ba:	72fb      	strb	r3, [r7, #11]
 800e0bc:	232a      	movs	r3, #42	; 0x2a
 800e0be:	733b      	strb	r3, [r7, #12]
 800e0c0:	2348      	movs	r3, #72	; 0x48
 800e0c2:	737b      	strb	r3, [r7, #13]
 800e0c4:	237a      	movs	r3, #122	; 0x7a
 800e0c6:	73bb      	strb	r3, [r7, #14]
 800e0c8:	23cc      	movs	r3, #204	; 0xcc
 800e0ca:	73fb      	strb	r3, [r7, #15]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	743b      	strb	r3, [r7, #16]
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	747b      	strb	r3, [r7, #17]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	74bb      	strb	r3, [r7, #18]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e0dc:	1d39      	adds	r1, r7, #4
 800e0de:	4b50      	ldr	r3, [pc, #320]	; (800e220 <SVCCTL_InitCustomSvc+0x194>)
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	2306      	movs	r3, #6
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	2002      	movs	r0, #2
 800e0e8:	f7fd f8a8 	bl	800b23c <aci_gatt_add_service>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             6,
                             &(CustomContext.CustomCustom_SvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d005      	beq.n	800e102 <SVCCTL_InitCustomSvc+0x76>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: CUSTOM_SVC, error code: 0x%x \n\r", ret);
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	484a      	ldr	r0, [pc, #296]	; (800e224 <SVCCTL_InitCustomSvc+0x198>)
 800e0fc:	f001 fa76 	bl	800f5ec <iprintf>
 800e100:	e002      	b.n	800e108 <SVCCTL_InitCustomSvc+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: CUSTOM_SVC \n\r");
 800e102:	4849      	ldr	r0, [pc, #292]	; (800e228 <SVCCTL_InitCustomSvc+0x19c>)
 800e104:	f001 fa72 	bl	800f5ec <iprintf>
  }

  /**
   *  MY_CHAR
   */
  COPY_MY_CHAR_UUID(uuid.Char_UUID_128);
 800e108:	2319      	movs	r3, #25
 800e10a:	713b      	strb	r3, [r7, #4]
 800e10c:	23ed      	movs	r3, #237	; 0xed
 800e10e:	717b      	strb	r3, [r7, #5]
 800e110:	2382      	movs	r3, #130	; 0x82
 800e112:	71bb      	strb	r3, [r7, #6]
 800e114:	23ae      	movs	r3, #174	; 0xae
 800e116:	71fb      	strb	r3, [r7, #7]
 800e118:	23ed      	movs	r3, #237	; 0xed
 800e11a:	723b      	strb	r3, [r7, #8]
 800e11c:	2321      	movs	r3, #33	; 0x21
 800e11e:	727b      	strb	r3, [r7, #9]
 800e120:	234c      	movs	r3, #76	; 0x4c
 800e122:	72bb      	strb	r3, [r7, #10]
 800e124:	239d      	movs	r3, #157	; 0x9d
 800e126:	72fb      	strb	r3, [r7, #11]
 800e128:	2341      	movs	r3, #65	; 0x41
 800e12a:	733b      	strb	r3, [r7, #12]
 800e12c:	2345      	movs	r3, #69	; 0x45
 800e12e:	737b      	strb	r3, [r7, #13]
 800e130:	2322      	movs	r3, #34	; 0x22
 800e132:	73bb      	strb	r3, [r7, #14]
 800e134:	238e      	movs	r3, #142	; 0x8e
 800e136:	73fb      	strb	r3, [r7, #15]
 800e138:	2300      	movs	r3, #0
 800e13a:	743b      	strb	r3, [r7, #16]
 800e13c:	2300      	movs	r3, #0
 800e13e:	747b      	strb	r3, [r7, #17]
 800e140:	2300      	movs	r3, #0
 800e142:	74bb      	strb	r3, [r7, #18]
 800e144:	2300      	movs	r3, #0
 800e146:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCustom_SvcHdle,
 800e148:	4b35      	ldr	r3, [pc, #212]	; (800e220 <SVCCTL_InitCustomSvc+0x194>)
 800e14a:	8818      	ldrh	r0, [r3, #0]
 800e14c:	4b37      	ldr	r3, [pc, #220]	; (800e22c <SVCCTL_InitCustomSvc+0x1a0>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	b29b      	uxth	r3, r3
 800e152:	1d3a      	adds	r2, r7, #4
 800e154:	4936      	ldr	r1, [pc, #216]	; (800e230 <SVCCTL_InitCustomSvc+0x1a4>)
 800e156:	9105      	str	r1, [sp, #20]
 800e158:	2100      	movs	r1, #0
 800e15a:	9104      	str	r1, [sp, #16]
 800e15c:	2110      	movs	r1, #16
 800e15e:	9103      	str	r1, [sp, #12]
 800e160:	2100      	movs	r1, #0
 800e162:	9102      	str	r1, [sp, #8]
 800e164:	2100      	movs	r1, #0
 800e166:	9101      	str	r1, [sp, #4]
 800e168:	210a      	movs	r1, #10
 800e16a:	9100      	str	r1, [sp, #0]
 800e16c:	2102      	movs	r1, #2
 800e16e:	f7fd f93b 	bl	800b3e8 <aci_gatt_add_char>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomMy_CharHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d005      	beq.n	800e188 <SVCCTL_InitCustomSvc+0xfc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MY_CHAR, error code: 0x%x \n\r", ret);
 800e17c:	7dfb      	ldrb	r3, [r7, #23]
 800e17e:	4619      	mov	r1, r3
 800e180:	482c      	ldr	r0, [pc, #176]	; (800e234 <SVCCTL_InitCustomSvc+0x1a8>)
 800e182:	f001 fa33 	bl	800f5ec <iprintf>
 800e186:	e002      	b.n	800e18e <SVCCTL_InitCustomSvc+0x102>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MY_CHAR \n\r");
 800e188:	482b      	ldr	r0, [pc, #172]	; (800e238 <SVCCTL_InitCustomSvc+0x1ac>)
 800e18a:	f001 fa2f 	bl	800f5ec <iprintf>
  }
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800e18e:	2319      	movs	r3, #25
 800e190:	713b      	strb	r3, [r7, #4]
 800e192:	23ed      	movs	r3, #237	; 0xed
 800e194:	717b      	strb	r3, [r7, #5]
 800e196:	2382      	movs	r3, #130	; 0x82
 800e198:	71bb      	strb	r3, [r7, #6]
 800e19a:	23ae      	movs	r3, #174	; 0xae
 800e19c:	71fb      	strb	r3, [r7, #7]
 800e19e:	23ed      	movs	r3, #237	; 0xed
 800e1a0:	723b      	strb	r3, [r7, #8]
 800e1a2:	2321      	movs	r3, #33	; 0x21
 800e1a4:	727b      	strb	r3, [r7, #9]
 800e1a6:	234c      	movs	r3, #76	; 0x4c
 800e1a8:	72bb      	strb	r3, [r7, #10]
 800e1aa:	239d      	movs	r3, #157	; 0x9d
 800e1ac:	72fb      	strb	r3, [r7, #11]
 800e1ae:	2341      	movs	r3, #65	; 0x41
 800e1b0:	733b      	strb	r3, [r7, #12]
 800e1b2:	2345      	movs	r3, #69	; 0x45
 800e1b4:	737b      	strb	r3, [r7, #13]
 800e1b6:	2322      	movs	r3, #34	; 0x22
 800e1b8:	73bb      	strb	r3, [r7, #14]
 800e1ba:	238e      	movs	r3, #142	; 0x8e
 800e1bc:	73fb      	strb	r3, [r7, #15]
 800e1be:	2301      	movs	r3, #1
 800e1c0:	743b      	strb	r3, [r7, #16]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	747b      	strb	r3, [r7, #17]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	74bb      	strb	r3, [r7, #18]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomCustom_SvcHdle,
 800e1ce:	4b14      	ldr	r3, [pc, #80]	; (800e220 <SVCCTL_InitCustomSvc+0x194>)
 800e1d0:	8818      	ldrh	r0, [r3, #0]
 800e1d2:	4b1a      	ldr	r3, [pc, #104]	; (800e23c <SVCCTL_InitCustomSvc+0x1b0>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	1d3a      	adds	r2, r7, #4
 800e1da:	4919      	ldr	r1, [pc, #100]	; (800e240 <SVCCTL_InitCustomSvc+0x1b4>)
 800e1dc:	9105      	str	r1, [sp, #20]
 800e1de:	2100      	movs	r1, #0
 800e1e0:	9104      	str	r1, [sp, #16]
 800e1e2:	2110      	movs	r1, #16
 800e1e4:	9103      	str	r1, [sp, #12]
 800e1e6:	2107      	movs	r1, #7
 800e1e8:	9102      	str	r1, [sp, #8]
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	9101      	str	r1, [sp, #4]
 800e1ee:	2110      	movs	r1, #16
 800e1f0:	9100      	str	r1, [sp, #0]
 800e1f2:	2102      	movs	r1, #2
 800e1f4:	f7fd f8f8 	bl	800b3e8 <aci_gatt_add_char>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomMycharnotifyHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e1fc:	7dfb      	ldrb	r3, [r7, #23]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d005      	beq.n	800e20e <SVCCTL_InitCustomSvc+0x182>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MYCHARNOTIFY, error code: 0x%x \n\r", ret);
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	4619      	mov	r1, r3
 800e206:	480f      	ldr	r0, [pc, #60]	; (800e244 <SVCCTL_InitCustomSvc+0x1b8>)
 800e208:	f001 f9f0 	bl	800f5ec <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800e20c:	e003      	b.n	800e216 <SVCCTL_InitCustomSvc+0x18a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MYCHARNOTIFY \n\r");
 800e20e:	480e      	ldr	r0, [pc, #56]	; (800e248 <SVCCTL_InitCustomSvc+0x1bc>)
 800e210:	f001 f9ec 	bl	800f5ec <iprintf>
  return;
 800e214:	bf00      	nop
}
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	0800dfd9 	.word	0x0800dfd9
 800e220:	20002904 	.word	0x20002904
 800e224:	08012afc 	.word	0x08012afc
 800e228:	08012b48 	.word	0x08012b48
 800e22c:	2000001f 	.word	0x2000001f
 800e230:	20002906 	.word	0x20002906
 800e234:	08012b80 	.word	0x08012b80
 800e238:	08012bc8 	.word	0x08012bc8
 800e23c:	20000020 	.word	0x20000020
 800e240:	20002908 	.word	0x20002908
 800e244:	08012bfc 	.word	0x08012bfc
 800e248:	08012c48 	.word	0x08012c48

0800e24c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af02      	add	r7, sp, #8
 800e252:	4603      	mov	r3, r0
 800e254:	6039      	str	r1, [r7, #0]
 800e256:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e258:	2392      	movs	r3, #146	; 0x92
 800e25a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800e25c:	79fb      	ldrb	r3, [r7, #7]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <Custom_STM_App_Update_Char+0x1c>
 800e262:	2b01      	cmp	r3, #1
 800e264:	d01b      	beq.n	800e29e <Custom_STM_App_Update_Char+0x52>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800e266:	e035      	b.n	800e2d4 <Custom_STM_App_Update_Char+0x88>
      ret = aci_gatt_update_char_value(CustomContext.CustomCustom_SvcHdle,
 800e268:	4b1d      	ldr	r3, [pc, #116]	; (800e2e0 <Custom_STM_App_Update_Char+0x94>)
 800e26a:	8818      	ldrh	r0, [r3, #0]
 800e26c:	4b1c      	ldr	r3, [pc, #112]	; (800e2e0 <Custom_STM_App_Update_Char+0x94>)
 800e26e:	8859      	ldrh	r1, [r3, #2]
 800e270:	4b1c      	ldr	r3, [pc, #112]	; (800e2e4 <Custom_STM_App_Update_Char+0x98>)
 800e272:	781a      	ldrb	r2, [r3, #0]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	4613      	mov	r3, r2
 800e27a:	2200      	movs	r2, #0
 800e27c:	f7fd f9bc 	bl	800b5f8 <aci_gatt_update_char_value>
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800e284:	7bfb      	ldrb	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d005      	beq.n	800e296 <Custom_STM_App_Update_Char+0x4a>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MY_CHAR command, result : 0x%x \n\r", ret);
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4816      	ldr	r0, [pc, #88]	; (800e2e8 <Custom_STM_App_Update_Char+0x9c>)
 800e290:	f001 f9ac 	bl	800f5ec <iprintf>
      break;
 800e294:	e01e      	b.n	800e2d4 <Custom_STM_App_Update_Char+0x88>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MY_CHAR command\n\r");
 800e296:	4815      	ldr	r0, [pc, #84]	; (800e2ec <Custom_STM_App_Update_Char+0xa0>)
 800e298:	f001 f9a8 	bl	800f5ec <iprintf>
      break;
 800e29c:	e01a      	b.n	800e2d4 <Custom_STM_App_Update_Char+0x88>
      ret = aci_gatt_update_char_value(CustomContext.CustomCustom_SvcHdle,
 800e29e:	4b10      	ldr	r3, [pc, #64]	; (800e2e0 <Custom_STM_App_Update_Char+0x94>)
 800e2a0:	8818      	ldrh	r0, [r3, #0]
 800e2a2:	4b0f      	ldr	r3, [pc, #60]	; (800e2e0 <Custom_STM_App_Update_Char+0x94>)
 800e2a4:	8899      	ldrh	r1, [r3, #4]
 800e2a6:	4b12      	ldr	r3, [pc, #72]	; (800e2f0 <Custom_STM_App_Update_Char+0xa4>)
 800e2a8:	781a      	ldrb	r2, [r3, #0]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f7fd f9a1 	bl	800b5f8 <aci_gatt_update_char_value>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <Custom_STM_App_Update_Char+0x80>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MYCHARNOTIFY command, result : 0x%x \n\r", ret);
 800e2c0:	7bfb      	ldrb	r3, [r7, #15]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	480b      	ldr	r0, [pc, #44]	; (800e2f4 <Custom_STM_App_Update_Char+0xa8>)
 800e2c6:	f001 f991 	bl	800f5ec <iprintf>
      break;
 800e2ca:	e002      	b.n	800e2d2 <Custom_STM_App_Update_Char+0x86>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MYCHARNOTIFY command\n\r");
 800e2cc:	480a      	ldr	r0, [pc, #40]	; (800e2f8 <Custom_STM_App_Update_Char+0xac>)
 800e2ce:	f001 f98d 	bl	800f5ec <iprintf>
      break;
 800e2d2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800e2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	20002904 	.word	0x20002904
 800e2e4:	2000001f 	.word	0x2000001f
 800e2e8:	08012c84 	.word	0x08012c84
 800e2ec:	08012ccc 	.word	0x08012ccc
 800e2f0:	20000020 	.word	0x20000020
 800e2f4:	08012d04 	.word	0x08012d04
 800e2f8:	08012d54 	.word	0x08012d54

0800e2fc <LL_PWR_EnableBootC2>:
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e300:	4b05      	ldr	r3, [pc, #20]	; (800e318 <LL_PWR_EnableBootC2+0x1c>)
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	4a04      	ldr	r2, [pc, #16]	; (800e318 <LL_PWR_EnableBootC2+0x1c>)
 800e306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e30a:	60d3      	str	r3, [r2, #12]
}
 800e30c:	bf00      	nop
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	58000400 	.word	0x58000400

0800e31c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e324:	4b06      	ldr	r3, [pc, #24]	; (800e340 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e326:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e32a:	4905      	ldr	r1, [pc, #20]	; (800e340 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4313      	orrs	r3, r2
 800e330:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800e334:	bf00      	nop
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr
 800e340:	58000800 	.word	0x58000800

0800e344 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e34e:	6a1a      	ldr	r2, [r3, #32]
 800e350:	4904      	ldr	r1, [pc, #16]	; (800e364 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4313      	orrs	r3, r2
 800e356:	620b      	str	r3, [r1, #32]
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr
 800e364:	58000800 	.word	0x58000800

0800e368 <LL_AHB3_GRP1_EnableClock>:
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4013      	ands	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e38c:	68fb      	ldr	r3, [r7, #12]
}
 800e38e:	bf00      	nop
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr

0800e39a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b085      	sub	sp, #20
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e3a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800e3aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e3b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
}
 800e3c6:	bf00      	nop
 800e3c8:	3714      	adds	r7, #20
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <LL_C1_IPCC_EnableIT_TXF>:
{
 800e3d2:	b480      	push	{r7}
 800e3d4:	b083      	sub	sp, #12
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]
}
 800e3e6:	bf00      	nop
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <LL_C1_IPCC_EnableIT_RXO>:
{
 800e3f2:	b480      	push	{r7}
 800e3f4:	b083      	sub	sp, #12
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f043 0201 	orr.w	r2, r3, #1
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	601a      	str	r2, [r3, #0]
}
 800e406:	bf00      	nop
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800e412:	b480      	push	{r7}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685a      	ldr	r2, [r3, #4]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	041b      	lsls	r3, r3, #16
 800e424:	43db      	mvns	r3, r3
 800e426:	401a      	ands	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	605a      	str	r2, [r3, #4]
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685a      	ldr	r2, [r3, #4]
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	041b      	lsls	r3, r3, #16
 800e44a:	431a      	orrs	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	605a      	str	r2, [r3, #4]
}
 800e450:	bf00      	nop
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	685a      	ldr	r2, [r3, #4]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	43db      	mvns	r3, r3
 800e46e:	401a      	ands	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	605a      	str	r2, [r3, #4]
}
 800e474:	bf00      	nop
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	609a      	str	r2, [r3, #8]
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <LL_C1_IPCC_SetFlag_CHx>:
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	041a      	lsls	r2, r3, #16
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	609a      	str	r2, [r3, #8]
}
 800e4ae:	bf00      	nop
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b083      	sub	sp, #12
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d101      	bne.n	800e4d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e000      	b.n	800e4d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	69da      	ldr	r2, [r3, #28]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d101      	bne.n	800e500 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e000      	b.n	800e502 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
	...

0800e510 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e514:	2102      	movs	r1, #2
 800e516:	4819      	ldr	r0, [pc, #100]	; (800e57c <HW_IPCC_Rx_Handler+0x6c>)
 800e518:	f7ff ffe4 	bl	800e4e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d009      	beq.n	800e536 <HW_IPCC_Rx_Handler+0x26>
 800e522:	4b16      	ldr	r3, [pc, #88]	; (800e57c <HW_IPCC_Rx_Handler+0x6c>)
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	43db      	mvns	r3, r3
 800e528:	f003 0302 	and.w	r3, r3, #2
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800e530:	f000 f8da 	bl	800e6e8 <HW_IPCC_SYS_EvtHandler>
 800e534:	e01f      	b.n	800e576 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e536:	2101      	movs	r1, #1
 800e538:	4810      	ldr	r0, [pc, #64]	; (800e57c <HW_IPCC_Rx_Handler+0x6c>)
 800e53a:	f7ff ffd3 	bl	800e4e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d008      	beq.n	800e556 <HW_IPCC_Rx_Handler+0x46>
 800e544:	4b0d      	ldr	r3, [pc, #52]	; (800e57c <HW_IPCC_Rx_Handler+0x6c>)
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d102      	bne.n	800e556 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800e550:	f000 f88e 	bl	800e670 <HW_IPCC_BLE_EvtHandler>
 800e554:	e00f      	b.n	800e576 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e556:	2108      	movs	r1, #8
 800e558:	4808      	ldr	r0, [pc, #32]	; (800e57c <HW_IPCC_Rx_Handler+0x6c>)
 800e55a:	f7ff ffc3 	bl	800e4e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d009      	beq.n	800e578 <HW_IPCC_Rx_Handler+0x68>
 800e564:	4b05      	ldr	r3, [pc, #20]	; (800e57c <HW_IPCC_Rx_Handler+0x6c>)
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	43db      	mvns	r3, r3
 800e56a:	f003 0308 	and.w	r3, r3, #8
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d002      	beq.n	800e578 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e572:	f000 f905 	bl	800e780 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e576:	bf00      	nop
 800e578:	bf00      	nop
}
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	58000c00 	.word	0x58000c00

0800e580 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e584:	2102      	movs	r1, #2
 800e586:	481a      	ldr	r0, [pc, #104]	; (800e5f0 <HW_IPCC_Tx_Handler+0x70>)
 800e588:	f7ff ff97 	bl	800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d109      	bne.n	800e5a6 <HW_IPCC_Tx_Handler+0x26>
 800e592:	4b17      	ldr	r3, [pc, #92]	; (800e5f0 <HW_IPCC_Tx_Handler+0x70>)
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	43db      	mvns	r3, r3
 800e598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e5a0:	f000 f896 	bl	800e6d0 <HW_IPCC_SYS_CmdEvtHandler>
 800e5a4:	e020      	b.n	800e5e8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e5a6:	2108      	movs	r1, #8
 800e5a8:	4811      	ldr	r0, [pc, #68]	; (800e5f0 <HW_IPCC_Tx_Handler+0x70>)
 800e5aa:	f7ff ff86 	bl	800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d109      	bne.n	800e5c8 <HW_IPCC_Tx_Handler+0x48>
 800e5b4:	4b0e      	ldr	r3, [pc, #56]	; (800e5f0 <HW_IPCC_Tx_Handler+0x70>)
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	43db      	mvns	r3, r3
 800e5ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e5c2:	f000 f8bf 	bl	800e744 <HW_IPCC_MM_FreeBufHandler>
 800e5c6:	e00f      	b.n	800e5e8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e5c8:	2120      	movs	r1, #32
 800e5ca:	4809      	ldr	r0, [pc, #36]	; (800e5f0 <HW_IPCC_Tx_Handler+0x70>)
 800e5cc:	f7ff ff75 	bl	800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d109      	bne.n	800e5ea <HW_IPCC_Tx_Handler+0x6a>
 800e5d6:	4b06      	ldr	r3, [pc, #24]	; (800e5f0 <HW_IPCC_Tx_Handler+0x70>)
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	43db      	mvns	r3, r3
 800e5dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e5e4:	f000 f850 	bl	800e688 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e5e8:	bf00      	nop
 800e5ea:	bf00      	nop
}
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	58000c00 	.word	0x58000c00

0800e5f4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e5f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e5fc:	f7ff fecd 	bl	800e39a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e600:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e604:	f7ff fe9e 	bl	800e344 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e608:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e60c:	f7ff fe86 	bl	800e31c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e610:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e612:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e614:	f7ff fe72 	bl	800e2fc <LL_PWR_EnableBootC2>

  return;
 800e618:	bf00      	nop
}
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e620:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e624:	f7ff fea0 	bl	800e368 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e628:	4806      	ldr	r0, [pc, #24]	; (800e644 <HW_IPCC_Init+0x28>)
 800e62a:	f7ff fee2 	bl	800e3f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e62e:	4805      	ldr	r0, [pc, #20]	; (800e644 <HW_IPCC_Init+0x28>)
 800e630:	f7ff fecf 	bl	800e3d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e634:	202c      	movs	r0, #44	; 0x2c
 800e636:	f7f5 ffca 	bl	80045ce <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e63a:	202d      	movs	r0, #45	; 0x2d
 800e63c:	f7f5 ffc7 	bl	80045ce <HAL_NVIC_EnableIRQ>

  return;
 800e640:	bf00      	nop
}
 800e642:	bd80      	pop	{r7, pc}
 800e644:	58000c00 	.word	0x58000c00

0800e648 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e64c:	2101      	movs	r1, #1
 800e64e:	4802      	ldr	r0, [pc, #8]	; (800e658 <HW_IPCC_BLE_Init+0x10>)
 800e650:	f7ff ff04 	bl	800e45c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e654:	bf00      	nop
}
 800e656:	bd80      	pop	{r7, pc}
 800e658:	58000c00 	.word	0x58000c00

0800e65c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e660:	2101      	movs	r1, #1
 800e662:	4802      	ldr	r0, [pc, #8]	; (800e66c <HW_IPCC_BLE_SendCmd+0x10>)
 800e664:	f7ff ff1a 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e668:	bf00      	nop
}
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	58000c00 	.word	0x58000c00

0800e670 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e674:	f7fd ffd4 	bl	800c620 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e678:	2101      	movs	r1, #1
 800e67a:	4802      	ldr	r0, [pc, #8]	; (800e684 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e67c:	f7ff ff00 	bl	800e480 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e680:	bf00      	nop
}
 800e682:	bd80      	pop	{r7, pc}
 800e684:	58000c00 	.word	0x58000c00

0800e688 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e68c:	2120      	movs	r1, #32
 800e68e:	4803      	ldr	r0, [pc, #12]	; (800e69c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e690:	f7ff fed2 	bl	800e438 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e694:	f7fd fff4 	bl	800c680 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e698:	bf00      	nop
}
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	58000c00 	.word	0x58000c00

0800e6a0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e6a4:	2102      	movs	r1, #2
 800e6a6:	4802      	ldr	r0, [pc, #8]	; (800e6b0 <HW_IPCC_SYS_Init+0x10>)
 800e6a8:	f7ff fed8 	bl	800e45c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e6ac:	bf00      	nop
}
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	58000c00 	.word	0x58000c00

0800e6b4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e6b8:	2102      	movs	r1, #2
 800e6ba:	4804      	ldr	r0, [pc, #16]	; (800e6cc <HW_IPCC_SYS_SendCmd+0x18>)
 800e6bc:	f7ff feee 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e6c0:	2102      	movs	r1, #2
 800e6c2:	4802      	ldr	r0, [pc, #8]	; (800e6cc <HW_IPCC_SYS_SendCmd+0x18>)
 800e6c4:	f7ff fea5 	bl	800e412 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e6c8:	bf00      	nop
}
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	58000c00 	.word	0x58000c00

0800e6d0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e6d4:	2102      	movs	r1, #2
 800e6d6:	4803      	ldr	r0, [pc, #12]	; (800e6e4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e6d8:	f7ff feae 	bl	800e438 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e6dc:	f7fe f820 	bl	800c720 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e6e0:	bf00      	nop
}
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	58000c00 	.word	0x58000c00

0800e6e8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e6ec:	f7fe f82e 	bl	800c74c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e6f0:	2102      	movs	r1, #2
 800e6f2:	4802      	ldr	r0, [pc, #8]	; (800e6fc <HW_IPCC_SYS_EvtHandler+0x14>)
 800e6f4:	f7ff fec4 	bl	800e480 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e6f8:	bf00      	nop
}
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	58000c00 	.word	0x58000c00

0800e700 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e708:	2108      	movs	r1, #8
 800e70a:	480c      	ldr	r0, [pc, #48]	; (800e73c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e70c:	f7ff fed5 	bl	800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d007      	beq.n	800e726 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e716:	4a0a      	ldr	r2, [pc, #40]	; (800e740 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e71c:	2108      	movs	r1, #8
 800e71e:	4807      	ldr	r0, [pc, #28]	; (800e73c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e720:	f7ff fe77 	bl	800e412 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e724:	e006      	b.n	800e734 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e72a:	2108      	movs	r1, #8
 800e72c:	4803      	ldr	r0, [pc, #12]	; (800e73c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e72e:	f7ff feb5 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e732:	bf00      	nop
}
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	58000c00 	.word	0x58000c00
 800e740:	2000290c 	.word	0x2000290c

0800e744 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e748:	2108      	movs	r1, #8
 800e74a:	4806      	ldr	r0, [pc, #24]	; (800e764 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e74c:	f7ff fe74 	bl	800e438 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e756:	2108      	movs	r1, #8
 800e758:	4802      	ldr	r0, [pc, #8]	; (800e764 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e75a:	f7ff fe9f 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e75e:	bf00      	nop
}
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	58000c00 	.word	0x58000c00
 800e768:	2000290c 	.word	0x2000290c

0800e76c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e770:	2108      	movs	r1, #8
 800e772:	4802      	ldr	r0, [pc, #8]	; (800e77c <HW_IPCC_TRACES_Init+0x10>)
 800e774:	f7ff fe72 	bl	800e45c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e778:	bf00      	nop
}
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	58000c00 	.word	0x58000c00

0800e780 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e784:	f7fe f88a 	bl	800c89c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e788:	2108      	movs	r1, #8
 800e78a:	4802      	ldr	r0, [pc, #8]	; (800e794 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e78c:	f7ff fe78 	bl	800e480 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e790:	bf00      	nop
}
 800e792:	bd80      	pop	{r7, pc}
 800e794:	58000c00 	.word	0x58000c00

0800e798 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e798:	b480      	push	{r7}
 800e79a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e79c:	4b05      	ldr	r3, [pc, #20]	; (800e7b4 <UTIL_LPM_Init+0x1c>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e7a2:	4b05      	ldr	r3, [pc, #20]	; (800e7b8 <UTIL_LPM_Init+0x20>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e7a8:	bf00      	nop
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20002910 	.word	0x20002910
 800e7b8:	20002914 	.word	0x20002914

0800e7bc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e7cc:	613b      	str	r3, [r7, #16]
  return(result);
 800e7ce:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e7d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7d2:	b672      	cpsid	i
}
 800e7d4:	bf00      	nop
  
  switch(state)
 800e7d6:	78fb      	ldrb	r3, [r7, #3]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d008      	beq.n	800e7ee <UTIL_LPM_SetOffMode+0x32>
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d10e      	bne.n	800e7fe <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e7e0:	4b0d      	ldr	r3, [pc, #52]	; (800e818 <UTIL_LPM_SetOffMode+0x5c>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	4a0b      	ldr	r2, [pc, #44]	; (800e818 <UTIL_LPM_SetOffMode+0x5c>)
 800e7ea:	6013      	str	r3, [r2, #0]
      break;
 800e7ec:	e008      	b.n	800e800 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	43da      	mvns	r2, r3
 800e7f2:	4b09      	ldr	r3, [pc, #36]	; (800e818 <UTIL_LPM_SetOffMode+0x5c>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	4a07      	ldr	r2, [pc, #28]	; (800e818 <UTIL_LPM_SetOffMode+0x5c>)
 800e7fa:	6013      	str	r3, [r2, #0]
      break;
 800e7fc:	e000      	b.n	800e800 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e7fe:	bf00      	nop
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f383 8810 	msr	PRIMASK, r3
}
 800e80a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e80c:	bf00      	nop
 800e80e:	371c      	adds	r7, #28
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	20002914 	.word	0x20002914

0800e81c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b090      	sub	sp, #64	; 0x40
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e824:	4b73      	ldr	r3, [pc, #460]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800e82a:	4b72      	ldr	r3, [pc, #456]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4013      	ands	r3, r2
 800e832:	4a70      	ldr	r2, [pc, #448]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e834:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e836:	4b70      	ldr	r3, [pc, #448]	; (800e9f8 <UTIL_SEQ_Run+0x1dc>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800e83c:	4b6f      	ldr	r3, [pc, #444]	; (800e9fc <UTIL_SEQ_Run+0x1e0>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800e842:	4b6f      	ldr	r3, [pc, #444]	; (800ea00 <UTIL_SEQ_Run+0x1e4>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800e848:	4b6e      	ldr	r3, [pc, #440]	; (800ea04 <UTIL_SEQ_Run+0x1e8>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e84e:	e08d      	b.n	800e96c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e854:	e002      	b.n	800e85c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e858:	3301      	adds	r3, #1
 800e85a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e85c:	4a6a      	ldr	r2, [pc, #424]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e860:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	401a      	ands	r2, r3
 800e868:	4b62      	ldr	r3, [pc, #392]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4013      	ands	r3, r2
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0f1      	beq.n	800e856 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e872:	4a65      	ldr	r2, [pc, #404]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e876:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87c:	401a      	ands	r2, r3
 800e87e:	4b5d      	ldr	r3, [pc, #372]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4013      	ands	r3, r2
 800e884:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e886:	4a60      	ldr	r2, [pc, #384]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e88a:	00db      	lsls	r3, r3, #3
 800e88c:	4413      	add	r3, r2
 800e88e:	685a      	ldr	r2, [r3, #4]
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	4013      	ands	r3, r2
 800e894:	2b00      	cmp	r3, #0
 800e896:	d106      	bne.n	800e8a6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e898:	4a5b      	ldr	r2, [pc, #364]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	4413      	add	r3, r2
 800e8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8a4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e8a6:	4a58      	ldr	r2, [pc, #352]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8aa:	00db      	lsls	r3, r3, #3
 800e8ac:	4413      	add	r3, r2
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	4013      	ands	r3, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 f9b3 	bl	800ec20 <SEQ_BitPosition>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	461a      	mov	r2, r3
 800e8be:	4b53      	ldr	r3, [pc, #332]	; (800ea0c <UTIL_SEQ_Run+0x1f0>)
 800e8c0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e8c2:	4a51      	ldr	r2, [pc, #324]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	4413      	add	r3, r2
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	4b4f      	ldr	r3, [pc, #316]	; (800ea0c <UTIL_SEQ_Run+0x1f0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d6:	43db      	mvns	r3, r3
 800e8d8:	401a      	ands	r2, r3
 800e8da:	494b      	ldr	r1, [pc, #300]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8de:	00db      	lsls	r3, r3, #3
 800e8e0:	440b      	add	r3, r1
 800e8e2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8e4:	f3ef 8310 	mrs	r3, PRIMASK
 800e8e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800e8ea:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e8ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8ee:	b672      	cpsid	i
}
 800e8f0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e8f2:	4b46      	ldr	r3, [pc, #280]	; (800ea0c <UTIL_SEQ_Run+0x1f0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fc:	43da      	mvns	r2, r3
 800e8fe:	4b3e      	ldr	r3, [pc, #248]	; (800e9f8 <UTIL_SEQ_Run+0x1dc>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4013      	ands	r3, r2
 800e904:	4a3c      	ldr	r2, [pc, #240]	; (800e9f8 <UTIL_SEQ_Run+0x1dc>)
 800e906:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e908:	2302      	movs	r3, #2
 800e90a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e90c:	e013      	b.n	800e936 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e910:	3b01      	subs	r3, #1
 800e912:	4a3d      	ldr	r2, [pc, #244]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e914:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e918:	4b3c      	ldr	r3, [pc, #240]	; (800ea0c <UTIL_SEQ_Run+0x1f0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2201      	movs	r2, #1
 800e91e:	fa02 f303 	lsl.w	r3, r2, r3
 800e922:	43da      	mvns	r2, r3
 800e924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e926:	3b01      	subs	r3, #1
 800e928:	400a      	ands	r2, r1
 800e92a:	4937      	ldr	r1, [pc, #220]	; (800ea08 <UTIL_SEQ_Run+0x1ec>)
 800e92c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	3b01      	subs	r3, #1
 800e934:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1e8      	bne.n	800e90e <UTIL_SEQ_Run+0xf2>
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	f383 8810 	msr	PRIMASK, r3
}
 800e946:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e948:	4b30      	ldr	r3, [pc, #192]	; (800ea0c <UTIL_SEQ_Run+0x1f0>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a30      	ldr	r2, [pc, #192]	; (800ea10 <UTIL_SEQ_Run+0x1f4>)
 800e94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e952:	4798      	blx	r3

    local_taskset = TaskSet;
 800e954:	4b28      	ldr	r3, [pc, #160]	; (800e9f8 <UTIL_SEQ_Run+0x1dc>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800e95a:	4b28      	ldr	r3, [pc, #160]	; (800e9fc <UTIL_SEQ_Run+0x1e0>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800e960:	4b27      	ldr	r3, [pc, #156]	; (800ea00 <UTIL_SEQ_Run+0x1e4>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800e966:	4b27      	ldr	r3, [pc, #156]	; (800ea04 <UTIL_SEQ_Run+0x1e8>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	401a      	ands	r2, r3
 800e972:	4b20      	ldr	r3, [pc, #128]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4013      	ands	r3, r2
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d005      	beq.n	800e988 <UTIL_SEQ_Run+0x16c>
 800e97c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	4013      	ands	r3, r2
 800e982:	2b00      	cmp	r3, #0
 800e984:	f43f af64 	beq.w	800e850 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e988:	4b20      	ldr	r3, [pc, #128]	; (800ea0c <UTIL_SEQ_Run+0x1f0>)
 800e98a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e98e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e990:	f000 f938 	bl	800ec04 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e994:	f3ef 8310 	mrs	r3, PRIMASK
 800e998:	613b      	str	r3, [r7, #16]
  return(result);
 800e99a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e99c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e99e:	b672      	cpsid	i
}
 800e9a0:	bf00      	nop
  local_taskset = TaskSet;
 800e9a2:	4b15      	ldr	r3, [pc, #84]	; (800e9f8 <UTIL_SEQ_Run+0x1dc>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800e9a8:	4b14      	ldr	r3, [pc, #80]	; (800e9fc <UTIL_SEQ_Run+0x1e0>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800e9ae:	4b14      	ldr	r3, [pc, #80]	; (800ea00 <UTIL_SEQ_Run+0x1e4>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e9b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b8:	401a      	ands	r2, r3
 800e9ba:	4b0e      	ldr	r3, [pc, #56]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4013      	ands	r3, r2
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d107      	bne.n	800e9d4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ea04 <UTIL_SEQ_Run+0x1e8>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d101      	bne.n	800e9d4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e9d0:	f7f3 fd83 	bl	80024da <UTIL_SEQ_Idle>
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f383 8810 	msr	PRIMASK, r3
}
 800e9de:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e9e0:	f000 f917 	bl	800ec12 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e9e4:	4a03      	ldr	r2, [pc, #12]	; (800e9f4 <UTIL_SEQ_Run+0x1d8>)
 800e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e8:	6013      	str	r3, [r2, #0]

  return;
 800e9ea:	bf00      	nop
}
 800e9ec:	3740      	adds	r7, #64	; 0x40
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20000028 	.word	0x20000028
 800e9f8:	20002918 	.word	0x20002918
 800e9fc:	2000291c 	.word	0x2000291c
 800ea00:	20000024 	.word	0x20000024
 800ea04:	20002920 	.word	0x20002920
 800ea08:	200029a8 	.word	0x200029a8
 800ea0c:	20002924 	.word	0x20002924
 800ea10:	20002928 	.word	0x20002928

0800ea14 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea20:	f3ef 8310 	mrs	r3, PRIMASK
 800ea24:	617b      	str	r3, [r7, #20]
  return(result);
 800ea26:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ea28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea2a:	b672      	cpsid	i
}
 800ea2c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f000 f8f6 	bl	800ec20 <SEQ_BitPosition>
 800ea34:	4603      	mov	r3, r0
 800ea36:	4619      	mov	r1, r3
 800ea38:	4a06      	ldr	r2, [pc, #24]	; (800ea54 <UTIL_SEQ_RegTask+0x40>)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	f383 8810 	msr	PRIMASK, r3
}
 800ea4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ea4c:	bf00      	nop
}
 800ea4e:	3720      	adds	r7, #32
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	20002928 	.word	0x20002928

0800ea58 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b087      	sub	sp, #28
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea62:	f3ef 8310 	mrs	r3, PRIMASK
 800ea66:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea68:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ea6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea6c:	b672      	cpsid	i
}
 800ea6e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ea70:	4b0d      	ldr	r3, [pc, #52]	; (800eaa8 <UTIL_SEQ_SetTask+0x50>)
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	4a0b      	ldr	r2, [pc, #44]	; (800eaa8 <UTIL_SEQ_SetTask+0x50>)
 800ea7a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ea7c:	4a0b      	ldr	r2, [pc, #44]	; (800eaac <UTIL_SEQ_SetTask+0x54>)
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	431a      	orrs	r2, r3
 800ea88:	4908      	ldr	r1, [pc, #32]	; (800eaac <UTIL_SEQ_SetTask+0x54>)
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	f383 8810 	msr	PRIMASK, r3
}
 800ea9a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ea9c:	bf00      	nop
}
 800ea9e:	371c      	adds	r7, #28
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr
 800eaa8:	20002918 	.word	0x20002918
 800eaac:	200029a8 	.word	0x200029a8

0800eab0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eab8:	f3ef 8310 	mrs	r3, PRIMASK
 800eabc:	60fb      	str	r3, [r7, #12]
  return(result);
 800eabe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eac0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eac2:	b672      	cpsid	i
}
 800eac4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	43da      	mvns	r2, r3
 800eaca:	4b08      	ldr	r3, [pc, #32]	; (800eaec <UTIL_SEQ_PauseTask+0x3c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4013      	ands	r3, r2
 800ead0:	4a06      	ldr	r2, [pc, #24]	; (800eaec <UTIL_SEQ_PauseTask+0x3c>)
 800ead2:	6013      	str	r3, [r2, #0]
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	f383 8810 	msr	PRIMASK, r3
}
 800eade:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800eae0:	bf00      	nop
}
 800eae2:	371c      	adds	r7, #28
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	20000024 	.word	0x20000024

0800eaf0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b087      	sub	sp, #28
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaf8:	f3ef 8310 	mrs	r3, PRIMASK
 800eafc:	60fb      	str	r3, [r7, #12]
  return(result);
 800eafe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb02:	b672      	cpsid	i
}
 800eb04:	bf00      	nop

  TaskMask |= TaskId_bm;
 800eb06:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <UTIL_SEQ_ResumeTask+0x3c>)
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	4a07      	ldr	r2, [pc, #28]	; (800eb2c <UTIL_SEQ_ResumeTask+0x3c>)
 800eb10:	6013      	str	r3, [r2, #0]
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	f383 8810 	msr	PRIMASK, r3
}
 800eb1c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800eb1e:	bf00      	nop
}
 800eb20:	371c      	adds	r7, #28
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	20000024 	.word	0x20000024

0800eb30 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb38:	f3ef 8310 	mrs	r3, PRIMASK
 800eb3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb42:	b672      	cpsid	i
}
 800eb44:	bf00      	nop

  EvtSet |= EvtId_bm;
 800eb46:	4b09      	ldr	r3, [pc, #36]	; (800eb6c <UTIL_SEQ_SetEvt+0x3c>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	4a07      	ldr	r2, [pc, #28]	; (800eb6c <UTIL_SEQ_SetEvt+0x3c>)
 800eb50:	6013      	str	r3, [r2, #0]
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	f383 8810 	msr	PRIMASK, r3
}
 800eb5c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800eb5e:	bf00      	nop
}
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	2000291c 	.word	0x2000291c

0800eb70 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b088      	sub	sp, #32
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800eb78:	4b1f      	ldr	r3, [pc, #124]	; (800ebf8 <UTIL_SEQ_WaitEvt+0x88>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800eb7e:	4b1e      	ldr	r3, [pc, #120]	; (800ebf8 <UTIL_SEQ_WaitEvt+0x88>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb86:	d102      	bne.n	800eb8e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61fb      	str	r3, [r7, #28]
 800eb8c:	e005      	b.n	800eb9a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800eb8e:	4b1a      	ldr	r3, [pc, #104]	; (800ebf8 <UTIL_SEQ_WaitEvt+0x88>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2201      	movs	r2, #1
 800eb94:	fa02 f303 	lsl.w	r3, r2, r3
 800eb98:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800eb9a:	4b18      	ldr	r3, [pc, #96]	; (800ebfc <UTIL_SEQ_WaitEvt+0x8c>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800eba0:	4a16      	ldr	r2, [pc, #88]	; (800ebfc <UTIL_SEQ_WaitEvt+0x8c>)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800eba6:	e003      	b.n	800ebb0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800eba8:	6879      	ldr	r1, [r7, #4]
 800ebaa:	69f8      	ldr	r0, [r7, #28]
 800ebac:	f7f3 fc9c 	bl	80024e8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ebb0:	4b13      	ldr	r3, [pc, #76]	; (800ec00 <UTIL_SEQ_WaitEvt+0x90>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d0f5      	beq.n	800eba8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ebbc:	4a0e      	ldr	r2, [pc, #56]	; (800ebf8 <UTIL_SEQ_WaitEvt+0x88>)
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebc2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebc8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ebca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebcc:	b672      	cpsid	i
}
 800ebce:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	43da      	mvns	r2, r3
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <UTIL_SEQ_WaitEvt+0x90>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4013      	ands	r3, r2
 800ebda:	4a09      	ldr	r2, [pc, #36]	; (800ec00 <UTIL_SEQ_WaitEvt+0x90>)
 800ebdc:	6013      	str	r3, [r2, #0]
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f383 8810 	msr	PRIMASK, r3
}
 800ebe8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ebea:	4a04      	ldr	r2, [pc, #16]	; (800ebfc <UTIL_SEQ_WaitEvt+0x8c>)
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	6013      	str	r3, [r2, #0]
  return;
 800ebf0:	bf00      	nop
}
 800ebf2:	3720      	adds	r7, #32
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	20002924 	.word	0x20002924
 800ebfc:	20002920 	.word	0x20002920
 800ec00:	2000291c 	.word	0x2000291c

0800ec04 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ec04:	b480      	push	{r7}
 800ec06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ec08:	bf00      	nop
}
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ec12:	b480      	push	{r7}
 800ec14:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ec16:	bf00      	nop
}
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	0c1b      	lsrs	r3, r3, #16
 800ec34:	041b      	lsls	r3, r3, #16
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d104      	bne.n	800ec44 <SEQ_BitPosition+0x24>
 800ec3a:	2310      	movs	r3, #16
 800ec3c:	73fb      	strb	r3, [r7, #15]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	041b      	lsls	r3, r3, #16
 800ec42:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d105      	bne.n	800ec5a <SEQ_BitPosition+0x3a>
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	3308      	adds	r3, #8
 800ec52:	73fb      	strb	r3, [r7, #15]
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	021b      	lsls	r3, r3, #8
 800ec58:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d105      	bne.n	800ec70 <SEQ_BitPosition+0x50>
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	3304      	adds	r3, #4
 800ec68:	73fb      	strb	r3, [r7, #15]
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	0f1b      	lsrs	r3, r3, #28
 800ec74:	4a07      	ldr	r2, [pc, #28]	; (800ec94 <SEQ_BitPosition+0x74>)
 800ec76:	5cd2      	ldrb	r2, [r2, r3]
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	f1c3 031f 	rsb	r3, r3, #31
 800ec84:	b2db      	uxtb	r3, r3
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3714      	adds	r7, #20
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	08012fb4 	.word	0x08012fb4

0800ec98 <__errno>:
 800ec98:	4b01      	ldr	r3, [pc, #4]	; (800eca0 <__errno+0x8>)
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	2000002c 	.word	0x2000002c

0800eca4 <__libc_init_array>:
 800eca4:	b570      	push	{r4, r5, r6, lr}
 800eca6:	4d0d      	ldr	r5, [pc, #52]	; (800ecdc <__libc_init_array+0x38>)
 800eca8:	4c0d      	ldr	r4, [pc, #52]	; (800ece0 <__libc_init_array+0x3c>)
 800ecaa:	1b64      	subs	r4, r4, r5
 800ecac:	10a4      	asrs	r4, r4, #2
 800ecae:	2600      	movs	r6, #0
 800ecb0:	42a6      	cmp	r6, r4
 800ecb2:	d109      	bne.n	800ecc8 <__libc_init_array+0x24>
 800ecb4:	4d0b      	ldr	r5, [pc, #44]	; (800ece4 <__libc_init_array+0x40>)
 800ecb6:	4c0c      	ldr	r4, [pc, #48]	; (800ece8 <__libc_init_array+0x44>)
 800ecb8:	f002 ff00 	bl	8011abc <_init>
 800ecbc:	1b64      	subs	r4, r4, r5
 800ecbe:	10a4      	asrs	r4, r4, #2
 800ecc0:	2600      	movs	r6, #0
 800ecc2:	42a6      	cmp	r6, r4
 800ecc4:	d105      	bne.n	800ecd2 <__libc_init_array+0x2e>
 800ecc6:	bd70      	pop	{r4, r5, r6, pc}
 800ecc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eccc:	4798      	blx	r3
 800ecce:	3601      	adds	r6, #1
 800ecd0:	e7ee      	b.n	800ecb0 <__libc_init_array+0xc>
 800ecd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecd6:	4798      	blx	r3
 800ecd8:	3601      	adds	r6, #1
 800ecda:	e7f2      	b.n	800ecc2 <__libc_init_array+0x1e>
 800ecdc:	080133a4 	.word	0x080133a4
 800ece0:	080133a4 	.word	0x080133a4
 800ece4:	080133a4 	.word	0x080133a4
 800ece8:	080133a8 	.word	0x080133a8

0800ecec <memcpy>:
 800ecec:	440a      	add	r2, r1
 800ecee:	4291      	cmp	r1, r2
 800ecf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ecf4:	d100      	bne.n	800ecf8 <memcpy+0xc>
 800ecf6:	4770      	bx	lr
 800ecf8:	b510      	push	{r4, lr}
 800ecfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed02:	4291      	cmp	r1, r2
 800ed04:	d1f9      	bne.n	800ecfa <memcpy+0xe>
 800ed06:	bd10      	pop	{r4, pc}

0800ed08 <memset>:
 800ed08:	4402      	add	r2, r0
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d100      	bne.n	800ed12 <memset+0xa>
 800ed10:	4770      	bx	lr
 800ed12:	f803 1b01 	strb.w	r1, [r3], #1
 800ed16:	e7f9      	b.n	800ed0c <memset+0x4>

0800ed18 <__cvt>:
 800ed18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed1c:	ec55 4b10 	vmov	r4, r5, d0
 800ed20:	2d00      	cmp	r5, #0
 800ed22:	460e      	mov	r6, r1
 800ed24:	4619      	mov	r1, r3
 800ed26:	462b      	mov	r3, r5
 800ed28:	bfbb      	ittet	lt
 800ed2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ed2e:	461d      	movlt	r5, r3
 800ed30:	2300      	movge	r3, #0
 800ed32:	232d      	movlt	r3, #45	; 0x2d
 800ed34:	700b      	strb	r3, [r1, #0]
 800ed36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed3c:	4691      	mov	r9, r2
 800ed3e:	f023 0820 	bic.w	r8, r3, #32
 800ed42:	bfbc      	itt	lt
 800ed44:	4622      	movlt	r2, r4
 800ed46:	4614      	movlt	r4, r2
 800ed48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed4c:	d005      	beq.n	800ed5a <__cvt+0x42>
 800ed4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ed52:	d100      	bne.n	800ed56 <__cvt+0x3e>
 800ed54:	3601      	adds	r6, #1
 800ed56:	2102      	movs	r1, #2
 800ed58:	e000      	b.n	800ed5c <__cvt+0x44>
 800ed5a:	2103      	movs	r1, #3
 800ed5c:	ab03      	add	r3, sp, #12
 800ed5e:	9301      	str	r3, [sp, #4]
 800ed60:	ab02      	add	r3, sp, #8
 800ed62:	9300      	str	r3, [sp, #0]
 800ed64:	ec45 4b10 	vmov	d0, r4, r5
 800ed68:	4653      	mov	r3, sl
 800ed6a:	4632      	mov	r2, r6
 800ed6c:	f000 fe30 	bl	800f9d0 <_dtoa_r>
 800ed70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ed74:	4607      	mov	r7, r0
 800ed76:	d102      	bne.n	800ed7e <__cvt+0x66>
 800ed78:	f019 0f01 	tst.w	r9, #1
 800ed7c:	d022      	beq.n	800edc4 <__cvt+0xac>
 800ed7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed82:	eb07 0906 	add.w	r9, r7, r6
 800ed86:	d110      	bne.n	800edaa <__cvt+0x92>
 800ed88:	783b      	ldrb	r3, [r7, #0]
 800ed8a:	2b30      	cmp	r3, #48	; 0x30
 800ed8c:	d10a      	bne.n	800eda4 <__cvt+0x8c>
 800ed8e:	2200      	movs	r2, #0
 800ed90:	2300      	movs	r3, #0
 800ed92:	4620      	mov	r0, r4
 800ed94:	4629      	mov	r1, r5
 800ed96:	f7f1 fe6f 	bl	8000a78 <__aeabi_dcmpeq>
 800ed9a:	b918      	cbnz	r0, 800eda4 <__cvt+0x8c>
 800ed9c:	f1c6 0601 	rsb	r6, r6, #1
 800eda0:	f8ca 6000 	str.w	r6, [sl]
 800eda4:	f8da 3000 	ldr.w	r3, [sl]
 800eda8:	4499      	add	r9, r3
 800edaa:	2200      	movs	r2, #0
 800edac:	2300      	movs	r3, #0
 800edae:	4620      	mov	r0, r4
 800edb0:	4629      	mov	r1, r5
 800edb2:	f7f1 fe61 	bl	8000a78 <__aeabi_dcmpeq>
 800edb6:	b108      	cbz	r0, 800edbc <__cvt+0xa4>
 800edb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800edbc:	2230      	movs	r2, #48	; 0x30
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	454b      	cmp	r3, r9
 800edc2:	d307      	bcc.n	800edd4 <__cvt+0xbc>
 800edc4:	9b03      	ldr	r3, [sp, #12]
 800edc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800edc8:	1bdb      	subs	r3, r3, r7
 800edca:	4638      	mov	r0, r7
 800edcc:	6013      	str	r3, [r2, #0]
 800edce:	b004      	add	sp, #16
 800edd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edd4:	1c59      	adds	r1, r3, #1
 800edd6:	9103      	str	r1, [sp, #12]
 800edd8:	701a      	strb	r2, [r3, #0]
 800edda:	e7f0      	b.n	800edbe <__cvt+0xa6>

0800eddc <__exponent>:
 800eddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edde:	4603      	mov	r3, r0
 800ede0:	2900      	cmp	r1, #0
 800ede2:	bfb8      	it	lt
 800ede4:	4249      	neglt	r1, r1
 800ede6:	f803 2b02 	strb.w	r2, [r3], #2
 800edea:	bfb4      	ite	lt
 800edec:	222d      	movlt	r2, #45	; 0x2d
 800edee:	222b      	movge	r2, #43	; 0x2b
 800edf0:	2909      	cmp	r1, #9
 800edf2:	7042      	strb	r2, [r0, #1]
 800edf4:	dd2a      	ble.n	800ee4c <__exponent+0x70>
 800edf6:	f10d 0407 	add.w	r4, sp, #7
 800edfa:	46a4      	mov	ip, r4
 800edfc:	270a      	movs	r7, #10
 800edfe:	46a6      	mov	lr, r4
 800ee00:	460a      	mov	r2, r1
 800ee02:	fb91 f6f7 	sdiv	r6, r1, r7
 800ee06:	fb07 1516 	mls	r5, r7, r6, r1
 800ee0a:	3530      	adds	r5, #48	; 0x30
 800ee0c:	2a63      	cmp	r2, #99	; 0x63
 800ee0e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ee12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ee16:	4631      	mov	r1, r6
 800ee18:	dcf1      	bgt.n	800edfe <__exponent+0x22>
 800ee1a:	3130      	adds	r1, #48	; 0x30
 800ee1c:	f1ae 0502 	sub.w	r5, lr, #2
 800ee20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ee24:	1c44      	adds	r4, r0, #1
 800ee26:	4629      	mov	r1, r5
 800ee28:	4561      	cmp	r1, ip
 800ee2a:	d30a      	bcc.n	800ee42 <__exponent+0x66>
 800ee2c:	f10d 0209 	add.w	r2, sp, #9
 800ee30:	eba2 020e 	sub.w	r2, r2, lr
 800ee34:	4565      	cmp	r5, ip
 800ee36:	bf88      	it	hi
 800ee38:	2200      	movhi	r2, #0
 800ee3a:	4413      	add	r3, r2
 800ee3c:	1a18      	subs	r0, r3, r0
 800ee3e:	b003      	add	sp, #12
 800ee40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ee4a:	e7ed      	b.n	800ee28 <__exponent+0x4c>
 800ee4c:	2330      	movs	r3, #48	; 0x30
 800ee4e:	3130      	adds	r1, #48	; 0x30
 800ee50:	7083      	strb	r3, [r0, #2]
 800ee52:	70c1      	strb	r1, [r0, #3]
 800ee54:	1d03      	adds	r3, r0, #4
 800ee56:	e7f1      	b.n	800ee3c <__exponent+0x60>

0800ee58 <_printf_float>:
 800ee58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee5c:	ed2d 8b02 	vpush	{d8}
 800ee60:	b08d      	sub	sp, #52	; 0x34
 800ee62:	460c      	mov	r4, r1
 800ee64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ee68:	4616      	mov	r6, r2
 800ee6a:	461f      	mov	r7, r3
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	f001 fd55 	bl	801091c <_localeconv_r>
 800ee72:	f8d0 a000 	ldr.w	sl, [r0]
 800ee76:	4650      	mov	r0, sl
 800ee78:	f7f1 f982 	bl	8000180 <strlen>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee80:	6823      	ldr	r3, [r4, #0]
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	f8d8 3000 	ldr.w	r3, [r8]
 800ee88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ee8c:	3307      	adds	r3, #7
 800ee8e:	f023 0307 	bic.w	r3, r3, #7
 800ee92:	f103 0208 	add.w	r2, r3, #8
 800ee96:	f8c8 2000 	str.w	r2, [r8]
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eea2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eeaa:	9307      	str	r3, [sp, #28]
 800eeac:	f8cd 8018 	str.w	r8, [sp, #24]
 800eeb0:	ee08 0a10 	vmov	s16, r0
 800eeb4:	4b9f      	ldr	r3, [pc, #636]	; (800f134 <_printf_float+0x2dc>)
 800eeb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eebe:	f7f1 fe0d 	bl	8000adc <__aeabi_dcmpun>
 800eec2:	bb88      	cbnz	r0, 800ef28 <_printf_float+0xd0>
 800eec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eec8:	4b9a      	ldr	r3, [pc, #616]	; (800f134 <_printf_float+0x2dc>)
 800eeca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eece:	f7f1 fde7 	bl	8000aa0 <__aeabi_dcmple>
 800eed2:	bb48      	cbnz	r0, 800ef28 <_printf_float+0xd0>
 800eed4:	2200      	movs	r2, #0
 800eed6:	2300      	movs	r3, #0
 800eed8:	4640      	mov	r0, r8
 800eeda:	4649      	mov	r1, r9
 800eedc:	f7f1 fdd6 	bl	8000a8c <__aeabi_dcmplt>
 800eee0:	b110      	cbz	r0, 800eee8 <_printf_float+0x90>
 800eee2:	232d      	movs	r3, #45	; 0x2d
 800eee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eee8:	4b93      	ldr	r3, [pc, #588]	; (800f138 <_printf_float+0x2e0>)
 800eeea:	4894      	ldr	r0, [pc, #592]	; (800f13c <_printf_float+0x2e4>)
 800eeec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eef0:	bf94      	ite	ls
 800eef2:	4698      	movls	r8, r3
 800eef4:	4680      	movhi	r8, r0
 800eef6:	2303      	movs	r3, #3
 800eef8:	6123      	str	r3, [r4, #16]
 800eefa:	9b05      	ldr	r3, [sp, #20]
 800eefc:	f023 0204 	bic.w	r2, r3, #4
 800ef00:	6022      	str	r2, [r4, #0]
 800ef02:	f04f 0900 	mov.w	r9, #0
 800ef06:	9700      	str	r7, [sp, #0]
 800ef08:	4633      	mov	r3, r6
 800ef0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef0c:	4621      	mov	r1, r4
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f000 f9d8 	bl	800f2c4 <_printf_common>
 800ef14:	3001      	adds	r0, #1
 800ef16:	f040 8090 	bne.w	800f03a <_printf_float+0x1e2>
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef1e:	b00d      	add	sp, #52	; 0x34
 800ef20:	ecbd 8b02 	vpop	{d8}
 800ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef28:	4642      	mov	r2, r8
 800ef2a:	464b      	mov	r3, r9
 800ef2c:	4640      	mov	r0, r8
 800ef2e:	4649      	mov	r1, r9
 800ef30:	f7f1 fdd4 	bl	8000adc <__aeabi_dcmpun>
 800ef34:	b140      	cbz	r0, 800ef48 <_printf_float+0xf0>
 800ef36:	464b      	mov	r3, r9
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	bfbc      	itt	lt
 800ef3c:	232d      	movlt	r3, #45	; 0x2d
 800ef3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ef42:	487f      	ldr	r0, [pc, #508]	; (800f140 <_printf_float+0x2e8>)
 800ef44:	4b7f      	ldr	r3, [pc, #508]	; (800f144 <_printf_float+0x2ec>)
 800ef46:	e7d1      	b.n	800eeec <_printf_float+0x94>
 800ef48:	6863      	ldr	r3, [r4, #4]
 800ef4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ef4e:	9206      	str	r2, [sp, #24]
 800ef50:	1c5a      	adds	r2, r3, #1
 800ef52:	d13f      	bne.n	800efd4 <_printf_float+0x17c>
 800ef54:	2306      	movs	r3, #6
 800ef56:	6063      	str	r3, [r4, #4]
 800ef58:	9b05      	ldr	r3, [sp, #20]
 800ef5a:	6861      	ldr	r1, [r4, #4]
 800ef5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ef60:	2300      	movs	r3, #0
 800ef62:	9303      	str	r3, [sp, #12]
 800ef64:	ab0a      	add	r3, sp, #40	; 0x28
 800ef66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ef6a:	ab09      	add	r3, sp, #36	; 0x24
 800ef6c:	ec49 8b10 	vmov	d0, r8, r9
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	6022      	str	r2, [r4, #0]
 800ef74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ef78:	4628      	mov	r0, r5
 800ef7a:	f7ff fecd 	bl	800ed18 <__cvt>
 800ef7e:	9b06      	ldr	r3, [sp, #24]
 800ef80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef82:	2b47      	cmp	r3, #71	; 0x47
 800ef84:	4680      	mov	r8, r0
 800ef86:	d108      	bne.n	800ef9a <_printf_float+0x142>
 800ef88:	1cc8      	adds	r0, r1, #3
 800ef8a:	db02      	blt.n	800ef92 <_printf_float+0x13a>
 800ef8c:	6863      	ldr	r3, [r4, #4]
 800ef8e:	4299      	cmp	r1, r3
 800ef90:	dd41      	ble.n	800f016 <_printf_float+0x1be>
 800ef92:	f1ab 0b02 	sub.w	fp, fp, #2
 800ef96:	fa5f fb8b 	uxtb.w	fp, fp
 800ef9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef9e:	d820      	bhi.n	800efe2 <_printf_float+0x18a>
 800efa0:	3901      	subs	r1, #1
 800efa2:	465a      	mov	r2, fp
 800efa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800efa8:	9109      	str	r1, [sp, #36]	; 0x24
 800efaa:	f7ff ff17 	bl	800eddc <__exponent>
 800efae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efb0:	1813      	adds	r3, r2, r0
 800efb2:	2a01      	cmp	r2, #1
 800efb4:	4681      	mov	r9, r0
 800efb6:	6123      	str	r3, [r4, #16]
 800efb8:	dc02      	bgt.n	800efc0 <_printf_float+0x168>
 800efba:	6822      	ldr	r2, [r4, #0]
 800efbc:	07d2      	lsls	r2, r2, #31
 800efbe:	d501      	bpl.n	800efc4 <_printf_float+0x16c>
 800efc0:	3301      	adds	r3, #1
 800efc2:	6123      	str	r3, [r4, #16]
 800efc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d09c      	beq.n	800ef06 <_printf_float+0xae>
 800efcc:	232d      	movs	r3, #45	; 0x2d
 800efce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efd2:	e798      	b.n	800ef06 <_printf_float+0xae>
 800efd4:	9a06      	ldr	r2, [sp, #24]
 800efd6:	2a47      	cmp	r2, #71	; 0x47
 800efd8:	d1be      	bne.n	800ef58 <_printf_float+0x100>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1bc      	bne.n	800ef58 <_printf_float+0x100>
 800efde:	2301      	movs	r3, #1
 800efe0:	e7b9      	b.n	800ef56 <_printf_float+0xfe>
 800efe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800efe6:	d118      	bne.n	800f01a <_printf_float+0x1c2>
 800efe8:	2900      	cmp	r1, #0
 800efea:	6863      	ldr	r3, [r4, #4]
 800efec:	dd0b      	ble.n	800f006 <_printf_float+0x1ae>
 800efee:	6121      	str	r1, [r4, #16]
 800eff0:	b913      	cbnz	r3, 800eff8 <_printf_float+0x1a0>
 800eff2:	6822      	ldr	r2, [r4, #0]
 800eff4:	07d0      	lsls	r0, r2, #31
 800eff6:	d502      	bpl.n	800effe <_printf_float+0x1a6>
 800eff8:	3301      	adds	r3, #1
 800effa:	440b      	add	r3, r1
 800effc:	6123      	str	r3, [r4, #16]
 800effe:	65a1      	str	r1, [r4, #88]	; 0x58
 800f000:	f04f 0900 	mov.w	r9, #0
 800f004:	e7de      	b.n	800efc4 <_printf_float+0x16c>
 800f006:	b913      	cbnz	r3, 800f00e <_printf_float+0x1b6>
 800f008:	6822      	ldr	r2, [r4, #0]
 800f00a:	07d2      	lsls	r2, r2, #31
 800f00c:	d501      	bpl.n	800f012 <_printf_float+0x1ba>
 800f00e:	3302      	adds	r3, #2
 800f010:	e7f4      	b.n	800effc <_printf_float+0x1a4>
 800f012:	2301      	movs	r3, #1
 800f014:	e7f2      	b.n	800effc <_printf_float+0x1a4>
 800f016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f01c:	4299      	cmp	r1, r3
 800f01e:	db05      	blt.n	800f02c <_printf_float+0x1d4>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	6121      	str	r1, [r4, #16]
 800f024:	07d8      	lsls	r0, r3, #31
 800f026:	d5ea      	bpl.n	800effe <_printf_float+0x1a6>
 800f028:	1c4b      	adds	r3, r1, #1
 800f02a:	e7e7      	b.n	800effc <_printf_float+0x1a4>
 800f02c:	2900      	cmp	r1, #0
 800f02e:	bfd4      	ite	le
 800f030:	f1c1 0202 	rsble	r2, r1, #2
 800f034:	2201      	movgt	r2, #1
 800f036:	4413      	add	r3, r2
 800f038:	e7e0      	b.n	800effc <_printf_float+0x1a4>
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	055a      	lsls	r2, r3, #21
 800f03e:	d407      	bmi.n	800f050 <_printf_float+0x1f8>
 800f040:	6923      	ldr	r3, [r4, #16]
 800f042:	4642      	mov	r2, r8
 800f044:	4631      	mov	r1, r6
 800f046:	4628      	mov	r0, r5
 800f048:	47b8      	blx	r7
 800f04a:	3001      	adds	r0, #1
 800f04c:	d12c      	bne.n	800f0a8 <_printf_float+0x250>
 800f04e:	e764      	b.n	800ef1a <_printf_float+0xc2>
 800f050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f054:	f240 80e0 	bls.w	800f218 <_printf_float+0x3c0>
 800f058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f05c:	2200      	movs	r2, #0
 800f05e:	2300      	movs	r3, #0
 800f060:	f7f1 fd0a 	bl	8000a78 <__aeabi_dcmpeq>
 800f064:	2800      	cmp	r0, #0
 800f066:	d034      	beq.n	800f0d2 <_printf_float+0x27a>
 800f068:	4a37      	ldr	r2, [pc, #220]	; (800f148 <_printf_float+0x2f0>)
 800f06a:	2301      	movs	r3, #1
 800f06c:	4631      	mov	r1, r6
 800f06e:	4628      	mov	r0, r5
 800f070:	47b8      	blx	r7
 800f072:	3001      	adds	r0, #1
 800f074:	f43f af51 	beq.w	800ef1a <_printf_float+0xc2>
 800f078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f07c:	429a      	cmp	r2, r3
 800f07e:	db02      	blt.n	800f086 <_printf_float+0x22e>
 800f080:	6823      	ldr	r3, [r4, #0]
 800f082:	07d8      	lsls	r0, r3, #31
 800f084:	d510      	bpl.n	800f0a8 <_printf_float+0x250>
 800f086:	ee18 3a10 	vmov	r3, s16
 800f08a:	4652      	mov	r2, sl
 800f08c:	4631      	mov	r1, r6
 800f08e:	4628      	mov	r0, r5
 800f090:	47b8      	blx	r7
 800f092:	3001      	adds	r0, #1
 800f094:	f43f af41 	beq.w	800ef1a <_printf_float+0xc2>
 800f098:	f04f 0800 	mov.w	r8, #0
 800f09c:	f104 091a 	add.w	r9, r4, #26
 800f0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	4543      	cmp	r3, r8
 800f0a6:	dc09      	bgt.n	800f0bc <_printf_float+0x264>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	079b      	lsls	r3, r3, #30
 800f0ac:	f100 8105 	bmi.w	800f2ba <_printf_float+0x462>
 800f0b0:	68e0      	ldr	r0, [r4, #12]
 800f0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0b4:	4298      	cmp	r0, r3
 800f0b6:	bfb8      	it	lt
 800f0b8:	4618      	movlt	r0, r3
 800f0ba:	e730      	b.n	800ef1e <_printf_float+0xc6>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	464a      	mov	r2, r9
 800f0c0:	4631      	mov	r1, r6
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	47b8      	blx	r7
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	f43f af27 	beq.w	800ef1a <_printf_float+0xc2>
 800f0cc:	f108 0801 	add.w	r8, r8, #1
 800f0d0:	e7e6      	b.n	800f0a0 <_printf_float+0x248>
 800f0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dc39      	bgt.n	800f14c <_printf_float+0x2f4>
 800f0d8:	4a1b      	ldr	r2, [pc, #108]	; (800f148 <_printf_float+0x2f0>)
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4631      	mov	r1, r6
 800f0de:	4628      	mov	r0, r5
 800f0e0:	47b8      	blx	r7
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	f43f af19 	beq.w	800ef1a <_printf_float+0xc2>
 800f0e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	d102      	bne.n	800f0f6 <_printf_float+0x29e>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	07d9      	lsls	r1, r3, #31
 800f0f4:	d5d8      	bpl.n	800f0a8 <_printf_float+0x250>
 800f0f6:	ee18 3a10 	vmov	r3, s16
 800f0fa:	4652      	mov	r2, sl
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4628      	mov	r0, r5
 800f100:	47b8      	blx	r7
 800f102:	3001      	adds	r0, #1
 800f104:	f43f af09 	beq.w	800ef1a <_printf_float+0xc2>
 800f108:	f04f 0900 	mov.w	r9, #0
 800f10c:	f104 0a1a 	add.w	sl, r4, #26
 800f110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f112:	425b      	negs	r3, r3
 800f114:	454b      	cmp	r3, r9
 800f116:	dc01      	bgt.n	800f11c <_printf_float+0x2c4>
 800f118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f11a:	e792      	b.n	800f042 <_printf_float+0x1ea>
 800f11c:	2301      	movs	r3, #1
 800f11e:	4652      	mov	r2, sl
 800f120:	4631      	mov	r1, r6
 800f122:	4628      	mov	r0, r5
 800f124:	47b8      	blx	r7
 800f126:	3001      	adds	r0, #1
 800f128:	f43f aef7 	beq.w	800ef1a <_printf_float+0xc2>
 800f12c:	f109 0901 	add.w	r9, r9, #1
 800f130:	e7ee      	b.n	800f110 <_printf_float+0x2b8>
 800f132:	bf00      	nop
 800f134:	7fefffff 	.word	0x7fefffff
 800f138:	08012fc8 	.word	0x08012fc8
 800f13c:	08012fcc 	.word	0x08012fcc
 800f140:	08012fd4 	.word	0x08012fd4
 800f144:	08012fd0 	.word	0x08012fd0
 800f148:	08012fd8 	.word	0x08012fd8
 800f14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f14e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f150:	429a      	cmp	r2, r3
 800f152:	bfa8      	it	ge
 800f154:	461a      	movge	r2, r3
 800f156:	2a00      	cmp	r2, #0
 800f158:	4691      	mov	r9, r2
 800f15a:	dc37      	bgt.n	800f1cc <_printf_float+0x374>
 800f15c:	f04f 0b00 	mov.w	fp, #0
 800f160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f164:	f104 021a 	add.w	r2, r4, #26
 800f168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f16a:	9305      	str	r3, [sp, #20]
 800f16c:	eba3 0309 	sub.w	r3, r3, r9
 800f170:	455b      	cmp	r3, fp
 800f172:	dc33      	bgt.n	800f1dc <_printf_float+0x384>
 800f174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f178:	429a      	cmp	r2, r3
 800f17a:	db3b      	blt.n	800f1f4 <_printf_float+0x39c>
 800f17c:	6823      	ldr	r3, [r4, #0]
 800f17e:	07da      	lsls	r2, r3, #31
 800f180:	d438      	bmi.n	800f1f4 <_printf_float+0x39c>
 800f182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f184:	9a05      	ldr	r2, [sp, #20]
 800f186:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f188:	1a9a      	subs	r2, r3, r2
 800f18a:	eba3 0901 	sub.w	r9, r3, r1
 800f18e:	4591      	cmp	r9, r2
 800f190:	bfa8      	it	ge
 800f192:	4691      	movge	r9, r2
 800f194:	f1b9 0f00 	cmp.w	r9, #0
 800f198:	dc35      	bgt.n	800f206 <_printf_float+0x3ae>
 800f19a:	f04f 0800 	mov.w	r8, #0
 800f19e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1a2:	f104 0a1a 	add.w	sl, r4, #26
 800f1a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1aa:	1a9b      	subs	r3, r3, r2
 800f1ac:	eba3 0309 	sub.w	r3, r3, r9
 800f1b0:	4543      	cmp	r3, r8
 800f1b2:	f77f af79 	ble.w	800f0a8 <_printf_float+0x250>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4652      	mov	r2, sl
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	4628      	mov	r0, r5
 800f1be:	47b8      	blx	r7
 800f1c0:	3001      	adds	r0, #1
 800f1c2:	f43f aeaa 	beq.w	800ef1a <_printf_float+0xc2>
 800f1c6:	f108 0801 	add.w	r8, r8, #1
 800f1ca:	e7ec      	b.n	800f1a6 <_printf_float+0x34e>
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4642      	mov	r2, r8
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	47b8      	blx	r7
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	d1c0      	bne.n	800f15c <_printf_float+0x304>
 800f1da:	e69e      	b.n	800ef1a <_printf_float+0xc2>
 800f1dc:	2301      	movs	r3, #1
 800f1de:	4631      	mov	r1, r6
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	9205      	str	r2, [sp, #20]
 800f1e4:	47b8      	blx	r7
 800f1e6:	3001      	adds	r0, #1
 800f1e8:	f43f ae97 	beq.w	800ef1a <_printf_float+0xc2>
 800f1ec:	9a05      	ldr	r2, [sp, #20]
 800f1ee:	f10b 0b01 	add.w	fp, fp, #1
 800f1f2:	e7b9      	b.n	800f168 <_printf_float+0x310>
 800f1f4:	ee18 3a10 	vmov	r3, s16
 800f1f8:	4652      	mov	r2, sl
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b8      	blx	r7
 800f200:	3001      	adds	r0, #1
 800f202:	d1be      	bne.n	800f182 <_printf_float+0x32a>
 800f204:	e689      	b.n	800ef1a <_printf_float+0xc2>
 800f206:	9a05      	ldr	r2, [sp, #20]
 800f208:	464b      	mov	r3, r9
 800f20a:	4442      	add	r2, r8
 800f20c:	4631      	mov	r1, r6
 800f20e:	4628      	mov	r0, r5
 800f210:	47b8      	blx	r7
 800f212:	3001      	adds	r0, #1
 800f214:	d1c1      	bne.n	800f19a <_printf_float+0x342>
 800f216:	e680      	b.n	800ef1a <_printf_float+0xc2>
 800f218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f21a:	2a01      	cmp	r2, #1
 800f21c:	dc01      	bgt.n	800f222 <_printf_float+0x3ca>
 800f21e:	07db      	lsls	r3, r3, #31
 800f220:	d538      	bpl.n	800f294 <_printf_float+0x43c>
 800f222:	2301      	movs	r3, #1
 800f224:	4642      	mov	r2, r8
 800f226:	4631      	mov	r1, r6
 800f228:	4628      	mov	r0, r5
 800f22a:	47b8      	blx	r7
 800f22c:	3001      	adds	r0, #1
 800f22e:	f43f ae74 	beq.w	800ef1a <_printf_float+0xc2>
 800f232:	ee18 3a10 	vmov	r3, s16
 800f236:	4652      	mov	r2, sl
 800f238:	4631      	mov	r1, r6
 800f23a:	4628      	mov	r0, r5
 800f23c:	47b8      	blx	r7
 800f23e:	3001      	adds	r0, #1
 800f240:	f43f ae6b 	beq.w	800ef1a <_printf_float+0xc2>
 800f244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f248:	2200      	movs	r2, #0
 800f24a:	2300      	movs	r3, #0
 800f24c:	f7f1 fc14 	bl	8000a78 <__aeabi_dcmpeq>
 800f250:	b9d8      	cbnz	r0, 800f28a <_printf_float+0x432>
 800f252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f254:	f108 0201 	add.w	r2, r8, #1
 800f258:	3b01      	subs	r3, #1
 800f25a:	4631      	mov	r1, r6
 800f25c:	4628      	mov	r0, r5
 800f25e:	47b8      	blx	r7
 800f260:	3001      	adds	r0, #1
 800f262:	d10e      	bne.n	800f282 <_printf_float+0x42a>
 800f264:	e659      	b.n	800ef1a <_printf_float+0xc2>
 800f266:	2301      	movs	r3, #1
 800f268:	4652      	mov	r2, sl
 800f26a:	4631      	mov	r1, r6
 800f26c:	4628      	mov	r0, r5
 800f26e:	47b8      	blx	r7
 800f270:	3001      	adds	r0, #1
 800f272:	f43f ae52 	beq.w	800ef1a <_printf_float+0xc2>
 800f276:	f108 0801 	add.w	r8, r8, #1
 800f27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f27c:	3b01      	subs	r3, #1
 800f27e:	4543      	cmp	r3, r8
 800f280:	dcf1      	bgt.n	800f266 <_printf_float+0x40e>
 800f282:	464b      	mov	r3, r9
 800f284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f288:	e6dc      	b.n	800f044 <_printf_float+0x1ec>
 800f28a:	f04f 0800 	mov.w	r8, #0
 800f28e:	f104 0a1a 	add.w	sl, r4, #26
 800f292:	e7f2      	b.n	800f27a <_printf_float+0x422>
 800f294:	2301      	movs	r3, #1
 800f296:	4642      	mov	r2, r8
 800f298:	e7df      	b.n	800f25a <_printf_float+0x402>
 800f29a:	2301      	movs	r3, #1
 800f29c:	464a      	mov	r2, r9
 800f29e:	4631      	mov	r1, r6
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	47b8      	blx	r7
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	f43f ae38 	beq.w	800ef1a <_printf_float+0xc2>
 800f2aa:	f108 0801 	add.w	r8, r8, #1
 800f2ae:	68e3      	ldr	r3, [r4, #12]
 800f2b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2b2:	1a5b      	subs	r3, r3, r1
 800f2b4:	4543      	cmp	r3, r8
 800f2b6:	dcf0      	bgt.n	800f29a <_printf_float+0x442>
 800f2b8:	e6fa      	b.n	800f0b0 <_printf_float+0x258>
 800f2ba:	f04f 0800 	mov.w	r8, #0
 800f2be:	f104 0919 	add.w	r9, r4, #25
 800f2c2:	e7f4      	b.n	800f2ae <_printf_float+0x456>

0800f2c4 <_printf_common>:
 800f2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c8:	4616      	mov	r6, r2
 800f2ca:	4699      	mov	r9, r3
 800f2cc:	688a      	ldr	r2, [r1, #8]
 800f2ce:	690b      	ldr	r3, [r1, #16]
 800f2d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	bfb8      	it	lt
 800f2d8:	4613      	movlt	r3, r2
 800f2da:	6033      	str	r3, [r6, #0]
 800f2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	b10a      	cbz	r2, 800f2ea <_printf_common+0x26>
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	6033      	str	r3, [r6, #0]
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	0699      	lsls	r1, r3, #26
 800f2ee:	bf42      	ittt	mi
 800f2f0:	6833      	ldrmi	r3, [r6, #0]
 800f2f2:	3302      	addmi	r3, #2
 800f2f4:	6033      	strmi	r3, [r6, #0]
 800f2f6:	6825      	ldr	r5, [r4, #0]
 800f2f8:	f015 0506 	ands.w	r5, r5, #6
 800f2fc:	d106      	bne.n	800f30c <_printf_common+0x48>
 800f2fe:	f104 0a19 	add.w	sl, r4, #25
 800f302:	68e3      	ldr	r3, [r4, #12]
 800f304:	6832      	ldr	r2, [r6, #0]
 800f306:	1a9b      	subs	r3, r3, r2
 800f308:	42ab      	cmp	r3, r5
 800f30a:	dc26      	bgt.n	800f35a <_printf_common+0x96>
 800f30c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f310:	1e13      	subs	r3, r2, #0
 800f312:	6822      	ldr	r2, [r4, #0]
 800f314:	bf18      	it	ne
 800f316:	2301      	movne	r3, #1
 800f318:	0692      	lsls	r2, r2, #26
 800f31a:	d42b      	bmi.n	800f374 <_printf_common+0xb0>
 800f31c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f320:	4649      	mov	r1, r9
 800f322:	4638      	mov	r0, r7
 800f324:	47c0      	blx	r8
 800f326:	3001      	adds	r0, #1
 800f328:	d01e      	beq.n	800f368 <_printf_common+0xa4>
 800f32a:	6823      	ldr	r3, [r4, #0]
 800f32c:	68e5      	ldr	r5, [r4, #12]
 800f32e:	6832      	ldr	r2, [r6, #0]
 800f330:	f003 0306 	and.w	r3, r3, #6
 800f334:	2b04      	cmp	r3, #4
 800f336:	bf08      	it	eq
 800f338:	1aad      	subeq	r5, r5, r2
 800f33a:	68a3      	ldr	r3, [r4, #8]
 800f33c:	6922      	ldr	r2, [r4, #16]
 800f33e:	bf0c      	ite	eq
 800f340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f344:	2500      	movne	r5, #0
 800f346:	4293      	cmp	r3, r2
 800f348:	bfc4      	itt	gt
 800f34a:	1a9b      	subgt	r3, r3, r2
 800f34c:	18ed      	addgt	r5, r5, r3
 800f34e:	2600      	movs	r6, #0
 800f350:	341a      	adds	r4, #26
 800f352:	42b5      	cmp	r5, r6
 800f354:	d11a      	bne.n	800f38c <_printf_common+0xc8>
 800f356:	2000      	movs	r0, #0
 800f358:	e008      	b.n	800f36c <_printf_common+0xa8>
 800f35a:	2301      	movs	r3, #1
 800f35c:	4652      	mov	r2, sl
 800f35e:	4649      	mov	r1, r9
 800f360:	4638      	mov	r0, r7
 800f362:	47c0      	blx	r8
 800f364:	3001      	adds	r0, #1
 800f366:	d103      	bne.n	800f370 <_printf_common+0xac>
 800f368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f370:	3501      	adds	r5, #1
 800f372:	e7c6      	b.n	800f302 <_printf_common+0x3e>
 800f374:	18e1      	adds	r1, r4, r3
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	2030      	movs	r0, #48	; 0x30
 800f37a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f37e:	4422      	add	r2, r4
 800f380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f388:	3302      	adds	r3, #2
 800f38a:	e7c7      	b.n	800f31c <_printf_common+0x58>
 800f38c:	2301      	movs	r3, #1
 800f38e:	4622      	mov	r2, r4
 800f390:	4649      	mov	r1, r9
 800f392:	4638      	mov	r0, r7
 800f394:	47c0      	blx	r8
 800f396:	3001      	adds	r0, #1
 800f398:	d0e6      	beq.n	800f368 <_printf_common+0xa4>
 800f39a:	3601      	adds	r6, #1
 800f39c:	e7d9      	b.n	800f352 <_printf_common+0x8e>
	...

0800f3a0 <_printf_i>:
 800f3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a4:	7e0f      	ldrb	r7, [r1, #24]
 800f3a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3a8:	2f78      	cmp	r7, #120	; 0x78
 800f3aa:	4691      	mov	r9, r2
 800f3ac:	4680      	mov	r8, r0
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	469a      	mov	sl, r3
 800f3b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3b6:	d807      	bhi.n	800f3c8 <_printf_i+0x28>
 800f3b8:	2f62      	cmp	r7, #98	; 0x62
 800f3ba:	d80a      	bhi.n	800f3d2 <_printf_i+0x32>
 800f3bc:	2f00      	cmp	r7, #0
 800f3be:	f000 80d8 	beq.w	800f572 <_printf_i+0x1d2>
 800f3c2:	2f58      	cmp	r7, #88	; 0x58
 800f3c4:	f000 80a3 	beq.w	800f50e <_printf_i+0x16e>
 800f3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3d0:	e03a      	b.n	800f448 <_printf_i+0xa8>
 800f3d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3d6:	2b15      	cmp	r3, #21
 800f3d8:	d8f6      	bhi.n	800f3c8 <_printf_i+0x28>
 800f3da:	a101      	add	r1, pc, #4	; (adr r1, 800f3e0 <_printf_i+0x40>)
 800f3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3e0:	0800f439 	.word	0x0800f439
 800f3e4:	0800f44d 	.word	0x0800f44d
 800f3e8:	0800f3c9 	.word	0x0800f3c9
 800f3ec:	0800f3c9 	.word	0x0800f3c9
 800f3f0:	0800f3c9 	.word	0x0800f3c9
 800f3f4:	0800f3c9 	.word	0x0800f3c9
 800f3f8:	0800f44d 	.word	0x0800f44d
 800f3fc:	0800f3c9 	.word	0x0800f3c9
 800f400:	0800f3c9 	.word	0x0800f3c9
 800f404:	0800f3c9 	.word	0x0800f3c9
 800f408:	0800f3c9 	.word	0x0800f3c9
 800f40c:	0800f559 	.word	0x0800f559
 800f410:	0800f47d 	.word	0x0800f47d
 800f414:	0800f53b 	.word	0x0800f53b
 800f418:	0800f3c9 	.word	0x0800f3c9
 800f41c:	0800f3c9 	.word	0x0800f3c9
 800f420:	0800f57b 	.word	0x0800f57b
 800f424:	0800f3c9 	.word	0x0800f3c9
 800f428:	0800f47d 	.word	0x0800f47d
 800f42c:	0800f3c9 	.word	0x0800f3c9
 800f430:	0800f3c9 	.word	0x0800f3c9
 800f434:	0800f543 	.word	0x0800f543
 800f438:	682b      	ldr	r3, [r5, #0]
 800f43a:	1d1a      	adds	r2, r3, #4
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	602a      	str	r2, [r5, #0]
 800f440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f448:	2301      	movs	r3, #1
 800f44a:	e0a3      	b.n	800f594 <_printf_i+0x1f4>
 800f44c:	6820      	ldr	r0, [r4, #0]
 800f44e:	6829      	ldr	r1, [r5, #0]
 800f450:	0606      	lsls	r6, r0, #24
 800f452:	f101 0304 	add.w	r3, r1, #4
 800f456:	d50a      	bpl.n	800f46e <_printf_i+0xce>
 800f458:	680e      	ldr	r6, [r1, #0]
 800f45a:	602b      	str	r3, [r5, #0]
 800f45c:	2e00      	cmp	r6, #0
 800f45e:	da03      	bge.n	800f468 <_printf_i+0xc8>
 800f460:	232d      	movs	r3, #45	; 0x2d
 800f462:	4276      	negs	r6, r6
 800f464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f468:	485e      	ldr	r0, [pc, #376]	; (800f5e4 <_printf_i+0x244>)
 800f46a:	230a      	movs	r3, #10
 800f46c:	e019      	b.n	800f4a2 <_printf_i+0x102>
 800f46e:	680e      	ldr	r6, [r1, #0]
 800f470:	602b      	str	r3, [r5, #0]
 800f472:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f476:	bf18      	it	ne
 800f478:	b236      	sxthne	r6, r6
 800f47a:	e7ef      	b.n	800f45c <_printf_i+0xbc>
 800f47c:	682b      	ldr	r3, [r5, #0]
 800f47e:	6820      	ldr	r0, [r4, #0]
 800f480:	1d19      	adds	r1, r3, #4
 800f482:	6029      	str	r1, [r5, #0]
 800f484:	0601      	lsls	r1, r0, #24
 800f486:	d501      	bpl.n	800f48c <_printf_i+0xec>
 800f488:	681e      	ldr	r6, [r3, #0]
 800f48a:	e002      	b.n	800f492 <_printf_i+0xf2>
 800f48c:	0646      	lsls	r6, r0, #25
 800f48e:	d5fb      	bpl.n	800f488 <_printf_i+0xe8>
 800f490:	881e      	ldrh	r6, [r3, #0]
 800f492:	4854      	ldr	r0, [pc, #336]	; (800f5e4 <_printf_i+0x244>)
 800f494:	2f6f      	cmp	r7, #111	; 0x6f
 800f496:	bf0c      	ite	eq
 800f498:	2308      	moveq	r3, #8
 800f49a:	230a      	movne	r3, #10
 800f49c:	2100      	movs	r1, #0
 800f49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4a2:	6865      	ldr	r5, [r4, #4]
 800f4a4:	60a5      	str	r5, [r4, #8]
 800f4a6:	2d00      	cmp	r5, #0
 800f4a8:	bfa2      	ittt	ge
 800f4aa:	6821      	ldrge	r1, [r4, #0]
 800f4ac:	f021 0104 	bicge.w	r1, r1, #4
 800f4b0:	6021      	strge	r1, [r4, #0]
 800f4b2:	b90e      	cbnz	r6, 800f4b8 <_printf_i+0x118>
 800f4b4:	2d00      	cmp	r5, #0
 800f4b6:	d04d      	beq.n	800f554 <_printf_i+0x1b4>
 800f4b8:	4615      	mov	r5, r2
 800f4ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4be:	fb03 6711 	mls	r7, r3, r1, r6
 800f4c2:	5dc7      	ldrb	r7, [r0, r7]
 800f4c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f4c8:	4637      	mov	r7, r6
 800f4ca:	42bb      	cmp	r3, r7
 800f4cc:	460e      	mov	r6, r1
 800f4ce:	d9f4      	bls.n	800f4ba <_printf_i+0x11a>
 800f4d0:	2b08      	cmp	r3, #8
 800f4d2:	d10b      	bne.n	800f4ec <_printf_i+0x14c>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	07de      	lsls	r6, r3, #31
 800f4d8:	d508      	bpl.n	800f4ec <_printf_i+0x14c>
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	6861      	ldr	r1, [r4, #4]
 800f4de:	4299      	cmp	r1, r3
 800f4e0:	bfde      	ittt	le
 800f4e2:	2330      	movle	r3, #48	; 0x30
 800f4e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f4ec:	1b52      	subs	r2, r2, r5
 800f4ee:	6122      	str	r2, [r4, #16]
 800f4f0:	f8cd a000 	str.w	sl, [sp]
 800f4f4:	464b      	mov	r3, r9
 800f4f6:	aa03      	add	r2, sp, #12
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	4640      	mov	r0, r8
 800f4fc:	f7ff fee2 	bl	800f2c4 <_printf_common>
 800f500:	3001      	adds	r0, #1
 800f502:	d14c      	bne.n	800f59e <_printf_i+0x1fe>
 800f504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f508:	b004      	add	sp, #16
 800f50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f50e:	4835      	ldr	r0, [pc, #212]	; (800f5e4 <_printf_i+0x244>)
 800f510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f514:	6829      	ldr	r1, [r5, #0]
 800f516:	6823      	ldr	r3, [r4, #0]
 800f518:	f851 6b04 	ldr.w	r6, [r1], #4
 800f51c:	6029      	str	r1, [r5, #0]
 800f51e:	061d      	lsls	r5, r3, #24
 800f520:	d514      	bpl.n	800f54c <_printf_i+0x1ac>
 800f522:	07df      	lsls	r7, r3, #31
 800f524:	bf44      	itt	mi
 800f526:	f043 0320 	orrmi.w	r3, r3, #32
 800f52a:	6023      	strmi	r3, [r4, #0]
 800f52c:	b91e      	cbnz	r6, 800f536 <_printf_i+0x196>
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	f023 0320 	bic.w	r3, r3, #32
 800f534:	6023      	str	r3, [r4, #0]
 800f536:	2310      	movs	r3, #16
 800f538:	e7b0      	b.n	800f49c <_printf_i+0xfc>
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	f043 0320 	orr.w	r3, r3, #32
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	2378      	movs	r3, #120	; 0x78
 800f544:	4828      	ldr	r0, [pc, #160]	; (800f5e8 <_printf_i+0x248>)
 800f546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f54a:	e7e3      	b.n	800f514 <_printf_i+0x174>
 800f54c:	0659      	lsls	r1, r3, #25
 800f54e:	bf48      	it	mi
 800f550:	b2b6      	uxthmi	r6, r6
 800f552:	e7e6      	b.n	800f522 <_printf_i+0x182>
 800f554:	4615      	mov	r5, r2
 800f556:	e7bb      	b.n	800f4d0 <_printf_i+0x130>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	6826      	ldr	r6, [r4, #0]
 800f55c:	6961      	ldr	r1, [r4, #20]
 800f55e:	1d18      	adds	r0, r3, #4
 800f560:	6028      	str	r0, [r5, #0]
 800f562:	0635      	lsls	r5, r6, #24
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	d501      	bpl.n	800f56c <_printf_i+0x1cc>
 800f568:	6019      	str	r1, [r3, #0]
 800f56a:	e002      	b.n	800f572 <_printf_i+0x1d2>
 800f56c:	0670      	lsls	r0, r6, #25
 800f56e:	d5fb      	bpl.n	800f568 <_printf_i+0x1c8>
 800f570:	8019      	strh	r1, [r3, #0]
 800f572:	2300      	movs	r3, #0
 800f574:	6123      	str	r3, [r4, #16]
 800f576:	4615      	mov	r5, r2
 800f578:	e7ba      	b.n	800f4f0 <_printf_i+0x150>
 800f57a:	682b      	ldr	r3, [r5, #0]
 800f57c:	1d1a      	adds	r2, r3, #4
 800f57e:	602a      	str	r2, [r5, #0]
 800f580:	681d      	ldr	r5, [r3, #0]
 800f582:	6862      	ldr	r2, [r4, #4]
 800f584:	2100      	movs	r1, #0
 800f586:	4628      	mov	r0, r5
 800f588:	f7f0 fe02 	bl	8000190 <memchr>
 800f58c:	b108      	cbz	r0, 800f592 <_printf_i+0x1f2>
 800f58e:	1b40      	subs	r0, r0, r5
 800f590:	6060      	str	r0, [r4, #4]
 800f592:	6863      	ldr	r3, [r4, #4]
 800f594:	6123      	str	r3, [r4, #16]
 800f596:	2300      	movs	r3, #0
 800f598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f59c:	e7a8      	b.n	800f4f0 <_printf_i+0x150>
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	462a      	mov	r2, r5
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	47d0      	blx	sl
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	d0ab      	beq.n	800f504 <_printf_i+0x164>
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	079b      	lsls	r3, r3, #30
 800f5b0:	d413      	bmi.n	800f5da <_printf_i+0x23a>
 800f5b2:	68e0      	ldr	r0, [r4, #12]
 800f5b4:	9b03      	ldr	r3, [sp, #12]
 800f5b6:	4298      	cmp	r0, r3
 800f5b8:	bfb8      	it	lt
 800f5ba:	4618      	movlt	r0, r3
 800f5bc:	e7a4      	b.n	800f508 <_printf_i+0x168>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	4632      	mov	r2, r6
 800f5c2:	4649      	mov	r1, r9
 800f5c4:	4640      	mov	r0, r8
 800f5c6:	47d0      	blx	sl
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	d09b      	beq.n	800f504 <_printf_i+0x164>
 800f5cc:	3501      	adds	r5, #1
 800f5ce:	68e3      	ldr	r3, [r4, #12]
 800f5d0:	9903      	ldr	r1, [sp, #12]
 800f5d2:	1a5b      	subs	r3, r3, r1
 800f5d4:	42ab      	cmp	r3, r5
 800f5d6:	dcf2      	bgt.n	800f5be <_printf_i+0x21e>
 800f5d8:	e7eb      	b.n	800f5b2 <_printf_i+0x212>
 800f5da:	2500      	movs	r5, #0
 800f5dc:	f104 0619 	add.w	r6, r4, #25
 800f5e0:	e7f5      	b.n	800f5ce <_printf_i+0x22e>
 800f5e2:	bf00      	nop
 800f5e4:	08012fda 	.word	0x08012fda
 800f5e8:	08012feb 	.word	0x08012feb

0800f5ec <iprintf>:
 800f5ec:	b40f      	push	{r0, r1, r2, r3}
 800f5ee:	4b0a      	ldr	r3, [pc, #40]	; (800f618 <iprintf+0x2c>)
 800f5f0:	b513      	push	{r0, r1, r4, lr}
 800f5f2:	681c      	ldr	r4, [r3, #0]
 800f5f4:	b124      	cbz	r4, 800f600 <iprintf+0x14>
 800f5f6:	69a3      	ldr	r3, [r4, #24]
 800f5f8:	b913      	cbnz	r3, 800f600 <iprintf+0x14>
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f001 f8f0 	bl	80107e0 <__sinit>
 800f600:	ab05      	add	r3, sp, #20
 800f602:	9a04      	ldr	r2, [sp, #16]
 800f604:	68a1      	ldr	r1, [r4, #8]
 800f606:	9301      	str	r3, [sp, #4]
 800f608:	4620      	mov	r0, r4
 800f60a:	f001 fe9f 	bl	801134c <_vfiprintf_r>
 800f60e:	b002      	add	sp, #8
 800f610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f614:	b004      	add	sp, #16
 800f616:	4770      	bx	lr
 800f618:	2000002c 	.word	0x2000002c

0800f61c <putchar>:
 800f61c:	4b09      	ldr	r3, [pc, #36]	; (800f644 <putchar+0x28>)
 800f61e:	b513      	push	{r0, r1, r4, lr}
 800f620:	681c      	ldr	r4, [r3, #0]
 800f622:	4601      	mov	r1, r0
 800f624:	b134      	cbz	r4, 800f634 <putchar+0x18>
 800f626:	69a3      	ldr	r3, [r4, #24]
 800f628:	b923      	cbnz	r3, 800f634 <putchar+0x18>
 800f62a:	9001      	str	r0, [sp, #4]
 800f62c:	4620      	mov	r0, r4
 800f62e:	f001 f8d7 	bl	80107e0 <__sinit>
 800f632:	9901      	ldr	r1, [sp, #4]
 800f634:	68a2      	ldr	r2, [r4, #8]
 800f636:	4620      	mov	r0, r4
 800f638:	b002      	add	sp, #8
 800f63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f63e:	f001 bfb5 	b.w	80115ac <_putc_r>
 800f642:	bf00      	nop
 800f644:	2000002c 	.word	0x2000002c

0800f648 <_puts_r>:
 800f648:	b570      	push	{r4, r5, r6, lr}
 800f64a:	460e      	mov	r6, r1
 800f64c:	4605      	mov	r5, r0
 800f64e:	b118      	cbz	r0, 800f658 <_puts_r+0x10>
 800f650:	6983      	ldr	r3, [r0, #24]
 800f652:	b90b      	cbnz	r3, 800f658 <_puts_r+0x10>
 800f654:	f001 f8c4 	bl	80107e0 <__sinit>
 800f658:	69ab      	ldr	r3, [r5, #24]
 800f65a:	68ac      	ldr	r4, [r5, #8]
 800f65c:	b913      	cbnz	r3, 800f664 <_puts_r+0x1c>
 800f65e:	4628      	mov	r0, r5
 800f660:	f001 f8be 	bl	80107e0 <__sinit>
 800f664:	4b2c      	ldr	r3, [pc, #176]	; (800f718 <_puts_r+0xd0>)
 800f666:	429c      	cmp	r4, r3
 800f668:	d120      	bne.n	800f6ac <_puts_r+0x64>
 800f66a:	686c      	ldr	r4, [r5, #4]
 800f66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f66e:	07db      	lsls	r3, r3, #31
 800f670:	d405      	bmi.n	800f67e <_puts_r+0x36>
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	0598      	lsls	r0, r3, #22
 800f676:	d402      	bmi.n	800f67e <_puts_r+0x36>
 800f678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f67a:	f001 f954 	bl	8010926 <__retarget_lock_acquire_recursive>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	0719      	lsls	r1, r3, #28
 800f682:	d51d      	bpl.n	800f6c0 <_puts_r+0x78>
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	b1db      	cbz	r3, 800f6c0 <_puts_r+0x78>
 800f688:	3e01      	subs	r6, #1
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f690:	3b01      	subs	r3, #1
 800f692:	60a3      	str	r3, [r4, #8]
 800f694:	bb39      	cbnz	r1, 800f6e6 <_puts_r+0x9e>
 800f696:	2b00      	cmp	r3, #0
 800f698:	da38      	bge.n	800f70c <_puts_r+0xc4>
 800f69a:	4622      	mov	r2, r4
 800f69c:	210a      	movs	r1, #10
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f000 f848 	bl	800f734 <__swbuf_r>
 800f6a4:	3001      	adds	r0, #1
 800f6a6:	d011      	beq.n	800f6cc <_puts_r+0x84>
 800f6a8:	250a      	movs	r5, #10
 800f6aa:	e011      	b.n	800f6d0 <_puts_r+0x88>
 800f6ac:	4b1b      	ldr	r3, [pc, #108]	; (800f71c <_puts_r+0xd4>)
 800f6ae:	429c      	cmp	r4, r3
 800f6b0:	d101      	bne.n	800f6b6 <_puts_r+0x6e>
 800f6b2:	68ac      	ldr	r4, [r5, #8]
 800f6b4:	e7da      	b.n	800f66c <_puts_r+0x24>
 800f6b6:	4b1a      	ldr	r3, [pc, #104]	; (800f720 <_puts_r+0xd8>)
 800f6b8:	429c      	cmp	r4, r3
 800f6ba:	bf08      	it	eq
 800f6bc:	68ec      	ldreq	r4, [r5, #12]
 800f6be:	e7d5      	b.n	800f66c <_puts_r+0x24>
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f000 f888 	bl	800f7d8 <__swsetup_r>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d0dd      	beq.n	800f688 <_puts_r+0x40>
 800f6cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6d2:	07da      	lsls	r2, r3, #31
 800f6d4:	d405      	bmi.n	800f6e2 <_puts_r+0x9a>
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	059b      	lsls	r3, r3, #22
 800f6da:	d402      	bmi.n	800f6e2 <_puts_r+0x9a>
 800f6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6de:	f001 f923 	bl	8010928 <__retarget_lock_release_recursive>
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	da04      	bge.n	800f6f4 <_puts_r+0xac>
 800f6ea:	69a2      	ldr	r2, [r4, #24]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	dc06      	bgt.n	800f6fe <_puts_r+0xb6>
 800f6f0:	290a      	cmp	r1, #10
 800f6f2:	d004      	beq.n	800f6fe <_puts_r+0xb6>
 800f6f4:	6823      	ldr	r3, [r4, #0]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	6022      	str	r2, [r4, #0]
 800f6fa:	7019      	strb	r1, [r3, #0]
 800f6fc:	e7c5      	b.n	800f68a <_puts_r+0x42>
 800f6fe:	4622      	mov	r2, r4
 800f700:	4628      	mov	r0, r5
 800f702:	f000 f817 	bl	800f734 <__swbuf_r>
 800f706:	3001      	adds	r0, #1
 800f708:	d1bf      	bne.n	800f68a <_puts_r+0x42>
 800f70a:	e7df      	b.n	800f6cc <_puts_r+0x84>
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	250a      	movs	r5, #10
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	6022      	str	r2, [r4, #0]
 800f714:	701d      	strb	r5, [r3, #0]
 800f716:	e7db      	b.n	800f6d0 <_puts_r+0x88>
 800f718:	080130ac 	.word	0x080130ac
 800f71c:	080130cc 	.word	0x080130cc
 800f720:	0801308c 	.word	0x0801308c

0800f724 <puts>:
 800f724:	4b02      	ldr	r3, [pc, #8]	; (800f730 <puts+0xc>)
 800f726:	4601      	mov	r1, r0
 800f728:	6818      	ldr	r0, [r3, #0]
 800f72a:	f7ff bf8d 	b.w	800f648 <_puts_r>
 800f72e:	bf00      	nop
 800f730:	2000002c 	.word	0x2000002c

0800f734 <__swbuf_r>:
 800f734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f736:	460e      	mov	r6, r1
 800f738:	4614      	mov	r4, r2
 800f73a:	4605      	mov	r5, r0
 800f73c:	b118      	cbz	r0, 800f746 <__swbuf_r+0x12>
 800f73e:	6983      	ldr	r3, [r0, #24]
 800f740:	b90b      	cbnz	r3, 800f746 <__swbuf_r+0x12>
 800f742:	f001 f84d 	bl	80107e0 <__sinit>
 800f746:	4b21      	ldr	r3, [pc, #132]	; (800f7cc <__swbuf_r+0x98>)
 800f748:	429c      	cmp	r4, r3
 800f74a:	d12b      	bne.n	800f7a4 <__swbuf_r+0x70>
 800f74c:	686c      	ldr	r4, [r5, #4]
 800f74e:	69a3      	ldr	r3, [r4, #24]
 800f750:	60a3      	str	r3, [r4, #8]
 800f752:	89a3      	ldrh	r3, [r4, #12]
 800f754:	071a      	lsls	r2, r3, #28
 800f756:	d52f      	bpl.n	800f7b8 <__swbuf_r+0x84>
 800f758:	6923      	ldr	r3, [r4, #16]
 800f75a:	b36b      	cbz	r3, 800f7b8 <__swbuf_r+0x84>
 800f75c:	6923      	ldr	r3, [r4, #16]
 800f75e:	6820      	ldr	r0, [r4, #0]
 800f760:	1ac0      	subs	r0, r0, r3
 800f762:	6963      	ldr	r3, [r4, #20]
 800f764:	b2f6      	uxtb	r6, r6
 800f766:	4283      	cmp	r3, r0
 800f768:	4637      	mov	r7, r6
 800f76a:	dc04      	bgt.n	800f776 <__swbuf_r+0x42>
 800f76c:	4621      	mov	r1, r4
 800f76e:	4628      	mov	r0, r5
 800f770:	f000 ffa2 	bl	80106b8 <_fflush_r>
 800f774:	bb30      	cbnz	r0, 800f7c4 <__swbuf_r+0x90>
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	3b01      	subs	r3, #1
 800f77a:	60a3      	str	r3, [r4, #8]
 800f77c:	6823      	ldr	r3, [r4, #0]
 800f77e:	1c5a      	adds	r2, r3, #1
 800f780:	6022      	str	r2, [r4, #0]
 800f782:	701e      	strb	r6, [r3, #0]
 800f784:	6963      	ldr	r3, [r4, #20]
 800f786:	3001      	adds	r0, #1
 800f788:	4283      	cmp	r3, r0
 800f78a:	d004      	beq.n	800f796 <__swbuf_r+0x62>
 800f78c:	89a3      	ldrh	r3, [r4, #12]
 800f78e:	07db      	lsls	r3, r3, #31
 800f790:	d506      	bpl.n	800f7a0 <__swbuf_r+0x6c>
 800f792:	2e0a      	cmp	r6, #10
 800f794:	d104      	bne.n	800f7a0 <__swbuf_r+0x6c>
 800f796:	4621      	mov	r1, r4
 800f798:	4628      	mov	r0, r5
 800f79a:	f000 ff8d 	bl	80106b8 <_fflush_r>
 800f79e:	b988      	cbnz	r0, 800f7c4 <__swbuf_r+0x90>
 800f7a0:	4638      	mov	r0, r7
 800f7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a4:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <__swbuf_r+0x9c>)
 800f7a6:	429c      	cmp	r4, r3
 800f7a8:	d101      	bne.n	800f7ae <__swbuf_r+0x7a>
 800f7aa:	68ac      	ldr	r4, [r5, #8]
 800f7ac:	e7cf      	b.n	800f74e <__swbuf_r+0x1a>
 800f7ae:	4b09      	ldr	r3, [pc, #36]	; (800f7d4 <__swbuf_r+0xa0>)
 800f7b0:	429c      	cmp	r4, r3
 800f7b2:	bf08      	it	eq
 800f7b4:	68ec      	ldreq	r4, [r5, #12]
 800f7b6:	e7ca      	b.n	800f74e <__swbuf_r+0x1a>
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	f000 f80c 	bl	800f7d8 <__swsetup_r>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d0cb      	beq.n	800f75c <__swbuf_r+0x28>
 800f7c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f7c8:	e7ea      	b.n	800f7a0 <__swbuf_r+0x6c>
 800f7ca:	bf00      	nop
 800f7cc:	080130ac 	.word	0x080130ac
 800f7d0:	080130cc 	.word	0x080130cc
 800f7d4:	0801308c 	.word	0x0801308c

0800f7d8 <__swsetup_r>:
 800f7d8:	4b32      	ldr	r3, [pc, #200]	; (800f8a4 <__swsetup_r+0xcc>)
 800f7da:	b570      	push	{r4, r5, r6, lr}
 800f7dc:	681d      	ldr	r5, [r3, #0]
 800f7de:	4606      	mov	r6, r0
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	b125      	cbz	r5, 800f7ee <__swsetup_r+0x16>
 800f7e4:	69ab      	ldr	r3, [r5, #24]
 800f7e6:	b913      	cbnz	r3, 800f7ee <__swsetup_r+0x16>
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	f000 fff9 	bl	80107e0 <__sinit>
 800f7ee:	4b2e      	ldr	r3, [pc, #184]	; (800f8a8 <__swsetup_r+0xd0>)
 800f7f0:	429c      	cmp	r4, r3
 800f7f2:	d10f      	bne.n	800f814 <__swsetup_r+0x3c>
 800f7f4:	686c      	ldr	r4, [r5, #4]
 800f7f6:	89a3      	ldrh	r3, [r4, #12]
 800f7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7fc:	0719      	lsls	r1, r3, #28
 800f7fe:	d42c      	bmi.n	800f85a <__swsetup_r+0x82>
 800f800:	06dd      	lsls	r5, r3, #27
 800f802:	d411      	bmi.n	800f828 <__swsetup_r+0x50>
 800f804:	2309      	movs	r3, #9
 800f806:	6033      	str	r3, [r6, #0]
 800f808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f80c:	81a3      	strh	r3, [r4, #12]
 800f80e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f812:	e03e      	b.n	800f892 <__swsetup_r+0xba>
 800f814:	4b25      	ldr	r3, [pc, #148]	; (800f8ac <__swsetup_r+0xd4>)
 800f816:	429c      	cmp	r4, r3
 800f818:	d101      	bne.n	800f81e <__swsetup_r+0x46>
 800f81a:	68ac      	ldr	r4, [r5, #8]
 800f81c:	e7eb      	b.n	800f7f6 <__swsetup_r+0x1e>
 800f81e:	4b24      	ldr	r3, [pc, #144]	; (800f8b0 <__swsetup_r+0xd8>)
 800f820:	429c      	cmp	r4, r3
 800f822:	bf08      	it	eq
 800f824:	68ec      	ldreq	r4, [r5, #12]
 800f826:	e7e6      	b.n	800f7f6 <__swsetup_r+0x1e>
 800f828:	0758      	lsls	r0, r3, #29
 800f82a:	d512      	bpl.n	800f852 <__swsetup_r+0x7a>
 800f82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f82e:	b141      	cbz	r1, 800f842 <__swsetup_r+0x6a>
 800f830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f834:	4299      	cmp	r1, r3
 800f836:	d002      	beq.n	800f83e <__swsetup_r+0x66>
 800f838:	4630      	mov	r0, r6
 800f83a:	f001 fc7d 	bl	8011138 <_free_r>
 800f83e:	2300      	movs	r3, #0
 800f840:	6363      	str	r3, [r4, #52]	; 0x34
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f848:	81a3      	strh	r3, [r4, #12]
 800f84a:	2300      	movs	r3, #0
 800f84c:	6063      	str	r3, [r4, #4]
 800f84e:	6923      	ldr	r3, [r4, #16]
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	89a3      	ldrh	r3, [r4, #12]
 800f854:	f043 0308 	orr.w	r3, r3, #8
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	b94b      	cbnz	r3, 800f872 <__swsetup_r+0x9a>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f868:	d003      	beq.n	800f872 <__swsetup_r+0x9a>
 800f86a:	4621      	mov	r1, r4
 800f86c:	4630      	mov	r0, r6
 800f86e:	f001 f881 	bl	8010974 <__smakebuf_r>
 800f872:	89a0      	ldrh	r0, [r4, #12]
 800f874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f878:	f010 0301 	ands.w	r3, r0, #1
 800f87c:	d00a      	beq.n	800f894 <__swsetup_r+0xbc>
 800f87e:	2300      	movs	r3, #0
 800f880:	60a3      	str	r3, [r4, #8]
 800f882:	6963      	ldr	r3, [r4, #20]
 800f884:	425b      	negs	r3, r3
 800f886:	61a3      	str	r3, [r4, #24]
 800f888:	6923      	ldr	r3, [r4, #16]
 800f88a:	b943      	cbnz	r3, 800f89e <__swsetup_r+0xc6>
 800f88c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f890:	d1ba      	bne.n	800f808 <__swsetup_r+0x30>
 800f892:	bd70      	pop	{r4, r5, r6, pc}
 800f894:	0781      	lsls	r1, r0, #30
 800f896:	bf58      	it	pl
 800f898:	6963      	ldrpl	r3, [r4, #20]
 800f89a:	60a3      	str	r3, [r4, #8]
 800f89c:	e7f4      	b.n	800f888 <__swsetup_r+0xb0>
 800f89e:	2000      	movs	r0, #0
 800f8a0:	e7f7      	b.n	800f892 <__swsetup_r+0xba>
 800f8a2:	bf00      	nop
 800f8a4:	2000002c 	.word	0x2000002c
 800f8a8:	080130ac 	.word	0x080130ac
 800f8ac:	080130cc 	.word	0x080130cc
 800f8b0:	0801308c 	.word	0x0801308c

0800f8b4 <quorem>:
 800f8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	6903      	ldr	r3, [r0, #16]
 800f8ba:	690c      	ldr	r4, [r1, #16]
 800f8bc:	42a3      	cmp	r3, r4
 800f8be:	4607      	mov	r7, r0
 800f8c0:	f2c0 8081 	blt.w	800f9c6 <quorem+0x112>
 800f8c4:	3c01      	subs	r4, #1
 800f8c6:	f101 0814 	add.w	r8, r1, #20
 800f8ca:	f100 0514 	add.w	r5, r0, #20
 800f8ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8d2:	9301      	str	r3, [sp, #4]
 800f8d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f8e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8ec:	d331      	bcc.n	800f952 <quorem+0x9e>
 800f8ee:	f04f 0e00 	mov.w	lr, #0
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	46ac      	mov	ip, r5
 800f8f6:	46f2      	mov	sl, lr
 800f8f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f8fc:	b293      	uxth	r3, r2
 800f8fe:	fb06 e303 	mla	r3, r6, r3, lr
 800f902:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f906:	b29b      	uxth	r3, r3
 800f908:	ebaa 0303 	sub.w	r3, sl, r3
 800f90c:	f8dc a000 	ldr.w	sl, [ip]
 800f910:	0c12      	lsrs	r2, r2, #16
 800f912:	fa13 f38a 	uxtah	r3, r3, sl
 800f916:	fb06 e202 	mla	r2, r6, r2, lr
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	9b00      	ldr	r3, [sp, #0]
 800f91e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f922:	b292      	uxth	r2, r2
 800f924:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f92c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f930:	4581      	cmp	r9, r0
 800f932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f936:	f84c 3b04 	str.w	r3, [ip], #4
 800f93a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f93e:	d2db      	bcs.n	800f8f8 <quorem+0x44>
 800f940:	f855 300b 	ldr.w	r3, [r5, fp]
 800f944:	b92b      	cbnz	r3, 800f952 <quorem+0x9e>
 800f946:	9b01      	ldr	r3, [sp, #4]
 800f948:	3b04      	subs	r3, #4
 800f94a:	429d      	cmp	r5, r3
 800f94c:	461a      	mov	r2, r3
 800f94e:	d32e      	bcc.n	800f9ae <quorem+0xfa>
 800f950:	613c      	str	r4, [r7, #16]
 800f952:	4638      	mov	r0, r7
 800f954:	f001 fad8 	bl	8010f08 <__mcmp>
 800f958:	2800      	cmp	r0, #0
 800f95a:	db24      	blt.n	800f9a6 <quorem+0xf2>
 800f95c:	3601      	adds	r6, #1
 800f95e:	4628      	mov	r0, r5
 800f960:	f04f 0c00 	mov.w	ip, #0
 800f964:	f858 2b04 	ldr.w	r2, [r8], #4
 800f968:	f8d0 e000 	ldr.w	lr, [r0]
 800f96c:	b293      	uxth	r3, r2
 800f96e:	ebac 0303 	sub.w	r3, ip, r3
 800f972:	0c12      	lsrs	r2, r2, #16
 800f974:	fa13 f38e 	uxtah	r3, r3, lr
 800f978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f97c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f980:	b29b      	uxth	r3, r3
 800f982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f986:	45c1      	cmp	r9, r8
 800f988:	f840 3b04 	str.w	r3, [r0], #4
 800f98c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f990:	d2e8      	bcs.n	800f964 <quorem+0xb0>
 800f992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f99a:	b922      	cbnz	r2, 800f9a6 <quorem+0xf2>
 800f99c:	3b04      	subs	r3, #4
 800f99e:	429d      	cmp	r5, r3
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	d30a      	bcc.n	800f9ba <quorem+0x106>
 800f9a4:	613c      	str	r4, [r7, #16]
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	b003      	add	sp, #12
 800f9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ae:	6812      	ldr	r2, [r2, #0]
 800f9b0:	3b04      	subs	r3, #4
 800f9b2:	2a00      	cmp	r2, #0
 800f9b4:	d1cc      	bne.n	800f950 <quorem+0x9c>
 800f9b6:	3c01      	subs	r4, #1
 800f9b8:	e7c7      	b.n	800f94a <quorem+0x96>
 800f9ba:	6812      	ldr	r2, [r2, #0]
 800f9bc:	3b04      	subs	r3, #4
 800f9be:	2a00      	cmp	r2, #0
 800f9c0:	d1f0      	bne.n	800f9a4 <quorem+0xf0>
 800f9c2:	3c01      	subs	r4, #1
 800f9c4:	e7eb      	b.n	800f99e <quorem+0xea>
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	e7ee      	b.n	800f9a8 <quorem+0xf4>
 800f9ca:	0000      	movs	r0, r0
 800f9cc:	0000      	movs	r0, r0
	...

0800f9d0 <_dtoa_r>:
 800f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	ed2d 8b04 	vpush	{d8-d9}
 800f9d8:	ec57 6b10 	vmov	r6, r7, d0
 800f9dc:	b093      	sub	sp, #76	; 0x4c
 800f9de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f9e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f9e4:	9106      	str	r1, [sp, #24]
 800f9e6:	ee10 aa10 	vmov	sl, s0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f9f0:	46bb      	mov	fp, r7
 800f9f2:	b975      	cbnz	r5, 800fa12 <_dtoa_r+0x42>
 800f9f4:	2010      	movs	r0, #16
 800f9f6:	f000 fffd 	bl	80109f4 <malloc>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	6260      	str	r0, [r4, #36]	; 0x24
 800f9fe:	b920      	cbnz	r0, 800fa0a <_dtoa_r+0x3a>
 800fa00:	4ba7      	ldr	r3, [pc, #668]	; (800fca0 <_dtoa_r+0x2d0>)
 800fa02:	21ea      	movs	r1, #234	; 0xea
 800fa04:	48a7      	ldr	r0, [pc, #668]	; (800fca4 <_dtoa_r+0x2d4>)
 800fa06:	f001 fe7f 	bl	8011708 <__assert_func>
 800fa0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa0e:	6005      	str	r5, [r0, #0]
 800fa10:	60c5      	str	r5, [r0, #12]
 800fa12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa14:	6819      	ldr	r1, [r3, #0]
 800fa16:	b151      	cbz	r1, 800fa2e <_dtoa_r+0x5e>
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	604a      	str	r2, [r1, #4]
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	4093      	lsls	r3, r2
 800fa20:	608b      	str	r3, [r1, #8]
 800fa22:	4620      	mov	r0, r4
 800fa24:	f001 f82e 	bl	8010a84 <_Bfree>
 800fa28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	1e3b      	subs	r3, r7, #0
 800fa30:	bfaa      	itet	ge
 800fa32:	2300      	movge	r3, #0
 800fa34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fa38:	f8c8 3000 	strge.w	r3, [r8]
 800fa3c:	4b9a      	ldr	r3, [pc, #616]	; (800fca8 <_dtoa_r+0x2d8>)
 800fa3e:	bfbc      	itt	lt
 800fa40:	2201      	movlt	r2, #1
 800fa42:	f8c8 2000 	strlt.w	r2, [r8]
 800fa46:	ea33 030b 	bics.w	r3, r3, fp
 800fa4a:	d11b      	bne.n	800fa84 <_dtoa_r+0xb4>
 800fa4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa52:	6013      	str	r3, [r2, #0]
 800fa54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa58:	4333      	orrs	r3, r6
 800fa5a:	f000 8592 	beq.w	8010582 <_dtoa_r+0xbb2>
 800fa5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa60:	b963      	cbnz	r3, 800fa7c <_dtoa_r+0xac>
 800fa62:	4b92      	ldr	r3, [pc, #584]	; (800fcac <_dtoa_r+0x2dc>)
 800fa64:	e022      	b.n	800faac <_dtoa_r+0xdc>
 800fa66:	4b92      	ldr	r3, [pc, #584]	; (800fcb0 <_dtoa_r+0x2e0>)
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	3308      	adds	r3, #8
 800fa6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa6e:	6013      	str	r3, [r2, #0]
 800fa70:	9801      	ldr	r0, [sp, #4]
 800fa72:	b013      	add	sp, #76	; 0x4c
 800fa74:	ecbd 8b04 	vpop	{d8-d9}
 800fa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa7c:	4b8b      	ldr	r3, [pc, #556]	; (800fcac <_dtoa_r+0x2dc>)
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	3303      	adds	r3, #3
 800fa82:	e7f3      	b.n	800fa6c <_dtoa_r+0x9c>
 800fa84:	2200      	movs	r2, #0
 800fa86:	2300      	movs	r3, #0
 800fa88:	4650      	mov	r0, sl
 800fa8a:	4659      	mov	r1, fp
 800fa8c:	f7f0 fff4 	bl	8000a78 <__aeabi_dcmpeq>
 800fa90:	ec4b ab19 	vmov	d9, sl, fp
 800fa94:	4680      	mov	r8, r0
 800fa96:	b158      	cbz	r0, 800fab0 <_dtoa_r+0xe0>
 800fa98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	6013      	str	r3, [r2, #0]
 800fa9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f000 856b 	beq.w	801057c <_dtoa_r+0xbac>
 800faa6:	4883      	ldr	r0, [pc, #524]	; (800fcb4 <_dtoa_r+0x2e4>)
 800faa8:	6018      	str	r0, [r3, #0]
 800faaa:	1e43      	subs	r3, r0, #1
 800faac:	9301      	str	r3, [sp, #4]
 800faae:	e7df      	b.n	800fa70 <_dtoa_r+0xa0>
 800fab0:	ec4b ab10 	vmov	d0, sl, fp
 800fab4:	aa10      	add	r2, sp, #64	; 0x40
 800fab6:	a911      	add	r1, sp, #68	; 0x44
 800fab8:	4620      	mov	r0, r4
 800faba:	f001 facb 	bl	8011054 <__d2b>
 800fabe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fac2:	ee08 0a10 	vmov	s16, r0
 800fac6:	2d00      	cmp	r5, #0
 800fac8:	f000 8084 	beq.w	800fbd4 <_dtoa_r+0x204>
 800facc:	ee19 3a90 	vmov	r3, s19
 800fad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fad4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fad8:	4656      	mov	r6, sl
 800fada:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fae2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fae6:	4b74      	ldr	r3, [pc, #464]	; (800fcb8 <_dtoa_r+0x2e8>)
 800fae8:	2200      	movs	r2, #0
 800faea:	4630      	mov	r0, r6
 800faec:	4639      	mov	r1, r7
 800faee:	f7f0 fba3 	bl	8000238 <__aeabi_dsub>
 800faf2:	a365      	add	r3, pc, #404	; (adr r3, 800fc88 <_dtoa_r+0x2b8>)
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	f7f0 fd56 	bl	80005a8 <__aeabi_dmul>
 800fafc:	a364      	add	r3, pc, #400	; (adr r3, 800fc90 <_dtoa_r+0x2c0>)
 800fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb02:	f7f0 fb9b 	bl	800023c <__adddf3>
 800fb06:	4606      	mov	r6, r0
 800fb08:	4628      	mov	r0, r5
 800fb0a:	460f      	mov	r7, r1
 800fb0c:	f7f0 fce2 	bl	80004d4 <__aeabi_i2d>
 800fb10:	a361      	add	r3, pc, #388	; (adr r3, 800fc98 <_dtoa_r+0x2c8>)
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	f7f0 fd47 	bl	80005a8 <__aeabi_dmul>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	4630      	mov	r0, r6
 800fb20:	4639      	mov	r1, r7
 800fb22:	f7f0 fb8b 	bl	800023c <__adddf3>
 800fb26:	4606      	mov	r6, r0
 800fb28:	460f      	mov	r7, r1
 800fb2a:	f7f0 ffed 	bl	8000b08 <__aeabi_d2iz>
 800fb2e:	2200      	movs	r2, #0
 800fb30:	9000      	str	r0, [sp, #0]
 800fb32:	2300      	movs	r3, #0
 800fb34:	4630      	mov	r0, r6
 800fb36:	4639      	mov	r1, r7
 800fb38:	f7f0 ffa8 	bl	8000a8c <__aeabi_dcmplt>
 800fb3c:	b150      	cbz	r0, 800fb54 <_dtoa_r+0x184>
 800fb3e:	9800      	ldr	r0, [sp, #0]
 800fb40:	f7f0 fcc8 	bl	80004d4 <__aeabi_i2d>
 800fb44:	4632      	mov	r2, r6
 800fb46:	463b      	mov	r3, r7
 800fb48:	f7f0 ff96 	bl	8000a78 <__aeabi_dcmpeq>
 800fb4c:	b910      	cbnz	r0, 800fb54 <_dtoa_r+0x184>
 800fb4e:	9b00      	ldr	r3, [sp, #0]
 800fb50:	3b01      	subs	r3, #1
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	9b00      	ldr	r3, [sp, #0]
 800fb56:	2b16      	cmp	r3, #22
 800fb58:	d85a      	bhi.n	800fc10 <_dtoa_r+0x240>
 800fb5a:	9a00      	ldr	r2, [sp, #0]
 800fb5c:	4b57      	ldr	r3, [pc, #348]	; (800fcbc <_dtoa_r+0x2ec>)
 800fb5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb66:	ec51 0b19 	vmov	r0, r1, d9
 800fb6a:	f7f0 ff8f 	bl	8000a8c <__aeabi_dcmplt>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d050      	beq.n	800fc14 <_dtoa_r+0x244>
 800fb72:	9b00      	ldr	r3, [sp, #0]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	2300      	movs	r3, #0
 800fb7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb7e:	1b5d      	subs	r5, r3, r5
 800fb80:	1e6b      	subs	r3, r5, #1
 800fb82:	9305      	str	r3, [sp, #20]
 800fb84:	bf45      	ittet	mi
 800fb86:	f1c5 0301 	rsbmi	r3, r5, #1
 800fb8a:	9304      	strmi	r3, [sp, #16]
 800fb8c:	2300      	movpl	r3, #0
 800fb8e:	2300      	movmi	r3, #0
 800fb90:	bf4c      	ite	mi
 800fb92:	9305      	strmi	r3, [sp, #20]
 800fb94:	9304      	strpl	r3, [sp, #16]
 800fb96:	9b00      	ldr	r3, [sp, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	db3d      	blt.n	800fc18 <_dtoa_r+0x248>
 800fb9c:	9b05      	ldr	r3, [sp, #20]
 800fb9e:	9a00      	ldr	r2, [sp, #0]
 800fba0:	920a      	str	r2, [sp, #40]	; 0x28
 800fba2:	4413      	add	r3, r2
 800fba4:	9305      	str	r3, [sp, #20]
 800fba6:	2300      	movs	r3, #0
 800fba8:	9307      	str	r3, [sp, #28]
 800fbaa:	9b06      	ldr	r3, [sp, #24]
 800fbac:	2b09      	cmp	r3, #9
 800fbae:	f200 8089 	bhi.w	800fcc4 <_dtoa_r+0x2f4>
 800fbb2:	2b05      	cmp	r3, #5
 800fbb4:	bfc4      	itt	gt
 800fbb6:	3b04      	subgt	r3, #4
 800fbb8:	9306      	strgt	r3, [sp, #24]
 800fbba:	9b06      	ldr	r3, [sp, #24]
 800fbbc:	f1a3 0302 	sub.w	r3, r3, #2
 800fbc0:	bfcc      	ite	gt
 800fbc2:	2500      	movgt	r5, #0
 800fbc4:	2501      	movle	r5, #1
 800fbc6:	2b03      	cmp	r3, #3
 800fbc8:	f200 8087 	bhi.w	800fcda <_dtoa_r+0x30a>
 800fbcc:	e8df f003 	tbb	[pc, r3]
 800fbd0:	59383a2d 	.word	0x59383a2d
 800fbd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fbd8:	441d      	add	r5, r3
 800fbda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fbde:	2b20      	cmp	r3, #32
 800fbe0:	bfc1      	itttt	gt
 800fbe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fbe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fbea:	fa0b f303 	lslgt.w	r3, fp, r3
 800fbee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fbf2:	bfda      	itte	le
 800fbf4:	f1c3 0320 	rsble	r3, r3, #32
 800fbf8:	fa06 f003 	lslle.w	r0, r6, r3
 800fbfc:	4318      	orrgt	r0, r3
 800fbfe:	f7f0 fc59 	bl	80004b4 <__aeabi_ui2d>
 800fc02:	2301      	movs	r3, #1
 800fc04:	4606      	mov	r6, r0
 800fc06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fc0a:	3d01      	subs	r5, #1
 800fc0c:	930e      	str	r3, [sp, #56]	; 0x38
 800fc0e:	e76a      	b.n	800fae6 <_dtoa_r+0x116>
 800fc10:	2301      	movs	r3, #1
 800fc12:	e7b2      	b.n	800fb7a <_dtoa_r+0x1aa>
 800fc14:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc16:	e7b1      	b.n	800fb7c <_dtoa_r+0x1ac>
 800fc18:	9b04      	ldr	r3, [sp, #16]
 800fc1a:	9a00      	ldr	r2, [sp, #0]
 800fc1c:	1a9b      	subs	r3, r3, r2
 800fc1e:	9304      	str	r3, [sp, #16]
 800fc20:	4253      	negs	r3, r2
 800fc22:	9307      	str	r3, [sp, #28]
 800fc24:	2300      	movs	r3, #0
 800fc26:	930a      	str	r3, [sp, #40]	; 0x28
 800fc28:	e7bf      	b.n	800fbaa <_dtoa_r+0x1da>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	9308      	str	r3, [sp, #32]
 800fc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	dc55      	bgt.n	800fce0 <_dtoa_r+0x310>
 800fc34:	2301      	movs	r3, #1
 800fc36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800fc3e:	e00c      	b.n	800fc5a <_dtoa_r+0x28a>
 800fc40:	2301      	movs	r3, #1
 800fc42:	e7f3      	b.n	800fc2c <_dtoa_r+0x25c>
 800fc44:	2300      	movs	r3, #0
 800fc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc48:	9308      	str	r3, [sp, #32]
 800fc4a:	9b00      	ldr	r3, [sp, #0]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	9302      	str	r3, [sp, #8]
 800fc50:	3301      	adds	r3, #1
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	9303      	str	r3, [sp, #12]
 800fc56:	bfb8      	it	lt
 800fc58:	2301      	movlt	r3, #1
 800fc5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	6042      	str	r2, [r0, #4]
 800fc60:	2204      	movs	r2, #4
 800fc62:	f102 0614 	add.w	r6, r2, #20
 800fc66:	429e      	cmp	r6, r3
 800fc68:	6841      	ldr	r1, [r0, #4]
 800fc6a:	d93d      	bls.n	800fce8 <_dtoa_r+0x318>
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	f000 fec9 	bl	8010a04 <_Balloc>
 800fc72:	9001      	str	r0, [sp, #4]
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d13b      	bne.n	800fcf0 <_dtoa_r+0x320>
 800fc78:	4b11      	ldr	r3, [pc, #68]	; (800fcc0 <_dtoa_r+0x2f0>)
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc80:	e6c0      	b.n	800fa04 <_dtoa_r+0x34>
 800fc82:	2301      	movs	r3, #1
 800fc84:	e7df      	b.n	800fc46 <_dtoa_r+0x276>
 800fc86:	bf00      	nop
 800fc88:	636f4361 	.word	0x636f4361
 800fc8c:	3fd287a7 	.word	0x3fd287a7
 800fc90:	8b60c8b3 	.word	0x8b60c8b3
 800fc94:	3fc68a28 	.word	0x3fc68a28
 800fc98:	509f79fb 	.word	0x509f79fb
 800fc9c:	3fd34413 	.word	0x3fd34413
 800fca0:	08013009 	.word	0x08013009
 800fca4:	08013020 	.word	0x08013020
 800fca8:	7ff00000 	.word	0x7ff00000
 800fcac:	08013005 	.word	0x08013005
 800fcb0:	08012ffc 	.word	0x08012ffc
 800fcb4:	08012fd9 	.word	0x08012fd9
 800fcb8:	3ff80000 	.word	0x3ff80000
 800fcbc:	08013170 	.word	0x08013170
 800fcc0:	0801307b 	.word	0x0801307b
 800fcc4:	2501      	movs	r5, #1
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	9306      	str	r3, [sp, #24]
 800fcca:	9508      	str	r5, [sp, #32]
 800fccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcd0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	2312      	movs	r3, #18
 800fcd8:	e7b0      	b.n	800fc3c <_dtoa_r+0x26c>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	9308      	str	r3, [sp, #32]
 800fcde:	e7f5      	b.n	800fccc <_dtoa_r+0x2fc>
 800fce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fce2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fce6:	e7b8      	b.n	800fc5a <_dtoa_r+0x28a>
 800fce8:	3101      	adds	r1, #1
 800fcea:	6041      	str	r1, [r0, #4]
 800fcec:	0052      	lsls	r2, r2, #1
 800fcee:	e7b8      	b.n	800fc62 <_dtoa_r+0x292>
 800fcf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcf2:	9a01      	ldr	r2, [sp, #4]
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	9b03      	ldr	r3, [sp, #12]
 800fcf8:	2b0e      	cmp	r3, #14
 800fcfa:	f200 809d 	bhi.w	800fe38 <_dtoa_r+0x468>
 800fcfe:	2d00      	cmp	r5, #0
 800fd00:	f000 809a 	beq.w	800fe38 <_dtoa_r+0x468>
 800fd04:	9b00      	ldr	r3, [sp, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	dd32      	ble.n	800fd70 <_dtoa_r+0x3a0>
 800fd0a:	4ab7      	ldr	r2, [pc, #732]	; (800ffe8 <_dtoa_r+0x618>)
 800fd0c:	f003 030f 	and.w	r3, r3, #15
 800fd10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd18:	9b00      	ldr	r3, [sp, #0]
 800fd1a:	05d8      	lsls	r0, r3, #23
 800fd1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fd20:	d516      	bpl.n	800fd50 <_dtoa_r+0x380>
 800fd22:	4bb2      	ldr	r3, [pc, #712]	; (800ffec <_dtoa_r+0x61c>)
 800fd24:	ec51 0b19 	vmov	r0, r1, d9
 800fd28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd2c:	f7f0 fd66 	bl	80007fc <__aeabi_ddiv>
 800fd30:	f007 070f 	and.w	r7, r7, #15
 800fd34:	4682      	mov	sl, r0
 800fd36:	468b      	mov	fp, r1
 800fd38:	2503      	movs	r5, #3
 800fd3a:	4eac      	ldr	r6, [pc, #688]	; (800ffec <_dtoa_r+0x61c>)
 800fd3c:	b957      	cbnz	r7, 800fd54 <_dtoa_r+0x384>
 800fd3e:	4642      	mov	r2, r8
 800fd40:	464b      	mov	r3, r9
 800fd42:	4650      	mov	r0, sl
 800fd44:	4659      	mov	r1, fp
 800fd46:	f7f0 fd59 	bl	80007fc <__aeabi_ddiv>
 800fd4a:	4682      	mov	sl, r0
 800fd4c:	468b      	mov	fp, r1
 800fd4e:	e028      	b.n	800fda2 <_dtoa_r+0x3d2>
 800fd50:	2502      	movs	r5, #2
 800fd52:	e7f2      	b.n	800fd3a <_dtoa_r+0x36a>
 800fd54:	07f9      	lsls	r1, r7, #31
 800fd56:	d508      	bpl.n	800fd6a <_dtoa_r+0x39a>
 800fd58:	4640      	mov	r0, r8
 800fd5a:	4649      	mov	r1, r9
 800fd5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd60:	f7f0 fc22 	bl	80005a8 <__aeabi_dmul>
 800fd64:	3501      	adds	r5, #1
 800fd66:	4680      	mov	r8, r0
 800fd68:	4689      	mov	r9, r1
 800fd6a:	107f      	asrs	r7, r7, #1
 800fd6c:	3608      	adds	r6, #8
 800fd6e:	e7e5      	b.n	800fd3c <_dtoa_r+0x36c>
 800fd70:	f000 809b 	beq.w	800feaa <_dtoa_r+0x4da>
 800fd74:	9b00      	ldr	r3, [sp, #0]
 800fd76:	4f9d      	ldr	r7, [pc, #628]	; (800ffec <_dtoa_r+0x61c>)
 800fd78:	425e      	negs	r6, r3
 800fd7a:	4b9b      	ldr	r3, [pc, #620]	; (800ffe8 <_dtoa_r+0x618>)
 800fd7c:	f006 020f 	and.w	r2, r6, #15
 800fd80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd88:	ec51 0b19 	vmov	r0, r1, d9
 800fd8c:	f7f0 fc0c 	bl	80005a8 <__aeabi_dmul>
 800fd90:	1136      	asrs	r6, r6, #4
 800fd92:	4682      	mov	sl, r0
 800fd94:	468b      	mov	fp, r1
 800fd96:	2300      	movs	r3, #0
 800fd98:	2502      	movs	r5, #2
 800fd9a:	2e00      	cmp	r6, #0
 800fd9c:	d17a      	bne.n	800fe94 <_dtoa_r+0x4c4>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d1d3      	bne.n	800fd4a <_dtoa_r+0x37a>
 800fda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 8082 	beq.w	800feae <_dtoa_r+0x4de>
 800fdaa:	4b91      	ldr	r3, [pc, #580]	; (800fff0 <_dtoa_r+0x620>)
 800fdac:	2200      	movs	r2, #0
 800fdae:	4650      	mov	r0, sl
 800fdb0:	4659      	mov	r1, fp
 800fdb2:	f7f0 fe6b 	bl	8000a8c <__aeabi_dcmplt>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d079      	beq.n	800feae <_dtoa_r+0x4de>
 800fdba:	9b03      	ldr	r3, [sp, #12]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d076      	beq.n	800feae <_dtoa_r+0x4de>
 800fdc0:	9b02      	ldr	r3, [sp, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	dd36      	ble.n	800fe34 <_dtoa_r+0x464>
 800fdc6:	9b00      	ldr	r3, [sp, #0]
 800fdc8:	4650      	mov	r0, sl
 800fdca:	4659      	mov	r1, fp
 800fdcc:	1e5f      	subs	r7, r3, #1
 800fdce:	2200      	movs	r2, #0
 800fdd0:	4b88      	ldr	r3, [pc, #544]	; (800fff4 <_dtoa_r+0x624>)
 800fdd2:	f7f0 fbe9 	bl	80005a8 <__aeabi_dmul>
 800fdd6:	9e02      	ldr	r6, [sp, #8]
 800fdd8:	4682      	mov	sl, r0
 800fdda:	468b      	mov	fp, r1
 800fddc:	3501      	adds	r5, #1
 800fdde:	4628      	mov	r0, r5
 800fde0:	f7f0 fb78 	bl	80004d4 <__aeabi_i2d>
 800fde4:	4652      	mov	r2, sl
 800fde6:	465b      	mov	r3, fp
 800fde8:	f7f0 fbde 	bl	80005a8 <__aeabi_dmul>
 800fdec:	4b82      	ldr	r3, [pc, #520]	; (800fff8 <_dtoa_r+0x628>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f7f0 fa24 	bl	800023c <__adddf3>
 800fdf4:	46d0      	mov	r8, sl
 800fdf6:	46d9      	mov	r9, fp
 800fdf8:	4682      	mov	sl, r0
 800fdfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fdfe:	2e00      	cmp	r6, #0
 800fe00:	d158      	bne.n	800feb4 <_dtoa_r+0x4e4>
 800fe02:	4b7e      	ldr	r3, [pc, #504]	; (800fffc <_dtoa_r+0x62c>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	4640      	mov	r0, r8
 800fe08:	4649      	mov	r1, r9
 800fe0a:	f7f0 fa15 	bl	8000238 <__aeabi_dsub>
 800fe0e:	4652      	mov	r2, sl
 800fe10:	465b      	mov	r3, fp
 800fe12:	4680      	mov	r8, r0
 800fe14:	4689      	mov	r9, r1
 800fe16:	f7f0 fe57 	bl	8000ac8 <__aeabi_dcmpgt>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	f040 8295 	bne.w	801034a <_dtoa_r+0x97a>
 800fe20:	4652      	mov	r2, sl
 800fe22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe26:	4640      	mov	r0, r8
 800fe28:	4649      	mov	r1, r9
 800fe2a:	f7f0 fe2f 	bl	8000a8c <__aeabi_dcmplt>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	f040 8289 	bne.w	8010346 <_dtoa_r+0x976>
 800fe34:	ec5b ab19 	vmov	sl, fp, d9
 800fe38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	f2c0 8148 	blt.w	80100d0 <_dtoa_r+0x700>
 800fe40:	9a00      	ldr	r2, [sp, #0]
 800fe42:	2a0e      	cmp	r2, #14
 800fe44:	f300 8144 	bgt.w	80100d0 <_dtoa_r+0x700>
 800fe48:	4b67      	ldr	r3, [pc, #412]	; (800ffe8 <_dtoa_r+0x618>)
 800fe4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f280 80d5 	bge.w	8010004 <_dtoa_r+0x634>
 800fe5a:	9b03      	ldr	r3, [sp, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f300 80d1 	bgt.w	8010004 <_dtoa_r+0x634>
 800fe62:	f040 826f 	bne.w	8010344 <_dtoa_r+0x974>
 800fe66:	4b65      	ldr	r3, [pc, #404]	; (800fffc <_dtoa_r+0x62c>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	4640      	mov	r0, r8
 800fe6c:	4649      	mov	r1, r9
 800fe6e:	f7f0 fb9b 	bl	80005a8 <__aeabi_dmul>
 800fe72:	4652      	mov	r2, sl
 800fe74:	465b      	mov	r3, fp
 800fe76:	f7f0 fe1d 	bl	8000ab4 <__aeabi_dcmpge>
 800fe7a:	9e03      	ldr	r6, [sp, #12]
 800fe7c:	4637      	mov	r7, r6
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	f040 8245 	bne.w	801030e <_dtoa_r+0x93e>
 800fe84:	9d01      	ldr	r5, [sp, #4]
 800fe86:	2331      	movs	r3, #49	; 0x31
 800fe88:	f805 3b01 	strb.w	r3, [r5], #1
 800fe8c:	9b00      	ldr	r3, [sp, #0]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	e240      	b.n	8010316 <_dtoa_r+0x946>
 800fe94:	07f2      	lsls	r2, r6, #31
 800fe96:	d505      	bpl.n	800fea4 <_dtoa_r+0x4d4>
 800fe98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe9c:	f7f0 fb84 	bl	80005a8 <__aeabi_dmul>
 800fea0:	3501      	adds	r5, #1
 800fea2:	2301      	movs	r3, #1
 800fea4:	1076      	asrs	r6, r6, #1
 800fea6:	3708      	adds	r7, #8
 800fea8:	e777      	b.n	800fd9a <_dtoa_r+0x3ca>
 800feaa:	2502      	movs	r5, #2
 800feac:	e779      	b.n	800fda2 <_dtoa_r+0x3d2>
 800feae:	9f00      	ldr	r7, [sp, #0]
 800feb0:	9e03      	ldr	r6, [sp, #12]
 800feb2:	e794      	b.n	800fdde <_dtoa_r+0x40e>
 800feb4:	9901      	ldr	r1, [sp, #4]
 800feb6:	4b4c      	ldr	r3, [pc, #304]	; (800ffe8 <_dtoa_r+0x618>)
 800feb8:	4431      	add	r1, r6
 800feba:	910d      	str	r1, [sp, #52]	; 0x34
 800febc:	9908      	ldr	r1, [sp, #32]
 800febe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fec6:	2900      	cmp	r1, #0
 800fec8:	d043      	beq.n	800ff52 <_dtoa_r+0x582>
 800feca:	494d      	ldr	r1, [pc, #308]	; (8010000 <_dtoa_r+0x630>)
 800fecc:	2000      	movs	r0, #0
 800fece:	f7f0 fc95 	bl	80007fc <__aeabi_ddiv>
 800fed2:	4652      	mov	r2, sl
 800fed4:	465b      	mov	r3, fp
 800fed6:	f7f0 f9af 	bl	8000238 <__aeabi_dsub>
 800feda:	9d01      	ldr	r5, [sp, #4]
 800fedc:	4682      	mov	sl, r0
 800fede:	468b      	mov	fp, r1
 800fee0:	4649      	mov	r1, r9
 800fee2:	4640      	mov	r0, r8
 800fee4:	f7f0 fe10 	bl	8000b08 <__aeabi_d2iz>
 800fee8:	4606      	mov	r6, r0
 800feea:	f7f0 faf3 	bl	80004d4 <__aeabi_i2d>
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	4640      	mov	r0, r8
 800fef4:	4649      	mov	r1, r9
 800fef6:	f7f0 f99f 	bl	8000238 <__aeabi_dsub>
 800fefa:	3630      	adds	r6, #48	; 0x30
 800fefc:	f805 6b01 	strb.w	r6, [r5], #1
 800ff00:	4652      	mov	r2, sl
 800ff02:	465b      	mov	r3, fp
 800ff04:	4680      	mov	r8, r0
 800ff06:	4689      	mov	r9, r1
 800ff08:	f7f0 fdc0 	bl	8000a8c <__aeabi_dcmplt>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d163      	bne.n	800ffd8 <_dtoa_r+0x608>
 800ff10:	4642      	mov	r2, r8
 800ff12:	464b      	mov	r3, r9
 800ff14:	4936      	ldr	r1, [pc, #216]	; (800fff0 <_dtoa_r+0x620>)
 800ff16:	2000      	movs	r0, #0
 800ff18:	f7f0 f98e 	bl	8000238 <__aeabi_dsub>
 800ff1c:	4652      	mov	r2, sl
 800ff1e:	465b      	mov	r3, fp
 800ff20:	f7f0 fdb4 	bl	8000a8c <__aeabi_dcmplt>
 800ff24:	2800      	cmp	r0, #0
 800ff26:	f040 80b5 	bne.w	8010094 <_dtoa_r+0x6c4>
 800ff2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff2c:	429d      	cmp	r5, r3
 800ff2e:	d081      	beq.n	800fe34 <_dtoa_r+0x464>
 800ff30:	4b30      	ldr	r3, [pc, #192]	; (800fff4 <_dtoa_r+0x624>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	4650      	mov	r0, sl
 800ff36:	4659      	mov	r1, fp
 800ff38:	f7f0 fb36 	bl	80005a8 <__aeabi_dmul>
 800ff3c:	4b2d      	ldr	r3, [pc, #180]	; (800fff4 <_dtoa_r+0x624>)
 800ff3e:	4682      	mov	sl, r0
 800ff40:	468b      	mov	fp, r1
 800ff42:	4640      	mov	r0, r8
 800ff44:	4649      	mov	r1, r9
 800ff46:	2200      	movs	r2, #0
 800ff48:	f7f0 fb2e 	bl	80005a8 <__aeabi_dmul>
 800ff4c:	4680      	mov	r8, r0
 800ff4e:	4689      	mov	r9, r1
 800ff50:	e7c6      	b.n	800fee0 <_dtoa_r+0x510>
 800ff52:	4650      	mov	r0, sl
 800ff54:	4659      	mov	r1, fp
 800ff56:	f7f0 fb27 	bl	80005a8 <__aeabi_dmul>
 800ff5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff5c:	9d01      	ldr	r5, [sp, #4]
 800ff5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff60:	4682      	mov	sl, r0
 800ff62:	468b      	mov	fp, r1
 800ff64:	4649      	mov	r1, r9
 800ff66:	4640      	mov	r0, r8
 800ff68:	f7f0 fdce 	bl	8000b08 <__aeabi_d2iz>
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	f7f0 fab1 	bl	80004d4 <__aeabi_i2d>
 800ff72:	3630      	adds	r6, #48	; 0x30
 800ff74:	4602      	mov	r2, r0
 800ff76:	460b      	mov	r3, r1
 800ff78:	4640      	mov	r0, r8
 800ff7a:	4649      	mov	r1, r9
 800ff7c:	f7f0 f95c 	bl	8000238 <__aeabi_dsub>
 800ff80:	f805 6b01 	strb.w	r6, [r5], #1
 800ff84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff86:	429d      	cmp	r5, r3
 800ff88:	4680      	mov	r8, r0
 800ff8a:	4689      	mov	r9, r1
 800ff8c:	f04f 0200 	mov.w	r2, #0
 800ff90:	d124      	bne.n	800ffdc <_dtoa_r+0x60c>
 800ff92:	4b1b      	ldr	r3, [pc, #108]	; (8010000 <_dtoa_r+0x630>)
 800ff94:	4650      	mov	r0, sl
 800ff96:	4659      	mov	r1, fp
 800ff98:	f7f0 f950 	bl	800023c <__adddf3>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	4640      	mov	r0, r8
 800ffa2:	4649      	mov	r1, r9
 800ffa4:	f7f0 fd90 	bl	8000ac8 <__aeabi_dcmpgt>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d173      	bne.n	8010094 <_dtoa_r+0x6c4>
 800ffac:	4652      	mov	r2, sl
 800ffae:	465b      	mov	r3, fp
 800ffb0:	4913      	ldr	r1, [pc, #76]	; (8010000 <_dtoa_r+0x630>)
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	f7f0 f940 	bl	8000238 <__aeabi_dsub>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	460b      	mov	r3, r1
 800ffbc:	4640      	mov	r0, r8
 800ffbe:	4649      	mov	r1, r9
 800ffc0:	f7f0 fd64 	bl	8000a8c <__aeabi_dcmplt>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f43f af35 	beq.w	800fe34 <_dtoa_r+0x464>
 800ffca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ffcc:	1e6b      	subs	r3, r5, #1
 800ffce:	930f      	str	r3, [sp, #60]	; 0x3c
 800ffd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ffd4:	2b30      	cmp	r3, #48	; 0x30
 800ffd6:	d0f8      	beq.n	800ffca <_dtoa_r+0x5fa>
 800ffd8:	9700      	str	r7, [sp, #0]
 800ffda:	e049      	b.n	8010070 <_dtoa_r+0x6a0>
 800ffdc:	4b05      	ldr	r3, [pc, #20]	; (800fff4 <_dtoa_r+0x624>)
 800ffde:	f7f0 fae3 	bl	80005a8 <__aeabi_dmul>
 800ffe2:	4680      	mov	r8, r0
 800ffe4:	4689      	mov	r9, r1
 800ffe6:	e7bd      	b.n	800ff64 <_dtoa_r+0x594>
 800ffe8:	08013170 	.word	0x08013170
 800ffec:	08013148 	.word	0x08013148
 800fff0:	3ff00000 	.word	0x3ff00000
 800fff4:	40240000 	.word	0x40240000
 800fff8:	401c0000 	.word	0x401c0000
 800fffc:	40140000 	.word	0x40140000
 8010000:	3fe00000 	.word	0x3fe00000
 8010004:	9d01      	ldr	r5, [sp, #4]
 8010006:	4656      	mov	r6, sl
 8010008:	465f      	mov	r7, fp
 801000a:	4642      	mov	r2, r8
 801000c:	464b      	mov	r3, r9
 801000e:	4630      	mov	r0, r6
 8010010:	4639      	mov	r1, r7
 8010012:	f7f0 fbf3 	bl	80007fc <__aeabi_ddiv>
 8010016:	f7f0 fd77 	bl	8000b08 <__aeabi_d2iz>
 801001a:	4682      	mov	sl, r0
 801001c:	f7f0 fa5a 	bl	80004d4 <__aeabi_i2d>
 8010020:	4642      	mov	r2, r8
 8010022:	464b      	mov	r3, r9
 8010024:	f7f0 fac0 	bl	80005a8 <__aeabi_dmul>
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	4630      	mov	r0, r6
 801002e:	4639      	mov	r1, r7
 8010030:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010034:	f7f0 f900 	bl	8000238 <__aeabi_dsub>
 8010038:	f805 6b01 	strb.w	r6, [r5], #1
 801003c:	9e01      	ldr	r6, [sp, #4]
 801003e:	9f03      	ldr	r7, [sp, #12]
 8010040:	1bae      	subs	r6, r5, r6
 8010042:	42b7      	cmp	r7, r6
 8010044:	4602      	mov	r2, r0
 8010046:	460b      	mov	r3, r1
 8010048:	d135      	bne.n	80100b6 <_dtoa_r+0x6e6>
 801004a:	f7f0 f8f7 	bl	800023c <__adddf3>
 801004e:	4642      	mov	r2, r8
 8010050:	464b      	mov	r3, r9
 8010052:	4606      	mov	r6, r0
 8010054:	460f      	mov	r7, r1
 8010056:	f7f0 fd37 	bl	8000ac8 <__aeabi_dcmpgt>
 801005a:	b9d0      	cbnz	r0, 8010092 <_dtoa_r+0x6c2>
 801005c:	4642      	mov	r2, r8
 801005e:	464b      	mov	r3, r9
 8010060:	4630      	mov	r0, r6
 8010062:	4639      	mov	r1, r7
 8010064:	f7f0 fd08 	bl	8000a78 <__aeabi_dcmpeq>
 8010068:	b110      	cbz	r0, 8010070 <_dtoa_r+0x6a0>
 801006a:	f01a 0f01 	tst.w	sl, #1
 801006e:	d110      	bne.n	8010092 <_dtoa_r+0x6c2>
 8010070:	4620      	mov	r0, r4
 8010072:	ee18 1a10 	vmov	r1, s16
 8010076:	f000 fd05 	bl	8010a84 <_Bfree>
 801007a:	2300      	movs	r3, #0
 801007c:	9800      	ldr	r0, [sp, #0]
 801007e:	702b      	strb	r3, [r5, #0]
 8010080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010082:	3001      	adds	r0, #1
 8010084:	6018      	str	r0, [r3, #0]
 8010086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010088:	2b00      	cmp	r3, #0
 801008a:	f43f acf1 	beq.w	800fa70 <_dtoa_r+0xa0>
 801008e:	601d      	str	r5, [r3, #0]
 8010090:	e4ee      	b.n	800fa70 <_dtoa_r+0xa0>
 8010092:	9f00      	ldr	r7, [sp, #0]
 8010094:	462b      	mov	r3, r5
 8010096:	461d      	mov	r5, r3
 8010098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801009c:	2a39      	cmp	r2, #57	; 0x39
 801009e:	d106      	bne.n	80100ae <_dtoa_r+0x6de>
 80100a0:	9a01      	ldr	r2, [sp, #4]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d1f7      	bne.n	8010096 <_dtoa_r+0x6c6>
 80100a6:	9901      	ldr	r1, [sp, #4]
 80100a8:	2230      	movs	r2, #48	; 0x30
 80100aa:	3701      	adds	r7, #1
 80100ac:	700a      	strb	r2, [r1, #0]
 80100ae:	781a      	ldrb	r2, [r3, #0]
 80100b0:	3201      	adds	r2, #1
 80100b2:	701a      	strb	r2, [r3, #0]
 80100b4:	e790      	b.n	800ffd8 <_dtoa_r+0x608>
 80100b6:	4ba6      	ldr	r3, [pc, #664]	; (8010350 <_dtoa_r+0x980>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	f7f0 fa75 	bl	80005a8 <__aeabi_dmul>
 80100be:	2200      	movs	r2, #0
 80100c0:	2300      	movs	r3, #0
 80100c2:	4606      	mov	r6, r0
 80100c4:	460f      	mov	r7, r1
 80100c6:	f7f0 fcd7 	bl	8000a78 <__aeabi_dcmpeq>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d09d      	beq.n	801000a <_dtoa_r+0x63a>
 80100ce:	e7cf      	b.n	8010070 <_dtoa_r+0x6a0>
 80100d0:	9a08      	ldr	r2, [sp, #32]
 80100d2:	2a00      	cmp	r2, #0
 80100d4:	f000 80d7 	beq.w	8010286 <_dtoa_r+0x8b6>
 80100d8:	9a06      	ldr	r2, [sp, #24]
 80100da:	2a01      	cmp	r2, #1
 80100dc:	f300 80ba 	bgt.w	8010254 <_dtoa_r+0x884>
 80100e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100e2:	2a00      	cmp	r2, #0
 80100e4:	f000 80b2 	beq.w	801024c <_dtoa_r+0x87c>
 80100e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80100ec:	9e07      	ldr	r6, [sp, #28]
 80100ee:	9d04      	ldr	r5, [sp, #16]
 80100f0:	9a04      	ldr	r2, [sp, #16]
 80100f2:	441a      	add	r2, r3
 80100f4:	9204      	str	r2, [sp, #16]
 80100f6:	9a05      	ldr	r2, [sp, #20]
 80100f8:	2101      	movs	r1, #1
 80100fa:	441a      	add	r2, r3
 80100fc:	4620      	mov	r0, r4
 80100fe:	9205      	str	r2, [sp, #20]
 8010100:	f000 fd78 	bl	8010bf4 <__i2b>
 8010104:	4607      	mov	r7, r0
 8010106:	2d00      	cmp	r5, #0
 8010108:	dd0c      	ble.n	8010124 <_dtoa_r+0x754>
 801010a:	9b05      	ldr	r3, [sp, #20]
 801010c:	2b00      	cmp	r3, #0
 801010e:	dd09      	ble.n	8010124 <_dtoa_r+0x754>
 8010110:	42ab      	cmp	r3, r5
 8010112:	9a04      	ldr	r2, [sp, #16]
 8010114:	bfa8      	it	ge
 8010116:	462b      	movge	r3, r5
 8010118:	1ad2      	subs	r2, r2, r3
 801011a:	9204      	str	r2, [sp, #16]
 801011c:	9a05      	ldr	r2, [sp, #20]
 801011e:	1aed      	subs	r5, r5, r3
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	9305      	str	r3, [sp, #20]
 8010124:	9b07      	ldr	r3, [sp, #28]
 8010126:	b31b      	cbz	r3, 8010170 <_dtoa_r+0x7a0>
 8010128:	9b08      	ldr	r3, [sp, #32]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f000 80af 	beq.w	801028e <_dtoa_r+0x8be>
 8010130:	2e00      	cmp	r6, #0
 8010132:	dd13      	ble.n	801015c <_dtoa_r+0x78c>
 8010134:	4639      	mov	r1, r7
 8010136:	4632      	mov	r2, r6
 8010138:	4620      	mov	r0, r4
 801013a:	f000 fe1b 	bl	8010d74 <__pow5mult>
 801013e:	ee18 2a10 	vmov	r2, s16
 8010142:	4601      	mov	r1, r0
 8010144:	4607      	mov	r7, r0
 8010146:	4620      	mov	r0, r4
 8010148:	f000 fd6a 	bl	8010c20 <__multiply>
 801014c:	ee18 1a10 	vmov	r1, s16
 8010150:	4680      	mov	r8, r0
 8010152:	4620      	mov	r0, r4
 8010154:	f000 fc96 	bl	8010a84 <_Bfree>
 8010158:	ee08 8a10 	vmov	s16, r8
 801015c:	9b07      	ldr	r3, [sp, #28]
 801015e:	1b9a      	subs	r2, r3, r6
 8010160:	d006      	beq.n	8010170 <_dtoa_r+0x7a0>
 8010162:	ee18 1a10 	vmov	r1, s16
 8010166:	4620      	mov	r0, r4
 8010168:	f000 fe04 	bl	8010d74 <__pow5mult>
 801016c:	ee08 0a10 	vmov	s16, r0
 8010170:	2101      	movs	r1, #1
 8010172:	4620      	mov	r0, r4
 8010174:	f000 fd3e 	bl	8010bf4 <__i2b>
 8010178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801017a:	2b00      	cmp	r3, #0
 801017c:	4606      	mov	r6, r0
 801017e:	f340 8088 	ble.w	8010292 <_dtoa_r+0x8c2>
 8010182:	461a      	mov	r2, r3
 8010184:	4601      	mov	r1, r0
 8010186:	4620      	mov	r0, r4
 8010188:	f000 fdf4 	bl	8010d74 <__pow5mult>
 801018c:	9b06      	ldr	r3, [sp, #24]
 801018e:	2b01      	cmp	r3, #1
 8010190:	4606      	mov	r6, r0
 8010192:	f340 8081 	ble.w	8010298 <_dtoa_r+0x8c8>
 8010196:	f04f 0800 	mov.w	r8, #0
 801019a:	6933      	ldr	r3, [r6, #16]
 801019c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80101a0:	6918      	ldr	r0, [r3, #16]
 80101a2:	f000 fcd7 	bl	8010b54 <__hi0bits>
 80101a6:	f1c0 0020 	rsb	r0, r0, #32
 80101aa:	9b05      	ldr	r3, [sp, #20]
 80101ac:	4418      	add	r0, r3
 80101ae:	f010 001f 	ands.w	r0, r0, #31
 80101b2:	f000 8092 	beq.w	80102da <_dtoa_r+0x90a>
 80101b6:	f1c0 0320 	rsb	r3, r0, #32
 80101ba:	2b04      	cmp	r3, #4
 80101bc:	f340 808a 	ble.w	80102d4 <_dtoa_r+0x904>
 80101c0:	f1c0 001c 	rsb	r0, r0, #28
 80101c4:	9b04      	ldr	r3, [sp, #16]
 80101c6:	4403      	add	r3, r0
 80101c8:	9304      	str	r3, [sp, #16]
 80101ca:	9b05      	ldr	r3, [sp, #20]
 80101cc:	4403      	add	r3, r0
 80101ce:	4405      	add	r5, r0
 80101d0:	9305      	str	r3, [sp, #20]
 80101d2:	9b04      	ldr	r3, [sp, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	dd07      	ble.n	80101e8 <_dtoa_r+0x818>
 80101d8:	ee18 1a10 	vmov	r1, s16
 80101dc:	461a      	mov	r2, r3
 80101de:	4620      	mov	r0, r4
 80101e0:	f000 fe22 	bl	8010e28 <__lshift>
 80101e4:	ee08 0a10 	vmov	s16, r0
 80101e8:	9b05      	ldr	r3, [sp, #20]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	dd05      	ble.n	80101fa <_dtoa_r+0x82a>
 80101ee:	4631      	mov	r1, r6
 80101f0:	461a      	mov	r2, r3
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 fe18 	bl	8010e28 <__lshift>
 80101f8:	4606      	mov	r6, r0
 80101fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d06e      	beq.n	80102de <_dtoa_r+0x90e>
 8010200:	ee18 0a10 	vmov	r0, s16
 8010204:	4631      	mov	r1, r6
 8010206:	f000 fe7f 	bl	8010f08 <__mcmp>
 801020a:	2800      	cmp	r0, #0
 801020c:	da67      	bge.n	80102de <_dtoa_r+0x90e>
 801020e:	9b00      	ldr	r3, [sp, #0]
 8010210:	3b01      	subs	r3, #1
 8010212:	ee18 1a10 	vmov	r1, s16
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	220a      	movs	r2, #10
 801021a:	2300      	movs	r3, #0
 801021c:	4620      	mov	r0, r4
 801021e:	f000 fc53 	bl	8010ac8 <__multadd>
 8010222:	9b08      	ldr	r3, [sp, #32]
 8010224:	ee08 0a10 	vmov	s16, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 81b1 	beq.w	8010590 <_dtoa_r+0xbc0>
 801022e:	2300      	movs	r3, #0
 8010230:	4639      	mov	r1, r7
 8010232:	220a      	movs	r2, #10
 8010234:	4620      	mov	r0, r4
 8010236:	f000 fc47 	bl	8010ac8 <__multadd>
 801023a:	9b02      	ldr	r3, [sp, #8]
 801023c:	2b00      	cmp	r3, #0
 801023e:	4607      	mov	r7, r0
 8010240:	f300 808e 	bgt.w	8010360 <_dtoa_r+0x990>
 8010244:	9b06      	ldr	r3, [sp, #24]
 8010246:	2b02      	cmp	r3, #2
 8010248:	dc51      	bgt.n	80102ee <_dtoa_r+0x91e>
 801024a:	e089      	b.n	8010360 <_dtoa_r+0x990>
 801024c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801024e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010252:	e74b      	b.n	80100ec <_dtoa_r+0x71c>
 8010254:	9b03      	ldr	r3, [sp, #12]
 8010256:	1e5e      	subs	r6, r3, #1
 8010258:	9b07      	ldr	r3, [sp, #28]
 801025a:	42b3      	cmp	r3, r6
 801025c:	bfbf      	itttt	lt
 801025e:	9b07      	ldrlt	r3, [sp, #28]
 8010260:	9607      	strlt	r6, [sp, #28]
 8010262:	1af2      	sublt	r2, r6, r3
 8010264:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010266:	bfb6      	itet	lt
 8010268:	189b      	addlt	r3, r3, r2
 801026a:	1b9e      	subge	r6, r3, r6
 801026c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801026e:	9b03      	ldr	r3, [sp, #12]
 8010270:	bfb8      	it	lt
 8010272:	2600      	movlt	r6, #0
 8010274:	2b00      	cmp	r3, #0
 8010276:	bfb7      	itett	lt
 8010278:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801027c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010280:	1a9d      	sublt	r5, r3, r2
 8010282:	2300      	movlt	r3, #0
 8010284:	e734      	b.n	80100f0 <_dtoa_r+0x720>
 8010286:	9e07      	ldr	r6, [sp, #28]
 8010288:	9d04      	ldr	r5, [sp, #16]
 801028a:	9f08      	ldr	r7, [sp, #32]
 801028c:	e73b      	b.n	8010106 <_dtoa_r+0x736>
 801028e:	9a07      	ldr	r2, [sp, #28]
 8010290:	e767      	b.n	8010162 <_dtoa_r+0x792>
 8010292:	9b06      	ldr	r3, [sp, #24]
 8010294:	2b01      	cmp	r3, #1
 8010296:	dc18      	bgt.n	80102ca <_dtoa_r+0x8fa>
 8010298:	f1ba 0f00 	cmp.w	sl, #0
 801029c:	d115      	bne.n	80102ca <_dtoa_r+0x8fa>
 801029e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102a2:	b993      	cbnz	r3, 80102ca <_dtoa_r+0x8fa>
 80102a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102a8:	0d1b      	lsrs	r3, r3, #20
 80102aa:	051b      	lsls	r3, r3, #20
 80102ac:	b183      	cbz	r3, 80102d0 <_dtoa_r+0x900>
 80102ae:	9b04      	ldr	r3, [sp, #16]
 80102b0:	3301      	adds	r3, #1
 80102b2:	9304      	str	r3, [sp, #16]
 80102b4:	9b05      	ldr	r3, [sp, #20]
 80102b6:	3301      	adds	r3, #1
 80102b8:	9305      	str	r3, [sp, #20]
 80102ba:	f04f 0801 	mov.w	r8, #1
 80102be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	f47f af6a 	bne.w	801019a <_dtoa_r+0x7ca>
 80102c6:	2001      	movs	r0, #1
 80102c8:	e76f      	b.n	80101aa <_dtoa_r+0x7da>
 80102ca:	f04f 0800 	mov.w	r8, #0
 80102ce:	e7f6      	b.n	80102be <_dtoa_r+0x8ee>
 80102d0:	4698      	mov	r8, r3
 80102d2:	e7f4      	b.n	80102be <_dtoa_r+0x8ee>
 80102d4:	f43f af7d 	beq.w	80101d2 <_dtoa_r+0x802>
 80102d8:	4618      	mov	r0, r3
 80102da:	301c      	adds	r0, #28
 80102dc:	e772      	b.n	80101c4 <_dtoa_r+0x7f4>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	dc37      	bgt.n	8010354 <_dtoa_r+0x984>
 80102e4:	9b06      	ldr	r3, [sp, #24]
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	dd34      	ble.n	8010354 <_dtoa_r+0x984>
 80102ea:	9b03      	ldr	r3, [sp, #12]
 80102ec:	9302      	str	r3, [sp, #8]
 80102ee:	9b02      	ldr	r3, [sp, #8]
 80102f0:	b96b      	cbnz	r3, 801030e <_dtoa_r+0x93e>
 80102f2:	4631      	mov	r1, r6
 80102f4:	2205      	movs	r2, #5
 80102f6:	4620      	mov	r0, r4
 80102f8:	f000 fbe6 	bl	8010ac8 <__multadd>
 80102fc:	4601      	mov	r1, r0
 80102fe:	4606      	mov	r6, r0
 8010300:	ee18 0a10 	vmov	r0, s16
 8010304:	f000 fe00 	bl	8010f08 <__mcmp>
 8010308:	2800      	cmp	r0, #0
 801030a:	f73f adbb 	bgt.w	800fe84 <_dtoa_r+0x4b4>
 801030e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010310:	9d01      	ldr	r5, [sp, #4]
 8010312:	43db      	mvns	r3, r3
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	f04f 0800 	mov.w	r8, #0
 801031a:	4631      	mov	r1, r6
 801031c:	4620      	mov	r0, r4
 801031e:	f000 fbb1 	bl	8010a84 <_Bfree>
 8010322:	2f00      	cmp	r7, #0
 8010324:	f43f aea4 	beq.w	8010070 <_dtoa_r+0x6a0>
 8010328:	f1b8 0f00 	cmp.w	r8, #0
 801032c:	d005      	beq.n	801033a <_dtoa_r+0x96a>
 801032e:	45b8      	cmp	r8, r7
 8010330:	d003      	beq.n	801033a <_dtoa_r+0x96a>
 8010332:	4641      	mov	r1, r8
 8010334:	4620      	mov	r0, r4
 8010336:	f000 fba5 	bl	8010a84 <_Bfree>
 801033a:	4639      	mov	r1, r7
 801033c:	4620      	mov	r0, r4
 801033e:	f000 fba1 	bl	8010a84 <_Bfree>
 8010342:	e695      	b.n	8010070 <_dtoa_r+0x6a0>
 8010344:	2600      	movs	r6, #0
 8010346:	4637      	mov	r7, r6
 8010348:	e7e1      	b.n	801030e <_dtoa_r+0x93e>
 801034a:	9700      	str	r7, [sp, #0]
 801034c:	4637      	mov	r7, r6
 801034e:	e599      	b.n	800fe84 <_dtoa_r+0x4b4>
 8010350:	40240000 	.word	0x40240000
 8010354:	9b08      	ldr	r3, [sp, #32]
 8010356:	2b00      	cmp	r3, #0
 8010358:	f000 80ca 	beq.w	80104f0 <_dtoa_r+0xb20>
 801035c:	9b03      	ldr	r3, [sp, #12]
 801035e:	9302      	str	r3, [sp, #8]
 8010360:	2d00      	cmp	r5, #0
 8010362:	dd05      	ble.n	8010370 <_dtoa_r+0x9a0>
 8010364:	4639      	mov	r1, r7
 8010366:	462a      	mov	r2, r5
 8010368:	4620      	mov	r0, r4
 801036a:	f000 fd5d 	bl	8010e28 <__lshift>
 801036e:	4607      	mov	r7, r0
 8010370:	f1b8 0f00 	cmp.w	r8, #0
 8010374:	d05b      	beq.n	801042e <_dtoa_r+0xa5e>
 8010376:	6879      	ldr	r1, [r7, #4]
 8010378:	4620      	mov	r0, r4
 801037a:	f000 fb43 	bl	8010a04 <_Balloc>
 801037e:	4605      	mov	r5, r0
 8010380:	b928      	cbnz	r0, 801038e <_dtoa_r+0x9be>
 8010382:	4b87      	ldr	r3, [pc, #540]	; (80105a0 <_dtoa_r+0xbd0>)
 8010384:	4602      	mov	r2, r0
 8010386:	f240 21ea 	movw	r1, #746	; 0x2ea
 801038a:	f7ff bb3b 	b.w	800fa04 <_dtoa_r+0x34>
 801038e:	693a      	ldr	r2, [r7, #16]
 8010390:	3202      	adds	r2, #2
 8010392:	0092      	lsls	r2, r2, #2
 8010394:	f107 010c 	add.w	r1, r7, #12
 8010398:	300c      	adds	r0, #12
 801039a:	f7fe fca7 	bl	800ecec <memcpy>
 801039e:	2201      	movs	r2, #1
 80103a0:	4629      	mov	r1, r5
 80103a2:	4620      	mov	r0, r4
 80103a4:	f000 fd40 	bl	8010e28 <__lshift>
 80103a8:	9b01      	ldr	r3, [sp, #4]
 80103aa:	f103 0901 	add.w	r9, r3, #1
 80103ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80103b2:	4413      	add	r3, r2
 80103b4:	9305      	str	r3, [sp, #20]
 80103b6:	f00a 0301 	and.w	r3, sl, #1
 80103ba:	46b8      	mov	r8, r7
 80103bc:	9304      	str	r3, [sp, #16]
 80103be:	4607      	mov	r7, r0
 80103c0:	4631      	mov	r1, r6
 80103c2:	ee18 0a10 	vmov	r0, s16
 80103c6:	f7ff fa75 	bl	800f8b4 <quorem>
 80103ca:	4641      	mov	r1, r8
 80103cc:	9002      	str	r0, [sp, #8]
 80103ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80103d2:	ee18 0a10 	vmov	r0, s16
 80103d6:	f000 fd97 	bl	8010f08 <__mcmp>
 80103da:	463a      	mov	r2, r7
 80103dc:	9003      	str	r0, [sp, #12]
 80103de:	4631      	mov	r1, r6
 80103e0:	4620      	mov	r0, r4
 80103e2:	f000 fdad 	bl	8010f40 <__mdiff>
 80103e6:	68c2      	ldr	r2, [r0, #12]
 80103e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80103ec:	4605      	mov	r5, r0
 80103ee:	bb02      	cbnz	r2, 8010432 <_dtoa_r+0xa62>
 80103f0:	4601      	mov	r1, r0
 80103f2:	ee18 0a10 	vmov	r0, s16
 80103f6:	f000 fd87 	bl	8010f08 <__mcmp>
 80103fa:	4602      	mov	r2, r0
 80103fc:	4629      	mov	r1, r5
 80103fe:	4620      	mov	r0, r4
 8010400:	9207      	str	r2, [sp, #28]
 8010402:	f000 fb3f 	bl	8010a84 <_Bfree>
 8010406:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801040a:	ea43 0102 	orr.w	r1, r3, r2
 801040e:	9b04      	ldr	r3, [sp, #16]
 8010410:	430b      	orrs	r3, r1
 8010412:	464d      	mov	r5, r9
 8010414:	d10f      	bne.n	8010436 <_dtoa_r+0xa66>
 8010416:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801041a:	d02a      	beq.n	8010472 <_dtoa_r+0xaa2>
 801041c:	9b03      	ldr	r3, [sp, #12]
 801041e:	2b00      	cmp	r3, #0
 8010420:	dd02      	ble.n	8010428 <_dtoa_r+0xa58>
 8010422:	9b02      	ldr	r3, [sp, #8]
 8010424:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010428:	f88b a000 	strb.w	sl, [fp]
 801042c:	e775      	b.n	801031a <_dtoa_r+0x94a>
 801042e:	4638      	mov	r0, r7
 8010430:	e7ba      	b.n	80103a8 <_dtoa_r+0x9d8>
 8010432:	2201      	movs	r2, #1
 8010434:	e7e2      	b.n	80103fc <_dtoa_r+0xa2c>
 8010436:	9b03      	ldr	r3, [sp, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	db04      	blt.n	8010446 <_dtoa_r+0xa76>
 801043c:	9906      	ldr	r1, [sp, #24]
 801043e:	430b      	orrs	r3, r1
 8010440:	9904      	ldr	r1, [sp, #16]
 8010442:	430b      	orrs	r3, r1
 8010444:	d122      	bne.n	801048c <_dtoa_r+0xabc>
 8010446:	2a00      	cmp	r2, #0
 8010448:	ddee      	ble.n	8010428 <_dtoa_r+0xa58>
 801044a:	ee18 1a10 	vmov	r1, s16
 801044e:	2201      	movs	r2, #1
 8010450:	4620      	mov	r0, r4
 8010452:	f000 fce9 	bl	8010e28 <__lshift>
 8010456:	4631      	mov	r1, r6
 8010458:	ee08 0a10 	vmov	s16, r0
 801045c:	f000 fd54 	bl	8010f08 <__mcmp>
 8010460:	2800      	cmp	r0, #0
 8010462:	dc03      	bgt.n	801046c <_dtoa_r+0xa9c>
 8010464:	d1e0      	bne.n	8010428 <_dtoa_r+0xa58>
 8010466:	f01a 0f01 	tst.w	sl, #1
 801046a:	d0dd      	beq.n	8010428 <_dtoa_r+0xa58>
 801046c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010470:	d1d7      	bne.n	8010422 <_dtoa_r+0xa52>
 8010472:	2339      	movs	r3, #57	; 0x39
 8010474:	f88b 3000 	strb.w	r3, [fp]
 8010478:	462b      	mov	r3, r5
 801047a:	461d      	mov	r5, r3
 801047c:	3b01      	subs	r3, #1
 801047e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010482:	2a39      	cmp	r2, #57	; 0x39
 8010484:	d071      	beq.n	801056a <_dtoa_r+0xb9a>
 8010486:	3201      	adds	r2, #1
 8010488:	701a      	strb	r2, [r3, #0]
 801048a:	e746      	b.n	801031a <_dtoa_r+0x94a>
 801048c:	2a00      	cmp	r2, #0
 801048e:	dd07      	ble.n	80104a0 <_dtoa_r+0xad0>
 8010490:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010494:	d0ed      	beq.n	8010472 <_dtoa_r+0xaa2>
 8010496:	f10a 0301 	add.w	r3, sl, #1
 801049a:	f88b 3000 	strb.w	r3, [fp]
 801049e:	e73c      	b.n	801031a <_dtoa_r+0x94a>
 80104a0:	9b05      	ldr	r3, [sp, #20]
 80104a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80104a6:	4599      	cmp	r9, r3
 80104a8:	d047      	beq.n	801053a <_dtoa_r+0xb6a>
 80104aa:	ee18 1a10 	vmov	r1, s16
 80104ae:	2300      	movs	r3, #0
 80104b0:	220a      	movs	r2, #10
 80104b2:	4620      	mov	r0, r4
 80104b4:	f000 fb08 	bl	8010ac8 <__multadd>
 80104b8:	45b8      	cmp	r8, r7
 80104ba:	ee08 0a10 	vmov	s16, r0
 80104be:	f04f 0300 	mov.w	r3, #0
 80104c2:	f04f 020a 	mov.w	r2, #10
 80104c6:	4641      	mov	r1, r8
 80104c8:	4620      	mov	r0, r4
 80104ca:	d106      	bne.n	80104da <_dtoa_r+0xb0a>
 80104cc:	f000 fafc 	bl	8010ac8 <__multadd>
 80104d0:	4680      	mov	r8, r0
 80104d2:	4607      	mov	r7, r0
 80104d4:	f109 0901 	add.w	r9, r9, #1
 80104d8:	e772      	b.n	80103c0 <_dtoa_r+0x9f0>
 80104da:	f000 faf5 	bl	8010ac8 <__multadd>
 80104de:	4639      	mov	r1, r7
 80104e0:	4680      	mov	r8, r0
 80104e2:	2300      	movs	r3, #0
 80104e4:	220a      	movs	r2, #10
 80104e6:	4620      	mov	r0, r4
 80104e8:	f000 faee 	bl	8010ac8 <__multadd>
 80104ec:	4607      	mov	r7, r0
 80104ee:	e7f1      	b.n	80104d4 <_dtoa_r+0xb04>
 80104f0:	9b03      	ldr	r3, [sp, #12]
 80104f2:	9302      	str	r3, [sp, #8]
 80104f4:	9d01      	ldr	r5, [sp, #4]
 80104f6:	ee18 0a10 	vmov	r0, s16
 80104fa:	4631      	mov	r1, r6
 80104fc:	f7ff f9da 	bl	800f8b4 <quorem>
 8010500:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010504:	9b01      	ldr	r3, [sp, #4]
 8010506:	f805 ab01 	strb.w	sl, [r5], #1
 801050a:	1aea      	subs	r2, r5, r3
 801050c:	9b02      	ldr	r3, [sp, #8]
 801050e:	4293      	cmp	r3, r2
 8010510:	dd09      	ble.n	8010526 <_dtoa_r+0xb56>
 8010512:	ee18 1a10 	vmov	r1, s16
 8010516:	2300      	movs	r3, #0
 8010518:	220a      	movs	r2, #10
 801051a:	4620      	mov	r0, r4
 801051c:	f000 fad4 	bl	8010ac8 <__multadd>
 8010520:	ee08 0a10 	vmov	s16, r0
 8010524:	e7e7      	b.n	80104f6 <_dtoa_r+0xb26>
 8010526:	9b02      	ldr	r3, [sp, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	bfc8      	it	gt
 801052c:	461d      	movgt	r5, r3
 801052e:	9b01      	ldr	r3, [sp, #4]
 8010530:	bfd8      	it	le
 8010532:	2501      	movle	r5, #1
 8010534:	441d      	add	r5, r3
 8010536:	f04f 0800 	mov.w	r8, #0
 801053a:	ee18 1a10 	vmov	r1, s16
 801053e:	2201      	movs	r2, #1
 8010540:	4620      	mov	r0, r4
 8010542:	f000 fc71 	bl	8010e28 <__lshift>
 8010546:	4631      	mov	r1, r6
 8010548:	ee08 0a10 	vmov	s16, r0
 801054c:	f000 fcdc 	bl	8010f08 <__mcmp>
 8010550:	2800      	cmp	r0, #0
 8010552:	dc91      	bgt.n	8010478 <_dtoa_r+0xaa8>
 8010554:	d102      	bne.n	801055c <_dtoa_r+0xb8c>
 8010556:	f01a 0f01 	tst.w	sl, #1
 801055a:	d18d      	bne.n	8010478 <_dtoa_r+0xaa8>
 801055c:	462b      	mov	r3, r5
 801055e:	461d      	mov	r5, r3
 8010560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010564:	2a30      	cmp	r2, #48	; 0x30
 8010566:	d0fa      	beq.n	801055e <_dtoa_r+0xb8e>
 8010568:	e6d7      	b.n	801031a <_dtoa_r+0x94a>
 801056a:	9a01      	ldr	r2, [sp, #4]
 801056c:	429a      	cmp	r2, r3
 801056e:	d184      	bne.n	801047a <_dtoa_r+0xaaa>
 8010570:	9b00      	ldr	r3, [sp, #0]
 8010572:	3301      	adds	r3, #1
 8010574:	9300      	str	r3, [sp, #0]
 8010576:	2331      	movs	r3, #49	; 0x31
 8010578:	7013      	strb	r3, [r2, #0]
 801057a:	e6ce      	b.n	801031a <_dtoa_r+0x94a>
 801057c:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <_dtoa_r+0xbd4>)
 801057e:	f7ff ba95 	b.w	800faac <_dtoa_r+0xdc>
 8010582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010584:	2b00      	cmp	r3, #0
 8010586:	f47f aa6e 	bne.w	800fa66 <_dtoa_r+0x96>
 801058a:	4b07      	ldr	r3, [pc, #28]	; (80105a8 <_dtoa_r+0xbd8>)
 801058c:	f7ff ba8e 	b.w	800faac <_dtoa_r+0xdc>
 8010590:	9b02      	ldr	r3, [sp, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	dcae      	bgt.n	80104f4 <_dtoa_r+0xb24>
 8010596:	9b06      	ldr	r3, [sp, #24]
 8010598:	2b02      	cmp	r3, #2
 801059a:	f73f aea8 	bgt.w	80102ee <_dtoa_r+0x91e>
 801059e:	e7a9      	b.n	80104f4 <_dtoa_r+0xb24>
 80105a0:	0801307b 	.word	0x0801307b
 80105a4:	08012fd8 	.word	0x08012fd8
 80105a8:	08012ffc 	.word	0x08012ffc

080105ac <__sflush_r>:
 80105ac:	898a      	ldrh	r2, [r1, #12]
 80105ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105b2:	4605      	mov	r5, r0
 80105b4:	0710      	lsls	r0, r2, #28
 80105b6:	460c      	mov	r4, r1
 80105b8:	d458      	bmi.n	801066c <__sflush_r+0xc0>
 80105ba:	684b      	ldr	r3, [r1, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	dc05      	bgt.n	80105cc <__sflush_r+0x20>
 80105c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dc02      	bgt.n	80105cc <__sflush_r+0x20>
 80105c6:	2000      	movs	r0, #0
 80105c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105ce:	2e00      	cmp	r6, #0
 80105d0:	d0f9      	beq.n	80105c6 <__sflush_r+0x1a>
 80105d2:	2300      	movs	r3, #0
 80105d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105d8:	682f      	ldr	r7, [r5, #0]
 80105da:	602b      	str	r3, [r5, #0]
 80105dc:	d032      	beq.n	8010644 <__sflush_r+0x98>
 80105de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	075a      	lsls	r2, r3, #29
 80105e4:	d505      	bpl.n	80105f2 <__sflush_r+0x46>
 80105e6:	6863      	ldr	r3, [r4, #4]
 80105e8:	1ac0      	subs	r0, r0, r3
 80105ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105ec:	b10b      	cbz	r3, 80105f2 <__sflush_r+0x46>
 80105ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105f0:	1ac0      	subs	r0, r0, r3
 80105f2:	2300      	movs	r3, #0
 80105f4:	4602      	mov	r2, r0
 80105f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105f8:	6a21      	ldr	r1, [r4, #32]
 80105fa:	4628      	mov	r0, r5
 80105fc:	47b0      	blx	r6
 80105fe:	1c43      	adds	r3, r0, #1
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	d106      	bne.n	8010612 <__sflush_r+0x66>
 8010604:	6829      	ldr	r1, [r5, #0]
 8010606:	291d      	cmp	r1, #29
 8010608:	d82c      	bhi.n	8010664 <__sflush_r+0xb8>
 801060a:	4a2a      	ldr	r2, [pc, #168]	; (80106b4 <__sflush_r+0x108>)
 801060c:	40ca      	lsrs	r2, r1
 801060e:	07d6      	lsls	r6, r2, #31
 8010610:	d528      	bpl.n	8010664 <__sflush_r+0xb8>
 8010612:	2200      	movs	r2, #0
 8010614:	6062      	str	r2, [r4, #4]
 8010616:	04d9      	lsls	r1, r3, #19
 8010618:	6922      	ldr	r2, [r4, #16]
 801061a:	6022      	str	r2, [r4, #0]
 801061c:	d504      	bpl.n	8010628 <__sflush_r+0x7c>
 801061e:	1c42      	adds	r2, r0, #1
 8010620:	d101      	bne.n	8010626 <__sflush_r+0x7a>
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	b903      	cbnz	r3, 8010628 <__sflush_r+0x7c>
 8010626:	6560      	str	r0, [r4, #84]	; 0x54
 8010628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801062a:	602f      	str	r7, [r5, #0]
 801062c:	2900      	cmp	r1, #0
 801062e:	d0ca      	beq.n	80105c6 <__sflush_r+0x1a>
 8010630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010634:	4299      	cmp	r1, r3
 8010636:	d002      	beq.n	801063e <__sflush_r+0x92>
 8010638:	4628      	mov	r0, r5
 801063a:	f000 fd7d 	bl	8011138 <_free_r>
 801063e:	2000      	movs	r0, #0
 8010640:	6360      	str	r0, [r4, #52]	; 0x34
 8010642:	e7c1      	b.n	80105c8 <__sflush_r+0x1c>
 8010644:	6a21      	ldr	r1, [r4, #32]
 8010646:	2301      	movs	r3, #1
 8010648:	4628      	mov	r0, r5
 801064a:	47b0      	blx	r6
 801064c:	1c41      	adds	r1, r0, #1
 801064e:	d1c7      	bne.n	80105e0 <__sflush_r+0x34>
 8010650:	682b      	ldr	r3, [r5, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d0c4      	beq.n	80105e0 <__sflush_r+0x34>
 8010656:	2b1d      	cmp	r3, #29
 8010658:	d001      	beq.n	801065e <__sflush_r+0xb2>
 801065a:	2b16      	cmp	r3, #22
 801065c:	d101      	bne.n	8010662 <__sflush_r+0xb6>
 801065e:	602f      	str	r7, [r5, #0]
 8010660:	e7b1      	b.n	80105c6 <__sflush_r+0x1a>
 8010662:	89a3      	ldrh	r3, [r4, #12]
 8010664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010668:	81a3      	strh	r3, [r4, #12]
 801066a:	e7ad      	b.n	80105c8 <__sflush_r+0x1c>
 801066c:	690f      	ldr	r7, [r1, #16]
 801066e:	2f00      	cmp	r7, #0
 8010670:	d0a9      	beq.n	80105c6 <__sflush_r+0x1a>
 8010672:	0793      	lsls	r3, r2, #30
 8010674:	680e      	ldr	r6, [r1, #0]
 8010676:	bf08      	it	eq
 8010678:	694b      	ldreq	r3, [r1, #20]
 801067a:	600f      	str	r7, [r1, #0]
 801067c:	bf18      	it	ne
 801067e:	2300      	movne	r3, #0
 8010680:	eba6 0807 	sub.w	r8, r6, r7
 8010684:	608b      	str	r3, [r1, #8]
 8010686:	f1b8 0f00 	cmp.w	r8, #0
 801068a:	dd9c      	ble.n	80105c6 <__sflush_r+0x1a>
 801068c:	6a21      	ldr	r1, [r4, #32]
 801068e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010690:	4643      	mov	r3, r8
 8010692:	463a      	mov	r2, r7
 8010694:	4628      	mov	r0, r5
 8010696:	47b0      	blx	r6
 8010698:	2800      	cmp	r0, #0
 801069a:	dc06      	bgt.n	80106aa <__sflush_r+0xfe>
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106a8:	e78e      	b.n	80105c8 <__sflush_r+0x1c>
 80106aa:	4407      	add	r7, r0
 80106ac:	eba8 0800 	sub.w	r8, r8, r0
 80106b0:	e7e9      	b.n	8010686 <__sflush_r+0xda>
 80106b2:	bf00      	nop
 80106b4:	20400001 	.word	0x20400001

080106b8 <_fflush_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	690b      	ldr	r3, [r1, #16]
 80106bc:	4605      	mov	r5, r0
 80106be:	460c      	mov	r4, r1
 80106c0:	b913      	cbnz	r3, 80106c8 <_fflush_r+0x10>
 80106c2:	2500      	movs	r5, #0
 80106c4:	4628      	mov	r0, r5
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	b118      	cbz	r0, 80106d2 <_fflush_r+0x1a>
 80106ca:	6983      	ldr	r3, [r0, #24]
 80106cc:	b90b      	cbnz	r3, 80106d2 <_fflush_r+0x1a>
 80106ce:	f000 f887 	bl	80107e0 <__sinit>
 80106d2:	4b14      	ldr	r3, [pc, #80]	; (8010724 <_fflush_r+0x6c>)
 80106d4:	429c      	cmp	r4, r3
 80106d6:	d11b      	bne.n	8010710 <_fflush_r+0x58>
 80106d8:	686c      	ldr	r4, [r5, #4]
 80106da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d0ef      	beq.n	80106c2 <_fflush_r+0xa>
 80106e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106e4:	07d0      	lsls	r0, r2, #31
 80106e6:	d404      	bmi.n	80106f2 <_fflush_r+0x3a>
 80106e8:	0599      	lsls	r1, r3, #22
 80106ea:	d402      	bmi.n	80106f2 <_fflush_r+0x3a>
 80106ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106ee:	f000 f91a 	bl	8010926 <__retarget_lock_acquire_recursive>
 80106f2:	4628      	mov	r0, r5
 80106f4:	4621      	mov	r1, r4
 80106f6:	f7ff ff59 	bl	80105ac <__sflush_r>
 80106fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106fc:	07da      	lsls	r2, r3, #31
 80106fe:	4605      	mov	r5, r0
 8010700:	d4e0      	bmi.n	80106c4 <_fflush_r+0xc>
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	059b      	lsls	r3, r3, #22
 8010706:	d4dd      	bmi.n	80106c4 <_fflush_r+0xc>
 8010708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801070a:	f000 f90d 	bl	8010928 <__retarget_lock_release_recursive>
 801070e:	e7d9      	b.n	80106c4 <_fflush_r+0xc>
 8010710:	4b05      	ldr	r3, [pc, #20]	; (8010728 <_fflush_r+0x70>)
 8010712:	429c      	cmp	r4, r3
 8010714:	d101      	bne.n	801071a <_fflush_r+0x62>
 8010716:	68ac      	ldr	r4, [r5, #8]
 8010718:	e7df      	b.n	80106da <_fflush_r+0x22>
 801071a:	4b04      	ldr	r3, [pc, #16]	; (801072c <_fflush_r+0x74>)
 801071c:	429c      	cmp	r4, r3
 801071e:	bf08      	it	eq
 8010720:	68ec      	ldreq	r4, [r5, #12]
 8010722:	e7da      	b.n	80106da <_fflush_r+0x22>
 8010724:	080130ac 	.word	0x080130ac
 8010728:	080130cc 	.word	0x080130cc
 801072c:	0801308c 	.word	0x0801308c

08010730 <std>:
 8010730:	2300      	movs	r3, #0
 8010732:	b510      	push	{r4, lr}
 8010734:	4604      	mov	r4, r0
 8010736:	e9c0 3300 	strd	r3, r3, [r0]
 801073a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801073e:	6083      	str	r3, [r0, #8]
 8010740:	8181      	strh	r1, [r0, #12]
 8010742:	6643      	str	r3, [r0, #100]	; 0x64
 8010744:	81c2      	strh	r2, [r0, #14]
 8010746:	6183      	str	r3, [r0, #24]
 8010748:	4619      	mov	r1, r3
 801074a:	2208      	movs	r2, #8
 801074c:	305c      	adds	r0, #92	; 0x5c
 801074e:	f7fe fadb 	bl	800ed08 <memset>
 8010752:	4b05      	ldr	r3, [pc, #20]	; (8010768 <std+0x38>)
 8010754:	6263      	str	r3, [r4, #36]	; 0x24
 8010756:	4b05      	ldr	r3, [pc, #20]	; (801076c <std+0x3c>)
 8010758:	62a3      	str	r3, [r4, #40]	; 0x28
 801075a:	4b05      	ldr	r3, [pc, #20]	; (8010770 <std+0x40>)
 801075c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801075e:	4b05      	ldr	r3, [pc, #20]	; (8010774 <std+0x44>)
 8010760:	6224      	str	r4, [r4, #32]
 8010762:	6323      	str	r3, [r4, #48]	; 0x30
 8010764:	bd10      	pop	{r4, pc}
 8010766:	bf00      	nop
 8010768:	0801165d 	.word	0x0801165d
 801076c:	0801167f 	.word	0x0801167f
 8010770:	080116b7 	.word	0x080116b7
 8010774:	080116db 	.word	0x080116db

08010778 <_cleanup_r>:
 8010778:	4901      	ldr	r1, [pc, #4]	; (8010780 <_cleanup_r+0x8>)
 801077a:	f000 b8af 	b.w	80108dc <_fwalk_reent>
 801077e:	bf00      	nop
 8010780:	080106b9 	.word	0x080106b9

08010784 <__sfmoreglue>:
 8010784:	b570      	push	{r4, r5, r6, lr}
 8010786:	2268      	movs	r2, #104	; 0x68
 8010788:	1e4d      	subs	r5, r1, #1
 801078a:	4355      	muls	r5, r2
 801078c:	460e      	mov	r6, r1
 801078e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010792:	f000 fd3d 	bl	8011210 <_malloc_r>
 8010796:	4604      	mov	r4, r0
 8010798:	b140      	cbz	r0, 80107ac <__sfmoreglue+0x28>
 801079a:	2100      	movs	r1, #0
 801079c:	e9c0 1600 	strd	r1, r6, [r0]
 80107a0:	300c      	adds	r0, #12
 80107a2:	60a0      	str	r0, [r4, #8]
 80107a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80107a8:	f7fe faae 	bl	800ed08 <memset>
 80107ac:	4620      	mov	r0, r4
 80107ae:	bd70      	pop	{r4, r5, r6, pc}

080107b0 <__sfp_lock_acquire>:
 80107b0:	4801      	ldr	r0, [pc, #4]	; (80107b8 <__sfp_lock_acquire+0x8>)
 80107b2:	f000 b8b8 	b.w	8010926 <__retarget_lock_acquire_recursive>
 80107b6:	bf00      	nop
 80107b8:	200029b9 	.word	0x200029b9

080107bc <__sfp_lock_release>:
 80107bc:	4801      	ldr	r0, [pc, #4]	; (80107c4 <__sfp_lock_release+0x8>)
 80107be:	f000 b8b3 	b.w	8010928 <__retarget_lock_release_recursive>
 80107c2:	bf00      	nop
 80107c4:	200029b9 	.word	0x200029b9

080107c8 <__sinit_lock_acquire>:
 80107c8:	4801      	ldr	r0, [pc, #4]	; (80107d0 <__sinit_lock_acquire+0x8>)
 80107ca:	f000 b8ac 	b.w	8010926 <__retarget_lock_acquire_recursive>
 80107ce:	bf00      	nop
 80107d0:	200029ba 	.word	0x200029ba

080107d4 <__sinit_lock_release>:
 80107d4:	4801      	ldr	r0, [pc, #4]	; (80107dc <__sinit_lock_release+0x8>)
 80107d6:	f000 b8a7 	b.w	8010928 <__retarget_lock_release_recursive>
 80107da:	bf00      	nop
 80107dc:	200029ba 	.word	0x200029ba

080107e0 <__sinit>:
 80107e0:	b510      	push	{r4, lr}
 80107e2:	4604      	mov	r4, r0
 80107e4:	f7ff fff0 	bl	80107c8 <__sinit_lock_acquire>
 80107e8:	69a3      	ldr	r3, [r4, #24]
 80107ea:	b11b      	cbz	r3, 80107f4 <__sinit+0x14>
 80107ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107f0:	f7ff bff0 	b.w	80107d4 <__sinit_lock_release>
 80107f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80107f8:	6523      	str	r3, [r4, #80]	; 0x50
 80107fa:	4b13      	ldr	r3, [pc, #76]	; (8010848 <__sinit+0x68>)
 80107fc:	4a13      	ldr	r2, [pc, #76]	; (801084c <__sinit+0x6c>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	62a2      	str	r2, [r4, #40]	; 0x28
 8010802:	42a3      	cmp	r3, r4
 8010804:	bf04      	itt	eq
 8010806:	2301      	moveq	r3, #1
 8010808:	61a3      	streq	r3, [r4, #24]
 801080a:	4620      	mov	r0, r4
 801080c:	f000 f820 	bl	8010850 <__sfp>
 8010810:	6060      	str	r0, [r4, #4]
 8010812:	4620      	mov	r0, r4
 8010814:	f000 f81c 	bl	8010850 <__sfp>
 8010818:	60a0      	str	r0, [r4, #8]
 801081a:	4620      	mov	r0, r4
 801081c:	f000 f818 	bl	8010850 <__sfp>
 8010820:	2200      	movs	r2, #0
 8010822:	60e0      	str	r0, [r4, #12]
 8010824:	2104      	movs	r1, #4
 8010826:	6860      	ldr	r0, [r4, #4]
 8010828:	f7ff ff82 	bl	8010730 <std>
 801082c:	68a0      	ldr	r0, [r4, #8]
 801082e:	2201      	movs	r2, #1
 8010830:	2109      	movs	r1, #9
 8010832:	f7ff ff7d 	bl	8010730 <std>
 8010836:	68e0      	ldr	r0, [r4, #12]
 8010838:	2202      	movs	r2, #2
 801083a:	2112      	movs	r1, #18
 801083c:	f7ff ff78 	bl	8010730 <std>
 8010840:	2301      	movs	r3, #1
 8010842:	61a3      	str	r3, [r4, #24]
 8010844:	e7d2      	b.n	80107ec <__sinit+0xc>
 8010846:	bf00      	nop
 8010848:	08012fc4 	.word	0x08012fc4
 801084c:	08010779 	.word	0x08010779

08010850 <__sfp>:
 8010850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010852:	4607      	mov	r7, r0
 8010854:	f7ff ffac 	bl	80107b0 <__sfp_lock_acquire>
 8010858:	4b1e      	ldr	r3, [pc, #120]	; (80108d4 <__sfp+0x84>)
 801085a:	681e      	ldr	r6, [r3, #0]
 801085c:	69b3      	ldr	r3, [r6, #24]
 801085e:	b913      	cbnz	r3, 8010866 <__sfp+0x16>
 8010860:	4630      	mov	r0, r6
 8010862:	f7ff ffbd 	bl	80107e0 <__sinit>
 8010866:	3648      	adds	r6, #72	; 0x48
 8010868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801086c:	3b01      	subs	r3, #1
 801086e:	d503      	bpl.n	8010878 <__sfp+0x28>
 8010870:	6833      	ldr	r3, [r6, #0]
 8010872:	b30b      	cbz	r3, 80108b8 <__sfp+0x68>
 8010874:	6836      	ldr	r6, [r6, #0]
 8010876:	e7f7      	b.n	8010868 <__sfp+0x18>
 8010878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801087c:	b9d5      	cbnz	r5, 80108b4 <__sfp+0x64>
 801087e:	4b16      	ldr	r3, [pc, #88]	; (80108d8 <__sfp+0x88>)
 8010880:	60e3      	str	r3, [r4, #12]
 8010882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010886:	6665      	str	r5, [r4, #100]	; 0x64
 8010888:	f000 f84c 	bl	8010924 <__retarget_lock_init_recursive>
 801088c:	f7ff ff96 	bl	80107bc <__sfp_lock_release>
 8010890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010898:	6025      	str	r5, [r4, #0]
 801089a:	61a5      	str	r5, [r4, #24]
 801089c:	2208      	movs	r2, #8
 801089e:	4629      	mov	r1, r5
 80108a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80108a4:	f7fe fa30 	bl	800ed08 <memset>
 80108a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80108ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80108b0:	4620      	mov	r0, r4
 80108b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108b4:	3468      	adds	r4, #104	; 0x68
 80108b6:	e7d9      	b.n	801086c <__sfp+0x1c>
 80108b8:	2104      	movs	r1, #4
 80108ba:	4638      	mov	r0, r7
 80108bc:	f7ff ff62 	bl	8010784 <__sfmoreglue>
 80108c0:	4604      	mov	r4, r0
 80108c2:	6030      	str	r0, [r6, #0]
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d1d5      	bne.n	8010874 <__sfp+0x24>
 80108c8:	f7ff ff78 	bl	80107bc <__sfp_lock_release>
 80108cc:	230c      	movs	r3, #12
 80108ce:	603b      	str	r3, [r7, #0]
 80108d0:	e7ee      	b.n	80108b0 <__sfp+0x60>
 80108d2:	bf00      	nop
 80108d4:	08012fc4 	.word	0x08012fc4
 80108d8:	ffff0001 	.word	0xffff0001

080108dc <_fwalk_reent>:
 80108dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108e0:	4606      	mov	r6, r0
 80108e2:	4688      	mov	r8, r1
 80108e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80108e8:	2700      	movs	r7, #0
 80108ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108ee:	f1b9 0901 	subs.w	r9, r9, #1
 80108f2:	d505      	bpl.n	8010900 <_fwalk_reent+0x24>
 80108f4:	6824      	ldr	r4, [r4, #0]
 80108f6:	2c00      	cmp	r4, #0
 80108f8:	d1f7      	bne.n	80108ea <_fwalk_reent+0xe>
 80108fa:	4638      	mov	r0, r7
 80108fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010900:	89ab      	ldrh	r3, [r5, #12]
 8010902:	2b01      	cmp	r3, #1
 8010904:	d907      	bls.n	8010916 <_fwalk_reent+0x3a>
 8010906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801090a:	3301      	adds	r3, #1
 801090c:	d003      	beq.n	8010916 <_fwalk_reent+0x3a>
 801090e:	4629      	mov	r1, r5
 8010910:	4630      	mov	r0, r6
 8010912:	47c0      	blx	r8
 8010914:	4307      	orrs	r7, r0
 8010916:	3568      	adds	r5, #104	; 0x68
 8010918:	e7e9      	b.n	80108ee <_fwalk_reent+0x12>
	...

0801091c <_localeconv_r>:
 801091c:	4800      	ldr	r0, [pc, #0]	; (8010920 <_localeconv_r+0x4>)
 801091e:	4770      	bx	lr
 8010920:	20000180 	.word	0x20000180

08010924 <__retarget_lock_init_recursive>:
 8010924:	4770      	bx	lr

08010926 <__retarget_lock_acquire_recursive>:
 8010926:	4770      	bx	lr

08010928 <__retarget_lock_release_recursive>:
 8010928:	4770      	bx	lr

0801092a <__swhatbuf_r>:
 801092a:	b570      	push	{r4, r5, r6, lr}
 801092c:	460e      	mov	r6, r1
 801092e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010932:	2900      	cmp	r1, #0
 8010934:	b096      	sub	sp, #88	; 0x58
 8010936:	4614      	mov	r4, r2
 8010938:	461d      	mov	r5, r3
 801093a:	da08      	bge.n	801094e <__swhatbuf_r+0x24>
 801093c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010940:	2200      	movs	r2, #0
 8010942:	602a      	str	r2, [r5, #0]
 8010944:	061a      	lsls	r2, r3, #24
 8010946:	d410      	bmi.n	801096a <__swhatbuf_r+0x40>
 8010948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801094c:	e00e      	b.n	801096c <__swhatbuf_r+0x42>
 801094e:	466a      	mov	r2, sp
 8010950:	f000 ff1a 	bl	8011788 <_fstat_r>
 8010954:	2800      	cmp	r0, #0
 8010956:	dbf1      	blt.n	801093c <__swhatbuf_r+0x12>
 8010958:	9a01      	ldr	r2, [sp, #4]
 801095a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801095e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010962:	425a      	negs	r2, r3
 8010964:	415a      	adcs	r2, r3
 8010966:	602a      	str	r2, [r5, #0]
 8010968:	e7ee      	b.n	8010948 <__swhatbuf_r+0x1e>
 801096a:	2340      	movs	r3, #64	; 0x40
 801096c:	2000      	movs	r0, #0
 801096e:	6023      	str	r3, [r4, #0]
 8010970:	b016      	add	sp, #88	; 0x58
 8010972:	bd70      	pop	{r4, r5, r6, pc}

08010974 <__smakebuf_r>:
 8010974:	898b      	ldrh	r3, [r1, #12]
 8010976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010978:	079d      	lsls	r5, r3, #30
 801097a:	4606      	mov	r6, r0
 801097c:	460c      	mov	r4, r1
 801097e:	d507      	bpl.n	8010990 <__smakebuf_r+0x1c>
 8010980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	6123      	str	r3, [r4, #16]
 8010988:	2301      	movs	r3, #1
 801098a:	6163      	str	r3, [r4, #20]
 801098c:	b002      	add	sp, #8
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	ab01      	add	r3, sp, #4
 8010992:	466a      	mov	r2, sp
 8010994:	f7ff ffc9 	bl	801092a <__swhatbuf_r>
 8010998:	9900      	ldr	r1, [sp, #0]
 801099a:	4605      	mov	r5, r0
 801099c:	4630      	mov	r0, r6
 801099e:	f000 fc37 	bl	8011210 <_malloc_r>
 80109a2:	b948      	cbnz	r0, 80109b8 <__smakebuf_r+0x44>
 80109a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109a8:	059a      	lsls	r2, r3, #22
 80109aa:	d4ef      	bmi.n	801098c <__smakebuf_r+0x18>
 80109ac:	f023 0303 	bic.w	r3, r3, #3
 80109b0:	f043 0302 	orr.w	r3, r3, #2
 80109b4:	81a3      	strh	r3, [r4, #12]
 80109b6:	e7e3      	b.n	8010980 <__smakebuf_r+0xc>
 80109b8:	4b0d      	ldr	r3, [pc, #52]	; (80109f0 <__smakebuf_r+0x7c>)
 80109ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80109bc:	89a3      	ldrh	r3, [r4, #12]
 80109be:	6020      	str	r0, [r4, #0]
 80109c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109c4:	81a3      	strh	r3, [r4, #12]
 80109c6:	9b00      	ldr	r3, [sp, #0]
 80109c8:	6163      	str	r3, [r4, #20]
 80109ca:	9b01      	ldr	r3, [sp, #4]
 80109cc:	6120      	str	r0, [r4, #16]
 80109ce:	b15b      	cbz	r3, 80109e8 <__smakebuf_r+0x74>
 80109d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109d4:	4630      	mov	r0, r6
 80109d6:	f000 fee9 	bl	80117ac <_isatty_r>
 80109da:	b128      	cbz	r0, 80109e8 <__smakebuf_r+0x74>
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	f023 0303 	bic.w	r3, r3, #3
 80109e2:	f043 0301 	orr.w	r3, r3, #1
 80109e6:	81a3      	strh	r3, [r4, #12]
 80109e8:	89a0      	ldrh	r0, [r4, #12]
 80109ea:	4305      	orrs	r5, r0
 80109ec:	81a5      	strh	r5, [r4, #12]
 80109ee:	e7cd      	b.n	801098c <__smakebuf_r+0x18>
 80109f0:	08010779 	.word	0x08010779

080109f4 <malloc>:
 80109f4:	4b02      	ldr	r3, [pc, #8]	; (8010a00 <malloc+0xc>)
 80109f6:	4601      	mov	r1, r0
 80109f8:	6818      	ldr	r0, [r3, #0]
 80109fa:	f000 bc09 	b.w	8011210 <_malloc_r>
 80109fe:	bf00      	nop
 8010a00:	2000002c 	.word	0x2000002c

08010a04 <_Balloc>:
 8010a04:	b570      	push	{r4, r5, r6, lr}
 8010a06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	b976      	cbnz	r6, 8010a2c <_Balloc+0x28>
 8010a0e:	2010      	movs	r0, #16
 8010a10:	f7ff fff0 	bl	80109f4 <malloc>
 8010a14:	4602      	mov	r2, r0
 8010a16:	6260      	str	r0, [r4, #36]	; 0x24
 8010a18:	b920      	cbnz	r0, 8010a24 <_Balloc+0x20>
 8010a1a:	4b18      	ldr	r3, [pc, #96]	; (8010a7c <_Balloc+0x78>)
 8010a1c:	4818      	ldr	r0, [pc, #96]	; (8010a80 <_Balloc+0x7c>)
 8010a1e:	2166      	movs	r1, #102	; 0x66
 8010a20:	f000 fe72 	bl	8011708 <__assert_func>
 8010a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a28:	6006      	str	r6, [r0, #0]
 8010a2a:	60c6      	str	r6, [r0, #12]
 8010a2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010a2e:	68f3      	ldr	r3, [r6, #12]
 8010a30:	b183      	cbz	r3, 8010a54 <_Balloc+0x50>
 8010a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a3a:	b9b8      	cbnz	r0, 8010a6c <_Balloc+0x68>
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8010a42:	1d72      	adds	r2, r6, #5
 8010a44:	0092      	lsls	r2, r2, #2
 8010a46:	4620      	mov	r0, r4
 8010a48:	f000 fb60 	bl	801110c <_calloc_r>
 8010a4c:	b160      	cbz	r0, 8010a68 <_Balloc+0x64>
 8010a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a52:	e00e      	b.n	8010a72 <_Balloc+0x6e>
 8010a54:	2221      	movs	r2, #33	; 0x21
 8010a56:	2104      	movs	r1, #4
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f000 fb57 	bl	801110c <_calloc_r>
 8010a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a60:	60f0      	str	r0, [r6, #12]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1e4      	bne.n	8010a32 <_Balloc+0x2e>
 8010a68:	2000      	movs	r0, #0
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	6802      	ldr	r2, [r0, #0]
 8010a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a72:	2300      	movs	r3, #0
 8010a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a78:	e7f7      	b.n	8010a6a <_Balloc+0x66>
 8010a7a:	bf00      	nop
 8010a7c:	08013009 	.word	0x08013009
 8010a80:	080130ec 	.word	0x080130ec

08010a84 <_Bfree>:
 8010a84:	b570      	push	{r4, r5, r6, lr}
 8010a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010a88:	4605      	mov	r5, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	b976      	cbnz	r6, 8010aac <_Bfree+0x28>
 8010a8e:	2010      	movs	r0, #16
 8010a90:	f7ff ffb0 	bl	80109f4 <malloc>
 8010a94:	4602      	mov	r2, r0
 8010a96:	6268      	str	r0, [r5, #36]	; 0x24
 8010a98:	b920      	cbnz	r0, 8010aa4 <_Bfree+0x20>
 8010a9a:	4b09      	ldr	r3, [pc, #36]	; (8010ac0 <_Bfree+0x3c>)
 8010a9c:	4809      	ldr	r0, [pc, #36]	; (8010ac4 <_Bfree+0x40>)
 8010a9e:	218a      	movs	r1, #138	; 0x8a
 8010aa0:	f000 fe32 	bl	8011708 <__assert_func>
 8010aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010aa8:	6006      	str	r6, [r0, #0]
 8010aaa:	60c6      	str	r6, [r0, #12]
 8010aac:	b13c      	cbz	r4, 8010abe <_Bfree+0x3a>
 8010aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ab0:	6862      	ldr	r2, [r4, #4]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ab8:	6021      	str	r1, [r4, #0]
 8010aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010abe:	bd70      	pop	{r4, r5, r6, pc}
 8010ac0:	08013009 	.word	0x08013009
 8010ac4:	080130ec 	.word	0x080130ec

08010ac8 <__multadd>:
 8010ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010acc:	690d      	ldr	r5, [r1, #16]
 8010ace:	4607      	mov	r7, r0
 8010ad0:	460c      	mov	r4, r1
 8010ad2:	461e      	mov	r6, r3
 8010ad4:	f101 0c14 	add.w	ip, r1, #20
 8010ad8:	2000      	movs	r0, #0
 8010ada:	f8dc 3000 	ldr.w	r3, [ip]
 8010ade:	b299      	uxth	r1, r3
 8010ae0:	fb02 6101 	mla	r1, r2, r1, r6
 8010ae4:	0c1e      	lsrs	r6, r3, #16
 8010ae6:	0c0b      	lsrs	r3, r1, #16
 8010ae8:	fb02 3306 	mla	r3, r2, r6, r3
 8010aec:	b289      	uxth	r1, r1
 8010aee:	3001      	adds	r0, #1
 8010af0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010af4:	4285      	cmp	r5, r0
 8010af6:	f84c 1b04 	str.w	r1, [ip], #4
 8010afa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010afe:	dcec      	bgt.n	8010ada <__multadd+0x12>
 8010b00:	b30e      	cbz	r6, 8010b46 <__multadd+0x7e>
 8010b02:	68a3      	ldr	r3, [r4, #8]
 8010b04:	42ab      	cmp	r3, r5
 8010b06:	dc19      	bgt.n	8010b3c <__multadd+0x74>
 8010b08:	6861      	ldr	r1, [r4, #4]
 8010b0a:	4638      	mov	r0, r7
 8010b0c:	3101      	adds	r1, #1
 8010b0e:	f7ff ff79 	bl	8010a04 <_Balloc>
 8010b12:	4680      	mov	r8, r0
 8010b14:	b928      	cbnz	r0, 8010b22 <__multadd+0x5a>
 8010b16:	4602      	mov	r2, r0
 8010b18:	4b0c      	ldr	r3, [pc, #48]	; (8010b4c <__multadd+0x84>)
 8010b1a:	480d      	ldr	r0, [pc, #52]	; (8010b50 <__multadd+0x88>)
 8010b1c:	21b5      	movs	r1, #181	; 0xb5
 8010b1e:	f000 fdf3 	bl	8011708 <__assert_func>
 8010b22:	6922      	ldr	r2, [r4, #16]
 8010b24:	3202      	adds	r2, #2
 8010b26:	f104 010c 	add.w	r1, r4, #12
 8010b2a:	0092      	lsls	r2, r2, #2
 8010b2c:	300c      	adds	r0, #12
 8010b2e:	f7fe f8dd 	bl	800ecec <memcpy>
 8010b32:	4621      	mov	r1, r4
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff ffa5 	bl	8010a84 <_Bfree>
 8010b3a:	4644      	mov	r4, r8
 8010b3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b40:	3501      	adds	r5, #1
 8010b42:	615e      	str	r6, [r3, #20]
 8010b44:	6125      	str	r5, [r4, #16]
 8010b46:	4620      	mov	r0, r4
 8010b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4c:	0801307b 	.word	0x0801307b
 8010b50:	080130ec 	.word	0x080130ec

08010b54 <__hi0bits>:
 8010b54:	0c03      	lsrs	r3, r0, #16
 8010b56:	041b      	lsls	r3, r3, #16
 8010b58:	b9d3      	cbnz	r3, 8010b90 <__hi0bits+0x3c>
 8010b5a:	0400      	lsls	r0, r0, #16
 8010b5c:	2310      	movs	r3, #16
 8010b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b62:	bf04      	itt	eq
 8010b64:	0200      	lsleq	r0, r0, #8
 8010b66:	3308      	addeq	r3, #8
 8010b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b6c:	bf04      	itt	eq
 8010b6e:	0100      	lsleq	r0, r0, #4
 8010b70:	3304      	addeq	r3, #4
 8010b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010b76:	bf04      	itt	eq
 8010b78:	0080      	lsleq	r0, r0, #2
 8010b7a:	3302      	addeq	r3, #2
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	db05      	blt.n	8010b8c <__hi0bits+0x38>
 8010b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010b84:	f103 0301 	add.w	r3, r3, #1
 8010b88:	bf08      	it	eq
 8010b8a:	2320      	moveq	r3, #32
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	4770      	bx	lr
 8010b90:	2300      	movs	r3, #0
 8010b92:	e7e4      	b.n	8010b5e <__hi0bits+0xa>

08010b94 <__lo0bits>:
 8010b94:	6803      	ldr	r3, [r0, #0]
 8010b96:	f013 0207 	ands.w	r2, r3, #7
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	d00b      	beq.n	8010bb6 <__lo0bits+0x22>
 8010b9e:	07da      	lsls	r2, r3, #31
 8010ba0:	d423      	bmi.n	8010bea <__lo0bits+0x56>
 8010ba2:	0798      	lsls	r0, r3, #30
 8010ba4:	bf49      	itett	mi
 8010ba6:	085b      	lsrmi	r3, r3, #1
 8010ba8:	089b      	lsrpl	r3, r3, #2
 8010baa:	2001      	movmi	r0, #1
 8010bac:	600b      	strmi	r3, [r1, #0]
 8010bae:	bf5c      	itt	pl
 8010bb0:	600b      	strpl	r3, [r1, #0]
 8010bb2:	2002      	movpl	r0, #2
 8010bb4:	4770      	bx	lr
 8010bb6:	b298      	uxth	r0, r3
 8010bb8:	b9a8      	cbnz	r0, 8010be6 <__lo0bits+0x52>
 8010bba:	0c1b      	lsrs	r3, r3, #16
 8010bbc:	2010      	movs	r0, #16
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	b90a      	cbnz	r2, 8010bc6 <__lo0bits+0x32>
 8010bc2:	3008      	adds	r0, #8
 8010bc4:	0a1b      	lsrs	r3, r3, #8
 8010bc6:	071a      	lsls	r2, r3, #28
 8010bc8:	bf04      	itt	eq
 8010bca:	091b      	lsreq	r3, r3, #4
 8010bcc:	3004      	addeq	r0, #4
 8010bce:	079a      	lsls	r2, r3, #30
 8010bd0:	bf04      	itt	eq
 8010bd2:	089b      	lsreq	r3, r3, #2
 8010bd4:	3002      	addeq	r0, #2
 8010bd6:	07da      	lsls	r2, r3, #31
 8010bd8:	d403      	bmi.n	8010be2 <__lo0bits+0x4e>
 8010bda:	085b      	lsrs	r3, r3, #1
 8010bdc:	f100 0001 	add.w	r0, r0, #1
 8010be0:	d005      	beq.n	8010bee <__lo0bits+0x5a>
 8010be2:	600b      	str	r3, [r1, #0]
 8010be4:	4770      	bx	lr
 8010be6:	4610      	mov	r0, r2
 8010be8:	e7e9      	b.n	8010bbe <__lo0bits+0x2a>
 8010bea:	2000      	movs	r0, #0
 8010bec:	4770      	bx	lr
 8010bee:	2020      	movs	r0, #32
 8010bf0:	4770      	bx	lr
	...

08010bf4 <__i2b>:
 8010bf4:	b510      	push	{r4, lr}
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	f7ff ff03 	bl	8010a04 <_Balloc>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	b928      	cbnz	r0, 8010c0e <__i2b+0x1a>
 8010c02:	4b05      	ldr	r3, [pc, #20]	; (8010c18 <__i2b+0x24>)
 8010c04:	4805      	ldr	r0, [pc, #20]	; (8010c1c <__i2b+0x28>)
 8010c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010c0a:	f000 fd7d 	bl	8011708 <__assert_func>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	6144      	str	r4, [r0, #20]
 8010c12:	6103      	str	r3, [r0, #16]
 8010c14:	bd10      	pop	{r4, pc}
 8010c16:	bf00      	nop
 8010c18:	0801307b 	.word	0x0801307b
 8010c1c:	080130ec 	.word	0x080130ec

08010c20 <__multiply>:
 8010c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c24:	4691      	mov	r9, r2
 8010c26:	690a      	ldr	r2, [r1, #16]
 8010c28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	bfb8      	it	lt
 8010c30:	460b      	movlt	r3, r1
 8010c32:	460c      	mov	r4, r1
 8010c34:	bfbc      	itt	lt
 8010c36:	464c      	movlt	r4, r9
 8010c38:	4699      	movlt	r9, r3
 8010c3a:	6927      	ldr	r7, [r4, #16]
 8010c3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c40:	68a3      	ldr	r3, [r4, #8]
 8010c42:	6861      	ldr	r1, [r4, #4]
 8010c44:	eb07 060a 	add.w	r6, r7, sl
 8010c48:	42b3      	cmp	r3, r6
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	bfb8      	it	lt
 8010c4e:	3101      	addlt	r1, #1
 8010c50:	f7ff fed8 	bl	8010a04 <_Balloc>
 8010c54:	b930      	cbnz	r0, 8010c64 <__multiply+0x44>
 8010c56:	4602      	mov	r2, r0
 8010c58:	4b44      	ldr	r3, [pc, #272]	; (8010d6c <__multiply+0x14c>)
 8010c5a:	4845      	ldr	r0, [pc, #276]	; (8010d70 <__multiply+0x150>)
 8010c5c:	f240 115d 	movw	r1, #349	; 0x15d
 8010c60:	f000 fd52 	bl	8011708 <__assert_func>
 8010c64:	f100 0514 	add.w	r5, r0, #20
 8010c68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c6c:	462b      	mov	r3, r5
 8010c6e:	2200      	movs	r2, #0
 8010c70:	4543      	cmp	r3, r8
 8010c72:	d321      	bcc.n	8010cb8 <__multiply+0x98>
 8010c74:	f104 0314 	add.w	r3, r4, #20
 8010c78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010c7c:	f109 0314 	add.w	r3, r9, #20
 8010c80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010c84:	9202      	str	r2, [sp, #8]
 8010c86:	1b3a      	subs	r2, r7, r4
 8010c88:	3a15      	subs	r2, #21
 8010c8a:	f022 0203 	bic.w	r2, r2, #3
 8010c8e:	3204      	adds	r2, #4
 8010c90:	f104 0115 	add.w	r1, r4, #21
 8010c94:	428f      	cmp	r7, r1
 8010c96:	bf38      	it	cc
 8010c98:	2204      	movcc	r2, #4
 8010c9a:	9201      	str	r2, [sp, #4]
 8010c9c:	9a02      	ldr	r2, [sp, #8]
 8010c9e:	9303      	str	r3, [sp, #12]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d80c      	bhi.n	8010cbe <__multiply+0x9e>
 8010ca4:	2e00      	cmp	r6, #0
 8010ca6:	dd03      	ble.n	8010cb0 <__multiply+0x90>
 8010ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d05a      	beq.n	8010d66 <__multiply+0x146>
 8010cb0:	6106      	str	r6, [r0, #16]
 8010cb2:	b005      	add	sp, #20
 8010cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb8:	f843 2b04 	str.w	r2, [r3], #4
 8010cbc:	e7d8      	b.n	8010c70 <__multiply+0x50>
 8010cbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8010cc2:	f1ba 0f00 	cmp.w	sl, #0
 8010cc6:	d024      	beq.n	8010d12 <__multiply+0xf2>
 8010cc8:	f104 0e14 	add.w	lr, r4, #20
 8010ccc:	46a9      	mov	r9, r5
 8010cce:	f04f 0c00 	mov.w	ip, #0
 8010cd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010cd6:	f8d9 1000 	ldr.w	r1, [r9]
 8010cda:	fa1f fb82 	uxth.w	fp, r2
 8010cde:	b289      	uxth	r1, r1
 8010ce0:	fb0a 110b 	mla	r1, sl, fp, r1
 8010ce4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8010cec:	4461      	add	r1, ip
 8010cee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010cf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8010cf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010cfa:	b289      	uxth	r1, r1
 8010cfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d00:	4577      	cmp	r7, lr
 8010d02:	f849 1b04 	str.w	r1, [r9], #4
 8010d06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d0a:	d8e2      	bhi.n	8010cd2 <__multiply+0xb2>
 8010d0c:	9a01      	ldr	r2, [sp, #4]
 8010d0e:	f845 c002 	str.w	ip, [r5, r2]
 8010d12:	9a03      	ldr	r2, [sp, #12]
 8010d14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d18:	3304      	adds	r3, #4
 8010d1a:	f1b9 0f00 	cmp.w	r9, #0
 8010d1e:	d020      	beq.n	8010d62 <__multiply+0x142>
 8010d20:	6829      	ldr	r1, [r5, #0]
 8010d22:	f104 0c14 	add.w	ip, r4, #20
 8010d26:	46ae      	mov	lr, r5
 8010d28:	f04f 0a00 	mov.w	sl, #0
 8010d2c:	f8bc b000 	ldrh.w	fp, [ip]
 8010d30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d34:	fb09 220b 	mla	r2, r9, fp, r2
 8010d38:	4492      	add	sl, r2
 8010d3a:	b289      	uxth	r1, r1
 8010d3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010d40:	f84e 1b04 	str.w	r1, [lr], #4
 8010d44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d48:	f8be 1000 	ldrh.w	r1, [lr]
 8010d4c:	0c12      	lsrs	r2, r2, #16
 8010d4e:	fb09 1102 	mla	r1, r9, r2, r1
 8010d52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010d56:	4567      	cmp	r7, ip
 8010d58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d5c:	d8e6      	bhi.n	8010d2c <__multiply+0x10c>
 8010d5e:	9a01      	ldr	r2, [sp, #4]
 8010d60:	50a9      	str	r1, [r5, r2]
 8010d62:	3504      	adds	r5, #4
 8010d64:	e79a      	b.n	8010c9c <__multiply+0x7c>
 8010d66:	3e01      	subs	r6, #1
 8010d68:	e79c      	b.n	8010ca4 <__multiply+0x84>
 8010d6a:	bf00      	nop
 8010d6c:	0801307b 	.word	0x0801307b
 8010d70:	080130ec 	.word	0x080130ec

08010d74 <__pow5mult>:
 8010d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d78:	4615      	mov	r5, r2
 8010d7a:	f012 0203 	ands.w	r2, r2, #3
 8010d7e:	4606      	mov	r6, r0
 8010d80:	460f      	mov	r7, r1
 8010d82:	d007      	beq.n	8010d94 <__pow5mult+0x20>
 8010d84:	4c25      	ldr	r4, [pc, #148]	; (8010e1c <__pow5mult+0xa8>)
 8010d86:	3a01      	subs	r2, #1
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d8e:	f7ff fe9b 	bl	8010ac8 <__multadd>
 8010d92:	4607      	mov	r7, r0
 8010d94:	10ad      	asrs	r5, r5, #2
 8010d96:	d03d      	beq.n	8010e14 <__pow5mult+0xa0>
 8010d98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010d9a:	b97c      	cbnz	r4, 8010dbc <__pow5mult+0x48>
 8010d9c:	2010      	movs	r0, #16
 8010d9e:	f7ff fe29 	bl	80109f4 <malloc>
 8010da2:	4602      	mov	r2, r0
 8010da4:	6270      	str	r0, [r6, #36]	; 0x24
 8010da6:	b928      	cbnz	r0, 8010db4 <__pow5mult+0x40>
 8010da8:	4b1d      	ldr	r3, [pc, #116]	; (8010e20 <__pow5mult+0xac>)
 8010daa:	481e      	ldr	r0, [pc, #120]	; (8010e24 <__pow5mult+0xb0>)
 8010dac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010db0:	f000 fcaa 	bl	8011708 <__assert_func>
 8010db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010db8:	6004      	str	r4, [r0, #0]
 8010dba:	60c4      	str	r4, [r0, #12]
 8010dbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010dc4:	b94c      	cbnz	r4, 8010dda <__pow5mult+0x66>
 8010dc6:	f240 2171 	movw	r1, #625	; 0x271
 8010dca:	4630      	mov	r0, r6
 8010dcc:	f7ff ff12 	bl	8010bf4 <__i2b>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	6003      	str	r3, [r0, #0]
 8010dda:	f04f 0900 	mov.w	r9, #0
 8010dde:	07eb      	lsls	r3, r5, #31
 8010de0:	d50a      	bpl.n	8010df8 <__pow5mult+0x84>
 8010de2:	4639      	mov	r1, r7
 8010de4:	4622      	mov	r2, r4
 8010de6:	4630      	mov	r0, r6
 8010de8:	f7ff ff1a 	bl	8010c20 <__multiply>
 8010dec:	4639      	mov	r1, r7
 8010dee:	4680      	mov	r8, r0
 8010df0:	4630      	mov	r0, r6
 8010df2:	f7ff fe47 	bl	8010a84 <_Bfree>
 8010df6:	4647      	mov	r7, r8
 8010df8:	106d      	asrs	r5, r5, #1
 8010dfa:	d00b      	beq.n	8010e14 <__pow5mult+0xa0>
 8010dfc:	6820      	ldr	r0, [r4, #0]
 8010dfe:	b938      	cbnz	r0, 8010e10 <__pow5mult+0x9c>
 8010e00:	4622      	mov	r2, r4
 8010e02:	4621      	mov	r1, r4
 8010e04:	4630      	mov	r0, r6
 8010e06:	f7ff ff0b 	bl	8010c20 <__multiply>
 8010e0a:	6020      	str	r0, [r4, #0]
 8010e0c:	f8c0 9000 	str.w	r9, [r0]
 8010e10:	4604      	mov	r4, r0
 8010e12:	e7e4      	b.n	8010dde <__pow5mult+0x6a>
 8010e14:	4638      	mov	r0, r7
 8010e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08013238 	.word	0x08013238
 8010e20:	08013009 	.word	0x08013009
 8010e24:	080130ec 	.word	0x080130ec

08010e28 <__lshift>:
 8010e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e2c:	460c      	mov	r4, r1
 8010e2e:	6849      	ldr	r1, [r1, #4]
 8010e30:	6923      	ldr	r3, [r4, #16]
 8010e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e36:	68a3      	ldr	r3, [r4, #8]
 8010e38:	4607      	mov	r7, r0
 8010e3a:	4691      	mov	r9, r2
 8010e3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e40:	f108 0601 	add.w	r6, r8, #1
 8010e44:	42b3      	cmp	r3, r6
 8010e46:	db0b      	blt.n	8010e60 <__lshift+0x38>
 8010e48:	4638      	mov	r0, r7
 8010e4a:	f7ff fddb 	bl	8010a04 <_Balloc>
 8010e4e:	4605      	mov	r5, r0
 8010e50:	b948      	cbnz	r0, 8010e66 <__lshift+0x3e>
 8010e52:	4602      	mov	r2, r0
 8010e54:	4b2a      	ldr	r3, [pc, #168]	; (8010f00 <__lshift+0xd8>)
 8010e56:	482b      	ldr	r0, [pc, #172]	; (8010f04 <__lshift+0xdc>)
 8010e58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010e5c:	f000 fc54 	bl	8011708 <__assert_func>
 8010e60:	3101      	adds	r1, #1
 8010e62:	005b      	lsls	r3, r3, #1
 8010e64:	e7ee      	b.n	8010e44 <__lshift+0x1c>
 8010e66:	2300      	movs	r3, #0
 8010e68:	f100 0114 	add.w	r1, r0, #20
 8010e6c:	f100 0210 	add.w	r2, r0, #16
 8010e70:	4618      	mov	r0, r3
 8010e72:	4553      	cmp	r3, sl
 8010e74:	db37      	blt.n	8010ee6 <__lshift+0xbe>
 8010e76:	6920      	ldr	r0, [r4, #16]
 8010e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010e7c:	f104 0314 	add.w	r3, r4, #20
 8010e80:	f019 091f 	ands.w	r9, r9, #31
 8010e84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010e8c:	d02f      	beq.n	8010eee <__lshift+0xc6>
 8010e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8010e92:	468a      	mov	sl, r1
 8010e94:	f04f 0c00 	mov.w	ip, #0
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	fa02 f209 	lsl.w	r2, r2, r9
 8010e9e:	ea42 020c 	orr.w	r2, r2, ip
 8010ea2:	f84a 2b04 	str.w	r2, [sl], #4
 8010ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eaa:	4298      	cmp	r0, r3
 8010eac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010eb0:	d8f2      	bhi.n	8010e98 <__lshift+0x70>
 8010eb2:	1b03      	subs	r3, r0, r4
 8010eb4:	3b15      	subs	r3, #21
 8010eb6:	f023 0303 	bic.w	r3, r3, #3
 8010eba:	3304      	adds	r3, #4
 8010ebc:	f104 0215 	add.w	r2, r4, #21
 8010ec0:	4290      	cmp	r0, r2
 8010ec2:	bf38      	it	cc
 8010ec4:	2304      	movcc	r3, #4
 8010ec6:	f841 c003 	str.w	ip, [r1, r3]
 8010eca:	f1bc 0f00 	cmp.w	ip, #0
 8010ece:	d001      	beq.n	8010ed4 <__lshift+0xac>
 8010ed0:	f108 0602 	add.w	r6, r8, #2
 8010ed4:	3e01      	subs	r6, #1
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	612e      	str	r6, [r5, #16]
 8010eda:	4621      	mov	r1, r4
 8010edc:	f7ff fdd2 	bl	8010a84 <_Bfree>
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8010eea:	3301      	adds	r3, #1
 8010eec:	e7c1      	b.n	8010e72 <__lshift+0x4a>
 8010eee:	3904      	subs	r1, #4
 8010ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ef4:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ef8:	4298      	cmp	r0, r3
 8010efa:	d8f9      	bhi.n	8010ef0 <__lshift+0xc8>
 8010efc:	e7ea      	b.n	8010ed4 <__lshift+0xac>
 8010efe:	bf00      	nop
 8010f00:	0801307b 	.word	0x0801307b
 8010f04:	080130ec 	.word	0x080130ec

08010f08 <__mcmp>:
 8010f08:	b530      	push	{r4, r5, lr}
 8010f0a:	6902      	ldr	r2, [r0, #16]
 8010f0c:	690c      	ldr	r4, [r1, #16]
 8010f0e:	1b12      	subs	r2, r2, r4
 8010f10:	d10e      	bne.n	8010f30 <__mcmp+0x28>
 8010f12:	f100 0314 	add.w	r3, r0, #20
 8010f16:	3114      	adds	r1, #20
 8010f18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f28:	42a5      	cmp	r5, r4
 8010f2a:	d003      	beq.n	8010f34 <__mcmp+0x2c>
 8010f2c:	d305      	bcc.n	8010f3a <__mcmp+0x32>
 8010f2e:	2201      	movs	r2, #1
 8010f30:	4610      	mov	r0, r2
 8010f32:	bd30      	pop	{r4, r5, pc}
 8010f34:	4283      	cmp	r3, r0
 8010f36:	d3f3      	bcc.n	8010f20 <__mcmp+0x18>
 8010f38:	e7fa      	b.n	8010f30 <__mcmp+0x28>
 8010f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f3e:	e7f7      	b.n	8010f30 <__mcmp+0x28>

08010f40 <__mdiff>:
 8010f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f44:	460c      	mov	r4, r1
 8010f46:	4606      	mov	r6, r0
 8010f48:	4611      	mov	r1, r2
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	4690      	mov	r8, r2
 8010f4e:	f7ff ffdb 	bl	8010f08 <__mcmp>
 8010f52:	1e05      	subs	r5, r0, #0
 8010f54:	d110      	bne.n	8010f78 <__mdiff+0x38>
 8010f56:	4629      	mov	r1, r5
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f7ff fd53 	bl	8010a04 <_Balloc>
 8010f5e:	b930      	cbnz	r0, 8010f6e <__mdiff+0x2e>
 8010f60:	4b3a      	ldr	r3, [pc, #232]	; (801104c <__mdiff+0x10c>)
 8010f62:	4602      	mov	r2, r0
 8010f64:	f240 2132 	movw	r1, #562	; 0x232
 8010f68:	4839      	ldr	r0, [pc, #228]	; (8011050 <__mdiff+0x110>)
 8010f6a:	f000 fbcd 	bl	8011708 <__assert_func>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f78:	bfa4      	itt	ge
 8010f7a:	4643      	movge	r3, r8
 8010f7c:	46a0      	movge	r8, r4
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f84:	bfa6      	itte	ge
 8010f86:	461c      	movge	r4, r3
 8010f88:	2500      	movge	r5, #0
 8010f8a:	2501      	movlt	r5, #1
 8010f8c:	f7ff fd3a 	bl	8010a04 <_Balloc>
 8010f90:	b920      	cbnz	r0, 8010f9c <__mdiff+0x5c>
 8010f92:	4b2e      	ldr	r3, [pc, #184]	; (801104c <__mdiff+0x10c>)
 8010f94:	4602      	mov	r2, r0
 8010f96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010f9a:	e7e5      	b.n	8010f68 <__mdiff+0x28>
 8010f9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fa0:	6926      	ldr	r6, [r4, #16]
 8010fa2:	60c5      	str	r5, [r0, #12]
 8010fa4:	f104 0914 	add.w	r9, r4, #20
 8010fa8:	f108 0514 	add.w	r5, r8, #20
 8010fac:	f100 0e14 	add.w	lr, r0, #20
 8010fb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010fb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010fb8:	f108 0210 	add.w	r2, r8, #16
 8010fbc:	46f2      	mov	sl, lr
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010fc8:	fa1f f883 	uxth.w	r8, r3
 8010fcc:	fa11 f18b 	uxtah	r1, r1, fp
 8010fd0:	0c1b      	lsrs	r3, r3, #16
 8010fd2:	eba1 0808 	sub.w	r8, r1, r8
 8010fd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010fda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010fde:	fa1f f888 	uxth.w	r8, r8
 8010fe2:	1419      	asrs	r1, r3, #16
 8010fe4:	454e      	cmp	r6, r9
 8010fe6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010fea:	f84a 3b04 	str.w	r3, [sl], #4
 8010fee:	d8e7      	bhi.n	8010fc0 <__mdiff+0x80>
 8010ff0:	1b33      	subs	r3, r6, r4
 8010ff2:	3b15      	subs	r3, #21
 8010ff4:	f023 0303 	bic.w	r3, r3, #3
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	3415      	adds	r4, #21
 8010ffc:	42a6      	cmp	r6, r4
 8010ffe:	bf38      	it	cc
 8011000:	2304      	movcc	r3, #4
 8011002:	441d      	add	r5, r3
 8011004:	4473      	add	r3, lr
 8011006:	469e      	mov	lr, r3
 8011008:	462e      	mov	r6, r5
 801100a:	4566      	cmp	r6, ip
 801100c:	d30e      	bcc.n	801102c <__mdiff+0xec>
 801100e:	f10c 0203 	add.w	r2, ip, #3
 8011012:	1b52      	subs	r2, r2, r5
 8011014:	f022 0203 	bic.w	r2, r2, #3
 8011018:	3d03      	subs	r5, #3
 801101a:	45ac      	cmp	ip, r5
 801101c:	bf38      	it	cc
 801101e:	2200      	movcc	r2, #0
 8011020:	441a      	add	r2, r3
 8011022:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011026:	b17b      	cbz	r3, 8011048 <__mdiff+0x108>
 8011028:	6107      	str	r7, [r0, #16]
 801102a:	e7a3      	b.n	8010f74 <__mdiff+0x34>
 801102c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011030:	fa11 f288 	uxtah	r2, r1, r8
 8011034:	1414      	asrs	r4, r2, #16
 8011036:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801103a:	b292      	uxth	r2, r2
 801103c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011040:	f84e 2b04 	str.w	r2, [lr], #4
 8011044:	1421      	asrs	r1, r4, #16
 8011046:	e7e0      	b.n	801100a <__mdiff+0xca>
 8011048:	3f01      	subs	r7, #1
 801104a:	e7ea      	b.n	8011022 <__mdiff+0xe2>
 801104c:	0801307b 	.word	0x0801307b
 8011050:	080130ec 	.word	0x080130ec

08011054 <__d2b>:
 8011054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011058:	4689      	mov	r9, r1
 801105a:	2101      	movs	r1, #1
 801105c:	ec57 6b10 	vmov	r6, r7, d0
 8011060:	4690      	mov	r8, r2
 8011062:	f7ff fccf 	bl	8010a04 <_Balloc>
 8011066:	4604      	mov	r4, r0
 8011068:	b930      	cbnz	r0, 8011078 <__d2b+0x24>
 801106a:	4602      	mov	r2, r0
 801106c:	4b25      	ldr	r3, [pc, #148]	; (8011104 <__d2b+0xb0>)
 801106e:	4826      	ldr	r0, [pc, #152]	; (8011108 <__d2b+0xb4>)
 8011070:	f240 310a 	movw	r1, #778	; 0x30a
 8011074:	f000 fb48 	bl	8011708 <__assert_func>
 8011078:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801107c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011080:	bb35      	cbnz	r5, 80110d0 <__d2b+0x7c>
 8011082:	2e00      	cmp	r6, #0
 8011084:	9301      	str	r3, [sp, #4]
 8011086:	d028      	beq.n	80110da <__d2b+0x86>
 8011088:	4668      	mov	r0, sp
 801108a:	9600      	str	r6, [sp, #0]
 801108c:	f7ff fd82 	bl	8010b94 <__lo0bits>
 8011090:	9900      	ldr	r1, [sp, #0]
 8011092:	b300      	cbz	r0, 80110d6 <__d2b+0x82>
 8011094:	9a01      	ldr	r2, [sp, #4]
 8011096:	f1c0 0320 	rsb	r3, r0, #32
 801109a:	fa02 f303 	lsl.w	r3, r2, r3
 801109e:	430b      	orrs	r3, r1
 80110a0:	40c2      	lsrs	r2, r0
 80110a2:	6163      	str	r3, [r4, #20]
 80110a4:	9201      	str	r2, [sp, #4]
 80110a6:	9b01      	ldr	r3, [sp, #4]
 80110a8:	61a3      	str	r3, [r4, #24]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	bf14      	ite	ne
 80110ae:	2202      	movne	r2, #2
 80110b0:	2201      	moveq	r2, #1
 80110b2:	6122      	str	r2, [r4, #16]
 80110b4:	b1d5      	cbz	r5, 80110ec <__d2b+0x98>
 80110b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80110ba:	4405      	add	r5, r0
 80110bc:	f8c9 5000 	str.w	r5, [r9]
 80110c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80110c4:	f8c8 0000 	str.w	r0, [r8]
 80110c8:	4620      	mov	r0, r4
 80110ca:	b003      	add	sp, #12
 80110cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110d4:	e7d5      	b.n	8011082 <__d2b+0x2e>
 80110d6:	6161      	str	r1, [r4, #20]
 80110d8:	e7e5      	b.n	80110a6 <__d2b+0x52>
 80110da:	a801      	add	r0, sp, #4
 80110dc:	f7ff fd5a 	bl	8010b94 <__lo0bits>
 80110e0:	9b01      	ldr	r3, [sp, #4]
 80110e2:	6163      	str	r3, [r4, #20]
 80110e4:	2201      	movs	r2, #1
 80110e6:	6122      	str	r2, [r4, #16]
 80110e8:	3020      	adds	r0, #32
 80110ea:	e7e3      	b.n	80110b4 <__d2b+0x60>
 80110ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80110f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80110f4:	f8c9 0000 	str.w	r0, [r9]
 80110f8:	6918      	ldr	r0, [r3, #16]
 80110fa:	f7ff fd2b 	bl	8010b54 <__hi0bits>
 80110fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011102:	e7df      	b.n	80110c4 <__d2b+0x70>
 8011104:	0801307b 	.word	0x0801307b
 8011108:	080130ec 	.word	0x080130ec

0801110c <_calloc_r>:
 801110c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801110e:	fba1 2402 	umull	r2, r4, r1, r2
 8011112:	b94c      	cbnz	r4, 8011128 <_calloc_r+0x1c>
 8011114:	4611      	mov	r1, r2
 8011116:	9201      	str	r2, [sp, #4]
 8011118:	f000 f87a 	bl	8011210 <_malloc_r>
 801111c:	9a01      	ldr	r2, [sp, #4]
 801111e:	4605      	mov	r5, r0
 8011120:	b930      	cbnz	r0, 8011130 <_calloc_r+0x24>
 8011122:	4628      	mov	r0, r5
 8011124:	b003      	add	sp, #12
 8011126:	bd30      	pop	{r4, r5, pc}
 8011128:	220c      	movs	r2, #12
 801112a:	6002      	str	r2, [r0, #0]
 801112c:	2500      	movs	r5, #0
 801112e:	e7f8      	b.n	8011122 <_calloc_r+0x16>
 8011130:	4621      	mov	r1, r4
 8011132:	f7fd fde9 	bl	800ed08 <memset>
 8011136:	e7f4      	b.n	8011122 <_calloc_r+0x16>

08011138 <_free_r>:
 8011138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801113a:	2900      	cmp	r1, #0
 801113c:	d044      	beq.n	80111c8 <_free_r+0x90>
 801113e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011142:	9001      	str	r0, [sp, #4]
 8011144:	2b00      	cmp	r3, #0
 8011146:	f1a1 0404 	sub.w	r4, r1, #4
 801114a:	bfb8      	it	lt
 801114c:	18e4      	addlt	r4, r4, r3
 801114e:	f000 fb61 	bl	8011814 <__malloc_lock>
 8011152:	4a1e      	ldr	r2, [pc, #120]	; (80111cc <_free_r+0x94>)
 8011154:	9801      	ldr	r0, [sp, #4]
 8011156:	6813      	ldr	r3, [r2, #0]
 8011158:	b933      	cbnz	r3, 8011168 <_free_r+0x30>
 801115a:	6063      	str	r3, [r4, #4]
 801115c:	6014      	str	r4, [r2, #0]
 801115e:	b003      	add	sp, #12
 8011160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011164:	f000 bb5c 	b.w	8011820 <__malloc_unlock>
 8011168:	42a3      	cmp	r3, r4
 801116a:	d908      	bls.n	801117e <_free_r+0x46>
 801116c:	6825      	ldr	r5, [r4, #0]
 801116e:	1961      	adds	r1, r4, r5
 8011170:	428b      	cmp	r3, r1
 8011172:	bf01      	itttt	eq
 8011174:	6819      	ldreq	r1, [r3, #0]
 8011176:	685b      	ldreq	r3, [r3, #4]
 8011178:	1949      	addeq	r1, r1, r5
 801117a:	6021      	streq	r1, [r4, #0]
 801117c:	e7ed      	b.n	801115a <_free_r+0x22>
 801117e:	461a      	mov	r2, r3
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	b10b      	cbz	r3, 8011188 <_free_r+0x50>
 8011184:	42a3      	cmp	r3, r4
 8011186:	d9fa      	bls.n	801117e <_free_r+0x46>
 8011188:	6811      	ldr	r1, [r2, #0]
 801118a:	1855      	adds	r5, r2, r1
 801118c:	42a5      	cmp	r5, r4
 801118e:	d10b      	bne.n	80111a8 <_free_r+0x70>
 8011190:	6824      	ldr	r4, [r4, #0]
 8011192:	4421      	add	r1, r4
 8011194:	1854      	adds	r4, r2, r1
 8011196:	42a3      	cmp	r3, r4
 8011198:	6011      	str	r1, [r2, #0]
 801119a:	d1e0      	bne.n	801115e <_free_r+0x26>
 801119c:	681c      	ldr	r4, [r3, #0]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	6053      	str	r3, [r2, #4]
 80111a2:	4421      	add	r1, r4
 80111a4:	6011      	str	r1, [r2, #0]
 80111a6:	e7da      	b.n	801115e <_free_r+0x26>
 80111a8:	d902      	bls.n	80111b0 <_free_r+0x78>
 80111aa:	230c      	movs	r3, #12
 80111ac:	6003      	str	r3, [r0, #0]
 80111ae:	e7d6      	b.n	801115e <_free_r+0x26>
 80111b0:	6825      	ldr	r5, [r4, #0]
 80111b2:	1961      	adds	r1, r4, r5
 80111b4:	428b      	cmp	r3, r1
 80111b6:	bf04      	itt	eq
 80111b8:	6819      	ldreq	r1, [r3, #0]
 80111ba:	685b      	ldreq	r3, [r3, #4]
 80111bc:	6063      	str	r3, [r4, #4]
 80111be:	bf04      	itt	eq
 80111c0:	1949      	addeq	r1, r1, r5
 80111c2:	6021      	streq	r1, [r4, #0]
 80111c4:	6054      	str	r4, [r2, #4]
 80111c6:	e7ca      	b.n	801115e <_free_r+0x26>
 80111c8:	b003      	add	sp, #12
 80111ca:	bd30      	pop	{r4, r5, pc}
 80111cc:	200029bc 	.word	0x200029bc

080111d0 <sbrk_aligned>:
 80111d0:	b570      	push	{r4, r5, r6, lr}
 80111d2:	4e0e      	ldr	r6, [pc, #56]	; (801120c <sbrk_aligned+0x3c>)
 80111d4:	460c      	mov	r4, r1
 80111d6:	6831      	ldr	r1, [r6, #0]
 80111d8:	4605      	mov	r5, r0
 80111da:	b911      	cbnz	r1, 80111e2 <sbrk_aligned+0x12>
 80111dc:	f000 fa2e 	bl	801163c <_sbrk_r>
 80111e0:	6030      	str	r0, [r6, #0]
 80111e2:	4621      	mov	r1, r4
 80111e4:	4628      	mov	r0, r5
 80111e6:	f000 fa29 	bl	801163c <_sbrk_r>
 80111ea:	1c43      	adds	r3, r0, #1
 80111ec:	d00a      	beq.n	8011204 <sbrk_aligned+0x34>
 80111ee:	1cc4      	adds	r4, r0, #3
 80111f0:	f024 0403 	bic.w	r4, r4, #3
 80111f4:	42a0      	cmp	r0, r4
 80111f6:	d007      	beq.n	8011208 <sbrk_aligned+0x38>
 80111f8:	1a21      	subs	r1, r4, r0
 80111fa:	4628      	mov	r0, r5
 80111fc:	f000 fa1e 	bl	801163c <_sbrk_r>
 8011200:	3001      	adds	r0, #1
 8011202:	d101      	bne.n	8011208 <sbrk_aligned+0x38>
 8011204:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011208:	4620      	mov	r0, r4
 801120a:	bd70      	pop	{r4, r5, r6, pc}
 801120c:	200029c0 	.word	0x200029c0

08011210 <_malloc_r>:
 8011210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011214:	1ccd      	adds	r5, r1, #3
 8011216:	f025 0503 	bic.w	r5, r5, #3
 801121a:	3508      	adds	r5, #8
 801121c:	2d0c      	cmp	r5, #12
 801121e:	bf38      	it	cc
 8011220:	250c      	movcc	r5, #12
 8011222:	2d00      	cmp	r5, #0
 8011224:	4607      	mov	r7, r0
 8011226:	db01      	blt.n	801122c <_malloc_r+0x1c>
 8011228:	42a9      	cmp	r1, r5
 801122a:	d905      	bls.n	8011238 <_malloc_r+0x28>
 801122c:	230c      	movs	r3, #12
 801122e:	603b      	str	r3, [r7, #0]
 8011230:	2600      	movs	r6, #0
 8011232:	4630      	mov	r0, r6
 8011234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011238:	4e2e      	ldr	r6, [pc, #184]	; (80112f4 <_malloc_r+0xe4>)
 801123a:	f000 faeb 	bl	8011814 <__malloc_lock>
 801123e:	6833      	ldr	r3, [r6, #0]
 8011240:	461c      	mov	r4, r3
 8011242:	bb34      	cbnz	r4, 8011292 <_malloc_r+0x82>
 8011244:	4629      	mov	r1, r5
 8011246:	4638      	mov	r0, r7
 8011248:	f7ff ffc2 	bl	80111d0 <sbrk_aligned>
 801124c:	1c43      	adds	r3, r0, #1
 801124e:	4604      	mov	r4, r0
 8011250:	d14d      	bne.n	80112ee <_malloc_r+0xde>
 8011252:	6834      	ldr	r4, [r6, #0]
 8011254:	4626      	mov	r6, r4
 8011256:	2e00      	cmp	r6, #0
 8011258:	d140      	bne.n	80112dc <_malloc_r+0xcc>
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	4631      	mov	r1, r6
 801125e:	4638      	mov	r0, r7
 8011260:	eb04 0803 	add.w	r8, r4, r3
 8011264:	f000 f9ea 	bl	801163c <_sbrk_r>
 8011268:	4580      	cmp	r8, r0
 801126a:	d13a      	bne.n	80112e2 <_malloc_r+0xd2>
 801126c:	6821      	ldr	r1, [r4, #0]
 801126e:	3503      	adds	r5, #3
 8011270:	1a6d      	subs	r5, r5, r1
 8011272:	f025 0503 	bic.w	r5, r5, #3
 8011276:	3508      	adds	r5, #8
 8011278:	2d0c      	cmp	r5, #12
 801127a:	bf38      	it	cc
 801127c:	250c      	movcc	r5, #12
 801127e:	4629      	mov	r1, r5
 8011280:	4638      	mov	r0, r7
 8011282:	f7ff ffa5 	bl	80111d0 <sbrk_aligned>
 8011286:	3001      	adds	r0, #1
 8011288:	d02b      	beq.n	80112e2 <_malloc_r+0xd2>
 801128a:	6823      	ldr	r3, [r4, #0]
 801128c:	442b      	add	r3, r5
 801128e:	6023      	str	r3, [r4, #0]
 8011290:	e00e      	b.n	80112b0 <_malloc_r+0xa0>
 8011292:	6822      	ldr	r2, [r4, #0]
 8011294:	1b52      	subs	r2, r2, r5
 8011296:	d41e      	bmi.n	80112d6 <_malloc_r+0xc6>
 8011298:	2a0b      	cmp	r2, #11
 801129a:	d916      	bls.n	80112ca <_malloc_r+0xba>
 801129c:	1961      	adds	r1, r4, r5
 801129e:	42a3      	cmp	r3, r4
 80112a0:	6025      	str	r5, [r4, #0]
 80112a2:	bf18      	it	ne
 80112a4:	6059      	strne	r1, [r3, #4]
 80112a6:	6863      	ldr	r3, [r4, #4]
 80112a8:	bf08      	it	eq
 80112aa:	6031      	streq	r1, [r6, #0]
 80112ac:	5162      	str	r2, [r4, r5]
 80112ae:	604b      	str	r3, [r1, #4]
 80112b0:	4638      	mov	r0, r7
 80112b2:	f104 060b 	add.w	r6, r4, #11
 80112b6:	f000 fab3 	bl	8011820 <__malloc_unlock>
 80112ba:	f026 0607 	bic.w	r6, r6, #7
 80112be:	1d23      	adds	r3, r4, #4
 80112c0:	1af2      	subs	r2, r6, r3
 80112c2:	d0b6      	beq.n	8011232 <_malloc_r+0x22>
 80112c4:	1b9b      	subs	r3, r3, r6
 80112c6:	50a3      	str	r3, [r4, r2]
 80112c8:	e7b3      	b.n	8011232 <_malloc_r+0x22>
 80112ca:	6862      	ldr	r2, [r4, #4]
 80112cc:	42a3      	cmp	r3, r4
 80112ce:	bf0c      	ite	eq
 80112d0:	6032      	streq	r2, [r6, #0]
 80112d2:	605a      	strne	r2, [r3, #4]
 80112d4:	e7ec      	b.n	80112b0 <_malloc_r+0xa0>
 80112d6:	4623      	mov	r3, r4
 80112d8:	6864      	ldr	r4, [r4, #4]
 80112da:	e7b2      	b.n	8011242 <_malloc_r+0x32>
 80112dc:	4634      	mov	r4, r6
 80112de:	6876      	ldr	r6, [r6, #4]
 80112e0:	e7b9      	b.n	8011256 <_malloc_r+0x46>
 80112e2:	230c      	movs	r3, #12
 80112e4:	603b      	str	r3, [r7, #0]
 80112e6:	4638      	mov	r0, r7
 80112e8:	f000 fa9a 	bl	8011820 <__malloc_unlock>
 80112ec:	e7a1      	b.n	8011232 <_malloc_r+0x22>
 80112ee:	6025      	str	r5, [r4, #0]
 80112f0:	e7de      	b.n	80112b0 <_malloc_r+0xa0>
 80112f2:	bf00      	nop
 80112f4:	200029bc 	.word	0x200029bc

080112f8 <__sfputc_r>:
 80112f8:	6893      	ldr	r3, [r2, #8]
 80112fa:	3b01      	subs	r3, #1
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	b410      	push	{r4}
 8011300:	6093      	str	r3, [r2, #8]
 8011302:	da08      	bge.n	8011316 <__sfputc_r+0x1e>
 8011304:	6994      	ldr	r4, [r2, #24]
 8011306:	42a3      	cmp	r3, r4
 8011308:	db01      	blt.n	801130e <__sfputc_r+0x16>
 801130a:	290a      	cmp	r1, #10
 801130c:	d103      	bne.n	8011316 <__sfputc_r+0x1e>
 801130e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011312:	f7fe ba0f 	b.w	800f734 <__swbuf_r>
 8011316:	6813      	ldr	r3, [r2, #0]
 8011318:	1c58      	adds	r0, r3, #1
 801131a:	6010      	str	r0, [r2, #0]
 801131c:	7019      	strb	r1, [r3, #0]
 801131e:	4608      	mov	r0, r1
 8011320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011324:	4770      	bx	lr

08011326 <__sfputs_r>:
 8011326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011328:	4606      	mov	r6, r0
 801132a:	460f      	mov	r7, r1
 801132c:	4614      	mov	r4, r2
 801132e:	18d5      	adds	r5, r2, r3
 8011330:	42ac      	cmp	r4, r5
 8011332:	d101      	bne.n	8011338 <__sfputs_r+0x12>
 8011334:	2000      	movs	r0, #0
 8011336:	e007      	b.n	8011348 <__sfputs_r+0x22>
 8011338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133c:	463a      	mov	r2, r7
 801133e:	4630      	mov	r0, r6
 8011340:	f7ff ffda 	bl	80112f8 <__sfputc_r>
 8011344:	1c43      	adds	r3, r0, #1
 8011346:	d1f3      	bne.n	8011330 <__sfputs_r+0xa>
 8011348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801134c <_vfiprintf_r>:
 801134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011350:	460d      	mov	r5, r1
 8011352:	b09d      	sub	sp, #116	; 0x74
 8011354:	4614      	mov	r4, r2
 8011356:	4698      	mov	r8, r3
 8011358:	4606      	mov	r6, r0
 801135a:	b118      	cbz	r0, 8011364 <_vfiprintf_r+0x18>
 801135c:	6983      	ldr	r3, [r0, #24]
 801135e:	b90b      	cbnz	r3, 8011364 <_vfiprintf_r+0x18>
 8011360:	f7ff fa3e 	bl	80107e0 <__sinit>
 8011364:	4b89      	ldr	r3, [pc, #548]	; (801158c <_vfiprintf_r+0x240>)
 8011366:	429d      	cmp	r5, r3
 8011368:	d11b      	bne.n	80113a2 <_vfiprintf_r+0x56>
 801136a:	6875      	ldr	r5, [r6, #4]
 801136c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801136e:	07d9      	lsls	r1, r3, #31
 8011370:	d405      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	059a      	lsls	r2, r3, #22
 8011376:	d402      	bmi.n	801137e <_vfiprintf_r+0x32>
 8011378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801137a:	f7ff fad4 	bl	8010926 <__retarget_lock_acquire_recursive>
 801137e:	89ab      	ldrh	r3, [r5, #12]
 8011380:	071b      	lsls	r3, r3, #28
 8011382:	d501      	bpl.n	8011388 <_vfiprintf_r+0x3c>
 8011384:	692b      	ldr	r3, [r5, #16]
 8011386:	b9eb      	cbnz	r3, 80113c4 <_vfiprintf_r+0x78>
 8011388:	4629      	mov	r1, r5
 801138a:	4630      	mov	r0, r6
 801138c:	f7fe fa24 	bl	800f7d8 <__swsetup_r>
 8011390:	b1c0      	cbz	r0, 80113c4 <_vfiprintf_r+0x78>
 8011392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011394:	07dc      	lsls	r4, r3, #31
 8011396:	d50e      	bpl.n	80113b6 <_vfiprintf_r+0x6a>
 8011398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801139c:	b01d      	add	sp, #116	; 0x74
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	4b7b      	ldr	r3, [pc, #492]	; (8011590 <_vfiprintf_r+0x244>)
 80113a4:	429d      	cmp	r5, r3
 80113a6:	d101      	bne.n	80113ac <_vfiprintf_r+0x60>
 80113a8:	68b5      	ldr	r5, [r6, #8]
 80113aa:	e7df      	b.n	801136c <_vfiprintf_r+0x20>
 80113ac:	4b79      	ldr	r3, [pc, #484]	; (8011594 <_vfiprintf_r+0x248>)
 80113ae:	429d      	cmp	r5, r3
 80113b0:	bf08      	it	eq
 80113b2:	68f5      	ldreq	r5, [r6, #12]
 80113b4:	e7da      	b.n	801136c <_vfiprintf_r+0x20>
 80113b6:	89ab      	ldrh	r3, [r5, #12]
 80113b8:	0598      	lsls	r0, r3, #22
 80113ba:	d4ed      	bmi.n	8011398 <_vfiprintf_r+0x4c>
 80113bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113be:	f7ff fab3 	bl	8010928 <__retarget_lock_release_recursive>
 80113c2:	e7e9      	b.n	8011398 <_vfiprintf_r+0x4c>
 80113c4:	2300      	movs	r3, #0
 80113c6:	9309      	str	r3, [sp, #36]	; 0x24
 80113c8:	2320      	movs	r3, #32
 80113ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80113d2:	2330      	movs	r3, #48	; 0x30
 80113d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011598 <_vfiprintf_r+0x24c>
 80113d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113dc:	f04f 0901 	mov.w	r9, #1
 80113e0:	4623      	mov	r3, r4
 80113e2:	469a      	mov	sl, r3
 80113e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113e8:	b10a      	cbz	r2, 80113ee <_vfiprintf_r+0xa2>
 80113ea:	2a25      	cmp	r2, #37	; 0x25
 80113ec:	d1f9      	bne.n	80113e2 <_vfiprintf_r+0x96>
 80113ee:	ebba 0b04 	subs.w	fp, sl, r4
 80113f2:	d00b      	beq.n	801140c <_vfiprintf_r+0xc0>
 80113f4:	465b      	mov	r3, fp
 80113f6:	4622      	mov	r2, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	4630      	mov	r0, r6
 80113fc:	f7ff ff93 	bl	8011326 <__sfputs_r>
 8011400:	3001      	adds	r0, #1
 8011402:	f000 80aa 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011408:	445a      	add	r2, fp
 801140a:	9209      	str	r2, [sp, #36]	; 0x24
 801140c:	f89a 3000 	ldrb.w	r3, [sl]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80a2 	beq.w	801155a <_vfiprintf_r+0x20e>
 8011416:	2300      	movs	r3, #0
 8011418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801141c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011420:	f10a 0a01 	add.w	sl, sl, #1
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	9307      	str	r3, [sp, #28]
 8011428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801142c:	931a      	str	r3, [sp, #104]	; 0x68
 801142e:	4654      	mov	r4, sl
 8011430:	2205      	movs	r2, #5
 8011432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011436:	4858      	ldr	r0, [pc, #352]	; (8011598 <_vfiprintf_r+0x24c>)
 8011438:	f7ee feaa 	bl	8000190 <memchr>
 801143c:	9a04      	ldr	r2, [sp, #16]
 801143e:	b9d8      	cbnz	r0, 8011478 <_vfiprintf_r+0x12c>
 8011440:	06d1      	lsls	r1, r2, #27
 8011442:	bf44      	itt	mi
 8011444:	2320      	movmi	r3, #32
 8011446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801144a:	0713      	lsls	r3, r2, #28
 801144c:	bf44      	itt	mi
 801144e:	232b      	movmi	r3, #43	; 0x2b
 8011450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011454:	f89a 3000 	ldrb.w	r3, [sl]
 8011458:	2b2a      	cmp	r3, #42	; 0x2a
 801145a:	d015      	beq.n	8011488 <_vfiprintf_r+0x13c>
 801145c:	9a07      	ldr	r2, [sp, #28]
 801145e:	4654      	mov	r4, sl
 8011460:	2000      	movs	r0, #0
 8011462:	f04f 0c0a 	mov.w	ip, #10
 8011466:	4621      	mov	r1, r4
 8011468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801146c:	3b30      	subs	r3, #48	; 0x30
 801146e:	2b09      	cmp	r3, #9
 8011470:	d94e      	bls.n	8011510 <_vfiprintf_r+0x1c4>
 8011472:	b1b0      	cbz	r0, 80114a2 <_vfiprintf_r+0x156>
 8011474:	9207      	str	r2, [sp, #28]
 8011476:	e014      	b.n	80114a2 <_vfiprintf_r+0x156>
 8011478:	eba0 0308 	sub.w	r3, r0, r8
 801147c:	fa09 f303 	lsl.w	r3, r9, r3
 8011480:	4313      	orrs	r3, r2
 8011482:	9304      	str	r3, [sp, #16]
 8011484:	46a2      	mov	sl, r4
 8011486:	e7d2      	b.n	801142e <_vfiprintf_r+0xe2>
 8011488:	9b03      	ldr	r3, [sp, #12]
 801148a:	1d19      	adds	r1, r3, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	9103      	str	r1, [sp, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	bfbb      	ittet	lt
 8011494:	425b      	neglt	r3, r3
 8011496:	f042 0202 	orrlt.w	r2, r2, #2
 801149a:	9307      	strge	r3, [sp, #28]
 801149c:	9307      	strlt	r3, [sp, #28]
 801149e:	bfb8      	it	lt
 80114a0:	9204      	strlt	r2, [sp, #16]
 80114a2:	7823      	ldrb	r3, [r4, #0]
 80114a4:	2b2e      	cmp	r3, #46	; 0x2e
 80114a6:	d10c      	bne.n	80114c2 <_vfiprintf_r+0x176>
 80114a8:	7863      	ldrb	r3, [r4, #1]
 80114aa:	2b2a      	cmp	r3, #42	; 0x2a
 80114ac:	d135      	bne.n	801151a <_vfiprintf_r+0x1ce>
 80114ae:	9b03      	ldr	r3, [sp, #12]
 80114b0:	1d1a      	adds	r2, r3, #4
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	9203      	str	r2, [sp, #12]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bfb8      	it	lt
 80114ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80114be:	3402      	adds	r4, #2
 80114c0:	9305      	str	r3, [sp, #20]
 80114c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80115a8 <_vfiprintf_r+0x25c>
 80114c6:	7821      	ldrb	r1, [r4, #0]
 80114c8:	2203      	movs	r2, #3
 80114ca:	4650      	mov	r0, sl
 80114cc:	f7ee fe60 	bl	8000190 <memchr>
 80114d0:	b140      	cbz	r0, 80114e4 <_vfiprintf_r+0x198>
 80114d2:	2340      	movs	r3, #64	; 0x40
 80114d4:	eba0 000a 	sub.w	r0, r0, sl
 80114d8:	fa03 f000 	lsl.w	r0, r3, r0
 80114dc:	9b04      	ldr	r3, [sp, #16]
 80114de:	4303      	orrs	r3, r0
 80114e0:	3401      	adds	r4, #1
 80114e2:	9304      	str	r3, [sp, #16]
 80114e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e8:	482c      	ldr	r0, [pc, #176]	; (801159c <_vfiprintf_r+0x250>)
 80114ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114ee:	2206      	movs	r2, #6
 80114f0:	f7ee fe4e 	bl	8000190 <memchr>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d03f      	beq.n	8011578 <_vfiprintf_r+0x22c>
 80114f8:	4b29      	ldr	r3, [pc, #164]	; (80115a0 <_vfiprintf_r+0x254>)
 80114fa:	bb1b      	cbnz	r3, 8011544 <_vfiprintf_r+0x1f8>
 80114fc:	9b03      	ldr	r3, [sp, #12]
 80114fe:	3307      	adds	r3, #7
 8011500:	f023 0307 	bic.w	r3, r3, #7
 8011504:	3308      	adds	r3, #8
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801150a:	443b      	add	r3, r7
 801150c:	9309      	str	r3, [sp, #36]	; 0x24
 801150e:	e767      	b.n	80113e0 <_vfiprintf_r+0x94>
 8011510:	fb0c 3202 	mla	r2, ip, r2, r3
 8011514:	460c      	mov	r4, r1
 8011516:	2001      	movs	r0, #1
 8011518:	e7a5      	b.n	8011466 <_vfiprintf_r+0x11a>
 801151a:	2300      	movs	r3, #0
 801151c:	3401      	adds	r4, #1
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	4619      	mov	r1, r3
 8011522:	f04f 0c0a 	mov.w	ip, #10
 8011526:	4620      	mov	r0, r4
 8011528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801152c:	3a30      	subs	r2, #48	; 0x30
 801152e:	2a09      	cmp	r2, #9
 8011530:	d903      	bls.n	801153a <_vfiprintf_r+0x1ee>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d0c5      	beq.n	80114c2 <_vfiprintf_r+0x176>
 8011536:	9105      	str	r1, [sp, #20]
 8011538:	e7c3      	b.n	80114c2 <_vfiprintf_r+0x176>
 801153a:	fb0c 2101 	mla	r1, ip, r1, r2
 801153e:	4604      	mov	r4, r0
 8011540:	2301      	movs	r3, #1
 8011542:	e7f0      	b.n	8011526 <_vfiprintf_r+0x1da>
 8011544:	ab03      	add	r3, sp, #12
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	462a      	mov	r2, r5
 801154a:	4b16      	ldr	r3, [pc, #88]	; (80115a4 <_vfiprintf_r+0x258>)
 801154c:	a904      	add	r1, sp, #16
 801154e:	4630      	mov	r0, r6
 8011550:	f7fd fc82 	bl	800ee58 <_printf_float>
 8011554:	4607      	mov	r7, r0
 8011556:	1c78      	adds	r0, r7, #1
 8011558:	d1d6      	bne.n	8011508 <_vfiprintf_r+0x1bc>
 801155a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801155c:	07d9      	lsls	r1, r3, #31
 801155e:	d405      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011560:	89ab      	ldrh	r3, [r5, #12]
 8011562:	059a      	lsls	r2, r3, #22
 8011564:	d402      	bmi.n	801156c <_vfiprintf_r+0x220>
 8011566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011568:	f7ff f9de 	bl	8010928 <__retarget_lock_release_recursive>
 801156c:	89ab      	ldrh	r3, [r5, #12]
 801156e:	065b      	lsls	r3, r3, #25
 8011570:	f53f af12 	bmi.w	8011398 <_vfiprintf_r+0x4c>
 8011574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011576:	e711      	b.n	801139c <_vfiprintf_r+0x50>
 8011578:	ab03      	add	r3, sp, #12
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	462a      	mov	r2, r5
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <_vfiprintf_r+0x258>)
 8011580:	a904      	add	r1, sp, #16
 8011582:	4630      	mov	r0, r6
 8011584:	f7fd ff0c 	bl	800f3a0 <_printf_i>
 8011588:	e7e4      	b.n	8011554 <_vfiprintf_r+0x208>
 801158a:	bf00      	nop
 801158c:	080130ac 	.word	0x080130ac
 8011590:	080130cc 	.word	0x080130cc
 8011594:	0801308c 	.word	0x0801308c
 8011598:	08013244 	.word	0x08013244
 801159c:	0801324e 	.word	0x0801324e
 80115a0:	0800ee59 	.word	0x0800ee59
 80115a4:	08011327 	.word	0x08011327
 80115a8:	0801324a 	.word	0x0801324a

080115ac <_putc_r>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	460d      	mov	r5, r1
 80115b0:	4614      	mov	r4, r2
 80115b2:	4606      	mov	r6, r0
 80115b4:	b118      	cbz	r0, 80115be <_putc_r+0x12>
 80115b6:	6983      	ldr	r3, [r0, #24]
 80115b8:	b90b      	cbnz	r3, 80115be <_putc_r+0x12>
 80115ba:	f7ff f911 	bl	80107e0 <__sinit>
 80115be:	4b1c      	ldr	r3, [pc, #112]	; (8011630 <_putc_r+0x84>)
 80115c0:	429c      	cmp	r4, r3
 80115c2:	d124      	bne.n	801160e <_putc_r+0x62>
 80115c4:	6874      	ldr	r4, [r6, #4]
 80115c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115c8:	07d8      	lsls	r0, r3, #31
 80115ca:	d405      	bmi.n	80115d8 <_putc_r+0x2c>
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	0599      	lsls	r1, r3, #22
 80115d0:	d402      	bmi.n	80115d8 <_putc_r+0x2c>
 80115d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115d4:	f7ff f9a7 	bl	8010926 <__retarget_lock_acquire_recursive>
 80115d8:	68a3      	ldr	r3, [r4, #8]
 80115da:	3b01      	subs	r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	60a3      	str	r3, [r4, #8]
 80115e0:	da05      	bge.n	80115ee <_putc_r+0x42>
 80115e2:	69a2      	ldr	r2, [r4, #24]
 80115e4:	4293      	cmp	r3, r2
 80115e6:	db1c      	blt.n	8011622 <_putc_r+0x76>
 80115e8:	b2eb      	uxtb	r3, r5
 80115ea:	2b0a      	cmp	r3, #10
 80115ec:	d019      	beq.n	8011622 <_putc_r+0x76>
 80115ee:	6823      	ldr	r3, [r4, #0]
 80115f0:	1c5a      	adds	r2, r3, #1
 80115f2:	6022      	str	r2, [r4, #0]
 80115f4:	701d      	strb	r5, [r3, #0]
 80115f6:	b2ed      	uxtb	r5, r5
 80115f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115fa:	07da      	lsls	r2, r3, #31
 80115fc:	d405      	bmi.n	801160a <_putc_r+0x5e>
 80115fe:	89a3      	ldrh	r3, [r4, #12]
 8011600:	059b      	lsls	r3, r3, #22
 8011602:	d402      	bmi.n	801160a <_putc_r+0x5e>
 8011604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011606:	f7ff f98f 	bl	8010928 <__retarget_lock_release_recursive>
 801160a:	4628      	mov	r0, r5
 801160c:	bd70      	pop	{r4, r5, r6, pc}
 801160e:	4b09      	ldr	r3, [pc, #36]	; (8011634 <_putc_r+0x88>)
 8011610:	429c      	cmp	r4, r3
 8011612:	d101      	bne.n	8011618 <_putc_r+0x6c>
 8011614:	68b4      	ldr	r4, [r6, #8]
 8011616:	e7d6      	b.n	80115c6 <_putc_r+0x1a>
 8011618:	4b07      	ldr	r3, [pc, #28]	; (8011638 <_putc_r+0x8c>)
 801161a:	429c      	cmp	r4, r3
 801161c:	bf08      	it	eq
 801161e:	68f4      	ldreq	r4, [r6, #12]
 8011620:	e7d1      	b.n	80115c6 <_putc_r+0x1a>
 8011622:	4629      	mov	r1, r5
 8011624:	4622      	mov	r2, r4
 8011626:	4630      	mov	r0, r6
 8011628:	f7fe f884 	bl	800f734 <__swbuf_r>
 801162c:	4605      	mov	r5, r0
 801162e:	e7e3      	b.n	80115f8 <_putc_r+0x4c>
 8011630:	080130ac 	.word	0x080130ac
 8011634:	080130cc 	.word	0x080130cc
 8011638:	0801308c 	.word	0x0801308c

0801163c <_sbrk_r>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	4d06      	ldr	r5, [pc, #24]	; (8011658 <_sbrk_r+0x1c>)
 8011640:	2300      	movs	r3, #0
 8011642:	4604      	mov	r4, r0
 8011644:	4608      	mov	r0, r1
 8011646:	602b      	str	r3, [r5, #0]
 8011648:	f7f2 fcec 	bl	8004024 <_sbrk>
 801164c:	1c43      	adds	r3, r0, #1
 801164e:	d102      	bne.n	8011656 <_sbrk_r+0x1a>
 8011650:	682b      	ldr	r3, [r5, #0]
 8011652:	b103      	cbz	r3, 8011656 <_sbrk_r+0x1a>
 8011654:	6023      	str	r3, [r4, #0]
 8011656:	bd38      	pop	{r3, r4, r5, pc}
 8011658:	200029c4 	.word	0x200029c4

0801165c <__sread>:
 801165c:	b510      	push	{r4, lr}
 801165e:	460c      	mov	r4, r1
 8011660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011664:	f000 f8e2 	bl	801182c <_read_r>
 8011668:	2800      	cmp	r0, #0
 801166a:	bfab      	itete	ge
 801166c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801166e:	89a3      	ldrhlt	r3, [r4, #12]
 8011670:	181b      	addge	r3, r3, r0
 8011672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011676:	bfac      	ite	ge
 8011678:	6563      	strge	r3, [r4, #84]	; 0x54
 801167a:	81a3      	strhlt	r3, [r4, #12]
 801167c:	bd10      	pop	{r4, pc}

0801167e <__swrite>:
 801167e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011682:	461f      	mov	r7, r3
 8011684:	898b      	ldrh	r3, [r1, #12]
 8011686:	05db      	lsls	r3, r3, #23
 8011688:	4605      	mov	r5, r0
 801168a:	460c      	mov	r4, r1
 801168c:	4616      	mov	r6, r2
 801168e:	d505      	bpl.n	801169c <__swrite+0x1e>
 8011690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011694:	2302      	movs	r3, #2
 8011696:	2200      	movs	r2, #0
 8011698:	f000 f898 	bl	80117cc <_lseek_r>
 801169c:	89a3      	ldrh	r3, [r4, #12]
 801169e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116a6:	81a3      	strh	r3, [r4, #12]
 80116a8:	4632      	mov	r2, r6
 80116aa:	463b      	mov	r3, r7
 80116ac:	4628      	mov	r0, r5
 80116ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116b2:	f000 b817 	b.w	80116e4 <_write_r>

080116b6 <__sseek>:
 80116b6:	b510      	push	{r4, lr}
 80116b8:	460c      	mov	r4, r1
 80116ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116be:	f000 f885 	bl	80117cc <_lseek_r>
 80116c2:	1c43      	adds	r3, r0, #1
 80116c4:	89a3      	ldrh	r3, [r4, #12]
 80116c6:	bf15      	itete	ne
 80116c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80116ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80116ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80116d2:	81a3      	strheq	r3, [r4, #12]
 80116d4:	bf18      	it	ne
 80116d6:	81a3      	strhne	r3, [r4, #12]
 80116d8:	bd10      	pop	{r4, pc}

080116da <__sclose>:
 80116da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116de:	f000 b831 	b.w	8011744 <_close_r>
	...

080116e4 <_write_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	4d07      	ldr	r5, [pc, #28]	; (8011704 <_write_r+0x20>)
 80116e8:	4604      	mov	r4, r0
 80116ea:	4608      	mov	r0, r1
 80116ec:	4611      	mov	r1, r2
 80116ee:	2200      	movs	r2, #0
 80116f0:	602a      	str	r2, [r5, #0]
 80116f2:	461a      	mov	r2, r3
 80116f4:	f7fb f99a 	bl	800ca2c <_write>
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	d102      	bne.n	8011702 <_write_r+0x1e>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	b103      	cbz	r3, 8011702 <_write_r+0x1e>
 8011700:	6023      	str	r3, [r4, #0]
 8011702:	bd38      	pop	{r3, r4, r5, pc}
 8011704:	200029c4 	.word	0x200029c4

08011708 <__assert_func>:
 8011708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801170a:	4614      	mov	r4, r2
 801170c:	461a      	mov	r2, r3
 801170e:	4b09      	ldr	r3, [pc, #36]	; (8011734 <__assert_func+0x2c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4605      	mov	r5, r0
 8011714:	68d8      	ldr	r0, [r3, #12]
 8011716:	b14c      	cbz	r4, 801172c <__assert_func+0x24>
 8011718:	4b07      	ldr	r3, [pc, #28]	; (8011738 <__assert_func+0x30>)
 801171a:	9100      	str	r1, [sp, #0]
 801171c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011720:	4906      	ldr	r1, [pc, #24]	; (801173c <__assert_func+0x34>)
 8011722:	462b      	mov	r3, r5
 8011724:	f000 f81e 	bl	8011764 <fiprintf>
 8011728:	f000 f89f 	bl	801186a <abort>
 801172c:	4b04      	ldr	r3, [pc, #16]	; (8011740 <__assert_func+0x38>)
 801172e:	461c      	mov	r4, r3
 8011730:	e7f3      	b.n	801171a <__assert_func+0x12>
 8011732:	bf00      	nop
 8011734:	2000002c 	.word	0x2000002c
 8011738:	08013255 	.word	0x08013255
 801173c:	08013262 	.word	0x08013262
 8011740:	08013290 	.word	0x08013290

08011744 <_close_r>:
 8011744:	b538      	push	{r3, r4, r5, lr}
 8011746:	4d06      	ldr	r5, [pc, #24]	; (8011760 <_close_r+0x1c>)
 8011748:	2300      	movs	r3, #0
 801174a:	4604      	mov	r4, r0
 801174c:	4608      	mov	r0, r1
 801174e:	602b      	str	r3, [r5, #0]
 8011750:	f7f2 fc33 	bl	8003fba <_close>
 8011754:	1c43      	adds	r3, r0, #1
 8011756:	d102      	bne.n	801175e <_close_r+0x1a>
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	b103      	cbz	r3, 801175e <_close_r+0x1a>
 801175c:	6023      	str	r3, [r4, #0]
 801175e:	bd38      	pop	{r3, r4, r5, pc}
 8011760:	200029c4 	.word	0x200029c4

08011764 <fiprintf>:
 8011764:	b40e      	push	{r1, r2, r3}
 8011766:	b503      	push	{r0, r1, lr}
 8011768:	4601      	mov	r1, r0
 801176a:	ab03      	add	r3, sp, #12
 801176c:	4805      	ldr	r0, [pc, #20]	; (8011784 <fiprintf+0x20>)
 801176e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011772:	6800      	ldr	r0, [r0, #0]
 8011774:	9301      	str	r3, [sp, #4]
 8011776:	f7ff fde9 	bl	801134c <_vfiprintf_r>
 801177a:	b002      	add	sp, #8
 801177c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011780:	b003      	add	sp, #12
 8011782:	4770      	bx	lr
 8011784:	2000002c 	.word	0x2000002c

08011788 <_fstat_r>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	4d07      	ldr	r5, [pc, #28]	; (80117a8 <_fstat_r+0x20>)
 801178c:	2300      	movs	r3, #0
 801178e:	4604      	mov	r4, r0
 8011790:	4608      	mov	r0, r1
 8011792:	4611      	mov	r1, r2
 8011794:	602b      	str	r3, [r5, #0]
 8011796:	f7f2 fc1c 	bl	8003fd2 <_fstat>
 801179a:	1c43      	adds	r3, r0, #1
 801179c:	d102      	bne.n	80117a4 <_fstat_r+0x1c>
 801179e:	682b      	ldr	r3, [r5, #0]
 80117a0:	b103      	cbz	r3, 80117a4 <_fstat_r+0x1c>
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	bd38      	pop	{r3, r4, r5, pc}
 80117a6:	bf00      	nop
 80117a8:	200029c4 	.word	0x200029c4

080117ac <_isatty_r>:
 80117ac:	b538      	push	{r3, r4, r5, lr}
 80117ae:	4d06      	ldr	r5, [pc, #24]	; (80117c8 <_isatty_r+0x1c>)
 80117b0:	2300      	movs	r3, #0
 80117b2:	4604      	mov	r4, r0
 80117b4:	4608      	mov	r0, r1
 80117b6:	602b      	str	r3, [r5, #0]
 80117b8:	f7f2 fc1b 	bl	8003ff2 <_isatty>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	d102      	bne.n	80117c6 <_isatty_r+0x1a>
 80117c0:	682b      	ldr	r3, [r5, #0]
 80117c2:	b103      	cbz	r3, 80117c6 <_isatty_r+0x1a>
 80117c4:	6023      	str	r3, [r4, #0]
 80117c6:	bd38      	pop	{r3, r4, r5, pc}
 80117c8:	200029c4 	.word	0x200029c4

080117cc <_lseek_r>:
 80117cc:	b538      	push	{r3, r4, r5, lr}
 80117ce:	4d07      	ldr	r5, [pc, #28]	; (80117ec <_lseek_r+0x20>)
 80117d0:	4604      	mov	r4, r0
 80117d2:	4608      	mov	r0, r1
 80117d4:	4611      	mov	r1, r2
 80117d6:	2200      	movs	r2, #0
 80117d8:	602a      	str	r2, [r5, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	f7f2 fc14 	bl	8004008 <_lseek>
 80117e0:	1c43      	adds	r3, r0, #1
 80117e2:	d102      	bne.n	80117ea <_lseek_r+0x1e>
 80117e4:	682b      	ldr	r3, [r5, #0]
 80117e6:	b103      	cbz	r3, 80117ea <_lseek_r+0x1e>
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	200029c4 	.word	0x200029c4

080117f0 <__ascii_mbtowc>:
 80117f0:	b082      	sub	sp, #8
 80117f2:	b901      	cbnz	r1, 80117f6 <__ascii_mbtowc+0x6>
 80117f4:	a901      	add	r1, sp, #4
 80117f6:	b142      	cbz	r2, 801180a <__ascii_mbtowc+0x1a>
 80117f8:	b14b      	cbz	r3, 801180e <__ascii_mbtowc+0x1e>
 80117fa:	7813      	ldrb	r3, [r2, #0]
 80117fc:	600b      	str	r3, [r1, #0]
 80117fe:	7812      	ldrb	r2, [r2, #0]
 8011800:	1e10      	subs	r0, r2, #0
 8011802:	bf18      	it	ne
 8011804:	2001      	movne	r0, #1
 8011806:	b002      	add	sp, #8
 8011808:	4770      	bx	lr
 801180a:	4610      	mov	r0, r2
 801180c:	e7fb      	b.n	8011806 <__ascii_mbtowc+0x16>
 801180e:	f06f 0001 	mvn.w	r0, #1
 8011812:	e7f8      	b.n	8011806 <__ascii_mbtowc+0x16>

08011814 <__malloc_lock>:
 8011814:	4801      	ldr	r0, [pc, #4]	; (801181c <__malloc_lock+0x8>)
 8011816:	f7ff b886 	b.w	8010926 <__retarget_lock_acquire_recursive>
 801181a:	bf00      	nop
 801181c:	200029b8 	.word	0x200029b8

08011820 <__malloc_unlock>:
 8011820:	4801      	ldr	r0, [pc, #4]	; (8011828 <__malloc_unlock+0x8>)
 8011822:	f7ff b881 	b.w	8010928 <__retarget_lock_release_recursive>
 8011826:	bf00      	nop
 8011828:	200029b8 	.word	0x200029b8

0801182c <_read_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	4d07      	ldr	r5, [pc, #28]	; (801184c <_read_r+0x20>)
 8011830:	4604      	mov	r4, r0
 8011832:	4608      	mov	r0, r1
 8011834:	4611      	mov	r1, r2
 8011836:	2200      	movs	r2, #0
 8011838:	602a      	str	r2, [r5, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	f7f2 fba0 	bl	8003f80 <_read>
 8011840:	1c43      	adds	r3, r0, #1
 8011842:	d102      	bne.n	801184a <_read_r+0x1e>
 8011844:	682b      	ldr	r3, [r5, #0]
 8011846:	b103      	cbz	r3, 801184a <_read_r+0x1e>
 8011848:	6023      	str	r3, [r4, #0]
 801184a:	bd38      	pop	{r3, r4, r5, pc}
 801184c:	200029c4 	.word	0x200029c4

08011850 <__ascii_wctomb>:
 8011850:	b149      	cbz	r1, 8011866 <__ascii_wctomb+0x16>
 8011852:	2aff      	cmp	r2, #255	; 0xff
 8011854:	bf85      	ittet	hi
 8011856:	238a      	movhi	r3, #138	; 0x8a
 8011858:	6003      	strhi	r3, [r0, #0]
 801185a:	700a      	strbls	r2, [r1, #0]
 801185c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011860:	bf98      	it	ls
 8011862:	2001      	movls	r0, #1
 8011864:	4770      	bx	lr
 8011866:	4608      	mov	r0, r1
 8011868:	4770      	bx	lr

0801186a <abort>:
 801186a:	b508      	push	{r3, lr}
 801186c:	2006      	movs	r0, #6
 801186e:	f000 f82b 	bl	80118c8 <raise>
 8011872:	2001      	movs	r0, #1
 8011874:	f7f2 fb7a 	bl	8003f6c <_exit>

08011878 <_raise_r>:
 8011878:	291f      	cmp	r1, #31
 801187a:	b538      	push	{r3, r4, r5, lr}
 801187c:	4604      	mov	r4, r0
 801187e:	460d      	mov	r5, r1
 8011880:	d904      	bls.n	801188c <_raise_r+0x14>
 8011882:	2316      	movs	r3, #22
 8011884:	6003      	str	r3, [r0, #0]
 8011886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801188e:	b112      	cbz	r2, 8011896 <_raise_r+0x1e>
 8011890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011894:	b94b      	cbnz	r3, 80118aa <_raise_r+0x32>
 8011896:	4620      	mov	r0, r4
 8011898:	f000 f830 	bl	80118fc <_getpid_r>
 801189c:	462a      	mov	r2, r5
 801189e:	4601      	mov	r1, r0
 80118a0:	4620      	mov	r0, r4
 80118a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118a6:	f000 b817 	b.w	80118d8 <_kill_r>
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d00a      	beq.n	80118c4 <_raise_r+0x4c>
 80118ae:	1c59      	adds	r1, r3, #1
 80118b0:	d103      	bne.n	80118ba <_raise_r+0x42>
 80118b2:	2316      	movs	r3, #22
 80118b4:	6003      	str	r3, [r0, #0]
 80118b6:	2001      	movs	r0, #1
 80118b8:	e7e7      	b.n	801188a <_raise_r+0x12>
 80118ba:	2400      	movs	r4, #0
 80118bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118c0:	4628      	mov	r0, r5
 80118c2:	4798      	blx	r3
 80118c4:	2000      	movs	r0, #0
 80118c6:	e7e0      	b.n	801188a <_raise_r+0x12>

080118c8 <raise>:
 80118c8:	4b02      	ldr	r3, [pc, #8]	; (80118d4 <raise+0xc>)
 80118ca:	4601      	mov	r1, r0
 80118cc:	6818      	ldr	r0, [r3, #0]
 80118ce:	f7ff bfd3 	b.w	8011878 <_raise_r>
 80118d2:	bf00      	nop
 80118d4:	2000002c 	.word	0x2000002c

080118d8 <_kill_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4d07      	ldr	r5, [pc, #28]	; (80118f8 <_kill_r+0x20>)
 80118dc:	2300      	movs	r3, #0
 80118de:	4604      	mov	r4, r0
 80118e0:	4608      	mov	r0, r1
 80118e2:	4611      	mov	r1, r2
 80118e4:	602b      	str	r3, [r5, #0]
 80118e6:	f7f2 fb31 	bl	8003f4c <_kill>
 80118ea:	1c43      	adds	r3, r0, #1
 80118ec:	d102      	bne.n	80118f4 <_kill_r+0x1c>
 80118ee:	682b      	ldr	r3, [r5, #0]
 80118f0:	b103      	cbz	r3, 80118f4 <_kill_r+0x1c>
 80118f2:	6023      	str	r3, [r4, #0]
 80118f4:	bd38      	pop	{r3, r4, r5, pc}
 80118f6:	bf00      	nop
 80118f8:	200029c4 	.word	0x200029c4

080118fc <_getpid_r>:
 80118fc:	f7f2 bb1e 	b.w	8003f3c <_getpid>

08011900 <sqrt>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	ed2d 8b02 	vpush	{d8}
 8011906:	ec55 4b10 	vmov	r4, r5, d0
 801190a:	f000 f825 	bl	8011958 <__ieee754_sqrt>
 801190e:	4622      	mov	r2, r4
 8011910:	462b      	mov	r3, r5
 8011912:	4620      	mov	r0, r4
 8011914:	4629      	mov	r1, r5
 8011916:	eeb0 8a40 	vmov.f32	s16, s0
 801191a:	eef0 8a60 	vmov.f32	s17, s1
 801191e:	f7ef f8dd 	bl	8000adc <__aeabi_dcmpun>
 8011922:	b990      	cbnz	r0, 801194a <sqrt+0x4a>
 8011924:	2200      	movs	r2, #0
 8011926:	2300      	movs	r3, #0
 8011928:	4620      	mov	r0, r4
 801192a:	4629      	mov	r1, r5
 801192c:	f7ef f8ae 	bl	8000a8c <__aeabi_dcmplt>
 8011930:	b158      	cbz	r0, 801194a <sqrt+0x4a>
 8011932:	f7fd f9b1 	bl	800ec98 <__errno>
 8011936:	2321      	movs	r3, #33	; 0x21
 8011938:	6003      	str	r3, [r0, #0]
 801193a:	2200      	movs	r2, #0
 801193c:	2300      	movs	r3, #0
 801193e:	4610      	mov	r0, r2
 8011940:	4619      	mov	r1, r3
 8011942:	f7ee ff5b 	bl	80007fc <__aeabi_ddiv>
 8011946:	ec41 0b18 	vmov	d8, r0, r1
 801194a:	eeb0 0a48 	vmov.f32	s0, s16
 801194e:	eef0 0a68 	vmov.f32	s1, s17
 8011952:	ecbd 8b02 	vpop	{d8}
 8011956:	bd38      	pop	{r3, r4, r5, pc}

08011958 <__ieee754_sqrt>:
 8011958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195c:	ec55 4b10 	vmov	r4, r5, d0
 8011960:	4e55      	ldr	r6, [pc, #340]	; (8011ab8 <__ieee754_sqrt+0x160>)
 8011962:	43ae      	bics	r6, r5
 8011964:	ee10 0a10 	vmov	r0, s0
 8011968:	ee10 3a10 	vmov	r3, s0
 801196c:	462a      	mov	r2, r5
 801196e:	4629      	mov	r1, r5
 8011970:	d110      	bne.n	8011994 <__ieee754_sqrt+0x3c>
 8011972:	ee10 2a10 	vmov	r2, s0
 8011976:	462b      	mov	r3, r5
 8011978:	f7ee fe16 	bl	80005a8 <__aeabi_dmul>
 801197c:	4602      	mov	r2, r0
 801197e:	460b      	mov	r3, r1
 8011980:	4620      	mov	r0, r4
 8011982:	4629      	mov	r1, r5
 8011984:	f7ee fc5a 	bl	800023c <__adddf3>
 8011988:	4604      	mov	r4, r0
 801198a:	460d      	mov	r5, r1
 801198c:	ec45 4b10 	vmov	d0, r4, r5
 8011990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011994:	2d00      	cmp	r5, #0
 8011996:	dc10      	bgt.n	80119ba <__ieee754_sqrt+0x62>
 8011998:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801199c:	4330      	orrs	r0, r6
 801199e:	d0f5      	beq.n	801198c <__ieee754_sqrt+0x34>
 80119a0:	b15d      	cbz	r5, 80119ba <__ieee754_sqrt+0x62>
 80119a2:	ee10 2a10 	vmov	r2, s0
 80119a6:	462b      	mov	r3, r5
 80119a8:	ee10 0a10 	vmov	r0, s0
 80119ac:	f7ee fc44 	bl	8000238 <__aeabi_dsub>
 80119b0:	4602      	mov	r2, r0
 80119b2:	460b      	mov	r3, r1
 80119b4:	f7ee ff22 	bl	80007fc <__aeabi_ddiv>
 80119b8:	e7e6      	b.n	8011988 <__ieee754_sqrt+0x30>
 80119ba:	1512      	asrs	r2, r2, #20
 80119bc:	d074      	beq.n	8011aa8 <__ieee754_sqrt+0x150>
 80119be:	07d4      	lsls	r4, r2, #31
 80119c0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80119c4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80119c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80119cc:	bf5e      	ittt	pl
 80119ce:	0fda      	lsrpl	r2, r3, #31
 80119d0:	005b      	lslpl	r3, r3, #1
 80119d2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80119d6:	2400      	movs	r4, #0
 80119d8:	0fda      	lsrs	r2, r3, #31
 80119da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80119de:	107f      	asrs	r7, r7, #1
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	2516      	movs	r5, #22
 80119e4:	4620      	mov	r0, r4
 80119e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80119ea:	1886      	adds	r6, r0, r2
 80119ec:	428e      	cmp	r6, r1
 80119ee:	bfde      	ittt	le
 80119f0:	1b89      	suble	r1, r1, r6
 80119f2:	18b0      	addle	r0, r6, r2
 80119f4:	18a4      	addle	r4, r4, r2
 80119f6:	0049      	lsls	r1, r1, #1
 80119f8:	3d01      	subs	r5, #1
 80119fa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80119fe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011a02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a06:	d1f0      	bne.n	80119ea <__ieee754_sqrt+0x92>
 8011a08:	462a      	mov	r2, r5
 8011a0a:	f04f 0e20 	mov.w	lr, #32
 8011a0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011a12:	4281      	cmp	r1, r0
 8011a14:	eb06 0c05 	add.w	ip, r6, r5
 8011a18:	dc02      	bgt.n	8011a20 <__ieee754_sqrt+0xc8>
 8011a1a:	d113      	bne.n	8011a44 <__ieee754_sqrt+0xec>
 8011a1c:	459c      	cmp	ip, r3
 8011a1e:	d811      	bhi.n	8011a44 <__ieee754_sqrt+0xec>
 8011a20:	f1bc 0f00 	cmp.w	ip, #0
 8011a24:	eb0c 0506 	add.w	r5, ip, r6
 8011a28:	da43      	bge.n	8011ab2 <__ieee754_sqrt+0x15a>
 8011a2a:	2d00      	cmp	r5, #0
 8011a2c:	db41      	blt.n	8011ab2 <__ieee754_sqrt+0x15a>
 8011a2e:	f100 0801 	add.w	r8, r0, #1
 8011a32:	1a09      	subs	r1, r1, r0
 8011a34:	459c      	cmp	ip, r3
 8011a36:	bf88      	it	hi
 8011a38:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8011a3c:	eba3 030c 	sub.w	r3, r3, ip
 8011a40:	4432      	add	r2, r6
 8011a42:	4640      	mov	r0, r8
 8011a44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011a48:	f1be 0e01 	subs.w	lr, lr, #1
 8011a4c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011a58:	d1db      	bne.n	8011a12 <__ieee754_sqrt+0xba>
 8011a5a:	430b      	orrs	r3, r1
 8011a5c:	d006      	beq.n	8011a6c <__ieee754_sqrt+0x114>
 8011a5e:	1c50      	adds	r0, r2, #1
 8011a60:	bf13      	iteet	ne
 8011a62:	3201      	addne	r2, #1
 8011a64:	3401      	addeq	r4, #1
 8011a66:	4672      	moveq	r2, lr
 8011a68:	f022 0201 	bicne.w	r2, r2, #1
 8011a6c:	1063      	asrs	r3, r4, #1
 8011a6e:	0852      	lsrs	r2, r2, #1
 8011a70:	07e1      	lsls	r1, r4, #31
 8011a72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011a76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011a7a:	bf48      	it	mi
 8011a7c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011a80:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011a84:	4614      	mov	r4, r2
 8011a86:	e781      	b.n	801198c <__ieee754_sqrt+0x34>
 8011a88:	0ad9      	lsrs	r1, r3, #11
 8011a8a:	3815      	subs	r0, #21
 8011a8c:	055b      	lsls	r3, r3, #21
 8011a8e:	2900      	cmp	r1, #0
 8011a90:	d0fa      	beq.n	8011a88 <__ieee754_sqrt+0x130>
 8011a92:	02cd      	lsls	r5, r1, #11
 8011a94:	d50a      	bpl.n	8011aac <__ieee754_sqrt+0x154>
 8011a96:	f1c2 0420 	rsb	r4, r2, #32
 8011a9a:	fa23 f404 	lsr.w	r4, r3, r4
 8011a9e:	1e55      	subs	r5, r2, #1
 8011aa0:	4093      	lsls	r3, r2
 8011aa2:	4321      	orrs	r1, r4
 8011aa4:	1b42      	subs	r2, r0, r5
 8011aa6:	e78a      	b.n	80119be <__ieee754_sqrt+0x66>
 8011aa8:	4610      	mov	r0, r2
 8011aaa:	e7f0      	b.n	8011a8e <__ieee754_sqrt+0x136>
 8011aac:	0049      	lsls	r1, r1, #1
 8011aae:	3201      	adds	r2, #1
 8011ab0:	e7ef      	b.n	8011a92 <__ieee754_sqrt+0x13a>
 8011ab2:	4680      	mov	r8, r0
 8011ab4:	e7bd      	b.n	8011a32 <__ieee754_sqrt+0xda>
 8011ab6:	bf00      	nop
 8011ab8:	7ff00000 	.word	0x7ff00000

08011abc <_init>:
 8011abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011abe:	bf00      	nop
 8011ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ac2:	bc08      	pop	{r3}
 8011ac4:	469e      	mov	lr, r3
 8011ac6:	4770      	bx	lr

08011ac8 <_fini>:
 8011ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aca:	bf00      	nop
 8011acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ace:	bc08      	pop	{r3}
 8011ad0:	469e      	mov	lr, r3
 8011ad2:	4770      	bx	lr
