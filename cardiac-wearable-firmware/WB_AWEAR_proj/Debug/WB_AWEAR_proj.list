
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d998  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800dad8  0800dad8  0001dad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800df70  0800df70  0001df70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800df78  0800df78  0001df78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800df80  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800e004  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800e887  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800e8bc  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000934  2000095c  0800e8cd  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001290  0800e8cd  00021290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0003601e  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006896  00000000  00000000  000569a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f28  00000000  00000000  0005d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002c40  00000000  00000000  00060168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e9ed  00000000  00000000  00062da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034f1e  00000000  00000000  00091795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ffe4a  00000000  00000000  000c66b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001c64fd  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d120  00000000  00000000  001c6550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dac0 	.word	0x0800dac0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800dac0 	.word	0x0800dac0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_d2uiz>:
 80005a8:	004a      	lsls	r2, r1, #1
 80005aa:	d211      	bcs.n	80005d0 <__aeabi_d2uiz+0x28>
 80005ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005b0:	d211      	bcs.n	80005d6 <__aeabi_d2uiz+0x2e>
 80005b2:	d50d      	bpl.n	80005d0 <__aeabi_d2uiz+0x28>
 80005b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005bc:	d40e      	bmi.n	80005dc <__aeabi_d2uiz+0x34>
 80005be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005ca:	fa23 f002 	lsr.w	r0, r3, r2
 80005ce:	4770      	bx	lr
 80005d0:	f04f 0000 	mov.w	r0, #0
 80005d4:	4770      	bx	lr
 80005d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005da:	d102      	bne.n	80005e2 <__aeabi_d2uiz+0x3a>
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e0:	4770      	bx	lr
 80005e2:	f04f 0000 	mov.w	r0, #0
 80005e6:	4770      	bx	lr

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005fc:	f000 b974 	b.w	80008e8 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	468e      	mov	lr, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d14d      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000626:	428a      	cmp	r2, r1
 8000628:	4694      	mov	ip, r2
 800062a:	d969      	bls.n	8000700 <__udivmoddi4+0xe8>
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	b152      	cbz	r2, 8000648 <__udivmoddi4+0x30>
 8000632:	fa01 f302 	lsl.w	r3, r1, r2
 8000636:	f1c2 0120 	rsb	r1, r2, #32
 800063a:	fa20 f101 	lsr.w	r1, r0, r1
 800063e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000642:	ea41 0e03 	orr.w	lr, r1, r3
 8000646:	4094      	lsls	r4, r2
 8000648:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800064c:	0c21      	lsrs	r1, r4, #16
 800064e:	fbbe f6f8 	udiv	r6, lr, r8
 8000652:	fa1f f78c 	uxth.w	r7, ip
 8000656:	fb08 e316 	mls	r3, r8, r6, lr
 800065a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800065e:	fb06 f107 	mul.w	r1, r6, r7
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800066e:	f080 811f 	bcs.w	80008b0 <__udivmoddi4+0x298>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 811c 	bls.w	80008b0 <__udivmoddi4+0x298>
 8000678:	3e02      	subs	r6, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	b2a4      	uxth	r4, r4
 8000680:	fbb3 f0f8 	udiv	r0, r3, r8
 8000684:	fb08 3310 	mls	r3, r8, r0, r3
 8000688:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800068c:	fb00 f707 	mul.w	r7, r0, r7
 8000690:	42a7      	cmp	r7, r4
 8000692:	d90a      	bls.n	80006aa <__udivmoddi4+0x92>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800069c:	f080 810a 	bcs.w	80008b4 <__udivmoddi4+0x29c>
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	f240 8107 	bls.w	80008b4 <__udivmoddi4+0x29c>
 80006a6:	4464      	add	r4, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ae:	1be4      	subs	r4, r4, r7
 80006b0:	2600      	movs	r6, #0
 80006b2:	b11d      	cbz	r5, 80006bc <__udivmoddi4+0xa4>
 80006b4:	40d4      	lsrs	r4, r2
 80006b6:	2300      	movs	r3, #0
 80006b8:	e9c5 4300 	strd	r4, r3, [r5]
 80006bc:	4631      	mov	r1, r6
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d909      	bls.n	80006da <__udivmoddi4+0xc2>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	f000 80ef 	beq.w	80008aa <__udivmoddi4+0x292>
 80006cc:	2600      	movs	r6, #0
 80006ce:	e9c5 0100 	strd	r0, r1, [r5]
 80006d2:	4630      	mov	r0, r6
 80006d4:	4631      	mov	r1, r6
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006da:	fab3 f683 	clz	r6, r3
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d14a      	bne.n	8000778 <__udivmoddi4+0x160>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d302      	bcc.n	80006ec <__udivmoddi4+0xd4>
 80006e6:	4282      	cmp	r2, r0
 80006e8:	f200 80f9 	bhi.w	80008de <__udivmoddi4+0x2c6>
 80006ec:	1a84      	subs	r4, r0, r2
 80006ee:	eb61 0303 	sbc.w	r3, r1, r3
 80006f2:	2001      	movs	r0, #1
 80006f4:	469e      	mov	lr, r3
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d0e0      	beq.n	80006bc <__udivmoddi4+0xa4>
 80006fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006fe:	e7dd      	b.n	80006bc <__udivmoddi4+0xa4>
 8000700:	b902      	cbnz	r2, 8000704 <__udivmoddi4+0xec>
 8000702:	deff      	udf	#255	; 0xff
 8000704:	fab2 f282 	clz	r2, r2
 8000708:	2a00      	cmp	r2, #0
 800070a:	f040 8092 	bne.w	8000832 <__udivmoddi4+0x21a>
 800070e:	eba1 010c 	sub.w	r1, r1, ip
 8000712:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000716:	fa1f fe8c 	uxth.w	lr, ip
 800071a:	2601      	movs	r6, #1
 800071c:	0c20      	lsrs	r0, r4, #16
 800071e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000722:	fb07 1113 	mls	r1, r7, r3, r1
 8000726:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800072a:	fb0e f003 	mul.w	r0, lr, r3
 800072e:	4288      	cmp	r0, r1
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x12c>
 8000732:	eb1c 0101 	adds.w	r1, ip, r1
 8000736:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x12a>
 800073c:	4288      	cmp	r0, r1
 800073e:	f200 80cb 	bhi.w	80008d8 <__udivmoddi4+0x2c0>
 8000742:	4643      	mov	r3, r8
 8000744:	1a09      	subs	r1, r1, r0
 8000746:	b2a4      	uxth	r4, r4
 8000748:	fbb1 f0f7 	udiv	r0, r1, r7
 800074c:	fb07 1110 	mls	r1, r7, r0, r1
 8000750:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000754:	fb0e fe00 	mul.w	lr, lr, r0
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x156>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000764:	d202      	bcs.n	800076c <__udivmoddi4+0x154>
 8000766:	45a6      	cmp	lr, r4
 8000768:	f200 80bb 	bhi.w	80008e2 <__udivmoddi4+0x2ca>
 800076c:	4608      	mov	r0, r1
 800076e:	eba4 040e 	sub.w	r4, r4, lr
 8000772:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000776:	e79c      	b.n	80006b2 <__udivmoddi4+0x9a>
 8000778:	f1c6 0720 	rsb	r7, r6, #32
 800077c:	40b3      	lsls	r3, r6
 800077e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000782:	ea4c 0c03 	orr.w	ip, ip, r3
 8000786:	fa20 f407 	lsr.w	r4, r0, r7
 800078a:	fa01 f306 	lsl.w	r3, r1, r6
 800078e:	431c      	orrs	r4, r3
 8000790:	40f9      	lsrs	r1, r7
 8000792:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000796:	fa00 f306 	lsl.w	r3, r0, r6
 800079a:	fbb1 f8f9 	udiv	r8, r1, r9
 800079e:	0c20      	lsrs	r0, r4, #16
 80007a0:	fa1f fe8c 	uxth.w	lr, ip
 80007a4:	fb09 1118 	mls	r1, r9, r8, r1
 80007a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ac:	fb08 f00e 	mul.w	r0, r8, lr
 80007b0:	4288      	cmp	r0, r1
 80007b2:	fa02 f206 	lsl.w	r2, r2, r6
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b8>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007c0:	f080 8088 	bcs.w	80008d4 <__udivmoddi4+0x2bc>
 80007c4:	4288      	cmp	r0, r1
 80007c6:	f240 8085 	bls.w	80008d4 <__udivmoddi4+0x2bc>
 80007ca:	f1a8 0802 	sub.w	r8, r8, #2
 80007ce:	4461      	add	r1, ip
 80007d0:	1a09      	subs	r1, r1, r0
 80007d2:	b2a4      	uxth	r4, r4
 80007d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d8:	fb09 1110 	mls	r1, r9, r0, r1
 80007dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007e4:	458e      	cmp	lr, r1
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1e2>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007f0:	d26c      	bcs.n	80008cc <__udivmoddi4+0x2b4>
 80007f2:	458e      	cmp	lr, r1
 80007f4:	d96a      	bls.n	80008cc <__udivmoddi4+0x2b4>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4461      	add	r1, ip
 80007fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000802:	eba1 010e 	sub.w	r1, r1, lr
 8000806:	42a1      	cmp	r1, r4
 8000808:	46c8      	mov	r8, r9
 800080a:	46a6      	mov	lr, r4
 800080c:	d356      	bcc.n	80008bc <__udivmoddi4+0x2a4>
 800080e:	d053      	beq.n	80008b8 <__udivmoddi4+0x2a0>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x212>
 8000812:	ebb3 0208 	subs.w	r2, r3, r8
 8000816:	eb61 010e 	sbc.w	r1, r1, lr
 800081a:	fa01 f707 	lsl.w	r7, r1, r7
 800081e:	fa22 f306 	lsr.w	r3, r2, r6
 8000822:	40f1      	lsrs	r1, r6
 8000824:	431f      	orrs	r7, r3
 8000826:	e9c5 7100 	strd	r7, r1, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	f1c2 0320 	rsb	r3, r2, #32
 8000836:	40d8      	lsrs	r0, r3
 8000838:	fa0c fc02 	lsl.w	ip, ip, r2
 800083c:	fa21 f303 	lsr.w	r3, r1, r3
 8000840:	4091      	lsls	r1, r2
 8000842:	4301      	orrs	r1, r0
 8000844:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000848:	fa1f fe8c 	uxth.w	lr, ip
 800084c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000850:	fb07 3610 	mls	r6, r7, r0, r3
 8000854:	0c0b      	lsrs	r3, r1, #16
 8000856:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800085a:	fb00 f60e 	mul.w	r6, r0, lr
 800085e:	429e      	cmp	r6, r3
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x260>
 8000866:	eb1c 0303 	adds.w	r3, ip, r3
 800086a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800086e:	d22f      	bcs.n	80008d0 <__udivmoddi4+0x2b8>
 8000870:	429e      	cmp	r6, r3
 8000872:	d92d      	bls.n	80008d0 <__udivmoddi4+0x2b8>
 8000874:	3802      	subs	r0, #2
 8000876:	4463      	add	r3, ip
 8000878:	1b9b      	subs	r3, r3, r6
 800087a:	b289      	uxth	r1, r1
 800087c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000880:	fb07 3316 	mls	r3, r7, r6, r3
 8000884:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000888:	fb06 f30e 	mul.w	r3, r6, lr
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x28a>
 8000890:	eb1c 0101 	adds.w	r1, ip, r1
 8000894:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000898:	d216      	bcs.n	80008c8 <__udivmoddi4+0x2b0>
 800089a:	428b      	cmp	r3, r1
 800089c:	d914      	bls.n	80008c8 <__udivmoddi4+0x2b0>
 800089e:	3e02      	subs	r6, #2
 80008a0:	4461      	add	r1, ip
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a8:	e738      	b.n	800071c <__udivmoddi4+0x104>
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e705      	b.n	80006bc <__udivmoddi4+0xa4>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e3      	b.n	800067c <__udivmoddi4+0x64>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6f8      	b.n	80006aa <__udivmoddi4+0x92>
 80008b8:	454b      	cmp	r3, r9
 80008ba:	d2a9      	bcs.n	8000810 <__udivmoddi4+0x1f8>
 80008bc:	ebb9 0802 	subs.w	r8, r9, r2
 80008c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7a3      	b.n	8000810 <__udivmoddi4+0x1f8>
 80008c8:	4646      	mov	r6, r8
 80008ca:	e7ea      	b.n	80008a2 <__udivmoddi4+0x28a>
 80008cc:	4620      	mov	r0, r4
 80008ce:	e794      	b.n	80007fa <__udivmoddi4+0x1e2>
 80008d0:	4640      	mov	r0, r8
 80008d2:	e7d1      	b.n	8000878 <__udivmoddi4+0x260>
 80008d4:	46d0      	mov	r8, sl
 80008d6:	e77b      	b.n	80007d0 <__udivmoddi4+0x1b8>
 80008d8:	3b02      	subs	r3, #2
 80008da:	4461      	add	r1, ip
 80008dc:	e732      	b.n	8000744 <__udivmoddi4+0x12c>
 80008de:	4630      	mov	r0, r6
 80008e0:	e709      	b.n	80006f6 <__udivmoddi4+0xde>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	e742      	b.n	800076e <__udivmoddi4+0x156>

080008e8 <__aeabi_idiv0>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <BH1790GLC_init>:

/*****************************************************************************
INIT FUNCTION
******************************************************************************/
uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	80da      	strh	r2, [r3, #6]

	dev->samples_index = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000910:	f107 030e 	add.w	r3, r7, #14
 8000914:	461a      	mov	r2, r3
 8000916:	210f      	movs	r1, #15
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fa67 	bl	8000dec <read>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <BH1790GLC_init+0x40>
		return ERR_MID_VAL;
 8000928:	230a      	movs	r3, #10
 800092a:	e04a      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	if(regData != BH1790GLC_MID_VAL){
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	2be0      	cmp	r3, #224	; 0xe0
 8000930:	d001      	beq.n	8000936 <BH1790GLC_init+0x4a>
		return ERR_MID_VAL;
 8000932:	230a      	movs	r3, #10
 8000934:	e045      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000936:	f107 030e 	add.w	r3, r7, #14
 800093a:	461a      	mov	r2, r3
 800093c:	2110      	movs	r1, #16
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fa54 	bl	8000dec <read>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <BH1790GLC_init+0x66>
		return ERR_PID_VAL;
 800094e:	230b      	movs	r3, #11
 8000950:	e037      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b0d      	cmp	r3, #13
 8000956:	d001      	beq.n	800095c <BH1790GLC_init+0x70>
		return ERR_PID_VAL;
 8000958:	230b      	movs	r3, #11
 800095a:	e032      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800095c:	2382      	movs	r3, #130	; 0x82
 800095e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 8000960:	230c      	movs	r3, #12
 8000962:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 8000964:	2301      	movs	r3, #1
 8000966:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	461a      	mov	r2, r3
 800096e:	2141      	movs	r1, #65	; 0x41
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa19 	bl	8000da8 <write>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <BH1790GLC_init+0x98>
		return ERR_MEAS_CONTROL1;
 8000980:	2314      	movs	r3, #20
 8000982:	e01e      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	2142      	movs	r1, #66	; 0x42
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 fa0a 	bl	8000da8 <write>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <BH1790GLC_init+0xb6>
		return ERR_MEAS_CONTROL2;
 800099e:	2315      	movs	r3, #21
 80009a0:	e00f      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	3302      	adds	r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	2143      	movs	r1, #67	; 0x43
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f9fb 	bl	8000da8 <write>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <BH1790GLC_init+0xd4>
		return ERR_MEAS_START;
 80009bc:	2316      	movs	r3, #22
 80009be:	e000      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	return SUCCESS;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <get_val>:
******************************************************************************/
/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 80009d2:	f107 0208 	add.w	r2, r7, #8
 80009d6:	2304      	movs	r3, #4
 80009d8:	2154      	movs	r1, #84	; 0x54
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 fa28 	bl	8000e30 <many_reads>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 80009ea:	231e      	movs	r3, #30
 80009ec:	e014      	b.n	8000a18 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 80009ee:	7a7b      	ldrb	r3, [r7, #9]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <add_sample>:
	}

	return SUCCESS;
}

uint8_t add_sample( BH1790GLC *dev ){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]


	dev->ppg_samples[dev->samples_index] = dev->ppg_data[1];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	88d9      	ldrh	r1, [r3, #6]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3204      	adds	r2, #4
 8000a38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	dev->samples_index++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a42:	3301      	adds	r3, #1
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0

	if(dev->samples_index==500){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a56:	d105      	bne.n	8000a64 <add_sample+0x44>

		dev->samples_index = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
		return 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <add_sample+0x46>

	}

	return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <ppg_calculate>:

uint8_t ppg_calculate( BH1790GLC *dev ){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	f6ad 4d48 	subw	sp, sp, #3144	; 0xc48
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000a80:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8000a84:	6018      	str	r0, [r3, #0]

	  uint16_t smooth_array[500];
	  int deriv_array[499];

	  uint16_t raw_data_1;
	  float smooth_data_1 = 0;
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	f607 4244 	addw	r2, r7, #3140	; 0xc44
 8000a8e:	6013      	str	r3, [r2, #0]
	  float lpf_beta = 0.08;
 8000a90:	4bc1      	ldr	r3, [pc, #772]	; (8000d98 <ppg_calculate+0x324>)
 8000a92:	f607 4218 	addw	r2, r7, #3096	; 0xc18
 8000a96:	6013      	str	r3, [r2, #0]

	  for(int i = 0; i < 500; i++){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
 8000a9e:	e07b      	b.n	8000b98 <ppg_calculate+0x124>

		  raw_data_1 = dev->ppg_samples[i];
 8000aa0:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000aa4:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000aae:	3204      	adds	r2, #4
 8000ab0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ab4:	f8a7 3c12 	strh.w	r3, [r7, #3090]	; 0xc12
		  smooth_data_1 = smooth_data_1 - (lpf_beta*(smooth_data_1 - raw_data_1));
 8000ab8:	f8b7 3c12 	ldrh.w	r3, [r7, #3090]	; 0xc12
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac4:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000ac8:	ed93 7a00 	vldr	s14, [r3]
 8000acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8000ad4:	edd3 7a00 	vldr	s15, [r3]
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000ae0:	ed93 7a00 	vldr	s14, [r3]
 8000ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae8:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000aec:	edc3 7a00 	vstr	s15, [r3]
		  smooth_array[i] = smooth_data_1;
 8000af0:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000af4:	edd3 7a00 	vldr	s15, [r3]
 8000af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afc:	ee17 3a90 	vmov	r3, s15
 8000b00:	b299      	uxth	r1, r3
 8000b02:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b06:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b0a:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  if(i!=0){
 8000b12:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d039      	beq.n	8000b8e <ppg_calculate+0x11a>


			  int deriv = (int)smooth_array[i] - (int)smooth_array[i-1];
 8000b1a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b1e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b22:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b36:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b3e:	1acb      	subs	r3, r1, r3
 8000b40:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
			  if(deriv<255 || deriv>-255){
 8000b44:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8000b48:	2bfe      	cmp	r3, #254	; 0xfe
 8000b4a:	dd04      	ble.n	8000b56 <ppg_calculate+0xe2>
 8000b4c:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8000b50:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000b54:	db0a      	blt.n	8000b6c <ppg_calculate+0xf8>

				 deriv_array[i] = deriv;
 8000b56:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b5a:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b5e:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b62:	f8d7 1c0c 	ldr.w	r1, [r7, #3084]	; 0xc0c
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000b6a:	e010      	b.n	8000b8e <ppg_calculate+0x11a>

			  } else {

				 deriv_array[i] = deriv_array[i-1];
 8000b6c:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b76:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b7e:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b82:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b86:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int i = 0; i < 500; i++){
 8000b8e:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b92:	3301      	adds	r3, #1
 8000b94:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
 8000b98:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ba0:	f6ff af7e 	blt.w	8000aa0 <ppg_calculate+0x2c>

		  }

	  }

	  int pos = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
	  int neg = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38

	  int pos_check = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
	  int neg_check = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14

	  int peak_vals[20] = {};
 8000bbc:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000bc0:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	2350      	movs	r3, #80	; 0x50
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f00b fd40 	bl	800c650 <memset>
	  int peak_count = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30


	  for(int j = 0; j < 499; j++){
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8000bdc:	e066      	b.n	8000cac <ppg_calculate+0x238>



		  if(deriv_array[j]>0 && pos_check==0){
 8000bde:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000be2:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000be6:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd13      	ble.n	8000c1a <ppg_calculate+0x1a6>
 8000bf2:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <ppg_calculate+0x1a6>

			  neg = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
			  pos++;
 8000c00:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	; 0xc3c
 8000c04:	3301      	adds	r3, #1
 8000c06:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c

			  if(pos==3){
 8000c0a:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	; 0xc3c
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d147      	bne.n	8000ca2 <ppg_calculate+0x22e>

				  pos_check = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
			  if(pos==3){
 8000c18:	e043      	b.n	8000ca2 <ppg_calculate+0x22e>

			  }

		  } else if (deriv_array[j]<0 && pos_check==1) {
 8000c1a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c1e:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000c22:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da28      	bge.n	8000c80 <ppg_calculate+0x20c>
 8000c2e:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d124      	bne.n	8000c80 <ppg_calculate+0x20c>

			  pos = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
			  neg++;
 8000c3c:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	; 0xc38
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38

			  if(neg==3){
 8000c46:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	; 0xc38
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d129      	bne.n	8000ca2 <ppg_calculate+0x22e>

				  neg_check = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
				  peak_vals[peak_count] = j;
 8000c54:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c58:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000c5c:	f8d7 2c30 	ldr.w	r2, [r7, #3120]	; 0xc30
 8000c60:	f8d7 1c2c 	ldr.w	r1, [r7, #3116]	; 0xc2c
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  peak_count++;
 8000c68:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30

				  pos_check = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
				  neg_check = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
			  if(neg==3){
 8000c7e:	e010      	b.n	8000ca2 <ppg_calculate+0x22e>

			  }


		  } else if (deriv_array[j]<0 && pos_check==0){
 8000c80:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c84:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000c88:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da06      	bge.n	8000ca2 <ppg_calculate+0x22e>
 8000c94:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <ppg_calculate+0x22e>
			  pos = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
	  for(int j = 0; j < 499; j++){
 8000ca2:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8000cac:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8000cb0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8000cb4:	dd93      	ble.n	8000bde <ppg_calculate+0x16a>
		  }

	  }

	  printf("{");
 8000cb6:	207b      	movs	r0, #123	; 0x7b
 8000cb8:	f00b fcea 	bl	800c690 <putchar>

	  for(int k = 0; k<20; k++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8000cc2:	e010      	b.n	8000ce6 <ppg_calculate+0x272>

		  printf("[%d],", peak_vals[k]);
 8000cc4:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000cc8:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000ccc:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4831      	ldr	r0, [pc, #196]	; (8000d9c <ppg_calculate+0x328>)
 8000cd8:	f00b fcc2 	bl	800c660 <iprintf>
	  for(int k = 0; k<20; k++){
 8000cdc:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8000ce6:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8000cea:	2b13      	cmp	r3, #19
 8000cec:	ddea      	ble.n	8000cc4 <ppg_calculate+0x250>

	  }
	  printf("}\n");
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <ppg_calculate+0x32c>)
 8000cf0:	f00b fd52 	bl	800c798 <puts>

	  double sum = 0;
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]

	  for(int k =1; k<peak_count; k++){
 8000d04:	2301      	movs	r3, #1
 8000d06:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8000d0a:	e027      	b.n	8000d5c <ppg_calculate+0x2e8>

		  sum += peak_vals[k] - peak_vals[k-1];
 8000d0c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000d10:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000d14:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8000d18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d1c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8000d20:	1e59      	subs	r1, r3, #1
 8000d22:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000d26:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbcf 	bl	80004d4 <__aeabi_i2d>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d42:	f7ff fa7b 	bl	800023c <__adddf3>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d4e:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int k =1; k<peak_count; k++){
 8000d52:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8000d56:	3301      	adds	r3, #1
 8000d58:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8000d5c:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8000d60:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbd1      	blt.n	8000d0c <ppg_calculate+0x298>

	  }

	  printf("{{{%d}}}\n",(uint8_t)sum/(peak_count-1));
 8000d68:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	f7ff fc1a 	bl	80005a8 <__aeabi_d2uiz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <ppg_calculate+0x330>)
 8000d88:	f00b fc6a 	bl	800c660 <iprintf>

}
 8000d8c:	bf00      	nop
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f607 4748 	addw	r7, r7, #3144	; 0xc48
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	3da3d70a 	.word	0x3da3d70a
 8000d9c:	0800dad8 	.word	0x0800dad8
 8000da0:	0800dae0 	.word	0x0800dae0
 8000da4:	0800dae4 	.word	0x0800dae4

08000da8 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	460b      	mov	r3, r1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	21b6      	movs	r1, #182	; 0xb6
 8000dd0:	f003 fad0 	bl	8004374 <HAL_I2C_Mem_Write>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <write+0x3a>
		return ret;			//error check
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	e000      	b.n	8000de4 <write+0x3c>
	}

	return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	460b      	mov	r3, r1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	21b6      	movs	r1, #182	; 0xb6
 8000e14:	f003 fbc2 	bl	800459c <HAL_I2C_Mem_Read>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <read+0x3a>
		return ret;			//error check
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	e000      	b.n	8000e28 <read+0x3c>
	}


	return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	72fb      	strb	r3, [r7, #11]
 8000e40:	4613      	mov	r3, r2
 8000e42:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	7abb      	ldrb	r3, [r7, #10]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e54:	9102      	str	r1, [sp, #8]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	21b6      	movs	r1, #182	; 0xb6
 8000e60:	f003 fb9c 	bl	800459c <HAL_I2C_Mem_Read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <many_reads+0x42>
		return ret;			//error check
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	e000      	b.n	8000e74 <many_reads+0x44>
	}

	return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ICM_PowerOn>:
INIT FUNCTIONS
******************************************************************************/
/*
 * Sequence to setup ICM290948 as early as possible after power on
 */
void ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0b6      	sub	sp, #216	; 0xd8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
	dev->spiHandle = spiHandle;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	829a      	strh	r2, [r3, #20]

	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 8000ec2:	23ea      	movs	r3, #234	; 0xea
 8000ec4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	uint8_t test = ICM_WHOAMI(dev);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f96c 	bl	80011a6 <ICM_WHOAMI>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	//if (test == whoami) {
		ICM_CSHigh();
 8000ed4:	f000 f996 	bl	8001204 <ICM_CSHigh>
		HAL_Delay(10);
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f000 fdee 	bl	8001aba <HAL_Delay>
		ICM_SelectBank(dev, USER_BANK_0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f972 	bl	80011ca <ICM_SelectBank>
		HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f000 fde7 	bl	8001aba <HAL_Delay>
		ICM_Disable_I2C(dev);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f97c 	bl	80011ea <ICM_Disable_I2C>
		HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f000 fde1 	bl	8001aba <HAL_Delay>
		ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 8000ef8:	2101      	movs	r1, #1
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f98e 	bl	800121c <ICM_SetClock>
		HAL_Delay(10);
 8000f00:	200a      	movs	r0, #10
 8000f02:	f000 fdda 	bl	8001aba <HAL_Delay>
		ICM_AccelGyroOff(dev);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f998 	bl	800123c <ICM_AccelGyroOff>
		HAL_Delay(20);
 8000f0c:	2014      	movs	r0, #20
 8000f0e:	f000 fdd4 	bl	8001aba <HAL_Delay>
		ICM_AccelGyroOn(dev);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f99f 	bl	8001256 <ICM_AccelGyroOn>
		HAL_Delay(10);
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f000 fdce 	bl	8001aba <HAL_Delay>
		ICM_Initialize(dev);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f804 	bl	8000f2c <ICM_Initialize>
	//} else {
		//sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		//HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		//HAL_Delay(100);
	//}
}
 8000f24:	bf00      	nop
 8000f26:	37d8      	adds	r7, #216	; 0xd8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <ICM_Initialize>:

uint16_t ICM_Initialize(ICM20948 *dev) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(dev, USER_BANK_2);
 8000f34:	2120      	movs	r1, #32
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f947 	bl	80011ca <ICM_SelectBank>
	HAL_Delay(20);
 8000f3c:	2014      	movs	r0, #20
 8000f3e:	f000 fdbc 	bl	8001aba <HAL_Delay>
	ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 8000f42:	2229      	movs	r2, #41	; 0x29
 8000f44:	2100      	movs	r1, #0
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f992 	bl	8001270 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f000 fdb4 	bl	8001aba <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(dev, 0x00, 0x0A);
 8000f52:	220a      	movs	r2, #10
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fa08 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 fdac 	bl	8001aba <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(dev, 0x14, (0x04 | 0x11));
 8000f62:	2215      	movs	r2, #21
 8000f64:	2114      	movs	r1, #20
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fa00 	bl	800136c <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(dev, 0x10, 0x00);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f9fb 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f000 fd9f 	bl	8001aba <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(dev, 0x11, 0x0A);
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	2111      	movs	r1, #17
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f9f3 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f000 fd97 	bl	8001aba <HAL_Delay>

	ICM_SelectBank(dev, USER_BANK_2);
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 f91b 	bl	80011ca <ICM_SelectBank>
	HAL_Delay(20);
 8000f94:	2014      	movs	r0, #20
 8000f96:	f000 fd90 	bl	8001aba <HAL_Delay>

	// Configure AUX_I2C Magnetometer (onboard ICM-20948)
	ICM_WriteOneByte(dev, 0x7F, 0x00); // Select user bank 0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	217f      	movs	r1, #127	; 0x7f
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f9e4 	bl	800136c <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8000fa4:	2230      	movs	r2, #48	; 0x30
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f9df 	bl	800136c <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x03, 0x20); // I2C_MST_EN
 8000fae:	2220      	movs	r2, #32
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f9da 	bl	800136c <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x7F, 0x30); // Select user bank 3
 8000fb8:	2230      	movs	r2, #48	; 0x30
 8000fba:	217f      	movs	r1, #127	; 0x7f
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f9d5 	bl	800136c <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8000fc2:	224d      	movs	r2, #77	; 0x4d
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f9d0 	bl	800136c <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2102      	movs	r1, #2
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f9cb 	bl	800136c <ICM_WriteOneByte>
	ICM_WriteOneByte(dev, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8000fd6:	2281      	movs	r2, #129	; 0x81
 8000fd8:	2105      	movs	r1, #5
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f9c6 	bl	800136c <ICM_WriteOneByte>

	// Initialize magnetometer
	ICM_Mag_Write(dev, 0x32, 0x01); // Reset AK8963
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2132      	movs	r1, #50	; 0x32
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f9f1 	bl	80013cc <ICM_Mag_Write>
	HAL_Delay(1000);
 8000fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fee:	f000 fd64 	bl	8001aba <HAL_Delay>
	ICM_Mag_Write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	2131      	movs	r1, #49	; 0x31
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f9e8 	bl	80013cc <ICM_Mag_Write>

	return 1337;
 8000ffc:	f240 5339 	movw	r3, #1337	; 0x539
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <ICM_ReadAccelGyroData>:
DATA ACQUISITION FUNCTIONS
******************************************************************************/
/*
 * Read Accelerometer and Gyro data
 */
void ICM_ReadAccelGyroData(ICM20948 *dev) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(dev, 0x2D, raw_data, 12);
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	230c      	movs	r3, #12
 8001016:	212d      	movs	r1, #45	; 0x2d
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f93f 	bl	800129c <ICM_readBytes>

	dev->accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21b      	sxth	r3, r3
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8001046:	7c3b      	ldrb	r3, [r7, #16]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7c7b      	ldrb	r3, [r7, #17]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800105a:	7cbb      	ldrb	r3, [r7, #18]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7cfb      	ldrb	r3, [r7, #19]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800106e:	7d3b      	ldrb	r3, [r7, #20]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7d7b      	ldrb	r3, [r7, #21]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21b      	sxth	r3, r3
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8001082:	7dbb      	ldrb	r3, [r7, #22]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	b29a      	uxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	81da      	strh	r2, [r3, #14]

	dev->accel_data[0] = dev->accel_data[0] / 8;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	889b      	ldrh	r3, [r3, #4]
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = dev->accel_data[1] / 8;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	88db      	ldrh	r3, [r3, #6]
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = dev->accel_data[2] / 8;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	891b      	ldrh	r3, [r3, #8]
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	895b      	ldrh	r3, [r3, #10]
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <ICM_ReadAccelGyroData+0xf0>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	899b      	ldrh	r3, [r3, #12]
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <ICM_ReadAccelGyroData+0xf0>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	89db      	ldrh	r3, [r3, #14]
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <ICM_ReadAccelGyroData+0xf0>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	81da      	strh	r2, [r3, #14]
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	10624dd3 	.word	0x10624dd3

080010fc <ICM_ReadMagData>:

/*
 * Read magnetometer
 */
void ICM_ReadMagData(ICM20948 *dev, int16_t magn[3]) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];

	mag_buffer[0] =ICM_Mag_Read(dev, 0x01);
 8001106:	2101      	movs	r1, #1
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f98d 	bl	8001428 <ICM_Mag_Read>
 800110e:	4603      	mov	r3, r0
 8001110:	733b      	strb	r3, [r7, #12]

	mag_buffer[1] =ICM_Mag_Read(dev, 0x11);
 8001112:	2111      	movs	r1, #17
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f987 	bl	8001428 <ICM_Mag_Read>
 800111a:	4603      	mov	r3, r0
 800111c:	737b      	strb	r3, [r7, #13]
	mag_buffer[2] =ICM_Mag_Read(dev, 0x12);
 800111e:	2112      	movs	r1, #18
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f981 	bl	8001428 <ICM_Mag_Read>
 8001126:	4603      	mov	r3, r0
 8001128:	73bb      	strb	r3, [r7, #14]
	magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	b21a      	sxth	r2, r3
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	801a      	strh	r2, [r3, #0]
	mag_buffer[3] =ICM_Mag_Read(dev, 0x13);
 800113c:	2113      	movs	r1, #19
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f972 	bl	8001428 <ICM_Mag_Read>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
	mag_buffer[4] =ICM_Mag_Read(dev, 0x14);
 8001148:	2114      	movs	r1, #20
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f96c 	bl	8001428 <ICM_Mag_Read>
 8001150:	4603      	mov	r3, r0
 8001152:	743b      	strb	r3, [r7, #16]
	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	b219      	sxth	r1, r3
 8001158:	7c3b      	ldrb	r3, [r7, #16]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	b212      	sxth	r2, r2
 8001166:	801a      	strh	r2, [r3, #0]
	mag_buffer[5] =ICM_Mag_Read(dev, 0x15);
 8001168:	2115      	movs	r1, #21
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f95c 	bl	8001428 <ICM_Mag_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	747b      	strb	r3, [r7, #17]
	mag_buffer[6] =ICM_Mag_Read(dev, 0x16);
 8001174:	2116      	movs	r1, #22
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f956 	bl	8001428 <ICM_Mag_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	74bb      	strb	r3, [r7, #18]
	magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8001180:	7c7b      	ldrb	r3, [r7, #17]
 8001182:	b219      	sxth	r1, r3
 8001184:	7cbb      	ldrb	r3, [r7, #18]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3304      	adds	r3, #4
 800118e:	430a      	orrs	r2, r1
 8001190:	b212      	sxth	r2, r2
 8001192:	801a      	strh	r2, [r3, #0]

	ICM_Mag_Write(dev, 0x31,0x01);
 8001194:	2201      	movs	r2, #1
 8001196:	2131      	movs	r1, #49	; 0x31
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f917 	bl	80013cc <ICM_Mag_Write>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ICM_WHOAMI>:


/*****************************************************************************
CONFIG HELPERS
******************************************************************************/
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 80011b2:	f107 030f 	add.w	r3, r7, #15
 80011b6:	461a      	mov	r2, r3
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f89c 	bl	80012f8 <ICM_ReadOneByte>
	return spiData;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <ICM_SelectBank>:

void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	461a      	mov	r2, r3
 80011da:	217f      	movs	r1, #127	; 0x7f
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f8c5 	bl	800136c <ICM_WriteOneByte>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <ICM_Disable_I2C>:

void ICM_Disable_I2C(ICM20948 *dev) {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 80011f2:	2278      	movs	r2, #120	; 0x78
 80011f4:	2103      	movs	r1, #3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f8b8 	bl	800136c <ICM_WriteOneByte>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <ICM_CSHigh>:

void ICM_CSHigh(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2110      	movs	r1, #16
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <ICM_CSHigh+0x14>)
 800120e:	f002 ffe5 	bl	80041dc <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	48000400 	.word	0x48000400

0800121c <ICM_SetClock>:

void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}

void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	461a      	mov	r2, r3
 800122c:	2106      	movs	r1, #6
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f89c 	bl	800136c <ICM_WriteOneByte>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(ICM20948 *dev) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 8001244:	223f      	movs	r2, #63	; 0x3f
 8001246:	2107      	movs	r1, #7
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f88f 	bl	800136c <ICM_WriteOneByte>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(ICM20948 *dev) {
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 800125e:	2200      	movs	r2, #0
 8001260:	2107      	movs	r1, #7
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f882 	bl	800136c <ICM_WriteOneByte>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <ICM_SetGyroRateLPF>:

void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
 800127c:	4613      	mov	r3, r2
 800127e:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	78bb      	ldrb	r3, [r7, #2]
 8001284:	4313      	orrs	r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	2101      	movs	r1, #1
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f86d 	bl	800136c <ICM_WriteOneByte>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <ICM_readBytes>:

/*****************************************************************************
LOW-LEVEL FUNCTIONS
******************************************************************************/
void ICM_readBytes(ICM20948 *dev, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2110      	movs	r1, #16
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <ICM_readBytes+0x58>)
 80012c0:	f002 ff8c 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	f107 010b 	add.w	r1, r7, #11
 80012cc:	2364      	movs	r3, #100	; 0x64
 80012ce:	2201      	movs	r2, #1
 80012d0:	f006 fa27 	bl	8007722 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spiHandle, pData, Size, 100);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	893a      	ldrh	r2, [r7, #8]
 80012da:	2364      	movs	r3, #100	; 0x64
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	f006 fb8e 	bl	80079fe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2110      	movs	r1, #16
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <ICM_readBytes+0x58>)
 80012e8:	f002 ff78 	bl	80041dc <HAL_GPIO_WritePin>
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	48000400 	.word	0x48000400

080012f8 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData) // ***
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	460b      	mov	r3, r1
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	reg = reg | 0x80;													//first bit 1 indicates read
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130c:	b2db      	uxtb	r3, r3
 800130e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//enable SPI
 8001310:	2200      	movs	r2, #0
 8001312:	2110      	movs	r1, #16
 8001314:	4814      	ldr	r0, [pc, #80]	; (8001368 <ICM_ReadOneByte+0x70>)
 8001316:	f002 ff61 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			//turn off green LED
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <ICM_ReadOneByte+0x70>)
 8001320:	f002 ff5c 	bl	80041dc <HAL_GPIO_WritePin>

	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	f107 010b 	add.w	r1, r7, #11
 800132c:	2364      	movs	r3, #100	; 0x64
 800132e:	2201      	movs	r2, #1
 8001330:	f006 f9f7 	bl	8007722 <HAL_SPI_Transmit>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(dev->spiHandle, pData, 1, 100);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	2364      	movs	r3, #100	; 0x64
 800133e:	2201      	movs	r2, #1
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	f006 fb5c 	bl	80079fe <HAL_SPI_Receive>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//disable SPI
 800134a:	2201      	movs	r2, #1
 800134c:	2110      	movs	r1, #16
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <ICM_ReadOneByte+0x70>)
 8001350:	f002 ff44 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);			//turn on green LED
 8001354:	2201      	movs	r2, #1
 8001356:	2101      	movs	r1, #1
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <ICM_ReadOneByte+0x70>)
 800135a:	f002 ff3f 	bl	80041dc <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	48000400 	.word	0x48000400

0800136c <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data) // ***
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
 8001378:	4613      	mov	r3, r2
 800137a:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;

	reg = reg & 0x7F;													//first bit 0 indicates write
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001382:	b2db      	uxtb	r3, r3
 8001384:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//set CS pin low
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	480f      	ldr	r0, [pc, #60]	; (80013c8 <ICM_WriteOneByte+0x5c>)
 800138c:	f002 ff26 	bl	80041dc <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	1cf9      	adds	r1, r7, #3
 8001396:	2364      	movs	r3, #100	; 0x64
 8001398:	2201      	movs	r2, #1
 800139a:	f006 f9c2 	bl	8007722 <HAL_SPI_Transmit>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->spiHandle, &Data, 1, 100);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	1cb9      	adds	r1, r7, #2
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	2201      	movs	r2, #1
 80013ac:	f006 f9b9 	bl	8007722 <HAL_SPI_Transmit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//set CS pin high
 80013b4:	2201      	movs	r2, #1
 80013b6:	2110      	movs	r1, #16
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <ICM_WriteOneByte+0x5c>)
 80013ba:	f002 ff0f 	bl	80041dc <HAL_GPIO_WritePin>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	48000400 	.word	0x48000400

080013cc <ICM_Mag_Write>:
/*
 * AUX abstraction for magnetometer
 * these are actually a level higher than the SPI read and writes above
 */
void ICM_Mag_Write(ICM20948 *dev, uint8_t reg,uint8_t value)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
 80013d8:	4613      	mov	r3, r2
 80013da:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, 0x7F, 0x30);
 80013dc:	2230      	movs	r2, #48	; 0x30
 80013de:	217f      	movs	r1, #127	; 0x7f
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ffc3 	bl	800136c <ICM_WriteOneByte>

	HAL_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fb67 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x03 ,0x0C);//mode: write
 80013ec:	220c      	movs	r2, #12
 80013ee:	2103      	movs	r1, #3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffbb 	bl	800136c <ICM_WriteOneByte>

	HAL_Delay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 fb5f 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x04 ,reg);//set reg addr
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	461a      	mov	r2, r3
 8001400:	2104      	movs	r1, #4
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffb2 	bl	800136c <ICM_WriteOneByte>

	HAL_Delay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f000 fb56 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x06 ,value);//send value
 800140e:	78bb      	ldrb	r3, [r7, #2]
 8001410:	461a      	mov	r2, r3
 8001412:	2106      	movs	r1, #6
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffa9 	bl	800136c <ICM_WriteOneByte>

	HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 fb4d 	bl	8001aba <HAL_Delay>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <ICM_Mag_Read>:

uint8_t ICM_Mag_Read(ICM20948 *dev, uint8_t reg)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	uint8_t  Data;
	ICM_WriteOneByte(dev, 0x7F, 0x30);
 8001434:	2230      	movs	r2, #48	; 0x30
 8001436:	217f      	movs	r1, #127	; 0x7f
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff97 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f000 fb3b 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x03, 0x0C|0x80);
 8001444:	228c      	movs	r2, #140	; 0x8c
 8001446:	2103      	movs	r1, #3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff8f 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fb33 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x04, reg);// set reg addr
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	461a      	mov	r2, r3
 8001458:	2104      	movs	r1, #4
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff86 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f000 fb2a 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x06, 0xff);//read
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	2106      	movs	r1, #6
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff7e 	bl	800136c <ICM_WriteOneByte>
	HAL_Delay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f000 fb22 	bl	8001aba <HAL_Delay>
	ICM_WriteOneByte(dev, 0x7F, 0x00);
 8001476:	2200      	movs	r2, #0
 8001478:	217f      	movs	r1, #127	; 0x7f
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff76 	bl	800136c <ICM_WriteOneByte>
	ICM_ReadOneByte(dev, 0x3B, &Data);
 8001480:	f107 030f 	add.w	r3, r7, #15
 8001484:	461a      	mov	r2, r3
 8001486:	213b      	movs	r1, #59	; 0x3b
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff35 	bl	80012f8 <ICM_ReadOneByte>
	HAL_Delay(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f000 fb13 	bl	8001aba <HAL_Delay>
	return Data;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <APPD_EnableCPU2+0x34>)
 80014a8:	1d3c      	adds	r4, r7, #4
 80014aa:	461d      	mov	r5, r3
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b4:	c403      	stmia	r4!, {r0, r1}
 80014b6:	8022      	strh	r2, [r4, #0]
 80014b8:	3402      	adds	r4, #2
 80014ba:	0c13      	lsrs	r3, r2, #16
 80014bc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80014be:	f009 fe89 	bl	800b1d4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f009 f924 	bl	800a712 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80014ca:	bf00      	nop
}
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800daf0 	.word	0x0800daf0

080014d8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <LL_C2_PWR_SetPowerMode+0x28>)
 80014e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e6:	f023 0207 	bic.w	r2, r3, #7
 80014ea:	4905      	ldr	r1, [pc, #20]	; (8001500 <LL_C2_PWR_SetPowerMode+0x28>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	58000400 	.word	0x58000400

08001504 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <LL_EXTI_EnableIT_32_63+0x24>)
 800150e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001512:	4905      	ldr	r1, [pc, #20]	; (8001528 <LL_EXTI_EnableIT_32_63+0x24>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4313      	orrs	r3, r2
 8001518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	58000800 	.word	0x58000800

0800152c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800153a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001546:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001552:	4313      	orrs	r3, r2
 8001554:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	cafecafe 	.word	0xcafecafe

08001568 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800157a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015e8:	d101      	bne.n	80015ee <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800160e:	d101      	bne.n	8001614 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001644:	68fb      	ldr	r3, [r7, #12]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <LL_DBGMCU_GetDeviceID+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e0042000 	.word	0xe0042000

08001670 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <LL_DBGMCU_GetRevisionID+0x18>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	b29b      	uxth	r3, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e0042000 	.word	0xe0042000

0800168c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	615a      	str	r2, [r3, #20]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	615a      	str	r2, [r3, #20]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	619a      	str	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <LL_LPM_EnableSleep+0x1c>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <LL_LPM_EnableSleep+0x1c>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6113      	str	r3, [r2, #16]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	22ff      	movs	r2, #255	; 0xff
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	22ca      	movs	r2, #202	; 0xca
 8001796:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2253      	movs	r2, #83	; 0x53
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 0207 	bic.w	r2, r3, #7
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <MX_APPE_Config+0x18>)
 80017d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017da:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80017dc:	f000 f824 	bl	8001828 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80017e0:	f000 f864 	bl	80018ac <Config_HSE>

  return;
 80017e4:	bf00      	nop
}
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	58004000 	.word	0x58004000

080017ec <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80017f0:	f000 f870 	bl	80018d4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80017f4:	f000 f888 	bl	8001908 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80017f8:	4903      	ldr	r1, [pc, #12]	; (8001808 <MX_APPE_Init+0x1c>)
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 fdd4 	bl	80023a8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001800:	f000 f890 	bl	8001924 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001804:	bf00      	nop
}
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000ae0 	.word	0x20000ae0

0800180c <Init_Smps>:

void Init_Smps(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001810:	bf00      	nop
}
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <Init_Exti>:

void Init_Exti(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800181e:	2050      	movs	r0, #80	; 0x50
 8001820:	f7ff fe70 	bl	8001504 <LL_EXTI_EnableIT_32_63>

  return;
 8001824:	bf00      	nop
}
 8001826:	bd80      	pop	{r7, pc}

08001828 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800182c:	f000 f804 	bl	8001838 <Reset_BackupDomain>

  Reset_IPCC();
 8001830:	f000 f81a 	bl	8001868 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001834:	bf00      	nop
}
 8001836:	bd80      	pop	{r7, pc}

08001838 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800183c:	f7ff feca 	bl	80015d4 <LL_RCC_IsActiveFlag_PINRST>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <Reset_BackupDomain+0x2a>
 8001846:	f7ff fed8 	bl	80015fa <LL_RCC_IsActiveFlag_SFTRST>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d108      	bne.n	8001862 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001850:	f003 ff3c 	bl	80056cc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001854:	f003 ff3a 	bl	80056cc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001858:	f7ff fe9a 	bl	8001590 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800185c:	f7ff fea9 	bl	80015b2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001860:	bf00      	nop
 8001862:	bf00      	nop
}
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800186c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001870:	f7ff fed6 	bl	8001620 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001874:	213f      	movs	r1, #63	; 0x3f
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <Reset_IPCC+0x40>)
 8001878:	f7ff ff4e 	bl	8001718 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800187c:	213f      	movs	r1, #63	; 0x3f
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <Reset_IPCC+0x40>)
 8001880:	f7ff ff58 	bl	8001734 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001884:	213f      	movs	r1, #63	; 0x3f
 8001886:	4808      	ldr	r0, [pc, #32]	; (80018a8 <Reset_IPCC+0x40>)
 8001888:	f7ff ff00 	bl	800168c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800188c:	213f      	movs	r1, #63	; 0x3f
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <Reset_IPCC+0x40>)
 8001890:	f7ff ff1f 	bl	80016d2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001894:	213f      	movs	r1, #63	; 0x3f
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <Reset_IPCC+0x40>)
 8001898:	f7ff ff0a 	bl	80016b0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800189c:	213f      	movs	r1, #63	; 0x3f
 800189e:	4802      	ldr	r0, [pc, #8]	; (80018a8 <Reset_IPCC+0x40>)
 80018a0:	f7ff ff29 	bl	80016f6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80018a4:	bf00      	nop
}
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58000c00 	.word	0x58000c00

080018ac <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f009 fd1a 	bl	800b2ec <OTP_Read>
 80018b8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	799b      	ldrb	r3, [r3, #6]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe31 	bl	800152c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
}
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <System_Init>:

static void System_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  Init_Smps();
 80018d8:	f7ff ff98 	bl	800180c <Init_Smps>

  Init_Exti();
 80018dc:	f7ff ff9d 	bl	800181a <Init_Exti>

  Init_Rtc();
 80018e0:	f000 f802 	bl	80018e8 <Init_Rtc>

  return;
 80018e4:	bf00      	nop
}
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <Init_Rtc+0x1c>)
 80018ee:	f7ff ff4c 	bl	800178a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80018f2:	2100      	movs	r1, #0
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <Init_Rtc+0x1c>)
 80018f6:	f7ff ff58 	bl	80017aa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <Init_Rtc+0x1c>)
 80018fc:	f7ff ff38 	bl	8001770 <LL_RTC_EnableWriteProtection>

  return;
 8001900:	bf00      	nop
}
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40002800 	.word	0x40002800

08001908 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800190c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001910:	f7ff fe2a 	bl	8001568 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001914:	f00a fbe4 	bl	800c0e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001918:	2004      	movs	r0, #4
 800191a:	f7ff fddd 	bl	80014d8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800191e:	bf00      	nop
}
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800192a:	f009 fa9d 	bl	800ae68 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <appe_Tl_Init+0x50>)
 8001930:	2100      	movs	r1, #0
 8001932:	2004      	movs	r0, #4
 8001934:	f00a fd12 	bl	800c35c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <appe_Tl_Init+0x54>)
 800193a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <appe_Tl_Init+0x58>)
 800193e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <appe_Tl_Init+0x5c>)
 8001946:	f009 f955 	bl	800abf4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <appe_Tl_Init+0x60>)
 800194c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <appe_Tl_Init+0x64>)
 8001950:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <appe_Tl_Init+0x68>)
 8001954:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001956:	f240 533c 	movw	r3, #1340	; 0x53c
 800195a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	4618      	mov	r0, r3
 8001962:	f009 fbc3 	bl	800b0ec <TL_MM_Init>

  TL_Enable();
 8001966:	f009 fa79 	bl	800ae5c <TL_Enable>

  return;
 800196a:	bf00      	nop
}
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	0800ac2d 	.word	0x0800ac2d
 8001978:	200005dc 	.word	0x200005dc
 800197c:	08001991 	.word	0x08001991
 8001980:	080019a9 	.word	0x080019a9
 8001984:	200007f4 	.word	0x200007f4
 8001988:	200006e8 	.word	0x200006e8
 800198c:	200000a0 	.word	0x200000a0

08001990 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800199a:	bf00      	nop
}
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	330b      	adds	r3, #11
 80019b6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	d81f      	bhi.n	8001a06 <APPE_SysUserEvtRx+0x5e>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <APPE_SysUserEvtRx+0x24>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	080019ed 	.word	0x080019ed
 80019d0:	080019ff 	.word	0x080019ff
 80019d4:	08001a07 	.word	0x08001a07
 80019d8:	08001a07 	.word	0x08001a07
 80019dc:	08001a07 	.word	0x08001a07
 80019e0:	08001a07 	.word	0x08001a07
 80019e4:	08001a07 	.word	0x08001a07
 80019e8:	08001a07 	.word	0x08001a07
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 febb 	bl	800a76c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f81b 	bl	8001a32 <APPE_SysEvtReadyProcessing>
    break;
 80019fc:	e004      	b.n	8001a08 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f806 	bl	8001a10 <APPE_SysEvtError>
    break;
 8001a04:	e000      	b.n	8001a08 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001a06:	bf00      	nop
  }

  return;
 8001a08:	bf00      	nop
}
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	330b      	adds	r3, #11
 8001a1e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3302      	adds	r3, #2
 8001a24:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a26:	bf00      	nop
}
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b08a      	sub	sp, #40	; 0x28
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	330b      	adds	r3, #11
 8001a56:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11d      	bne.n	8001aa2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001a66:	f7ff fd1b 	bl	80014a0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001a6e:	237f      	movs	r3, #127	; 0x7f
 8001a70:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001a72:	f7ff fdfd 	bl	8001670 <LL_DBGMCU_GetRevisionID>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001a7e:	f7ff fde9 	bl	8001654 <LL_DBGMCU_GetDeviceID>
 8001a82:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f008 fe56 	bl	800a740 <SHCI_C2_Config>

    APP_BLE_Init();
 8001a94:	f009 fd34 	bl	800b500 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f00a fb32 	bl	800c104 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001aa0:	e007      	b.n	8001ab2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d103      	bne.n	8001ab2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
  return;
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
}
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac2:	f001 fe43 	bl	800374c <HAL_GetTick>
 8001ac6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad2:	d00a      	beq.n	8001aea <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001ad4:	f001 fe52 	bl	800377c <HAL_GetTickFreq>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae2:	e002      	b.n	8001aea <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ae4:	f7ff fe34 	bl	8001750 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001ae8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001aea:	f001 fe2f 	bl	800374c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d8f4      	bhi.n	8001ae4 <HAL_Delay+0x2a>
  }
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b0c:	f00a fb2a 	bl	800c164 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001b18:	bf00      	nop
}
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b30:	f00a fb18 	bl	800c164 <UTIL_SEQ_Run>

  return;
 8001b34:	bf00      	nop
}
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2004      	movs	r0, #4
 8001b48:	f00a fc2a 	bl	800c3a0 <UTIL_SEQ_SetTask>
  return;
 8001b4c:	bf00      	nop
}
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f00a fc8b 	bl	800c478 <UTIL_SEQ_SetEvt>
  return;
 8001b62:	bf00      	nop
}
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b72:	2002      	movs	r0, #2
 8001b74:	f00a fca0 	bl	800c4b8 <UTIL_SEQ_WaitEvt>
  return;
 8001b78:	bf00      	nop
}
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <LL_EXTI_EnableIT_0_31>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b8e:	4905      	ldr	r1, [pc, #20]	; (8001ba4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	58000800 	.word	0x58000800

08001ba8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4904      	ldr	r1, [pc, #16]	; (8001bc8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]

}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	58000800 	.word	0x58000800

08001bcc <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <ReadRtcSsrValue+0x3c>)
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <ReadRtcSsrValue+0x3c>)
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001be2:	e005      	b.n	8001bf0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <ReadRtcSsrValue+0x3c>)
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1f5      	bne.n	8001be4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001bf8:	683b      	ldr	r3, [r7, #0]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40002800 	.word	0x40002800

08001c0c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001c1c:	79ba      	ldrb	r2, [r7, #6]
 8001c1e:	491d      	ldr	r1, [pc, #116]	; (8001c94 <LinkTimerAfter+0x88>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3315      	adds	r3, #21
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d009      	beq.n	8001c4a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <LinkTimerAfter+0x88>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	3314      	adds	r3, #20
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	4911      	ldr	r1, [pc, #68]	; (8001c94 <LinkTimerAfter+0x88>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	3315      	adds	r3, #21
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <LinkTimerAfter+0x88>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3314      	adds	r3, #20
 8001c6e:	79ba      	ldrb	r2, [r7, #6]
 8001c70:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c72:	79ba      	ldrb	r2, [r7, #6]
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <LinkTimerAfter+0x88>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3315      	adds	r3, #21
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	701a      	strb	r2, [r3, #0]

  return;
 8001c86:	bf00      	nop
}
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000978 	.word	0x20000978

08001c98 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <LinkTimerBefore+0xb8>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	79ba      	ldrb	r2, [r7, #6]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d032      	beq.n	8001d1a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001cb4:	79ba      	ldrb	r2, [r7, #6]
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	4922      	ldr	r1, [pc, #136]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3315      	adds	r3, #21
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001cdc:	79fa      	ldrb	r2, [r7, #7]
 8001cde:	491d      	ldr	r1, [pc, #116]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3315      	adds	r3, #21
 8001cec:	79ba      	ldrb	r2, [r7, #6]
 8001cee:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	4918      	ldr	r1, [pc, #96]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3314      	adds	r3, #20
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d04:	79ba      	ldrb	r2, [r7, #6]
 8001d06:	4913      	ldr	r1, [pc, #76]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3314      	adds	r3, #20
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001d18:	e014      	b.n	8001d44 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	490d      	ldr	r1, [pc, #52]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3315      	adds	r3, #21
 8001d2a:	79ba      	ldrb	r2, [r7, #6]
 8001d2c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d2e:	79ba      	ldrb	r2, [r7, #6]
 8001d30:	4908      	ldr	r1, [pc, #32]	; (8001d54 <LinkTimerBefore+0xbc>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	701a      	strb	r2, [r3, #0]
  return;
 8001d42:	bf00      	nop
}
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000a08 	.word	0x20000a08
 8001d54:	20000978 	.word	0x20000978

08001d58 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d62:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <linkTimer+0x144>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d118      	bne.n	8001d9e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <linkTimer+0x144>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <linkTimer+0x148>)
 8001d74:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001d76:	4a49      	ldr	r2, [pc, #292]	; (8001e9c <linkTimer+0x144>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d7c:	79fa      	ldrb	r2, [r7, #7]
 8001d7e:	4949      	ldr	r1, [pc, #292]	; (8001ea4 <linkTimer+0x14c>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	440b      	add	r3, r1
 8001d8a:	3315      	adds	r3, #21
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d90:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <linkTimer+0x150>)
 8001d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d96:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	81fb      	strh	r3, [r7, #14]
 8001d9c:	e078      	b.n	8001e90 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001d9e:	f000 f909 	bl	8001fb4 <ReturnTimeElapsed>
 8001da2:	4603      	mov	r3, r0
 8001da4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	493e      	ldr	r1, [pc, #248]	; (8001ea4 <linkTimer+0x14c>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3308      	adds	r3, #8
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	89fb      	ldrh	r3, [r7, #14]
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	4419      	add	r1, r3
 8001dbe:	4839      	ldr	r0, [pc, #228]	; (8001ea4 <linkTimer+0x14c>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4403      	add	r3, r0
 8001dca:	3308      	adds	r3, #8
 8001dcc:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	4934      	ldr	r1, [pc, #208]	; (8001ea4 <linkTimer+0x14c>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3308      	adds	r3, #8
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001de2:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <linkTimer+0x144>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <linkTimer+0x14c>)
 8001dec:	460b      	mov	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	3308      	adds	r3, #8
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d337      	bcc.n	8001e70 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <linkTimer+0x144>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001e06:	7b7a      	ldrb	r2, [r7, #13]
 8001e08:	4926      	ldr	r1, [pc, #152]	; (8001ea4 <linkTimer+0x14c>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3315      	adds	r3, #21
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e1a:	e013      	b.n	8001e44 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001e1c:	7b7a      	ldrb	r2, [r7, #13]
 8001e1e:	4921      	ldr	r1, [pc, #132]	; (8001ea4 <linkTimer+0x14c>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3315      	adds	r3, #21
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001e30:	7b7a      	ldrb	r2, [r7, #13]
 8001e32:	491c      	ldr	r1, [pc, #112]	; (8001ea4 <linkTimer+0x14c>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3315      	adds	r3, #21
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e44:	7b3b      	ldrb	r3, [r7, #12]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d00b      	beq.n	8001e62 <linkTimer+0x10a>
 8001e4a:	7b3a      	ldrb	r2, [r7, #12]
 8001e4c:	4915      	ldr	r1, [pc, #84]	; (8001ea4 <linkTimer+0x14c>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	3308      	adds	r3, #8
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d2dc      	bcs.n	8001e1c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e62:	7b7a      	ldrb	r2, [r7, #13]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fecf 	bl	8001c0c <LinkTimerAfter>
 8001e6e:	e00f      	b.n	8001e90 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <linkTimer+0x144>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff0c 	bl	8001c98 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <linkTimer+0x144>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <linkTimer+0x148>)
 8001e88:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <linkTimer+0x144>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001e90:	89fb      	ldrh	r3, [r7, #14]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000a08 	.word	0x20000a08
 8001ea0:	20000a09 	.word	0x20000a09
 8001ea4:	20000978 	.word	0x20000978
 8001ea8:	20000a0c 	.word	0x20000a0c

08001eac <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ebc:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <UnlinkTimer+0xf8>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d111      	bne.n	8001eec <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <UnlinkTimer+0xf8>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <UnlinkTimer+0xfc>)
 8001ed0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ed2:	79fa      	ldrb	r2, [r7, #7]
 8001ed4:	4935      	ldr	r1, [pc, #212]	; (8001fac <UnlinkTimer+0x100>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	3315      	adds	r3, #21
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <UnlinkTimer+0xf8>)
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e03e      	b.n	8001f6a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001eec:	79fa      	ldrb	r2, [r7, #7]
 8001eee:	492f      	ldr	r1, [pc, #188]	; (8001fac <UnlinkTimer+0x100>)
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	3314      	adds	r3, #20
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001f00:	79fa      	ldrb	r2, [r7, #7]
 8001f02:	492a      	ldr	r1, [pc, #168]	; (8001fac <UnlinkTimer+0x100>)
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3315      	adds	r3, #21
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001f14:	79f9      	ldrb	r1, [r7, #7]
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	4824      	ldr	r0, [pc, #144]	; (8001fac <UnlinkTimer+0x100>)
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4403      	add	r3, r0
 8001f24:	3315      	adds	r3, #21
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2d8      	uxtb	r0, r3
 8001f2a:	4920      	ldr	r1, [pc, #128]	; (8001fac <UnlinkTimer+0x100>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3315      	adds	r3, #21
 8001f38:	4602      	mov	r2, r0
 8001f3a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d013      	beq.n	8001f6a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001f42:	79f9      	ldrb	r1, [r7, #7]
 8001f44:	7bba      	ldrb	r2, [r7, #14]
 8001f46:	4819      	ldr	r0, [pc, #100]	; (8001fac <UnlinkTimer+0x100>)
 8001f48:	460b      	mov	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4403      	add	r3, r0
 8001f52:	3314      	adds	r3, #20
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2d8      	uxtb	r0, r3
 8001f58:	4914      	ldr	r1, [pc, #80]	; (8001fac <UnlinkTimer+0x100>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3314      	adds	r3, #20
 8001f66:	4602      	mov	r2, r0
 8001f68:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f6a:	79fa      	ldrb	r2, [r7, #7]
 8001f6c:	490f      	ldr	r1, [pc, #60]	; (8001fac <UnlinkTimer+0x100>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	330c      	adds	r3, #12
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <UnlinkTimer+0xf8>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d107      	bne.n	8001f98 <UnlinkTimer+0xec>
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d104      	bne.n	8001f98 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <UnlinkTimer+0x104>)
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f94:	601a      	str	r2, [r3, #0]
  }

  return;
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
}
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000a08 	.word	0x20000a08
 8001fa8:	20000a09 	.word	0x20000a09
 8001fac:	20000978 	.word	0x20000978
 8001fb0:	20000a0c 	.word	0x20000a0c

08001fb4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <ReturnTimeElapsed+0x70>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc2:	d026      	beq.n	8002012 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001fc4:	f7ff fe02 	bl	8001bcc <ReadRtcSsrValue>
 8001fc8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <ReturnTimeElapsed+0x70>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d805      	bhi.n	8001fe0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <ReturnTimeElapsed+0x70>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	e00a      	b.n	8001ff6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <ReturnTimeElapsed+0x74>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <ReturnTimeElapsed+0x70>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <ReturnTimeElapsed+0x78>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <ReturnTimeElapsed+0x7c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	40d3      	lsrs	r3, r2
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	e001      	b.n	8002016 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	b29b      	uxth	r3, r3
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000a0c 	.word	0x20000a0c
 8002028:	20000a14 	.word	0x20000a14
 800202c:	20000a12 	.word	0x20000a12
 8002030:	20000a11 	.word	0x20000a11

08002034 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d108      	bne.n	8002056 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002044:	f7ff fdc2 	bl	8001bcc <ReadRtcSsrValue>
 8002048:	4603      	mov	r3, r0
 800204a:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <RestartWakeupCounter+0x9c>)
 800204c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800204e:	2003      	movs	r0, #3
 8002050:	f001 fd1d 	bl	8003a8e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002054:	e039      	b.n	80020ca <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d803      	bhi.n	8002064 <RestartWakeupCounter+0x30>
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <RestartWakeupCounter+0xa0>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d002      	beq.n	800206a <RestartWakeupCounter+0x36>
      Value -= 1;
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	3b01      	subs	r3, #1
 8002068:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800206a:	bf00      	nop
 800206c:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <RestartWakeupCounter+0xa4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f8      	beq.n	800206c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <RestartWakeupCounter+0xa4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <RestartWakeupCounter+0xa4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800208a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <RestartWakeupCounter+0xa8>)
 800208e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002092:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002094:	2003      	movs	r0, #3
 8002096:	f001 fd08 	bl	8003aaa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <RestartWakeupCounter+0xac>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <RestartWakeupCounter+0xac>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80020aa:	f7ff fd8f 	bl	8001bcc <ReadRtcSsrValue>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <RestartWakeupCounter+0x9c>)
 80020b2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <RestartWakeupCounter+0xa4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <RestartWakeupCounter+0xa4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020c2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80020c4:	f3af 8000 	nop.w
  return ;
 80020c8:	bf00      	nop
}
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000a0c 	.word	0x20000a0c
 80020d4:	20000a11 	.word	0x20000a11
 80020d8:	20000ae0 	.word	0x20000ae0
 80020dc:	58000800 	.word	0x58000800
 80020e0:	40002800 	.word	0x40002800

080020e4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <RescheduleTimerList+0x11c>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f6:	d107      	bne.n	8002108 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020f8:	bf00      	nop
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <RescheduleTimerList+0x120>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f8      	bne.n	80020fa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002108:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <RescheduleTimerList+0x120>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <RescheduleTimerList+0x120>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <RescheduleTimerList+0x124>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	493a      	ldr	r1, [pc, #232]	; (800220c <RescheduleTimerList+0x128>)
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	3308      	adds	r3, #8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002132:	f7ff ff3f 	bl	8001fb4 <ReturnTimeElapsed>
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	d205      	bcs.n	800214e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <RescheduleTimerList+0x12c>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e04d      	b.n	80021ea <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	4a30      	ldr	r2, [pc, #192]	; (8002214 <RescheduleTimerList+0x130>)
 8002152:	8812      	ldrh	r2, [r2, #0]
 8002154:	b292      	uxth	r2, r2
 8002156:	4413      	add	r3, r2
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4293      	cmp	r3, r2
 800215e:	d906      	bls.n	800216e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002160:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <RescheduleTimerList+0x130>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <RescheduleTimerList+0x12c>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e03d      	b.n	80021ea <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	b29a      	uxth	r2, r3
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <RescheduleTimerList+0x12c>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800217e:	e034      	b.n	80021ea <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	4922      	ldr	r1, [pc, #136]	; (800220c <RescheduleTimerList+0x128>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3308      	adds	r3, #8
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	429a      	cmp	r2, r3
 8002196:	d20a      	bcs.n	80021ae <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	491c      	ldr	r1, [pc, #112]	; (800220c <RescheduleTimerList+0x128>)
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	3308      	adds	r3, #8
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	e013      	b.n	80021d6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	4916      	ldr	r1, [pc, #88]	; (800220c <RescheduleTimerList+0x128>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	3308      	adds	r3, #8
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	1ac9      	subs	r1, r1, r3
 80021c6:	4811      	ldr	r0, [pc, #68]	; (800220c <RescheduleTimerList+0x128>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4403      	add	r3, r0
 80021d2:	3308      	adds	r3, #8
 80021d4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <RescheduleTimerList+0x128>)
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3315      	adds	r3, #21
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d1c7      	bne.n	8002180 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80021f0:	89bb      	ldrh	r3, [r7, #12]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff1e 	bl	8002034 <RestartWakeupCounter>

  return ;
 80021f8:	bf00      	nop
}
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40002800 	.word	0x40002800
 8002204:	20000ae0 	.word	0x20000ae0
 8002208:	20000a08 	.word	0x20000a08
 800220c:	20000978 	.word	0x20000978
 8002210:	20000a10 	.word	0x20000a10
 8002214:	20000a16 	.word	0x20000a16

08002218 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221e:	f3ef 8310 	mrs	r3, PRIMASK
 8002222:	617b      	str	r3, [r7, #20]
  return(result);
 8002224:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	22ca      	movs	r2, #202	; 0xca
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
 8002234:	4b57      	ldr	r3, [pc, #348]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2253      	movs	r2, #83	; 0x53
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800223c:	4b55      	ldr	r3, [pc, #340]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b54      	ldr	r3, [pc, #336]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002254:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002258:	4950      	ldr	r1, [pc, #320]	; (800239c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	330c      	adds	r3, #12
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d16e      	bne.n	800234c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800226e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002272:	494a      	ldr	r1, [pc, #296]	; (800239c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002282:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002286:	4945      	ldr	r1, [pc, #276]	; (800239c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3310      	adds	r3, #16
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002298:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d04c      	beq.n	800233c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80022a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022a6:	493d      	ldr	r1, [pc, #244]	; (800239c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	330d      	adds	r3, #13
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d124      	bne.n	8002306 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80022bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022c0:	2101      	movs	r1, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fdf2 	bl	8001eac <UnlinkTimer>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f383 8810 	msr	PRIMASK, r3
}
 80022d2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80022d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022d8:	4930      	ldr	r1, [pc, #192]	; (800239c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	3304      	adds	r3, #4
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f9b8 	bl	8002664 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	22ca      	movs	r2, #202	; 0xca
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2253      	movs	r2, #83	; 0x53
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
 8002304:	e012      	b.n	800232c <HW_TS_RTC_Wakeup_Handler+0x114>
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f920 	bl	800255c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	22ca      	movs	r2, #202	; 0xca
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2253      	movs	r2, #83	; 0x53
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800232c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	4619      	mov	r1, r3
 8002334:	69b8      	ldr	r0, [r7, #24]
 8002336:	f000 fa1b 	bl	8002770 <HW_TS_RTC_Int_AppNot>
 800233a:	e022      	b.n	8002382 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800233c:	f7ff fed2 	bl	80020e4 <RescheduleTimerList>
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f383 8810 	msr	PRIMASK, r3
}
 800234a:	e01a      	b.n	8002382 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800234c:	bf00      	nop
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f8      	beq.n	800234e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800236c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002370:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f383 8810 	msr	PRIMASK, r3
}
 8002380:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800238a:	bf00      	nop
}
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000ae0 	.word	0x20000ae0
 8002398:	20000a08 	.word	0x20000a08
 800239c:	20000978 	.word	0x20000978
 80023a0:	20000a10 	.word	0x20000a10
 80023a4:	58000800 	.word	0x58000800

080023a8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023b4:	4b5e      	ldr	r3, [pc, #376]	; (8002530 <HW_TS_Init+0x188>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ca      	movs	r2, #202	; 0xca
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
 80023bc:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <HW_TS_Init+0x188>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2253      	movs	r2, #83	; 0x53
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80023c4:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HW_TS_Init+0x18c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a5a      	ldr	r2, [pc, #360]	; (8002534 <HW_TS_Init+0x18c>)
 80023ca:	f043 0320 	orr.w	r3, r3, #32
 80023ce:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HW_TS_Init+0x18c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f1c3 0304 	rsb	r3, r3, #4
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HW_TS_Init+0x190>)
 80023e4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <HW_TS_Init+0x18c>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023ee:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80023f2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	fa92 f2a2 	rbit	r2, r2
 80023fa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	2a00      	cmp	r2, #0
 8002404:	d101      	bne.n	800240a <HW_TS_Init+0x62>
  {
    return 32U;
 8002406:	2220      	movs	r2, #32
 8002408:	e003      	b.n	8002412 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b48      	ldr	r3, [pc, #288]	; (800253c <HW_TS_Init+0x194>)
 800241c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <HW_TS_Init+0x18c>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002428:	b29b      	uxth	r3, r3
 800242a:	3301      	adds	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HW_TS_Init+0x198>)
 8002430:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <HW_TS_Init+0x198>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	3b01      	subs	r3, #1
 8002438:	4a40      	ldr	r2, [pc, #256]	; (800253c <HW_TS_Init+0x194>)
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002444:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <HW_TS_Init+0x190>)
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	40d3      	lsrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002452:	4293      	cmp	r3, r2
 8002454:	d904      	bls.n	8002460 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HW_TS_Init+0x19c>)
 8002458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e003      	b.n	8002468 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HW_TS_Init+0x19c>)
 8002466:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002468:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800246c:	f7ff fb9c 	bl	8001ba8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002470:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002474:	f7ff fb84 	bl	8001b80 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13d      	bne.n	80024fa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HW_TS_Init+0x1a0>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HW_TS_Init+0x1a4>)
 8002486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800248a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800248c:	2300      	movs	r3, #0
 800248e:	77fb      	strb	r3, [r7, #31]
 8002490:	e00c      	b.n	80024ac <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002492:	7ffa      	ldrb	r2, [r7, #31]
 8002494:	492e      	ldr	r1, [pc, #184]	; (8002550 <HW_TS_Init+0x1a8>)
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	330c      	adds	r3, #12
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
 80024a8:	3301      	adds	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
 80024ac:	7ffb      	ldrb	r3, [r7, #31]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d9ef      	bls.n	8002492 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HW_TS_Init+0x1ac>)
 80024b4:	2206      	movs	r2, #6
 80024b6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HW_TS_Init+0x188>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HW_TS_Init+0x188>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HW_TS_Init+0x188>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HW_TS_Init+0x188>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HW_TS_Init+0x1b0>)
 80024dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024e0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80024e2:	2003      	movs	r0, #3
 80024e4:	f001 fae1 	bl	8003aaa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HW_TS_Init+0x188>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HW_TS_Init+0x188>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e009      	b.n	800250e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HW_TS_Init+0x188>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002508:	2003      	movs	r0, #3
 800250a:	f001 fac0 	bl	8003a8e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HW_TS_Init+0x188>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	22ff      	movs	r2, #255	; 0xff
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002516:	2200      	movs	r2, #0
 8002518:	2103      	movs	r1, #3
 800251a:	2003      	movs	r0, #3
 800251c:	f001 fa75 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002520:	2003      	movs	r0, #3
 8002522:	f001 fa8c 	bl	8003a3e <HAL_NVIC_EnableIRQ>

  return;
 8002526:	bf00      	nop
}
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000ae0 	.word	0x20000ae0
 8002534:	40002800 	.word	0x40002800
 8002538:	20000a11 	.word	0x20000a11
 800253c:	20000a12 	.word	0x20000a12
 8002540:	20000a14 	.word	0x20000a14
 8002544:	20000a16 	.word	0x20000a16
 8002548:	20000a10 	.word	0x20000a10
 800254c:	20000a0c 	.word	0x20000a0c
 8002550:	20000978 	.word	0x20000978
 8002554:	20000a08 	.word	0x20000a08
 8002558:	58000800 	.word	0x58000800

0800255c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002566:	f3ef 8310 	mrs	r3, PRIMASK
 800256a:	60fb      	str	r3, [r7, #12]
  return(result);
 800256c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800256e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002570:	b672      	cpsid	i
}
 8002572:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002574:	2003      	movs	r0, #3
 8002576:	f001 fa70 	bl	8003a5a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HW_TS_Stop+0xf0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	22ca      	movs	r2, #202	; 0xca
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
 8002582:	4b32      	ldr	r3, [pc, #200]	; (800264c <HW_TS_Stop+0xf0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2253      	movs	r2, #83	; 0x53
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800258a:	79fa      	ldrb	r2, [r7, #7]
 800258c:	4930      	ldr	r1, [pc, #192]	; (8002650 <HW_TS_Stop+0xf4>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	330c      	adds	r3, #12
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d142      	bne.n	8002628 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc80 	bl	8001eac <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HW_TS_Stop+0xf8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d12f      	bne.n	8002618 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HW_TS_Stop+0xfc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d107      	bne.n	80025d6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80025c6:	bf00      	nop
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <HW_TS_Stop+0xf0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f8      	bne.n	80025c8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HW_TS_Stop+0xf0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HW_TS_Stop+0xf0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80025e6:	bf00      	nop
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <HW_TS_Stop+0xf0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f8      	beq.n	80025e8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HW_TS_Stop+0xf0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HW_TS_Stop+0xf0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002606:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <HW_TS_Stop+0x100>)
 800260a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800260e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002610:	2003      	movs	r0, #3
 8002612:	f001 fa4a 	bl	8003aaa <HAL_NVIC_ClearPendingIRQ>
 8002616:	e007      	b.n	8002628 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HW_TS_Stop+0x104>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	7cfa      	ldrb	r2, [r7, #19]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002624:	f7ff fd5e 	bl	80020e4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <HW_TS_Stop+0xf0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	22ff      	movs	r2, #255	; 0xff
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002630:	2003      	movs	r0, #3
 8002632:	f001 fa04 	bl	8003a3e <HAL_NVIC_EnableIRQ>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f383 8810 	msr	PRIMASK, r3
}
 8002640:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002642:	bf00      	nop
}
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000ae0 	.word	0x20000ae0
 8002650:	20000978 	.word	0x20000978
 8002654:	20000a08 	.word	0x20000a08
 8002658:	40002800 	.word	0x40002800
 800265c:	58000800 	.word	0x58000800
 8002660:	20000a09 	.word	0x20000a09

08002664 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002670:	79fa      	ldrb	r2, [r7, #7]
 8002672:	493b      	ldr	r1, [pc, #236]	; (8002760 <HW_TS_Start+0xfc>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	440b      	add	r3, r1
 800267e:	330c      	adds	r3, #12
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d103      	bne.n	8002690 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff66 	bl	800255c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002690:	f3ef 8310 	mrs	r3, PRIMASK
 8002694:	60fb      	str	r3, [r7, #12]
  return(result);
 8002696:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002698:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800269a:	b672      	cpsid	i
}
 800269c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800269e:	2003      	movs	r0, #3
 80026a0:	f001 f9db 	bl	8003a5a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HW_TS_Start+0x100>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	22ca      	movs	r2, #202	; 0xca
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <HW_TS_Start+0x100>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2253      	movs	r2, #83	; 0x53
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	492a      	ldr	r1, [pc, #168]	; (8002760 <HW_TS_Start+0xfc>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	330c      	adds	r3, #12
 80026c4:	2202      	movs	r2, #2
 80026c6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80026c8:	79fa      	ldrb	r2, [r7, #7]
 80026ca:	4925      	ldr	r1, [pc, #148]	; (8002760 <HW_TS_Start+0xfc>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	440b      	add	r3, r1
 80026d6:	3308      	adds	r3, #8
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	4920      	ldr	r1, [pc, #128]	; (8002760 <HW_TS_Start+0xfc>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	3304      	adds	r3, #4
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fb30 	bl	8001d58 <linkTimer>
 80026f8:	4603      	mov	r3, r0
 80026fa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HW_TS_Start+0x104>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HW_TS_Start+0x108>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	7c7a      	ldrb	r2, [r7, #17]
 800270a:	429a      	cmp	r2, r3
 800270c:	d002      	beq.n	8002714 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800270e:	f7ff fce9 	bl	80020e4 <RescheduleTimerList>
 8002712:	e013      	b.n	800273c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002714:	79fa      	ldrb	r2, [r7, #7]
 8002716:	4912      	ldr	r1, [pc, #72]	; (8002760 <HW_TS_Start+0xfc>)
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	3308      	adds	r3, #8
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	8a7b      	ldrh	r3, [r7, #18]
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	1ac9      	subs	r1, r1, r3
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <HW_TS_Start+0xfc>)
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4403      	add	r3, r0
 8002738:	3308      	adds	r3, #8
 800273a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HW_TS_Start+0x100>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002744:	2003      	movs	r0, #3
 8002746:	f001 f97a 	bl	8003a3e <HAL_NVIC_EnableIRQ>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f383 8810 	msr	PRIMASK, r3
}
 8002754:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002756:	bf00      	nop
}
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000978 	.word	0x20000978
 8002764:	20000ae0 	.word	0x20000ae0
 8002768:	20000a08 	.word	0x20000a08
 800276c:	20000a09 	.word	0x20000a09

08002770 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	460b      	mov	r3, r1
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4798      	blx	r3

  return;
 8002782:	bf00      	nop
}
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <LL_RCC_LSE_SetDriveCapability>:
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f023 0218 	bic.w	r2, r3, #24
 800279e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_AHB1_GRP1_EnableClock>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_AHB2_GRP1_EnableClock>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b0bf      	sub	sp, #252	; 0xfc
 8002820:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002822:	f000 ff25 	bl	8003670 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002826:	f7fe ffd3 	bl	80017d0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800282a:	f000 f8e1 	bl	80029f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800282e:	f000 f941 	bl	8002ab4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002832:	f000 f99f 	bl	8002b74 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002836:	f000 fabf 	bl	8002db8 <MX_GPIO_Init>
  MX_DMA_Init();
 800283a:	f000 faa3 	bl	8002d84 <MX_DMA_Init>
  MX_RTC_Init();
 800283e:	f000 f9e1 	bl	8002c04 <MX_RTC_Init>
  MX_I2C1_Init();
 8002842:	f000 f957 	bl	8002af4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002846:	f000 fa4f 	bl	8002ce8 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 800284a:	f000 f9a7 	bl	8002b9c <MX_LPTIM1_Init>
  MX_SPI1_Init();
 800284e:	f000 fa0d 	bl	8002c6c <MX_SPI1_Init>
  MX_RF_Init();
 8002852:	f000 f9cf 	bl	8002bf4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 8002856:	4857      	ldr	r0, [pc, #348]	; (80029b4 <main+0x198>)
 8002858:	f009 ff02 	bl	800c660 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 800285c:	200a      	movs	r0, #10
 800285e:	f7ff f92c 	bl	8001aba <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8002862:	4955      	ldr	r1, [pc, #340]	; (80029b8 <main+0x19c>)
 8002864:	4855      	ldr	r0, [pc, #340]	; (80029bc <main+0x1a0>)
 8002866:	f7fe f841 	bl	80008ec <BH1790GLC_init>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(status != 0){
 8002870:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <main+0x70>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8002878:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800287c:	4619      	mov	r1, r3
 800287e:	4850      	ldr	r0, [pc, #320]	; (80029c0 <main+0x1a4>)
 8002880:	f009 feee 	bl	800c660 <iprintf>
	  sensorReady = 0;
 8002884:	4b4f      	ldr	r3, [pc, #316]	; (80029c4 <main+0x1a8>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e008      	b.n	800289e <main+0x82>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 800288c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002890:	4619      	mov	r1, r3
 8002892:	484d      	ldr	r0, [pc, #308]	; (80029c8 <main+0x1ac>)
 8002894:	f009 fee4 	bl	800c660 <iprintf>
	  sensorReady = 1;
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <main+0x1a8>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80028a4:	4849      	ldr	r0, [pc, #292]	; (80029cc <main+0x1b0>)
 80028a6:	f002 fc9d 	bl	80051e4 <HAL_LPTIM_TimeOut_Start_IT>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <main+0x98>
	  Error_Handler();
 80028b0:	f000 fafe 	bl	8002eb0 <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 80028b4:	4846      	ldr	r0, [pc, #280]	; (80029d0 <main+0x1b4>)
 80028b6:	f009 fed3 	bl	800c660 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 80028ba:	200a      	movs	r0, #10
 80028bc:	f7ff f8fd 	bl	8001aba <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);				//specify register bank
 80028c0:	2100      	movs	r1, #0
 80028c2:	4844      	ldr	r0, [pc, #272]	; (80029d4 <main+0x1b8>)
 80028c4:	f7fe fc81 	bl	80011ca <ICM_SelectBank>
  HAL_Delay(10);									//wait as a precaution
 80028c8:	200a      	movs	r0, #10
 80028ca:	f7ff f8f6 	bl	8001aba <HAL_Delay>
  ICM_PowerOn(&imu, &hspi1);						//configure sensor
 80028ce:	4942      	ldr	r1, [pc, #264]	; (80029d8 <main+0x1bc>)
 80028d0:	4840      	ldr	r0, [pc, #256]	; (80029d4 <main+0x1b8>)
 80028d2:	f7fe fad3 	bl	8000e7c <ICM_PowerOn>
  HAL_Delay(10);									//wait as a precaution
 80028d6:	200a      	movs	r0, #10
 80028d8:	f7ff f8ef 	bl	8001aba <HAL_Delay>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80028dc:	f7fe ff86 	bl	80017ec <MX_APPE_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80028e0:	f7ff f910 	bl	8001b04 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 80028e4:	4b37      	ldr	r3, [pc, #220]	; (80029c4 <main+0x1a8>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d022      	beq.n	8002932 <main+0x116>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <main+0x1a8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 80028f2:	4832      	ldr	r0, [pc, #200]	; (80029bc <main+0x1a0>)
 80028f4:	f7fe f869 	bl	80009ca <get_val>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
        if(err != 0){
 80028fe:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <main+0xf8>
        	printf("Could not read sensor. Error code: %d\n\r", err);
 8002906:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800290a:	4619      	mov	r1, r3
 800290c:	4833      	ldr	r0, [pc, #204]	; (80029dc <main+0x1c0>)
 800290e:	f009 fea7 	bl	800c660 <iprintf>
 8002912:	e00e      	b.n	8002932 <main+0x116>
        }else{
        	if(add_sample(&hrm)==1){
 8002914:	4829      	ldr	r0, [pc, #164]	; (80029bc <main+0x1a0>)
 8002916:	f7fe f883 	bl	8000a20 <add_sample>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <main+0x10a>

        		//printf("HELLO\n");
        		ppg_calculate(&hrm);
 8002920:	4826      	ldr	r0, [pc, #152]	; (80029bc <main+0x1a0>)
 8002922:	f7fe f8a7 	bl	8000a74 <ppg_calculate>

        	}
        	//printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
    		printf("ppg_data[1]: %d\n\r", hrm.ppg_data[1]);
 8002926:	4b25      	ldr	r3, [pc, #148]	; (80029bc <main+0x1a0>)
 8002928:	88db      	ldrh	r3, [r3, #6]
 800292a:	4619      	mov	r1, r3
 800292c:	482c      	ldr	r0, [pc, #176]	; (80029e0 <main+0x1c4>)
 800292e:	f009 fe97 	bl	800c660 <iprintf>
    }else{
    	//not ready
    }

	// Select User Bank 0
	ICM_SelectBank(&imu, USER_BANK_0);
 8002932:	2100      	movs	r1, #0
 8002934:	4827      	ldr	r0, [pc, #156]	; (80029d4 <main+0x1b8>)
 8002936:	f7fe fc48 	bl	80011ca <ICM_SelectBank>
	//HAL_Delay(10);

	// Obtain accelerometer and gyro data
	ICM_ReadAccelGyroData(&imu);
 800293a:	4826      	ldr	r0, [pc, #152]	; (80029d4 <main+0x1b8>)
 800293c:	f7fe fb64 	bl	8001008 <ICM_ReadAccelGyroData>

	// Obtain magnetometer data
	ICM_ReadMagData(&imu, imu.mag_data);
 8002940:	4928      	ldr	r1, [pc, #160]	; (80029e4 <main+0x1c8>)
 8002942:	4824      	ldr	r0, [pc, #144]	; (80029d4 <main+0x1b8>)
 8002944:	f7fe fbda 	bl	80010fc <ICM_ReadMagData>
	sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u)   "
			"(Gx: %u | Gy: %u | Gz: %u)   "
			"(Mx: %i | My: %i | Mz: %i)"
			" \r\n",
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <main+0x1b8>)
 800294a:	889b      	ldrh	r3, [r3, #4]
	sprintf(uart_buffer,
 800294c:	469c      	mov	ip, r3
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <main+0x1b8>)
 8002950:	88db      	ldrh	r3, [r3, #6]
	sprintf(uart_buffer,
 8002952:	469e      	mov	lr, r3
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <main+0x1b8>)
 8002956:	891b      	ldrh	r3, [r3, #8]
	sprintf(uart_buffer,
 8002958:	461a      	mov	r2, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <main+0x1b8>)
 800295c:	895b      	ldrh	r3, [r3, #10]
	sprintf(uart_buffer,
 800295e:	4619      	mov	r1, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 8002960:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <main+0x1b8>)
 8002962:	899b      	ldrh	r3, [r3, #12]
	sprintf(uart_buffer,
 8002964:	461c      	mov	r4, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <main+0x1b8>)
 8002968:	89db      	ldrh	r3, [r3, #14]
	sprintf(uart_buffer,
 800296a:	461d      	mov	r5, r3
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <main+0x1b8>)
 800296e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	sprintf(uart_buffer,
 8002972:	461e      	mov	r6, r3
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <main+0x1b8>)
 8002976:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	sprintf(uart_buffer,
 800297a:	607b      	str	r3, [r7, #4]
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <main+0x1b8>)
 800297e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	sprintf(uart_buffer,
 8002982:	f107 000c 	add.w	r0, r7, #12
 8002986:	9306      	str	r3, [sp, #24]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	9305      	str	r3, [sp, #20]
 800298c:	9604      	str	r6, [sp, #16]
 800298e:	9503      	str	r5, [sp, #12]
 8002990:	9402      	str	r4, [sp, #8]
 8002992:	9101      	str	r1, [sp, #4]
 8002994:	9200      	str	r2, [sp, #0]
 8002996:	4673      	mov	r3, lr
 8002998:	4662      	mov	r2, ip
 800299a:	4913      	ldr	r1, [pc, #76]	; (80029e8 <main+0x1cc>)
 800299c:	f009 ff04 	bl	800c7a8 <siprintf>
	printf("%s", uart_buffer);
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4619      	mov	r1, r3
 80029a6:	4811      	ldr	r0, [pc, #68]	; (80029ec <main+0x1d0>)
 80029a8:	f009 fe5a 	bl	800c660 <iprintf>
	HAL_Delay(5);
 80029ac:	2005      	movs	r0, #5
 80029ae:	f7ff f884 	bl	8001aba <HAL_Delay>
    MX_APPE_Process();
 80029b2:	e795      	b.n	80028e0 <main+0xc4>
 80029b4:	0800db0c 	.word	0x0800db0c
 80029b8:	20000a18 	.word	0x20000a18
 80029bc:	20000cbc 	.word	0x20000cbc
 80029c0:	0800db28 	.word	0x0800db28
 80029c4:	200010c8 	.word	0x200010c8
 80029c8:	0800db54 	.word	0x0800db54
 80029cc:	20000aa8 	.word	0x20000aa8
 80029d0:	0800db88 	.word	0x0800db88
 80029d4:	200010b0 	.word	0x200010b0
 80029d8:	20000b04 	.word	0x20000b04
 80029dc:	0800db9c 	.word	0x0800db9c
 80029e0:	0800dbc4 	.word	0x0800dbc4
 80029e4:	200010c0 	.word	0x200010c0
 80029e8:	0800dbd8 	.word	0x0800dbd8
 80029ec:	0800dc30 	.word	0x0800dc30

080029f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b09a      	sub	sp, #104	; 0x68
 80029f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f6:	f107 0320 	add.w	r3, r7, #32
 80029fa:	2248      	movs	r2, #72	; 0x48
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f009 fe26 	bl	800c650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a16:	f002 fe59 	bl	80056cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002a1a:	2010      	movs	r0, #16
 8002a1c:	f7ff feb5 	bl	800278a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a20:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <SystemClock_Config+0xc0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <SystemClock_Config+0xc0>)
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <SystemClock_Config+0xc0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002a3c:	2327      	movs	r3, #39	; 0x27
 8002a3e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a46:	2301      	movs	r3, #1
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a50:	2301      	movs	r3, #1
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a54:	2340      	movs	r3, #64	; 0x40
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002a5c:	23a0      	movs	r3, #160	; 0xa0
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a64:	f107 0320 	add.w	r3, r7, #32
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 f9c3 	bl	8005df4 <HAL_RCC_OscConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002a74:	f000 fa1c 	bl	8002eb0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a78:	236f      	movs	r3, #111	; 0x6f
 8002a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fd1f 	bl	80064dc <HAL_RCC_ClockConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002aa4:	f000 fa04 	bl	8002eb0 <Error_Handler>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3768      	adds	r7, #104	; 0x68
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	58000400 	.word	0x58000400

08002ab4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b094      	sub	sp, #80	; 0x50
 8002ab8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aba:	463b      	mov	r3, r7
 8002abc:	2250      	movs	r2, #80	; 0x50
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f009 fdc5 	bl	800c650 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002ac6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002aca:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ada:	463b      	mov	r3, r7
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 f93a 	bl	8006d56 <HAL_RCCEx_PeriphCLKConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002ae8:	f000 f9e2 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002aec:	bf00      	nop
 8002aee:	3750      	adds	r7, #80	; 0x50
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <MX_I2C1_Init+0x78>)
 8002afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <MX_I2C1_Init+0x7c>)
 8002b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b2e:	480e      	ldr	r0, [pc, #56]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b30:	f001 fb90 	bl	8004254 <HAL_I2C_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b3a:	f000 f9b9 	bl	8002eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4809      	ldr	r0, [pc, #36]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b42:	f002 f917 	bl	8004d74 <HAL_I2CEx_ConfigAnalogFilter>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b4c:	f000 f9b0 	bl	8002eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b50:	2100      	movs	r1, #0
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MX_I2C1_Init+0x74>)
 8002b54:	f002 f959 	bl	8004e0a <HAL_I2CEx_ConfigDigitalFilter>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b5e:	f000 f9a7 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000a18 	.word	0x20000a18
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	00707cbb 	.word	0x00707cbb

08002b74 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_IPCC_Init+0x20>)
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <MX_IPCC_Init+0x24>)
 8002b7c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_IPCC_Init+0x20>)
 8002b80:	f002 f990 	bl	8004ea4 <HAL_IPCC_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b8a:	f000 f991 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000a6c 	.word	0x20000a6c
 8002b98:	58000c00 	.word	0x58000c00

08002b9c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <MX_LPTIM1_Init+0x54>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002bd8:	4804      	ldr	r0, [pc, #16]	; (8002bec <MX_LPTIM1_Init+0x50>)
 8002bda:	f002 fa61 	bl	80050a0 <HAL_LPTIM_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8002be4:	f000 f964 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000aa8 	.word	0x20000aa8
 8002bf0:	40007c00 	.word	0x40007c00

08002bf4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <MX_RTC_Init+0x64>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c16:	220f      	movs	r2, #15
 8002c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c3a:	480a      	ldr	r0, [pc, #40]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c3c:	f004 fb12 	bl	8007264 <HAL_RTC_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002c46:	f000 f933 	bl	8002eb0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <MX_RTC_Init+0x60>)
 8002c50:	f004 fc08 	bl	8007464 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002c5a:	f000 f929 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000ae0 	.word	0x20000ae0
 8002c68:	40002800 	.word	0x40002800

08002c6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c72:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <MX_SPI1_Init+0x78>)
 8002c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c8e:	2202      	movs	r2, #2
 8002c90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002ca2:	2218      	movs	r2, #24
 8002ca4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cba:	2207      	movs	r2, #7
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cca:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <MX_SPI1_Init+0x74>)
 8002ccc:	f004 fc86 	bl	80075dc <HAL_SPI_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002cd6:	f000 f8eb 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000b04 	.word	0x20000b04
 8002ce4:	40013000 	.word	0x40013000

08002ce8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cec:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002cee:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <MX_USART1_UART_Init+0x98>)
 8002cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002d0c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d10:	220c      	movs	r2, #12
 8002d12:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d32:	4812      	ldr	r0, [pc, #72]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d34:	f005 fca2 	bl	800867c <HAL_UART_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002d3e:	f000 f8b7 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d42:	2100      	movs	r1, #0
 8002d44:	480d      	ldr	r0, [pc, #52]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d46:	f006 f9f1 	bl	800912c <HAL_UARTEx_SetTxFifoThreshold>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002d50:	f000 f8ae 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d54:	2100      	movs	r1, #0
 8002d56:	4809      	ldr	r0, [pc, #36]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d58:	f006 fa26 	bl	80091a8 <HAL_UARTEx_SetRxFifoThreshold>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002d62:	f000 f8a5 	bl	8002eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_USART1_UART_Init+0x94>)
 8002d68:	f006 f9a7 	bl	80090ba <HAL_UARTEx_DisableFifoMode>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002d72:	f000 f89d 	bl	8002eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000c28 	.word	0x20000c28
 8002d80:	40013800 	.word	0x40013800

08002d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d88:	2004      	movs	r0, #4
 8002d8a:	f7ff fd14 	bl	80027b6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7ff fd11 	bl	80027b6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	2100      	movs	r1, #0
 8002d98:	200b      	movs	r0, #11
 8002d9a:	f000 fe36 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d9e:	200b      	movs	r0, #11
 8002da0:	f000 fe4d 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	200c      	movs	r0, #12
 8002daa:	f000 fe2e 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002dae:	200c      	movs	r0, #12
 8002db0:	f000 fe45 	bl	8003a3e <HAL_NVIC_EnableIRQ>

}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dcc:	2004      	movs	r0, #4
 8002dce:	f7ff fd0b 	bl	80027e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7ff fd08 	bl	80027e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f7ff fd05 	bl	80027e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dde:	2008      	movs	r0, #8
 8002de0:	f7ff fd02 	bl	80027e8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8002de4:	2200      	movs	r2, #0
 8002de6:	213b      	movs	r1, #59	; 0x3b
 8002de8:	481d      	ldr	r0, [pc, #116]	; (8002e60 <MX_GPIO_Init+0xa8>)
 8002dea:	f001 f9f7 	bl	80041dc <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dee:	2310      	movs	r3, #16
 8002df0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df6:	2301      	movs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4819      	ldr	r0, [pc, #100]	; (8002e64 <MX_GPIO_Init+0xac>)
 8002e00:	f001 f87c 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 PB4
                           LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
 8002e04:	233b      	movs	r3, #59	; 0x3b
 8002e06:	607b      	str	r3, [r7, #4]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4811      	ldr	r0, [pc, #68]	; (8002e60 <MX_GPIO_Init+0xa8>)
 8002e1a:	f001 f86f 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002e30:	230a      	movs	r3, #10
 8002e32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3c:	f001 f85e 	bl	8003efc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002e40:	2303      	movs	r3, #3
 8002e42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_GPIO_Init+0xb0>)
 8002e52:	f001 f853 	bl	8003efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	48000400 	.word	0x48000400
 8002e64:	48000800 	.word	0x48000800
 8002e68:	48000c00 	.word	0x48000c00

08002e6c <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	200010c8 	.word	0x200010c8

08002e8c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002e94:	1d39      	adds	r1, r7, #4
 8002e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <__io_putchar+0x20>)
 8002e9e:	f005 fc3d 	bl	800871c <HAL_UART_Transmit>

  return ch;
 8002ea2:	687b      	ldr	r3, [r7, #4]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000c28 	.word	0x20000c28

08002eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <Error_Handler+0x8>

08002eba <LL_RCC_EnableRTC>:
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_AHB2_GRP1_EnableClock>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_AHB3_GRP1_EnableClock>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f64:	68fb      	ldr	r3, [r7, #12]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4013      	ands	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002fa8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fac:	f7ff ffaf 	bl	8002f0e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	202e      	movs	r0, #46	; 0x2e
 8002fb6:	f000 fd28 	bl	8003a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002fba:	202e      	movs	r0, #46	; 0x2e
 8002fbc:	f000 fd3f 	bl	8003a3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b09c      	sub	sp, #112	; 0x70
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	2250      	movs	r2, #80	; 0x50
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f009 fb33 	bl	800c650 <memset>
  if(hi2c->Instance==I2C1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_I2C_MspInit+0x98>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d12e      	bne.n	8003052 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ff8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	4618      	mov	r0, r3
 8003004:	f003 fea7 	bl	8006d56 <HAL_RCCEx_PeriphCLKConfig>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800300e:	f7ff ff4f 	bl	8002eb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	2002      	movs	r0, #2
 8003014:	f7ff ff62 	bl	8002edc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003018:	f44f 7340 	mov.w	r3, #768	; 0x300
 800301c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800301e:	2312      	movs	r3, #18
 8003020:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800302a:	2304      	movs	r3, #4
 800302c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003032:	4619      	mov	r1, r3
 8003034:	480a      	ldr	r0, [pc, #40]	; (8003060 <HAL_I2C_MspInit+0x9c>)
 8003036:	f000 ff61 	bl	8003efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800303a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800303e:	f7ff ff7f 	bl	8002f40 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	201e      	movs	r0, #30
 8003048:	f000 fcdf 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800304c:	201e      	movs	r0, #30
 800304e:	f000 fcf6 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3770      	adds	r7, #112	; 0x70
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40005400 	.word	0x40005400
 8003060:	48000400 	.word	0x48000400

08003064 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <HAL_IPCC_MspInit+0x44>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d113      	bne.n	800309e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003076:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800307a:	f7ff ff48 	bl	8002f0e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	202c      	movs	r0, #44	; 0x2c
 8003084:	f000 fcc1 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003088:	202c      	movs	r0, #44	; 0x2c
 800308a:	f000 fcd8 	bl	8003a3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	202d      	movs	r0, #45	; 0x2d
 8003094:	f000 fcb9 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003098:	202d      	movs	r0, #45	; 0x2d
 800309a:	f000 fcd0 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	58000c00 	.word	0x58000c00

080030ac <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b096      	sub	sp, #88	; 0x58
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	2250      	movs	r2, #80	; 0x50
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f009 fac7 	bl	800c650 <memset>
  if(hlptim->Instance==LPTIM1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_LPTIM_MspInit+0x60>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d11a      	bne.n	8003102 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80030cc:	2310      	movs	r3, #16
 80030ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80030d0:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	4618      	mov	r0, r3
 80030dc:	f003 fe3b 	bl	8006d56 <HAL_RCCEx_PeriphCLKConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80030e6:	f7ff fee3 	bl	8002eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80030ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80030ee:	f7ff ff27 	bl	8002f40 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	202f      	movs	r0, #47	; 0x2f
 80030f8:	f000 fc87 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80030fc:	202f      	movs	r0, #47	; 0x2f
 80030fe:	f000 fc9e 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	3758      	adds	r7, #88	; 0x58
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40007c00 	.word	0x40007c00

08003110 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b096      	sub	sp, #88	; 0x58
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	2250      	movs	r2, #80	; 0x50
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f009 fa95 	bl	800c650 <memset>
  if(hrtc->Instance==RTC)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_RTC_MspInit+0x64>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d11d      	bne.n	800316c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003134:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	4618      	mov	r0, r3
 8003142:	f003 fe08 	bl	8006d56 <HAL_RCCEx_PeriphCLKConfig>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800314c:	f7ff feb0 	bl	8002eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003150:	f7ff feb3 	bl	8002eba <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003154:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003158:	f7ff fef2 	bl	8002f40 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2100      	movs	r1, #0
 8003160:	2003      	movs	r0, #3
 8003162:	f000 fc52 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003166:	2003      	movs	r0, #3
 8003168:	f000 fc69 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800316c:	bf00      	nop
 800316e:	3758      	adds	r7, #88	; 0x58
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40002800 	.word	0x40002800

08003178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3c      	ldr	r2, [pc, #240]	; (8003288 <HAL_SPI_MspInit+0x110>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d171      	bne.n	800327e <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800319a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800319e:	f7ff fee8 	bl	8002f72 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7ff fe9a 	bl	8002edc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80031a8:	23c2      	movs	r3, #194	; 0xc2
 80031aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031b8:	2305      	movs	r3, #5
 80031ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	4619      	mov	r1, r3
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c6:	f000 fe99 	bl	8003efc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 80031ca:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031cc:	4a30      	ldr	r2, [pc, #192]	; (8003290 <HAL_SPI_MspInit+0x118>)
 80031ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031d2:	2206      	movs	r2, #6
 80031d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031e2:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ee:	4b27      	ldr	r3, [pc, #156]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_SPI_MspInit+0x114>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003200:	4822      	ldr	r0, [pc, #136]	; (800328c <HAL_SPI_MspInit+0x114>)
 8003202:	f000 fc61 	bl	8003ac8 <HAL_DMA_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 800320c:	f7ff fe50 	bl	8002eb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_SPI_MspInit+0x114>)
 8003214:	659a      	str	r2, [r3, #88]	; 0x58
 8003216:	4a1d      	ldr	r2, [pc, #116]	; (800328c <HAL_SPI_MspInit+0x114>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_SPI_MspInit+0x120>)
 8003220:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003224:	2207      	movs	r2, #7
 8003226:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 800322a:	2210      	movs	r2, #16
 800322c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 800323c:	2200      	movs	r2, #0
 800323e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003248:	2200      	movs	r2, #0
 800324a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 800324e:	2200      	movs	r2, #0
 8003250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003252:	4810      	ldr	r0, [pc, #64]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003254:	f000 fc38 	bl	8003ac8 <HAL_DMA_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 800325e:	f7ff fe27 	bl	8002eb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_SPI_MspInit+0x11c>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	2022      	movs	r0, #34	; 0x22
 8003274:	f000 fbc9 	bl	8003a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003278:	2022      	movs	r0, #34	; 0x22
 800327a:	f000 fbe0 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800327e:	bf00      	nop
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40013000 	.word	0x40013000
 800328c:	20000b68 	.word	0x20000b68
 8003290:	40020008 	.word	0x40020008
 8003294:	20000bc8 	.word	0x20000bc8
 8003298:	4002001c 	.word	0x4002001c

0800329c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b09c      	sub	sp, #112	; 0x70
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	2250      	movs	r2, #80	; 0x50
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f009 f9c7 	bl	800c650 <memset>
  if(huart->Instance==USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a16      	ldr	r2, [pc, #88]	; (8003320 <HAL_UART_MspInit+0x84>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d124      	bne.n	8003316 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032cc:	2301      	movs	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fd3c 	bl	8006d56 <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032e4:	f7ff fde4 	bl	8002eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032ec:	f7ff fe41 	bl	8002f72 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f0:	2002      	movs	r0, #2
 80032f2:	f7ff fdf3 	bl	8002edc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80032f6:	23c0      	movs	r3, #192	; 0xc0
 80032f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003306:	2307      	movs	r3, #7
 8003308:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800330e:	4619      	mov	r1, r3
 8003310:	4804      	ldr	r0, [pc, #16]	; (8003324 <HAL_UART_MspInit+0x88>)
 8003312:	f000 fdf3 	bl	8003efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003316:	bf00      	nop
 8003318:	3770      	adds	r7, #112	; 0x70
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40013800 	.word	0x40013800
 8003324:	48000400 	.word	0x48000400

08003328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800332c:	e7fe      	b.n	800332c <NMI_Handler+0x4>

0800332e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <HardFault_Handler+0x4>

08003334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <MemManage_Handler+0x4>

0800333a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800333e:	e7fe      	b.n	800333e <BusFault_Handler+0x4>

08003340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <UsageFault_Handler+0x4>

08003346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003374:	f000 f9d6 	bl	8003724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}

0800337c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003380:	f7fe ff4a 	bl	8002218 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}

08003388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <DMA1_Channel1_IRQHandler+0x10>)
 800338e:	f000 fca2 	bl	8003cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000b68 	.word	0x20000b68

0800339c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <DMA1_Channel2_IRQHandler+0x10>)
 80033a2:	f000 fc98 	bl	8003cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000bc8 	.word	0x20000bc8

080033b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <I2C1_EV_IRQHandler+0x10>)
 80033b6:	f001 fa0b 	bl	80047d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000a18 	.word	0x20000a18

080033c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <SPI1_IRQHandler+0x10>)
 80033ca:	f004 fe5b 	bl	8008084 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000b04 	.word	0x20000b04

080033d8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80033dc:	f008 fd3c 	bl	800be58 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80033e8:	f008 fd6e 	bl	800bec8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80033f4:	f000 ff0a 	bl	800420c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}

080033fc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <LPTIM1_IRQHandler+0x10>)
 8003402:	f001 ff71 	bl	80052e8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000aa8 	.word	0x20000aa8

08003410 <_read>:
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e00a      	b.n	8003438 <_read+0x28>
 8003422:	f3af 8000 	nop.w
 8003426:	4601      	mov	r1, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60ba      	str	r2, [r7, #8]
 800342e:	b2ca      	uxtb	r2, r1
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3301      	adds	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	dbf0      	blt.n	8003422 <_read+0x12>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_write>:
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e009      	b.n	8003470 <_write+0x26>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	60ba      	str	r2, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fd11 	bl	8002e8c <__io_putchar>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	dbf1      	blt.n	800345c <_write+0x12>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_close>:
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <_fstat>:
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	2300      	movs	r3, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <_isatty>:
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	2301      	movs	r3, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_lseek>:
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	2300      	movs	r3, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <_sbrk>:
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <_sbrk+0x5c>)
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <_sbrk+0x60>)
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <_sbrk+0x64>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <_sbrk+0x22>
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <_sbrk+0x64>)
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <_sbrk+0x68>)
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <_sbrk+0x64>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d207      	bcs.n	800352c <_sbrk+0x40>
 800351c:	f009 f860 	bl	800c5e0 <__errno>
 8003520:	4603      	mov	r3, r0
 8003522:	220c      	movs	r2, #12
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800352a:	e009      	b.n	8003540 <_sbrk+0x54>
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <_sbrk+0x64>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <_sbrk+0x64>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	4a05      	ldr	r2, [pc, #20]	; (8003550 <_sbrk+0x64>)
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20030000 	.word	0x20030000
 800354c:	00000400 	.word	0x00000400
 8003550:	200010cc 	.word	0x200010cc
 8003554:	20001290 	.word	0x20001290

08003558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <SystemInit+0x98>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <SystemInit+0x98>)
 8003564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003584:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003590:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <SystemInit+0x9c>)
 8003592:	4013      	ands	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a2:	f023 0305 	bic.w	r3, r3, #5
 80035a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c2:	4a0d      	ldr	r2, [pc, #52]	; (80035f8 <SystemInit+0xa0>)
 80035c4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <SystemInit+0xa0>)
 80035cc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00
 80035f4:	faf6fefb 	.word	0xfaf6fefb
 80035f8:	22041000 	.word	0x22041000

080035fc <CopyDataInit>:
 80035fc:	58d4      	ldr	r4, [r2, r3]
 80035fe:	50c4      	str	r4, [r0, r3]
 8003600:	3304      	adds	r3, #4

08003602 <LoopCopyDataInit>:
 8003602:	18c4      	adds	r4, r0, r3
 8003604:	428c      	cmp	r4, r1
 8003606:	d3f9      	bcc.n	80035fc <CopyDataInit>
 8003608:	4770      	bx	lr

0800360a <FillZerobss>:
 800360a:	6003      	str	r3, [r0, #0]
 800360c:	3004      	adds	r0, #4

0800360e <LoopFillZerobss>:
 800360e:	4288      	cmp	r0, r1
 8003610:	d3fb      	bcc.n	800360a <FillZerobss>
 8003612:	4770      	bx	lr

08003614 <Reset_Handler>:
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <LoopForever+0x2>)
 8003616:	4685      	mov	sp, r0
 8003618:	f7ff ff9e 	bl	8003558 <SystemInit>
 800361c:	480b      	ldr	r0, [pc, #44]	; (800364c <LoopForever+0x6>)
 800361e:	490c      	ldr	r1, [pc, #48]	; (8003650 <LoopForever+0xa>)
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <LoopForever+0xe>)
 8003622:	2300      	movs	r3, #0
 8003624:	f7ff ffed 	bl	8003602 <LoopCopyDataInit>
 8003628:	480b      	ldr	r0, [pc, #44]	; (8003658 <LoopForever+0x12>)
 800362a:	490c      	ldr	r1, [pc, #48]	; (800365c <LoopForever+0x16>)
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <LoopForever+0x1a>)
 800362e:	2300      	movs	r3, #0
 8003630:	f7ff ffe7 	bl	8003602 <LoopCopyDataInit>
 8003634:	480b      	ldr	r0, [pc, #44]	; (8003664 <LoopForever+0x1e>)
 8003636:	490c      	ldr	r1, [pc, #48]	; (8003668 <LoopForever+0x22>)
 8003638:	2300      	movs	r3, #0
 800363a:	f7ff ffe8 	bl	800360e <LoopFillZerobss>
 800363e:	f008 ffd5 	bl	800c5ec <__libc_init_array>
 8003642:	f7ff f8eb 	bl	800281c <main>

08003646 <LoopForever>:
 8003646:	e7fe      	b.n	8003646 <LoopForever>
 8003648:	20030000 	.word	0x20030000
 800364c:	20000008 	.word	0x20000008
 8003650:	2000008c 	.word	0x2000008c
 8003654:	0800df80 	.word	0x0800df80
 8003658:	200301e3 	.word	0x200301e3
 800365c:	200301e3 	.word	0x200301e3
 8003660:	0800e8cd 	.word	0x0800e8cd
 8003664:	2000095c 	.word	0x2000095c
 8003668:	20001290 	.word	0x20001290

0800366c <ADC1_IRQHandler>:
 800366c:	e7fe      	b.n	800366c <ADC1_IRQHandler>
	...

08003670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_Init+0x3c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_Init+0x3c>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003684:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003686:	2003      	movs	r0, #3
 8003688:	f000 f9b4 	bl	80039f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800368c:	2000      	movs	r0, #0
 800368e:	f000 f80f 	bl	80036b0 <HAL_InitTick>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	71fb      	strb	r3, [r7, #7]
 800369c:	e001      	b.n	80036a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800369e:	f7ff fc81 	bl	8002fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036a2:	79fb      	ldrb	r3, [r7, #7]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	58004000 	.word	0x58004000

080036b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <HAL_InitTick+0x6c>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d024      	beq.n	800370e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036c4:	f003 f8b6 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_InitTick+0x6c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	4619      	mov	r1, r3
 80036d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f9ca 	bl	8003a76 <HAL_SYSTICK_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d809      	bhi.n	8003702 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ee:	2200      	movs	r2, #0
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f6:	f000 f988 	bl	8003a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_InitTick+0x70>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e007      	b.n	8003712 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	e004      	b.n	8003712 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e001      	b.n	8003712 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000010 	.word	0x20000010
 8003720:	2000000c 	.word	0x2000000c

08003724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_IncTick+0x20>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_IncTick+0x24>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4413      	add	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_IncTick+0x24>)
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000010 	.word	0x20000010
 8003748:	200010d0 	.word	0x200010d0

0800374c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return uwTick;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_GetTick+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	200010d0 	.word	0x200010d0

08003764 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_GetTickPrio+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c

0800377c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_GetTickFreq+0x14>)
 8003782:	781b      	ldrb	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000010 	.word	0x20000010

08003794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <__NVIC_GetPriorityGrouping+0x18>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0307 	and.w	r3, r3, #7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	db0b      	blt.n	8003822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <__NVIC_EnableIRQ+0x38>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2001      	movs	r0, #1
 800381a:	fa00 f202 	lsl.w	r2, r0, r2
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db12      	blt.n	800386c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	490a      	ldr	r1, [pc, #40]	; (8003878 <__NVIC_DisableIRQ+0x44>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	3320      	adds	r3, #32
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003860:	f3bf 8f4f 	dsb	sy
}
 8003864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003866:	f3bf 8f6f 	isb	sy
}
 800386a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0c      	blt.n	80038a8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <__NVIC_SetPendingIRQ+0x38>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	3340      	adds	r3, #64	; 0x40
 80038a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000e100 	.word	0xe000e100

080038b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0c      	blt.n	80038e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	; (80038f0 <__NVIC_ClearPendingIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	3360      	adds	r3, #96	; 0x60
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	; (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	; (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c0:	d301      	bcc.n	80039c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c2:	2301      	movs	r3, #1
 80039c4:	e00f      	b.n	80039e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <SysTick_Config+0x40>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ce:	210f      	movs	r1, #15
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d4:	f7ff ff8e 	bl	80038f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SysTick_Config+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039de:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SysTick_Config+0x40>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fec9 	bl	8003794 <__NVIC_SetPriorityGrouping>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a18:	f7ff fee0 	bl	80037dc <__NVIC_GetPriorityGrouping>
 8003a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7ff ff90 	bl	8003948 <NVIC_EncodePriority>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff5f 	bl	80038f4 <__NVIC_SetPriority>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fed3 	bl	80037f8 <__NVIC_EnableIRQ>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fee3 	bl	8003834 <__NVIC_DisableIRQ>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ff96 	bl	80039b0 <SysTick_Config>
 8003a84:	4603      	mov	r3, r0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	4603      	mov	r3, r0
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff feed 	bl	800387c <__NVIC_SetPendingIRQ>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fefd 	bl	80038b8 <__NVIC_ClearPendingIRQ>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e08e      	b.n	8003bf8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_DMA_Init+0x138>)
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d80f      	bhi.n	8003b06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <HAL_DMA_Init+0x13c>)
 8003aee:	4413      	add	r3, r2
 8003af0:	4a45      	ldr	r2, [pc, #276]	; (8003c08 <HAL_DMA_Init+0x140>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	009a      	lsls	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a42      	ldr	r2, [pc, #264]	; (8003c0c <HAL_DMA_Init+0x144>)
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
 8003b04:	e00e      	b.n	8003b24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <HAL_DMA_Init+0x148>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a3d      	ldr	r2, [pc, #244]	; (8003c08 <HAL_DMA_Init+0x140>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	009a      	lsls	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <HAL_DMA_Init+0x14c>)
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f95c 	bl	8003e34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b84:	d102      	bne.n	8003b8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003b98:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ba2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_DMA_Init+0x106>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d80c      	bhi.n	8003bce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f97b 	bl	8003eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	e008      	b.n	8003be0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40020407 	.word	0x40020407
 8003c04:	bffdfff8 	.word	0xbffdfff8
 8003c08:	cccccccd 	.word	0xcccccccd
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	bffdfbf8 	.word	0xbffdfbf8
 8003c14:	40020400 	.word	0x40020400

08003c18 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d005      	beq.n	8003c3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2204      	movs	r2, #4
 8003c34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	e047      	b.n	8003ccc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 020e 	bic.w	r2, r2, #14
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	f003 021c 	and.w	r2, r3, #28
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00c      	beq.n	8003cac <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003caa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
    }
  }
  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f003 031c 	and.w	r3, r3, #28
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d026      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x7a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d021      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f003 021c 	and.w	r2, r3, #28
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2104      	movs	r1, #4
 8003d38:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d071      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d4e:	e06c      	b.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f003 031c 	and.w	r3, r3, #28
 8003d58:	2202      	movs	r2, #2
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d02e      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xec>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d029      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 020a 	bic.w	r2, r2, #10
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	f003 021c 	and.w	r2, r3, #28
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2102      	movs	r1, #2
 8003da2:	fa01 f202 	lsl.w	r2, r1, r2
 8003da6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d038      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dc0:	e033      	b.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 031c 	and.w	r3, r3, #28
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x156>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d025      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 020e 	bic.w	r2, r2, #14
 8003dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f003 021c 	and.w	r2, r3, #28
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e2a:	bf00      	nop
 8003e2c:	bf00      	nop
}
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d80a      	bhi.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e54:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6493      	str	r3, [r2, #72]	; 0x48
 8003e5c:	e007      	b.n	8003e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e68:	4413      	add	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	3b08      	subs	r3, #8
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40020407 	.word	0x40020407
 8003ea4:	4002081c 	.word	0x4002081c
 8003ea8:	cccccccd 	.word	0xcccccccd
 8003eac:	40020880 	.word	0x40020880

08003eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003ed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	1000823f 	.word	0x1000823f
 8003ef8:	40020940 	.word	0x40020940

08003efc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0a:	e14c      	b.n	80041a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2101      	movs	r1, #1
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 813e 	beq.w	80041a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d005      	beq.n	8003f3c <HAL_GPIO_Init+0x40>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d130      	bne.n	8003f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f72:	2201      	movs	r2, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 0201 	and.w	r2, r3, #1
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d017      	beq.n	8003fda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d123      	bne.n	800402e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	08da      	lsrs	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3208      	adds	r2, #8
 8003fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	08da      	lsrs	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3208      	adds	r2, #8
 8004028:	6939      	ldr	r1, [r7, #16]
 800402a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0203 	and.w	r2, r3, #3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8098 	beq.w	80041a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004070:	4a54      	ldr	r2, [pc, #336]	; (80041c4 <HAL_GPIO_Init+0x2c8>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	3302      	adds	r3, #2
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	220f      	movs	r2, #15
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800409a:	d019      	beq.n	80040d0 <HAL_GPIO_Init+0x1d4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a4a      	ldr	r2, [pc, #296]	; (80041c8 <HAL_GPIO_Init+0x2cc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_GPIO_Init+0x1d0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a49      	ldr	r2, [pc, #292]	; (80041cc <HAL_GPIO_Init+0x2d0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00d      	beq.n	80040c8 <HAL_GPIO_Init+0x1cc>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a48      	ldr	r2, [pc, #288]	; (80041d0 <HAL_GPIO_Init+0x2d4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <HAL_GPIO_Init+0x1c8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <HAL_GPIO_Init+0x2d8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_GPIO_Init+0x1c4>
 80040bc:	2304      	movs	r3, #4
 80040be:	e008      	b.n	80040d2 <HAL_GPIO_Init+0x1d6>
 80040c0:	2307      	movs	r3, #7
 80040c2:	e006      	b.n	80040d2 <HAL_GPIO_Init+0x1d6>
 80040c4:	2303      	movs	r3, #3
 80040c6:	e004      	b.n	80040d2 <HAL_GPIO_Init+0x1d6>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e002      	b.n	80040d2 <HAL_GPIO_Init+0x1d6>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_GPIO_Init+0x1d6>
 80040d0:	2300      	movs	r3, #0
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	f002 0203 	and.w	r2, r2, #3
 80040d8:	0092      	lsls	r2, r2, #2
 80040da:	4093      	lsls	r3, r2
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040e2:	4938      	ldr	r1, [pc, #224]	; (80041c4 <HAL_GPIO_Init+0x2c8>)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	3302      	adds	r3, #2
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f0:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004114:	4a30      	ldr	r2, [pc, #192]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800411a:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800413e:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004144:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 8004146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	43db      	mvns	r3, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800416a:	4a1b      	ldr	r2, [pc, #108]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 8004174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004198:	4a0f      	ldr	r2, [pc, #60]	; (80041d8 <HAL_GPIO_Init+0x2dc>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f aeab 	bne.w	8003f0c <HAL_GPIO_Init+0x10>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40010000 	.word	0x40010000
 80041c8:	48000400 	.word	0x48000400
 80041cc:	48000800 	.word	0x48000800
 80041d0:	48000c00 	.word	0x48000c00
 80041d4:	48001000 	.word	0x48001000
 80041d8:	58000800 	.word	0x58000800

080041dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
 80041e8:	4613      	mov	r3, r2
 80041ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041f8:	e002      	b.n	8004200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_HSEM_IRQHandler+0x30>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_HSEM_IRQHandler+0x30>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	43db      	mvns	r3, r3
 8004220:	4906      	ldr	r1, [pc, #24]	; (800423c <HAL_HSEM_IRQHandler+0x30>)
 8004222:	4013      	ands	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004226:	4a05      	ldr	r2, [pc, #20]	; (800423c <HAL_HSEM_IRQHandler+0x30>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f807 	bl	8004240 <HAL_HSEM_FreeCallback>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	58001500 	.word	0x58001500

08004240 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e081      	b.n	800436a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fe fea2 	bl	8002fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	e006      	b.n	80042dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d104      	bne.n	80042ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b20      	cmp	r3, #32
 8004398:	f040 80f9 	bne.w	800458e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x34>
 80043a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0ed      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_I2C_Mem_Write+0x4e>
 80043be:	2302      	movs	r3, #2
 80043c0:	e0e6      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043ca:	f7ff f9bf 	bl	800374c <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2319      	movs	r3, #25
 80043d6:	2201      	movs	r2, #1
 80043d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fadd 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0d1      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2221      	movs	r2, #33	; 0x21
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004414:	88f8      	ldrh	r0, [r7, #6]
 8004416:	893a      	ldrh	r2, [r7, #8]
 8004418:	8979      	ldrh	r1, [r7, #10]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	4603      	mov	r3, r0
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f9ed 	bl	8004804 <I2C_RequestMemoryWrite>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0a9      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2bff      	cmp	r3, #255	; 0xff
 8004444:	d90e      	bls.n	8004464 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	22ff      	movs	r2, #255	; 0xff
 800444a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	b2da      	uxtb	r2, r3
 8004452:	8979      	ldrh	r1, [r7, #10]
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fc57 	bl	8004d10 <I2C_TransferConfig>
 8004462:	e00f      	b.n	8004484 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	b2da      	uxtb	r2, r3
 8004474:	8979      	ldrh	r1, [r7, #10]
 8004476:	2300      	movs	r3, #0
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fc46 	bl	8004d10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fad6 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e07b      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d034      	beq.n	800453c <HAL_I2C_Mem_Write+0x1c8>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d130      	bne.n	800453c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa59 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e04d      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2bff      	cmp	r3, #255	; 0xff
 80044fc:	d90e      	bls.n	800451c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	22ff      	movs	r2, #255	; 0xff
 8004502:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	b2da      	uxtb	r2, r3
 800450a:	8979      	ldrh	r1, [r7, #10]
 800450c:	2300      	movs	r3, #0
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fbfb 	bl	8004d10 <I2C_TransferConfig>
 800451a:	e00f      	b.n	800453c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	b2da      	uxtb	r2, r3
 800452c:	8979      	ldrh	r1, [r7, #10]
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fbea 	bl	8004d10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d19e      	bne.n	8004484 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fabc 	bl	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01a      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2220      	movs	r2, #32
 8004560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_I2C_Mem_Write+0x224>)
 800456e:	400b      	ands	r3, r1
 8004570:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	fe00e800 	.word	0xfe00e800

0800459c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	817b      	strh	r3, [r7, #10]
 80045ae:	460b      	mov	r3, r1
 80045b0:	813b      	strh	r3, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 80fd 	bne.w	80047be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_I2C_Mem_Read+0x34>
 80045ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0f1      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Mem_Read+0x4e>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0ea      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045f2:	f7ff f8ab 	bl	800374c <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2319      	movs	r3, #25
 80045fe:	2201      	movs	r2, #1
 8004600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f9c9 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0d5      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2222      	movs	r2, #34	; 0x22
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	; 0x40
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800463c:	88f8      	ldrh	r0, [r7, #6]
 800463e:	893a      	ldrh	r2, [r7, #8]
 8004640:	8979      	ldrh	r1, [r7, #10]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4603      	mov	r3, r0
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f92d 	bl	80048ac <I2C_RequestMemoryRead>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0ad      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2bff      	cmp	r3, #255	; 0xff
 800466c:	d90e      	bls.n	800468c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	22ff      	movs	r2, #255	; 0xff
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	b2da      	uxtb	r2, r3
 800467a:	8979      	ldrh	r1, [r7, #10]
 800467c:	4b52      	ldr	r3, [pc, #328]	; (80047c8 <HAL_I2C_Mem_Read+0x22c>)
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fb43 	bl	8004d10 <I2C_TransferConfig>
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469a:	b2da      	uxtb	r2, r3
 800469c:	8979      	ldrh	r1, [r7, #10]
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_I2C_Mem_Read+0x22c>)
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fb32 	bl	8004d10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2200      	movs	r2, #0
 80046b4:	2104      	movs	r1, #4
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f970 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07c      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d034      	beq.n	800476c <HAL_I2C_Mem_Read+0x1d0>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d130      	bne.n	800476c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	; 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f941 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e04d      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2bff      	cmp	r3, #255	; 0xff
 800472c:	d90e      	bls.n	800474c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	22ff      	movs	r2, #255	; 0xff
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	b2da      	uxtb	r2, r3
 800473a:	8979      	ldrh	r1, [r7, #10]
 800473c:	2300      	movs	r3, #0
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fae3 	bl	8004d10 <I2C_TransferConfig>
 800474a:	e00f      	b.n	800476c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	b2da      	uxtb	r2, r3
 800475c:	8979      	ldrh	r1, [r7, #10]
 800475e:	2300      	movs	r3, #0
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fad2 	bl	8004d10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d19a      	bne.n	80046ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f9a4 	bl	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e01a      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2220      	movs	r2, #32
 8004790:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_I2C_Mem_Read+0x230>)
 800479e:	400b      	ands	r3, r1
 80047a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
  }
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	80002400 	.word	0x80002400
 80047cc:	fe00e800 	.word	0xfe00e800

080047d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
  }
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4603      	mov	r3, r0
 8004814:	817b      	strh	r3, [r7, #10]
 8004816:	460b      	mov	r3, r1
 8004818:	813b      	strh	r3, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	8979      	ldrh	r1, [r7, #10]
 8004824:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <I2C_RequestMemoryWrite+0xa4>)
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fa6f 	bl	8004d10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8ff 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e02c      	b.n	80048a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800484c:	893b      	ldrh	r3, [r7, #8]
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	629a      	str	r2, [r3, #40]	; 0x28
 8004856:	e015      	b.n	8004884 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	b29b      	uxth	r3, r3
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f8e5 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e012      	b.n	80048a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800487a:	893b      	ldrh	r3, [r7, #8]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2200      	movs	r2, #0
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f884 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	80002000 	.word	0x80002000

080048ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	460b      	mov	r3, r1
 80048c0:	813b      	strh	r3, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	8979      	ldrh	r1, [r7, #10]
 80048cc:	4b20      	ldr	r3, [pc, #128]	; (8004950 <I2C_RequestMemoryRead+0xa4>)
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2300      	movs	r3, #0
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fa1c 	bl	8004d10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	69b9      	ldr	r1, [r7, #24]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f8ac 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e02c      	b.n	8004946 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048f2:	893b      	ldrh	r3, [r7, #8]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
 80048fc:	e015      	b.n	800492a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048fe:	893b      	ldrh	r3, [r7, #8]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	b29b      	uxth	r3, r3
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	69b9      	ldr	r1, [r7, #24]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f892 	bl	8004a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e012      	b.n	8004946 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004920:	893b      	ldrh	r3, [r7, #8]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2200      	movs	r2, #0
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f831 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	80002000 	.word	0x80002000

08004954 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d103      	bne.n	8004972 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d007      	beq.n	8004990 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	619a      	str	r2, [r3, #24]
  }
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ac:	e031      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b4:	d02d      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7fe fec9 	bl	800374c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d122      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d113      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e00f      	b.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d0be      	beq.n	80049ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a46:	e033      	b.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f87f 	bl	8004b50 <I2C_IsErrorOccurred>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e031      	b.n	8004ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a62:	d025      	beq.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fe fe72 	bl	800374c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11a      	bne.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d013      	beq.n	8004ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e007      	b.n	8004ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d1c4      	bne.n	8004a48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad4:	e02f      	b.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f838 	bl	8004b50 <I2C_IsErrorOccurred>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e02d      	b.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe fe2f 	bl	800374c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11a      	bne.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d013      	beq.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e007      	b.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d1c8      	bne.n	8004ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d068      	beq.n	8004c4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2210      	movs	r2, #16
 8004b82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b84:	e049      	b.n	8004c1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8c:	d045      	beq.n	8004c1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fe fddd 	bl	800374c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <I2C_IsErrorOccurred+0x54>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d13a      	bne.n	8004c1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc6:	d121      	bne.n	8004c0c <I2C_IsErrorOccurred+0xbc>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bce:	d01d      	beq.n	8004c0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d01a      	beq.n	8004c0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004be6:	f7fe fdb1 	bl	800374c <HAL_GetTick>
 8004bea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bec:	e00e      	b.n	8004c0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004bee:	f7fe fdad 	bl	800374c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b19      	cmp	r3, #25
 8004bfa:	d907      	bls.n	8004c0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f043 0320 	orr.w	r3, r3, #32
 8004c02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004c0a:	e006      	b.n	8004c1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d1e9      	bne.n	8004bee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d003      	beq.n	8004c30 <I2C_IsErrorOccurred+0xe0>
 8004c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0aa      	beq.n	8004b86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f043 0308 	orr.w	r3, r3, #8
 8004c88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	f043 0302 	orr.w	r3, r3, #2
 8004caa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01c      	beq.n	8004cfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff fe45 	bl	8004954 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <I2C_IsErrorOccurred+0x1bc>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	fe00e800 	.word	0xfe00e800

08004d10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	817b      	strh	r3, [r7, #10]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d22:	897b      	ldrh	r3, [r7, #10]
 8004d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d28:	7a7b      	ldrb	r3, [r7, #9]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	0d5b      	lsrs	r3, r3, #21
 8004d4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d4e:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <I2C_TransferConfig+0x60>)
 8004d50:	430b      	orrs	r3, r1
 8004d52:	43db      	mvns	r3, r3
 8004d54:	ea02 0103 	and.w	r1, r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	03ff63ff 	.word	0x03ff63ff

08004d74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d138      	bne.n	8004dfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e032      	b.n	8004dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	; 0x24
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d139      	bne.n	8004e94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e033      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2224      	movs	r2, #36	; 0x24
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01e      	beq.n	8004ef4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <HAL_IPCC_Init+0x60>)
 8004eb8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fe f8cc 	bl	8003064 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004ecc:	68b8      	ldr	r0, [r7, #8]
 8004ece:	f000 f85b 	bl	8004f88 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f82c 	bl	8004f3c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ef2:	e001      	b.n	8004ef8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	58000c00 	.word	0x58000c00

08004f08 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e00f      	b.n	8004f6a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <IPCC_SetDefaultCallbacks+0x44>)
 8004f54:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3306      	adds	r3, #6
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <IPCC_SetDefaultCallbacks+0x48>)
 8004f62:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d9ec      	bls.n	8004f4a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	08004f09 	.word	0x08004f09
 8004f84:	08004f23 	.word	0x08004f23

08004f88 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	223f      	movs	r2, #63	; 0x3f
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_RCC_SetLPTIMClockSource>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	401a      	ands	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_RCC_GetLPTIMClockSource>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0c1a      	lsrs	r2, r3, #16
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4313      	orrs	r3, r2
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <LL_APB1_GRP1_ForceReset>:
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4313      	orrs	r3, r2
 8005020:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_APB1_GRP2_ForceReset>:
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800503c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4313      	orrs	r3, r2
 8005044:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_APB1_GRP1_ReleaseReset>:
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	43db      	mvns	r3, r3
 8005064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005068:	4013      	ands	r3, r2
 800506a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_APB1_GRP2_ReleaseReset>:
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	43db      	mvns	r3, r3
 800508a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508e:	4013      	ands	r3, r2
 8005090:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e08f      	b.n	80051d2 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fd ffed 	bl	80030ac <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d004      	beq.n	80050f4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f2:	d103      	bne.n	80050fc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 031e 	bic.w	r3, r3, #30
 80050fa:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005104:	4293      	cmp	r3, r2
 8005106:	d005      	beq.n	8005114 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800510e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005112:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_LPTIM_Init+0x13c>)
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005124:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800512a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005130:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8005136:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800514e:	4313      	orrs	r3, r2
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d004      	beq.n	8005168 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005166:	d107      	bne.n	8005178 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005170:	4313      	orrs	r3, r2
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005180:	4293      	cmp	r3, r2
 8005182:	d00a      	beq.n	800519a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800518c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005192:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_LPTIM_Init+0x140>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	621a      	str	r2, [r3, #32]
 80051bc:	e004      	b.n	80051c8 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051c6:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	ff19f1fe 	.word	0xff19f1fe
 80051e0:	40007c00 	.word	0x40007c00

080051e4 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d108      	bne.n	8005214 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8005202:	4b38      	ldr	r3, [pc, #224]	; (80052e4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005208:	4a36      	ldr	r2, [pc, #216]	; (80052e4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 800520a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800520e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005212:	e007      	b.n	8005224 <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8005214:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521a:	4a32      	ldr	r2, [pc, #200]	; (80052e4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 800521c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2210      	movs	r2, #16
 800524a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005254:	2110      	movs	r1, #16
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f92c 	bl	80054b4 <LPTIM_WaitForFlag>
 800525c:	4603      	mov	r3, r0
 800525e:	2b03      	cmp	r3, #3
 8005260:	d101      	bne.n	8005266 <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e038      	b.n	80052d8 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2208      	movs	r2, #8
 800526c:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005276:	2108      	movs	r1, #8
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f91b 	bl	80054b4 <LPTIM_WaitForFlag>
 800527e:	4603      	mov	r3, r0
 8005280:	2b03      	cmp	r3, #3
 8005282:	d101      	bne.n	8005288 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e027      	b.n	80052d8 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f943 	bl	8005514 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f901 	bl	8005496 <HAL_LPTIM_GetState>
 8005294:	4603      	mov	r3, r0
 8005296:	2b03      	cmp	r3, #3
 8005298:	d101      	bne.n	800529e <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e01c      	b.n	80052d8 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0204 	orr.w	r2, r2, #4
 80052cc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40007c00 	.word	0x40007c00
 80052e4:	58000800 	.word	0x58000800

080052e8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10d      	bne.n	800531a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d106      	bne.n	800531a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fd fda9 	bl	8002e6c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d10d      	bne.n	8005344 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d106      	bne.n	8005344 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2202      	movs	r2, #2
 800533c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f86d 	bl	800541e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d10d      	bne.n	800536e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d106      	bne.n	800536e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2204      	movs	r2, #4
 8005366:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f862 	bl	8005432 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d10d      	bne.n	8005398 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b08      	cmp	r3, #8
 8005388:	d106      	bne.n	8005398 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2208      	movs	r2, #8
 8005390:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f857 	bl	8005446 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d10d      	bne.n	80053c2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d106      	bne.n	80053c2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f84c 	bl	800545a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d10d      	bne.n	80053ec <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d106      	bne.n	80053ec <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2220      	movs	r2, #32
 80053e4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f841 	bl	800546e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d10d      	bne.n	8005416 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d106      	bne.n	8005416 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2240      	movs	r2, #64	; 0x40
 800540e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f836 	bl	8005482 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054a4:	b2db      	uxtb	r3, r3
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <LPTIM_WaitForFlag+0x58>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <LPTIM_WaitForFlag+0x5c>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	0b9b      	lsrs	r3, r3, #14
 80054ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	3b01      	subs	r3, #1
 80054dc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	4013      	ands	r3, r2
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d002      	beq.n	80054fe <LPTIM_WaitForFlag+0x4a>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ec      	bne.n	80054d8 <LPTIM_WaitForFlag+0x24>

  return result;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	20000008 	.word	0x20000008
 8005510:	d1b71759 	.word	0xd1b71759

08005514 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08c      	sub	sp, #48	; 0x30
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005520:	f3ef 8310 	mrs	r3, PRIMASK
 8005524:	60fb      	str	r3, [r7, #12]
  return(result);
 8005526:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
 800552a:	2301      	movs	r3, #1
 800552c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f383 8810 	msr	PRIMASK, r3
}
 8005534:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a62      	ldr	r2, [pc, #392]	; (80056c4 <LPTIM_Disable+0x1b0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <LPTIM_Disable+0x34>
 8005540:	4a61      	ldr	r2, [pc, #388]	; (80056c8 <LPTIM_Disable+0x1b4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d006      	beq.n	8005554 <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005546:	e00b      	b.n	8005560 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005548:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800554c:	f7ff fd4a 	bl	8004fe4 <LL_RCC_GetLPTIMClockSource>
 8005550:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8005552:	e005      	b.n	8005560 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005554:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005558:	f7ff fd44 	bl	8004fe4 <LL_RCC_GetLPTIMClockSource>
 800555c:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 800555e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a4d      	ldr	r2, [pc, #308]	; (80056c4 <LPTIM_Disable+0x1b0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <LPTIM_Disable+0x86>
 8005592:	4a4d      	ldr	r2, [pc, #308]	; (80056c8 <LPTIM_Disable+0x1b4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005598:	e00f      	b.n	80055ba <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800559a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800559e:	f7ff fd34 	bl	800500a <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80055a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80055a6:	f7ff fd54 	bl	8005052 <LL_APB1_GRP1_ReleaseReset>
      break;
 80055aa:	e006      	b.n	80055ba <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80055ac:	2020      	movs	r0, #32
 80055ae:	f7ff fd3e 	bl	800502e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80055b2:	2020      	movs	r0, #32
 80055b4:	f7ff fd60 	bl	8005078 <LL_APB1_GRP2_ReleaseReset>
      break;
 80055b8:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <LPTIM_Disable+0xb2>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d05f      	beq.n	8005686 <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3e      	ldr	r2, [pc, #248]	; (80056c4 <LPTIM_Disable+0x1b0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <LPTIM_Disable+0xc4>
 80055d0:	4a3d      	ldr	r2, [pc, #244]	; (80056c8 <LPTIM_Disable+0x1b4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d005      	beq.n	80055e2 <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80055d6:	e009      	b.n	80055ec <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80055d8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80055dc:	f7ff fce8 	bl	8004fb0 <LL_RCC_SetLPTIMClockSource>
        break;
 80055e0:	e004      	b.n	80055ec <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80055e2:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80055e6:	f7ff fce3 	bl	8004fb0 <LL_RCC_SetLPTIMClockSource>
        break;
 80055ea:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01a      	beq.n	8005628 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800560a:	2108      	movs	r1, #8
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff ff51 	bl	80054b4 <LPTIM_WaitForFlag>
 8005612:	4603      	mov	r3, r0
 8005614:	2b03      	cmp	r3, #3
 8005616:	d103      	bne.n	8005620 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2203      	movs	r2, #3
 800561c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2208      	movs	r2, #8
 8005626:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01a      	beq.n	8005664 <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005646:	2110      	movs	r1, #16
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff33 	bl	80054b4 <LPTIM_WaitForFlag>
 800564e:	4603      	mov	r3, r0
 8005650:	2b03      	cmp	r3, #3
 8005652:	d103      	bne.n	800565c <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2203      	movs	r2, #3
 8005658:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2210      	movs	r2, #16
 8005662:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <LPTIM_Disable+0x1b0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <LPTIM_Disable+0x162>
 800566e:	4a16      	ldr	r2, [pc, #88]	; (80056c8 <LPTIM_Disable+0x1b4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005674:	e008      	b.n	8005688 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005678:	f7ff fc9a 	bl	8004fb0 <LL_RCC_SetLPTIMClockSource>
        break;
 800567c:	e004      	b.n	8005688 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800567e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005680:	f7ff fc96 	bl	8004fb0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005684:	e000      	b.n	8005688 <LPTIM_Disable+0x174>
    }
  }
 8005686:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a3a      	ldr	r2, [r7, #32]
 80056a6:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f383 8810 	msr	PRIMASK, r3
}
 80056ba:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80056bc:	bf00      	nop
 80056be:	3730      	adds	r7, #48	; 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40007c00 	.word	0x40007c00
 80056c8:	40009400 	.word	0x40009400

080056cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	58000400 	.word	0x58000400

080056ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <HAL_PWREx_GetVoltageRange+0x18>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	58000400 	.word	0x58000400

08005708 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571a:	d101      	bne.n	8005720 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <LL_RCC_HSE_Enable>:
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800573a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <LL_RCC_HSE_Disable>:
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575c:	6013      	str	r3, [r2, #0]
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_RCC_HSE_IsReady>:
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800576c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800577a:	d101      	bne.n	8005780 <LL_RCC_HSE_IsReady+0x18>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <LL_RCC_HSE_IsReady+0x1a>
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <LL_RCC_HSI_Enable>:
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800579a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579e:	6013      	str	r3, [r2, #0]
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_RCC_HSI_Disable>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80057ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057bc:	6013      	str	r3, [r2, #0]
}
 80057be:	bf00      	nop
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_RCC_HSI_IsReady>:
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80057cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057da:	d101      	bne.n	80057e0 <LL_RCC_HSI_IsReady+0x18>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <LL_RCC_HSI_IsReady+0x1a>
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_HSI_SetCalibTrimming>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005806:	4313      	orrs	r3, r2
 8005808:	604b      	str	r3, [r1, #4]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_RCC_HSI48_Enable>:
{
 8005816:	b480      	push	{r7}
 8005818:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_RCC_HSI48_Disable>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800583c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <LL_RCC_HSI48_IsReady>:
{
 800585a:	b480      	push	{r7}
 800585c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800585e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d101      	bne.n	8005872 <LL_RCC_HSI48_IsReady+0x18>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <LL_RCC_HSI48_IsReady+0x1a>
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_RCC_LSE_Enable>:
{
 800587e:	b480      	push	{r7}
 8005880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005896:	bf00      	nop
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_LSE_Disable>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <LL_RCC_LSE_EnableBypass>:
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d2:	f043 0304 	orr.w	r3, r3, #4
 80058d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058da:	bf00      	nop
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_RCC_LSE_DisableBypass>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f4:	f023 0304 	bic.w	r3, r3, #4
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_RCC_LSE_IsReady>:
{
 8005906:	b480      	push	{r7}
 8005908:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d101      	bne.n	800591e <LL_RCC_LSE_IsReady+0x18>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <LL_RCC_LSE_IsReady+0x1a>
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <LL_RCC_LSI1_Enable>:
{
 800592a:	b480      	push	{r7}
 800592c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800592e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <LL_RCC_LSI1_Disable>:
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <LL_RCC_LSI1_IsReady>:
{
 800596e:	b480      	push	{r7}
 8005970:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d101      	bne.n	8005986 <LL_RCC_LSI1_IsReady+0x18>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <LL_RCC_LSI1_IsReady+0x1a>
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_RCC_LSI2_Enable>:
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800599e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059a2:	f043 0304 	orr.w	r3, r3, #4
 80059a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <LL_RCC_LSI2_Disable>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c4:	f023 0304 	bic.w	r3, r3, #4
 80059c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <LL_RCC_LSI2_IsReady>:
{
 80059d6:	b480      	push	{r7}
 80059d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d101      	bne.n	80059ee <LL_RCC_LSI2_IsReady+0x18>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <LL_RCC_LSI2_IsReady+0x1a>
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_LSI2_SetTrimming>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <LL_RCC_MSI_Enable>:
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6013      	str	r3, [r2, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <LL_RCC_MSI_Disable>:
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	6013      	str	r3, [r2, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <LL_RCC_MSI_IsReady>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d101      	bne.n	8005a7a <LL_RCC_MSI_IsReady+0x16>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <LL_RCC_MSI_IsReady+0x18>
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <LL_RCC_MSI_SetRange>:
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_RCC_MSI_GetRange>:
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005abe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2bb0      	cmp	r3, #176	; 0xb0
 8005ac4:	d901      	bls.n	8005aca <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005ac6:	23b0      	movs	r3, #176	; 0xb0
 8005ac8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005aca:	687b      	ldr	r3, [r7, #4]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <LL_RCC_SetSysClkSource>:
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f023 0203 	bic.w	r2, r3, #3
 8005b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_RCC_GetSysClkSource>:
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 030c 	and.w	r3, r3, #12
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <LL_RCC_SetAHBPrescaler>:
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_C2_RCC_SetAHBPrescaler>:
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <LL_RCC_SetAHB4Prescaler>:
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ba6:	f023 020f 	bic.w	r2, r3, #15
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_RCC_SetAPB1Prescaler>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_RCC_SetAPB2Prescaler>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	608b      	str	r3, [r1, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_RCC_GetAHBPrescaler>:
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_RCC_GetAHB4Prescaler>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_RCC_GetAPB1Prescaler>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_RCC_GetAPB2Prescaler>:
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_PLL_Enable>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	6013      	str	r3, [r2, #0]
}
 8005c8c:	bf00      	nop
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <LL_RCC_PLL_Disable>:
{
 8005c96:	b480      	push	{r7}
 8005c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ca8:	6013      	str	r3, [r2, #0]
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <LL_RCC_PLL_IsReady>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc6:	d101      	bne.n	8005ccc <LL_RCC_PLL_IsReady+0x18>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <LL_RCC_PLL_IsReady+0x1a>
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <LL_RCC_PLL_GetN>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_RCC_PLL_GetR>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_RCC_PLL_GetDivider>:
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_RCC_PLL_GetMainSource>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <LL_RCC_IsActiveFlag_HPRE>:
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d101      	bne.n	8005d52 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e000      	b.n	8005d54 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005d5e:	b480      	push	{r7}
 8005d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d72:	d101      	bne.n	8005d78 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d98:	d101      	bne.n	8005d9e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005daa:	b480      	push	{r7}
 8005dac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dbc:	d101      	bne.n	8005dc2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005dce:	b480      	push	{r7}
 8005dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ddc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005de0:	d101      	bne.n	8005de6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b08d      	sub	sp, #52	; 0x34
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e363      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 808d 	beq.w	8005f2e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e14:	f7ff fe89 	bl	8005b2a <LL_RCC_GetSysClkSource>
 8005e18:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e1a:	f7ff ff82 	bl	8005d22 <LL_RCC_PLL_GetMainSource>
 8005e1e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_RCC_OscConfig+0x3e>
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d147      	bne.n	8005ebc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d144      	bne.n	8005ebc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e347      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e42:	f7ff fe34 	bl	8005aae <LL_RCC_MSI_GetRange>
 8005e46:	4603      	mov	r3, r0
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d914      	bls.n	8005e76 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fd2f 	bl	80068b4 <RCC_SetFlashLatencyFromMSIRange>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e336      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fe0e 	bl	8005a86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fe32 	bl	8005ad8 <LL_RCC_MSI_SetCalibTrimming>
 8005e74:	e013      	b.n	8005e9e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fe03 	bl	8005a86 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fe27 	bl	8005ad8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fd10 	bl	80068b4 <RCC_SetFlashLatencyFromMSIRange>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e317      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e9e:	f000 fcc9 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4aa4      	ldr	r2, [pc, #656]	; (8006138 <HAL_RCC_OscConfig+0x344>)
 8005ea6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ea8:	4ba4      	ldr	r3, [pc, #656]	; (800613c <HAL_RCC_OscConfig+0x348>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fd fbff 	bl	80036b0 <HAL_InitTick>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d039      	beq.n	8005f2c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e308      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01e      	beq.n	8005f02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ec4:	f7ff fdb0 	bl	8005a28 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fc40 	bl	800374c <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ed0:	f7fd fc3c 	bl	800374c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e2f5      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ee2:	f7ff fdbf 	bl	8005a64 <LL_RCC_MSI_IsReady>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0f1      	beq.n	8005ed0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fdc8 	bl	8005a86 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fdec 	bl	8005ad8 <LL_RCC_MSI_SetCalibTrimming>
 8005f00:	e015      	b.n	8005f2e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f02:	f7ff fda0 	bl	8005a46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f06:	f7fd fc21 	bl	800374c <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f0e:	f7fd fc1d 	bl	800374c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e2d6      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f20:	f7ff fda0 	bl	8005a64 <LL_RCC_MSI_IsReady>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f1      	bne.n	8005f0e <HAL_RCC_OscConfig+0x11a>
 8005f2a:	e000      	b.n	8005f2e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f2c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d047      	beq.n	8005fca <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3a:	f7ff fdf6 	bl	8005b2a <LL_RCC_GetSysClkSource>
 8005f3e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f40:	f7ff feef 	bl	8005d22 <LL_RCC_PLL_GetMainSource>
 8005f44:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_OscConfig+0x164>
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	2b0c      	cmp	r3, #12
 8005f50:	d108      	bne.n	8005f64 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d105      	bne.n	8005f64 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d134      	bne.n	8005fca <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e2b4      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCC_OscConfig+0x180>
 8005f6e:	f7ff fbdd 	bl	800572c <LL_RCC_HSE_Enable>
 8005f72:	e001      	b.n	8005f78 <HAL_RCC_OscConfig+0x184>
 8005f74:	f7ff fbe9 	bl	800574a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d012      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fd fbe4 	bl	800374c <HAL_GetTick>
 8005f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fd fbe0 	bl	800374c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	; 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e299      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f9a:	f7ff fbe5 	bl	8005768 <LL_RCC_HSE_IsReady>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0f1      	beq.n	8005f88 <HAL_RCC_OscConfig+0x194>
 8005fa4:	e011      	b.n	8005fca <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fd fbd1 	bl	800374c <HAL_GetTick>
 8005faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fae:	f7fd fbcd 	bl	800374c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b64      	cmp	r3, #100	; 0x64
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e286      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fc0:	f7ff fbd2 	bl	8005768 <LL_RCC_HSE_IsReady>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f1      	bne.n	8005fae <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d04c      	beq.n	8006070 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd6:	f7ff fda8 	bl	8005b2a <LL_RCC_GetSysClkSource>
 8005fda:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fdc:	f7ff fea1 	bl	8005d22 <LL_RCC_PLL_GetMainSource>
 8005fe0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x200>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b0c      	cmp	r3, #12
 8005fec:	d10e      	bne.n	800600c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d10b      	bne.n	800600c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e266      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fbf1 	bl	80057ec <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800600a:	e031      	b.n	8006070 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d019      	beq.n	8006048 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006014:	f7ff fbba 	bl	800578c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006018:	f7fd fb98 	bl	800374c <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006020:	f7fd fb94 	bl	800374c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e24d      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006032:	f7ff fbc9 	bl	80057c8 <LL_RCC_HSI_IsReady>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f1      	beq.n	8006020 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fbd3 	bl	80057ec <LL_RCC_HSI_SetCalibTrimming>
 8006046:	e013      	b.n	8006070 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006048:	f7ff fbaf 	bl	80057aa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fd fb7e 	bl	800374c <HAL_GetTick>
 8006050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006054:	f7fd fb7a 	bl	800374c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e233      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006066:	f7ff fbaf 	bl	80057c8 <LL_RCC_HSI_IsReady>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f1      	bne.n	8006054 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80a3 	beq.w	80061d0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d076      	beq.n	8006180 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	d046      	beq.n	800612c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800609e:	f7ff fc66 	bl	800596e <LL_RCC_LSI1_IsReady>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d113      	bne.n	80060d0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80060a8:	f7ff fc3f 	bl	800592a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060ac:	f7fd fb4e 	bl	800374c <HAL_GetTick>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80060b4:	f7fd fb4a 	bl	800374c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e203      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060c6:	f7ff fc52 	bl	800596e <LL_RCC_LSI1_IsReady>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f1      	beq.n	80060b4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80060d0:	f7ff fc5f 	bl	8005992 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fd fb3a 	bl	800374c <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80060dc:	f7fd fb36 	bl	800374c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1ef      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80060ee:	f7ff fc72 	bl	80059d6 <LL_RCC_LSI2_IsReady>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f1      	beq.n	80060dc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fc7c 	bl	80059fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006102:	f7ff fc23 	bl	800594c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fd fb21 	bl	800374c <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800610e:	f7fd fb1d 	bl	800374c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e1d6      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006120:	f7ff fc25 	bl	800596e <LL_RCC_LSI1_IsReady>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f1      	bne.n	800610e <HAL_RCC_OscConfig+0x31a>
 800612a:	e051      	b.n	80061d0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800612c:	f7ff fbfd 	bl	800592a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fd fb0c 	bl	800374c <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006136:	e00c      	b.n	8006152 <HAL_RCC_OscConfig+0x35e>
 8006138:	20000008 	.word	0x20000008
 800613c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006140:	f7fd fb04 	bl	800374c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e1bd      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006152:	f7ff fc0c 	bl	800596e <LL_RCC_LSI1_IsReady>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f1      	beq.n	8006140 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800615c:	f7ff fc2a 	bl	80059b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006162:	f7fd faf3 	bl	800374c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b03      	cmp	r3, #3
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e1ac      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006174:	f7ff fc2f 	bl	80059d6 <LL_RCC_LSI2_IsReady>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f1      	bne.n	8006162 <HAL_RCC_OscConfig+0x36e>
 800617e:	e027      	b.n	80061d0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006180:	f7ff fc18 	bl	80059b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fd fae2 	bl	800374c <HAL_GetTick>
 8006188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800618c:	f7fd fade 	bl	800374c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e197      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800619e:	f7ff fc1a 	bl	80059d6 <LL_RCC_LSI2_IsReady>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f1      	bne.n	800618c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80061a8:	f7ff fbd0 	bl	800594c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fd face 	bl	800374c <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061b4:	f7fd faca 	bl	800374c <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e183      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061c6:	f7ff fbd2 	bl	800596e <LL_RCC_LSI1_IsReady>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f1      	bne.n	80061b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d05b      	beq.n	8006294 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061dc:	4ba7      	ldr	r3, [pc, #668]	; (800647c <HAL_RCC_OscConfig+0x688>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d114      	bne.n	8006212 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80061e8:	f7ff fa70 	bl	80056cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ec:	f7fd faae 	bl	800374c <HAL_GetTick>
 80061f0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f4:	f7fd faaa 	bl	800374c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e163      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006206:	4b9d      	ldr	r3, [pc, #628]	; (800647c <HAL_RCC_OscConfig+0x688>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d102      	bne.n	8006220 <HAL_RCC_OscConfig+0x42c>
 800621a:	f7ff fb30 	bl	800587e <LL_RCC_LSE_Enable>
 800621e:	e00c      	b.n	800623a <HAL_RCC_OscConfig+0x446>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b05      	cmp	r3, #5
 8006226:	d104      	bne.n	8006232 <HAL_RCC_OscConfig+0x43e>
 8006228:	f7ff fb4b 	bl	80058c2 <LL_RCC_LSE_EnableBypass>
 800622c:	f7ff fb27 	bl	800587e <LL_RCC_LSE_Enable>
 8006230:	e003      	b.n	800623a <HAL_RCC_OscConfig+0x446>
 8006232:	f7ff fb35 	bl	80058a0 <LL_RCC_LSE_Disable>
 8006236:	f7ff fb55 	bl	80058e4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d014      	beq.n	800626c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006242:	f7fd fa83 	bl	800374c <HAL_GetTick>
 8006246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006248:	e00a      	b.n	8006260 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624a:	f7fd fa7f 	bl	800374c <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e136      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006260:	f7ff fb51 	bl	8005906 <LL_RCC_LSE_IsReady>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ef      	beq.n	800624a <HAL_RCC_OscConfig+0x456>
 800626a:	e013      	b.n	8006294 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fd fa6e 	bl	800374c <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006272:	e00a      	b.n	800628a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006274:	f7fd fa6a 	bl	800374c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006282:	4293      	cmp	r3, r2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e121      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800628a:	f7ff fb3c 	bl	8005906 <LL_RCC_LSE_IsReady>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ef      	bne.n	8006274 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02c      	beq.n	80062fa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d014      	beq.n	80062d2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062a8:	f7ff fab5 	bl	8005816 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ac:	f7fd fa4e 	bl	800374c <HAL_GetTick>
 80062b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062b4:	f7fd fa4a 	bl	800374c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e103      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80062c6:	f7ff fac8 	bl	800585a <LL_RCC_HSI48_IsReady>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f1      	beq.n	80062b4 <HAL_RCC_OscConfig+0x4c0>
 80062d0:	e013      	b.n	80062fa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062d2:	f7ff fab1 	bl	8005838 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d6:	f7fd fa39 	bl	800374c <HAL_GetTick>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062de:	f7fd fa35 	bl	800374c <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e0ee      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80062f0:	f7ff fab3 	bl	800585a <LL_RCC_HSI48_IsReady>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f1      	bne.n	80062de <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80e4 	beq.w	80064cc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006304:	f7ff fc11 	bl	8005b2a <LL_RCC_GetSysClkSource>
 8006308:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	2b02      	cmp	r3, #2
 8006318:	f040 80b4 	bne.w	8006484 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 0203 	and.w	r2, r3, #3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	429a      	cmp	r2, r3
 8006328:	d123      	bne.n	8006372 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006334:	429a      	cmp	r2, r3
 8006336:	d11c      	bne.n	8006372 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d114      	bne.n	8006372 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d10d      	bne.n	8006372 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006360:	429a      	cmp	r2, r3
 8006362:	d106      	bne.n	8006372 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d05d      	beq.n	800642e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b0c      	cmp	r3, #12
 8006376:	d058      	beq.n	800642a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e0a1      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800638a:	f7ff fc84 	bl	8005c96 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800638e:	f7fd f9dd 	bl	800374c <HAL_GetTick>
 8006392:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006396:	f7fd f9d9 	bl	800374c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e092      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1ef      	bne.n	8006396 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	4b30      	ldr	r3, [pc, #192]	; (8006480 <HAL_RCC_OscConfig+0x68c>)
 80063be:	4013      	ands	r3, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063c8:	4311      	orrs	r1, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063ce:	0212      	lsls	r2, r2, #8
 80063d0:	4311      	orrs	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80063d6:	4311      	orrs	r1, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80063dc:	4311      	orrs	r1, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80063e2:	430a      	orrs	r2, r1
 80063e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80063ec:	f7ff fc44 	bl	8005c78 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006400:	f7fd f9a4 	bl	800374c <HAL_GetTick>
 8006404:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006408:	f7fd f9a0 	bl	800374c <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b02      	cmp	r3, #2
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e059      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800641a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0ef      	beq.n	8006408 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006428:	e050      	b.n	80064cc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e04f      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800642e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d147      	bne.n	80064cc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800643c:	f7ff fc1c 	bl	8005c78 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800644a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006450:	f7fd f97c 	bl	800374c <HAL_GetTick>
 8006454:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006458:	f7fd f978 	bl	800374c <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e031      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800646a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ef      	beq.n	8006458 <HAL_RCC_OscConfig+0x664>
 8006478:	e028      	b.n	80064cc <HAL_RCC_OscConfig+0x6d8>
 800647a:	bf00      	nop
 800647c:	58000400 	.word	0x58000400
 8006480:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d01e      	beq.n	80064c8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	f7ff fc04 	bl	8005c96 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fd f95d 	bl	800374c <HAL_GetTick>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006496:	f7fd f959 	bl	800374c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e012      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ef      	bne.n	8006496 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80064b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_RCC_OscConfig+0x6e4>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	60cb      	str	r3, [r1, #12]
 80064c6:	e001      	b.n	80064cc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3734      	adds	r7, #52	; 0x34
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	eefefffc 	.word	0xeefefffc

080064dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e12d      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064f0:	4b98      	ldr	r3, [pc, #608]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d91b      	bls.n	8006536 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fe:	4b95      	ldr	r3, [pc, #596]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 0207 	bic.w	r2, r3, #7
 8006506:	4993      	ldr	r1, [pc, #588]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	4313      	orrs	r3, r2
 800650c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650e:	f7fd f91d 	bl	800374c <HAL_GetTick>
 8006512:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006514:	e008      	b.n	8006528 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006516:	f7fd f919 	bl	800374c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e111      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006528:	4b8a      	ldr	r3, [pc, #552]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d1ef      	bne.n	8006516 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d016      	beq.n	8006570 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff fafb 	bl	8005b42 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800654c:	f7fd f8fe 	bl	800374c <HAL_GetTick>
 8006550:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006552:	e008      	b.n	8006566 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006554:	f7fd f8fa 	bl	800374c <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0f2      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006566:	f7ff fbe8 	bl	8005d3a <LL_RCC_IsActiveFlag_HPRE>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f1      	beq.n	8006554 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff faf2 	bl	8005b6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006586:	f7fd f8e1 	bl	800374c <HAL_GetTick>
 800658a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800658e:	f7fd f8dd 	bl	800374c <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e0d5      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80065a0:	f7ff fbdd 	bl	8005d5e <LL_RCC_IsActiveFlag_C2HPRE>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f1      	beq.n	800658e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d016      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff faeb 	bl	8005b96 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065c0:	f7fd f8c4 	bl	800374c <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065c8:	f7fd f8c0 	bl	800374c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e0b8      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065da:	f7ff fbd3 	bl	8005d84 <LL_RCC_IsActiveFlag_SHDHPRE>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f1      	beq.n	80065c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d016      	beq.n	800661e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fae5 	bl	8005bc4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065fa:	f7fd f8a7 	bl	800374c <HAL_GetTick>
 80065fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006600:	e008      	b.n	8006614 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006602:	f7fd f8a3 	bl	800374c <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e09b      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006614:	f7ff fbc9 	bl	8005daa <LL_RCC_IsActiveFlag_PPRE1>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f1      	beq.n	8006602 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d017      	beq.n	800665a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fadb 	bl	8005bec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006636:	f7fd f889 	bl	800374c <HAL_GetTick>
 800663a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800663c:	e008      	b.n	8006650 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800663e:	f7fd f885 	bl	800374c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e07d      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006650:	f7ff fbbd 	bl	8005dce <LL_RCC_IsActiveFlag_PPRE2>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f1      	beq.n	800663e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d043      	beq.n	80066ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d106      	bne.n	800667c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800666e:	f7ff f87b 	bl	8005768 <LL_RCC_HSE_IsReady>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11e      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e067      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d106      	bne.n	8006692 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006684:	f7ff fb16 	bl	8005cb4 <LL_RCC_PLL_IsReady>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d113      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e05c      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800669a:	f7ff f9e3 	bl	8005a64 <LL_RCC_MSI_IsReady>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d108      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e051      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80066a8:	f7ff f88e 	bl	80057c8 <LL_RCC_HSI_IsReady>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e04a      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fa21 	bl	8005b02 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c0:	f7fd f844 	bl	800374c <HAL_GetTick>
 80066c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	e00a      	b.n	80066de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c8:	f7fd f840 	bl	800374c <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e036      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066de:	f7ff fa24 	bl	8005b2a <LL_RCC_GetSysClkSource>
 80066e2:	4602      	mov	r2, r0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d1ec      	bne.n	80066c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066ee:	4b19      	ldr	r3, [pc, #100]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d21b      	bcs.n	8006734 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fc:	4b15      	ldr	r3, [pc, #84]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f023 0207 	bic.w	r2, r3, #7
 8006704:	4913      	ldr	r1, [pc, #76]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	4313      	orrs	r3, r2
 800670a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670c:	f7fd f81e 	bl	800374c <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	e008      	b.n	8006726 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006714:	f7fd f81a 	bl	800374c <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e012      	b.n	800674c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_RCC_ClockConfig+0x278>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d1ef      	bne.n	8006714 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006734:	f000 f87e 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006738:	4603      	mov	r3, r0
 800673a:	4a07      	ldr	r2, [pc, #28]	; (8006758 <HAL_RCC_ClockConfig+0x27c>)
 800673c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800673e:	f7fd f811 	bl	8003764 <HAL_GetTickPrio>
 8006742:	4603      	mov	r3, r0
 8006744:	4618      	mov	r0, r3
 8006746:	f7fc ffb3 	bl	80036b0 <HAL_InitTick>
 800674a:	4603      	mov	r3, r0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	58004000 	.word	0x58004000
 8006758:	20000008 	.word	0x20000008

0800675c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006762:	f7ff f9e2 	bl	8005b2a <LL_RCC_GetSysClkSource>
 8006766:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800676e:	f7ff f99e 	bl	8005aae <LL_RCC_MSI_GetRange>
 8006772:	4603      	mov	r3, r0
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <HAL_RCC_GetSysClockFreq+0xcc>)
 800677c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e04b      	b.n	800681c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d102      	bne.n	8006790 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800678a:	4b28      	ldr	r3, [pc, #160]	; (800682c <HAL_RCC_GetSysClockFreq+0xd0>)
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	e045      	b.n	800681c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b08      	cmp	r3, #8
 8006794:	d10a      	bne.n	80067ac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006796:	f7fe ffb7 	bl	8005708 <LL_RCC_HSE_IsEnabledDiv2>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d102      	bne.n	80067a6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <HAL_RCC_GetSysClockFreq+0xd0>)
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e03a      	b.n	800681c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <HAL_RCC_GetSysClockFreq+0xd4>)
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e037      	b.n	800681c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80067ac:	f7ff fab9 	bl	8005d22 <LL_RCC_PLL_GetMainSource>
 80067b0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d003      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0x64>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d003      	beq.n	80067c6 <HAL_RCC_GetSysClockFreq+0x6a>
 80067be:	e00d      	b.n	80067dc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80067c0:	4b1a      	ldr	r3, [pc, #104]	; (800682c <HAL_RCC_GetSysClockFreq+0xd0>)
 80067c2:	60bb      	str	r3, [r7, #8]
        break;
 80067c4:	e015      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067c6:	f7fe ff9f 	bl	8005708 <LL_RCC_HSE_IsEnabledDiv2>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d102      	bne.n	80067d6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <HAL_RCC_GetSysClockFreq+0xd0>)
 80067d2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80067d4:	e00d      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80067d6:	4b16      	ldr	r3, [pc, #88]	; (8006830 <HAL_RCC_GetSysClockFreq+0xd4>)
 80067d8:	60bb      	str	r3, [r7, #8]
        break;
 80067da:	e00a      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80067dc:	f7ff f967 	bl	8005aae <LL_RCC_MSI_GetRange>
 80067e0:	4603      	mov	r3, r0
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	4a0f      	ldr	r2, [pc, #60]	; (8006828 <HAL_RCC_GetSysClockFreq+0xcc>)
 80067ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ee:	60bb      	str	r3, [r7, #8]
        break;
 80067f0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80067f2:	f7ff fa71 	bl	8005cd8 <LL_RCC_PLL_GetN>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	fb03 f402 	mul.w	r4, r3, r2
 80067fe:	f7ff fa84 	bl	8005d0a <LL_RCC_PLL_GetDivider>
 8006802:	4603      	mov	r3, r0
 8006804:	091b      	lsrs	r3, r3, #4
 8006806:	3301      	adds	r3, #1
 8006808:	fbb4 f4f3 	udiv	r4, r4, r3
 800680c:	f7ff fa71 	bl	8005cf2 <LL_RCC_PLL_GetR>
 8006810:	4603      	mov	r3, r0
 8006812:	0f5b      	lsrs	r3, r3, #29
 8006814:	3301      	adds	r3, #1
 8006816:	fbb4 f3f3 	udiv	r3, r4, r3
 800681a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800681c:	68fb      	ldr	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bd90      	pop	{r4, r7, pc}
 8006826:	bf00      	nop
 8006828:	0800de38 	.word	0x0800de38
 800682c:	00f42400 	.word	0x00f42400
 8006830:	01e84800 	.word	0x01e84800

08006834 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006834:	b598      	push	{r3, r4, r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006838:	f7ff ff90 	bl	800675c <HAL_RCC_GetSysClockFreq>
 800683c:	4604      	mov	r4, r0
 800683e:	f7ff f9e9 	bl	8005c14 <LL_RCC_GetAHBPrescaler>
 8006842:	4603      	mov	r3, r0
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	4a03      	ldr	r2, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x24>)
 800684c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006850:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006854:	4618      	mov	r0, r3
 8006856:	bd98      	pop	{r3, r4, r7, pc}
 8006858:	0800ddd8 	.word	0x0800ddd8

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b598      	push	{r3, r4, r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006860:	f7ff ffe8 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006864:	4604      	mov	r4, r0
 8006866:	f7ff f9ef 	bl	8005c48 <LL_RCC_GetAPB1Prescaler>
 800686a:	4603      	mov	r3, r0
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	4a04      	ldr	r2, [pc, #16]	; (8006884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd98      	pop	{r3, r4, r7, pc}
 8006884:	0800de18 	.word	0x0800de18

08006888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006888:	b598      	push	{r3, r4, r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800688c:	f7ff ffd2 	bl	8006834 <HAL_RCC_GetHCLKFreq>
 8006890:	4604      	mov	r4, r0
 8006892:	f7ff f9e5 	bl	8005c60 <LL_RCC_GetAPB2Prescaler>
 8006896:	4603      	mov	r3, r0
 8006898:	0adb      	lsrs	r3, r3, #11
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	4a04      	ldr	r2, [pc, #16]	; (80068b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd98      	pop	{r3, r4, r7, pc}
 80068b0:	0800de18 	.word	0x0800de18

080068b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2bb0      	cmp	r3, #176	; 0xb0
 80068c0:	d903      	bls.n	80068ca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e007      	b.n	80068da <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	4a11      	ldr	r2, [pc, #68]	; (8006918 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80068d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80068da:	f7ff f9a7 	bl	8005c2c <LL_RCC_GetAHB4Prescaler>
 80068de:	4603      	mov	r3, r0
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	4a0d      	ldr	r2, [pc, #52]	; (800691c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80068e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4a0a      	ldr	r2, [pc, #40]	; (8006920 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	0c9c      	lsrs	r4, r3, #18
 80068fe:	f7fe fef5 	bl	80056ec <HAL_PWREx_GetVoltageRange>
 8006902:	4603      	mov	r3, r0
 8006904:	4619      	mov	r1, r3
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f80c 	bl	8006924 <RCC_SetFlashLatency>
 800690c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	bf00      	nop
 8006918:	0800de38 	.word	0x0800de38
 800691c:	0800ddd8 	.word	0x0800ddd8
 8006920:	431bde83 	.word	0x431bde83

08006924 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b093      	sub	sp, #76	; 0x4c
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800692e:	4b37      	ldr	r3, [pc, #220]	; (8006a0c <RCC_SetFlashLatency+0xe8>)
 8006930:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800693a:	4a35      	ldr	r2, [pc, #212]	; (8006a10 <RCC_SetFlashLatency+0xec>)
 800693c:	f107 031c 	add.w	r3, r7, #28
 8006940:	ca07      	ldmia	r2, {r0, r1, r2}
 8006942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006946:	4b33      	ldr	r3, [pc, #204]	; (8006a14 <RCC_SetFlashLatency+0xf0>)
 8006948:	f107 040c 	add.w	r4, r7, #12
 800694c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800694e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006952:	2300      	movs	r3, #0
 8006954:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800695c:	d11a      	bne.n	8006994 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800695e:	2300      	movs	r3, #0
 8006960:	643b      	str	r3, [r7, #64]	; 0x40
 8006962:	e013      	b.n	800698c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	3348      	adds	r3, #72	; 0x48
 800696a:	443b      	add	r3, r7
 800696c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	429a      	cmp	r2, r3
 8006974:	d807      	bhi.n	8006986 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	3348      	adds	r3, #72	; 0x48
 800697c:	443b      	add	r3, r7
 800697e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006982:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006984:	e020      	b.n	80069c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006988:	3301      	adds	r3, #1
 800698a:	643b      	str	r3, [r7, #64]	; 0x40
 800698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698e:	2b03      	cmp	r3, #3
 8006990:	d9e8      	bls.n	8006964 <RCC_SetFlashLatency+0x40>
 8006992:	e019      	b.n	80069c8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e013      	b.n	80069c2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	3348      	adds	r3, #72	; 0x48
 80069a0:	443b      	add	r3, r7
 80069a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d807      	bhi.n	80069bc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	3348      	adds	r3, #72	; 0x48
 80069b2:	443b      	add	r3, r7
 80069b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80069b8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80069ba:	e005      	b.n	80069c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80069bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069be:	3301      	adds	r3, #1
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d9e8      	bls.n	800699a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80069c8:	4b13      	ldr	r3, [pc, #76]	; (8006a18 <RCC_SetFlashLatency+0xf4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 0207 	bic.w	r2, r3, #7
 80069d0:	4911      	ldr	r1, [pc, #68]	; (8006a18 <RCC_SetFlashLatency+0xf4>)
 80069d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d4:	4313      	orrs	r3, r2
 80069d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069d8:	f7fc feb8 	bl	800374c <HAL_GetTick>
 80069dc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069de:	e008      	b.n	80069f2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069e0:	f7fc feb4 	bl	800374c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e007      	b.n	8006a02 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <RCC_SetFlashLatency+0xf4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1ef      	bne.n	80069e0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	374c      	adds	r7, #76	; 0x4c
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd90      	pop	{r4, r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	0800dc34 	.word	0x0800dc34
 8006a10:	0800dc44 	.word	0x0800dc44
 8006a14:	0800dc50 	.word	0x0800dc50
 8006a18:	58004000 	.word	0x58004000

08006a1c <LL_RCC_LSE_IsEnabled>:
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <LL_RCC_LSE_IsEnabled+0x18>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <LL_RCC_LSE_IsEnabled+0x1a>
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <LL_RCC_LSE_IsReady>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d101      	bne.n	8006a58 <LL_RCC_LSE_IsReady+0x18>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <LL_RCC_LSE_IsReady+0x1a>
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <LL_RCC_SetRFWKPClockSource>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_RCC_SetSMPSClockSource>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	f023 0203 	bic.w	r2, r3, #3
 8006aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <LL_RCC_SetSMPSPrescaler>:
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <LL_RCC_SetUSARTClockSource>:
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	f023 0203 	bic.w	r2, r3, #3
 8006af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_RCC_SetLPUARTClockSource>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <LL_RCC_SetI2CClockSource>:
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	091b      	lsrs	r3, r3, #4
 8006b4c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_SetLPTIMClockSource>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	041b      	lsls	r3, r3, #16
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <LL_RCC_SetSAIClockSource>:
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <LL_RCC_SetRNGClockSource>:
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_RCC_SetCLK48ClockSource>:
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <LL_RCC_SetUSBClockSource>:
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ffe3 	bl	8006bfe <LL_RCC_SetCLK48ClockSource>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <LL_RCC_SetADCClockSource>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <LL_RCC_SetRTCClockSource>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <LL_RCC_GetRTCClockSource>:
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <LL_RCC_ForceBackupDomainReset>:
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cca:	bf00      	nop
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cec:	bf00      	nop
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_RCC_PLLSAI1_Enable>:
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d08:	6013      	str	r3, [r2, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_RCC_PLLSAI1_Disable>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d26:	6013      	str	r3, [r2, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_RCC_PLLSAI1_IsReady>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d44:	d101      	bne.n	8006d4a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b088      	sub	sp, #32
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006d5e:	2300      	movs	r3, #0
 8006d60:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006d62:	2300      	movs	r3, #0
 8006d64:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d034      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d7a:	d021      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d80:	d81b      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d86:	d01d      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d8c:	d815      	bhi.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d96:	d110      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006da8:	e00d      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 f947 	bl	8007042 <RCCEx_PLLSAI1_ConfigNP>
 8006db4:	4603      	mov	r3, r0
 8006db6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006db8:	e005      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	77fb      	strb	r3, [r7, #31]
        break;
 8006dbe:	e002      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc6:	7ffb      	ldrb	r3, [r7, #31]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d105      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff fee8 	bl	8006ba6 <LL_RCC_SetSAIClockSource>
 8006dd6:	e001      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd8:	7ffb      	ldrb	r3, [r7, #31]
 8006dda:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d046      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006de8:	f7ff ff56 	bl	8006c98 <LL_RCC_GetRTCClockSource>
 8006dec:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d03c      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006df8:	f7fe fc68 	bl	80056cc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff ff30 	bl	8006c6c <LL_RCC_SetRTCClockSource>
 8006e0c:	e02e      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e16:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006e18:	f7ff ff4b 	bl	8006cb2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006e1c:	f7ff ff5a 	bl	8006cd4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006e38:	f7ff fdf0 	bl	8006a1c <LL_RCC_LSE_IsEnabled>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d114      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e42:	f7fc fc83 	bl	800374c <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006e48:	e00b      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fc fc7f 	bl	800374c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d902      	bls.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	77fb      	strb	r3, [r7, #31]
              break;
 8006e60:	e004      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006e62:	f7ff fded 	bl	8006a40 <LL_RCC_LSE_IsReady>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d1ee      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006e6c:	7ffb      	ldrb	r3, [r7, #31]
 8006e6e:	77bb      	strb	r3, [r7, #30]
 8006e70:	e001      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e72:	7ffb      	ldrb	r3, [r7, #31]
 8006e74:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff fe2a 	bl	8006ae0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fe35 	bl	8006b0c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff fe5d 	bl	8006b72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fe52 	bl	8006b72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fe2a 	bl	8006b38 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fe1f 	bl	8006b38 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d022      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff fe8d 	bl	8006c2a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f18:	d107      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f28:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f32:	d10b      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f8dd 	bl	80070f8 <RCCEx_PLLSAI1_ConfigNQ>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006f42:	7ffb      	ldrb	r3, [r7, #31]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006f48:	7ffb      	ldrb	r3, [r7, #31]
 8006f4a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d02b      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f60:	d008      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f6a:	d003      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d105      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fe2a 	bl	8006bd2 <LL_RCC_SetRNGClockSource>
 8006f7e:	e00a      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f7ff fe21 	bl	8006bd2 <LL_RCC_SetRNGClockSource>
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fe34 	bl	8006bfe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d022      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff fe3d 	bl	8006c40 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fce:	d107      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fde:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe8:	d10b      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f8dd 	bl	80071ae <RCCEx_PLLSAI1_ConfigNR>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006ff8:	7ffb      	ldrb	r3, [r7, #31]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006ffe:	7ffb      	ldrb	r3, [r7, #31]
 8007000:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fd26 	bl	8006a64 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fd45 	bl	8006ab8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fd2c 	bl	8006a90 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007038:	7fbb      	ldrb	r3, [r7, #30]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3720      	adds	r7, #32
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800704e:	f7ff fe61 	bl	8006d14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007052:	f7fc fb7b 	bl	800374c <HAL_GetTick>
 8007056:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007058:	e009      	b.n	800706e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800705a:	f7fc fb77 	bl	800374c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d902      	bls.n	800706e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	73fb      	strb	r3, [r7, #15]
      break;
 800706c:	e004      	b.n	8007078 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800706e:	f7ff fe60 	bl	8006d32 <LL_RCC_PLLSAI1_IsReady>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f0      	bne.n	800705a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d137      	bne.n	80070ee <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800707e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007092:	4313      	orrs	r3, r2
 8007094:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070a8:	4313      	orrs	r3, r2
 80070aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80070ac:	f7ff fe23 	bl	8006cf6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b0:	f7fc fb4c 	bl	800374c <HAL_GetTick>
 80070b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070b6:	e009      	b.n	80070cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070b8:	f7fc fb48 	bl	800374c <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d902      	bls.n	80070cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	73fb      	strb	r3, [r7, #15]
        break;
 80070ca:	e004      	b.n	80070d6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070cc:	f7ff fe31 	bl	8006d32 <LL_RCC_PLLSAI1_IsReady>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d1f0      	bne.n	80070b8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d108      	bne.n	80070ee <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80070dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ea:	4313      	orrs	r3, r2
 80070ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007104:	f7ff fe06 	bl	8006d14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007108:	f7fc fb20 	bl	800374c <HAL_GetTick>
 800710c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800710e:	e009      	b.n	8007124 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007110:	f7fc fb1c 	bl	800374c <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d902      	bls.n	8007124 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	73fb      	strb	r3, [r7, #15]
      break;
 8007122:	e004      	b.n	800712e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007124:	f7ff fe05 	bl	8006d32 <LL_RCC_PLLSAI1_IsReady>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1f0      	bne.n	8007110 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d137      	bne.n	80071a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007148:	4313      	orrs	r3, r2
 800714a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800714c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800715e:	4313      	orrs	r3, r2
 8007160:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007162:	f7ff fdc8 	bl	8006cf6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007166:	f7fc faf1 	bl	800374c <HAL_GetTick>
 800716a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800716c:	e009      	b.n	8007182 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800716e:	f7fc faed 	bl	800374c <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d902      	bls.n	8007182 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	73fb      	strb	r3, [r7, #15]
        break;
 8007180:	e004      	b.n	800718c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007182:	f7ff fdd6 	bl	8006d32 <LL_RCC_PLLSAI1_IsReady>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	d1f0      	bne.n	800716e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d108      	bne.n	80071a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071a0:	4313      	orrs	r3, r2
 80071a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071ba:	f7ff fdab 	bl	8006d14 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071be:	f7fc fac5 	bl	800374c <HAL_GetTick>
 80071c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071c4:	e009      	b.n	80071da <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071c6:	f7fc fac1 	bl	800374c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d902      	bls.n	80071da <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	e004      	b.n	80071e4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071da:	f7ff fdaa 	bl	8006d32 <LL_RCC_PLLSAI1_IsReady>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1f0      	bne.n	80071c6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d137      	bne.n	800725a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071fe:	4313      	orrs	r3, r2
 8007200:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007214:	4313      	orrs	r3, r2
 8007216:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007218:	f7ff fd6d 	bl	8006cf6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721c:	f7fc fa96 	bl	800374c <HAL_GetTick>
 8007220:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007222:	e009      	b.n	8007238 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007224:	f7fc fa92 	bl	800374c <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d902      	bls.n	8007238 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	73fb      	strb	r3, [r7, #15]
        break;
 8007236:	e004      	b.n	8007242 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007238:	f7ff fd7b 	bl	8006d32 <LL_RCC_PLLSAI1_IsReady>
 800723c:	4603      	mov	r3, r0
 800723e:	2b01      	cmp	r3, #1
 8007240:	d1f0      	bne.n	8007224 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d108      	bne.n	800725a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007256:	4313      	orrs	r3, r2
 8007258:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e09f      	b.n	80073b6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fb ff40 	bl	8003110 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007298:	4b49      	ldr	r3, [pc, #292]	; (80073c0 <HAL_RTC_Init+0x15c>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b10      	cmp	r3, #16
 80072a2:	d07e      	beq.n	80073a2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	22ca      	movs	r2, #202	; 0xca
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2253      	movs	r2, #83	; 0x53
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f8ab 	bl	8007410 <RTC_EnterInitMode>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2204      	movs	r2, #4
 80072cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
 80072d4:	e067      	b.n	80073a6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6812      	ldr	r2, [r2, #0]
 80072e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6899      	ldr	r1, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68d2      	ldr	r2, [r2, #12]
 8007310:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6919      	ldr	r1, [r3, #16]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	041a      	lsls	r2, r3, #16
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007334:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0203 	bic.w	r2, r2, #3
 8007344:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69da      	ldr	r2, [r3, #28]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d113      	bne.n	8007394 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f829 	bl	80073c4 <HAL_RTC_WaitForSynchro>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00d      	beq.n	8007394 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	22ff      	movs	r2, #255	; 0xff
 800737e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2204      	movs	r2, #4
 8007384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e010      	b.n	80073b6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	22ff      	movs	r2, #255	; 0xff
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	e001      	b.n	80073a6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40002800 	.word	0x40002800

080073c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80073dc:	f7fc f9b6 	bl	800374c <HAL_GetTick>
 80073e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073e2:	e009      	b.n	80073f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073e4:	f7fc f9b2 	bl	800374c <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073f2:	d901      	bls.n	80073f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e007      	b.n	8007408 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0ee      	beq.n	80073e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d119      	bne.n	800745a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800742e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007430:	f7fc f98c 	bl	800374c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007436:	e009      	b.n	800744c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007438:	f7fc f988 	bl	800374c <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007446:	d901      	bls.n	800744c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e007      	b.n	800745c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0ee      	beq.n	8007438 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800747a:	2302      	movs	r3, #2
 800747c:	e0a8      	b.n	80075d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	22ca      	movs	r2, #202	; 0xca
 8007494:	625a      	str	r2, [r3, #36]	; 0x24
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2253      	movs	r2, #83	; 0x53
 800749c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d020      	beq.n	80074ee <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80074ac:	f7fc f94e 	bl	800374c <HAL_GetTick>
 80074b0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80074b2:	e015      	b.n	80074e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074b4:	f7fc f94a 	bl	800374c <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074c2:	d90d      	bls.n	80074e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	22ff      	movs	r2, #255	; 0xff
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2203      	movs	r2, #3
 80074d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e077      	b.n	80075d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e2      	bne.n	80074b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	b2da      	uxtb	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800750e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007510:	f7fc f91c 	bl	800374c <HAL_GetTick>
 8007514:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007516:	e015      	b.n	8007544 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007518:	f7fc f918 	bl	800374c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007526:	d90d      	bls.n	8007544 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2203      	movs	r2, #3
 8007534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e045      	b.n	80075d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0e2      	beq.n	8007518 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0207 	bic.w	r2, r2, #7
 8007568:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6899      	ldr	r1, [r3, #8]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	430a      	orrs	r2, r1
 8007578:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800757a:	4b17      	ldr	r3, [pc, #92]	; (80075d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800757c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007580:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007586:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800758a:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a12      	ldr	r2, [pc, #72]	; (80075d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007594:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075a4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	22ff      	movs	r2, #255	; 0xff
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	58000800 	.word	0x58000800

080075dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e095      	b.n	800771a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d108      	bne.n	8007608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fe:	d009      	beq.n	8007614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	61da      	str	r2, [r3, #28]
 8007606:	e005      	b.n	8007614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fb fda2 	bl	8003178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007654:	d902      	bls.n	800765c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e002      	b.n	8007662 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800765c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007660:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800766a:	d007      	beq.n	800767c <HAL_SPI_Init+0xa0>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007674:	d002      	beq.n	800767c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	ea42 0103 	orr.w	r1, r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	f003 0204 	and.w	r2, r3, #4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80076f8:	ea42 0103 	orr.w	r1, r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b088      	sub	sp, #32
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_SPI_Transmit+0x22>
 8007740:	2302      	movs	r3, #2
 8007742:	e158      	b.n	80079f6 <HAL_SPI_Transmit+0x2d4>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800774c:	f7fb fffe 	bl	800374c <HAL_GetTick>
 8007750:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b01      	cmp	r3, #1
 8007760:	d002      	beq.n	8007768 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007762:	2302      	movs	r3, #2
 8007764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007766:	e13d      	b.n	80079e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_SPI_Transmit+0x52>
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007778:	e134      	b.n	80079e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2203      	movs	r2, #3
 800777e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c4:	d10f      	bne.n	80077e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d007      	beq.n	8007804 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800780c:	d94b      	bls.n	80078a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_SPI_Transmit+0xfa>
 8007816:	8afb      	ldrh	r3, [r7, #22]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d13e      	bne.n	800789a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	881a      	ldrh	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007840:	e02b      	b.n	800789a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b02      	cmp	r3, #2
 800784e:	d112      	bne.n	8007876 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007874:	e011      	b.n	800789a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007876:	f7fb ff69 	bl	800374c <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d803      	bhi.n	800788e <HAL_SPI_Transmit+0x16c>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788c:	d102      	bne.n	8007894 <HAL_SPI_Transmit+0x172>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007898:	e0a4      	b.n	80079e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1ce      	bne.n	8007842 <HAL_SPI_Transmit+0x120>
 80078a4:	e07c      	b.n	80079a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Transmit+0x192>
 80078ae:	8afb      	ldrh	r3, [r7, #22]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d170      	bne.n	8007996 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d912      	bls.n	80078e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	1c9a      	adds	r2, r3, #2
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b02      	subs	r3, #2
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078e2:	e058      	b.n	8007996 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	330c      	adds	r3, #12
 80078ee:	7812      	ldrb	r2, [r2, #0]
 80078f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800790a:	e044      	b.n	8007996 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b02      	cmp	r3, #2
 8007918:	d12b      	bne.n	8007972 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d912      	bls.n	800794a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b02      	subs	r3, #2
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007948:	e025      	b.n	8007996 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	330c      	adds	r3, #12
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007970:	e011      	b.n	8007996 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007972:	f7fb feeb 	bl	800374c <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d803      	bhi.n	800798a <HAL_SPI_Transmit+0x268>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007988:	d102      	bne.n	8007990 <HAL_SPI_Transmit+0x26e>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007994:	e026      	b.n	80079e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799a:	b29b      	uxth	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1b5      	bne.n	800790c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fe03 	bl	80085b0 <SPI_EndRxTxTransaction>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e000      	b.n	80079e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80079e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b088      	sub	sp, #32
 8007a02:	af02      	add	r7, sp, #8
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a1a:	d112      	bne.n	8007a42 <HAL_SPI_Receive+0x44>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10e      	bne.n	8007a42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2204      	movs	r2, #4
 8007a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4613      	mov	r3, r2
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f910 	bl	8007c5e <HAL_SPI_TransmitReceive>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	e109      	b.n	8007c56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_SPI_Receive+0x52>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e102      	b.n	8007c56 <HAL_SPI_Receive+0x258>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a58:	f7fb fe78 	bl	800374c <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d002      	beq.n	8007a70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a6e:	e0e9      	b.n	8007c44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <HAL_SPI_Receive+0x7e>
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a80:	e0e0      	b.n	8007c44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2204      	movs	r2, #4
 8007a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	88fa      	ldrh	r2, [r7, #6]
 8007aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007acc:	d908      	bls.n	8007ae0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	e007      	b.n	8007af0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af8:	d10f      	bne.n	8007b1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d007      	beq.n	8007b38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b40:	d867      	bhi.n	8007c12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b42:	e030      	b.n	8007ba6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d117      	bne.n	8007b82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f103 020c 	add.w	r2, r3, #12
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b80:	e011      	b.n	8007ba6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b82:	f7fb fde3 	bl	800374c <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d803      	bhi.n	8007b9a <HAL_SPI_Receive+0x19c>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b98:	d102      	bne.n	8007ba0 <HAL_SPI_Receive+0x1a2>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d102      	bne.n	8007ba6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ba4:	e04e      	b.n	8007c44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1c8      	bne.n	8007b44 <HAL_SPI_Receive+0x146>
 8007bb2:	e034      	b.n	8007c1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d115      	bne.n	8007bee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	b292      	uxth	r2, r2
 8007bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007bec:	e011      	b.n	8007c12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bee:	f7fb fdad 	bl	800374c <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d803      	bhi.n	8007c06 <HAL_SPI_Receive+0x208>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c04:	d102      	bne.n	8007c0c <HAL_SPI_Receive+0x20e>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d102      	bne.n	8007c12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c10:	e018      	b.n	8007c44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1ca      	bne.n	8007bb4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fc6c 	bl	8008500 <SPI_EndRxTransaction>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
 8007c40:	e000      	b.n	8007c44 <HAL_SPI_Receive+0x246>
  }

error :
 8007c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b08a      	sub	sp, #40	; 0x28
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_SPI_TransmitReceive+0x26>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e1fb      	b.n	800807c <HAL_SPI_TransmitReceive+0x41e>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c8c:	f7fb fd5e 	bl	800374c <HAL_GetTick>
 8007c90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ca0:	887b      	ldrh	r3, [r7, #2]
 8007ca2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ca8:	7efb      	ldrb	r3, [r7, #27]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d00e      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x6e>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cb4:	d106      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x66>
 8007cbe:	7efb      	ldrb	r3, [r7, #27]
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d003      	beq.n	8007ccc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cca:	e1cd      	b.n	8008068 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d005      	beq.n	8007cde <HAL_SPI_TransmitReceive+0x80>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <HAL_SPI_TransmitReceive+0x80>
 8007cd8:	887b      	ldrh	r3, [r7, #2]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007ce4:	e1c0      	b.n	8008068 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d003      	beq.n	8007cfa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2205      	movs	r2, #5
 8007cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	887a      	ldrh	r2, [r7, #2]
 8007d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	887a      	ldrh	r2, [r7, #2]
 8007d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	887a      	ldrh	r2, [r7, #2]
 8007d20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	887a      	ldrh	r2, [r7, #2]
 8007d26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d3c:	d802      	bhi.n	8007d44 <HAL_SPI_TransmitReceive+0xe6>
 8007d3e:	8a3b      	ldrh	r3, [r7, #16]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d908      	bls.n	8007d56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	e007      	b.n	8007d66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b40      	cmp	r3, #64	; 0x40
 8007d72:	d007      	beq.n	8007d84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d8c:	d97c      	bls.n	8007e88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_SPI_TransmitReceive+0x13e>
 8007d96:	8a7b      	ldrh	r3, [r7, #18]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d169      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	881a      	ldrh	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	1c9a      	adds	r2, r3, #2
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc0:	e056      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d11b      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x1aa>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d016      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x1aa>
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d113      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	881a      	ldrh	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	1c9a      	adds	r2, r3, #2
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d11c      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x1f2>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d016      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	b292      	uxth	r2, r2
 8007e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e50:	f7fb fc7c 	bl	800374c <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d807      	bhi.n	8007e70 <HAL_SPI_TransmitReceive+0x212>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e66:	d003      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e6e:	e0fb      	b.n	8008068 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1a3      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x164>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d19d      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x164>
 8007e86:	e0df      	b.n	8008048 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_SPI_TransmitReceive+0x23a>
 8007e90:	8a7b      	ldrh	r3, [r7, #18]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	f040 80cb 	bne.w	800802e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d912      	bls.n	8007ec8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	881a      	ldrh	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b02      	subs	r3, #2
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ec6:	e0b2      	b.n	800802e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	7812      	ldrb	r2, [r2, #0]
 8007ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eee:	e09e      	b.n	800802e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d134      	bne.n	8007f68 <HAL_SPI_TransmitReceive+0x30a>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d02f      	beq.n	8007f68 <HAL_SPI_TransmitReceive+0x30a>
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d12c      	bne.n	8007f68 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d912      	bls.n	8007f3e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	881a      	ldrh	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	1c9a      	adds	r2, r3, #2
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b02      	subs	r3, #2
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f3c:	e012      	b.n	8007f64 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	7812      	ldrb	r2, [r2, #0]
 8007f4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d148      	bne.n	8008008 <HAL_SPI_TransmitReceive+0x3aa>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d042      	beq.n	8008008 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d923      	bls.n	8007fd6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	b292      	uxth	r2, r2
 8007f9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	1c9a      	adds	r2, r3, #2
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b02      	subs	r3, #2
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d81f      	bhi.n	8008004 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fd2:	605a      	str	r2, [r3, #4]
 8007fd4:	e016      	b.n	8008004 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f103 020c 	add.w	r2, r3, #12
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008004:	2301      	movs	r3, #1
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008008:	f7fb fba0 	bl	800374c <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008014:	429a      	cmp	r2, r3
 8008016:	d803      	bhi.n	8008020 <HAL_SPI_TransmitReceive+0x3c2>
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801e:	d102      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x3c8>
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	2b00      	cmp	r3, #0
 8008024:	d103      	bne.n	800802e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800802c:	e01c      	b.n	8008068 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008032:	b29b      	uxth	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f af5b 	bne.w	8007ef0 <HAL_SPI_TransmitReceive+0x292>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	f47f af54 	bne.w	8007ef0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 faaf 	bl	80085b0 <SPI_EndRxTxTransaction>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d006      	beq.n	8008066 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	661a      	str	r2, [r3, #96]	; 0x60
 8008064:	e000      	b.n	8008068 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008066:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800807c:	4618      	mov	r0, r3
 800807e:	3728      	adds	r7, #40	; 0x28
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	099b      	lsrs	r3, r3, #6
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10f      	bne.n	80080c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	099b      	lsrs	r3, r3, #6
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
    return;
 80080c6:	e0d7      	b.n	8008278 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <HAL_SPI_IRQHandler+0x66>
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	09db      	lsrs	r3, r3, #7
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
    return;
 80080e8:	e0c6      	b.n	8008278 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10c      	bne.n	8008110 <HAL_SPI_IRQHandler+0x8c>
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	099b      	lsrs	r3, r3, #6
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	0a1b      	lsrs	r3, r3, #8
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80b4 	beq.w	8008278 <HAL_SPI_IRQHandler+0x1f4>
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80ad 	beq.w	8008278 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	099b      	lsrs	r3, r3, #6
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d023      	beq.n	8008172 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b03      	cmp	r3, #3
 8008134:	d011      	beq.n	800815a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813a:	f043 0204 	orr.w	r2, r3, #4
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008142:	2300      	movs	r3, #0
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	e00b      	b.n	8008172 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	693b      	ldr	r3, [r7, #16]
        return;
 8008170:	e082      	b.n	8008278 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d014      	beq.n	80081a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00c      	beq.n	80081ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b8:	f043 0208 	orr.w	r2, r3, #8
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081c0:	2300      	movs	r3, #0
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	60bb      	str	r3, [r7, #8]
 80081cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d04f      	beq.n	8008276 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <HAL_SPI_IRQHandler+0x17e>
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d034      	beq.n	800826c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0203 	bic.w	r2, r2, #3
 8008210:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008216:	2b00      	cmp	r3, #0
 8008218:	d011      	beq.n	800823e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821e:	4a18      	ldr	r2, [pc, #96]	; (8008280 <HAL_SPI_IRQHandler+0x1fc>)
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	4618      	mov	r0, r3
 8008228:	f7fb fcf6 	bl	8003c18 <HAL_DMA_Abort_IT>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d005      	beq.n	800823e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824a:	4a0d      	ldr	r2, [pc, #52]	; (8008280 <HAL_SPI_IRQHandler+0x1fc>)
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008252:	4618      	mov	r0, r3
 8008254:	f7fb fce0 	bl	8003c18 <HAL_DMA_Abort_IT>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800826a:	e003      	b.n	8008274 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f809 	bl	8008284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008272:	e000      	b.n	8008276 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008274:	bf00      	nop
    return;
 8008276:	bf00      	nop
  }
}
 8008278:	3720      	adds	r7, #32
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	08008299 	.word	0x08008299

08008284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff ffe5 	bl	8008284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	4613      	mov	r3, r2
 80082d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082d4:	f7fb fa3a 	bl	800374c <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	1a9b      	subs	r3, r3, r2
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4413      	add	r3, r2
 80082e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082e4:	f7fb fa32 	bl	800374c <HAL_GetTick>
 80082e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082ea:	4b39      	ldr	r3, [pc, #228]	; (80083d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	015b      	lsls	r3, r3, #5
 80082f0:	0d1b      	lsrs	r3, r3, #20
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	fb02 f303 	mul.w	r3, r2, r3
 80082f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082fa:	e054      	b.n	80083a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008302:	d050      	beq.n	80083a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008304:	f7fb fa22 	bl	800374c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	429a      	cmp	r2, r3
 8008312:	d902      	bls.n	800831a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d13d      	bne.n	8008396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008332:	d111      	bne.n	8008358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800833c:	d004      	beq.n	8008348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008346:	d107      	bne.n	8008358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008360:	d10f      	bne.n	8008382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e017      	b.n	80083c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4013      	ands	r3, r2
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d19b      	bne.n	80082fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3720      	adds	r7, #32
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000008 	.word	0x20000008

080083d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083e6:	f7fb f9b1 	bl	800374c <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	4413      	add	r3, r2
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083f6:	f7fb f9a9 	bl	800374c <HAL_GetTick>
 80083fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008404:	4b3d      	ldr	r3, [pc, #244]	; (80084fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	00da      	lsls	r2, r3, #3
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	0d1b      	lsrs	r3, r3, #20
 8008414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800841c:	e060      	b.n	80084e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008424:	d107      	bne.n	8008436 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b2db      	uxtb	r3, r3
 8008432:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008434:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843c:	d050      	beq.n	80084e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800843e:	f7fb f985 	bl	800374c <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844a:	429a      	cmp	r2, r3
 800844c:	d902      	bls.n	8008454 <SPI_WaitFifoStateUntilTimeout+0x80>
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d13d      	bne.n	80084d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008462:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846c:	d111      	bne.n	8008492 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008476:	d004      	beq.n	8008482 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008480:	d107      	bne.n	8008492 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008490:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849a:	d10f      	bne.n	80084bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e010      	b.n	80084f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	3b01      	subs	r3, #1
 80084de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4013      	ands	r3, r2
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d196      	bne.n	800841e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3728      	adds	r7, #40	; 0x28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000008 	.word	0x20000008

08008500 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af02      	add	r7, sp, #8
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008514:	d111      	bne.n	800853a <SPI_EndRxTransaction+0x3a>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851e:	d004      	beq.n	800852a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008528:	d107      	bne.n	800853a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008538:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2200      	movs	r2, #0
 8008542:	2180      	movs	r1, #128	; 0x80
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff febd 	bl	80082c4 <SPI_WaitFlagStateUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008554:	f043 0220 	orr.w	r2, r3, #32
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e023      	b.n	80085a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008568:	d11d      	bne.n	80085a6 <SPI_EndRxTransaction+0xa6>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008572:	d004      	beq.n	800857e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857c:	d113      	bne.n	80085a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2200      	movs	r2, #0
 8008586:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff ff22 	bl	80083d4 <SPI_WaitFifoStateUntilTimeout>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d007      	beq.n	80085a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e000      	b.n	80085a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af02      	add	r7, sp, #8
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff ff03 	bl	80083d4 <SPI_WaitFifoStateUntilTimeout>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d8:	f043 0220 	orr.w	r2, r3, #32
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e027      	b.n	8008634 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2200      	movs	r2, #0
 80085ec:	2180      	movs	r1, #128	; 0x80
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff fe68 	bl	80082c4 <SPI_WaitFlagStateUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fe:	f043 0220 	orr.w	r2, r3, #32
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e014      	b.n	8008634 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2200      	movs	r2, #0
 8008612:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff fedc 	bl	80083d4 <SPI_WaitFifoStateUntilTimeout>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008626:	f043 0220 	orr.w	r2, r3, #32
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e000      	b.n	8008634 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <LL_RCC_GetUSARTClockSource>:
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008648:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4013      	ands	r3, r2
}
 8008650:	4618      	mov	r0, r3
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <LL_RCC_GetLPUARTClockSource>:
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008668:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4013      	ands	r3, r2
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e042      	b.n	8008714 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fa fdfb 	bl	800329c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2224      	movs	r2, #36	; 0x24
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0201 	bic.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f8ba 	bl	8008838 <UART_SetConfig>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e022      	b.n	8008714 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fad6 	bl	8008c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb5d 	bl	8008dcc <UART_CheckIdleState>
 8008712:	4603      	mov	r3, r0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008732:	2b20      	cmp	r3, #32
 8008734:	d17b      	bne.n	800882e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_UART_Transmit+0x26>
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e074      	b.n	8008830 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2221      	movs	r2, #33	; 0x21
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008756:	f7fa fff9 	bl	800374c <HAL_GetTick>
 800875a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	88fa      	ldrh	r2, [r7, #6]
 8008760:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	88fa      	ldrh	r2, [r7, #6]
 8008768:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008774:	d108      	bne.n	8008788 <HAL_UART_Transmit+0x6c>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	e003      	b.n	8008790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800878c:	2300      	movs	r3, #0
 800878e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008790:	e030      	b.n	80087f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	2180      	movs	r1, #128	; 0x80
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fbbf 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e03d      	b.n	8008830 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	3302      	adds	r3, #2
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	e007      	b.n	80087e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	781a      	ldrb	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	3301      	adds	r3, #1
 80087e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1c8      	bne.n	8008792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2200      	movs	r2, #0
 8008808:	2140      	movs	r1, #64	; 0x40
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fb88 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e006      	b.n	8008830 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800882e:	2302      	movs	r3, #2
  }
}
 8008830:	4618      	mov	r0, r3
 8008832:	3720      	adds	r7, #32
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800883c:	b08c      	sub	sp, #48	; 0x30
 800883e:	af00      	add	r7, sp, #0
 8008840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	431a      	orrs	r2, r3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	431a      	orrs	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	4313      	orrs	r3, r2
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	4baf      	ldr	r3, [pc, #700]	; (8008b24 <UART_SetConfig+0x2ec>)
 8008868:	4013      	ands	r3, r2
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008870:	430b      	orrs	r3, r1
 8008872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4aa4      	ldr	r2, [pc, #656]	; (8008b28 <UART_SetConfig+0x2f0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a0:	4313      	orrs	r3, r2
 80088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80088ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b8:	430b      	orrs	r3, r1
 80088ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	f023 010f 	bic.w	r1, r3, #15
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a95      	ldr	r2, [pc, #596]	; (8008b2c <UART_SetConfig+0x2f4>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d125      	bne.n	8008928 <UART_SetConfig+0xf0>
 80088dc:	2003      	movs	r0, #3
 80088de:	f7ff fead 	bl	800863c <LL_RCC_GetUSARTClockSource>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d81b      	bhi.n	8008920 <UART_SetConfig+0xe8>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <UART_SetConfig+0xb8>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008901 	.word	0x08008901
 80088f4:	08008911 	.word	0x08008911
 80088f8:	08008909 	.word	0x08008909
 80088fc:	08008919 	.word	0x08008919
 8008900:	2301      	movs	r3, #1
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008906:	e042      	b.n	800898e <UART_SetConfig+0x156>
 8008908:	2302      	movs	r3, #2
 800890a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800890e:	e03e      	b.n	800898e <UART_SetConfig+0x156>
 8008910:	2304      	movs	r3, #4
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008916:	e03a      	b.n	800898e <UART_SetConfig+0x156>
 8008918:	2308      	movs	r3, #8
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891e:	e036      	b.n	800898e <UART_SetConfig+0x156>
 8008920:	2310      	movs	r3, #16
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008926:	e032      	b.n	800898e <UART_SetConfig+0x156>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a7e      	ldr	r2, [pc, #504]	; (8008b28 <UART_SetConfig+0x2f0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d12a      	bne.n	8008988 <UART_SetConfig+0x150>
 8008932:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008936:	f7ff fe91 	bl	800865c <LL_RCC_GetLPUARTClockSource>
 800893a:	4603      	mov	r3, r0
 800893c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008940:	d01a      	beq.n	8008978 <UART_SetConfig+0x140>
 8008942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008946:	d81b      	bhi.n	8008980 <UART_SetConfig+0x148>
 8008948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800894c:	d00c      	beq.n	8008968 <UART_SetConfig+0x130>
 800894e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008952:	d815      	bhi.n	8008980 <UART_SetConfig+0x148>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <UART_SetConfig+0x128>
 8008958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800895c:	d008      	beq.n	8008970 <UART_SetConfig+0x138>
 800895e:	e00f      	b.n	8008980 <UART_SetConfig+0x148>
 8008960:	2300      	movs	r3, #0
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008966:	e012      	b.n	800898e <UART_SetConfig+0x156>
 8008968:	2302      	movs	r3, #2
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800896e:	e00e      	b.n	800898e <UART_SetConfig+0x156>
 8008970:	2304      	movs	r3, #4
 8008972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008976:	e00a      	b.n	800898e <UART_SetConfig+0x156>
 8008978:	2308      	movs	r3, #8
 800897a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800897e:	e006      	b.n	800898e <UART_SetConfig+0x156>
 8008980:	2310      	movs	r3, #16
 8008982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008986:	e002      	b.n	800898e <UART_SetConfig+0x156>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a65      	ldr	r2, [pc, #404]	; (8008b28 <UART_SetConfig+0x2f0>)
 8008994:	4293      	cmp	r3, r2
 8008996:	f040 8097 	bne.w	8008ac8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800899a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d823      	bhi.n	80089ea <UART_SetConfig+0x1b2>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0x170>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089eb 	.word	0x080089eb
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	080089eb 	.word	0x080089eb
 80089b8:	080089db 	.word	0x080089db
 80089bc:	080089eb 	.word	0x080089eb
 80089c0:	080089eb 	.word	0x080089eb
 80089c4:	080089eb 	.word	0x080089eb
 80089c8:	080089e3 	.word	0x080089e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089cc:	f7fd ff46 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 80089d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089d2:	e010      	b.n	80089f6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089d4:	4b56      	ldr	r3, [pc, #344]	; (8008b30 <UART_SetConfig+0x2f8>)
 80089d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089d8:	e00d      	b.n	80089f6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089da:	f7fd febf 	bl	800675c <HAL_RCC_GetSysClockFreq>
 80089de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089e0:	e009      	b.n	80089f6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089e8:	e005      	b.n	80089f6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 812b 	beq.w	8008c54 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a02:	4a4c      	ldr	r2, [pc, #304]	; (8008b34 <UART_SetConfig+0x2fc>)
 8008a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d305      	bcc.n	8008a2e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d903      	bls.n	8008a36 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a34:	e10e      	b.n	8008c54 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	2200      	movs	r2, #0
 8008a3a:	60bb      	str	r3, [r7, #8]
 8008a3c:	60fa      	str	r2, [r7, #12]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	4a3c      	ldr	r2, [pc, #240]	; (8008b34 <UART_SetConfig+0x2fc>)
 8008a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a58:	f7f7 fdc6 	bl	80005e8 <__aeabi_uldivmod>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4610      	mov	r0, r2
 8008a62:	4619      	mov	r1, r3
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	020b      	lsls	r3, r1, #8
 8008a6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a72:	0202      	lsls	r2, r0, #8
 8008a74:	6979      	ldr	r1, [r7, #20]
 8008a76:	6849      	ldr	r1, [r1, #4]
 8008a78:	0849      	lsrs	r1, r1, #1
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	4605      	mov	r5, r0
 8008a80:	eb12 0804 	adds.w	r8, r2, r4
 8008a84:	eb43 0905 	adc.w	r9, r3, r5
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	469a      	mov	sl, r3
 8008a90:	4693      	mov	fp, r2
 8008a92:	4652      	mov	r2, sl
 8008a94:	465b      	mov	r3, fp
 8008a96:	4640      	mov	r0, r8
 8008a98:	4649      	mov	r1, r9
 8008a9a:	f7f7 fda5 	bl	80005e8 <__aeabi_uldivmod>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aac:	d308      	bcc.n	8008ac0 <UART_SetConfig+0x288>
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab4:	d204      	bcs.n	8008ac0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6a3a      	ldr	r2, [r7, #32]
 8008abc:	60da      	str	r2, [r3, #12]
 8008abe:	e0c9      	b.n	8008c54 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ac6:	e0c5      	b.n	8008c54 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ad0:	d16d      	bne.n	8008bae <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008ad2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	2b07      	cmp	r3, #7
 8008ada:	d82d      	bhi.n	8008b38 <UART_SetConfig+0x300>
 8008adc:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <UART_SetConfig+0x2ac>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008b05 	.word	0x08008b05
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008b39 	.word	0x08008b39
 8008af0:	08008b13 	.word	0x08008b13
 8008af4:	08008b39 	.word	0x08008b39
 8008af8:	08008b39 	.word	0x08008b39
 8008afc:	08008b39 	.word	0x08008b39
 8008b00:	08008b1b 	.word	0x08008b1b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b04:	f7fd fec0 	bl	8006888 <HAL_RCC_GetPCLK2Freq>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b0a:	e01b      	b.n	8008b44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <UART_SetConfig+0x2f8>)
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b10:	e018      	b.n	8008b44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b12:	f7fd fe23 	bl	800675c <HAL_RCC_GetSysClockFreq>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b18:	e014      	b.n	8008b44 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b20:	e010      	b.n	8008b44 <UART_SetConfig+0x30c>
 8008b22:	bf00      	nop
 8008b24:	cfff69f3 	.word	0xcfff69f3
 8008b28:	40008000 	.word	0x40008000
 8008b2c:	40013800 	.word	0x40013800
 8008b30:	00f42400 	.word	0x00f42400
 8008b34:	0800de78 	.word	0x0800de78
      default:
        pclk = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8084 	beq.w	8008c54 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	4a4b      	ldr	r2, [pc, #300]	; (8008c80 <UART_SetConfig+0x448>)
 8008b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b56:	461a      	mov	r2, r3
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b5e:	005a      	lsls	r2, r3, #1
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	085b      	lsrs	r3, r3, #1
 8008b66:	441a      	add	r2, r3
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	2b0f      	cmp	r3, #15
 8008b76:	d916      	bls.n	8008ba6 <UART_SetConfig+0x36e>
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b7e:	d212      	bcs.n	8008ba6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f023 030f 	bic.w	r3, r3, #15
 8008b88:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	8bfb      	ldrh	r3, [r7, #30]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	8bfa      	ldrh	r2, [r7, #30]
 8008ba2:	60da      	str	r2, [r3, #12]
 8008ba4:	e056      	b.n	8008c54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008bac:	e052      	b.n	8008c54 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	2b07      	cmp	r3, #7
 8008bb6:	d822      	bhi.n	8008bfe <UART_SetConfig+0x3c6>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <UART_SetConfig+0x388>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008be1 	.word	0x08008be1
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bff 	.word	0x08008bff
 8008bcc:	08008bef 	.word	0x08008bef
 8008bd0:	08008bff 	.word	0x08008bff
 8008bd4:	08008bff 	.word	0x08008bff
 8008bd8:	08008bff 	.word	0x08008bff
 8008bdc:	08008bf7 	.word	0x08008bf7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008be0:	f7fd fe52 	bl	8006888 <HAL_RCC_GetPCLK2Freq>
 8008be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008be6:	e010      	b.n	8008c0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008be8:	4b26      	ldr	r3, [pc, #152]	; (8008c84 <UART_SetConfig+0x44c>)
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bec:	e00d      	b.n	8008c0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bee:	f7fd fdb5 	bl	800675c <HAL_RCC_GetSysClockFreq>
 8008bf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bf4:	e009      	b.n	8008c0a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bfc:	e005      	b.n	8008c0a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c08:	bf00      	nop
    }

    if (pclk != 0U)
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d021      	beq.n	8008c54 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	4a1a      	ldr	r2, [pc, #104]	; (8008c80 <UART_SetConfig+0x448>)
 8008c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	441a      	add	r2, r3
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	2b0f      	cmp	r3, #15
 8008c38:	d909      	bls.n	8008c4e <UART_SetConfig+0x416>
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c40:	d205      	bcs.n	8008c4e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60da      	str	r2, [r3, #12]
 8008c4c:	e002      	b.n	8008c54 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2200      	movs	r2, #0
 8008c68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c70:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3730      	adds	r7, #48	; 0x30
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7e:	bf00      	nop
 8008c80:	0800de78 	.word	0x0800de78
 8008c84:	00f42400 	.word	0x00f42400

08008c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00a      	beq.n	8008cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01a      	beq.n	8008d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d86:	d10a      	bne.n	8008d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	605a      	str	r2, [r3, #4]
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b098      	sub	sp, #96	; 0x60
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ddc:	f7fa fcb6 	bl	800374c <HAL_GetTick>
 8008de0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d12f      	bne.n	8008e50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f88e 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d022      	beq.n	8008e50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e28:	647b      	str	r3, [r7, #68]	; 0x44
 8008e2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e6      	bne.n	8008e0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e063      	b.n	8008f18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d149      	bne.n	8008ef2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e66:	2200      	movs	r2, #0
 8008e68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f857 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d03c      	beq.n	8008ef2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	623b      	str	r3, [r7, #32]
   return(result);
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e96:	633b      	str	r3, [r7, #48]	; 0x30
 8008e98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e6      	bne.n	8008e78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f023 0301 	bic.w	r3, r3, #1
 8008ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eca:	61fa      	str	r2, [r7, #28]
 8008ecc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	69b9      	ldr	r1, [r7, #24]
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e5      	bne.n	8008eaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e012      	b.n	8008f18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3758      	adds	r7, #88	; 0x58
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f30:	e049      	b.n	8008fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f38:	d045      	beq.n	8008fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3a:	f7fa fc07 	bl	800374c <HAL_GetTick>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d302      	bcc.n	8008f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e048      	b.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d031      	beq.n	8008fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b08      	cmp	r3, #8
 8008f6e:	d110      	bne.n	8008f92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2208      	movs	r2, #8
 8008f76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f838 	bl	8008fee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2208      	movs	r2, #8
 8008f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e029      	b.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa0:	d111      	bne.n	8008fc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f81e 	bl	8008fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e00f      	b.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69da      	ldr	r2, [r3, #28]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	4013      	ands	r3, r2
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	bf0c      	ite	eq
 8008fd6:	2301      	moveq	r3, #1
 8008fd8:	2300      	movne	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d0a6      	beq.n	8008f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b095      	sub	sp, #84	; 0x54
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800900a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009014:	643b      	str	r3, [r7, #64]	; 0x40
 8009016:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800901a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	e853 3f00 	ldrex	r3, [r3]
 8009036:	61fb      	str	r3, [r7, #28]
   return(result);
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	64bb      	str	r3, [r7, #72]	; 0x48
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3308      	adds	r3, #8
 800904a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800904c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800904e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e3      	bne.n	8009028 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009064:	2b01      	cmp	r3, #1
 8009066:	d118      	bne.n	800909a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	60bb      	str	r3, [r7, #8]
   return(result);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0310 	bic.w	r3, r3, #16
 800907c:	647b      	str	r3, [r7, #68]	; 0x44
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	613b      	str	r3, [r7, #16]
   return(result);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80090ae:	bf00      	nop
 80090b0:	3754      	adds	r7, #84	; 0x54
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d101      	bne.n	80090d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e027      	b.n	8009120 <HAL_UARTEx_DisableFifoMode+0x66>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2224      	movs	r2, #36	; 0x24
 80090dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0201 	bic.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2220      	movs	r2, #32
 8009112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009140:	2302      	movs	r3, #2
 8009142:	e02d      	b.n	80091a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2224      	movs	r2, #36	; 0x24
 8009150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0201 	bic.w	r2, r2, #1
 800916a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f84f 	bl	8009224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091bc:	2302      	movs	r3, #2
 80091be:	e02d      	b.n	800921c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2224      	movs	r2, #36	; 0x24
 80091cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f022 0201 	bic.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f811 	bl	8009224 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2220      	movs	r2, #32
 800920e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009244:	e031      	b.n	80092aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009246:	2308      	movs	r3, #8
 8009248:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800924a:	2308      	movs	r3, #8
 800924c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	0e5b      	lsrs	r3, r3, #25
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	0f5b      	lsrs	r3, r3, #29
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	7b3a      	ldrb	r2, [r7, #12]
 8009272:	4911      	ldr	r1, [pc, #68]	; (80092b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009274:	5c8a      	ldrb	r2, [r1, r2]
 8009276:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800927a:	7b3a      	ldrb	r2, [r7, #12]
 800927c:	490f      	ldr	r1, [pc, #60]	; (80092bc <UARTEx_SetNbDataToProcess+0x98>)
 800927e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009280:	fb93 f3f2 	sdiv	r3, r3, r2
 8009284:	b29a      	uxth	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	7b7a      	ldrb	r2, [r7, #13]
 8009290:	4909      	ldr	r1, [pc, #36]	; (80092b8 <UARTEx_SetNbDataToProcess+0x94>)
 8009292:	5c8a      	ldrb	r2, [r1, r2]
 8009294:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009298:	7b7a      	ldrb	r2, [r7, #13]
 800929a:	4908      	ldr	r1, [pc, #32]	; (80092bc <UARTEx_SetNbDataToProcess+0x98>)
 800929c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800929e:	fb93 f3f2 	sdiv	r3, r3, r2
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	0800de90 	.word	0x0800de90
 80092bc:	0800de98 	.word	0x0800de98

080092c0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	2218      	movs	r2, #24
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 f8d8 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092d8:	233f      	movs	r3, #63	; 0x3f
 80092da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80092dc:	2381      	movs	r3, #129	; 0x81
 80092de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80092e0:	1dfb      	adds	r3, r7, #7
 80092e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f001 fb54 	bl	800a99c <hci_send_req>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da01      	bge.n	80092fe <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80092fa:	23ff      	movs	r3, #255	; 0xff
 80092fc:	e000      	b.n	8009300 <aci_gap_set_non_discoverable+0x40>
  return status;
 80092fe:	79fb      	ldrb	r3, [r7, #7]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3720      	adds	r7, #32
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8009308:	b5b0      	push	{r4, r5, r7, lr}
 800930a:	b0ce      	sub	sp, #312	; 0x138
 800930c:	af00      	add	r7, sp, #0
 800930e:	4605      	mov	r5, r0
 8009310:	460c      	mov	r4, r1
 8009312:	4610      	mov	r0, r2
 8009314:	4619      	mov	r1, r3
 8009316:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800931a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800931e:	462a      	mov	r2, r5
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009326:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800932a:	4622      	mov	r2, r4
 800932c:	801a      	strh	r2, [r3, #0]
 800932e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009332:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8009336:	4602      	mov	r2, r0
 8009338:	801a      	strh	r2, [r3, #0]
 800933a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800933e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009342:	460a      	mov	r2, r1
 8009344:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009346:	f107 0310 	add.w	r3, r7, #16
 800934a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800934e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009352:	3308      	adds	r3, #8
 8009354:	f107 0210 	add.w	r2, r7, #16
 8009358:	4413      	add	r3, r2
 800935a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800935e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009362:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009366:	4413      	add	r3, r2
 8009368:	3309      	adds	r3, #9
 800936a:	f107 0210 	add.w	r2, r7, #16
 800936e:	4413      	add	r3, r2
 8009370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009374:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009378:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800937c:	2200      	movs	r2, #0
 800937e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009386:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800938a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800938e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009392:	7812      	ldrb	r2, [r2, #0]
 8009394:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939a:	3301      	adds	r3, #1
 800939c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80093a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093a4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80093a8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80093b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b6:	3302      	adds	r3, #2
 80093b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80093bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80093c4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80093c8:	8812      	ldrh	r2, [r2, #0]
 80093ca:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80093ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093d2:	3302      	adds	r3, #2
 80093d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80093d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80093e0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80093e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093ec:	3301      	adds	r3, #1
 80093ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80093f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093f6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80093fa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80093fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009400:	3301      	adds	r3, #1
 8009402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009406:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800940a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800940e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009414:	3301      	adds	r3, #1
 8009416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800941a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800941e:	3308      	adds	r3, #8
 8009420:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009424:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009428:	4618      	mov	r0, r3
 800942a:	f001 f81d 	bl	800a468 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800942e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009432:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009436:	4413      	add	r3, r2
 8009438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800943c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009440:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009444:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800944a:	3301      	adds	r3, #1
 800944c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009450:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009454:	3301      	adds	r3, #1
 8009456:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800945a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800945e:	4618      	mov	r0, r3
 8009460:	f001 f802 	bl	800a468 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009464:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009468:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800946c:	4413      	add	r3, r2
 800946e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8009472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009476:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800947a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800947c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009480:	3302      	adds	r3, #2
 8009482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8009486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800948e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009490:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009494:	3302      	adds	r3, #2
 8009496:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800949a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800949e:	2218      	movs	r2, #24
 80094a0:	2100      	movs	r1, #0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fff0 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094a8:	233f      	movs	r3, #63	; 0x3f
 80094aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80094ae:	2383      	movs	r3, #131	; 0x83
 80094b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094b4:	f107 0310 	add.w	r3, r7, #16
 80094b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094c4:	f107 030f 	add.w	r3, r7, #15
 80094c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f001 fa5f 	bl	800a99c <hci_send_req>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	da01      	bge.n	80094e8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80094e4:	23ff      	movs	r3, #255	; 0xff
 80094e6:	e004      	b.n	80094f2 <aci_gap_set_discoverable+0x1ea>
  return status;
 80094e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80094ec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094f0:	781b      	ldrb	r3, [r3, #0]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bdb0      	pop	{r4, r5, r7, pc}

080094fc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b0cc      	sub	sp, #304	; 0x130
 8009500:	af00      	add	r7, sp, #0
 8009502:	4602      	mov	r2, r0
 8009504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009508:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800950c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800950e:	f107 0310 	add.w	r3, r7, #16
 8009512:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800952c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009530:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009534:	7812      	ldrb	r2, [r2, #0]
 8009536:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800953c:	3301      	adds	r3, #1
 800953e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009546:	2218      	movs	r2, #24
 8009548:	2100      	movs	r1, #0
 800954a:	4618      	mov	r0, r3
 800954c:	f000 ff9c 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009550:	233f      	movs	r3, #63	; 0x3f
 8009552:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009556:	2385      	movs	r3, #133	; 0x85
 8009558:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800955c:	f107 0310 	add.w	r3, r7, #16
 8009560:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009568:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800956c:	f107 030f 	add.w	r3, r7, #15
 8009570:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009574:	2301      	movs	r3, #1
 8009576:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800957a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fa0b 	bl	800a99c <hci_send_req>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	da01      	bge.n	8009590 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800958c:	23ff      	movs	r3, #255	; 0xff
 800958e:	e004      	b.n	800959a <aci_gap_set_io_capability+0x9e>
  return status;
 8009590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009594:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009598:	781b      	ldrb	r3, [r3, #0]
}
 800959a:	4618      	mov	r0, r3
 800959c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80095a4:	b5b0      	push	{r4, r5, r7, lr}
 80095a6:	b0cc      	sub	sp, #304	; 0x130
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4605      	mov	r5, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	4610      	mov	r0, r2
 80095b0:	4619      	mov	r1, r3
 80095b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80095ba:	462a      	mov	r2, r5
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095c6:	4622      	mov	r2, r4
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ce:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80095d2:	4602      	mov	r2, r0
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095de:	460a      	mov	r2, r1
 80095e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80095e2:	f107 0310 	add.w	r3, r7, #16
 80095e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80095fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009600:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009604:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800960c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009610:	3301      	adds	r3, #1
 8009612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800961e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800962a:	3301      	adds	r3, #1
 800962c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009634:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009638:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800963c:	7812      	ldrb	r2, [r2, #0]
 800963e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009640:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009644:	3301      	adds	r3, #1
 8009646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800964a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800964e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009652:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800965a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800965e:	3301      	adds	r3, #1
 8009660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009668:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800966c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800966e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009672:	3301      	adds	r3, #1
 8009674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009680:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009686:	3301      	adds	r3, #1
 8009688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800968c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009690:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009694:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009696:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800969a:	3301      	adds	r3, #1
 800969c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80096a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80096a8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80096ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096b0:	3304      	adds	r3, #4
 80096b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80096b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ba:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80096be:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80096c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096c4:	3301      	adds	r3, #1
 80096c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096ce:	2218      	movs	r2, #24
 80096d0:	2100      	movs	r1, #0
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fed8 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096d8:	233f      	movs	r3, #63	; 0x3f
 80096da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80096de:	2386      	movs	r3, #134	; 0x86
 80096e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096e4:	f107 0310 	add.w	r3, r7, #16
 80096e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096f4:	f107 030f 	add.w	r3, r7, #15
 80096f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009702:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009706:	2100      	movs	r1, #0
 8009708:	4618      	mov	r0, r3
 800970a:	f001 f947 	bl	800a99c <hci_send_req>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	da01      	bge.n	8009718 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009714:	23ff      	movs	r3, #255	; 0xff
 8009716:	e004      	b.n	8009722 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009720:	781b      	ldrb	r3, [r3, #0]
}
 8009722:	4618      	mov	r0, r3
 8009724:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009728:	46bd      	mov	sp, r7
 800972a:	bdb0      	pop	{r4, r5, r7, pc}

0800972c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b0cc      	sub	sp, #304	; 0x130
 8009730:	af00      	add	r7, sp, #0
 8009732:	4602      	mov	r2, r0
 8009734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800973c:	6019      	str	r1, [r3, #0]
 800973e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009742:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009746:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009748:	f107 0310 	add.w	r3, r7, #16
 800974c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009754:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009758:	2200      	movs	r2, #0
 800975a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009766:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800976a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800976e:	8812      	ldrh	r2, [r2, #0]
 8009770:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009776:	3302      	adds	r3, #2
 8009778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800977c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009780:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009784:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009788:	6812      	ldr	r2, [r2, #0]
 800978a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800978e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009792:	3304      	adds	r3, #4
 8009794:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800979c:	2218      	movs	r2, #24
 800979e:	2100      	movs	r1, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 fe71 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097a6:	233f      	movs	r3, #63	; 0x3f
 80097a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80097ac:	2388      	movs	r3, #136	; 0x88
 80097ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097b2:	f107 0310 	add.w	r3, r7, #16
 80097b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097c2:	f107 030f 	add.w	r3, r7, #15
 80097c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 f8e0 	bl	800a99c <hci_send_req>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	da01      	bge.n	80097e6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80097e2:	23ff      	movs	r3, #255	; 0xff
 80097e4:	e004      	b.n	80097f0 <aci_gap_pass_key_resp+0xc4>
  return status;
 80097e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097ee:	781b      	ldrb	r3, [r3, #0]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80097fa:	b590      	push	{r4, r7, lr}
 80097fc:	b0cd      	sub	sp, #308	; 0x134
 80097fe:	af00      	add	r7, sp, #0
 8009800:	4604      	mov	r4, r0
 8009802:	4608      	mov	r0, r1
 8009804:	4611      	mov	r1, r2
 8009806:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800980a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009814:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009818:	4622      	mov	r2, r4
 800981a:	701a      	strb	r2, [r3, #0]
 800981c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009820:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009824:	4602      	mov	r2, r0
 8009826:	701a      	strb	r2, [r3, #0]
 8009828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009830:	460a      	mov	r2, r1
 8009832:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009834:	f107 0310 	add.w	r3, r7, #16
 8009838:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	2207      	movs	r2, #7
 8009842:	2100      	movs	r1, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f000 fe1f 	bl	800a488 <Osal_MemSet>
  int index_input = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009854:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009858:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009860:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009864:	3301      	adds	r3, #1
 8009866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800986a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009872:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800987a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800987e:	3301      	adds	r3, #1
 8009880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009888:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800988c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009890:	7812      	ldrb	r2, [r2, #0]
 8009892:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009898:	3301      	adds	r3, #1
 800989a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800989e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098a2:	2218      	movs	r2, #24
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fdee 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098ac:	233f      	movs	r3, #63	; 0x3f
 80098ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80098b2:	238a      	movs	r3, #138	; 0x8a
 80098b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098b8:	f107 0310 	add.w	r3, r7, #16
 80098bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80098c8:	f107 0308 	add.w	r3, r7, #8
 80098cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80098d0:	2307      	movs	r3, #7
 80098d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 f85d 	bl	800a99c <hci_send_req>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	da01      	bge.n	80098ec <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80098e8:	23ff      	movs	r3, #255	; 0xff
 80098ea:	e02e      	b.n	800994a <aci_gap_init+0x150>
  if ( resp.Status )
 80098ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <aci_gap_init+0x10c>
    return resp.Status;
 80098fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	e021      	b.n	800994a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800990e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009912:	b29a      	uxth	r2, r3
 8009914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009924:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009928:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800992c:	b29a      	uxth	r2, r3
 800992e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009932:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009938:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800993c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009946:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009950:	46bd      	mov	sp, r7
 8009952:	bd90      	pop	{r4, r7, pc}

08009954 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b0cc      	sub	sp, #304	; 0x130
 8009958:	af00      	add	r7, sp, #0
 800995a:	4602      	mov	r2, r0
 800995c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009964:	6019      	str	r1, [r3, #0]
 8009966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800996a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800996e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009970:	f107 0310 	add.w	r3, r7, #16
 8009974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800998a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009992:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009996:	7812      	ldrb	r2, [r2, #0]
 8009998:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800999a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800999e:	3301      	adds	r3, #1
 80099a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80099a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a8:	1c58      	adds	r0, r3, #1
 80099aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ae:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099bc:	6819      	ldr	r1, [r3, #0]
 80099be:	f000 fd53 	bl	800a468 <Osal_MemCpy>
  index_input += AdvDataLen;
 80099c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80099d0:	4413      	add	r3, r2
 80099d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099da:	2218      	movs	r2, #24
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fd52 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099e4:	233f      	movs	r3, #63	; 0x3f
 80099e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80099ea:	238e      	movs	r3, #142	; 0x8e
 80099ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80099f0:	f107 0310 	add.w	r3, r7, #16
 80099f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80099f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a00:	f107 030f 	add.w	r3, r7, #15
 8009a04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 ffc1 	bl	800a99c <hci_send_req>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da01      	bge.n	8009a24 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009a20:	23ff      	movs	r3, #255	; 0xff
 8009a22:	e004      	b.n	8009a2e <aci_gap_update_adv_data+0xda>
  return status;
 8009a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a28:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a2c:	781b      	ldrb	r3, [r3, #0]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	2218      	movs	r2, #24
 8009a48:	2100      	movs	r1, #0
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fd1c 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a50:	233f      	movs	r3, #63	; 0x3f
 8009a52:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009a54:	2392      	movs	r3, #146	; 0x92
 8009a56:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009a58:	1dfb      	adds	r3, r7, #7
 8009a5a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a60:	f107 0308 	add.w	r3, r7, #8
 8009a64:	2100      	movs	r1, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 ff98 	bl	800a99c <hci_send_req>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da01      	bge.n	8009a76 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009a72:	23ff      	movs	r3, #255	; 0xff
 8009a74:	e000      	b.n	8009a78 <aci_gap_configure_whitelist+0x40>
  return status;
 8009a76:	79fb      	ldrb	r3, [r7, #7]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3720      	adds	r7, #32
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b0cc      	sub	sp, #304	; 0x130
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4602      	mov	r2, r0
 8009a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009a90:	801a      	strh	r2, [r3, #0]
 8009a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a96:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009a9e:	f107 0310 	add.w	r3, r7, #16
 8009aa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aaa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009abc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ac0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ac4:	8812      	ldrh	r2, [r2, #0]
 8009ac6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009acc:	3302      	adds	r3, #2
 8009ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ada:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009aec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009af0:	2218      	movs	r2, #24
 8009af2:	2100      	movs	r1, #0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 fcc7 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009afa:	233f      	movs	r3, #63	; 0x3f
 8009afc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009b00:	23a5      	movs	r3, #165	; 0xa5
 8009b02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b06:	f107 0310 	add.w	r3, r7, #16
 8009b0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b16:	f107 030f 	add.w	r3, r7, #15
 8009b1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 ff36 	bl	800a99c <hci_send_req>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	da01      	bge.n	8009b3a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009b36:	23ff      	movs	r3, #255	; 0xff
 8009b38:	e004      	b.n	8009b44 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b42:	781b      	ldrb	r3, [r3, #0]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b088      	sub	sp, #32
 8009b52:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	2218      	movs	r2, #24
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fc91 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b66:	233f      	movs	r3, #63	; 0x3f
 8009b68:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009b6a:	f240 1301 	movw	r3, #257	; 0x101
 8009b6e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b70:	1dfb      	adds	r3, r7, #7
 8009b72:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b74:	2301      	movs	r3, #1
 8009b76:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 ff0c 	bl	800a99c <hci_send_req>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da01      	bge.n	8009b8e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009b8a:	23ff      	movs	r3, #255	; 0xff
 8009b8c:	e000      	b.n	8009b90 <aci_gatt_init+0x42>
  return status;
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3720      	adds	r7, #32
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b0cf      	sub	sp, #316	; 0x13c
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009ba4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009ba8:	6001      	str	r1, [r0, #0]
 8009baa:	4610      	mov	r0, r2
 8009bac:	4619      	mov	r1, r3
 8009bae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bb2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bbe:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	701a      	strb	r2, [r3, #0]
 8009bc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bca:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009bce:	460a      	mov	r2, r1
 8009bd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009bd2:	f107 0310 	add.w	r3, r7, #16
 8009bd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009bda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bde:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d00a      	beq.n	8009bfe <aci_gatt_add_service+0x66>
 8009be8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bec:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d101      	bne.n	8009bfa <aci_gatt_add_service+0x62>
 8009bf6:	2311      	movs	r3, #17
 8009bf8:	e002      	b.n	8009c00 <aci_gatt_add_service+0x68>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e000      	b.n	8009c00 <aci_gatt_add_service+0x68>
 8009bfe:	2303      	movs	r3, #3
 8009c00:	f107 0210 	add.w	r2, r7, #16
 8009c04:	4413      	add	r3, r2
 8009c06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c0a:	f107 030c 	add.w	r3, r7, #12
 8009c0e:	2203      	movs	r2, #3
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fc38 	bl	800a488 <Osal_MemSet>
  int index_input = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009c1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c22:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009c26:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009c2a:	7812      	ldrb	r2, [r2, #0]
 8009c2c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c32:	3301      	adds	r3, #1
 8009c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009c38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c3c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d002      	beq.n	8009c4c <aci_gatt_add_service+0xb4>
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d004      	beq.n	8009c54 <aci_gatt_add_service+0xbc>
 8009c4a:	e007      	b.n	8009c5c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009c52:	e005      	b.n	8009c60 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009c5a:	e001      	b.n	8009c60 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009c5c:	2397      	movs	r3, #151	; 0x97
 8009c5e:	e06c      	b.n	8009d3a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009c60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c64:	1c58      	adds	r0, r3, #1
 8009c66:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009c6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	f000 fbf8 	bl	800a468 <Osal_MemCpy>
    index_input += size;
 8009c78:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009c7c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009c80:	4413      	add	r3, r2
 8009c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c8a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009c8e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009c92:	7812      	ldrb	r2, [r2, #0]
 8009c94:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009ca8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009cac:	7812      	ldrb	r2, [r2, #0]
 8009cae:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cbe:	2218      	movs	r2, #24
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fbe0 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cc8:	233f      	movs	r3, #63	; 0x3f
 8009cca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009cce:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009cd2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cd6:	f107 0310 	add.w	r3, r7, #16
 8009cda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ce2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009ce6:	f107 030c 	add.w	r3, r7, #12
 8009cea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009cee:	2303      	movs	r3, #3
 8009cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cf4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fe4e 	bl	800a99c <hci_send_req>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	da01      	bge.n	8009d0a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009d06:	23ff      	movs	r3, #255	; 0xff
 8009d08:	e017      	b.n	8009d3a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009d0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009d18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	e00a      	b.n	8009d3a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009d24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d36:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd90      	pop	{r4, r7, pc}

08009d44 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009d44:	b590      	push	{r4, r7, lr}
 8009d46:	b0d1      	sub	sp, #324	; 0x144
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009d52:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009d56:	600a      	str	r2, [r1, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d5e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009d62:	4622      	mov	r2, r4
 8009d64:	801a      	strh	r2, [r3, #0]
 8009d66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d6a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009d6e:	4602      	mov	r2, r0
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d76:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009d7a:	460a      	mov	r2, r1
 8009d7c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009d7e:	f107 0318 	add.w	r3, r7, #24
 8009d82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009d86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d8a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d00a      	beq.n	8009daa <aci_gatt_add_char+0x66>
 8009d94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d98:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d101      	bne.n	8009da6 <aci_gatt_add_char+0x62>
 8009da2:	2313      	movs	r3, #19
 8009da4:	e002      	b.n	8009dac <aci_gatt_add_char+0x68>
 8009da6:	2303      	movs	r3, #3
 8009da8:	e000      	b.n	8009dac <aci_gatt_add_char+0x68>
 8009daa:	2305      	movs	r3, #5
 8009dac:	f107 0218 	add.w	r2, r7, #24
 8009db0:	4413      	add	r3, r2
 8009db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009db6:	f107 0314 	add.w	r3, r7, #20
 8009dba:	2203      	movs	r2, #3
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f000 fb62 	bl	800a488 <Osal_MemSet>
  int index_input = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009dca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dce:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009dd2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009dd6:	8812      	ldrh	r2, [r2, #0]
 8009dd8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009dda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009dde:	3302      	adds	r3, #2
 8009de0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009de4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009de8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009dec:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009df0:	7812      	ldrb	r2, [r2, #0]
 8009df2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009df4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009df8:	3301      	adds	r3, #1
 8009dfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009dfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009e02:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d002      	beq.n	8009e12 <aci_gatt_add_char+0xce>
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d004      	beq.n	8009e1a <aci_gatt_add_char+0xd6>
 8009e10:	e007      	b.n	8009e22 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009e12:	2302      	movs	r3, #2
 8009e14:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009e18:	e005      	b.n	8009e26 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009e1a:	2310      	movs	r3, #16
 8009e1c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009e20:	e001      	b.n	8009e26 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009e22:	2397      	movs	r3, #151	; 0x97
 8009e24:	e091      	b.n	8009f4a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009e26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009e2a:	1cd8      	adds	r0, r3, #3
 8009e2c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009e30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009e34:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009e38:	6819      	ldr	r1, [r3, #0]
 8009e3a:	f000 fb15 	bl	800a468 <Osal_MemCpy>
    index_input += size;
 8009e3e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009e42:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009e46:	4413      	add	r3, r2
 8009e48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009e4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e50:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009e54:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009e58:	8812      	ldrh	r2, [r2, #0]
 8009e5a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009e5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e60:	3302      	adds	r3, #2
 8009e62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e6a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009e6e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009e70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e74:	3301      	adds	r3, #1
 8009e76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e7e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009e82:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e88:	3301      	adds	r3, #1
 8009e8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e92:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009e96:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009e98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009ea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009ea6:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009eaa:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009eac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009eba:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009ebe:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009ec0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009eca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ece:	2218      	movs	r2, #24
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fad8 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ed8:	233f      	movs	r3, #63	; 0x3f
 8009eda:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009ede:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009ee2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009ee6:	f107 0318 	add.w	r3, r7, #24
 8009eea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009eee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ef2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009ef6:	f107 0314 	add.w	r3, r7, #20
 8009efa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009efe:	2303      	movs	r3, #3
 8009f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 fd46 	bl	800a99c <hci_send_req>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	da01      	bge.n	8009f1a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009f16:	23ff      	movs	r3, #255	; 0xff
 8009f18:	e017      	b.n	8009f4a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009f1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d005      	beq.n	8009f34 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009f28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	e00a      	b.n	8009f4a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009f34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009f46:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd90      	pop	{r4, r7, pc}

08009f54 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009f54:	b5b0      	push	{r4, r5, r7, lr}
 8009f56:	b0cc      	sub	sp, #304	; 0x130
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	4610      	mov	r0, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f66:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f76:	4622      	mov	r2, r4
 8009f78:	801a      	strh	r2, [r3, #0]
 8009f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009f82:	4602      	mov	r2, r0
 8009f84:	701a      	strb	r2, [r3, #0]
 8009f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009f8e:	460a      	mov	r2, r1
 8009f90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009f92:	f107 0310 	add.w	r3, r7, #16
 8009f96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009fb4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009fb8:	8812      	ldrh	r2, [r2, #0]
 8009fba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009fce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009fd2:	8812      	ldrh	r2, [r2, #0]
 8009fd4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fda:	3302      	adds	r3, #2
 8009fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009fe8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a002:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a006:	7812      	ldrb	r2, [r2, #0]
 800a008:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a00a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a00e:	3301      	adds	r3, #1
 800a010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a018:	1d98      	adds	r0, r3, #6
 800a01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a02a:	f000 fa1d 	bl	800a468 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a02e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a032:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a03c:	4413      	add	r3, r2
 800a03e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a042:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a046:	2218      	movs	r2, #24
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fa1c 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a050:	233f      	movs	r3, #63	; 0x3f
 800a052:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a056:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a05a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a05e:	f107 0310 	add.w	r3, r7, #16
 800a062:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a06a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a06e:	f107 030f 	add.w	r3, r7, #15
 800a072:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a076:	2301      	movs	r3, #1
 800a078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a07c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fc8a 	bl	800a99c <hci_send_req>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da01      	bge.n	800a092 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a08e:	23ff      	movs	r3, #255	; 0xff
 800a090:	e004      	b.n	800a09c <aci_gatt_update_char_value+0x148>
  return status;
 800a092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a096:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a09a:	781b      	ldrb	r3, [r3, #0]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bdb0      	pop	{r4, r5, r7, pc}

0800a0a6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b0cc      	sub	sp, #304	; 0x130
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a0be:	4602      	mov	r2, r0
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a0ca:	460a      	mov	r2, r1
 800a0cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a0ce:	f107 0310 	add.w	r3, r7, #16
 800a0d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a0e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0f0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a0f4:	7812      	ldrb	r2, [r2, #0]
 800a0f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a0f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a106:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a10a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a10e:	7812      	ldrb	r2, [r2, #0]
 800a110:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a116:	3301      	adds	r3, #1
 800a118:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a11c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a120:	1c98      	adds	r0, r3, #2
 800a122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a126:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a134:	6819      	ldr	r1, [r3, #0]
 800a136:	f000 f997 	bl	800a468 <Osal_MemCpy>
  index_input += Length;
 800a13a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a13e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a148:	4413      	add	r3, r2
 800a14a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a14e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a152:	2218      	movs	r2, #24
 800a154:	2100      	movs	r1, #0
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f996 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a15c:	233f      	movs	r3, #63	; 0x3f
 800a15e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a162:	230c      	movs	r3, #12
 800a164:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a168:	f107 0310 	add.w	r3, r7, #16
 800a16c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a174:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a178:	f107 030f 	add.w	r3, r7, #15
 800a17c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a186:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 fc05 	bl	800a99c <hci_send_req>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	da01      	bge.n	800a19c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a198:	23ff      	movs	r3, #255	; 0xff
 800a19a:	e004      	b.n	800a1a6 <aci_hal_write_config_data+0x100>
  return status;
 800a19c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1a4:	781b      	ldrb	r3, [r3, #0]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b0cc      	sub	sp, #304	; 0x130
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1bc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a1ca:	460a      	mov	r2, r1
 800a1cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a1ce:	f107 0310 	add.w	r3, r7, #16
 800a1d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a1d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1de:	2200      	movs	r2, #0
 800a1e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a1e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1f0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a1f4:	7812      	ldrb	r2, [r2, #0]
 800a1f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a1f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a206:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a20a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a20e:	7812      	ldrb	r2, [r2, #0]
 800a210:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a216:	3301      	adds	r3, #1
 800a218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a21c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a220:	2218      	movs	r2, #24
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f000 f92f 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a22a:	233f      	movs	r3, #63	; 0x3f
 800a22c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a230:	230f      	movs	r3, #15
 800a232:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a236:	f107 0310 	add.w	r3, r7, #16
 800a23a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a23e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a246:	f107 030f 	add.w	r3, r7, #15
 800a24a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a24e:	2301      	movs	r3, #1
 800a250:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a258:	2100      	movs	r1, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fb9e 	bl	800a99c <hci_send_req>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	da01      	bge.n	800a26a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a266:	23ff      	movs	r3, #255	; 0xff
 800a268:	e004      	b.n	800a274 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a26a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a272:	781b      	ldrb	r3, [r3, #0]
}
 800a274:	4618      	mov	r0, r3
 800a276:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b0cc      	sub	sp, #304	; 0x130
 800a282:	af00      	add	r7, sp, #0
 800a284:	4602      	mov	r2, r0
 800a286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a28e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a290:	f107 0310 	add.w	r3, r7, #16
 800a294:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a29c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a2aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a2b6:	8812      	ldrh	r2, [r2, #0]
 800a2b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a2ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2be:	3302      	adds	r3, #2
 800a2c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2c8:	2218      	movs	r2, #24
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 f8db 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2d2:	233f      	movs	r3, #63	; 0x3f
 800a2d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a2d8:	2318      	movs	r3, #24
 800a2da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a2de:	f107 0310 	add.w	r3, r7, #16
 800a2e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a2e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a2ee:	f107 030f 	add.w	r3, r7, #15
 800a2f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a300:	2100      	movs	r1, #0
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fb4a 	bl	800a99c <hci_send_req>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da01      	bge.n	800a312 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a30e:	23ff      	movs	r3, #255	; 0xff
 800a310:	e004      	b.n	800a31c <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a316:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a31a:	781b      	ldrb	r3, [r3, #0]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b088      	sub	sp, #32
 800a32a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a330:	f107 0308 	add.w	r3, r7, #8
 800a334:	2218      	movs	r2, #24
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 f8a5 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x03;
 800a33e:	2303      	movs	r3, #3
 800a340:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a342:	2303      	movs	r3, #3
 800a344:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a346:	1dfb      	adds	r3, r7, #7
 800a348:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a34a:	2301      	movs	r3, #1
 800a34c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	2100      	movs	r1, #0
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fb21 	bl	800a99c <hci_send_req>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da01      	bge.n	800a364 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a360:	23ff      	movs	r3, #255	; 0xff
 800a362:	e000      	b.n	800a366 <hci_reset+0x40>
  return status;
 800a364:	79fb      	ldrb	r3, [r7, #7]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a36e:	b590      	push	{r4, r7, lr}
 800a370:	b0cd      	sub	sp, #308	; 0x134
 800a372:	af00      	add	r7, sp, #0
 800a374:	4604      	mov	r4, r0
 800a376:	4608      	mov	r0, r1
 800a378:	4611      	mov	r1, r2
 800a37a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a382:	4622      	mov	r2, r4
 800a384:	701a      	strb	r2, [r3, #0]
 800a386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a38e:	4602      	mov	r2, r0
 800a390:	701a      	strb	r2, [r3, #0]
 800a392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a396:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a39a:	460a      	mov	r2, r1
 800a39c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a39e:	f107 0310 	add.w	r3, r7, #16
 800a3a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a3a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a3b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a3c4:	7812      	ldrb	r2, [r2, #0]
 800a3c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a3c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a3d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3da:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a3de:	7812      	ldrb	r2, [r2, #0]
 800a3e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a3e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a3ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3f4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a3fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a400:	3301      	adds	r3, #1
 800a402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a40a:	2218      	movs	r2, #24
 800a40c:	2100      	movs	r1, #0
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f83a 	bl	800a488 <Osal_MemSet>
  rq.ogf = 0x08;
 800a414:	2308      	movs	r3, #8
 800a416:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a41a:	2331      	movs	r3, #49	; 0x31
 800a41c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a420:	f107 0310 	add.w	r3, r7, #16
 800a424:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a42c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a430:	f107 030f 	add.w	r3, r7, #15
 800a434:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a438:	2301      	movs	r3, #1
 800a43a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a43e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a442:	2100      	movs	r1, #0
 800a444:	4618      	mov	r0, r3
 800a446:	f000 faa9 	bl	800a99c <hci_send_req>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	da01      	bge.n	800a454 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a450:	23ff      	movs	r3, #255	; 0xff
 800a452:	e004      	b.n	800a45e <hci_le_set_default_phy+0xf0>
  return status;
 800a454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a458:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a45c:	781b      	ldrb	r3, [r3, #0]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a464:	46bd      	mov	sp, r7
 800a466:	bd90      	pop	{r4, r7, pc}

0800a468 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f002 f8db 	bl	800c634 <memcpy>
 800a47e:	4603      	mov	r3, r0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f002 f8d9 	bl	800c650 <memset>
 800a49e:	4603      	mov	r3, r0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  return;
 800a4ac:	bf00      	nop
}
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	af00      	add	r7, sp, #0
  return;
 800a4ba:	bf00      	nop
}
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
  return;
 800a4c8:	bf00      	nop
}
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	af00      	add	r7, sp, #0
  return;
 800a4d6:	bf00      	nop
}
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	af00      	add	r7, sp, #0
  return;
 800a4e4:	bf00      	nop
}
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	af00      	add	r7, sp, #0
  return;
 800a4f2:	bf00      	nop
}
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
  return;
 800a500:	bf00      	nop
}
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a50a:	b480      	push	{r7}
 800a50c:	af00      	add	r7, sp, #0
  return;
 800a50e:	bf00      	nop
}
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a518:	b480      	push	{r7}
 800a51a:	af00      	add	r7, sp, #0
  return;
 800a51c:	bf00      	nop
}
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a526:	b480      	push	{r7}
 800a528:	af00      	add	r7, sp, #0
  return;
 800a52a:	bf00      	nop
}
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a534:	b480      	push	{r7}
 800a536:	af00      	add	r7, sp, #0
  return;
 800a538:	bf00      	nop
}
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a542:	b480      	push	{r7}
 800a544:	af00      	add	r7, sp, #0
  return;
 800a546:	bf00      	nop
}
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a550:	b480      	push	{r7}
 800a552:	af00      	add	r7, sp, #0
  return;
 800a554:	bf00      	nop
}
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a55e:	b480      	push	{r7}
 800a560:	af00      	add	r7, sp, #0
  return;
 800a562:	bf00      	nop
}
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
  return;
 800a570:	bf00      	nop
}
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a57a:	b480      	push	{r7}
 800a57c:	af00      	add	r7, sp, #0
  return;
 800a57e:	bf00      	nop
}
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a588:	b480      	push	{r7}
 800a58a:	af00      	add	r7, sp, #0
  return;
 800a58c:	bf00      	nop
}
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a59c:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <SVCCTL_Init+0x18>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a5a2:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <SVCCTL_Init+0x1c>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a5a8:	f000 f806 	bl	800a5b8 <SVCCTL_SvcInit>

  return;
 800a5ac:	bf00      	nop
}
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20000910 	.word	0x20000910
 800a5b4:	20000930 	.word	0x20000930

0800a5b8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  BAS_Init();
 800a5bc:	f7ff ff74 	bl	800a4a8 <BAS_Init>

  BLS_Init();
 800a5c0:	f7ff ff79 	bl	800a4b6 <BLS_Init>

  CRS_STM_Init();
 800a5c4:	f7ff ff7e 	bl	800a4c4 <CRS_STM_Init>

  DIS_Init();
 800a5c8:	f7ff ff83 	bl	800a4d2 <DIS_Init>

  EDS_STM_Init();
 800a5cc:	f7ff ff88 	bl	800a4e0 <EDS_STM_Init>

  HIDS_Init();
 800a5d0:	f7ff ff8d 	bl	800a4ee <HIDS_Init>

  HRS_Init();
 800a5d4:	f7ff ff92 	bl	800a4fc <HRS_Init>

  HTS_Init();
 800a5d8:	f7ff ff97 	bl	800a50a <HTS_Init>

  IAS_Init();
 800a5dc:	f7ff ff9c 	bl	800a518 <IAS_Init>

  LLS_Init();
 800a5e0:	f7ff ffa1 	bl	800a526 <LLS_Init>

  TPS_Init();
 800a5e4:	f7ff ffa6 	bl	800a534 <TPS_Init>

  MOTENV_STM_Init();
 800a5e8:	f7ff ffab 	bl	800a542 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a5ec:	f7ff ffb0 	bl	800a550 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a5f0:	f7ff ffb5 	bl	800a55e <ZDD_STM_Init>

  OTAS_STM_Init();
 800a5f4:	f7ff ffba 	bl	800a56c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a5f8:	f7ff ffc6 	bl	800a588 <BVOPUS_STM_Init>

  MESH_Init();
 800a5fc:	f7ff ffbd 	bl	800a57a <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a600:	f001 faaa 	bl	800bb58 <SVCCTL_InitCustomSvc>
  
  return;
 800a604:	bf00      	nop
}
 800a606:	bd80      	pop	{r7, pc}

0800a608 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a610:	4b09      	ldr	r3, [pc, #36]	; (800a638 <SVCCTL_RegisterSvcHandler+0x30>)
 800a612:	7f1b      	ldrb	r3, [r3, #28]
 800a614:	4619      	mov	r1, r3
 800a616:	4a08      	ldr	r2, [pc, #32]	; (800a638 <SVCCTL_RegisterSvcHandler+0x30>)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a61e:	4b06      	ldr	r3, [pc, #24]	; (800a638 <SVCCTL_RegisterSvcHandler+0x30>)
 800a620:	7f1b      	ldrb	r3, [r3, #28]
 800a622:	3301      	adds	r3, #1
 800a624:	b2da      	uxtb	r2, r3
 800a626:	4b04      	ldr	r3, [pc, #16]	; (800a638 <SVCCTL_RegisterSvcHandler+0x30>)
 800a628:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a62a:	bf00      	nop
}
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	20000910 	.word	0x20000910

0800a63c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	3301      	adds	r3, #1
 800a648:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a64a:	2300      	movs	r3, #0
 800a64c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2bff      	cmp	r3, #255	; 0xff
 800a654:	d125      	bne.n	800a6a2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	3302      	adds	r3, #2
 800a65a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	b29b      	uxth	r3, r3
 800a662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a66a:	d118      	bne.n	800a69e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a66c:	2300      	movs	r3, #0
 800a66e:	757b      	strb	r3, [r7, #21]
 800a670:	e00d      	b.n	800a68e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a672:	7d7b      	ldrb	r3, [r7, #21]
 800a674:	4a1a      	ldr	r2, [pc, #104]	; (800a6e0 <SVCCTL_UserEvtRx+0xa4>)
 800a676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	4798      	blx	r3
 800a67e:	4603      	mov	r3, r0
 800a680:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d108      	bne.n	800a69a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a688:	7d7b      	ldrb	r3, [r7, #21]
 800a68a:	3301      	adds	r3, #1
 800a68c:	757b      	strb	r3, [r7, #21]
 800a68e:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <SVCCTL_UserEvtRx+0xa4>)
 800a690:	7f1b      	ldrb	r3, [r3, #28]
 800a692:	7d7a      	ldrb	r2, [r7, #21]
 800a694:	429a      	cmp	r2, r3
 800a696:	d3ec      	bcc.n	800a672 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a698:	e002      	b.n	800a6a0 <SVCCTL_UserEvtRx+0x64>
              break;
 800a69a:	bf00      	nop
          break;
 800a69c:	e000      	b.n	800a6a0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a69e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a6a0:	e000      	b.n	800a6a4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a6a2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d00f      	beq.n	800a6ca <SVCCTL_UserEvtRx+0x8e>
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	dc10      	bgt.n	800a6d0 <SVCCTL_UserEvtRx+0x94>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <SVCCTL_UserEvtRx+0x7c>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d006      	beq.n	800a6c4 <SVCCTL_UserEvtRx+0x88>
 800a6b6:	e00b      	b.n	800a6d0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 ff7b 	bl	800b5b4 <SVCCTL_App_Notification>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	75bb      	strb	r3, [r7, #22]
      break;
 800a6c2:	e008      	b.n	800a6d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	75bb      	strb	r3, [r7, #22]
      break;
 800a6c8:	e005      	b.n	800a6d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	75bb      	strb	r3, [r7, #22]
      break;
 800a6ce:	e002      	b.n	800a6d6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	75bb      	strb	r3, [r7, #22]
      break;
 800a6d4:	bf00      	nop
  }

  return (return_status);
 800a6d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3718      	adds	r7, #24
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20000910 	.word	0x20000910

0800a6e4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	212e      	movs	r1, #46	; 0x2e
 800a6fc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a700:	f000 fae2 	bl	800acc8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	330b      	adds	r3, #11
 800a708:	78db      	ldrb	r3, [r3, #3]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3720      	adds	r7, #32
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b088      	sub	sp, #32
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a71a:	f107 030c 	add.w	r3, r7, #12
 800a71e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	210f      	movs	r1, #15
 800a72a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a72e:	f000 facb 	bl	800acc8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	330b      	adds	r3, #11
 800a736:	78db      	ldrb	r3, [r3, #3]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a748:	f107 030c 	add.w	r3, r7, #12
 800a74c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	2110      	movs	r1, #16
 800a754:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a758:	f000 fab6 	bl	800acc8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	330b      	adds	r3, #11
 800a760:	78db      	ldrb	r3, [r3, #3]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b08b      	sub	sp, #44	; 0x2c
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a788:	2300      	movs	r3, #0
 800a78a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a794:	4b4a      	ldr	r3, [pc, #296]	; (800a8c0 <SHCI_GetWirelessFwInfo+0x154>)
 800a796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a79c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a7a6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a44      	ldr	r2, [pc, #272]	; (800a8c4 <SHCI_GetWirelessFwInfo+0x158>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d10f      	bne.n	800a7d8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	617b      	str	r3, [r7, #20]
 800a7d6:	e01a      	b.n	800a80e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a7e0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a7e4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	0e1b      	lsrs	r3, r3, #24
 800a812:	b2da      	uxtb	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	0c1b      	lsrs	r3, r3, #16
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	0a1b      	lsrs	r3, r3, #8
 800a826:	b2da      	uxtb	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	091b      	lsrs	r3, r3, #4
 800a830:	b2db      	uxtb	r3, r3
 800a832:	f003 030f 	and.w	r3, r3, #15
 800a836:	b2da      	uxtb	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	f003 030f 	and.w	r3, r3, #15
 800a844:	b2da      	uxtb	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	0e1b      	lsrs	r3, r3, #24
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	0c1b      	lsrs	r3, r3, #16
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	0a1b      	lsrs	r3, r3, #8
 800a862:	b2da      	uxtb	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	b2da      	uxtb	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	0e1b      	lsrs	r3, r3, #24
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	0c1b      	lsrs	r3, r3, #16
 800a886:	b2da      	uxtb	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	b2da      	uxtb	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	0e1b      	lsrs	r3, r3, #24
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	0c1b      	lsrs	r3, r3, #16
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	372c      	adds	r7, #44	; 0x2c
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	58004000 	.word	0x58004000
 800a8c4:	a94656b9 	.word	0xa94656b9

0800a8c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	4a08      	ldr	r2, [pc, #32]	; (800a8f8 <hci_init+0x30>)
 800a8d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a8da:	4a08      	ldr	r2, [pc, #32]	; (800a8fc <hci_init+0x34>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a8e0:	4806      	ldr	r0, [pc, #24]	; (800a8fc <hci_init+0x34>)
 800a8e2:	f000 f973 	bl	800abcc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f8d4 	bl	800aa98 <TlInit>

  return;
 800a8f0:	bf00      	nop
}
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	200010fc 	.word	0x200010fc
 800a8fc:	200010d4 	.word	0x200010d4

0800a900 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a906:	4822      	ldr	r0, [pc, #136]	; (800a990 <hci_user_evt_proc+0x90>)
 800a908:	f000 fd28 	bl	800b35c <LST_is_empty>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d12b      	bne.n	800a96a <hci_user_evt_proc+0x6a>
 800a912:	4b20      	ldr	r3, [pc, #128]	; (800a994 <hci_user_evt_proc+0x94>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d027      	beq.n	800a96a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a91a:	f107 030c 	add.w	r3, r7, #12
 800a91e:	4619      	mov	r1, r3
 800a920:	481b      	ldr	r0, [pc, #108]	; (800a990 <hci_user_evt_proc+0x90>)
 800a922:	f000 fdaa 	bl	800b47a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a926:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <hci_user_evt_proc+0x98>)
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00c      	beq.n	800a948 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a932:	2301      	movs	r3, #1
 800a934:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a936:	4b18      	ldr	r3, [pc, #96]	; (800a998 <hci_user_evt_proc+0x98>)
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	1d3a      	adds	r2, r7, #4
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a940:	793a      	ldrb	r2, [r7, #4]
 800a942:	4b14      	ldr	r3, [pc, #80]	; (800a994 <hci_user_evt_proc+0x94>)
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e002      	b.n	800a94e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <hci_user_evt_proc+0x94>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a94e:	4b11      	ldr	r3, [pc, #68]	; (800a994 <hci_user_evt_proc+0x94>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fc03 	bl	800b164 <TL_MM_EvtDone>
 800a95e:	e004      	b.n	800a96a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4619      	mov	r1, r3
 800a964:	480a      	ldr	r0, [pc, #40]	; (800a990 <hci_user_evt_proc+0x90>)
 800a966:	f000 fd1b 	bl	800b3a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a96a:	4809      	ldr	r0, [pc, #36]	; (800a990 <hci_user_evt_proc+0x90>)
 800a96c:	f000 fcf6 	bl	800b35c <LST_is_empty>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d107      	bne.n	800a986 <hci_user_evt_proc+0x86>
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <hci_user_evt_proc+0x94>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a97e:	4804      	ldr	r0, [pc, #16]	; (800a990 <hci_user_evt_proc+0x90>)
 800a980:	f001 f830 	bl	800b9e4 <hci_notify_asynch_evt>
  }


  return;
 800a984:	bf00      	nop
 800a986:	bf00      	nop
}
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20000938 	.word	0x20000938
 800a994:	20000944 	.word	0x20000944
 800a998:	200010d4 	.word	0x200010d4

0800a99c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	f000 f8cb 	bl	800ab44 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	885b      	ldrh	r3, [r3, #2]
 800a9b6:	b21b      	sxth	r3, r3
 800a9b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9bc:	b21a      	sxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	029b      	lsls	r3, r3, #10
 800a9c4:	b21b      	sxth	r3, r3
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	b21b      	sxth	r3, r3
 800a9ca:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	b2d9      	uxtb	r1, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689a      	ldr	r2, [r3, #8]
 800a9d6:	8bbb      	ldrh	r3, [r7, #28]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 f88d 	bl	800aaf8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a9de:	e04e      	b.n	800aa7e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a9e0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a9e4:	f001 f815 	bl	800ba12 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a9e8:	e043      	b.n	800aa72 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4828      	ldr	r0, [pc, #160]	; (800aa94 <hci_send_req+0xf8>)
 800a9f2:	f000 fd42 	bl	800b47a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	7a5b      	ldrb	r3, [r3, #9]
 800a9fa:	2b0f      	cmp	r3, #15
 800a9fc:	d114      	bne.n	800aa28 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	330b      	adds	r3, #11
 800aa02:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	885b      	ldrh	r3, [r3, #2]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	8bba      	ldrh	r2, [r7, #28]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d104      	bne.n	800aa1a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	7812      	ldrb	r2, [r2, #0]
 800aa18:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d027      	beq.n	800aa72 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aa22:	2301      	movs	r3, #1
 800aa24:	77fb      	strb	r3, [r7, #31]
 800aa26:	e024      	b.n	800aa72 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	330b      	adds	r3, #11
 800aa2c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	8bba      	ldrh	r2, [r7, #28]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d114      	bne.n	800aa66 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	7a9b      	ldrb	r3, [r3, #10]
 800aa40:	3b03      	subs	r3, #3
 800aa42:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	695a      	ldr	r2, [r3, #20]
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	bfa8      	it	ge
 800aa4e:	461a      	movge	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6918      	ldr	r0, [r3, #16]
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	1cd9      	adds	r1, r3, #3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	461a      	mov	r2, r3
 800aa62:	f001 fde7 	bl	800c634 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aa72:	4808      	ldr	r0, [pc, #32]	; (800aa94 <hci_send_req+0xf8>)
 800aa74:	f000 fc72 	bl	800b35c <LST_is_empty>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0b5      	beq.n	800a9ea <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800aa7e:	7ffb      	ldrb	r3, [r7, #31]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0ad      	beq.n	800a9e0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800aa84:	2001      	movs	r0, #1
 800aa86:	f000 f85d 	bl	800ab44 <NotifyCmdStatus>

  return 0;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3720      	adds	r7, #32
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	200010f4 	.word	0x200010f4

0800aa98 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800aaa0:	480f      	ldr	r0, [pc, #60]	; (800aae0 <TlInit+0x48>)
 800aaa2:	f000 fc4b 	bl	800b33c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800aaa6:	4a0f      	ldr	r2, [pc, #60]	; (800aae4 <TlInit+0x4c>)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800aaac:	480e      	ldr	r0, [pc, #56]	; (800aae8 <TlInit+0x50>)
 800aaae:	f000 fc45 	bl	800b33c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aab2:	4b0e      	ldr	r3, [pc, #56]	; (800aaec <TlInit+0x54>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800aab8:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <TlInit+0x58>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00a      	beq.n	800aad6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800aac4:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <TlInit+0x5c>)
 800aac6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800aac8:	4b09      	ldr	r3, [pc, #36]	; (800aaf0 <TlInit+0x58>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f107 0208 	add.w	r2, r7, #8
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
  }

  return;
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop
}
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	200010f4 	.word	0x200010f4
 800aae4:	20000940 	.word	0x20000940
 800aae8:	20000938 	.word	0x20000938
 800aaec:	20000944 	.word	0x20000944
 800aaf0:	200010d4 	.word	0x200010d4
 800aaf4:	0800ab85 	.word	0x0800ab85

0800aaf8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4603      	mov	r3, r0
 800ab00:	603a      	str	r2, [r7, #0]
 800ab02:	80fb      	strh	r3, [r7, #6]
 800ab04:	460b      	mov	r3, r1
 800ab06:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ab08:	4b0c      	ldr	r3, [pc, #48]	; (800ab3c <SendCmd+0x44>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	88fa      	ldrh	r2, [r7, #6]
 800ab0e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ab12:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <SendCmd+0x44>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	797a      	ldrb	r2, [r7, #5]
 800ab18:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ab1a:	4b08      	ldr	r3, [pc, #32]	; (800ab3c <SendCmd+0x44>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	330c      	adds	r3, #12
 800ab20:	797a      	ldrb	r2, [r7, #5]
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f001 fd85 	bl	800c634 <memcpy>

  hciContext.io.Send(0,0);
 800ab2a:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <SendCmd+0x48>)
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	2000      	movs	r0, #0
 800ab32:	4798      	blx	r3

  return;
 800ab34:	bf00      	nop
}
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20000940 	.word	0x20000940
 800ab40:	200010d4 	.word	0x200010d4

0800ab44 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d108      	bne.n	800ab66 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <NotifyCmdStatus+0x3c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00d      	beq.n	800ab78 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800ab5c:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <NotifyCmdStatus+0x3c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800ab64:	e008      	b.n	800ab78 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800ab66:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <NotifyCmdStatus+0x3c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800ab6e:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <NotifyCmdStatus+0x3c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2001      	movs	r0, #1
 800ab74:	4798      	blx	r3
  return;
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
}
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	200010fc 	.word	0x200010fc

0800ab84 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	7a5b      	ldrb	r3, [r3, #9]
 800ab90:	2b0f      	cmp	r3, #15
 800ab92:	d003      	beq.n	800ab9c <TlEvtReceived+0x18>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7a5b      	ldrb	r3, [r3, #9]
 800ab98:	2b0e      	cmp	r3, #14
 800ab9a:	d107      	bne.n	800abac <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	4809      	ldr	r0, [pc, #36]	; (800abc4 <TlEvtReceived+0x40>)
 800aba0:	f000 fc24 	bl	800b3ec <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800aba4:	2000      	movs	r0, #0
 800aba6:	f000 ff29 	bl	800b9fc <hci_cmd_resp_release>
 800abaa:	e006      	b.n	800abba <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	4806      	ldr	r0, [pc, #24]	; (800abc8 <TlEvtReceived+0x44>)
 800abb0:	f000 fc1c 	bl	800b3ec <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800abb4:	4804      	ldr	r0, [pc, #16]	; (800abc8 <TlEvtReceived+0x44>)
 800abb6:	f000 ff15 	bl	800b9e4 <hci_notify_asynch_evt>
  }

  return;
 800abba:	bf00      	nop
}
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	200010f4 	.word	0x200010f4
 800abc8:	20000938 	.word	0x20000938

0800abcc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a05      	ldr	r2, [pc, #20]	; (800abec <hci_register_io_bus+0x20>)
 800abd8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a04      	ldr	r2, [pc, #16]	; (800abf0 <hci_register_io_bus+0x24>)
 800abde:	611a      	str	r2, [r3, #16]

  return;
 800abe0:	bf00      	nop
}
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr
 800abec:	0800aedd 	.word	0x0800aedd
 800abf0:	0800af45 	.word	0x0800af45

0800abf4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	4a08      	ldr	r2, [pc, #32]	; (800ac24 <shci_init+0x30>)
 800ac04:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800ac06:	4a08      	ldr	r2, [pc, #32]	; (800ac28 <shci_init+0x34>)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800ac0c:	4806      	ldr	r0, [pc, #24]	; (800ac28 <shci_init+0x34>)
 800ac0e:	f000 f911 	bl	800ae34 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f894 	bl	800ad44 <TlInit>

  return;
 800ac1c:	bf00      	nop
}
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20001120 	.word	0x20001120
 800ac28:	20001100 	.word	0x20001100

0800ac2c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ac32:	4822      	ldr	r0, [pc, #136]	; (800acbc <shci_user_evt_proc+0x90>)
 800ac34:	f000 fb92 	bl	800b35c <LST_is_empty>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d12b      	bne.n	800ac96 <shci_user_evt_proc+0x6a>
 800ac3e:	4b20      	ldr	r3, [pc, #128]	; (800acc0 <shci_user_evt_proc+0x94>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d027      	beq.n	800ac96 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ac46:	f107 030c 	add.w	r3, r7, #12
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	481b      	ldr	r0, [pc, #108]	; (800acbc <shci_user_evt_proc+0x90>)
 800ac4e:	f000 fc14 	bl	800b47a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800ac52:	4b1c      	ldr	r3, [pc, #112]	; (800acc4 <shci_user_evt_proc+0x98>)
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00c      	beq.n	800ac74 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ac62:	4b18      	ldr	r3, [pc, #96]	; (800acc4 <shci_user_evt_proc+0x98>)
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	1d3a      	adds	r2, r7, #4
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800ac6c:	793a      	ldrb	r2, [r7, #4]
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <shci_user_evt_proc+0x94>)
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	e002      	b.n	800ac7a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ac74:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <shci_user_evt_proc+0x94>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800ac7a:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <shci_user_evt_proc+0x94>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fa6d 	bl	800b164 <TL_MM_EvtDone>
 800ac8a:	e004      	b.n	800ac96 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	480a      	ldr	r0, [pc, #40]	; (800acbc <shci_user_evt_proc+0x90>)
 800ac92:	f000 fb85 	bl	800b3a0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ac96:	4809      	ldr	r0, [pc, #36]	; (800acbc <shci_user_evt_proc+0x90>)
 800ac98:	f000 fb60 	bl	800b35c <LST_is_empty>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d107      	bne.n	800acb2 <shci_user_evt_proc+0x86>
 800aca2:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <shci_user_evt_proc+0x94>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800acaa:	4804      	ldr	r0, [pc, #16]	; (800acbc <shci_user_evt_proc+0x90>)
 800acac:	f7f6 ff46 	bl	8001b3c <shci_notify_asynch_evt>
  }


  return;
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
}
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20000948 	.word	0x20000948
 800acc0:	20000958 	.word	0x20000958
 800acc4:	20001100 	.word	0x20001100

0800acc8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	60ba      	str	r2, [r7, #8]
 800acd0:	607b      	str	r3, [r7, #4]
 800acd2:	4603      	mov	r3, r0
 800acd4:	81fb      	strh	r3, [r7, #14]
 800acd6:	460b      	mov	r3, r1
 800acd8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800acda:	2000      	movs	r0, #0
 800acdc:	f000 f864 	bl	800ada8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ace0:	4b16      	ldr	r3, [pc, #88]	; (800ad3c <shci_send+0x74>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	89fa      	ldrh	r2, [r7, #14]
 800ace6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <shci_send+0x74>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	7b7a      	ldrb	r2, [r7, #13]
 800acf0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800acf2:	4b12      	ldr	r3, [pc, #72]	; (800ad3c <shci_send+0x74>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	330c      	adds	r3, #12
 800acf8:	7b7a      	ldrb	r2, [r7, #13]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f001 fc99 	bl	800c634 <memcpy>

  shciContext.io.Send(0,0);
 800ad02:	4b0f      	ldr	r3, [pc, #60]	; (800ad40 <shci_send+0x78>)
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	2100      	movs	r1, #0
 800ad08:	2000      	movs	r0, #0
 800ad0a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ad0c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ad10:	f7f6 ff2b 	bl	8001b6a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f103 0008 	add.w	r0, r3, #8
 800ad1a:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <shci_send+0x74>)
 800ad1c:	6819      	ldr	r1, [r3, #0]
 800ad1e:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <shci_send+0x74>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	789b      	ldrb	r3, [r3, #2]
 800ad24:	3303      	adds	r3, #3
 800ad26:	461a      	mov	r2, r3
 800ad28:	f001 fc84 	bl	800c634 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	f000 f83b 	bl	800ada8 <Cmd_SetStatus>

  return;
 800ad32:	bf00      	nop
}
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000954 	.word	0x20000954
 800ad40:	20001100 	.word	0x20001100

0800ad44 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ad4c:	4a10      	ldr	r2, [pc, #64]	; (800ad90 <TlInit+0x4c>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ad52:	4810      	ldr	r0, [pc, #64]	; (800ad94 <TlInit+0x50>)
 800ad54:	f000 faf2 	bl	800b33c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ad58:	2001      	movs	r0, #1
 800ad5a:	f000 f825 	bl	800ada8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <TlInit+0x54>)
 800ad60:	2201      	movs	r2, #1
 800ad62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ad64:	4b0d      	ldr	r3, [pc, #52]	; (800ad9c <TlInit+0x58>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00c      	beq.n	800ad86 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ad70:	4b0b      	ldr	r3, [pc, #44]	; (800ada0 <TlInit+0x5c>)
 800ad72:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ad74:	4b0b      	ldr	r3, [pc, #44]	; (800ada4 <TlInit+0x60>)
 800ad76:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ad78:	4b08      	ldr	r3, [pc, #32]	; (800ad9c <TlInit+0x58>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f107 020c 	add.w	r2, r7, #12
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
  }

  return;
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop
}
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20000954 	.word	0x20000954
 800ad94:	20000948 	.word	0x20000948
 800ad98:	20000958 	.word	0x20000958
 800ad9c:	20001100 	.word	0x20001100
 800ada0:	0800adf9 	.word	0x0800adf9
 800ada4:	0800ae11 	.word	0x0800ae11

0800ada8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800adb2:	79fb      	ldrb	r3, [r7, #7]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800adb8:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <Cmd_SetStatus+0x48>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d003      	beq.n	800adc8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <Cmd_SetStatus+0x48>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2000      	movs	r0, #0
 800adc6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <Cmd_SetStatus+0x4c>)
 800adca:	2200      	movs	r2, #0
 800adcc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800adce:	e00b      	b.n	800ade8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800add0:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <Cmd_SetStatus+0x4c>)
 800add2:	2201      	movs	r2, #1
 800add4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800add6:	4b06      	ldr	r3, [pc, #24]	; (800adf0 <Cmd_SetStatus+0x48>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d004      	beq.n	800ade8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800adde:	4b04      	ldr	r3, [pc, #16]	; (800adf0 <Cmd_SetStatus+0x48>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2001      	movs	r0, #1
 800ade4:	4798      	blx	r3
  return;
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
}
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20001120 	.word	0x20001120
 800adf4:	20000950 	.word	0x20000950

0800adf8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ae00:	2000      	movs	r0, #0
 800ae02:	f7f6 fea7 	bl	8001b54 <shci_cmd_resp_release>

  return;
 800ae06:	bf00      	nop
}
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4805      	ldr	r0, [pc, #20]	; (800ae30 <TlUserEvtReceived+0x20>)
 800ae1c:	f000 fae6 	bl	800b3ec <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ae20:	4803      	ldr	r0, [pc, #12]	; (800ae30 <TlUserEvtReceived+0x20>)
 800ae22:	f7f6 fe8b 	bl	8001b3c <shci_notify_asynch_evt>

  return;
 800ae26:	bf00      	nop
}
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20000948 	.word	0x20000948

0800ae34 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a05      	ldr	r2, [pc, #20]	; (800ae54 <shci_register_io_bus+0x20>)
 800ae40:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a04      	ldr	r2, [pc, #16]	; (800ae58 <shci_register_io_bus+0x24>)
 800ae46:	611a      	str	r2, [r3, #16]

  return;
 800ae48:	bf00      	nop
}
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	0800aff1 	.word	0x0800aff1
 800ae58:	0800b045 	.word	0x0800b045

0800ae5c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ae60:	f001 f86c 	bl	800bf3c <HW_IPCC_Enable>

  return;
 800ae64:	bf00      	nop
}
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <TL_Init>:


void TL_Init( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <TL_Init+0x48>)
 800ae6e:	4a11      	ldr	r2, [pc, #68]	; (800aeb4 <TL_Init+0x4c>)
 800ae70:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ae72:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <TL_Init+0x48>)
 800ae74:	4a10      	ldr	r2, [pc, #64]	; (800aeb8 <TL_Init+0x50>)
 800ae76:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <TL_Init+0x48>)
 800ae7a:	4a10      	ldr	r2, [pc, #64]	; (800aebc <TL_Init+0x54>)
 800ae7c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <TL_Init+0x48>)
 800ae80:	4a0f      	ldr	r2, [pc, #60]	; (800aec0 <TL_Init+0x58>)
 800ae82:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ae84:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <TL_Init+0x48>)
 800ae86:	4a0f      	ldr	r2, [pc, #60]	; (800aec4 <TL_Init+0x5c>)
 800ae88:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ae8a:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <TL_Init+0x48>)
 800ae8c:	4a0e      	ldr	r2, [pc, #56]	; (800aec8 <TL_Init+0x60>)
 800ae8e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <TL_Init+0x48>)
 800ae92:	4a0e      	ldr	r2, [pc, #56]	; (800aecc <TL_Init+0x64>)
 800ae94:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ae96:	4b06      	ldr	r3, [pc, #24]	; (800aeb0 <TL_Init+0x48>)
 800ae98:	4a0d      	ldr	r2, [pc, #52]	; (800aed0 <TL_Init+0x68>)
 800ae9a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ae9c:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <TL_Init+0x48>)
 800ae9e:	4a0d      	ldr	r2, [pc, #52]	; (800aed4 <TL_Init+0x6c>)
 800aea0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <TL_Init+0x48>)
 800aea4:	4a0c      	ldr	r2, [pc, #48]	; (800aed8 <TL_Init+0x70>)
 800aea6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800aea8:	f001 f85c 	bl	800bf64 <HW_IPCC_Init>

  return;
 800aeac:	bf00      	nop
}
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20030000 	.word	0x20030000
 800aeb4:	20030028 	.word	0x20030028
 800aeb8:	20030048 	.word	0x20030048
 800aebc:	20030058 	.word	0x20030058
 800aec0:	20030068 	.word	0x20030068
 800aec4:	20030070 	.word	0x20030070
 800aec8:	20030078 	.word	0x20030078
 800aecc:	20030080 	.word	0x20030080
 800aed0:	2003009c 	.word	0x2003009c
 800aed4:	200300a0 	.word	0x200300a0
 800aed8:	200300ac 	.word	0x200300ac

0800aedc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800aee8:	4811      	ldr	r0, [pc, #68]	; (800af30 <TL_BLE_Init+0x54>)
 800aeea:	f000 fa27 	bl	800b33c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800aeee:	4b11      	ldr	r3, [pc, #68]	; (800af34 <TL_BLE_Init+0x58>)
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	68da      	ldr	r2, [r3, #12]
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	4a0c      	ldr	r2, [pc, #48]	; (800af38 <TL_BLE_Init+0x5c>)
 800af08:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	4a08      	ldr	r2, [pc, #32]	; (800af30 <TL_BLE_Init+0x54>)
 800af0e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800af10:	f001 f83e 	bl	800bf90 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a08      	ldr	r2, [pc, #32]	; (800af3c <TL_BLE_Init+0x60>)
 800af1a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	4a07      	ldr	r2, [pc, #28]	; (800af40 <TL_BLE_Init+0x64>)
 800af22:	6013      	str	r3, [r2, #0]

  return 0;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200300c8 	.word	0x200300c8
 800af34:	20030000 	.word	0x20030000
 800af38:	20000900 	.word	0x20000900
 800af3c:	2000112c 	.word	0x2000112c
 800af40:	20001130 	.word	0x20001130

0800af44 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800af50:	4b09      	ldr	r3, [pc, #36]	; (800af78 <TL_BLE_SendCmd+0x34>)
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2201      	movs	r2, #1
 800af58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800af5a:	4b07      	ldr	r3, [pc, #28]	; (800af78 <TL_BLE_SendCmd+0x34>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4619      	mov	r1, r3
 800af62:	2001      	movs	r0, #1
 800af64:	f000 f96c 	bl	800b240 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800af68:	f001 f81c 	bl	800bfa4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20030000 	.word	0x20030000

0800af7c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800af82:	e01c      	b.n	800afbe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800af84:	1d3b      	adds	r3, r7, #4
 800af86:	4619      	mov	r1, r3
 800af88:	4812      	ldr	r0, [pc, #72]	; (800afd4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800af8a:	f000 fa76 	bl	800b47a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	7a5b      	ldrb	r3, [r3, #9]
 800af92:	2b0f      	cmp	r3, #15
 800af94:	d003      	beq.n	800af9e <HW_IPCC_BLE_RxEvtNot+0x22>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7a5b      	ldrb	r3, [r3, #9]
 800af9a:	2b0e      	cmp	r3, #14
 800af9c:	d105      	bne.n	800afaa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4619      	mov	r1, r3
 800afa2:	2002      	movs	r0, #2
 800afa4:	f000 f94c 	bl	800b240 <OutputDbgTrace>
 800afa8:	e004      	b.n	800afb4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4619      	mov	r1, r3
 800afae:	2003      	movs	r0, #3
 800afb0:	f000 f946 	bl	800b240 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800afb4:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	4610      	mov	r0, r2
 800afbc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800afbe:	4805      	ldr	r0, [pc, #20]	; (800afd4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800afc0:	f000 f9cc 	bl	800b35c <LST_is_empty>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0dc      	beq.n	800af84 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800afca:	bf00      	nop
}
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200300c8 	.word	0x200300c8
 800afd8:	2000112c 	.word	0x2000112c

0800afdc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4798      	blx	r3

  return;
 800afe6:	bf00      	nop
}
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20001130 	.word	0x20001130

0800aff0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800affc:	480d      	ldr	r0, [pc, #52]	; (800b034 <TL_SYS_Init+0x44>)
 800affe:	f000 f99d 	bl	800b33c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b002:	4b0d      	ldr	r3, [pc, #52]	; (800b038 <TL_SYS_Init+0x48>)
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4a08      	ldr	r2, [pc, #32]	; (800b034 <TL_SYS_Init+0x44>)
 800b014:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b016:	f000 ffe7 	bl	800bfe8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a07      	ldr	r2, [pc, #28]	; (800b03c <TL_SYS_Init+0x4c>)
 800b020:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	4a06      	ldr	r2, [pc, #24]	; (800b040 <TL_SYS_Init+0x50>)
 800b028:	6013      	str	r3, [r2, #0]

  return 0;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	200300d0 	.word	0x200300d0
 800b038:	20030000 	.word	0x20030000
 800b03c:	20001134 	.word	0x20001134
 800b040:	20001138 	.word	0x20001138

0800b044 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b050:	4b09      	ldr	r3, [pc, #36]	; (800b078 <TL_SYS_SendCmd+0x34>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2210      	movs	r2, #16
 800b058:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <TL_SYS_SendCmd+0x34>)
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4619      	mov	r1, r3
 800b062:	2004      	movs	r0, #4
 800b064:	f000 f8ec 	bl	800b240 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b068:	f000 ffc8 	bl	800bffc <HW_IPCC_SYS_SendCmd>

  return 0;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20030000 	.word	0x20030000

0800b07c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b080:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4619      	mov	r1, r3
 800b088:	2005      	movs	r0, #5
 800b08a:	f000 f8d9 	bl	800b240 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b08e:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a03      	ldr	r2, [pc, #12]	; (800b0a0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b094:	68d2      	ldr	r2, [r2, #12]
 800b096:	6812      	ldr	r2, [r2, #0]
 800b098:	4610      	mov	r0, r2
 800b09a:	4798      	blx	r3

  return;
 800b09c:	bf00      	nop
}
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20030000 	.word	0x20030000
 800b0a4:	20001134 	.word	0x20001134

0800b0a8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b0ae:	e00e      	b.n	800b0ce <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b0b0:	1d3b      	adds	r3, r7, #4
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	480b      	ldr	r0, [pc, #44]	; (800b0e4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b0b6:	f000 f9e0 	bl	800b47a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	2006      	movs	r0, #6
 800b0c0:	f000 f8be 	bl	800b240 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b0c4:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <HW_IPCC_SYS_EvtNot+0x40>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b0ce:	4805      	ldr	r0, [pc, #20]	; (800b0e4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b0d0:	f000 f944 	bl	800b35c <LST_is_empty>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0ea      	beq.n	800b0b0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b0da:	bf00      	nop
}
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	200300d0 	.word	0x200300d0
 800b0e8:	20001138 	.word	0x20001138

0800b0ec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b0f4:	4817      	ldr	r0, [pc, #92]	; (800b154 <TL_MM_Init+0x68>)
 800b0f6:	f000 f921 	bl	800b33c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b0fa:	4817      	ldr	r0, [pc, #92]	; (800b158 <TL_MM_Init+0x6c>)
 800b0fc:	f000 f91e 	bl	800b33c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b100:	4b16      	ldr	r3, [pc, #88]	; (800b15c <TL_MM_Init+0x70>)
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	4a16      	ldr	r2, [pc, #88]	; (800b160 <TL_MM_Init+0x74>)
 800b106:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b108:	4b15      	ldr	r3, [pc, #84]	; (800b160 <TL_MM_Init+0x74>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6892      	ldr	r2, [r2, #8]
 800b110:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b112:	4b13      	ldr	r3, [pc, #76]	; (800b160 <TL_MM_Init+0x74>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	68d2      	ldr	r2, [r2, #12]
 800b11a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b11c:	4b10      	ldr	r3, [pc, #64]	; (800b160 <TL_MM_Init+0x74>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a0c      	ldr	r2, [pc, #48]	; (800b154 <TL_MM_Init+0x68>)
 800b122:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b124:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <TL_MM_Init+0x74>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	6812      	ldr	r2, [r2, #0]
 800b12c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b12e:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <TL_MM_Init+0x74>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6852      	ldr	r2, [r2, #4]
 800b136:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b138:	4b09      	ldr	r3, [pc, #36]	; (800b160 <TL_MM_Init+0x74>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6912      	ldr	r2, [r2, #16]
 800b140:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <TL_MM_Init+0x74>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	6952      	ldr	r2, [r2, #20]
 800b14a:	619a      	str	r2, [r3, #24]

  return;
 800b14c:	bf00      	nop
}
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	200300b8 	.word	0x200300b8
 800b158:	20001124 	.word	0x20001124
 800b15c:	20030000 	.word	0x20030000
 800b160:	2000113c 	.word	0x2000113c

0800b164 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	4807      	ldr	r0, [pc, #28]	; (800b18c <TL_MM_EvtDone+0x28>)
 800b170:	f000 f93c 	bl	800b3ec <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	2000      	movs	r0, #0
 800b178:	f000 f862 	bl	800b240 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b17c:	4804      	ldr	r0, [pc, #16]	; (800b190 <TL_MM_EvtDone+0x2c>)
 800b17e:	f000 ff63 	bl	800c048 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b182:	bf00      	nop
}
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20001124 	.word	0x20001124
 800b190:	0800b195 	.word	0x0800b195

0800b194 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b19a:	e00c      	b.n	800b1b6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b19c:	1d3b      	adds	r3, r7, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	480a      	ldr	r0, [pc, #40]	; (800b1cc <SendFreeBuf+0x38>)
 800b1a2:	f000 f96a 	bl	800b47a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b1a6:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <SendFreeBuf+0x3c>)
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f91b 	bl	800b3ec <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b1b6:	4805      	ldr	r0, [pc, #20]	; (800b1cc <SendFreeBuf+0x38>)
 800b1b8:	f000 f8d0 	bl	800b35c <LST_is_empty>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0ec      	beq.n	800b19c <SendFreeBuf+0x8>
  }

  return;
 800b1c2:	bf00      	nop
}
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	20001124 	.word	0x20001124
 800b1d0:	20030000 	.word	0x20030000

0800b1d4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <TL_TRACES_Init+0x1c>)
 800b1da:	f000 f8af 	bl	800b33c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <TL_TRACES_Init+0x20>)
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	4a03      	ldr	r2, [pc, #12]	; (800b1f0 <TL_TRACES_Init+0x1c>)
 800b1e4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b1e6:	f000 ff65 	bl	800c0b4 <HW_IPCC_TRACES_Init>

  return;
 800b1ea:	bf00      	nop
}
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200300c0 	.word	0x200300c0
 800b1f4:	20030000 	.word	0x20030000

0800b1f8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b1fe:	e008      	b.n	800b212 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b200:	1d3b      	adds	r3, r7, #4
 800b202:	4619      	mov	r1, r3
 800b204:	4808      	ldr	r0, [pc, #32]	; (800b228 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b206:	f000 f938 	bl	800b47a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 f80d 	bl	800b22c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b212:	4805      	ldr	r0, [pc, #20]	; (800b228 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b214:	f000 f8a2 	bl	800b35c <LST_is_empty>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0f0      	beq.n	800b200 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b21e:	bf00      	nop
}
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	200300c0 	.word	0x200300c0

0800b22c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	6039      	str	r1, [r7, #0]
 800b24a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	2b06      	cmp	r3, #6
 800b250:	d845      	bhi.n	800b2de <OutputDbgTrace+0x9e>
 800b252:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <OutputDbgTrace+0x18>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b275 	.word	0x0800b275
 800b25c:	0800b299 	.word	0x0800b299
 800b260:	0800b29f 	.word	0x0800b29f
 800b264:	0800b2b3 	.word	0x0800b2b3
 800b268:	0800b2bf 	.word	0x0800b2bf
 800b26c:	0800b2c5 	.word	0x0800b2c5
 800b270:	0800b2d3 	.word	0x0800b2d3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	7a5b      	ldrb	r3, [r3, #9]
 800b27c:	2bff      	cmp	r3, #255	; 0xff
 800b27e:	d005      	beq.n	800b28c <OutputDbgTrace+0x4c>
 800b280:	2bff      	cmp	r3, #255	; 0xff
 800b282:	dc05      	bgt.n	800b290 <OutputDbgTrace+0x50>
 800b284:	2b0e      	cmp	r3, #14
 800b286:	d005      	beq.n	800b294 <OutputDbgTrace+0x54>
 800b288:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b28a:	e001      	b.n	800b290 <OutputDbgTrace+0x50>
          break;
 800b28c:	bf00      	nop
 800b28e:	e027      	b.n	800b2e0 <OutputDbgTrace+0xa0>
          break;
 800b290:	bf00      	nop
 800b292:	e025      	b.n	800b2e0 <OutputDbgTrace+0xa0>
          break;
 800b294:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b296:	e023      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b29c:	e020      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	7a5b      	ldrb	r3, [r3, #9]
 800b2a6:	2b0e      	cmp	r3, #14
 800b2a8:	d001      	beq.n	800b2ae <OutputDbgTrace+0x6e>
 800b2aa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b2ac:	e000      	b.n	800b2b0 <OutputDbgTrace+0x70>
          break;
 800b2ae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b2b0:	e016      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	7a5b      	ldrb	r3, [r3, #9]
 800b2ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b2bc:	e010      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b2c2:	e00d      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	7a5b      	ldrb	r3, [r3, #9]
 800b2cc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b2ce:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b2d0:	e006      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	7a5b      	ldrb	r3, [r3, #9]
 800b2da:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b2dc:	e000      	b.n	800b2e0 <OutputDbgTrace+0xa0>

    default:
      break;
 800b2de:	bf00      	nop
  }

  return;
 800b2e0:	bf00      	nop
}
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	; (800b334 <OTP_Read+0x48>)
 800b2f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b2fa:	e002      	b.n	800b302 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3b08      	subs	r3, #8
 800b300:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3307      	adds	r3, #7
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	79fa      	ldrb	r2, [r7, #7]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d003      	beq.n	800b316 <OTP_Read+0x2a>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4a09      	ldr	r2, [pc, #36]	; (800b338 <OTP_Read+0x4c>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d1f2      	bne.n	800b2fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3307      	adds	r3, #7
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	79fa      	ldrb	r2, [r7, #7]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d001      	beq.n	800b326 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b322:	2300      	movs	r3, #0
 800b324:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b326:	68fb      	ldr	r3, [r7, #12]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	1fff73f8 	.word	0x1fff73f8
 800b338:	1fff7000 	.word	0x1fff7000

0800b33c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	605a      	str	r2, [r3, #4]
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b364:	f3ef 8310 	mrs	r3, PRIMASK
 800b368:	60fb      	str	r3, [r7, #12]
  return(result);
 800b36a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b36c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b36e:	b672      	cpsid	i
}
 800b370:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d102      	bne.n	800b382 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b37c:	2301      	movs	r3, #1
 800b37e:	75fb      	strb	r3, [r7, #23]
 800b380:	e001      	b.n	800b386 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	f383 8810 	msr	PRIMASK, r3
}
 800b390:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b392:	7dfb      	ldrb	r3, [r7, #23]
}
 800b394:	4618      	mov	r0, r3
 800b396:	371c      	adds	r7, #28
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3b4:	b672      	cpsid	i
}
 800b3b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	605a      	str	r2, [r3, #4]
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f383 8810 	msr	PRIMASK, r3
}
 800b3de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b3e0:	bf00      	nop
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b400:	b672      	cpsid	i
}
 800b402:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f383 8810 	msr	PRIMASK, r3
}
 800b42a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b42c:	bf00      	nop
 800b42e:	371c      	adds	r7, #28
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b438:	b480      	push	{r7}
 800b43a:	b087      	sub	sp, #28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b440:	f3ef 8310 	mrs	r3, PRIMASK
 800b444:	60fb      	str	r3, [r7, #12]
  return(result);
 800b446:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b44a:	b672      	cpsid	i
}
 800b44c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6812      	ldr	r2, [r2, #0]
 800b456:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	6852      	ldr	r2, [r2, #4]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f383 8810 	msr	PRIMASK, r3
}
 800b46c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b46e:	bf00      	nop
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b086      	sub	sp, #24
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b484:	f3ef 8310 	mrs	r3, PRIMASK
 800b488:	60fb      	str	r3, [r7, #12]
  return(result);
 800b48a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b48c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b48e:	b672      	cpsid	i
}
 800b490:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7ff ffca 	bl	800b438 <LST_remove_node>
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	f383 8810 	msr	PRIMASK, r3
}
 800b4ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b4b0:	bf00      	nop
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b4bc:	4b03      	ldr	r3, [pc, #12]	; (800b4cc <LL_FLASH_GetUDN+0x14>)
 800b4be:	681b      	ldr	r3, [r3, #0]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	1fff7580 	.word	0x1fff7580

0800b4d0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b4d4:	4b03      	ldr	r3, [pc, #12]	; (800b4e4 <LL_FLASH_GetDeviceID+0x14>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	b2db      	uxtb	r3, r3
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	1fff7584 	.word	0x1fff7584

0800b4e8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b4ec:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <LL_FLASH_GetSTCompanyID+0x14>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	0a1b      	lsrs	r3, r3, #8
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	1fff7584 	.word	0x1fff7584

0800b500 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b500:	b5b0      	push	{r4, r5, r7, lr}
 800b502:	b090      	sub	sp, #64	; 0x40
 800b504:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b506:	2392      	movs	r3, #146	; 0x92
 800b508:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b50c:	4b25      	ldr	r3, [pc, #148]	; (800b5a4 <APP_BLE_Init+0xa4>)
 800b50e:	1d3c      	adds	r4, r7, #4
 800b510:	461d      	mov	r5, r3
 800b512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b51a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b51c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b51e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b522:	c403      	stmia	r4!, {r0, r1}
 800b524:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b526:	f000 f905 	bl	800b734 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b52a:	2101      	movs	r1, #1
 800b52c:	2002      	movs	r0, #2
 800b52e:	f000 fde9 	bl	800c104 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b532:	4a1d      	ldr	r2, [pc, #116]	; (800b5a8 <APP_BLE_Init+0xa8>)
 800b534:	2100      	movs	r1, #0
 800b536:	2002      	movs	r0, #2
 800b538:	f000 ff10 	bl	800c35c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b53c:	1d3b      	adds	r3, r7, #4
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff f8d0 	bl	800a6e4 <SHCI_C2_BLE_Init>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b54a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b552:	f7f7 fcad 	bl	8002eb0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b556:	f000 f903 	bl	800b760 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b55a:	f7ff f81d 	bl	800a598 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b55e:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <APP_BLE_Init+0xac>)
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b566:	4b11      	ldr	r3, [pc, #68]	; (800b5ac <APP_BLE_Init+0xac>)
 800b568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b56c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b56e:	4a10      	ldr	r2, [pc, #64]	; (800b5b0 <APP_BLE_Init+0xb0>)
 800b570:	2100      	movs	r1, #0
 800b572:	2001      	movs	r0, #1
 800b574:	f000 fef2 	bl	800c35c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b578:	2006      	movs	r0, #6
 800b57a:	f7fe fe80 	bl	800a27e <aci_hal_set_radio_activity_mask>
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b584:	f000 fa9b 	bl	800babe <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b588:	4b08      	ldr	r3, [pc, #32]	; (800b5ac <APP_BLE_Init+0xac>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b58e:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <APP_BLE_Init+0xac>)
 800b590:	2200      	movs	r2, #0
 800b592:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b594:	2001      	movs	r0, #1
 800b596:	f000 f997 	bl	800b8c8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b59a:	bf00      	nop
}
 800b59c:	3740      	adds	r7, #64	; 0x40
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	0800dc60 	.word	0x0800dc60
 800b5a8:	0800a901 	.word	0x0800a901
 800b5ac:	20001148 	.word	0x20001148
 800b5b0:	0800b9b1 	.word	0x0800b9b1

0800b5b4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b5bc:	2392      	movs	r3, #146	; 0x92
 800b5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2bff      	cmp	r3, #255	; 0xff
 800b5ce:	d053      	beq.n	800b678 <SVCCTL_App_Notification+0xc4>
 800b5d0:	2bff      	cmp	r3, #255	; 0xff
 800b5d2:	f300 80a1 	bgt.w	800b718 <SVCCTL_App_Notification+0x164>
 800b5d6:	2b05      	cmp	r3, #5
 800b5d8:	d002      	beq.n	800b5e0 <SVCCTL_App_Notification+0x2c>
 800b5da:	2b3e      	cmp	r3, #62	; 0x3e
 800b5dc:	d020      	beq.n	800b620 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b5de:	e09b      	b.n	800b718 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	3302      	adds	r3, #2
 800b5e4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	4b4e      	ldr	r3, [pc, #312]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b5f0:	8adb      	ldrh	r3, [r3, #22]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d106      	bne.n	800b604 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b5f6:	4b4c      	ldr	r3, [pc, #304]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b5fc:	4b4a      	ldr	r3, [pc, #296]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b604:	2001      	movs	r0, #1
 800b606:	f000 f95f 	bl	800b8c8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b60a:	4b48      	ldr	r3, [pc, #288]	; (800b72c <SVCCTL_App_Notification+0x178>)
 800b60c:	2201      	movs	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b610:	4b45      	ldr	r3, [pc, #276]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b612:	8ada      	ldrh	r2, [r3, #22]
 800b614:	4b45      	ldr	r3, [pc, #276]	; (800b72c <SVCCTL_App_Notification+0x178>)
 800b616:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b618:	4844      	ldr	r0, [pc, #272]	; (800b72c <SVCCTL_App_Notification+0x178>)
 800b61a:	f000 fa3c 	bl	800ba96 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b61e:	e07e      	b.n	800b71e <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	3302      	adds	r3, #2
 800b624:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d001      	beq.n	800b632 <SVCCTL_App_Notification+0x7e>
 800b62e:	2b03      	cmp	r3, #3
          break;
 800b630:	e021      	b.n	800b676 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	3301      	adds	r3, #1
 800b636:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b638:	4b3b      	ldr	r3, [pc, #236]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b63a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d104      	bne.n	800b64c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b642:	4b39      	ldr	r3, [pc, #228]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b644:	2206      	movs	r2, #6
 800b646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b64a:	e003      	b.n	800b654 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b64c:	4b36      	ldr	r3, [pc, #216]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b64e:	2205      	movs	r2, #5
 800b650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	4b32      	ldr	r3, [pc, #200]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b65e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b660:	4b32      	ldr	r3, [pc, #200]	; (800b72c <SVCCTL_App_Notification+0x178>)
 800b662:	2200      	movs	r2, #0
 800b664:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b666:	4b30      	ldr	r3, [pc, #192]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b668:	8ada      	ldrh	r2, [r3, #22]
 800b66a:	4b30      	ldr	r3, [pc, #192]	; (800b72c <SVCCTL_App_Notification+0x178>)
 800b66c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b66e:	482f      	ldr	r0, [pc, #188]	; (800b72c <SVCCTL_App_Notification+0x178>)
 800b670:	f000 fa11 	bl	800ba96 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b674:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b676:	e052      	b.n	800b71e <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	3302      	adds	r3, #2
 800b67c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	881b      	ldrh	r3, [r3, #0]
 800b682:	b29b      	uxth	r3, r3
 800b684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b688:	d040      	beq.n	800b70c <SVCCTL_App_Notification+0x158>
 800b68a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b68e:	dc45      	bgt.n	800b71c <SVCCTL_App_Notification+0x168>
 800b690:	2b04      	cmp	r3, #4
 800b692:	d03d      	beq.n	800b710 <SVCCTL_App_Notification+0x15c>
 800b694:	2b04      	cmp	r3, #4
 800b696:	db41      	blt.n	800b71c <SVCCTL_App_Notification+0x168>
 800b698:	f240 420a 	movw	r2, #1034	; 0x40a
 800b69c:	4293      	cmp	r3, r2
 800b69e:	dc3d      	bgt.n	800b71c <SVCCTL_App_Notification+0x168>
 800b6a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a4:	dd3a      	ble.n	800b71c <SVCCTL_App_Notification+0x168>
 800b6a6:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b6aa:	2b09      	cmp	r3, #9
 800b6ac:	d836      	bhi.n	800b71c <SVCCTL_App_Notification+0x168>
 800b6ae:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <SVCCTL_App_Notification+0x100>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b705 	.word	0x0800b705
 800b6b8:	0800b6dd 	.word	0x0800b6dd
 800b6bc:	0800b71d 	.word	0x0800b71d
 800b6c0:	0800b71d 	.word	0x0800b71d
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	0800b71d 	.word	0x0800b71d
 800b6cc:	0800b715 	.word	0x0800b715
 800b6d0:	0800b71d 	.word	0x0800b71d
 800b6d4:	0800b6f1 	.word	0x0800b6f1
 800b6d8:	0800b715 	.word	0x0800b715
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b6dc:	4b12      	ldr	r3, [pc, #72]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b6de:	8adb      	ldrh	r3, [r3, #22]
 800b6e0:	4913      	ldr	r1, [pc, #76]	; (800b730 <SVCCTL_App_Notification+0x17c>)
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fe f822 	bl	800972c <aci_gap_pass_key_resp>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b6ee:	e012      	b.n	800b716 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b6f0:	4b0d      	ldr	r3, [pc, #52]	; (800b728 <SVCCTL_App_Notification+0x174>)
 800b6f2:	8adb      	ldrh	r3, [r3, #22]
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe f9c2 	bl	8009a80 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b702:	e008      	b.n	800b716 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	3302      	adds	r3, #2
 800b708:	61bb      	str	r3, [r7, #24]
          break;
 800b70a:	e004      	b.n	800b716 <SVCCTL_App_Notification+0x162>
          break;
 800b70c:	bf00      	nop
 800b70e:	e005      	b.n	800b71c <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b710:	bf00      	nop
 800b712:	e003      	b.n	800b71c <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b714:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b716:	e001      	b.n	800b71c <SVCCTL_App_Notification+0x168>
      break;
 800b718:	bf00      	nop
 800b71a:	e000      	b.n	800b71e <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b71c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b71e:	2301      	movs	r3, #1
}
 800b720:	4618      	mov	r0, r3
 800b722:	3728      	adds	r7, #40	; 0x28
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	20001148 	.word	0x20001148
 800b72c:	200011cc 	.word	0x200011cc
 800b730:	0001b207 	.word	0x0001b207

0800b734 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b73a:	4b06      	ldr	r3, [pc, #24]	; (800b754 <Ble_Tl_Init+0x20>)
 800b73c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b73e:	4b06      	ldr	r3, [pc, #24]	; (800b758 <Ble_Tl_Init+0x24>)
 800b740:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b742:	463b      	mov	r3, r7
 800b744:	4619      	mov	r1, r3
 800b746:	4805      	ldr	r0, [pc, #20]	; (800b75c <Ble_Tl_Init+0x28>)
 800b748:	f7ff f8be 	bl	800a8c8 <hci_init>

  return;
 800b74c:	bf00      	nop
}
 800b74e:	3708      	adds	r7, #8
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	200300d8 	.word	0x200300d8
 800b758:	0800ba61 	.word	0x0800ba61
 800b75c:	0800ba29 	.word	0x0800ba29

0800b760 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b762:	b08d      	sub	sp, #52	; 0x34
 800b764:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b766:	2300      	movs	r3, #0
 800b768:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b76a:	2392      	movs	r3, #146	; 0x92
 800b76c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b76e:	f7fe fdda 	bl	800a326 <hci_reset>
 800b772:	4603      	mov	r3, r0
 800b774:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b776:	f000 f8d7 	bl	800b928 <BleGetBdAddress>
 800b77a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	2106      	movs	r1, #6
 800b780:	2000      	movs	r0, #0
 800b782:	f7fe fc90 	bl	800a0a6 <aci_hal_write_config_data>
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b78a:	4a4a      	ldr	r2, [pc, #296]	; (800b8b4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800b78c:	2110      	movs	r1, #16
 800b78e:	2018      	movs	r0, #24
 800b790:	f7fe fc89 	bl	800a0a6 <aci_hal_write_config_data>
 800b794:	4603      	mov	r3, r0
 800b796:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b798:	4a47      	ldr	r2, [pc, #284]	; (800b8b8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800b79a:	2110      	movs	r1, #16
 800b79c:	2008      	movs	r0, #8
 800b79e:	f7fe fc82 	bl	800a0a6 <aci_hal_write_config_data>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b7a6:	2118      	movs	r1, #24
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	f7fe fd01 	bl	800a1b0 <aci_hal_set_tx_power_level>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b7b2:	f7fe f9cc 	bl	8009b4e <aci_gatt_init>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	f043 0301 	orr.w	r3, r3, #1
 800b7c4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01f      	beq.n	800b80c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b7cc:	4b3b      	ldr	r3, [pc, #236]	; (800b8bc <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800b7ce:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b7d0:	1dba      	adds	r2, r7, #6
 800b7d2:	7bf8      	ldrb	r0, [r7, #15]
 800b7d4:	1cbb      	adds	r3, r7, #2
 800b7d6:	9301      	str	r3, [sp, #4]
 800b7d8:	1d3b      	adds	r3, r7, #4
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	2208      	movs	r2, #8
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	f7fe f80a 	bl	80097fa <aci_gap_init>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b7ea:	88fc      	ldrh	r4, [r7, #6]
 800b7ec:	88bd      	ldrh	r5, [r7, #4]
 800b7ee:	68b8      	ldr	r0, [r7, #8]
 800b7f0:	f7f4 fcc6 	bl	8000180 <strlen>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	4629      	mov	r1, r5
 800b802:	4620      	mov	r0, r4
 800b804:	f7fe fba6 	bl	8009f54 <aci_gatt_update_char_value>
 800b808:	4603      	mov	r3, r0
 800b80a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b80c:	88f8      	ldrh	r0, [r7, #6]
 800b80e:	8879      	ldrh	r1, [r7, #2]
 800b810:	463b      	mov	r3, r7
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	2302      	movs	r3, #2
 800b816:	2200      	movs	r2, #0
 800b818:	f7fe fb9c 	bl	8009f54 <aci_gatt_update_char_value>
 800b81c:	4603      	mov	r3, r0
 800b81e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b820:	2202      	movs	r2, #2
 800b822:	2102      	movs	r1, #2
 800b824:	2000      	movs	r0, #0
 800b826:	f7fe fda2 	bl	800a36e <hci_le_set_default_phy>
 800b82a:	4603      	mov	r3, r0
 800b82c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b830:	2201      	movs	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b834:	4b22      	ldr	r3, [pc, #136]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fd fe5f 	bl	80094fc <aci_gap_set_io_capability>
 800b83e:	4603      	mov	r3, r0
 800b840:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b842:	4b1f      	ldr	r3, [pc, #124]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b844:	2201      	movs	r2, #1
 800b846:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b848:	4b1d      	ldr	r3, [pc, #116]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b84a:	2208      	movs	r2, #8
 800b84c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b84e:	4b1c      	ldr	r3, [pc, #112]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b850:	2210      	movs	r2, #16
 800b852:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b854:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b856:	2200      	movs	r2, #0
 800b858:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b85a:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b85c:	4a19      	ldr	r2, [pc, #100]	; (800b8c4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800b85e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b860:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b862:	2200      	movs	r2, #0
 800b864:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b866:	4b16      	ldr	r3, [pc, #88]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b868:	789c      	ldrb	r4, [r3, #2]
 800b86a:	4b15      	ldr	r3, [pc, #84]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b86c:	785d      	ldrb	r5, [r3, #1]
 800b86e:	4b14      	ldr	r3, [pc, #80]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b870:	791b      	ldrb	r3, [r3, #4]
 800b872:	4a13      	ldr	r2, [pc, #76]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b874:	7952      	ldrb	r2, [r2, #5]
 800b876:	4912      	ldr	r1, [pc, #72]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b878:	78c9      	ldrb	r1, [r1, #3]
 800b87a:	4811      	ldr	r0, [pc, #68]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b87c:	6880      	ldr	r0, [r0, #8]
 800b87e:	2600      	movs	r6, #0
 800b880:	9604      	str	r6, [sp, #16]
 800b882:	9003      	str	r0, [sp, #12]
 800b884:	9102      	str	r1, [sp, #8]
 800b886:	9201      	str	r2, [sp, #4]
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	2300      	movs	r3, #0
 800b88c:	2201      	movs	r2, #1
 800b88e:	4629      	mov	r1, r5
 800b890:	4620      	mov	r0, r4
 800b892:	f7fd fe87 	bl	80095a4 <aci_gap_set_authentication_requirement>
 800b896:	4603      	mov	r3, r0
 800b898:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b89a:	4b09      	ldr	r3, [pc, #36]	; (800b8c0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b89c:	789b      	ldrb	r3, [r3, #2]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800b8a2:	f7fe f8c9 	bl	8009a38 <aci_gap_configure_whitelist>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	0800dea8 	.word	0x0800dea8
 800b8b8:	0800deb8 	.word	0x0800deb8
 800b8bc:	0800dc9c 	.word	0x0800dc9c
 800b8c0:	20001148 	.word	0x20001148
 800b8c4:	0001b207 	.word	0x0001b207

0800b8c8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08c      	sub	sp, #48	; 0x30
 800b8cc:	af08      	add	r7, sp, #32
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b8d2:	2392      	movs	r3, #146	; 0x92
 800b8d4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b8d6:	4a12      	ldr	r2, [pc, #72]	; (800b920 <Adv_Request+0x58>)
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b8de:	2300      	movs	r3, #0
 800b8e0:	9306      	str	r3, [sp, #24]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9304      	str	r3, [sp, #16]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	9303      	str	r3, [sp, #12]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9302      	str	r3, [sp, #8]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9301      	str	r3, [sp, #4]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	22a0      	movs	r2, #160	; 0xa0
 800b8fe:	2180      	movs	r1, #128	; 0x80
 800b900:	2000      	movs	r0, #0
 800b902:	f7fd fd01 	bl	8009308 <aci_gap_set_discoverable>
 800b906:	4603      	mov	r3, r0
 800b908:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b90a:	4906      	ldr	r1, [pc, #24]	; (800b924 <Adv_Request+0x5c>)
 800b90c:	2009      	movs	r0, #9
 800b90e:	f7fe f821 	bl	8009954 <aci_gap_update_adv_data>
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b916:	bf00      	nop
}
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	20001148 	.word	0x20001148
 800b924:	20000014 	.word	0x20000014

0800b928 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b92e:	f7ff fdc3 	bl	800b4b8 <LL_FLASH_GetUDN>
 800b932:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b93a:	d023      	beq.n	800b984 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b93c:	f7ff fdd4 	bl	800b4e8 <LL_FLASH_GetSTCompanyID>
 800b940:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b942:	f7ff fdc5 	bl	800b4d0 <LL_FLASH_GetDeviceID>
 800b946:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	4b16      	ldr	r3, [pc, #88]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b94e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	b2da      	uxtb	r2, r3
 800b956:	4b14      	ldr	r3, [pc, #80]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b958:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b960:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	b2da      	uxtb	r2, r3
 800b966:	4b10      	ldr	r3, [pc, #64]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b968:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	0a1b      	lsrs	r3, r3, #8
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b972:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	0c1b      	lsrs	r3, r3, #16
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b97c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b97e:	4b0a      	ldr	r3, [pc, #40]	; (800b9a8 <BleGetBdAddress+0x80>)
 800b980:	617b      	str	r3, [r7, #20]
 800b982:	e00b      	b.n	800b99c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b984:	2000      	movs	r0, #0
 800b986:	f7ff fcb1 	bl	800b2ec <OTP_Read>
 800b98a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	e001      	b.n	800b99c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <BleGetBdAddress+0x84>)
 800b99a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b99c:	697b      	ldr	r3, [r7, #20]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20001140 	.word	0x20001140
 800b9ac:	0800dea0 	.word	0x0800dea0

0800b9b0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b9b6:	4b0a      	ldr	r3, [pc, #40]	; (800b9e0 <Adv_Cancel+0x30>)
 800b9b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	d00a      	beq.n	800b9d6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b9c0:	2392      	movs	r3, #146	; 0x92
 800b9c2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b9c4:	f7fd fc7c 	bl	80092c0 <aci_gap_set_non_discoverable>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b9cc:	4b04      	ldr	r3, [pc, #16]	; (800b9e0 <Adv_Cancel+0x30>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
}
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20001148 	.word	0x20001148

0800b9e4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2002      	movs	r0, #2
 800b9f0:	f000 fcd6 	bl	800c3a0 <UTIL_SEQ_SetTask>

  return;
 800b9f4:	bf00      	nop
}
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ba04:	2001      	movs	r0, #1
 800ba06:	f000 fd37 	bl	800c478 <UTIL_SEQ_SetEvt>

  return;
 800ba0a:	bf00      	nop
}
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ba1a:	2001      	movs	r0, #1
 800ba1c:	f000 fd4c 	bl	800c4b8 <UTIL_SEQ_WaitEvt>

  return;
 800ba20:	bf00      	nop
}
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	3308      	adds	r3, #8
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fdfe 	bl	800a63c <SVCCTL_UserEvtRx>
 800ba40:	4603      	mov	r3, r0
 800ba42:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ba44:	7afb      	ldrb	r3, [r7, #11]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ba50:	e003      	b.n	800ba5a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
  return;
 800ba58:	bf00      	nop
}
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <BLE_StatusNot+0x16>
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d006      	beq.n	800ba82 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ba74:	e00b      	b.n	800ba8e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ba76:	2303      	movs	r3, #3
 800ba78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f000 fcbc 	bl	800c3f8 <UTIL_SEQ_PauseTask>
      break;
 800ba80:	e005      	b.n	800ba8e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ba82:	2303      	movs	r3, #3
 800ba84:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fcd6 	bl	800c438 <UTIL_SEQ_ResumeTask>
      break;
 800ba8c:	bf00      	nop
  }

  return;
 800ba8e:	bf00      	nop
}
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <Custom_APP_Notification+0x16>
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d002      	beq.n	800bab0 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800baaa:	e002      	b.n	800bab2 <Custom_APP_Notification+0x1c>
      break;
 800baac:	bf00      	nop
 800baae:	e000      	b.n	800bab2 <Custom_APP_Notification+0x1c>
      break;
 800bab0:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800bab2:	bf00      	nop
}
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800babe:	b480      	push	{r7}
 800bac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800bac2:	bf00      	nop
}
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800bacc:	b480      	push	{r7}
 800bace:	b08b      	sub	sp, #44	; 0x2c
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800bad4:	2300      	movs	r3, #0
 800bad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3301      	adds	r3, #1
 800bade:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	2bff      	cmp	r3, #255	; 0xff
 800bae6:	d12b      	bne.n	800bb40 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	3302      	adds	r3, #2
 800baec:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	f640 4214 	movw	r2, #3092	; 0xc14
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d01b      	beq.n	800bb34 <Custom_STM_Event_Handler+0x68>
 800bafc:	f640 4214 	movw	r2, #3092	; 0xc14
 800bb00:	4293      	cmp	r3, r2
 800bb02:	dc19      	bgt.n	800bb38 <Custom_STM_Event_Handler+0x6c>
 800bb04:	f640 4201 	movw	r2, #3073	; 0xc01
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d003      	beq.n	800bb14 <Custom_STM_Event_Handler+0x48>
 800bb0c:	f640 4213 	movw	r2, #3091	; 0xc13
 800bb10:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800bb12:	e014      	b.n	800bb3e <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	3302      	adds	r3, #2
 800bb18:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	885b      	ldrh	r3, [r3, #2]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	4b0c      	ldr	r3, [pc, #48]	; (800bb54 <Custom_STM_Event_Handler+0x88>)
 800bb24:	885b      	ldrh	r3, [r3, #2]
 800bb26:	3301      	adds	r3, #1
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d107      	bne.n	800bb3c <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800bb32:	e003      	b.n	800bb3c <Custom_STM_Event_Handler+0x70>
          break;
 800bb34:	bf00      	nop
 800bb36:	e004      	b.n	800bb42 <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800bb38:	bf00      	nop
 800bb3a:	e002      	b.n	800bb42 <Custom_STM_Event_Handler+0x76>
          break;
 800bb3c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bb3e:	e000      	b.n	800bb42 <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800bb40:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800bb42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800bb46:	4618      	mov	r0, r3
 800bb48:	372c      	adds	r7, #44	; 0x2c
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	200011d0 	.word	0x200011d0

0800bb58 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08c      	sub	sp, #48	; 0x30
 800bb5c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bb5e:	2392      	movs	r3, #146	; 0x92
 800bb60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800bb62:	4834      	ldr	r0, [pc, #208]	; (800bc34 <SVCCTL_InitCustomSvc+0xdc>)
 800bb64:	f7fe fd50 	bl	800a608 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800bb68:	238f      	movs	r3, #143	; 0x8f
 800bb6a:	713b      	strb	r3, [r7, #4]
 800bb6c:	23e5      	movs	r3, #229	; 0xe5
 800bb6e:	717b      	strb	r3, [r7, #5]
 800bb70:	23b3      	movs	r3, #179	; 0xb3
 800bb72:	71bb      	strb	r3, [r7, #6]
 800bb74:	23d5      	movs	r3, #213	; 0xd5
 800bb76:	71fb      	strb	r3, [r7, #7]
 800bb78:	232e      	movs	r3, #46	; 0x2e
 800bb7a:	723b      	strb	r3, [r7, #8]
 800bb7c:	237f      	movs	r3, #127	; 0x7f
 800bb7e:	727b      	strb	r3, [r7, #9]
 800bb80:	234a      	movs	r3, #74	; 0x4a
 800bb82:	72bb      	strb	r3, [r7, #10]
 800bb84:	2398      	movs	r3, #152	; 0x98
 800bb86:	72fb      	strb	r3, [r7, #11]
 800bb88:	232a      	movs	r3, #42	; 0x2a
 800bb8a:	733b      	strb	r3, [r7, #12]
 800bb8c:	2348      	movs	r3, #72	; 0x48
 800bb8e:	737b      	strb	r3, [r7, #13]
 800bb90:	237a      	movs	r3, #122	; 0x7a
 800bb92:	73bb      	strb	r3, [r7, #14]
 800bb94:	23cc      	movs	r3, #204	; 0xcc
 800bb96:	73fb      	strb	r3, [r7, #15]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	743b      	strb	r3, [r7, #16]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	747b      	strb	r3, [r7, #17]
 800bba0:	2300      	movs	r3, #0
 800bba2:	74bb      	strb	r3, [r7, #18]
 800bba4:	2300      	movs	r3, #0
 800bba6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800bba8:	1d39      	adds	r1, r7, #4
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <SVCCTL_InitCustomSvc+0xe0>)
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	2303      	movs	r3, #3
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	2002      	movs	r0, #2
 800bbb4:	f7fd fff0 	bl	8009b98 <aci_gatt_add_service>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800bbbc:	2319      	movs	r3, #25
 800bbbe:	713b      	strb	r3, [r7, #4]
 800bbc0:	23ed      	movs	r3, #237	; 0xed
 800bbc2:	717b      	strb	r3, [r7, #5]
 800bbc4:	2382      	movs	r3, #130	; 0x82
 800bbc6:	71bb      	strb	r3, [r7, #6]
 800bbc8:	23ae      	movs	r3, #174	; 0xae
 800bbca:	71fb      	strb	r3, [r7, #7]
 800bbcc:	23ed      	movs	r3, #237	; 0xed
 800bbce:	723b      	strb	r3, [r7, #8]
 800bbd0:	2321      	movs	r3, #33	; 0x21
 800bbd2:	727b      	strb	r3, [r7, #9]
 800bbd4:	234c      	movs	r3, #76	; 0x4c
 800bbd6:	72bb      	strb	r3, [r7, #10]
 800bbd8:	239d      	movs	r3, #157	; 0x9d
 800bbda:	72fb      	strb	r3, [r7, #11]
 800bbdc:	2341      	movs	r3, #65	; 0x41
 800bbde:	733b      	strb	r3, [r7, #12]
 800bbe0:	2345      	movs	r3, #69	; 0x45
 800bbe2:	737b      	strb	r3, [r7, #13]
 800bbe4:	2322      	movs	r3, #34	; 0x22
 800bbe6:	73bb      	strb	r3, [r7, #14]
 800bbe8:	238e      	movs	r3, #142	; 0x8e
 800bbea:	73fb      	strb	r3, [r7, #15]
 800bbec:	2300      	movs	r3, #0
 800bbee:	743b      	strb	r3, [r7, #16]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	747b      	strb	r3, [r7, #17]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	74bb      	strb	r3, [r7, #18]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800bbfc:	4b0e      	ldr	r3, [pc, #56]	; (800bc38 <SVCCTL_InitCustomSvc+0xe0>)
 800bbfe:	8818      	ldrh	r0, [r3, #0]
 800bc00:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <SVCCTL_InitCustomSvc+0xe4>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	1d3a      	adds	r2, r7, #4
 800bc08:	490d      	ldr	r1, [pc, #52]	; (800bc40 <SVCCTL_InitCustomSvc+0xe8>)
 800bc0a:	9105      	str	r1, [sp, #20]
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	9104      	str	r1, [sp, #16]
 800bc10:	2110      	movs	r1, #16
 800bc12:	9103      	str	r1, [sp, #12]
 800bc14:	2101      	movs	r1, #1
 800bc16:	9102      	str	r1, [sp, #8]
 800bc18:	2100      	movs	r1, #0
 800bc1a:	9101      	str	r1, [sp, #4]
 800bc1c:	2108      	movs	r1, #8
 800bc1e:	9100      	str	r1, [sp, #0]
 800bc20:	2102      	movs	r1, #2
 800bc22:	f7fe f88f 	bl	8009d44 <aci_gatt_add_char>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800bc2a:	bf00      	nop
}
 800bc2c:	3718      	adds	r7, #24
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	0800bacd 	.word	0x0800bacd
 800bc38:	200011d0 	.word	0x200011d0
 800bc3c:	2000001d 	.word	0x2000001d
 800bc40:	200011d2 	.word	0x200011d2

0800bc44 <LL_PWR_EnableBootC2>:
{
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bc48:	4b05      	ldr	r3, [pc, #20]	; (800bc60 <LL_PWR_EnableBootC2+0x1c>)
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	4a04      	ldr	r2, [pc, #16]	; (800bc60 <LL_PWR_EnableBootC2+0x1c>)
 800bc4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc52:	60d3      	str	r3, [r2, #12]
}
 800bc54:	bf00      	nop
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	58000400 	.word	0x58000400

0800bc64 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bc6e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bc72:	4905      	ldr	r1, [pc, #20]	; (800bc88 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	58000800 	.word	0x58000800

0800bc8c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800bc94:	4b05      	ldr	r3, [pc, #20]	; (800bcac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bc96:	6a1a      	ldr	r2, [r3, #32]
 800bc98:	4904      	ldr	r1, [pc, #16]	; (800bcac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	620b      	str	r3, [r1, #32]
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	58000800 	.word	0x58000800

0800bcb0 <LL_AHB3_GRP1_EnableClock>:
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bcb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bcc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
}
 800bcd6:	bf00      	nop
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b085      	sub	sp, #20
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800bcea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bcf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800bcfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd02:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
}
 800bd0e:	bf00      	nop
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <LL_C1_IPCC_EnableIT_TXF>:
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
}
 800bd2e:	bf00      	nop
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <LL_C1_IPCC_EnableIT_RXO>:
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f043 0201 	orr.w	r2, r3, #1
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	601a      	str	r2, [r3, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	041b      	lsls	r3, r3, #16
 800bd6c:	43db      	mvns	r3, r3
 800bd6e:	401a      	ands	r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	605a      	str	r2, [r3, #4]
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	041b      	lsls	r3, r3, #16
 800bd92:	431a      	orrs	r2, r3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	605a      	str	r2, [r3, #4]
}
 800bd98:	bf00      	nop
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	43db      	mvns	r3, r3
 800bdb6:	401a      	ands	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	605a      	str	r2, [r3, #4]
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	609a      	str	r2, [r3, #8]
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <LL_C1_IPCC_SetFlag_CHx>:
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	041a      	lsls	r2, r3, #16
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	609a      	str	r2, [r3, #8]
}
 800bdf6:	bf00      	nop
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800be02:	b480      	push	{r7}
 800be04:	b083      	sub	sp, #12
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	4013      	ands	r3, r2
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	429a      	cmp	r2, r3
 800be18:	d101      	bne.n	800be1e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e000      	b.n	800be20 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69da      	ldr	r2, [r3, #28]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	4013      	ands	r3, r2
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d101      	bne.n	800be48 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800be44:	2301      	movs	r3, #1
 800be46:	e000      	b.n	800be4a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
	...

0800be58 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800be5c:	2102      	movs	r1, #2
 800be5e:	4819      	ldr	r0, [pc, #100]	; (800bec4 <HW_IPCC_Rx_Handler+0x6c>)
 800be60:	f7ff ffe4 	bl	800be2c <LL_C2_IPCC_IsActiveFlag_CHx>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d009      	beq.n	800be7e <HW_IPCC_Rx_Handler+0x26>
 800be6a:	4b16      	ldr	r3, [pc, #88]	; (800bec4 <HW_IPCC_Rx_Handler+0x6c>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	43db      	mvns	r3, r3
 800be70:	f003 0302 	and.w	r3, r3, #2
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800be78:	f000 f8da 	bl	800c030 <HW_IPCC_SYS_EvtHandler>
 800be7c:	e01f      	b.n	800bebe <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800be7e:	2101      	movs	r1, #1
 800be80:	4810      	ldr	r0, [pc, #64]	; (800bec4 <HW_IPCC_Rx_Handler+0x6c>)
 800be82:	f7ff ffd3 	bl	800be2c <LL_C2_IPCC_IsActiveFlag_CHx>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d008      	beq.n	800be9e <HW_IPCC_Rx_Handler+0x46>
 800be8c:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <HW_IPCC_Rx_Handler+0x6c>)
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800be98:	f000 f88e 	bl	800bfb8 <HW_IPCC_BLE_EvtHandler>
 800be9c:	e00f      	b.n	800bebe <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800be9e:	2108      	movs	r1, #8
 800bea0:	4808      	ldr	r0, [pc, #32]	; (800bec4 <HW_IPCC_Rx_Handler+0x6c>)
 800bea2:	f7ff ffc3 	bl	800be2c <LL_C2_IPCC_IsActiveFlag_CHx>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d009      	beq.n	800bec0 <HW_IPCC_Rx_Handler+0x68>
 800beac:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <HW_IPCC_Rx_Handler+0x6c>)
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	43db      	mvns	r3, r3
 800beb2:	f003 0308 	and.w	r3, r3, #8
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800beba:	f000 f905 	bl	800c0c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bebe:	bf00      	nop
 800bec0:	bf00      	nop
}
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	58000c00 	.word	0x58000c00

0800bec8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800becc:	2102      	movs	r1, #2
 800bece:	481a      	ldr	r0, [pc, #104]	; (800bf38 <HW_IPCC_Tx_Handler+0x70>)
 800bed0:	f7ff ff97 	bl	800be02 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <HW_IPCC_Tx_Handler+0x26>
 800beda:	4b17      	ldr	r3, [pc, #92]	; (800bf38 <HW_IPCC_Tx_Handler+0x70>)
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	43db      	mvns	r3, r3
 800bee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d002      	beq.n	800beee <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800bee8:	f000 f896 	bl	800c018 <HW_IPCC_SYS_CmdEvtHandler>
 800beec:	e020      	b.n	800bf30 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800beee:	2108      	movs	r1, #8
 800bef0:	4811      	ldr	r0, [pc, #68]	; (800bf38 <HW_IPCC_Tx_Handler+0x70>)
 800bef2:	f7ff ff86 	bl	800be02 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d109      	bne.n	800bf10 <HW_IPCC_Tx_Handler+0x48>
 800befc:	4b0e      	ldr	r3, [pc, #56]	; (800bf38 <HW_IPCC_Tx_Handler+0x70>)
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	43db      	mvns	r3, r3
 800bf02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800bf0a:	f000 f8bf 	bl	800c08c <HW_IPCC_MM_FreeBufHandler>
 800bf0e:	e00f      	b.n	800bf30 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bf10:	2120      	movs	r1, #32
 800bf12:	4809      	ldr	r0, [pc, #36]	; (800bf38 <HW_IPCC_Tx_Handler+0x70>)
 800bf14:	f7ff ff75 	bl	800be02 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d109      	bne.n	800bf32 <HW_IPCC_Tx_Handler+0x6a>
 800bf1e:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <HW_IPCC_Tx_Handler+0x70>)
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d002      	beq.n	800bf32 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800bf2c:	f000 f850 	bl	800bfd0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800bf30:	bf00      	nop
 800bf32:	bf00      	nop
}
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	58000c00 	.word	0x58000c00

0800bf3c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bf40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bf44:	f7ff fecd 	bl	800bce2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bf48:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bf4c:	f7ff fe9e 	bl	800bc8c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bf50:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bf54:	f7ff fe86 	bl	800bc64 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bf58:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bf5a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bf5c:	f7ff fe72 	bl	800bc44 <LL_PWR_EnableBootC2>

  return;
 800bf60:	bf00      	nop
}
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bf68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bf6c:	f7ff fea0 	bl	800bcb0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bf70:	4806      	ldr	r0, [pc, #24]	; (800bf8c <HW_IPCC_Init+0x28>)
 800bf72:	f7ff fee2 	bl	800bd3a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bf76:	4805      	ldr	r0, [pc, #20]	; (800bf8c <HW_IPCC_Init+0x28>)
 800bf78:	f7ff fecf 	bl	800bd1a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bf7c:	202c      	movs	r0, #44	; 0x2c
 800bf7e:	f7f7 fd5e 	bl	8003a3e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bf82:	202d      	movs	r0, #45	; 0x2d
 800bf84:	f7f7 fd5b 	bl	8003a3e <HAL_NVIC_EnableIRQ>

  return;
 800bf88:	bf00      	nop
}
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	58000c00 	.word	0x58000c00

0800bf90 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bf94:	2101      	movs	r1, #1
 800bf96:	4802      	ldr	r0, [pc, #8]	; (800bfa0 <HW_IPCC_BLE_Init+0x10>)
 800bf98:	f7ff ff04 	bl	800bda4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bf9c:	bf00      	nop
}
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	58000c00 	.word	0x58000c00

0800bfa4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	4802      	ldr	r0, [pc, #8]	; (800bfb4 <HW_IPCC_BLE_SendCmd+0x10>)
 800bfac:	f7ff ff1a 	bl	800bde4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bfb0:	bf00      	nop
}
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	58000c00 	.word	0x58000c00

0800bfb8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bfbc:	f7fe ffde 	bl	800af7c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	4802      	ldr	r0, [pc, #8]	; (800bfcc <HW_IPCC_BLE_EvtHandler+0x14>)
 800bfc4:	f7ff ff00 	bl	800bdc8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bfc8:	bf00      	nop
}
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	58000c00 	.word	0x58000c00

0800bfd0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bfd4:	2120      	movs	r1, #32
 800bfd6:	4803      	ldr	r0, [pc, #12]	; (800bfe4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bfd8:	f7ff fed2 	bl	800bd80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bfdc:	f7fe fffe 	bl	800afdc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800bfe0:	bf00      	nop
}
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	58000c00 	.word	0x58000c00

0800bfe8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bfec:	2102      	movs	r1, #2
 800bfee:	4802      	ldr	r0, [pc, #8]	; (800bff8 <HW_IPCC_SYS_Init+0x10>)
 800bff0:	f7ff fed8 	bl	800bda4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bff4:	bf00      	nop
}
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	58000c00 	.word	0x58000c00

0800bffc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c000:	2102      	movs	r1, #2
 800c002:	4804      	ldr	r0, [pc, #16]	; (800c014 <HW_IPCC_SYS_SendCmd+0x18>)
 800c004:	f7ff feee 	bl	800bde4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c008:	2102      	movs	r1, #2
 800c00a:	4802      	ldr	r0, [pc, #8]	; (800c014 <HW_IPCC_SYS_SendCmd+0x18>)
 800c00c:	f7ff fea5 	bl	800bd5a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c010:	bf00      	nop
}
 800c012:	bd80      	pop	{r7, pc}
 800c014:	58000c00 	.word	0x58000c00

0800c018 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c01c:	2102      	movs	r1, #2
 800c01e:	4803      	ldr	r0, [pc, #12]	; (800c02c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c020:	f7ff feae 	bl	800bd80 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c024:	f7ff f82a 	bl	800b07c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c028:	bf00      	nop
}
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	58000c00 	.word	0x58000c00

0800c030 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c034:	f7ff f838 	bl	800b0a8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c038:	2102      	movs	r1, #2
 800c03a:	4802      	ldr	r0, [pc, #8]	; (800c044 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c03c:	f7ff fec4 	bl	800bdc8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c040:	bf00      	nop
}
 800c042:	bd80      	pop	{r7, pc}
 800c044:	58000c00 	.word	0x58000c00

0800c048 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c050:	2108      	movs	r1, #8
 800c052:	480c      	ldr	r0, [pc, #48]	; (800c084 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c054:	f7ff fed5 	bl	800be02 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d007      	beq.n	800c06e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c05e:	4a0a      	ldr	r2, [pc, #40]	; (800c088 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c064:	2108      	movs	r1, #8
 800c066:	4807      	ldr	r0, [pc, #28]	; (800c084 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c068:	f7ff fe77 	bl	800bd5a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c06c:	e006      	b.n	800c07c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c072:	2108      	movs	r1, #8
 800c074:	4803      	ldr	r0, [pc, #12]	; (800c084 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c076:	f7ff feb5 	bl	800bde4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c07a:	bf00      	nop
}
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	58000c00 	.word	0x58000c00
 800c088:	200011d4 	.word	0x200011d4

0800c08c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c090:	2108      	movs	r1, #8
 800c092:	4806      	ldr	r0, [pc, #24]	; (800c0ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c094:	f7ff fe74 	bl	800bd80 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c09e:	2108      	movs	r1, #8
 800c0a0:	4802      	ldr	r0, [pc, #8]	; (800c0ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c0a2:	f7ff fe9f 	bl	800bde4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c0a6:	bf00      	nop
}
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	58000c00 	.word	0x58000c00
 800c0b0:	200011d4 	.word	0x200011d4

0800c0b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c0b8:	2108      	movs	r1, #8
 800c0ba:	4802      	ldr	r0, [pc, #8]	; (800c0c4 <HW_IPCC_TRACES_Init+0x10>)
 800c0bc:	f7ff fe72 	bl	800bda4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c0c0:	bf00      	nop
}
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	58000c00 	.word	0x58000c00

0800c0c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c0cc:	f7ff f894 	bl	800b1f8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c0d0:	2108      	movs	r1, #8
 800c0d2:	4802      	ldr	r0, [pc, #8]	; (800c0dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c0d4:	f7ff fe78 	bl	800bdc8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c0d8:	bf00      	nop
}
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	58000c00 	.word	0x58000c00

0800c0e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c0e4:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <UTIL_LPM_Init+0x1c>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c0ea:	4b05      	ldr	r3, [pc, #20]	; (800c100 <UTIL_LPM_Init+0x20>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c0f0:	bf00      	nop
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	200011d8 	.word	0x200011d8
 800c100:	200011dc 	.word	0x200011dc

0800c104 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c104:	b480      	push	{r7}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c110:	f3ef 8310 	mrs	r3, PRIMASK
 800c114:	613b      	str	r3, [r7, #16]
  return(result);
 800c116:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c118:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c11a:	b672      	cpsid	i
}
 800c11c:	bf00      	nop
  
  switch(state)
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d008      	beq.n	800c136 <UTIL_LPM_SetOffMode+0x32>
 800c124:	2b01      	cmp	r3, #1
 800c126:	d10e      	bne.n	800c146 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c128:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <UTIL_LPM_SetOffMode+0x5c>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4313      	orrs	r3, r2
 800c130:	4a0b      	ldr	r2, [pc, #44]	; (800c160 <UTIL_LPM_SetOffMode+0x5c>)
 800c132:	6013      	str	r3, [r2, #0]
      break;
 800c134:	e008      	b.n	800c148 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	43da      	mvns	r2, r3
 800c13a:	4b09      	ldr	r3, [pc, #36]	; (800c160 <UTIL_LPM_SetOffMode+0x5c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4013      	ands	r3, r2
 800c140:	4a07      	ldr	r2, [pc, #28]	; (800c160 <UTIL_LPM_SetOffMode+0x5c>)
 800c142:	6013      	str	r3, [r2, #0]
      break;
 800c144:	e000      	b.n	800c148 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c146:	bf00      	nop
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f383 8810 	msr	PRIMASK, r3
}
 800c152:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c154:	bf00      	nop
 800c156:	371c      	adds	r7, #28
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	200011dc 	.word	0x200011dc

0800c164 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b090      	sub	sp, #64	; 0x40
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c16c:	4b73      	ldr	r3, [pc, #460]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c172:	4b72      	ldr	r3, [pc, #456]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4013      	ands	r3, r2
 800c17a:	4a70      	ldr	r2, [pc, #448]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c17c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c17e:	4b70      	ldr	r3, [pc, #448]	; (800c340 <UTIL_SEQ_Run+0x1dc>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c184:	4b6f      	ldr	r3, [pc, #444]	; (800c344 <UTIL_SEQ_Run+0x1e0>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c18a:	4b6f      	ldr	r3, [pc, #444]	; (800c348 <UTIL_SEQ_Run+0x1e4>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c190:	4b6e      	ldr	r3, [pc, #440]	; (800c34c <UTIL_SEQ_Run+0x1e8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c196:	e08d      	b.n	800c2b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c19c:	e002      	b.n	800c1a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c1a4:	4a6a      	ldr	r2, [pc, #424]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ae:	401a      	ands	r2, r3
 800c1b0:	4b62      	ldr	r3, [pc, #392]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d0f1      	beq.n	800c19e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c1ba:	4a65      	ldr	r2, [pc, #404]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	401a      	ands	r2, r3
 800c1c6:	4b5d      	ldr	r3, [pc, #372]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c1ce:	4a60      	ldr	r2, [pc, #384]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d2:	00db      	lsls	r3, r3, #3
 800c1d4:	4413      	add	r3, r2
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d106      	bne.n	800c1ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c1e0:	4a5b      	ldr	r2, [pc, #364]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c1ee:	4a58      	ldr	r2, [pc, #352]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	4413      	add	r3, r2
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 f9b3 	bl	800c568 <SEQ_BitPosition>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	4b53      	ldr	r3, [pc, #332]	; (800c354 <UTIL_SEQ_Run+0x1f0>)
 800c208:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c20a:	4a51      	ldr	r2, [pc, #324]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	4413      	add	r3, r2
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	4b4f      	ldr	r3, [pc, #316]	; (800c354 <UTIL_SEQ_Run+0x1f0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2101      	movs	r1, #1
 800c21a:	fa01 f303 	lsl.w	r3, r1, r3
 800c21e:	43db      	mvns	r3, r3
 800c220:	401a      	ands	r2, r3
 800c222:	494b      	ldr	r1, [pc, #300]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c22c:	f3ef 8310 	mrs	r3, PRIMASK
 800c230:	61bb      	str	r3, [r7, #24]
  return(result);
 800c232:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c234:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c236:	b672      	cpsid	i
}
 800c238:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c23a:	4b46      	ldr	r3, [pc, #280]	; (800c354 <UTIL_SEQ_Run+0x1f0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2201      	movs	r2, #1
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	43da      	mvns	r2, r3
 800c246:	4b3e      	ldr	r3, [pc, #248]	; (800c340 <UTIL_SEQ_Run+0x1dc>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4013      	ands	r3, r2
 800c24c:	4a3c      	ldr	r2, [pc, #240]	; (800c340 <UTIL_SEQ_Run+0x1dc>)
 800c24e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c250:	2302      	movs	r3, #2
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c254:	e013      	b.n	800c27e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c258:	3b01      	subs	r3, #1
 800c25a:	4a3d      	ldr	r2, [pc, #244]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c25c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c260:	4b3c      	ldr	r3, [pc, #240]	; (800c354 <UTIL_SEQ_Run+0x1f0>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2201      	movs	r2, #1
 800c266:	fa02 f303 	lsl.w	r3, r2, r3
 800c26a:	43da      	mvns	r2, r3
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26e:	3b01      	subs	r3, #1
 800c270:	400a      	ands	r2, r1
 800c272:	4937      	ldr	r1, [pc, #220]	; (800c350 <UTIL_SEQ_Run+0x1ec>)
 800c274:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c27a:	3b01      	subs	r3, #1
 800c27c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e8      	bne.n	800c256 <UTIL_SEQ_Run+0xf2>
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f383 8810 	msr	PRIMASK, r3
}
 800c28e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c290:	4b30      	ldr	r3, [pc, #192]	; (800c354 <UTIL_SEQ_Run+0x1f0>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a30      	ldr	r2, [pc, #192]	; (800c358 <UTIL_SEQ_Run+0x1f4>)
 800c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c29a:	4798      	blx	r3

    local_taskset = TaskSet;
 800c29c:	4b28      	ldr	r3, [pc, #160]	; (800c340 <UTIL_SEQ_Run+0x1dc>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c2a2:	4b28      	ldr	r3, [pc, #160]	; (800c344 <UTIL_SEQ_Run+0x1e0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c2a8:	4b27      	ldr	r3, [pc, #156]	; (800c348 <UTIL_SEQ_Run+0x1e4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c2ae:	4b27      	ldr	r3, [pc, #156]	; (800c34c <UTIL_SEQ_Run+0x1e8>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c2b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	401a      	ands	r2, r3
 800c2ba:	4b20      	ldr	r3, [pc, #128]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d005      	beq.n	800c2d0 <UTIL_SEQ_Run+0x16c>
 800c2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f43f af64 	beq.w	800c198 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c2d0:	4b20      	ldr	r3, [pc, #128]	; (800c354 <UTIL_SEQ_Run+0x1f0>)
 800c2d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c2d8:	f000 f938 	bl	800c54c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e0:	613b      	str	r3, [r7, #16]
  return(result);
 800c2e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c2e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2e6:	b672      	cpsid	i
}
 800c2e8:	bf00      	nop
  local_taskset = TaskSet;
 800c2ea:	4b15      	ldr	r3, [pc, #84]	; (800c340 <UTIL_SEQ_Run+0x1dc>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c2f0:	4b14      	ldr	r3, [pc, #80]	; (800c344 <UTIL_SEQ_Run+0x1e0>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c2f6:	4b14      	ldr	r3, [pc, #80]	; (800c348 <UTIL_SEQ_Run+0x1e4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	401a      	ands	r2, r3
 800c302:	4b0e      	ldr	r3, [pc, #56]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4013      	ands	r3, r2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d107      	bne.n	800c31c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <UTIL_SEQ_Run+0x1e8>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c312:	4013      	ands	r3, r2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d101      	bne.n	800c31c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c318:	f7f5 fbfc 	bl	8001b14 <UTIL_SEQ_Idle>
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f383 8810 	msr	PRIMASK, r3
}
 800c326:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c328:	f000 f917 	bl	800c55a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c32c:	4a03      	ldr	r2, [pc, #12]	; (800c33c <UTIL_SEQ_Run+0x1d8>)
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	6013      	str	r3, [r2, #0]

  return;
 800c332:	bf00      	nop
}
 800c334:	3740      	adds	r7, #64	; 0x40
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20000024 	.word	0x20000024
 800c340:	200011e0 	.word	0x200011e0
 800c344:	200011e4 	.word	0x200011e4
 800c348:	20000020 	.word	0x20000020
 800c34c:	200011e8 	.word	0x200011e8
 800c350:	20001270 	.word	0x20001270
 800c354:	200011ec 	.word	0x200011ec
 800c358:	200011f0 	.word	0x200011f0

0800c35c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c368:	f3ef 8310 	mrs	r3, PRIMASK
 800c36c:	617b      	str	r3, [r7, #20]
  return(result);
 800c36e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c372:	b672      	cpsid	i
}
 800c374:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 f8f6 	bl	800c568 <SEQ_BitPosition>
 800c37c:	4603      	mov	r3, r0
 800c37e:	4619      	mov	r1, r3
 800c380:	4a06      	ldr	r2, [pc, #24]	; (800c39c <UTIL_SEQ_RegTask+0x40>)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	f383 8810 	msr	PRIMASK, r3
}
 800c392:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c394:	bf00      	nop
}
 800c396:	3720      	adds	r7, #32
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	200011f0 	.word	0x200011f0

0800c3a0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c3b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3b4:	b672      	cpsid	i
}
 800c3b6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c3b8:	4b0d      	ldr	r3, [pc, #52]	; (800c3f0 <UTIL_SEQ_SetTask+0x50>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	4a0b      	ldr	r2, [pc, #44]	; (800c3f0 <UTIL_SEQ_SetTask+0x50>)
 800c3c2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c3c4:	4a0b      	ldr	r2, [pc, #44]	; (800c3f4 <UTIL_SEQ_SetTask+0x54>)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	431a      	orrs	r2, r3
 800c3d0:	4908      	ldr	r1, [pc, #32]	; (800c3f4 <UTIL_SEQ_SetTask+0x54>)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	f383 8810 	msr	PRIMASK, r3
}
 800c3e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c3e4:	bf00      	nop
}
 800c3e6:	371c      	adds	r7, #28
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	200011e0 	.word	0x200011e0
 800c3f4:	20001270 	.word	0x20001270

0800c3f8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c400:	f3ef 8310 	mrs	r3, PRIMASK
 800c404:	60fb      	str	r3, [r7, #12]
  return(result);
 800c406:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c408:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c40a:	b672      	cpsid	i
}
 800c40c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	43da      	mvns	r2, r3
 800c412:	4b08      	ldr	r3, [pc, #32]	; (800c434 <UTIL_SEQ_PauseTask+0x3c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4013      	ands	r3, r2
 800c418:	4a06      	ldr	r2, [pc, #24]	; (800c434 <UTIL_SEQ_PauseTask+0x3c>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f383 8810 	msr	PRIMASK, r3
}
 800c426:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c428:	bf00      	nop
}
 800c42a:	371c      	adds	r7, #28
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	20000020 	.word	0x20000020

0800c438 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c440:	f3ef 8310 	mrs	r3, PRIMASK
 800c444:	60fb      	str	r3, [r7, #12]
  return(result);
 800c446:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c44a:	b672      	cpsid	i
}
 800c44c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c44e:	4b09      	ldr	r3, [pc, #36]	; (800c474 <UTIL_SEQ_ResumeTask+0x3c>)
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4313      	orrs	r3, r2
 800c456:	4a07      	ldr	r2, [pc, #28]	; (800c474 <UTIL_SEQ_ResumeTask+0x3c>)
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f383 8810 	msr	PRIMASK, r3
}
 800c464:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c466:	bf00      	nop
}
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20000020 	.word	0x20000020

0800c478 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c480:	f3ef 8310 	mrs	r3, PRIMASK
 800c484:	60fb      	str	r3, [r7, #12]
  return(result);
 800c486:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c48a:	b672      	cpsid	i
}
 800c48c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <UTIL_SEQ_SetEvt+0x3c>)
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4313      	orrs	r3, r2
 800c496:	4a07      	ldr	r2, [pc, #28]	; (800c4b4 <UTIL_SEQ_SetEvt+0x3c>)
 800c498:	6013      	str	r3, [r2, #0]
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f383 8810 	msr	PRIMASK, r3
}
 800c4a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c4a6:	bf00      	nop
}
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	200011e4 	.word	0x200011e4

0800c4b8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b088      	sub	sp, #32
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c4c0:	4b1f      	ldr	r3, [pc, #124]	; (800c540 <UTIL_SEQ_WaitEvt+0x88>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c4c6:	4b1e      	ldr	r3, [pc, #120]	; (800c540 <UTIL_SEQ_WaitEvt+0x88>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4ce:	d102      	bne.n	800c4d6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61fb      	str	r3, [r7, #28]
 800c4d4:	e005      	b.n	800c4e2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c4d6:	4b1a      	ldr	r3, [pc, #104]	; (800c540 <UTIL_SEQ_WaitEvt+0x88>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c4e2:	4b18      	ldr	r3, [pc, #96]	; (800c544 <UTIL_SEQ_WaitEvt+0x8c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c4e8:	4a16      	ldr	r2, [pc, #88]	; (800c544 <UTIL_SEQ_WaitEvt+0x8c>)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c4ee:	e003      	b.n	800c4f8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c4f0:	6879      	ldr	r1, [r7, #4]
 800c4f2:	69f8      	ldr	r0, [r7, #28]
 800c4f4:	f7f5 fb15 	bl	8001b22 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c4f8:	4b13      	ldr	r3, [pc, #76]	; (800c548 <UTIL_SEQ_WaitEvt+0x90>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4013      	ands	r3, r2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d0f5      	beq.n	800c4f0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c504:	4a0e      	ldr	r2, [pc, #56]	; (800c540 <UTIL_SEQ_WaitEvt+0x88>)
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c50a:	f3ef 8310 	mrs	r3, PRIMASK
 800c50e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c510:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c512:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c514:	b672      	cpsid	i
}
 800c516:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	43da      	mvns	r2, r3
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <UTIL_SEQ_WaitEvt+0x90>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4013      	ands	r3, r2
 800c522:	4a09      	ldr	r2, [pc, #36]	; (800c548 <UTIL_SEQ_WaitEvt+0x90>)
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f383 8810 	msr	PRIMASK, r3
}
 800c530:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c532:	4a04      	ldr	r2, [pc, #16]	; (800c544 <UTIL_SEQ_WaitEvt+0x8c>)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	6013      	str	r3, [r2, #0]
  return;
 800c538:	bf00      	nop
}
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	200011ec 	.word	0x200011ec
 800c544:	200011e8 	.word	0x200011e8
 800c548:	200011e4 	.word	0x200011e4

0800c54c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c550:	bf00      	nop
}
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c55a:	b480      	push	{r7}
 800c55c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c55e:	bf00      	nop
}
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	0c1b      	lsrs	r3, r3, #16
 800c57c:	041b      	lsls	r3, r3, #16
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d104      	bne.n	800c58c <SEQ_BitPosition+0x24>
 800c582:	2310      	movs	r3, #16
 800c584:	73fb      	strb	r3, [r7, #15]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	041b      	lsls	r3, r3, #16
 800c58a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d105      	bne.n	800c5a2 <SEQ_BitPosition+0x3a>
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	3308      	adds	r3, #8
 800c59a:	73fb      	strb	r3, [r7, #15]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	021b      	lsls	r3, r3, #8
 800c5a0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d105      	bne.n	800c5b8 <SEQ_BitPosition+0x50>
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	73fb      	strb	r3, [r7, #15]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	011b      	lsls	r3, r3, #4
 800c5b6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	0f1b      	lsrs	r3, r3, #28
 800c5bc:	4a07      	ldr	r2, [pc, #28]	; (800c5dc <SEQ_BitPosition+0x74>)
 800c5be:	5cd2      	ldrb	r2, [r2, r3]
 800c5c0:	7bfb      	ldrb	r3, [r7, #15]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	f1c3 031f 	rsb	r3, r3, #31
 800c5cc:	b2db      	uxtb	r3, r3
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	0800dec8 	.word	0x0800dec8

0800c5e0 <__errno>:
 800c5e0:	4b01      	ldr	r3, [pc, #4]	; (800c5e8 <__errno+0x8>)
 800c5e2:	6818      	ldr	r0, [r3, #0]
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	20000028 	.word	0x20000028

0800c5ec <__libc_init_array>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	4d0d      	ldr	r5, [pc, #52]	; (800c624 <__libc_init_array+0x38>)
 800c5f0:	4c0d      	ldr	r4, [pc, #52]	; (800c628 <__libc_init_array+0x3c>)
 800c5f2:	1b64      	subs	r4, r4, r5
 800c5f4:	10a4      	asrs	r4, r4, #2
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	42a6      	cmp	r6, r4
 800c5fa:	d109      	bne.n	800c610 <__libc_init_array+0x24>
 800c5fc:	4d0b      	ldr	r5, [pc, #44]	; (800c62c <__libc_init_array+0x40>)
 800c5fe:	4c0c      	ldr	r4, [pc, #48]	; (800c630 <__libc_init_array+0x44>)
 800c600:	f001 fa5e 	bl	800dac0 <_init>
 800c604:	1b64      	subs	r4, r4, r5
 800c606:	10a4      	asrs	r4, r4, #2
 800c608:	2600      	movs	r6, #0
 800c60a:	42a6      	cmp	r6, r4
 800c60c:	d105      	bne.n	800c61a <__libc_init_array+0x2e>
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	f855 3b04 	ldr.w	r3, [r5], #4
 800c614:	4798      	blx	r3
 800c616:	3601      	adds	r6, #1
 800c618:	e7ee      	b.n	800c5f8 <__libc_init_array+0xc>
 800c61a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c61e:	4798      	blx	r3
 800c620:	3601      	adds	r6, #1
 800c622:	e7f2      	b.n	800c60a <__libc_init_array+0x1e>
 800c624:	0800df78 	.word	0x0800df78
 800c628:	0800df78 	.word	0x0800df78
 800c62c:	0800df78 	.word	0x0800df78
 800c630:	0800df7c 	.word	0x0800df7c

0800c634 <memcpy>:
 800c634:	440a      	add	r2, r1
 800c636:	4291      	cmp	r1, r2
 800c638:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c63c:	d100      	bne.n	800c640 <memcpy+0xc>
 800c63e:	4770      	bx	lr
 800c640:	b510      	push	{r4, lr}
 800c642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c64a:	4291      	cmp	r1, r2
 800c64c:	d1f9      	bne.n	800c642 <memcpy+0xe>
 800c64e:	bd10      	pop	{r4, pc}

0800c650 <memset>:
 800c650:	4402      	add	r2, r0
 800c652:	4603      	mov	r3, r0
 800c654:	4293      	cmp	r3, r2
 800c656:	d100      	bne.n	800c65a <memset+0xa>
 800c658:	4770      	bx	lr
 800c65a:	f803 1b01 	strb.w	r1, [r3], #1
 800c65e:	e7f9      	b.n	800c654 <memset+0x4>

0800c660 <iprintf>:
 800c660:	b40f      	push	{r0, r1, r2, r3}
 800c662:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <iprintf+0x2c>)
 800c664:	b513      	push	{r0, r1, r4, lr}
 800c666:	681c      	ldr	r4, [r3, #0]
 800c668:	b124      	cbz	r4, 800c674 <iprintf+0x14>
 800c66a:	69a3      	ldr	r3, [r4, #24]
 800c66c:	b913      	cbnz	r3, 800c674 <iprintf+0x14>
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 fa94 	bl	800cb9c <__sinit>
 800c674:	ab05      	add	r3, sp, #20
 800c676:	9a04      	ldr	r2, [sp, #16]
 800c678:	68a1      	ldr	r1, [r4, #8]
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	4620      	mov	r0, r4
 800c67e:	f000 fdf9 	bl	800d274 <_vfiprintf_r>
 800c682:	b002      	add	sp, #8
 800c684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c688:	b004      	add	sp, #16
 800c68a:	4770      	bx	lr
 800c68c:	20000028 	.word	0x20000028

0800c690 <putchar>:
 800c690:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <putchar+0x28>)
 800c692:	b513      	push	{r0, r1, r4, lr}
 800c694:	681c      	ldr	r4, [r3, #0]
 800c696:	4601      	mov	r1, r0
 800c698:	b134      	cbz	r4, 800c6a8 <putchar+0x18>
 800c69a:	69a3      	ldr	r3, [r4, #24]
 800c69c:	b923      	cbnz	r3, 800c6a8 <putchar+0x18>
 800c69e:	9001      	str	r0, [sp, #4]
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f000 fa7b 	bl	800cb9c <__sinit>
 800c6a6:	9901      	ldr	r1, [sp, #4]
 800c6a8:	68a2      	ldr	r2, [r4, #8]
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	b002      	add	sp, #8
 800c6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b2:	f001 b8a3 	b.w	800d7fc <_putc_r>
 800c6b6:	bf00      	nop
 800c6b8:	20000028 	.word	0x20000028

0800c6bc <_puts_r>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	460e      	mov	r6, r1
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	b118      	cbz	r0, 800c6cc <_puts_r+0x10>
 800c6c4:	6983      	ldr	r3, [r0, #24]
 800c6c6:	b90b      	cbnz	r3, 800c6cc <_puts_r+0x10>
 800c6c8:	f000 fa68 	bl	800cb9c <__sinit>
 800c6cc:	69ab      	ldr	r3, [r5, #24]
 800c6ce:	68ac      	ldr	r4, [r5, #8]
 800c6d0:	b913      	cbnz	r3, 800c6d8 <_puts_r+0x1c>
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f000 fa62 	bl	800cb9c <__sinit>
 800c6d8:	4b2c      	ldr	r3, [pc, #176]	; (800c78c <_puts_r+0xd0>)
 800c6da:	429c      	cmp	r4, r3
 800c6dc:	d120      	bne.n	800c720 <_puts_r+0x64>
 800c6de:	686c      	ldr	r4, [r5, #4]
 800c6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6e2:	07db      	lsls	r3, r3, #31
 800c6e4:	d405      	bmi.n	800c6f2 <_puts_r+0x36>
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	0598      	lsls	r0, r3, #22
 800c6ea:	d402      	bmi.n	800c6f2 <_puts_r+0x36>
 800c6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ee:	f000 faf3 	bl	800ccd8 <__retarget_lock_acquire_recursive>
 800c6f2:	89a3      	ldrh	r3, [r4, #12]
 800c6f4:	0719      	lsls	r1, r3, #28
 800c6f6:	d51d      	bpl.n	800c734 <_puts_r+0x78>
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	b1db      	cbz	r3, 800c734 <_puts_r+0x78>
 800c6fc:	3e01      	subs	r6, #1
 800c6fe:	68a3      	ldr	r3, [r4, #8]
 800c700:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c704:	3b01      	subs	r3, #1
 800c706:	60a3      	str	r3, [r4, #8]
 800c708:	bb39      	cbnz	r1, 800c75a <_puts_r+0x9e>
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	da38      	bge.n	800c780 <_puts_r+0xc4>
 800c70e:	4622      	mov	r2, r4
 800c710:	210a      	movs	r1, #10
 800c712:	4628      	mov	r0, r5
 800c714:	f000 f868 	bl	800c7e8 <__swbuf_r>
 800c718:	3001      	adds	r0, #1
 800c71a:	d011      	beq.n	800c740 <_puts_r+0x84>
 800c71c:	250a      	movs	r5, #10
 800c71e:	e011      	b.n	800c744 <_puts_r+0x88>
 800c720:	4b1b      	ldr	r3, [pc, #108]	; (800c790 <_puts_r+0xd4>)
 800c722:	429c      	cmp	r4, r3
 800c724:	d101      	bne.n	800c72a <_puts_r+0x6e>
 800c726:	68ac      	ldr	r4, [r5, #8]
 800c728:	e7da      	b.n	800c6e0 <_puts_r+0x24>
 800c72a:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <_puts_r+0xd8>)
 800c72c:	429c      	cmp	r4, r3
 800c72e:	bf08      	it	eq
 800c730:	68ec      	ldreq	r4, [r5, #12]
 800c732:	e7d5      	b.n	800c6e0 <_puts_r+0x24>
 800c734:	4621      	mov	r1, r4
 800c736:	4628      	mov	r0, r5
 800c738:	f000 f8a8 	bl	800c88c <__swsetup_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d0dd      	beq.n	800c6fc <_puts_r+0x40>
 800c740:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c746:	07da      	lsls	r2, r3, #31
 800c748:	d405      	bmi.n	800c756 <_puts_r+0x9a>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	059b      	lsls	r3, r3, #22
 800c74e:	d402      	bmi.n	800c756 <_puts_r+0x9a>
 800c750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c752:	f000 fac2 	bl	800ccda <__retarget_lock_release_recursive>
 800c756:	4628      	mov	r0, r5
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	da04      	bge.n	800c768 <_puts_r+0xac>
 800c75e:	69a2      	ldr	r2, [r4, #24]
 800c760:	429a      	cmp	r2, r3
 800c762:	dc06      	bgt.n	800c772 <_puts_r+0xb6>
 800c764:	290a      	cmp	r1, #10
 800c766:	d004      	beq.n	800c772 <_puts_r+0xb6>
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	6022      	str	r2, [r4, #0]
 800c76e:	7019      	strb	r1, [r3, #0]
 800c770:	e7c5      	b.n	800c6fe <_puts_r+0x42>
 800c772:	4622      	mov	r2, r4
 800c774:	4628      	mov	r0, r5
 800c776:	f000 f837 	bl	800c7e8 <__swbuf_r>
 800c77a:	3001      	adds	r0, #1
 800c77c:	d1bf      	bne.n	800c6fe <_puts_r+0x42>
 800c77e:	e7df      	b.n	800c740 <_puts_r+0x84>
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	250a      	movs	r5, #10
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	6022      	str	r2, [r4, #0]
 800c788:	701d      	strb	r5, [r3, #0]
 800c78a:	e7db      	b.n	800c744 <_puts_r+0x88>
 800c78c:	0800defc 	.word	0x0800defc
 800c790:	0800df1c 	.word	0x0800df1c
 800c794:	0800dedc 	.word	0x0800dedc

0800c798 <puts>:
 800c798:	4b02      	ldr	r3, [pc, #8]	; (800c7a4 <puts+0xc>)
 800c79a:	4601      	mov	r1, r0
 800c79c:	6818      	ldr	r0, [r3, #0]
 800c79e:	f7ff bf8d 	b.w	800c6bc <_puts_r>
 800c7a2:	bf00      	nop
 800c7a4:	20000028 	.word	0x20000028

0800c7a8 <siprintf>:
 800c7a8:	b40e      	push	{r1, r2, r3}
 800c7aa:	b500      	push	{lr}
 800c7ac:	b09c      	sub	sp, #112	; 0x70
 800c7ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c7b0:	9002      	str	r0, [sp, #8]
 800c7b2:	9006      	str	r0, [sp, #24]
 800c7b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7b8:	4809      	ldr	r0, [pc, #36]	; (800c7e0 <siprintf+0x38>)
 800c7ba:	9107      	str	r1, [sp, #28]
 800c7bc:	9104      	str	r1, [sp, #16]
 800c7be:	4909      	ldr	r1, [pc, #36]	; (800c7e4 <siprintf+0x3c>)
 800c7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c4:	9105      	str	r1, [sp, #20]
 800c7c6:	6800      	ldr	r0, [r0, #0]
 800c7c8:	9301      	str	r3, [sp, #4]
 800c7ca:	a902      	add	r1, sp, #8
 800c7cc:	f000 fc28 	bl	800d020 <_svfiprintf_r>
 800c7d0:	9b02      	ldr	r3, [sp, #8]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]
 800c7d6:	b01c      	add	sp, #112	; 0x70
 800c7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7dc:	b003      	add	sp, #12
 800c7de:	4770      	bx	lr
 800c7e0:	20000028 	.word	0x20000028
 800c7e4:	ffff0208 	.word	0xffff0208

0800c7e8 <__swbuf_r>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	460e      	mov	r6, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	b118      	cbz	r0, 800c7fa <__swbuf_r+0x12>
 800c7f2:	6983      	ldr	r3, [r0, #24]
 800c7f4:	b90b      	cbnz	r3, 800c7fa <__swbuf_r+0x12>
 800c7f6:	f000 f9d1 	bl	800cb9c <__sinit>
 800c7fa:	4b21      	ldr	r3, [pc, #132]	; (800c880 <__swbuf_r+0x98>)
 800c7fc:	429c      	cmp	r4, r3
 800c7fe:	d12b      	bne.n	800c858 <__swbuf_r+0x70>
 800c800:	686c      	ldr	r4, [r5, #4]
 800c802:	69a3      	ldr	r3, [r4, #24]
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	071a      	lsls	r2, r3, #28
 800c80a:	d52f      	bpl.n	800c86c <__swbuf_r+0x84>
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	b36b      	cbz	r3, 800c86c <__swbuf_r+0x84>
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	6820      	ldr	r0, [r4, #0]
 800c814:	1ac0      	subs	r0, r0, r3
 800c816:	6963      	ldr	r3, [r4, #20]
 800c818:	b2f6      	uxtb	r6, r6
 800c81a:	4283      	cmp	r3, r0
 800c81c:	4637      	mov	r7, r6
 800c81e:	dc04      	bgt.n	800c82a <__swbuf_r+0x42>
 800c820:	4621      	mov	r1, r4
 800c822:	4628      	mov	r0, r5
 800c824:	f000 f926 	bl	800ca74 <_fflush_r>
 800c828:	bb30      	cbnz	r0, 800c878 <__swbuf_r+0x90>
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	60a3      	str	r3, [r4, #8]
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	701e      	strb	r6, [r3, #0]
 800c838:	6963      	ldr	r3, [r4, #20]
 800c83a:	3001      	adds	r0, #1
 800c83c:	4283      	cmp	r3, r0
 800c83e:	d004      	beq.n	800c84a <__swbuf_r+0x62>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	07db      	lsls	r3, r3, #31
 800c844:	d506      	bpl.n	800c854 <__swbuf_r+0x6c>
 800c846:	2e0a      	cmp	r6, #10
 800c848:	d104      	bne.n	800c854 <__swbuf_r+0x6c>
 800c84a:	4621      	mov	r1, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 f911 	bl	800ca74 <_fflush_r>
 800c852:	b988      	cbnz	r0, 800c878 <__swbuf_r+0x90>
 800c854:	4638      	mov	r0, r7
 800c856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c858:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <__swbuf_r+0x9c>)
 800c85a:	429c      	cmp	r4, r3
 800c85c:	d101      	bne.n	800c862 <__swbuf_r+0x7a>
 800c85e:	68ac      	ldr	r4, [r5, #8]
 800c860:	e7cf      	b.n	800c802 <__swbuf_r+0x1a>
 800c862:	4b09      	ldr	r3, [pc, #36]	; (800c888 <__swbuf_r+0xa0>)
 800c864:	429c      	cmp	r4, r3
 800c866:	bf08      	it	eq
 800c868:	68ec      	ldreq	r4, [r5, #12]
 800c86a:	e7ca      	b.n	800c802 <__swbuf_r+0x1a>
 800c86c:	4621      	mov	r1, r4
 800c86e:	4628      	mov	r0, r5
 800c870:	f000 f80c 	bl	800c88c <__swsetup_r>
 800c874:	2800      	cmp	r0, #0
 800c876:	d0cb      	beq.n	800c810 <__swbuf_r+0x28>
 800c878:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c87c:	e7ea      	b.n	800c854 <__swbuf_r+0x6c>
 800c87e:	bf00      	nop
 800c880:	0800defc 	.word	0x0800defc
 800c884:	0800df1c 	.word	0x0800df1c
 800c888:	0800dedc 	.word	0x0800dedc

0800c88c <__swsetup_r>:
 800c88c:	4b32      	ldr	r3, [pc, #200]	; (800c958 <__swsetup_r+0xcc>)
 800c88e:	b570      	push	{r4, r5, r6, lr}
 800c890:	681d      	ldr	r5, [r3, #0]
 800c892:	4606      	mov	r6, r0
 800c894:	460c      	mov	r4, r1
 800c896:	b125      	cbz	r5, 800c8a2 <__swsetup_r+0x16>
 800c898:	69ab      	ldr	r3, [r5, #24]
 800c89a:	b913      	cbnz	r3, 800c8a2 <__swsetup_r+0x16>
 800c89c:	4628      	mov	r0, r5
 800c89e:	f000 f97d 	bl	800cb9c <__sinit>
 800c8a2:	4b2e      	ldr	r3, [pc, #184]	; (800c95c <__swsetup_r+0xd0>)
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	d10f      	bne.n	800c8c8 <__swsetup_r+0x3c>
 800c8a8:	686c      	ldr	r4, [r5, #4]
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b0:	0719      	lsls	r1, r3, #28
 800c8b2:	d42c      	bmi.n	800c90e <__swsetup_r+0x82>
 800c8b4:	06dd      	lsls	r5, r3, #27
 800c8b6:	d411      	bmi.n	800c8dc <__swsetup_r+0x50>
 800c8b8:	2309      	movs	r3, #9
 800c8ba:	6033      	str	r3, [r6, #0]
 800c8bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c6:	e03e      	b.n	800c946 <__swsetup_r+0xba>
 800c8c8:	4b25      	ldr	r3, [pc, #148]	; (800c960 <__swsetup_r+0xd4>)
 800c8ca:	429c      	cmp	r4, r3
 800c8cc:	d101      	bne.n	800c8d2 <__swsetup_r+0x46>
 800c8ce:	68ac      	ldr	r4, [r5, #8]
 800c8d0:	e7eb      	b.n	800c8aa <__swsetup_r+0x1e>
 800c8d2:	4b24      	ldr	r3, [pc, #144]	; (800c964 <__swsetup_r+0xd8>)
 800c8d4:	429c      	cmp	r4, r3
 800c8d6:	bf08      	it	eq
 800c8d8:	68ec      	ldreq	r4, [r5, #12]
 800c8da:	e7e6      	b.n	800c8aa <__swsetup_r+0x1e>
 800c8dc:	0758      	lsls	r0, r3, #29
 800c8de:	d512      	bpl.n	800c906 <__swsetup_r+0x7a>
 800c8e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e2:	b141      	cbz	r1, 800c8f6 <__swsetup_r+0x6a>
 800c8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e8:	4299      	cmp	r1, r3
 800c8ea:	d002      	beq.n	800c8f2 <__swsetup_r+0x66>
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f000 fa5b 	bl	800cda8 <_free_r>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	6363      	str	r3, [r4, #52]	; 0x34
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8fc:	81a3      	strh	r3, [r4, #12]
 800c8fe:	2300      	movs	r3, #0
 800c900:	6063      	str	r3, [r4, #4]
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	6023      	str	r3, [r4, #0]
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	f043 0308 	orr.w	r3, r3, #8
 800c90c:	81a3      	strh	r3, [r4, #12]
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	b94b      	cbnz	r3, 800c926 <__swsetup_r+0x9a>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c91c:	d003      	beq.n	800c926 <__swsetup_r+0x9a>
 800c91e:	4621      	mov	r1, r4
 800c920:	4630      	mov	r0, r6
 800c922:	f000 fa01 	bl	800cd28 <__smakebuf_r>
 800c926:	89a0      	ldrh	r0, [r4, #12]
 800c928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c92c:	f010 0301 	ands.w	r3, r0, #1
 800c930:	d00a      	beq.n	800c948 <__swsetup_r+0xbc>
 800c932:	2300      	movs	r3, #0
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6963      	ldr	r3, [r4, #20]
 800c938:	425b      	negs	r3, r3
 800c93a:	61a3      	str	r3, [r4, #24]
 800c93c:	6923      	ldr	r3, [r4, #16]
 800c93e:	b943      	cbnz	r3, 800c952 <__swsetup_r+0xc6>
 800c940:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c944:	d1ba      	bne.n	800c8bc <__swsetup_r+0x30>
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	0781      	lsls	r1, r0, #30
 800c94a:	bf58      	it	pl
 800c94c:	6963      	ldrpl	r3, [r4, #20]
 800c94e:	60a3      	str	r3, [r4, #8]
 800c950:	e7f4      	b.n	800c93c <__swsetup_r+0xb0>
 800c952:	2000      	movs	r0, #0
 800c954:	e7f7      	b.n	800c946 <__swsetup_r+0xba>
 800c956:	bf00      	nop
 800c958:	20000028 	.word	0x20000028
 800c95c:	0800defc 	.word	0x0800defc
 800c960:	0800df1c 	.word	0x0800df1c
 800c964:	0800dedc 	.word	0x0800dedc

0800c968 <__sflush_r>:
 800c968:	898a      	ldrh	r2, [r1, #12]
 800c96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c96e:	4605      	mov	r5, r0
 800c970:	0710      	lsls	r0, r2, #28
 800c972:	460c      	mov	r4, r1
 800c974:	d458      	bmi.n	800ca28 <__sflush_r+0xc0>
 800c976:	684b      	ldr	r3, [r1, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dc05      	bgt.n	800c988 <__sflush_r+0x20>
 800c97c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dc02      	bgt.n	800c988 <__sflush_r+0x20>
 800c982:	2000      	movs	r0, #0
 800c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c98a:	2e00      	cmp	r6, #0
 800c98c:	d0f9      	beq.n	800c982 <__sflush_r+0x1a>
 800c98e:	2300      	movs	r3, #0
 800c990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c994:	682f      	ldr	r7, [r5, #0]
 800c996:	602b      	str	r3, [r5, #0]
 800c998:	d032      	beq.n	800ca00 <__sflush_r+0x98>
 800c99a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	075a      	lsls	r2, r3, #29
 800c9a0:	d505      	bpl.n	800c9ae <__sflush_r+0x46>
 800c9a2:	6863      	ldr	r3, [r4, #4]
 800c9a4:	1ac0      	subs	r0, r0, r3
 800c9a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9a8:	b10b      	cbz	r3, 800c9ae <__sflush_r+0x46>
 800c9aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9ac:	1ac0      	subs	r0, r0, r3
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9b4:	6a21      	ldr	r1, [r4, #32]
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	47b0      	blx	r6
 800c9ba:	1c43      	adds	r3, r0, #1
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	d106      	bne.n	800c9ce <__sflush_r+0x66>
 800c9c0:	6829      	ldr	r1, [r5, #0]
 800c9c2:	291d      	cmp	r1, #29
 800c9c4:	d82c      	bhi.n	800ca20 <__sflush_r+0xb8>
 800c9c6:	4a2a      	ldr	r2, [pc, #168]	; (800ca70 <__sflush_r+0x108>)
 800c9c8:	40ca      	lsrs	r2, r1
 800c9ca:	07d6      	lsls	r6, r2, #31
 800c9cc:	d528      	bpl.n	800ca20 <__sflush_r+0xb8>
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	6062      	str	r2, [r4, #4]
 800c9d2:	04d9      	lsls	r1, r3, #19
 800c9d4:	6922      	ldr	r2, [r4, #16]
 800c9d6:	6022      	str	r2, [r4, #0]
 800c9d8:	d504      	bpl.n	800c9e4 <__sflush_r+0x7c>
 800c9da:	1c42      	adds	r2, r0, #1
 800c9dc:	d101      	bne.n	800c9e2 <__sflush_r+0x7a>
 800c9de:	682b      	ldr	r3, [r5, #0]
 800c9e0:	b903      	cbnz	r3, 800c9e4 <__sflush_r+0x7c>
 800c9e2:	6560      	str	r0, [r4, #84]	; 0x54
 800c9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9e6:	602f      	str	r7, [r5, #0]
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	d0ca      	beq.n	800c982 <__sflush_r+0x1a>
 800c9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	d002      	beq.n	800c9fa <__sflush_r+0x92>
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f000 f9d7 	bl	800cda8 <_free_r>
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	6360      	str	r0, [r4, #52]	; 0x34
 800c9fe:	e7c1      	b.n	800c984 <__sflush_r+0x1c>
 800ca00:	6a21      	ldr	r1, [r4, #32]
 800ca02:	2301      	movs	r3, #1
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b0      	blx	r6
 800ca08:	1c41      	adds	r1, r0, #1
 800ca0a:	d1c7      	bne.n	800c99c <__sflush_r+0x34>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0c4      	beq.n	800c99c <__sflush_r+0x34>
 800ca12:	2b1d      	cmp	r3, #29
 800ca14:	d001      	beq.n	800ca1a <__sflush_r+0xb2>
 800ca16:	2b16      	cmp	r3, #22
 800ca18:	d101      	bne.n	800ca1e <__sflush_r+0xb6>
 800ca1a:	602f      	str	r7, [r5, #0]
 800ca1c:	e7b1      	b.n	800c982 <__sflush_r+0x1a>
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca24:	81a3      	strh	r3, [r4, #12]
 800ca26:	e7ad      	b.n	800c984 <__sflush_r+0x1c>
 800ca28:	690f      	ldr	r7, [r1, #16]
 800ca2a:	2f00      	cmp	r7, #0
 800ca2c:	d0a9      	beq.n	800c982 <__sflush_r+0x1a>
 800ca2e:	0793      	lsls	r3, r2, #30
 800ca30:	680e      	ldr	r6, [r1, #0]
 800ca32:	bf08      	it	eq
 800ca34:	694b      	ldreq	r3, [r1, #20]
 800ca36:	600f      	str	r7, [r1, #0]
 800ca38:	bf18      	it	ne
 800ca3a:	2300      	movne	r3, #0
 800ca3c:	eba6 0807 	sub.w	r8, r6, r7
 800ca40:	608b      	str	r3, [r1, #8]
 800ca42:	f1b8 0f00 	cmp.w	r8, #0
 800ca46:	dd9c      	ble.n	800c982 <__sflush_r+0x1a>
 800ca48:	6a21      	ldr	r1, [r4, #32]
 800ca4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca4c:	4643      	mov	r3, r8
 800ca4e:	463a      	mov	r2, r7
 800ca50:	4628      	mov	r0, r5
 800ca52:	47b0      	blx	r6
 800ca54:	2800      	cmp	r0, #0
 800ca56:	dc06      	bgt.n	800ca66 <__sflush_r+0xfe>
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca5e:	81a3      	strh	r3, [r4, #12]
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca64:	e78e      	b.n	800c984 <__sflush_r+0x1c>
 800ca66:	4407      	add	r7, r0
 800ca68:	eba8 0800 	sub.w	r8, r8, r0
 800ca6c:	e7e9      	b.n	800ca42 <__sflush_r+0xda>
 800ca6e:	bf00      	nop
 800ca70:	20400001 	.word	0x20400001

0800ca74 <_fflush_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	690b      	ldr	r3, [r1, #16]
 800ca78:	4605      	mov	r5, r0
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	b913      	cbnz	r3, 800ca84 <_fflush_r+0x10>
 800ca7e:	2500      	movs	r5, #0
 800ca80:	4628      	mov	r0, r5
 800ca82:	bd38      	pop	{r3, r4, r5, pc}
 800ca84:	b118      	cbz	r0, 800ca8e <_fflush_r+0x1a>
 800ca86:	6983      	ldr	r3, [r0, #24]
 800ca88:	b90b      	cbnz	r3, 800ca8e <_fflush_r+0x1a>
 800ca8a:	f000 f887 	bl	800cb9c <__sinit>
 800ca8e:	4b14      	ldr	r3, [pc, #80]	; (800cae0 <_fflush_r+0x6c>)
 800ca90:	429c      	cmp	r4, r3
 800ca92:	d11b      	bne.n	800cacc <_fflush_r+0x58>
 800ca94:	686c      	ldr	r4, [r5, #4]
 800ca96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0ef      	beq.n	800ca7e <_fflush_r+0xa>
 800ca9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800caa0:	07d0      	lsls	r0, r2, #31
 800caa2:	d404      	bmi.n	800caae <_fflush_r+0x3a>
 800caa4:	0599      	lsls	r1, r3, #22
 800caa6:	d402      	bmi.n	800caae <_fflush_r+0x3a>
 800caa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caaa:	f000 f915 	bl	800ccd8 <__retarget_lock_acquire_recursive>
 800caae:	4628      	mov	r0, r5
 800cab0:	4621      	mov	r1, r4
 800cab2:	f7ff ff59 	bl	800c968 <__sflush_r>
 800cab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cab8:	07da      	lsls	r2, r3, #31
 800caba:	4605      	mov	r5, r0
 800cabc:	d4e0      	bmi.n	800ca80 <_fflush_r+0xc>
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	059b      	lsls	r3, r3, #22
 800cac2:	d4dd      	bmi.n	800ca80 <_fflush_r+0xc>
 800cac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cac6:	f000 f908 	bl	800ccda <__retarget_lock_release_recursive>
 800caca:	e7d9      	b.n	800ca80 <_fflush_r+0xc>
 800cacc:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <_fflush_r+0x70>)
 800cace:	429c      	cmp	r4, r3
 800cad0:	d101      	bne.n	800cad6 <_fflush_r+0x62>
 800cad2:	68ac      	ldr	r4, [r5, #8]
 800cad4:	e7df      	b.n	800ca96 <_fflush_r+0x22>
 800cad6:	4b04      	ldr	r3, [pc, #16]	; (800cae8 <_fflush_r+0x74>)
 800cad8:	429c      	cmp	r4, r3
 800cada:	bf08      	it	eq
 800cadc:	68ec      	ldreq	r4, [r5, #12]
 800cade:	e7da      	b.n	800ca96 <_fflush_r+0x22>
 800cae0:	0800defc 	.word	0x0800defc
 800cae4:	0800df1c 	.word	0x0800df1c
 800cae8:	0800dedc 	.word	0x0800dedc

0800caec <std>:
 800caec:	2300      	movs	r3, #0
 800caee:	b510      	push	{r4, lr}
 800caf0:	4604      	mov	r4, r0
 800caf2:	e9c0 3300 	strd	r3, r3, [r0]
 800caf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cafa:	6083      	str	r3, [r0, #8]
 800cafc:	8181      	strh	r1, [r0, #12]
 800cafe:	6643      	str	r3, [r0, #100]	; 0x64
 800cb00:	81c2      	strh	r2, [r0, #14]
 800cb02:	6183      	str	r3, [r0, #24]
 800cb04:	4619      	mov	r1, r3
 800cb06:	2208      	movs	r2, #8
 800cb08:	305c      	adds	r0, #92	; 0x5c
 800cb0a:	f7ff fda1 	bl	800c650 <memset>
 800cb0e:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <std+0x38>)
 800cb10:	6263      	str	r3, [r4, #36]	; 0x24
 800cb12:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <std+0x3c>)
 800cb14:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb16:	4b05      	ldr	r3, [pc, #20]	; (800cb2c <std+0x40>)
 800cb18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb1a:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <std+0x44>)
 800cb1c:	6224      	str	r4, [r4, #32]
 800cb1e:	6323      	str	r3, [r4, #48]	; 0x30
 800cb20:	bd10      	pop	{r4, pc}
 800cb22:	bf00      	nop
 800cb24:	0800d8ad 	.word	0x0800d8ad
 800cb28:	0800d8cf 	.word	0x0800d8cf
 800cb2c:	0800d907 	.word	0x0800d907
 800cb30:	0800d92b 	.word	0x0800d92b

0800cb34 <_cleanup_r>:
 800cb34:	4901      	ldr	r1, [pc, #4]	; (800cb3c <_cleanup_r+0x8>)
 800cb36:	f000 b8af 	b.w	800cc98 <_fwalk_reent>
 800cb3a:	bf00      	nop
 800cb3c:	0800ca75 	.word	0x0800ca75

0800cb40 <__sfmoreglue>:
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	2268      	movs	r2, #104	; 0x68
 800cb44:	1e4d      	subs	r5, r1, #1
 800cb46:	4355      	muls	r5, r2
 800cb48:	460e      	mov	r6, r1
 800cb4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb4e:	f000 f997 	bl	800ce80 <_malloc_r>
 800cb52:	4604      	mov	r4, r0
 800cb54:	b140      	cbz	r0, 800cb68 <__sfmoreglue+0x28>
 800cb56:	2100      	movs	r1, #0
 800cb58:	e9c0 1600 	strd	r1, r6, [r0]
 800cb5c:	300c      	adds	r0, #12
 800cb5e:	60a0      	str	r0, [r4, #8]
 800cb60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb64:	f7ff fd74 	bl	800c650 <memset>
 800cb68:	4620      	mov	r0, r4
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}

0800cb6c <__sfp_lock_acquire>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	; (800cb74 <__sfp_lock_acquire+0x8>)
 800cb6e:	f000 b8b3 	b.w	800ccd8 <__retarget_lock_acquire_recursive>
 800cb72:	bf00      	nop
 800cb74:	20001281 	.word	0x20001281

0800cb78 <__sfp_lock_release>:
 800cb78:	4801      	ldr	r0, [pc, #4]	; (800cb80 <__sfp_lock_release+0x8>)
 800cb7a:	f000 b8ae 	b.w	800ccda <__retarget_lock_release_recursive>
 800cb7e:	bf00      	nop
 800cb80:	20001281 	.word	0x20001281

0800cb84 <__sinit_lock_acquire>:
 800cb84:	4801      	ldr	r0, [pc, #4]	; (800cb8c <__sinit_lock_acquire+0x8>)
 800cb86:	f000 b8a7 	b.w	800ccd8 <__retarget_lock_acquire_recursive>
 800cb8a:	bf00      	nop
 800cb8c:	20001282 	.word	0x20001282

0800cb90 <__sinit_lock_release>:
 800cb90:	4801      	ldr	r0, [pc, #4]	; (800cb98 <__sinit_lock_release+0x8>)
 800cb92:	f000 b8a2 	b.w	800ccda <__retarget_lock_release_recursive>
 800cb96:	bf00      	nop
 800cb98:	20001282 	.word	0x20001282

0800cb9c <__sinit>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	4604      	mov	r4, r0
 800cba0:	f7ff fff0 	bl	800cb84 <__sinit_lock_acquire>
 800cba4:	69a3      	ldr	r3, [r4, #24]
 800cba6:	b11b      	cbz	r3, 800cbb0 <__sinit+0x14>
 800cba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbac:	f7ff bff0 	b.w	800cb90 <__sinit_lock_release>
 800cbb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbb4:	6523      	str	r3, [r4, #80]	; 0x50
 800cbb6:	4b13      	ldr	r3, [pc, #76]	; (800cc04 <__sinit+0x68>)
 800cbb8:	4a13      	ldr	r2, [pc, #76]	; (800cc08 <__sinit+0x6c>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbbe:	42a3      	cmp	r3, r4
 800cbc0:	bf04      	itt	eq
 800cbc2:	2301      	moveq	r3, #1
 800cbc4:	61a3      	streq	r3, [r4, #24]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f000 f820 	bl	800cc0c <__sfp>
 800cbcc:	6060      	str	r0, [r4, #4]
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 f81c 	bl	800cc0c <__sfp>
 800cbd4:	60a0      	str	r0, [r4, #8]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 f818 	bl	800cc0c <__sfp>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	60e0      	str	r0, [r4, #12]
 800cbe0:	2104      	movs	r1, #4
 800cbe2:	6860      	ldr	r0, [r4, #4]
 800cbe4:	f7ff ff82 	bl	800caec <std>
 800cbe8:	68a0      	ldr	r0, [r4, #8]
 800cbea:	2201      	movs	r2, #1
 800cbec:	2109      	movs	r1, #9
 800cbee:	f7ff ff7d 	bl	800caec <std>
 800cbf2:	68e0      	ldr	r0, [r4, #12]
 800cbf4:	2202      	movs	r2, #2
 800cbf6:	2112      	movs	r1, #18
 800cbf8:	f7ff ff78 	bl	800caec <std>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	61a3      	str	r3, [r4, #24]
 800cc00:	e7d2      	b.n	800cba8 <__sinit+0xc>
 800cc02:	bf00      	nop
 800cc04:	0800ded8 	.word	0x0800ded8
 800cc08:	0800cb35 	.word	0x0800cb35

0800cc0c <__sfp>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	4607      	mov	r7, r0
 800cc10:	f7ff ffac 	bl	800cb6c <__sfp_lock_acquire>
 800cc14:	4b1e      	ldr	r3, [pc, #120]	; (800cc90 <__sfp+0x84>)
 800cc16:	681e      	ldr	r6, [r3, #0]
 800cc18:	69b3      	ldr	r3, [r6, #24]
 800cc1a:	b913      	cbnz	r3, 800cc22 <__sfp+0x16>
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff ffbd 	bl	800cb9c <__sinit>
 800cc22:	3648      	adds	r6, #72	; 0x48
 800cc24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	d503      	bpl.n	800cc34 <__sfp+0x28>
 800cc2c:	6833      	ldr	r3, [r6, #0]
 800cc2e:	b30b      	cbz	r3, 800cc74 <__sfp+0x68>
 800cc30:	6836      	ldr	r6, [r6, #0]
 800cc32:	e7f7      	b.n	800cc24 <__sfp+0x18>
 800cc34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc38:	b9d5      	cbnz	r5, 800cc70 <__sfp+0x64>
 800cc3a:	4b16      	ldr	r3, [pc, #88]	; (800cc94 <__sfp+0x88>)
 800cc3c:	60e3      	str	r3, [r4, #12]
 800cc3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc42:	6665      	str	r5, [r4, #100]	; 0x64
 800cc44:	f000 f847 	bl	800ccd6 <__retarget_lock_init_recursive>
 800cc48:	f7ff ff96 	bl	800cb78 <__sfp_lock_release>
 800cc4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc54:	6025      	str	r5, [r4, #0]
 800cc56:	61a5      	str	r5, [r4, #24]
 800cc58:	2208      	movs	r2, #8
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc60:	f7ff fcf6 	bl	800c650 <memset>
 800cc64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc70:	3468      	adds	r4, #104	; 0x68
 800cc72:	e7d9      	b.n	800cc28 <__sfp+0x1c>
 800cc74:	2104      	movs	r1, #4
 800cc76:	4638      	mov	r0, r7
 800cc78:	f7ff ff62 	bl	800cb40 <__sfmoreglue>
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	6030      	str	r0, [r6, #0]
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d1d5      	bne.n	800cc30 <__sfp+0x24>
 800cc84:	f7ff ff78 	bl	800cb78 <__sfp_lock_release>
 800cc88:	230c      	movs	r3, #12
 800cc8a:	603b      	str	r3, [r7, #0]
 800cc8c:	e7ee      	b.n	800cc6c <__sfp+0x60>
 800cc8e:	bf00      	nop
 800cc90:	0800ded8 	.word	0x0800ded8
 800cc94:	ffff0001 	.word	0xffff0001

0800cc98 <_fwalk_reent>:
 800cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	4688      	mov	r8, r1
 800cca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cca4:	2700      	movs	r7, #0
 800cca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccaa:	f1b9 0901 	subs.w	r9, r9, #1
 800ccae:	d505      	bpl.n	800ccbc <_fwalk_reent+0x24>
 800ccb0:	6824      	ldr	r4, [r4, #0]
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	d1f7      	bne.n	800cca6 <_fwalk_reent+0xe>
 800ccb6:	4638      	mov	r0, r7
 800ccb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccbc:	89ab      	ldrh	r3, [r5, #12]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d907      	bls.n	800ccd2 <_fwalk_reent+0x3a>
 800ccc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	d003      	beq.n	800ccd2 <_fwalk_reent+0x3a>
 800ccca:	4629      	mov	r1, r5
 800cccc:	4630      	mov	r0, r6
 800ccce:	47c0      	blx	r8
 800ccd0:	4307      	orrs	r7, r0
 800ccd2:	3568      	adds	r5, #104	; 0x68
 800ccd4:	e7e9      	b.n	800ccaa <_fwalk_reent+0x12>

0800ccd6 <__retarget_lock_init_recursive>:
 800ccd6:	4770      	bx	lr

0800ccd8 <__retarget_lock_acquire_recursive>:
 800ccd8:	4770      	bx	lr

0800ccda <__retarget_lock_release_recursive>:
 800ccda:	4770      	bx	lr

0800ccdc <__swhatbuf_r>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	460e      	mov	r6, r1
 800cce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce4:	2900      	cmp	r1, #0
 800cce6:	b096      	sub	sp, #88	; 0x58
 800cce8:	4614      	mov	r4, r2
 800ccea:	461d      	mov	r5, r3
 800ccec:	da08      	bge.n	800cd00 <__swhatbuf_r+0x24>
 800ccee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	602a      	str	r2, [r5, #0]
 800ccf6:	061a      	lsls	r2, r3, #24
 800ccf8:	d410      	bmi.n	800cd1c <__swhatbuf_r+0x40>
 800ccfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccfe:	e00e      	b.n	800cd1e <__swhatbuf_r+0x42>
 800cd00:	466a      	mov	r2, sp
 800cd02:	f000 fe39 	bl	800d978 <_fstat_r>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	dbf1      	blt.n	800ccee <__swhatbuf_r+0x12>
 800cd0a:	9a01      	ldr	r2, [sp, #4]
 800cd0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd14:	425a      	negs	r2, r3
 800cd16:	415a      	adcs	r2, r3
 800cd18:	602a      	str	r2, [r5, #0]
 800cd1a:	e7ee      	b.n	800ccfa <__swhatbuf_r+0x1e>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	2000      	movs	r0, #0
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	b016      	add	sp, #88	; 0x58
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd28 <__smakebuf_r>:
 800cd28:	898b      	ldrh	r3, [r1, #12]
 800cd2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd2c:	079d      	lsls	r5, r3, #30
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460c      	mov	r4, r1
 800cd32:	d507      	bpl.n	800cd44 <__smakebuf_r+0x1c>
 800cd34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	6123      	str	r3, [r4, #16]
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	6163      	str	r3, [r4, #20]
 800cd40:	b002      	add	sp, #8
 800cd42:	bd70      	pop	{r4, r5, r6, pc}
 800cd44:	ab01      	add	r3, sp, #4
 800cd46:	466a      	mov	r2, sp
 800cd48:	f7ff ffc8 	bl	800ccdc <__swhatbuf_r>
 800cd4c:	9900      	ldr	r1, [sp, #0]
 800cd4e:	4605      	mov	r5, r0
 800cd50:	4630      	mov	r0, r6
 800cd52:	f000 f895 	bl	800ce80 <_malloc_r>
 800cd56:	b948      	cbnz	r0, 800cd6c <__smakebuf_r+0x44>
 800cd58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd5c:	059a      	lsls	r2, r3, #22
 800cd5e:	d4ef      	bmi.n	800cd40 <__smakebuf_r+0x18>
 800cd60:	f023 0303 	bic.w	r3, r3, #3
 800cd64:	f043 0302 	orr.w	r3, r3, #2
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	e7e3      	b.n	800cd34 <__smakebuf_r+0xc>
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <__smakebuf_r+0x7c>)
 800cd6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	6020      	str	r0, [r4, #0]
 800cd74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd78:	81a3      	strh	r3, [r4, #12]
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	6163      	str	r3, [r4, #20]
 800cd7e:	9b01      	ldr	r3, [sp, #4]
 800cd80:	6120      	str	r0, [r4, #16]
 800cd82:	b15b      	cbz	r3, 800cd9c <__smakebuf_r+0x74>
 800cd84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f000 fe07 	bl	800d99c <_isatty_r>
 800cd8e:	b128      	cbz	r0, 800cd9c <__smakebuf_r+0x74>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f023 0303 	bic.w	r3, r3, #3
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	89a0      	ldrh	r0, [r4, #12]
 800cd9e:	4305      	orrs	r5, r0
 800cda0:	81a5      	strh	r5, [r4, #12]
 800cda2:	e7cd      	b.n	800cd40 <__smakebuf_r+0x18>
 800cda4:	0800cb35 	.word	0x0800cb35

0800cda8 <_free_r>:
 800cda8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdaa:	2900      	cmp	r1, #0
 800cdac:	d044      	beq.n	800ce38 <_free_r+0x90>
 800cdae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdb2:	9001      	str	r0, [sp, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f1a1 0404 	sub.w	r4, r1, #4
 800cdba:	bfb8      	it	lt
 800cdbc:	18e4      	addlt	r4, r4, r3
 800cdbe:	f000 fe29 	bl	800da14 <__malloc_lock>
 800cdc2:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <_free_r+0x94>)
 800cdc4:	9801      	ldr	r0, [sp, #4]
 800cdc6:	6813      	ldr	r3, [r2, #0]
 800cdc8:	b933      	cbnz	r3, 800cdd8 <_free_r+0x30>
 800cdca:	6063      	str	r3, [r4, #4]
 800cdcc:	6014      	str	r4, [r2, #0]
 800cdce:	b003      	add	sp, #12
 800cdd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdd4:	f000 be24 	b.w	800da20 <__malloc_unlock>
 800cdd8:	42a3      	cmp	r3, r4
 800cdda:	d908      	bls.n	800cdee <_free_r+0x46>
 800cddc:	6825      	ldr	r5, [r4, #0]
 800cdde:	1961      	adds	r1, r4, r5
 800cde0:	428b      	cmp	r3, r1
 800cde2:	bf01      	itttt	eq
 800cde4:	6819      	ldreq	r1, [r3, #0]
 800cde6:	685b      	ldreq	r3, [r3, #4]
 800cde8:	1949      	addeq	r1, r1, r5
 800cdea:	6021      	streq	r1, [r4, #0]
 800cdec:	e7ed      	b.n	800cdca <_free_r+0x22>
 800cdee:	461a      	mov	r2, r3
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	b10b      	cbz	r3, 800cdf8 <_free_r+0x50>
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	d9fa      	bls.n	800cdee <_free_r+0x46>
 800cdf8:	6811      	ldr	r1, [r2, #0]
 800cdfa:	1855      	adds	r5, r2, r1
 800cdfc:	42a5      	cmp	r5, r4
 800cdfe:	d10b      	bne.n	800ce18 <_free_r+0x70>
 800ce00:	6824      	ldr	r4, [r4, #0]
 800ce02:	4421      	add	r1, r4
 800ce04:	1854      	adds	r4, r2, r1
 800ce06:	42a3      	cmp	r3, r4
 800ce08:	6011      	str	r1, [r2, #0]
 800ce0a:	d1e0      	bne.n	800cdce <_free_r+0x26>
 800ce0c:	681c      	ldr	r4, [r3, #0]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	6053      	str	r3, [r2, #4]
 800ce12:	4421      	add	r1, r4
 800ce14:	6011      	str	r1, [r2, #0]
 800ce16:	e7da      	b.n	800cdce <_free_r+0x26>
 800ce18:	d902      	bls.n	800ce20 <_free_r+0x78>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	6003      	str	r3, [r0, #0]
 800ce1e:	e7d6      	b.n	800cdce <_free_r+0x26>
 800ce20:	6825      	ldr	r5, [r4, #0]
 800ce22:	1961      	adds	r1, r4, r5
 800ce24:	428b      	cmp	r3, r1
 800ce26:	bf04      	itt	eq
 800ce28:	6819      	ldreq	r1, [r3, #0]
 800ce2a:	685b      	ldreq	r3, [r3, #4]
 800ce2c:	6063      	str	r3, [r4, #4]
 800ce2e:	bf04      	itt	eq
 800ce30:	1949      	addeq	r1, r1, r5
 800ce32:	6021      	streq	r1, [r4, #0]
 800ce34:	6054      	str	r4, [r2, #4]
 800ce36:	e7ca      	b.n	800cdce <_free_r+0x26>
 800ce38:	b003      	add	sp, #12
 800ce3a:	bd30      	pop	{r4, r5, pc}
 800ce3c:	20001284 	.word	0x20001284

0800ce40 <sbrk_aligned>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	4e0e      	ldr	r6, [pc, #56]	; (800ce7c <sbrk_aligned+0x3c>)
 800ce44:	460c      	mov	r4, r1
 800ce46:	6831      	ldr	r1, [r6, #0]
 800ce48:	4605      	mov	r5, r0
 800ce4a:	b911      	cbnz	r1, 800ce52 <sbrk_aligned+0x12>
 800ce4c:	f000 fd1e 	bl	800d88c <_sbrk_r>
 800ce50:	6030      	str	r0, [r6, #0]
 800ce52:	4621      	mov	r1, r4
 800ce54:	4628      	mov	r0, r5
 800ce56:	f000 fd19 	bl	800d88c <_sbrk_r>
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	d00a      	beq.n	800ce74 <sbrk_aligned+0x34>
 800ce5e:	1cc4      	adds	r4, r0, #3
 800ce60:	f024 0403 	bic.w	r4, r4, #3
 800ce64:	42a0      	cmp	r0, r4
 800ce66:	d007      	beq.n	800ce78 <sbrk_aligned+0x38>
 800ce68:	1a21      	subs	r1, r4, r0
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	f000 fd0e 	bl	800d88c <_sbrk_r>
 800ce70:	3001      	adds	r0, #1
 800ce72:	d101      	bne.n	800ce78 <sbrk_aligned+0x38>
 800ce74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ce78:	4620      	mov	r0, r4
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	20001288 	.word	0x20001288

0800ce80 <_malloc_r>:
 800ce80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce84:	1ccd      	adds	r5, r1, #3
 800ce86:	f025 0503 	bic.w	r5, r5, #3
 800ce8a:	3508      	adds	r5, #8
 800ce8c:	2d0c      	cmp	r5, #12
 800ce8e:	bf38      	it	cc
 800ce90:	250c      	movcc	r5, #12
 800ce92:	2d00      	cmp	r5, #0
 800ce94:	4607      	mov	r7, r0
 800ce96:	db01      	blt.n	800ce9c <_malloc_r+0x1c>
 800ce98:	42a9      	cmp	r1, r5
 800ce9a:	d905      	bls.n	800cea8 <_malloc_r+0x28>
 800ce9c:	230c      	movs	r3, #12
 800ce9e:	603b      	str	r3, [r7, #0]
 800cea0:	2600      	movs	r6, #0
 800cea2:	4630      	mov	r0, r6
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cea8:	4e2e      	ldr	r6, [pc, #184]	; (800cf64 <_malloc_r+0xe4>)
 800ceaa:	f000 fdb3 	bl	800da14 <__malloc_lock>
 800ceae:	6833      	ldr	r3, [r6, #0]
 800ceb0:	461c      	mov	r4, r3
 800ceb2:	bb34      	cbnz	r4, 800cf02 <_malloc_r+0x82>
 800ceb4:	4629      	mov	r1, r5
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	f7ff ffc2 	bl	800ce40 <sbrk_aligned>
 800cebc:	1c43      	adds	r3, r0, #1
 800cebe:	4604      	mov	r4, r0
 800cec0:	d14d      	bne.n	800cf5e <_malloc_r+0xde>
 800cec2:	6834      	ldr	r4, [r6, #0]
 800cec4:	4626      	mov	r6, r4
 800cec6:	2e00      	cmp	r6, #0
 800cec8:	d140      	bne.n	800cf4c <_malloc_r+0xcc>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	4631      	mov	r1, r6
 800cece:	4638      	mov	r0, r7
 800ced0:	eb04 0803 	add.w	r8, r4, r3
 800ced4:	f000 fcda 	bl	800d88c <_sbrk_r>
 800ced8:	4580      	cmp	r8, r0
 800ceda:	d13a      	bne.n	800cf52 <_malloc_r+0xd2>
 800cedc:	6821      	ldr	r1, [r4, #0]
 800cede:	3503      	adds	r5, #3
 800cee0:	1a6d      	subs	r5, r5, r1
 800cee2:	f025 0503 	bic.w	r5, r5, #3
 800cee6:	3508      	adds	r5, #8
 800cee8:	2d0c      	cmp	r5, #12
 800ceea:	bf38      	it	cc
 800ceec:	250c      	movcc	r5, #12
 800ceee:	4629      	mov	r1, r5
 800cef0:	4638      	mov	r0, r7
 800cef2:	f7ff ffa5 	bl	800ce40 <sbrk_aligned>
 800cef6:	3001      	adds	r0, #1
 800cef8:	d02b      	beq.n	800cf52 <_malloc_r+0xd2>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	442b      	add	r3, r5
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	e00e      	b.n	800cf20 <_malloc_r+0xa0>
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	1b52      	subs	r2, r2, r5
 800cf06:	d41e      	bmi.n	800cf46 <_malloc_r+0xc6>
 800cf08:	2a0b      	cmp	r2, #11
 800cf0a:	d916      	bls.n	800cf3a <_malloc_r+0xba>
 800cf0c:	1961      	adds	r1, r4, r5
 800cf0e:	42a3      	cmp	r3, r4
 800cf10:	6025      	str	r5, [r4, #0]
 800cf12:	bf18      	it	ne
 800cf14:	6059      	strne	r1, [r3, #4]
 800cf16:	6863      	ldr	r3, [r4, #4]
 800cf18:	bf08      	it	eq
 800cf1a:	6031      	streq	r1, [r6, #0]
 800cf1c:	5162      	str	r2, [r4, r5]
 800cf1e:	604b      	str	r3, [r1, #4]
 800cf20:	4638      	mov	r0, r7
 800cf22:	f104 060b 	add.w	r6, r4, #11
 800cf26:	f000 fd7b 	bl	800da20 <__malloc_unlock>
 800cf2a:	f026 0607 	bic.w	r6, r6, #7
 800cf2e:	1d23      	adds	r3, r4, #4
 800cf30:	1af2      	subs	r2, r6, r3
 800cf32:	d0b6      	beq.n	800cea2 <_malloc_r+0x22>
 800cf34:	1b9b      	subs	r3, r3, r6
 800cf36:	50a3      	str	r3, [r4, r2]
 800cf38:	e7b3      	b.n	800cea2 <_malloc_r+0x22>
 800cf3a:	6862      	ldr	r2, [r4, #4]
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	bf0c      	ite	eq
 800cf40:	6032      	streq	r2, [r6, #0]
 800cf42:	605a      	strne	r2, [r3, #4]
 800cf44:	e7ec      	b.n	800cf20 <_malloc_r+0xa0>
 800cf46:	4623      	mov	r3, r4
 800cf48:	6864      	ldr	r4, [r4, #4]
 800cf4a:	e7b2      	b.n	800ceb2 <_malloc_r+0x32>
 800cf4c:	4634      	mov	r4, r6
 800cf4e:	6876      	ldr	r6, [r6, #4]
 800cf50:	e7b9      	b.n	800cec6 <_malloc_r+0x46>
 800cf52:	230c      	movs	r3, #12
 800cf54:	603b      	str	r3, [r7, #0]
 800cf56:	4638      	mov	r0, r7
 800cf58:	f000 fd62 	bl	800da20 <__malloc_unlock>
 800cf5c:	e7a1      	b.n	800cea2 <_malloc_r+0x22>
 800cf5e:	6025      	str	r5, [r4, #0]
 800cf60:	e7de      	b.n	800cf20 <_malloc_r+0xa0>
 800cf62:	bf00      	nop
 800cf64:	20001284 	.word	0x20001284

0800cf68 <__ssputs_r>:
 800cf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf6c:	688e      	ldr	r6, [r1, #8]
 800cf6e:	429e      	cmp	r6, r3
 800cf70:	4682      	mov	sl, r0
 800cf72:	460c      	mov	r4, r1
 800cf74:	4690      	mov	r8, r2
 800cf76:	461f      	mov	r7, r3
 800cf78:	d838      	bhi.n	800cfec <__ssputs_r+0x84>
 800cf7a:	898a      	ldrh	r2, [r1, #12]
 800cf7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf80:	d032      	beq.n	800cfe8 <__ssputs_r+0x80>
 800cf82:	6825      	ldr	r5, [r4, #0]
 800cf84:	6909      	ldr	r1, [r1, #16]
 800cf86:	eba5 0901 	sub.w	r9, r5, r1
 800cf8a:	6965      	ldr	r5, [r4, #20]
 800cf8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf94:	3301      	adds	r3, #1
 800cf96:	444b      	add	r3, r9
 800cf98:	106d      	asrs	r5, r5, #1
 800cf9a:	429d      	cmp	r5, r3
 800cf9c:	bf38      	it	cc
 800cf9e:	461d      	movcc	r5, r3
 800cfa0:	0553      	lsls	r3, r2, #21
 800cfa2:	d531      	bpl.n	800d008 <__ssputs_r+0xa0>
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7ff ff6b 	bl	800ce80 <_malloc_r>
 800cfaa:	4606      	mov	r6, r0
 800cfac:	b950      	cbnz	r0, 800cfc4 <__ssputs_r+0x5c>
 800cfae:	230c      	movs	r3, #12
 800cfb0:	f8ca 3000 	str.w	r3, [sl]
 800cfb4:	89a3      	ldrh	r3, [r4, #12]
 800cfb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfba:	81a3      	strh	r3, [r4, #12]
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc4:	6921      	ldr	r1, [r4, #16]
 800cfc6:	464a      	mov	r2, r9
 800cfc8:	f7ff fb34 	bl	800c634 <memcpy>
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd6:	81a3      	strh	r3, [r4, #12]
 800cfd8:	6126      	str	r6, [r4, #16]
 800cfda:	6165      	str	r5, [r4, #20]
 800cfdc:	444e      	add	r6, r9
 800cfde:	eba5 0509 	sub.w	r5, r5, r9
 800cfe2:	6026      	str	r6, [r4, #0]
 800cfe4:	60a5      	str	r5, [r4, #8]
 800cfe6:	463e      	mov	r6, r7
 800cfe8:	42be      	cmp	r6, r7
 800cfea:	d900      	bls.n	800cfee <__ssputs_r+0x86>
 800cfec:	463e      	mov	r6, r7
 800cfee:	6820      	ldr	r0, [r4, #0]
 800cff0:	4632      	mov	r2, r6
 800cff2:	4641      	mov	r1, r8
 800cff4:	f000 fcf4 	bl	800d9e0 <memmove>
 800cff8:	68a3      	ldr	r3, [r4, #8]
 800cffa:	1b9b      	subs	r3, r3, r6
 800cffc:	60a3      	str	r3, [r4, #8]
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	4433      	add	r3, r6
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	2000      	movs	r0, #0
 800d006:	e7db      	b.n	800cfc0 <__ssputs_r+0x58>
 800d008:	462a      	mov	r2, r5
 800d00a:	f000 fd0f 	bl	800da2c <_realloc_r>
 800d00e:	4606      	mov	r6, r0
 800d010:	2800      	cmp	r0, #0
 800d012:	d1e1      	bne.n	800cfd8 <__ssputs_r+0x70>
 800d014:	6921      	ldr	r1, [r4, #16]
 800d016:	4650      	mov	r0, sl
 800d018:	f7ff fec6 	bl	800cda8 <_free_r>
 800d01c:	e7c7      	b.n	800cfae <__ssputs_r+0x46>
	...

0800d020 <_svfiprintf_r>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	4698      	mov	r8, r3
 800d026:	898b      	ldrh	r3, [r1, #12]
 800d028:	061b      	lsls	r3, r3, #24
 800d02a:	b09d      	sub	sp, #116	; 0x74
 800d02c:	4607      	mov	r7, r0
 800d02e:	460d      	mov	r5, r1
 800d030:	4614      	mov	r4, r2
 800d032:	d50e      	bpl.n	800d052 <_svfiprintf_r+0x32>
 800d034:	690b      	ldr	r3, [r1, #16]
 800d036:	b963      	cbnz	r3, 800d052 <_svfiprintf_r+0x32>
 800d038:	2140      	movs	r1, #64	; 0x40
 800d03a:	f7ff ff21 	bl	800ce80 <_malloc_r>
 800d03e:	6028      	str	r0, [r5, #0]
 800d040:	6128      	str	r0, [r5, #16]
 800d042:	b920      	cbnz	r0, 800d04e <_svfiprintf_r+0x2e>
 800d044:	230c      	movs	r3, #12
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d04c:	e0d1      	b.n	800d1f2 <_svfiprintf_r+0x1d2>
 800d04e:	2340      	movs	r3, #64	; 0x40
 800d050:	616b      	str	r3, [r5, #20]
 800d052:	2300      	movs	r3, #0
 800d054:	9309      	str	r3, [sp, #36]	; 0x24
 800d056:	2320      	movs	r3, #32
 800d058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d060:	2330      	movs	r3, #48	; 0x30
 800d062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d20c <_svfiprintf_r+0x1ec>
 800d066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d06a:	f04f 0901 	mov.w	r9, #1
 800d06e:	4623      	mov	r3, r4
 800d070:	469a      	mov	sl, r3
 800d072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d076:	b10a      	cbz	r2, 800d07c <_svfiprintf_r+0x5c>
 800d078:	2a25      	cmp	r2, #37	; 0x25
 800d07a:	d1f9      	bne.n	800d070 <_svfiprintf_r+0x50>
 800d07c:	ebba 0b04 	subs.w	fp, sl, r4
 800d080:	d00b      	beq.n	800d09a <_svfiprintf_r+0x7a>
 800d082:	465b      	mov	r3, fp
 800d084:	4622      	mov	r2, r4
 800d086:	4629      	mov	r1, r5
 800d088:	4638      	mov	r0, r7
 800d08a:	f7ff ff6d 	bl	800cf68 <__ssputs_r>
 800d08e:	3001      	adds	r0, #1
 800d090:	f000 80aa 	beq.w	800d1e8 <_svfiprintf_r+0x1c8>
 800d094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d096:	445a      	add	r2, fp
 800d098:	9209      	str	r2, [sp, #36]	; 0x24
 800d09a:	f89a 3000 	ldrb.w	r3, [sl]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f000 80a2 	beq.w	800d1e8 <_svfiprintf_r+0x1c8>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0ae:	f10a 0a01 	add.w	sl, sl, #1
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	9307      	str	r3, [sp, #28]
 800d0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d0bc:	4654      	mov	r4, sl
 800d0be:	2205      	movs	r2, #5
 800d0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c4:	4851      	ldr	r0, [pc, #324]	; (800d20c <_svfiprintf_r+0x1ec>)
 800d0c6:	f7f3 f863 	bl	8000190 <memchr>
 800d0ca:	9a04      	ldr	r2, [sp, #16]
 800d0cc:	b9d8      	cbnz	r0, 800d106 <_svfiprintf_r+0xe6>
 800d0ce:	06d0      	lsls	r0, r2, #27
 800d0d0:	bf44      	itt	mi
 800d0d2:	2320      	movmi	r3, #32
 800d0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d8:	0711      	lsls	r1, r2, #28
 800d0da:	bf44      	itt	mi
 800d0dc:	232b      	movmi	r3, #43	; 0x2b
 800d0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0e8:	d015      	beq.n	800d116 <_svfiprintf_r+0xf6>
 800d0ea:	9a07      	ldr	r2, [sp, #28]
 800d0ec:	4654      	mov	r4, sl
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f04f 0c0a 	mov.w	ip, #10
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0fa:	3b30      	subs	r3, #48	; 0x30
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	d94e      	bls.n	800d19e <_svfiprintf_r+0x17e>
 800d100:	b1b0      	cbz	r0, 800d130 <_svfiprintf_r+0x110>
 800d102:	9207      	str	r2, [sp, #28]
 800d104:	e014      	b.n	800d130 <_svfiprintf_r+0x110>
 800d106:	eba0 0308 	sub.w	r3, r0, r8
 800d10a:	fa09 f303 	lsl.w	r3, r9, r3
 800d10e:	4313      	orrs	r3, r2
 800d110:	9304      	str	r3, [sp, #16]
 800d112:	46a2      	mov	sl, r4
 800d114:	e7d2      	b.n	800d0bc <_svfiprintf_r+0x9c>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	1d19      	adds	r1, r3, #4
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	9103      	str	r1, [sp, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bfbb      	ittet	lt
 800d122:	425b      	neglt	r3, r3
 800d124:	f042 0202 	orrlt.w	r2, r2, #2
 800d128:	9307      	strge	r3, [sp, #28]
 800d12a:	9307      	strlt	r3, [sp, #28]
 800d12c:	bfb8      	it	lt
 800d12e:	9204      	strlt	r2, [sp, #16]
 800d130:	7823      	ldrb	r3, [r4, #0]
 800d132:	2b2e      	cmp	r3, #46	; 0x2e
 800d134:	d10c      	bne.n	800d150 <_svfiprintf_r+0x130>
 800d136:	7863      	ldrb	r3, [r4, #1]
 800d138:	2b2a      	cmp	r3, #42	; 0x2a
 800d13a:	d135      	bne.n	800d1a8 <_svfiprintf_r+0x188>
 800d13c:	9b03      	ldr	r3, [sp, #12]
 800d13e:	1d1a      	adds	r2, r3, #4
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	9203      	str	r2, [sp, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	bfb8      	it	lt
 800d148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d14c:	3402      	adds	r4, #2
 800d14e:	9305      	str	r3, [sp, #20]
 800d150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d21c <_svfiprintf_r+0x1fc>
 800d154:	7821      	ldrb	r1, [r4, #0]
 800d156:	2203      	movs	r2, #3
 800d158:	4650      	mov	r0, sl
 800d15a:	f7f3 f819 	bl	8000190 <memchr>
 800d15e:	b140      	cbz	r0, 800d172 <_svfiprintf_r+0x152>
 800d160:	2340      	movs	r3, #64	; 0x40
 800d162:	eba0 000a 	sub.w	r0, r0, sl
 800d166:	fa03 f000 	lsl.w	r0, r3, r0
 800d16a:	9b04      	ldr	r3, [sp, #16]
 800d16c:	4303      	orrs	r3, r0
 800d16e:	3401      	adds	r4, #1
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d176:	4826      	ldr	r0, [pc, #152]	; (800d210 <_svfiprintf_r+0x1f0>)
 800d178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d17c:	2206      	movs	r2, #6
 800d17e:	f7f3 f807 	bl	8000190 <memchr>
 800d182:	2800      	cmp	r0, #0
 800d184:	d038      	beq.n	800d1f8 <_svfiprintf_r+0x1d8>
 800d186:	4b23      	ldr	r3, [pc, #140]	; (800d214 <_svfiprintf_r+0x1f4>)
 800d188:	bb1b      	cbnz	r3, 800d1d2 <_svfiprintf_r+0x1b2>
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	3307      	adds	r3, #7
 800d18e:	f023 0307 	bic.w	r3, r3, #7
 800d192:	3308      	adds	r3, #8
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d198:	4433      	add	r3, r6
 800d19a:	9309      	str	r3, [sp, #36]	; 0x24
 800d19c:	e767      	b.n	800d06e <_svfiprintf_r+0x4e>
 800d19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	2001      	movs	r0, #1
 800d1a6:	e7a5      	b.n	800d0f4 <_svfiprintf_r+0xd4>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	9305      	str	r3, [sp, #20]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f04f 0c0a 	mov.w	ip, #10
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ba:	3a30      	subs	r2, #48	; 0x30
 800d1bc:	2a09      	cmp	r2, #9
 800d1be:	d903      	bls.n	800d1c8 <_svfiprintf_r+0x1a8>
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d0c5      	beq.n	800d150 <_svfiprintf_r+0x130>
 800d1c4:	9105      	str	r1, [sp, #20]
 800d1c6:	e7c3      	b.n	800d150 <_svfiprintf_r+0x130>
 800d1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e7f0      	b.n	800d1b4 <_svfiprintf_r+0x194>
 800d1d2:	ab03      	add	r3, sp, #12
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4b0f      	ldr	r3, [pc, #60]	; (800d218 <_svfiprintf_r+0x1f8>)
 800d1da:	a904      	add	r1, sp, #16
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f3af 8000 	nop.w
 800d1e2:	1c42      	adds	r2, r0, #1
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	d1d6      	bne.n	800d196 <_svfiprintf_r+0x176>
 800d1e8:	89ab      	ldrh	r3, [r5, #12]
 800d1ea:	065b      	lsls	r3, r3, #25
 800d1ec:	f53f af2c 	bmi.w	800d048 <_svfiprintf_r+0x28>
 800d1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1f2:	b01d      	add	sp, #116	; 0x74
 800d1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f8:	ab03      	add	r3, sp, #12
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	462a      	mov	r2, r5
 800d1fe:	4b06      	ldr	r3, [pc, #24]	; (800d218 <_svfiprintf_r+0x1f8>)
 800d200:	a904      	add	r1, sp, #16
 800d202:	4638      	mov	r0, r7
 800d204:	f000 f9d4 	bl	800d5b0 <_printf_i>
 800d208:	e7eb      	b.n	800d1e2 <_svfiprintf_r+0x1c2>
 800d20a:	bf00      	nop
 800d20c:	0800df3c 	.word	0x0800df3c
 800d210:	0800df46 	.word	0x0800df46
 800d214:	00000000 	.word	0x00000000
 800d218:	0800cf69 	.word	0x0800cf69
 800d21c:	0800df42 	.word	0x0800df42

0800d220 <__sfputc_r>:
 800d220:	6893      	ldr	r3, [r2, #8]
 800d222:	3b01      	subs	r3, #1
 800d224:	2b00      	cmp	r3, #0
 800d226:	b410      	push	{r4}
 800d228:	6093      	str	r3, [r2, #8]
 800d22a:	da08      	bge.n	800d23e <__sfputc_r+0x1e>
 800d22c:	6994      	ldr	r4, [r2, #24]
 800d22e:	42a3      	cmp	r3, r4
 800d230:	db01      	blt.n	800d236 <__sfputc_r+0x16>
 800d232:	290a      	cmp	r1, #10
 800d234:	d103      	bne.n	800d23e <__sfputc_r+0x1e>
 800d236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23a:	f7ff bad5 	b.w	800c7e8 <__swbuf_r>
 800d23e:	6813      	ldr	r3, [r2, #0]
 800d240:	1c58      	adds	r0, r3, #1
 800d242:	6010      	str	r0, [r2, #0]
 800d244:	7019      	strb	r1, [r3, #0]
 800d246:	4608      	mov	r0, r1
 800d248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <__sfputs_r>:
 800d24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d250:	4606      	mov	r6, r0
 800d252:	460f      	mov	r7, r1
 800d254:	4614      	mov	r4, r2
 800d256:	18d5      	adds	r5, r2, r3
 800d258:	42ac      	cmp	r4, r5
 800d25a:	d101      	bne.n	800d260 <__sfputs_r+0x12>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e007      	b.n	800d270 <__sfputs_r+0x22>
 800d260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d264:	463a      	mov	r2, r7
 800d266:	4630      	mov	r0, r6
 800d268:	f7ff ffda 	bl	800d220 <__sfputc_r>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d1f3      	bne.n	800d258 <__sfputs_r+0xa>
 800d270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d274 <_vfiprintf_r>:
 800d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	460d      	mov	r5, r1
 800d27a:	b09d      	sub	sp, #116	; 0x74
 800d27c:	4614      	mov	r4, r2
 800d27e:	4698      	mov	r8, r3
 800d280:	4606      	mov	r6, r0
 800d282:	b118      	cbz	r0, 800d28c <_vfiprintf_r+0x18>
 800d284:	6983      	ldr	r3, [r0, #24]
 800d286:	b90b      	cbnz	r3, 800d28c <_vfiprintf_r+0x18>
 800d288:	f7ff fc88 	bl	800cb9c <__sinit>
 800d28c:	4b89      	ldr	r3, [pc, #548]	; (800d4b4 <_vfiprintf_r+0x240>)
 800d28e:	429d      	cmp	r5, r3
 800d290:	d11b      	bne.n	800d2ca <_vfiprintf_r+0x56>
 800d292:	6875      	ldr	r5, [r6, #4]
 800d294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d296:	07d9      	lsls	r1, r3, #31
 800d298:	d405      	bmi.n	800d2a6 <_vfiprintf_r+0x32>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	059a      	lsls	r2, r3, #22
 800d29e:	d402      	bmi.n	800d2a6 <_vfiprintf_r+0x32>
 800d2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2a2:	f7ff fd19 	bl	800ccd8 <__retarget_lock_acquire_recursive>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	071b      	lsls	r3, r3, #28
 800d2aa:	d501      	bpl.n	800d2b0 <_vfiprintf_r+0x3c>
 800d2ac:	692b      	ldr	r3, [r5, #16]
 800d2ae:	b9eb      	cbnz	r3, 800d2ec <_vfiprintf_r+0x78>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	f7ff faea 	bl	800c88c <__swsetup_r>
 800d2b8:	b1c0      	cbz	r0, 800d2ec <_vfiprintf_r+0x78>
 800d2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2bc:	07dc      	lsls	r4, r3, #31
 800d2be:	d50e      	bpl.n	800d2de <_vfiprintf_r+0x6a>
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c4:	b01d      	add	sp, #116	; 0x74
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ca:	4b7b      	ldr	r3, [pc, #492]	; (800d4b8 <_vfiprintf_r+0x244>)
 800d2cc:	429d      	cmp	r5, r3
 800d2ce:	d101      	bne.n	800d2d4 <_vfiprintf_r+0x60>
 800d2d0:	68b5      	ldr	r5, [r6, #8]
 800d2d2:	e7df      	b.n	800d294 <_vfiprintf_r+0x20>
 800d2d4:	4b79      	ldr	r3, [pc, #484]	; (800d4bc <_vfiprintf_r+0x248>)
 800d2d6:	429d      	cmp	r5, r3
 800d2d8:	bf08      	it	eq
 800d2da:	68f5      	ldreq	r5, [r6, #12]
 800d2dc:	e7da      	b.n	800d294 <_vfiprintf_r+0x20>
 800d2de:	89ab      	ldrh	r3, [r5, #12]
 800d2e0:	0598      	lsls	r0, r3, #22
 800d2e2:	d4ed      	bmi.n	800d2c0 <_vfiprintf_r+0x4c>
 800d2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2e6:	f7ff fcf8 	bl	800ccda <__retarget_lock_release_recursive>
 800d2ea:	e7e9      	b.n	800d2c0 <_vfiprintf_r+0x4c>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f0:	2320      	movs	r3, #32
 800d2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2fa:	2330      	movs	r3, #48	; 0x30
 800d2fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4c0 <_vfiprintf_r+0x24c>
 800d300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d304:	f04f 0901 	mov.w	r9, #1
 800d308:	4623      	mov	r3, r4
 800d30a:	469a      	mov	sl, r3
 800d30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d310:	b10a      	cbz	r2, 800d316 <_vfiprintf_r+0xa2>
 800d312:	2a25      	cmp	r2, #37	; 0x25
 800d314:	d1f9      	bne.n	800d30a <_vfiprintf_r+0x96>
 800d316:	ebba 0b04 	subs.w	fp, sl, r4
 800d31a:	d00b      	beq.n	800d334 <_vfiprintf_r+0xc0>
 800d31c:	465b      	mov	r3, fp
 800d31e:	4622      	mov	r2, r4
 800d320:	4629      	mov	r1, r5
 800d322:	4630      	mov	r0, r6
 800d324:	f7ff ff93 	bl	800d24e <__sfputs_r>
 800d328:	3001      	adds	r0, #1
 800d32a:	f000 80aa 	beq.w	800d482 <_vfiprintf_r+0x20e>
 800d32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d330:	445a      	add	r2, fp
 800d332:	9209      	str	r2, [sp, #36]	; 0x24
 800d334:	f89a 3000 	ldrb.w	r3, [sl]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 80a2 	beq.w	800d482 <_vfiprintf_r+0x20e>
 800d33e:	2300      	movs	r3, #0
 800d340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d348:	f10a 0a01 	add.w	sl, sl, #1
 800d34c:	9304      	str	r3, [sp, #16]
 800d34e:	9307      	str	r3, [sp, #28]
 800d350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d354:	931a      	str	r3, [sp, #104]	; 0x68
 800d356:	4654      	mov	r4, sl
 800d358:	2205      	movs	r2, #5
 800d35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d35e:	4858      	ldr	r0, [pc, #352]	; (800d4c0 <_vfiprintf_r+0x24c>)
 800d360:	f7f2 ff16 	bl	8000190 <memchr>
 800d364:	9a04      	ldr	r2, [sp, #16]
 800d366:	b9d8      	cbnz	r0, 800d3a0 <_vfiprintf_r+0x12c>
 800d368:	06d1      	lsls	r1, r2, #27
 800d36a:	bf44      	itt	mi
 800d36c:	2320      	movmi	r3, #32
 800d36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d372:	0713      	lsls	r3, r2, #28
 800d374:	bf44      	itt	mi
 800d376:	232b      	movmi	r3, #43	; 0x2b
 800d378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d37c:	f89a 3000 	ldrb.w	r3, [sl]
 800d380:	2b2a      	cmp	r3, #42	; 0x2a
 800d382:	d015      	beq.n	800d3b0 <_vfiprintf_r+0x13c>
 800d384:	9a07      	ldr	r2, [sp, #28]
 800d386:	4654      	mov	r4, sl
 800d388:	2000      	movs	r0, #0
 800d38a:	f04f 0c0a 	mov.w	ip, #10
 800d38e:	4621      	mov	r1, r4
 800d390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d394:	3b30      	subs	r3, #48	; 0x30
 800d396:	2b09      	cmp	r3, #9
 800d398:	d94e      	bls.n	800d438 <_vfiprintf_r+0x1c4>
 800d39a:	b1b0      	cbz	r0, 800d3ca <_vfiprintf_r+0x156>
 800d39c:	9207      	str	r2, [sp, #28]
 800d39e:	e014      	b.n	800d3ca <_vfiprintf_r+0x156>
 800d3a0:	eba0 0308 	sub.w	r3, r0, r8
 800d3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	46a2      	mov	sl, r4
 800d3ae:	e7d2      	b.n	800d356 <_vfiprintf_r+0xe2>
 800d3b0:	9b03      	ldr	r3, [sp, #12]
 800d3b2:	1d19      	adds	r1, r3, #4
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	9103      	str	r1, [sp, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	bfbb      	ittet	lt
 800d3bc:	425b      	neglt	r3, r3
 800d3be:	f042 0202 	orrlt.w	r2, r2, #2
 800d3c2:	9307      	strge	r3, [sp, #28]
 800d3c4:	9307      	strlt	r3, [sp, #28]
 800d3c6:	bfb8      	it	lt
 800d3c8:	9204      	strlt	r2, [sp, #16]
 800d3ca:	7823      	ldrb	r3, [r4, #0]
 800d3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ce:	d10c      	bne.n	800d3ea <_vfiprintf_r+0x176>
 800d3d0:	7863      	ldrb	r3, [r4, #1]
 800d3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d4:	d135      	bne.n	800d442 <_vfiprintf_r+0x1ce>
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	1d1a      	adds	r2, r3, #4
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	9203      	str	r2, [sp, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bfb8      	it	lt
 800d3e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3e6:	3402      	adds	r4, #2
 800d3e8:	9305      	str	r3, [sp, #20]
 800d3ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4d0 <_vfiprintf_r+0x25c>
 800d3ee:	7821      	ldrb	r1, [r4, #0]
 800d3f0:	2203      	movs	r2, #3
 800d3f2:	4650      	mov	r0, sl
 800d3f4:	f7f2 fecc 	bl	8000190 <memchr>
 800d3f8:	b140      	cbz	r0, 800d40c <_vfiprintf_r+0x198>
 800d3fa:	2340      	movs	r3, #64	; 0x40
 800d3fc:	eba0 000a 	sub.w	r0, r0, sl
 800d400:	fa03 f000 	lsl.w	r0, r3, r0
 800d404:	9b04      	ldr	r3, [sp, #16]
 800d406:	4303      	orrs	r3, r0
 800d408:	3401      	adds	r4, #1
 800d40a:	9304      	str	r3, [sp, #16]
 800d40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d410:	482c      	ldr	r0, [pc, #176]	; (800d4c4 <_vfiprintf_r+0x250>)
 800d412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d416:	2206      	movs	r2, #6
 800d418:	f7f2 feba 	bl	8000190 <memchr>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d03f      	beq.n	800d4a0 <_vfiprintf_r+0x22c>
 800d420:	4b29      	ldr	r3, [pc, #164]	; (800d4c8 <_vfiprintf_r+0x254>)
 800d422:	bb1b      	cbnz	r3, 800d46c <_vfiprintf_r+0x1f8>
 800d424:	9b03      	ldr	r3, [sp, #12]
 800d426:	3307      	adds	r3, #7
 800d428:	f023 0307 	bic.w	r3, r3, #7
 800d42c:	3308      	adds	r3, #8
 800d42e:	9303      	str	r3, [sp, #12]
 800d430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d432:	443b      	add	r3, r7
 800d434:	9309      	str	r3, [sp, #36]	; 0x24
 800d436:	e767      	b.n	800d308 <_vfiprintf_r+0x94>
 800d438:	fb0c 3202 	mla	r2, ip, r2, r3
 800d43c:	460c      	mov	r4, r1
 800d43e:	2001      	movs	r0, #1
 800d440:	e7a5      	b.n	800d38e <_vfiprintf_r+0x11a>
 800d442:	2300      	movs	r3, #0
 800d444:	3401      	adds	r4, #1
 800d446:	9305      	str	r3, [sp, #20]
 800d448:	4619      	mov	r1, r3
 800d44a:	f04f 0c0a 	mov.w	ip, #10
 800d44e:	4620      	mov	r0, r4
 800d450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d454:	3a30      	subs	r2, #48	; 0x30
 800d456:	2a09      	cmp	r2, #9
 800d458:	d903      	bls.n	800d462 <_vfiprintf_r+0x1ee>
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0c5      	beq.n	800d3ea <_vfiprintf_r+0x176>
 800d45e:	9105      	str	r1, [sp, #20]
 800d460:	e7c3      	b.n	800d3ea <_vfiprintf_r+0x176>
 800d462:	fb0c 2101 	mla	r1, ip, r1, r2
 800d466:	4604      	mov	r4, r0
 800d468:	2301      	movs	r3, #1
 800d46a:	e7f0      	b.n	800d44e <_vfiprintf_r+0x1da>
 800d46c:	ab03      	add	r3, sp, #12
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	462a      	mov	r2, r5
 800d472:	4b16      	ldr	r3, [pc, #88]	; (800d4cc <_vfiprintf_r+0x258>)
 800d474:	a904      	add	r1, sp, #16
 800d476:	4630      	mov	r0, r6
 800d478:	f3af 8000 	nop.w
 800d47c:	4607      	mov	r7, r0
 800d47e:	1c78      	adds	r0, r7, #1
 800d480:	d1d6      	bne.n	800d430 <_vfiprintf_r+0x1bc>
 800d482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d484:	07d9      	lsls	r1, r3, #31
 800d486:	d405      	bmi.n	800d494 <_vfiprintf_r+0x220>
 800d488:	89ab      	ldrh	r3, [r5, #12]
 800d48a:	059a      	lsls	r2, r3, #22
 800d48c:	d402      	bmi.n	800d494 <_vfiprintf_r+0x220>
 800d48e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d490:	f7ff fc23 	bl	800ccda <__retarget_lock_release_recursive>
 800d494:	89ab      	ldrh	r3, [r5, #12]
 800d496:	065b      	lsls	r3, r3, #25
 800d498:	f53f af12 	bmi.w	800d2c0 <_vfiprintf_r+0x4c>
 800d49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d49e:	e711      	b.n	800d2c4 <_vfiprintf_r+0x50>
 800d4a0:	ab03      	add	r3, sp, #12
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <_vfiprintf_r+0x258>)
 800d4a8:	a904      	add	r1, sp, #16
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f000 f880 	bl	800d5b0 <_printf_i>
 800d4b0:	e7e4      	b.n	800d47c <_vfiprintf_r+0x208>
 800d4b2:	bf00      	nop
 800d4b4:	0800defc 	.word	0x0800defc
 800d4b8:	0800df1c 	.word	0x0800df1c
 800d4bc:	0800dedc 	.word	0x0800dedc
 800d4c0:	0800df3c 	.word	0x0800df3c
 800d4c4:	0800df46 	.word	0x0800df46
 800d4c8:	00000000 	.word	0x00000000
 800d4cc:	0800d24f 	.word	0x0800d24f
 800d4d0:	0800df42 	.word	0x0800df42

0800d4d4 <_printf_common>:
 800d4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	4616      	mov	r6, r2
 800d4da:	4699      	mov	r9, r3
 800d4dc:	688a      	ldr	r2, [r1, #8]
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	bfb8      	it	lt
 800d4e8:	4613      	movlt	r3, r2
 800d4ea:	6033      	str	r3, [r6, #0]
 800d4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4f0:	4607      	mov	r7, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	b10a      	cbz	r2, 800d4fa <_printf_common+0x26>
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	6033      	str	r3, [r6, #0]
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	0699      	lsls	r1, r3, #26
 800d4fe:	bf42      	ittt	mi
 800d500:	6833      	ldrmi	r3, [r6, #0]
 800d502:	3302      	addmi	r3, #2
 800d504:	6033      	strmi	r3, [r6, #0]
 800d506:	6825      	ldr	r5, [r4, #0]
 800d508:	f015 0506 	ands.w	r5, r5, #6
 800d50c:	d106      	bne.n	800d51c <_printf_common+0x48>
 800d50e:	f104 0a19 	add.w	sl, r4, #25
 800d512:	68e3      	ldr	r3, [r4, #12]
 800d514:	6832      	ldr	r2, [r6, #0]
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	42ab      	cmp	r3, r5
 800d51a:	dc26      	bgt.n	800d56a <_printf_common+0x96>
 800d51c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d520:	1e13      	subs	r3, r2, #0
 800d522:	6822      	ldr	r2, [r4, #0]
 800d524:	bf18      	it	ne
 800d526:	2301      	movne	r3, #1
 800d528:	0692      	lsls	r2, r2, #26
 800d52a:	d42b      	bmi.n	800d584 <_printf_common+0xb0>
 800d52c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d530:	4649      	mov	r1, r9
 800d532:	4638      	mov	r0, r7
 800d534:	47c0      	blx	r8
 800d536:	3001      	adds	r0, #1
 800d538:	d01e      	beq.n	800d578 <_printf_common+0xa4>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	68e5      	ldr	r5, [r4, #12]
 800d53e:	6832      	ldr	r2, [r6, #0]
 800d540:	f003 0306 	and.w	r3, r3, #6
 800d544:	2b04      	cmp	r3, #4
 800d546:	bf08      	it	eq
 800d548:	1aad      	subeq	r5, r5, r2
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	6922      	ldr	r2, [r4, #16]
 800d54e:	bf0c      	ite	eq
 800d550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d554:	2500      	movne	r5, #0
 800d556:	4293      	cmp	r3, r2
 800d558:	bfc4      	itt	gt
 800d55a:	1a9b      	subgt	r3, r3, r2
 800d55c:	18ed      	addgt	r5, r5, r3
 800d55e:	2600      	movs	r6, #0
 800d560:	341a      	adds	r4, #26
 800d562:	42b5      	cmp	r5, r6
 800d564:	d11a      	bne.n	800d59c <_printf_common+0xc8>
 800d566:	2000      	movs	r0, #0
 800d568:	e008      	b.n	800d57c <_printf_common+0xa8>
 800d56a:	2301      	movs	r3, #1
 800d56c:	4652      	mov	r2, sl
 800d56e:	4649      	mov	r1, r9
 800d570:	4638      	mov	r0, r7
 800d572:	47c0      	blx	r8
 800d574:	3001      	adds	r0, #1
 800d576:	d103      	bne.n	800d580 <_printf_common+0xac>
 800d578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d580:	3501      	adds	r5, #1
 800d582:	e7c6      	b.n	800d512 <_printf_common+0x3e>
 800d584:	18e1      	adds	r1, r4, r3
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	2030      	movs	r0, #48	; 0x30
 800d58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d58e:	4422      	add	r2, r4
 800d590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d598:	3302      	adds	r3, #2
 800d59a:	e7c7      	b.n	800d52c <_printf_common+0x58>
 800d59c:	2301      	movs	r3, #1
 800d59e:	4622      	mov	r2, r4
 800d5a0:	4649      	mov	r1, r9
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	47c0      	blx	r8
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d0e6      	beq.n	800d578 <_printf_common+0xa4>
 800d5aa:	3601      	adds	r6, #1
 800d5ac:	e7d9      	b.n	800d562 <_printf_common+0x8e>
	...

0800d5b0 <_printf_i>:
 800d5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	7e0f      	ldrb	r7, [r1, #24]
 800d5b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5b8:	2f78      	cmp	r7, #120	; 0x78
 800d5ba:	4691      	mov	r9, r2
 800d5bc:	4680      	mov	r8, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	469a      	mov	sl, r3
 800d5c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5c6:	d807      	bhi.n	800d5d8 <_printf_i+0x28>
 800d5c8:	2f62      	cmp	r7, #98	; 0x62
 800d5ca:	d80a      	bhi.n	800d5e2 <_printf_i+0x32>
 800d5cc:	2f00      	cmp	r7, #0
 800d5ce:	f000 80d8 	beq.w	800d782 <_printf_i+0x1d2>
 800d5d2:	2f58      	cmp	r7, #88	; 0x58
 800d5d4:	f000 80a3 	beq.w	800d71e <_printf_i+0x16e>
 800d5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5e0:	e03a      	b.n	800d658 <_printf_i+0xa8>
 800d5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5e6:	2b15      	cmp	r3, #21
 800d5e8:	d8f6      	bhi.n	800d5d8 <_printf_i+0x28>
 800d5ea:	a101      	add	r1, pc, #4	; (adr r1, 800d5f0 <_printf_i+0x40>)
 800d5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5f0:	0800d649 	.word	0x0800d649
 800d5f4:	0800d65d 	.word	0x0800d65d
 800d5f8:	0800d5d9 	.word	0x0800d5d9
 800d5fc:	0800d5d9 	.word	0x0800d5d9
 800d600:	0800d5d9 	.word	0x0800d5d9
 800d604:	0800d5d9 	.word	0x0800d5d9
 800d608:	0800d65d 	.word	0x0800d65d
 800d60c:	0800d5d9 	.word	0x0800d5d9
 800d610:	0800d5d9 	.word	0x0800d5d9
 800d614:	0800d5d9 	.word	0x0800d5d9
 800d618:	0800d5d9 	.word	0x0800d5d9
 800d61c:	0800d769 	.word	0x0800d769
 800d620:	0800d68d 	.word	0x0800d68d
 800d624:	0800d74b 	.word	0x0800d74b
 800d628:	0800d5d9 	.word	0x0800d5d9
 800d62c:	0800d5d9 	.word	0x0800d5d9
 800d630:	0800d78b 	.word	0x0800d78b
 800d634:	0800d5d9 	.word	0x0800d5d9
 800d638:	0800d68d 	.word	0x0800d68d
 800d63c:	0800d5d9 	.word	0x0800d5d9
 800d640:	0800d5d9 	.word	0x0800d5d9
 800d644:	0800d753 	.word	0x0800d753
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	1d1a      	adds	r2, r3, #4
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	602a      	str	r2, [r5, #0]
 800d650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d658:	2301      	movs	r3, #1
 800d65a:	e0a3      	b.n	800d7a4 <_printf_i+0x1f4>
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	6829      	ldr	r1, [r5, #0]
 800d660:	0606      	lsls	r6, r0, #24
 800d662:	f101 0304 	add.w	r3, r1, #4
 800d666:	d50a      	bpl.n	800d67e <_printf_i+0xce>
 800d668:	680e      	ldr	r6, [r1, #0]
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	2e00      	cmp	r6, #0
 800d66e:	da03      	bge.n	800d678 <_printf_i+0xc8>
 800d670:	232d      	movs	r3, #45	; 0x2d
 800d672:	4276      	negs	r6, r6
 800d674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d678:	485e      	ldr	r0, [pc, #376]	; (800d7f4 <_printf_i+0x244>)
 800d67a:	230a      	movs	r3, #10
 800d67c:	e019      	b.n	800d6b2 <_printf_i+0x102>
 800d67e:	680e      	ldr	r6, [r1, #0]
 800d680:	602b      	str	r3, [r5, #0]
 800d682:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d686:	bf18      	it	ne
 800d688:	b236      	sxthne	r6, r6
 800d68a:	e7ef      	b.n	800d66c <_printf_i+0xbc>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	6820      	ldr	r0, [r4, #0]
 800d690:	1d19      	adds	r1, r3, #4
 800d692:	6029      	str	r1, [r5, #0]
 800d694:	0601      	lsls	r1, r0, #24
 800d696:	d501      	bpl.n	800d69c <_printf_i+0xec>
 800d698:	681e      	ldr	r6, [r3, #0]
 800d69a:	e002      	b.n	800d6a2 <_printf_i+0xf2>
 800d69c:	0646      	lsls	r6, r0, #25
 800d69e:	d5fb      	bpl.n	800d698 <_printf_i+0xe8>
 800d6a0:	881e      	ldrh	r6, [r3, #0]
 800d6a2:	4854      	ldr	r0, [pc, #336]	; (800d7f4 <_printf_i+0x244>)
 800d6a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d6a6:	bf0c      	ite	eq
 800d6a8:	2308      	moveq	r3, #8
 800d6aa:	230a      	movne	r3, #10
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6b2:	6865      	ldr	r5, [r4, #4]
 800d6b4:	60a5      	str	r5, [r4, #8]
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	bfa2      	ittt	ge
 800d6ba:	6821      	ldrge	r1, [r4, #0]
 800d6bc:	f021 0104 	bicge.w	r1, r1, #4
 800d6c0:	6021      	strge	r1, [r4, #0]
 800d6c2:	b90e      	cbnz	r6, 800d6c8 <_printf_i+0x118>
 800d6c4:	2d00      	cmp	r5, #0
 800d6c6:	d04d      	beq.n	800d764 <_printf_i+0x1b4>
 800d6c8:	4615      	mov	r5, r2
 800d6ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ce:	fb03 6711 	mls	r7, r3, r1, r6
 800d6d2:	5dc7      	ldrb	r7, [r0, r7]
 800d6d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6d8:	4637      	mov	r7, r6
 800d6da:	42bb      	cmp	r3, r7
 800d6dc:	460e      	mov	r6, r1
 800d6de:	d9f4      	bls.n	800d6ca <_printf_i+0x11a>
 800d6e0:	2b08      	cmp	r3, #8
 800d6e2:	d10b      	bne.n	800d6fc <_printf_i+0x14c>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	07de      	lsls	r6, r3, #31
 800d6e8:	d508      	bpl.n	800d6fc <_printf_i+0x14c>
 800d6ea:	6923      	ldr	r3, [r4, #16]
 800d6ec:	6861      	ldr	r1, [r4, #4]
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	bfde      	ittt	le
 800d6f2:	2330      	movle	r3, #48	; 0x30
 800d6f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d6fc:	1b52      	subs	r2, r2, r5
 800d6fe:	6122      	str	r2, [r4, #16]
 800d700:	f8cd a000 	str.w	sl, [sp]
 800d704:	464b      	mov	r3, r9
 800d706:	aa03      	add	r2, sp, #12
 800d708:	4621      	mov	r1, r4
 800d70a:	4640      	mov	r0, r8
 800d70c:	f7ff fee2 	bl	800d4d4 <_printf_common>
 800d710:	3001      	adds	r0, #1
 800d712:	d14c      	bne.n	800d7ae <_printf_i+0x1fe>
 800d714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d718:	b004      	add	sp, #16
 800d71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71e:	4835      	ldr	r0, [pc, #212]	; (800d7f4 <_printf_i+0x244>)
 800d720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d724:	6829      	ldr	r1, [r5, #0]
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	f851 6b04 	ldr.w	r6, [r1], #4
 800d72c:	6029      	str	r1, [r5, #0]
 800d72e:	061d      	lsls	r5, r3, #24
 800d730:	d514      	bpl.n	800d75c <_printf_i+0x1ac>
 800d732:	07df      	lsls	r7, r3, #31
 800d734:	bf44      	itt	mi
 800d736:	f043 0320 	orrmi.w	r3, r3, #32
 800d73a:	6023      	strmi	r3, [r4, #0]
 800d73c:	b91e      	cbnz	r6, 800d746 <_printf_i+0x196>
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	f023 0320 	bic.w	r3, r3, #32
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	2310      	movs	r3, #16
 800d748:	e7b0      	b.n	800d6ac <_printf_i+0xfc>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f043 0320 	orr.w	r3, r3, #32
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	2378      	movs	r3, #120	; 0x78
 800d754:	4828      	ldr	r0, [pc, #160]	; (800d7f8 <_printf_i+0x248>)
 800d756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d75a:	e7e3      	b.n	800d724 <_printf_i+0x174>
 800d75c:	0659      	lsls	r1, r3, #25
 800d75e:	bf48      	it	mi
 800d760:	b2b6      	uxthmi	r6, r6
 800d762:	e7e6      	b.n	800d732 <_printf_i+0x182>
 800d764:	4615      	mov	r5, r2
 800d766:	e7bb      	b.n	800d6e0 <_printf_i+0x130>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	6826      	ldr	r6, [r4, #0]
 800d76c:	6961      	ldr	r1, [r4, #20]
 800d76e:	1d18      	adds	r0, r3, #4
 800d770:	6028      	str	r0, [r5, #0]
 800d772:	0635      	lsls	r5, r6, #24
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	d501      	bpl.n	800d77c <_printf_i+0x1cc>
 800d778:	6019      	str	r1, [r3, #0]
 800d77a:	e002      	b.n	800d782 <_printf_i+0x1d2>
 800d77c:	0670      	lsls	r0, r6, #25
 800d77e:	d5fb      	bpl.n	800d778 <_printf_i+0x1c8>
 800d780:	8019      	strh	r1, [r3, #0]
 800d782:	2300      	movs	r3, #0
 800d784:	6123      	str	r3, [r4, #16]
 800d786:	4615      	mov	r5, r2
 800d788:	e7ba      	b.n	800d700 <_printf_i+0x150>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	1d1a      	adds	r2, r3, #4
 800d78e:	602a      	str	r2, [r5, #0]
 800d790:	681d      	ldr	r5, [r3, #0]
 800d792:	6862      	ldr	r2, [r4, #4]
 800d794:	2100      	movs	r1, #0
 800d796:	4628      	mov	r0, r5
 800d798:	f7f2 fcfa 	bl	8000190 <memchr>
 800d79c:	b108      	cbz	r0, 800d7a2 <_printf_i+0x1f2>
 800d79e:	1b40      	subs	r0, r0, r5
 800d7a0:	6060      	str	r0, [r4, #4]
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	6123      	str	r3, [r4, #16]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ac:	e7a8      	b.n	800d700 <_printf_i+0x150>
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	462a      	mov	r2, r5
 800d7b2:	4649      	mov	r1, r9
 800d7b4:	4640      	mov	r0, r8
 800d7b6:	47d0      	blx	sl
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	d0ab      	beq.n	800d714 <_printf_i+0x164>
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	079b      	lsls	r3, r3, #30
 800d7c0:	d413      	bmi.n	800d7ea <_printf_i+0x23a>
 800d7c2:	68e0      	ldr	r0, [r4, #12]
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	4298      	cmp	r0, r3
 800d7c8:	bfb8      	it	lt
 800d7ca:	4618      	movlt	r0, r3
 800d7cc:	e7a4      	b.n	800d718 <_printf_i+0x168>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	47d0      	blx	sl
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d09b      	beq.n	800d714 <_printf_i+0x164>
 800d7dc:	3501      	adds	r5, #1
 800d7de:	68e3      	ldr	r3, [r4, #12]
 800d7e0:	9903      	ldr	r1, [sp, #12]
 800d7e2:	1a5b      	subs	r3, r3, r1
 800d7e4:	42ab      	cmp	r3, r5
 800d7e6:	dcf2      	bgt.n	800d7ce <_printf_i+0x21e>
 800d7e8:	e7eb      	b.n	800d7c2 <_printf_i+0x212>
 800d7ea:	2500      	movs	r5, #0
 800d7ec:	f104 0619 	add.w	r6, r4, #25
 800d7f0:	e7f5      	b.n	800d7de <_printf_i+0x22e>
 800d7f2:	bf00      	nop
 800d7f4:	0800df4d 	.word	0x0800df4d
 800d7f8:	0800df5e 	.word	0x0800df5e

0800d7fc <_putc_r>:
 800d7fc:	b570      	push	{r4, r5, r6, lr}
 800d7fe:	460d      	mov	r5, r1
 800d800:	4614      	mov	r4, r2
 800d802:	4606      	mov	r6, r0
 800d804:	b118      	cbz	r0, 800d80e <_putc_r+0x12>
 800d806:	6983      	ldr	r3, [r0, #24]
 800d808:	b90b      	cbnz	r3, 800d80e <_putc_r+0x12>
 800d80a:	f7ff f9c7 	bl	800cb9c <__sinit>
 800d80e:	4b1c      	ldr	r3, [pc, #112]	; (800d880 <_putc_r+0x84>)
 800d810:	429c      	cmp	r4, r3
 800d812:	d124      	bne.n	800d85e <_putc_r+0x62>
 800d814:	6874      	ldr	r4, [r6, #4]
 800d816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d818:	07d8      	lsls	r0, r3, #31
 800d81a:	d405      	bmi.n	800d828 <_putc_r+0x2c>
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	0599      	lsls	r1, r3, #22
 800d820:	d402      	bmi.n	800d828 <_putc_r+0x2c>
 800d822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d824:	f7ff fa58 	bl	800ccd8 <__retarget_lock_acquire_recursive>
 800d828:	68a3      	ldr	r3, [r4, #8]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	60a3      	str	r3, [r4, #8]
 800d830:	da05      	bge.n	800d83e <_putc_r+0x42>
 800d832:	69a2      	ldr	r2, [r4, #24]
 800d834:	4293      	cmp	r3, r2
 800d836:	db1c      	blt.n	800d872 <_putc_r+0x76>
 800d838:	b2eb      	uxtb	r3, r5
 800d83a:	2b0a      	cmp	r3, #10
 800d83c:	d019      	beq.n	800d872 <_putc_r+0x76>
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	1c5a      	adds	r2, r3, #1
 800d842:	6022      	str	r2, [r4, #0]
 800d844:	701d      	strb	r5, [r3, #0]
 800d846:	b2ed      	uxtb	r5, r5
 800d848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d84a:	07da      	lsls	r2, r3, #31
 800d84c:	d405      	bmi.n	800d85a <_putc_r+0x5e>
 800d84e:	89a3      	ldrh	r3, [r4, #12]
 800d850:	059b      	lsls	r3, r3, #22
 800d852:	d402      	bmi.n	800d85a <_putc_r+0x5e>
 800d854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d856:	f7ff fa40 	bl	800ccda <__retarget_lock_release_recursive>
 800d85a:	4628      	mov	r0, r5
 800d85c:	bd70      	pop	{r4, r5, r6, pc}
 800d85e:	4b09      	ldr	r3, [pc, #36]	; (800d884 <_putc_r+0x88>)
 800d860:	429c      	cmp	r4, r3
 800d862:	d101      	bne.n	800d868 <_putc_r+0x6c>
 800d864:	68b4      	ldr	r4, [r6, #8]
 800d866:	e7d6      	b.n	800d816 <_putc_r+0x1a>
 800d868:	4b07      	ldr	r3, [pc, #28]	; (800d888 <_putc_r+0x8c>)
 800d86a:	429c      	cmp	r4, r3
 800d86c:	bf08      	it	eq
 800d86e:	68f4      	ldreq	r4, [r6, #12]
 800d870:	e7d1      	b.n	800d816 <_putc_r+0x1a>
 800d872:	4629      	mov	r1, r5
 800d874:	4622      	mov	r2, r4
 800d876:	4630      	mov	r0, r6
 800d878:	f7fe ffb6 	bl	800c7e8 <__swbuf_r>
 800d87c:	4605      	mov	r5, r0
 800d87e:	e7e3      	b.n	800d848 <_putc_r+0x4c>
 800d880:	0800defc 	.word	0x0800defc
 800d884:	0800df1c 	.word	0x0800df1c
 800d888:	0800dedc 	.word	0x0800dedc

0800d88c <_sbrk_r>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	4d06      	ldr	r5, [pc, #24]	; (800d8a8 <_sbrk_r+0x1c>)
 800d890:	2300      	movs	r3, #0
 800d892:	4604      	mov	r4, r0
 800d894:	4608      	mov	r0, r1
 800d896:	602b      	str	r3, [r5, #0]
 800d898:	f7f5 fe28 	bl	80034ec <_sbrk>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	d102      	bne.n	800d8a6 <_sbrk_r+0x1a>
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	b103      	cbz	r3, 800d8a6 <_sbrk_r+0x1a>
 800d8a4:	6023      	str	r3, [r4, #0]
 800d8a6:	bd38      	pop	{r3, r4, r5, pc}
 800d8a8:	2000128c 	.word	0x2000128c

0800d8ac <__sread>:
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b4:	f000 f8ea 	bl	800da8c <_read_r>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	bfab      	itete	ge
 800d8bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8be:	89a3      	ldrhlt	r3, [r4, #12]
 800d8c0:	181b      	addge	r3, r3, r0
 800d8c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8c6:	bfac      	ite	ge
 800d8c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8ca:	81a3      	strhlt	r3, [r4, #12]
 800d8cc:	bd10      	pop	{r4, pc}

0800d8ce <__swrite>:
 800d8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d2:	461f      	mov	r7, r3
 800d8d4:	898b      	ldrh	r3, [r1, #12]
 800d8d6:	05db      	lsls	r3, r3, #23
 800d8d8:	4605      	mov	r5, r0
 800d8da:	460c      	mov	r4, r1
 800d8dc:	4616      	mov	r6, r2
 800d8de:	d505      	bpl.n	800d8ec <__swrite+0x1e>
 800d8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f000 f868 	bl	800d9bc <_lseek_r>
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8f6:	81a3      	strh	r3, [r4, #12]
 800d8f8:	4632      	mov	r2, r6
 800d8fa:	463b      	mov	r3, r7
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d902:	f000 b817 	b.w	800d934 <_write_r>

0800d906 <__sseek>:
 800d906:	b510      	push	{r4, lr}
 800d908:	460c      	mov	r4, r1
 800d90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d90e:	f000 f855 	bl	800d9bc <_lseek_r>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	bf15      	itete	ne
 800d918:	6560      	strne	r0, [r4, #84]	; 0x54
 800d91a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d91e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d922:	81a3      	strheq	r3, [r4, #12]
 800d924:	bf18      	it	ne
 800d926:	81a3      	strhne	r3, [r4, #12]
 800d928:	bd10      	pop	{r4, pc}

0800d92a <__sclose>:
 800d92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d92e:	f000 b813 	b.w	800d958 <_close_r>
	...

0800d934 <_write_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	; (800d954 <_write_r+0x20>)
 800d938:	4604      	mov	r4, r0
 800d93a:	4608      	mov	r0, r1
 800d93c:	4611      	mov	r1, r2
 800d93e:	2200      	movs	r2, #0
 800d940:	602a      	str	r2, [r5, #0]
 800d942:	461a      	mov	r2, r3
 800d944:	f7f5 fd81 	bl	800344a <_write>
 800d948:	1c43      	adds	r3, r0, #1
 800d94a:	d102      	bne.n	800d952 <_write_r+0x1e>
 800d94c:	682b      	ldr	r3, [r5, #0]
 800d94e:	b103      	cbz	r3, 800d952 <_write_r+0x1e>
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	bd38      	pop	{r3, r4, r5, pc}
 800d954:	2000128c 	.word	0x2000128c

0800d958 <_close_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	; (800d974 <_close_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f5 fd8d 	bl	8003482 <_close>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_close_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_close_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	2000128c 	.word	0x2000128c

0800d978 <_fstat_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d07      	ldr	r5, [pc, #28]	; (800d998 <_fstat_r+0x20>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	4611      	mov	r1, r2
 800d984:	602b      	str	r3, [r5, #0]
 800d986:	f7f5 fd88 	bl	800349a <_fstat>
 800d98a:	1c43      	adds	r3, r0, #1
 800d98c:	d102      	bne.n	800d994 <_fstat_r+0x1c>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	b103      	cbz	r3, 800d994 <_fstat_r+0x1c>
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	bd38      	pop	{r3, r4, r5, pc}
 800d996:	bf00      	nop
 800d998:	2000128c 	.word	0x2000128c

0800d99c <_isatty_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4d06      	ldr	r5, [pc, #24]	; (800d9b8 <_isatty_r+0x1c>)
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	f7f5 fd87 	bl	80034ba <_isatty>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_isatty_r+0x1a>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_isatty_r+0x1a>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	2000128c 	.word	0x2000128c

0800d9bc <_lseek_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4d07      	ldr	r5, [pc, #28]	; (800d9dc <_lseek_r+0x20>)
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	4608      	mov	r0, r1
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	602a      	str	r2, [r5, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f7f5 fd80 	bl	80034d0 <_lseek>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_lseek_r+0x1e>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_lseek_r+0x1e>
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	2000128c 	.word	0x2000128c

0800d9e0 <memmove>:
 800d9e0:	4288      	cmp	r0, r1
 800d9e2:	b510      	push	{r4, lr}
 800d9e4:	eb01 0402 	add.w	r4, r1, r2
 800d9e8:	d902      	bls.n	800d9f0 <memmove+0x10>
 800d9ea:	4284      	cmp	r4, r0
 800d9ec:	4623      	mov	r3, r4
 800d9ee:	d807      	bhi.n	800da00 <memmove+0x20>
 800d9f0:	1e43      	subs	r3, r0, #1
 800d9f2:	42a1      	cmp	r1, r4
 800d9f4:	d008      	beq.n	800da08 <memmove+0x28>
 800d9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9fe:	e7f8      	b.n	800d9f2 <memmove+0x12>
 800da00:	4402      	add	r2, r0
 800da02:	4601      	mov	r1, r0
 800da04:	428a      	cmp	r2, r1
 800da06:	d100      	bne.n	800da0a <memmove+0x2a>
 800da08:	bd10      	pop	{r4, pc}
 800da0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da12:	e7f7      	b.n	800da04 <memmove+0x24>

0800da14 <__malloc_lock>:
 800da14:	4801      	ldr	r0, [pc, #4]	; (800da1c <__malloc_lock+0x8>)
 800da16:	f7ff b95f 	b.w	800ccd8 <__retarget_lock_acquire_recursive>
 800da1a:	bf00      	nop
 800da1c:	20001280 	.word	0x20001280

0800da20 <__malloc_unlock>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__malloc_unlock+0x8>)
 800da22:	f7ff b95a 	b.w	800ccda <__retarget_lock_release_recursive>
 800da26:	bf00      	nop
 800da28:	20001280 	.word	0x20001280

0800da2c <_realloc_r>:
 800da2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da30:	4680      	mov	r8, r0
 800da32:	4614      	mov	r4, r2
 800da34:	460e      	mov	r6, r1
 800da36:	b921      	cbnz	r1, 800da42 <_realloc_r+0x16>
 800da38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da3c:	4611      	mov	r1, r2
 800da3e:	f7ff ba1f 	b.w	800ce80 <_malloc_r>
 800da42:	b92a      	cbnz	r2, 800da50 <_realloc_r+0x24>
 800da44:	f7ff f9b0 	bl	800cda8 <_free_r>
 800da48:	4625      	mov	r5, r4
 800da4a:	4628      	mov	r0, r5
 800da4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da50:	f000 f82e 	bl	800dab0 <_malloc_usable_size_r>
 800da54:	4284      	cmp	r4, r0
 800da56:	4607      	mov	r7, r0
 800da58:	d802      	bhi.n	800da60 <_realloc_r+0x34>
 800da5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da5e:	d812      	bhi.n	800da86 <_realloc_r+0x5a>
 800da60:	4621      	mov	r1, r4
 800da62:	4640      	mov	r0, r8
 800da64:	f7ff fa0c 	bl	800ce80 <_malloc_r>
 800da68:	4605      	mov	r5, r0
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d0ed      	beq.n	800da4a <_realloc_r+0x1e>
 800da6e:	42bc      	cmp	r4, r7
 800da70:	4622      	mov	r2, r4
 800da72:	4631      	mov	r1, r6
 800da74:	bf28      	it	cs
 800da76:	463a      	movcs	r2, r7
 800da78:	f7fe fddc 	bl	800c634 <memcpy>
 800da7c:	4631      	mov	r1, r6
 800da7e:	4640      	mov	r0, r8
 800da80:	f7ff f992 	bl	800cda8 <_free_r>
 800da84:	e7e1      	b.n	800da4a <_realloc_r+0x1e>
 800da86:	4635      	mov	r5, r6
 800da88:	e7df      	b.n	800da4a <_realloc_r+0x1e>
	...

0800da8c <_read_r>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	4d07      	ldr	r5, [pc, #28]	; (800daac <_read_r+0x20>)
 800da90:	4604      	mov	r4, r0
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	2200      	movs	r2, #0
 800da98:	602a      	str	r2, [r5, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	f7f5 fcb8 	bl	8003410 <_read>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_read_r+0x1e>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_read_r+0x1e>
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	2000128c 	.word	0x2000128c

0800dab0 <_malloc_usable_size_r>:
 800dab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab4:	1f18      	subs	r0, r3, #4
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bfbc      	itt	lt
 800daba:	580b      	ldrlt	r3, [r1, r0]
 800dabc:	18c0      	addlt	r0, r0, r3
 800dabe:	4770      	bx	lr

0800dac0 <_init>:
 800dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac2:	bf00      	nop
 800dac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac6:	bc08      	pop	{r3}
 800dac8:	469e      	mov	lr, r3
 800daca:	4770      	bx	lr

0800dacc <_fini>:
 800dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dace:	bf00      	nop
 800dad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dad2:	bc08      	pop	{r3}
 800dad4:	469e      	mov	lr, r3
 800dad6:	4770      	bx	lr
