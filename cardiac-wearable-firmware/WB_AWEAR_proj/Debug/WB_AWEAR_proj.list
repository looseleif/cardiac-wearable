
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a830  0800a830  0001a830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800ac5c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800ace0  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800b563  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800b598  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003d0  2000095c  0800b5a9  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d2c  0800b5a9  00020d2c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00030660  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e76  00000000  00000000  00050fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a00  00000000  00000000  00056e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002758  00000000  00000000  00059860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d188  00000000  00000000  0005bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ee7e  00000000  00000000  00089140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa7d6  00000000  00000000  000b7fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b2794  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b790  00000000  00000000  001b27e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a818 	.word	0x0800a818

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800a818 	.word	0x0800a818

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	711a      	strb	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	715a      	strb	r2, [r3, #5]
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000550:	f107 030e 	add.w	r3, r7, #14
 8000554:	461a      	mov	r2, r3
 8000556:	210f      	movs	r1, #15
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f8a3 	bl	80006a4 <read>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <BH1790GLC_init+0x38>
		return ERR_MID_VAL;
 8000568:	230a      	movs	r3, #10
 800056a:	e04a      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2be0      	cmp	r3, #224	; 0xe0
 8000570:	d001      	beq.n	8000576 <BH1790GLC_init+0x42>
		return ERR_MID_VAL;
 8000572:	230a      	movs	r3, #10
 8000574:	e045      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000576:	f107 030e 	add.w	r3, r7, #14
 800057a:	461a      	mov	r2, r3
 800057c:	2110      	movs	r1, #16
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f890 	bl	80006a4 <read>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <BH1790GLC_init+0x5e>
		return ERR_PID_VAL;
 800058e:	230b      	movs	r3, #11
 8000590:	e037      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2be0      	cmp	r3, #224	; 0xe0
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		return ERR_PID_VAL;
 8000598:	230b      	movs	r3, #11
 800059a:	e032      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800059c:	2382      	movs	r3, #130	; 0x82
 800059e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005a0:	230c      	movs	r3, #12
 80005a2:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	2141      	movs	r1, #65	; 0x41
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f855 	bl	8000660 <write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <BH1790GLC_init+0x90>
		return ERR_MEAS_CONTROL1;
 80005c0:	2314      	movs	r3, #20
 80005c2:	e01e      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	3301      	adds	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2142      	movs	r1, #66	; 0x42
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f846 	bl	8000660 <write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BH1790GLC_init+0xae>
		return ERR_MEAS_CONTROL2;
 80005de:	2315      	movs	r3, #21
 80005e0:	e00f      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3302      	adds	r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	2143      	movs	r1, #67	; 0x43
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f837 	bl	8000660 <write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <BH1790GLC_init+0xcc>
		return ERR_MEAS_START;
 80005fc:	2316      	movs	r3, #22
 80005fe:	e000      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	return SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	2304      	movs	r3, #4
 8000618:	2154      	movs	r1, #84	; 0x54
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f864 	bl	80006e8 <many_reads>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 800062a:	231e      	movs	r3, #30
 800062c:	e014      	b.n	8000658 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint8_t)sensorData[1]<<8)|(sensorData[0]);
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b25a      	sxtb	r2, r3
 8000634:	7a3b      	ldrb	r3, [r7, #8]
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	711a      	strb	r2, [r3, #4]
	dev->ppg_data[1] = ((uint8_t)sensorData[3]<<8)|(sensorData[2]);
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b25a      	sxtb	r2, r3
 8000648:	7abb      	ldrb	r3, [r7, #10]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	715a      	strb	r2, [r3, #5]

	return SUCCESS;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af04      	add	r7, sp, #16
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	21b6      	movs	r1, #182	; 0xb6
 8000688:	f002 fb80 	bl	8002d8c <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <write+0x3a>
		return ret;			//error check
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	e000      	b.n	800069c <write+0x3c>
	}

	return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	21b6      	movs	r1, #182	; 0xb6
 80006cc:	f002 fc72 	bl	8002fb4 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <read+0x3a>
		return ret;			//error check
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	e000      	b.n	80006e0 <read+0x3c>
	}


	return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	4613      	mov	r3, r2
 80006fa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	b29a      	uxth	r2, r3
 8000704:	7abb      	ldrb	r3, [r7, #10]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	21b6      	movs	r1, #182	; 0xb6
 8000718:	f002 fc4c 	bl	8002fb4 <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <many_reads+0x42>
		return ret;			//error check
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	e000      	b.n	800072c <many_reads+0x44>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <APPD_EnableCPU2+0x34>)
 800073c:	1d3c      	adds	r4, r7, #4
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	c403      	stmia	r4!, {r0, r1}
 800074a:	8022      	strh	r2, [r4, #0]
 800074c:	3402      	adds	r4, #2
 800074e:	0c13      	lsrs	r3, r2, #16
 8000750:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000752:	f007 fe8d 	bl	8008470 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f007 f928 	bl	80079ae <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800075e:	bf00      	nop
}
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bdb0      	pop	{r4, r5, r7, pc}
 8000766:	bf00      	nop
 8000768:	0800a830 	.word	0x0800a830

0800076c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800077a:	f023 0207 	bic.w	r2, r3, #7
 800077e:	4905      	ldr	r1, [pc, #20]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	58000400 	.word	0x58000400

08000798 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	58000800 	.word	0x58000800

080007c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	cafecafe 	.word	0xcafecafe

080007fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	608b      	str	r3, [r1, #8]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800084a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800087c:	d101      	bne.n	8000882 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008a2:	d101      	bne.n	80008a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_DBGMCU_GetDeviceID+0x18>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e0042000 	.word	0xe0042000

08000904 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <LL_DBGMCU_GetRevisionID+0x18>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e0042000 	.word	0xe0042000

08000920 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	041b      	lsls	r3, r3, #16
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	615a      	str	r2, [r3, #20]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	615a      	str	r2, [r3, #20]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	619a      	str	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ee:	f023 0304 	bic.w	r3, r3, #4
 80009f2:	6113      	str	r3, [r2, #16]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MX_APPE_Config+0x18>)
 8000a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a70:	f000 f824 	bl	8000abc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a74:	f000 f864 	bl	8000b40 <Config_HSE>

  return;
 8000a78:	bf00      	nop
}
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000

08000a80 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000a84:	f000 f870 	bl	8000b68 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a88:	f000 f888 	bl	8000b9c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a8c:	4903      	ldr	r1, [pc, #12]	; (8000a9c <MX_APPE_Init+0x1c>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fdd4 	bl	800163c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a94:	f000 f890 	bl	8000bb8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000aa8 	.word	0x20000aa8

08000aa0 <Init_Smps>:

void Init_Smps(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000aa4:	bf00      	nop
}
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <Init_Exti>:

void Init_Exti(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ab2:	2050      	movs	r0, #80	; 0x50
 8000ab4:	f7ff fe70 	bl	8000798 <LL_EXTI_EnableIT_32_63>

  return;
 8000ab8:	bf00      	nop
}
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000ac0:	f000 f804 	bl	8000acc <Reset_BackupDomain>

  Reset_IPCC();
 8000ac4:	f000 f81a 	bl	8000afc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ad0:	f7ff feca 	bl	8000868 <LL_RCC_IsActiveFlag_PINRST>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <Reset_BackupDomain+0x2a>
 8000ada:	f7ff fed8 	bl	800088e <LL_RCC_IsActiveFlag_SFTRST>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d108      	bne.n	8000af6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000ae4:	f002 ff70 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ae8:	f002 ff6e 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000aec:	f7ff fe9a 	bl	8000824 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000af0:	f7ff fea9 	bl	8000846 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
}
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b04:	f7ff fed6 	bl	80008b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b08:	213f      	movs	r1, #63	; 0x3f
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <Reset_IPCC+0x40>)
 8000b0c:	f7ff ff4e 	bl	80009ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b10:	213f      	movs	r1, #63	; 0x3f
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <Reset_IPCC+0x40>)
 8000b14:	f7ff ff58 	bl	80009c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b18:	213f      	movs	r1, #63	; 0x3f
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <Reset_IPCC+0x40>)
 8000b1c:	f7ff ff00 	bl	8000920 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b20:	213f      	movs	r1, #63	; 0x3f
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <Reset_IPCC+0x40>)
 8000b24:	f7ff ff1f 	bl	8000966 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b28:	213f      	movs	r1, #63	; 0x3f
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <Reset_IPCC+0x40>)
 8000b2c:	f7ff ff0a 	bl	8000944 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b30:	213f      	movs	r1, #63	; 0x3f
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <Reset_IPCC+0x40>)
 8000b34:	f7ff ff29 	bl	800098a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b38:	bf00      	nop
}
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58000c00 	.word	0x58000c00

08000b40 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f007 fd1e 	bl	8008588 <OTP_Read>
 8000b4c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe31 	bl	80007c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <System_Init>:

static void System_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b6c:	f7ff ff98 	bl	8000aa0 <Init_Smps>

  Init_Exti();
 8000b70:	f7ff ff9d 	bl	8000aae <Init_Exti>

  Init_Rtc();
 8000b74:	f000 f802 	bl	8000b7c <Init_Rtc>

  return;
 8000b78:	bf00      	nop
}
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Init_Rtc>:

static void Init_Rtc(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <Init_Rtc+0x1c>)
 8000b82:	f7ff ff4c 	bl	8000a1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b86:	2100      	movs	r1, #0
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <Init_Rtc+0x1c>)
 8000b8a:	f7ff ff58 	bl	8000a3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <Init_Rtc+0x1c>)
 8000b90:	f7ff ff38 	bl	8000a04 <LL_RTC_EnableWriteProtection>

  return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40002800 	.word	0x40002800

08000b9c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba4:	f7ff fe2a 	bl	80007fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ba8:	f008 fbe8 	bl	800937c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bac:	2004      	movs	r0, #4
 8000bae:	f7ff fddd 	bl	800076c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bbe:	f007 faa1 	bl	8008104 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <appe_Tl_Init+0x50>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f008 fd16 	bl	80095f8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <appe_Tl_Init+0x54>)
 8000bce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <appe_Tl_Init+0x58>)
 8000bd2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <appe_Tl_Init+0x5c>)
 8000bda:	f007 f959 	bl	8007e90 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <appe_Tl_Init+0x60>)
 8000be0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <appe_Tl_Init+0x64>)
 8000be4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <appe_Tl_Init+0x68>)
 8000be8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bea:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f007 fbc7 	bl	8008388 <TL_MM_Init>

  TL_Enable();
 8000bfa:	f007 fa7d 	bl	80080f8 <TL_Enable>

  return;
 8000bfe:	bf00      	nop
}
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	08007ec9 	.word	0x08007ec9
 8000c0c:	200005dc 	.word	0x200005dc
 8000c10:	08000c25 	.word	0x08000c25
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	200007f4 	.word	0x200007f4
 8000c1c:	200006e8 	.word	0x200006e8
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c2e:	bf00      	nop
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	330b      	adds	r3, #11
 8000c4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d81f      	bhi.n	8000c9a <APPE_SysUserEvtRx+0x5e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <APPE_SysUserEvtRx+0x24>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000c93 	.word	0x08000c93
 8000c68:	08000c9b 	.word	0x08000c9b
 8000c6c:	08000c9b 	.word	0x08000c9b
 8000c70:	08000c9b 	.word	0x08000c9b
 8000c74:	08000c9b 	.word	0x08000c9b
 8000c78:	08000c9b 	.word	0x08000c9b
 8000c7c:	08000c9b 	.word	0x08000c9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 febf 	bl	8007a08 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f81b 	bl	8000cc6 <APPE_SysEvtReadyProcessing>
    break;
 8000c90:	e004      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f806 	bl	8000ca4 <APPE_SysEvtError>
    break;
 8000c98:	e000      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000c9a:	bf00      	nop
  }

  return;
 8000c9c:	bf00      	nop
}
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000cba:	bf00      	nop
}
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b08a      	sub	sp, #40	; 0x28
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	330b      	adds	r3, #11
 8000cea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d11d      	bne.n	8000d36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000cfa:	f7ff fd1b 	bl	8000734 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d02:	237f      	movs	r3, #127	; 0x7f
 8000d04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d06:	f7ff fdfd 	bl	8000904 <LL_DBGMCU_GetRevisionID>
 8000d0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d12:	f7ff fde9 	bl	80008e8 <LL_DBGMCU_GetDeviceID>
 8000d16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f006 fe5a 	bl	80079dc <SHCI_C2_Config>

    APP_BLE_Init();
 8000d28:	f007 fd38 	bl	800879c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f008 fb36 	bl	80093a0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000d34:	e007      	b.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
  return;
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
}
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d56:	f001 fc1f 	bl	8002598 <HAL_GetTick>
 8000d5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d66:	d00a      	beq.n	8000d7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000d68:	f001 fc2e 	bl	80025c8 <HAL_GetTickFreq>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	e002      	b.n	8000d7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000d78:	f7ff fe34 	bl	80009e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000d7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	f001 fc0b 	bl	8002598 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8f4      	bhi.n	8000d78 <HAL_Delay+0x2a>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f008 fb2e 	bl	8009400 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f008 fb1c 	bl	8009400 <UTIL_SEQ_Run>

  return;
 8000dc8:	bf00      	nop
}
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f008 fc2e 	bl	800963c <UTIL_SEQ_SetTask>
  return;
 8000de0:	bf00      	nop
}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000df0:	2002      	movs	r0, #2
 8000df2:	f008 fc8f 	bl	8009714 <UTIL_SEQ_SetEvt>
  return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f008 fca4 	bl	8009754 <UTIL_SEQ_WaitEvt>
  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <LL_EXTI_EnableIT_0_31>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e22:	4905      	ldr	r1, [pc, #20]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58000800 	.word	0x58000800

08000e3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]

}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	58000800 	.word	0x58000800

08000e60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000e76:	e005      	b.n	8000e84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d1f5      	bne.n	8000e78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000e8c:	683b      	ldr	r3, [r7, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40002800 	.word	0x40002800

08000ea0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	491d      	ldr	r1, [pc, #116]	; (8000f28 <LinkTimerAfter+0x88>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d009      	beq.n	8000ede <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	4916      	ldr	r1, [pc, #88]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3314      	adds	r3, #20
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3315      	adds	r3, #21
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3314      	adds	r3, #20
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <LinkTimerAfter+0x88>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3315      	adds	r3, #21
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	701a      	strb	r2, [r3, #0]

  return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000978 	.word	0x20000978

08000f2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <LinkTimerBefore+0xb8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d032      	beq.n	8000fae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3315      	adds	r3, #21
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3315      	adds	r3, #21
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3314      	adds	r3, #20
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	4913      	ldr	r1, [pc, #76]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000fac:	e014      	b.n	8000fd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3315      	adds	r3, #21
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3314      	adds	r3, #20
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	701a      	strb	r2, [r3, #0]
  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000a08 	.word	0x20000a08
 8000fe8:	20000978 	.word	0x20000978

08000fec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <linkTimer+0x144>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d118      	bne.n	8001032 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <linkTimer+0x144>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <linkTimer+0x148>)
 8001008:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <linkTimer+0x144>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	4949      	ldr	r1, [pc, #292]	; (8001138 <linkTimer+0x14c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	3315      	adds	r3, #21
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <linkTimer+0x150>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	81fb      	strh	r3, [r7, #14]
 8001030:	e078      	b.n	8001124 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001032:	f000 f909 	bl	8001248 <ReturnTimeElapsed>
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	493e      	ldr	r1, [pc, #248]	; (8001138 <linkTimer+0x14c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	4419      	add	r1, r3
 8001052:	4839      	ldr	r0, [pc, #228]	; (8001138 <linkTimer+0x14c>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4403      	add	r3, r0
 800105e:	3308      	adds	r3, #8
 8001060:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	4934      	ldr	r1, [pc, #208]	; (8001138 <linkTimer+0x14c>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <linkTimer+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <linkTimer+0x14c>)
 8001080:	460b      	mov	r3, r1
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	440b      	add	r3, r1
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d337      	bcc.n	8001104 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <linkTimer+0x144>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800109a:	7b7a      	ldrb	r2, [r7, #13]
 800109c:	4926      	ldr	r1, [pc, #152]	; (8001138 <linkTimer+0x14c>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3315      	adds	r3, #21
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010ae:	e013      	b.n	80010d8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80010b0:	7b7a      	ldrb	r2, [r7, #13]
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <linkTimer+0x14c>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	3315      	adds	r3, #21
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010c4:	7b7a      	ldrb	r2, [r7, #13]
 80010c6:	491c      	ldr	r1, [pc, #112]	; (8001138 <linkTimer+0x14c>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3315      	adds	r3, #21
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d00b      	beq.n	80010f6 <linkTimer+0x10a>
 80010de:	7b3a      	ldrb	r2, [r7, #12]
 80010e0:	4915      	ldr	r1, [pc, #84]	; (8001138 <linkTimer+0x14c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d2dc      	bcs.n	80010b0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80010f6:	7b7a      	ldrb	r2, [r7, #13]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fecf 	bl	8000ea0 <LinkTimerAfter>
 8001102:	e00f      	b.n	8001124 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <linkTimer+0x144>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff0c 	bl	8000f2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <linkTimer+0x144>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <linkTimer+0x148>)
 800111c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <linkTimer+0x144>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001124:	89fb      	ldrh	r3, [r7, #14]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000a08 	.word	0x20000a08
 8001134:	20000a09 	.word	0x20000a09
 8001138:	20000978 	.word	0x20000978
 800113c:	20000a0c 	.word	0x20000a0c

08001140 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <UnlinkTimer+0xf8>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	429a      	cmp	r2, r3
 800115a:	d111      	bne.n	8001180 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <UnlinkTimer+0xf8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <UnlinkTimer+0xfc>)
 8001164:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <UnlinkTimer+0x100>)
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3315      	adds	r3, #21
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <UnlinkTimer+0xf8>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e03e      	b.n	80011fe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	492f      	ldr	r1, [pc, #188]	; (8001240 <UnlinkTimer+0x100>)
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	3314      	adds	r3, #20
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	492a      	ldr	r1, [pc, #168]	; (8001240 <UnlinkTimer+0x100>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3315      	adds	r3, #21
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011a8:	79f9      	ldrb	r1, [r7, #7]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	4824      	ldr	r0, [pc, #144]	; (8001240 <UnlinkTimer+0x100>)
 80011ae:	460b      	mov	r3, r1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4403      	add	r3, r0
 80011b8:	3315      	adds	r3, #21
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	4920      	ldr	r1, [pc, #128]	; (8001240 <UnlinkTimer+0x100>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3315      	adds	r3, #21
 80011cc:	4602      	mov	r2, r0
 80011ce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d013      	beq.n	80011fe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80011d6:	79f9      	ldrb	r1, [r7, #7]
 80011d8:	7bba      	ldrb	r2, [r7, #14]
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <UnlinkTimer+0x100>)
 80011dc:	460b      	mov	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	440b      	add	r3, r1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4403      	add	r3, r0
 80011e6:	3314      	adds	r3, #20
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2d8      	uxtb	r0, r3
 80011ec:	4914      	ldr	r1, [pc, #80]	; (8001240 <UnlinkTimer+0x100>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3314      	adds	r3, #20
 80011fa:	4602      	mov	r2, r0
 80011fc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <UnlinkTimer+0x100>)
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <UnlinkTimer+0xf8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b06      	cmp	r3, #6
 800121a:	d107      	bne.n	800122c <UnlinkTimer+0xec>
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <UnlinkTimer+0x104>)
 8001224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001228:	601a      	str	r2, [r3, #0]
  }

  return;
 800122a:	bf00      	nop
 800122c:	bf00      	nop
}
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000a08 	.word	0x20000a08
 800123c:	20000a09 	.word	0x20000a09
 8001240:	20000978 	.word	0x20000978
 8001244:	20000a0c 	.word	0x20000a0c

08001248 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001256:	d026      	beq.n	80012a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001258:	f7ff fe02 	bl	8000e60 <ReadRtcSsrValue>
 800125c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	d805      	bhi.n	8001274 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <ReturnTimeElapsed+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e00a      	b.n	800128a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <ReturnTimeElapsed+0x74>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <ReturnTimeElapsed+0x78>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <ReturnTimeElapsed+0x7c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	40d3      	lsrs	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000a0c 	.word	0x20000a0c
 80012bc:	20000a14 	.word	0x20000a14
 80012c0:	20000a12 	.word	0x20000a12
 80012c4:	20000a11 	.word	0x20000a11

080012c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80012d8:	f7ff fdc2 	bl	8000e60 <ReadRtcSsrValue>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <RestartWakeupCounter+0x9c>)
 80012e0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f001 faf9 	bl	80028da <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80012e8:	e039      	b.n	800135e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d803      	bhi.n	80012f8 <RestartWakeupCounter+0x30>
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <RestartWakeupCounter+0xa0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d002      	beq.n	80012fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80012fe:	bf00      	nop
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <RestartWakeupCounter+0xa4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f8      	beq.n	8001300 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <RestartWakeupCounter+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <RestartWakeupCounter+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800131e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <RestartWakeupCounter+0xa8>)
 8001322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001326:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001328:	2003      	movs	r0, #3
 800132a:	f001 fae4 	bl	80028f6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <RestartWakeupCounter+0xac>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <RestartWakeupCounter+0xac>)
 800133a:	4313      	orrs	r3, r2
 800133c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800133e:	f7ff fd8f 	bl	8000e60 <ReadRtcSsrValue>
 8001342:	4603      	mov	r3, r0
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <RestartWakeupCounter+0x9c>)
 8001346:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <RestartWakeupCounter+0xa4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <RestartWakeupCounter+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001356:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001358:	f3af 8000 	nop.w
  return ;
 800135c:	bf00      	nop
}
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000a0c 	.word	0x20000a0c
 8001368:	20000a11 	.word	0x20000a11
 800136c:	20000aa8 	.word	0x20000aa8
 8001370:	58000800 	.word	0x58000800
 8001374:	40002800 	.word	0x40002800

08001378 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <RescheduleTimerList+0x11c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d107      	bne.n	800139c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800138c:	bf00      	nop
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <RescheduleTimerList+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f8      	bne.n	800138e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <RescheduleTimerList+0x120>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <RescheduleTimerList+0x120>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <RescheduleTimerList+0x124>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	493a      	ldr	r1, [pc, #232]	; (80014a0 <RescheduleTimerList+0x128>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80013c6:	f7ff ff3f 	bl	8001248 <ReturnTimeElapsed>
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d205      	bcs.n	80013e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e04d      	b.n	800147e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <RescheduleTimerList+0x130>)
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4413      	add	r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d906      	bls.n	8001402 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <RescheduleTimerList+0x130>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e03d      	b.n	800147e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <RescheduleTimerList+0x12c>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	e034      	b.n	800147e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	4922      	ldr	r1, [pc, #136]	; (80014a0 <RescheduleTimerList+0x128>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	429a      	cmp	r2, r3
 800142a:	d20a      	bcs.n	8001442 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	491c      	ldr	r1, [pc, #112]	; (80014a0 <RescheduleTimerList+0x128>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3308      	adds	r3, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e013      	b.n	800146a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	4916      	ldr	r1, [pc, #88]	; (80014a0 <RescheduleTimerList+0x128>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3308      	adds	r3, #8
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	1ac9      	subs	r1, r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <RescheduleTimerList+0x128>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4403      	add	r3, r0
 8001466:	3308      	adds	r3, #8
 8001468:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <RescheduleTimerList+0x128>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3315      	adds	r3, #21
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d1c7      	bne.n	8001414 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff1e 	bl	80012c8 <RestartWakeupCounter>

  return ;
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40002800 	.word	0x40002800
 8001498:	20000aa8 	.word	0x20000aa8
 800149c:	20000a08 	.word	0x20000a08
 80014a0:	20000978 	.word	0x20000978
 80014a4:	20000a10 	.word	0x20000a10
 80014a8:	20000a16 	.word	0x20000a16

080014ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b2:	f3ef 8310 	mrs	r3, PRIMASK
 80014b6:	617b      	str	r3, [r7, #20]
  return(result);
 80014b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ca      	movs	r2, #202	; 0xca
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2253      	movs	r2, #83	; 0x53
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80014e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014ec:	4950      	ldr	r1, [pc, #320]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	330c      	adds	r3, #12
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d16e      	bne.n	80015e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001502:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001506:	494a      	ldr	r1, [pc, #296]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001516:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800151a:	4945      	ldr	r1, [pc, #276]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d04c      	beq.n	80015d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001536:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800153a:	493d      	ldr	r1, [pc, #244]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	330d      	adds	r3, #13
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d124      	bne.n	800159a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdf2 	bl	8001140 <UnlinkTimer>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f383 8810 	msr	PRIMASK, r3
}
 8001566:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001568:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f9b8 	bl	80018f8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	22ca      	movs	r2, #202	; 0xca
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2253      	movs	r2, #83	; 0x53
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	e012      	b.n	80015c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f383 8810 	msr	PRIMASK, r3
}
 80015a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f920 	bl	80017f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22ca      	movs	r2, #202	; 0xca
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2253      	movs	r2, #83	; 0x53
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80015c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4619      	mov	r1, r3
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f000 fa1b 	bl	8001a04 <HW_TS_RTC_Int_AppNot>
 80015ce:	e022      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80015d0:	f7ff fed2 	bl	8001378 <RescheduleTimerList>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f383 8810 	msr	PRIMASK, r3
}
 80015de:	e01a      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015e0:	bf00      	nop
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f8      	beq.n	80015e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001600:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001604:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f383 8810 	msr	PRIMASK, r3
}
 8001614:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800161e:	bf00      	nop
}
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000aa8 	.word	0x20000aa8
 800162c:	20000a08 	.word	0x20000a08
 8001630:	20000978 	.word	0x20000978
 8001634:	20000a10 	.word	0x20000a10
 8001638:	58000800 	.word	0x58000800

0800163c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HW_TS_Init+0x188>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	22ca      	movs	r2, #202	; 0xca
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HW_TS_Init+0x188>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001658:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HW_TS_Init+0x18c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <HW_TS_Init+0x18c>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HW_TS_Init+0x18c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f1c3 0304 	rsb	r3, r3, #4
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HW_TS_Init+0x190>)
 8001678:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HW_TS_Init+0x18c>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001682:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001686:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	fa92 f2a2 	rbit	r2, r2
 800168e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	2a00      	cmp	r2, #0
 8001698:	d101      	bne.n	800169e <HW_TS_Init+0x62>
  {
    return 32U;
 800169a:	2220      	movs	r2, #32
 800169c:	e003      	b.n	80016a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	40d3      	lsrs	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HW_TS_Init+0x194>)
 80016b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HW_TS_Init+0x18c>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HW_TS_Init+0x198>)
 80016c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HW_TS_Init+0x198>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HW_TS_Init+0x194>)
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d8:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HW_TS_Init+0x190>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	40d3      	lsrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d904      	bls.n	80016f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HW_TS_Init+0x19c>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e003      	b.n	80016fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HW_TS_Init+0x19c>)
 80016fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80016fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001700:	f7ff fb9c 	bl	8000e3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001708:	f7ff fb84 	bl	8000e14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HW_TS_Init+0x1a0>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HW_TS_Init+0x1a4>)
 800171a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
 8001724:	e00c      	b.n	8001740 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001726:	7ffa      	ldrb	r2, [r7, #31]
 8001728:	492e      	ldr	r1, [pc, #184]	; (80017e4 <HW_TS_Init+0x1a8>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	330c      	adds	r3, #12
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	3301      	adds	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d9ef      	bls.n	8001726 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HW_TS_Init+0x1ac>)
 8001748:	2206      	movs	r2, #6
 800174a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HW_TS_Init+0x188>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HW_TS_Init+0x188>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HW_TS_Init+0x188>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HW_TS_Init+0x188>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800176c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HW_TS_Init+0x1b0>)
 8001770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001776:	2003      	movs	r0, #3
 8001778:	f001 f8bd 	bl	80028f6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HW_TS_Init+0x188>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HW_TS_Init+0x188>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e009      	b.n	80017a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HW_TS_Init+0x188>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800179c:	2003      	movs	r0, #3
 800179e:	f001 f89c 	bl	80028da <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HW_TS_Init+0x188>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80017aa:	2200      	movs	r2, #0
 80017ac:	2103      	movs	r1, #3
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 f851 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017b4:	2003      	movs	r0, #3
 80017b6:	f001 f868 	bl	800288a <HAL_NVIC_EnableIRQ>

  return;
 80017ba:	bf00      	nop
}
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000aa8 	.word	0x20000aa8
 80017c8:	40002800 	.word	0x40002800
 80017cc:	20000a11 	.word	0x20000a11
 80017d0:	20000a12 	.word	0x20000a12
 80017d4:	20000a14 	.word	0x20000a14
 80017d8:	20000a16 	.word	0x20000a16
 80017dc:	20000a10 	.word	0x20000a10
 80017e0:	20000a0c 	.word	0x20000a0c
 80017e4:	20000978 	.word	0x20000978
 80017e8:	20000a08 	.word	0x20000a08
 80017ec:	58000800 	.word	0x58000800

080017f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fa:	f3ef 8310 	mrs	r3, PRIMASK
 80017fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001800:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001808:	2003      	movs	r0, #3
 800180a:	f001 f84c 	bl	80028a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22ca      	movs	r2, #202	; 0xca
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2253      	movs	r2, #83	; 0x53
 800181c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	4930      	ldr	r1, [pc, #192]	; (80018e4 <HW_TS_Stop+0xf4>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	330c      	adds	r3, #12
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d142      	bne.n	80018bc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc80 	bl	8001140 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HW_TS_Stop+0xf8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d12f      	bne.n	80018ac <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HW_TS_Stop+0xfc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001858:	d107      	bne.n	800186a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800185a:	bf00      	nop
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HW_TS_Stop+0xf0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f8      	bne.n	800185c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HW_TS_Stop+0xf0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001878:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800187a:	bf00      	nop
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HW_TS_Stop+0xf0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f8      	beq.n	800187c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HW_TS_Stop+0xf0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800189a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HW_TS_Stop+0x100>)
 800189e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 f826 	bl	80028f6 <HAL_NVIC_ClearPendingIRQ>
 80018aa:	e007      	b.n	80018bc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HW_TS_Stop+0x104>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	7cfa      	ldrb	r2, [r7, #19]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80018b8:	f7ff fd5e 	bl	8001378 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HW_TS_Stop+0xf0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 ffe0 	bl	800288a <HAL_NVIC_EnableIRQ>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f383 8810 	msr	PRIMASK, r3
}
 80018d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018d6:	bf00      	nop
}
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000aa8 	.word	0x20000aa8
 80018e4:	20000978 	.word	0x20000978
 80018e8:	20000a08 	.word	0x20000a08
 80018ec:	40002800 	.word	0x40002800
 80018f0:	58000800 	.word	0x58000800
 80018f4:	20000a09 	.word	0x20000a09

080018f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	493b      	ldr	r1, [pc, #236]	; (80019f4 <HW_TS_Start+0xfc>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	330c      	adds	r3, #12
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d103      	bne.n	8001924 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff66 	bl	80017f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001924:	f3ef 8310 	mrs	r3, PRIMASK
 8001928:	60fb      	str	r3, [r7, #12]
  return(result);
 800192a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800192c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800192e:	b672      	cpsid	i
}
 8001930:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001932:	2003      	movs	r0, #3
 8001934:	f000 ffb7 	bl	80028a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HW_TS_Start+0x100>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	22ca      	movs	r2, #202	; 0xca
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HW_TS_Start+0x100>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2253      	movs	r2, #83	; 0x53
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	492a      	ldr	r1, [pc, #168]	; (80019f4 <HW_TS_Start+0xfc>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <HW_TS_Start+0xfc>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	4920      	ldr	r1, [pc, #128]	; (80019f4 <HW_TS_Start+0xfc>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb30 	bl	8000fec <linkTimer>
 800198c:	4603      	mov	r3, r0
 800198e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HW_TS_Start+0x104>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HW_TS_Start+0x108>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	7c7a      	ldrb	r2, [r7, #17]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d002      	beq.n	80019a8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80019a2:	f7ff fce9 	bl	8001378 <RescheduleTimerList>
 80019a6:	e013      	b.n	80019d0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	4912      	ldr	r1, [pc, #72]	; (80019f4 <HW_TS_Start+0xfc>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3308      	adds	r3, #8
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	8a7b      	ldrh	r3, [r7, #18]
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HW_TS_Start+0xfc>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4403      	add	r3, r0
 80019cc:	3308      	adds	r3, #8
 80019ce:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HW_TS_Start+0x100>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 ff56 	bl	800288a <HAL_NVIC_EnableIRQ>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f383 8810 	msr	PRIMASK, r3
}
 80019e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019ea:	bf00      	nop
}
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000978 	.word	0x20000978
 80019f8:	20000aa8 	.word	0x20000aa8
 80019fc:	20000a08 	.word	0x20000a08
 8001a00:	20000a09 	.word	0x20000a09

08001a04 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4798      	blx	r3

  return;
 8001a16:	bf00      	nop
}
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <LL_RCC_LSE_SetDriveCapability>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f023 0218 	bic.w	r2, r3, #24
 8001a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_AHB2_GRP1_EnableClock>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a82:	f000 fd1b 	bl	80024bc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001a86:	f7fe ffed 	bl	8000a64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8a:	f000 f857 	bl	8001b3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a8e:	f000 f8b7 	bl	8001c00 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001a92:	f000 f915 	bl	8001cc0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a96:	f000 f9b1 	bl	8001dfc <MX_GPIO_Init>
  MX_RTC_Init();
 8001a9a:	f000 f92d 	bl	8001cf8 <MX_RTC_Init>
  MX_I2C1_Init();
 8001a9e:	f000 f8cf 	bl	8001c40 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001aa2:	f000 f95d 	bl	8001d60 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001aa6:	f000 f91f 	bl	8001ce8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring sensor...");
 8001aaa:	481d      	ldr	r0, [pc, #116]	; (8001b20 <main+0xa4>)
 8001aac:	f007 ff26 	bl	80098fc <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f7ff f94c 	bl	8000d4e <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001ab6:	491b      	ldr	r1, [pc, #108]	; (8001b24 <main+0xa8>)
 8001ab8:	481b      	ldr	r0, [pc, #108]	; (8001b28 <main+0xac>)
 8001aba:	f7fe fd3b 	bl	8000534 <BH1790GLC_init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if(status != 0){
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <main+0x58>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4817      	ldr	r0, [pc, #92]	; (8001b2c <main+0xb0>)
 8001ace:	f007 ff15 	bl	80098fc <iprintf>
 8001ad2:	e004      	b.n	8001ade <main+0x62>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4815      	ldr	r0, [pc, #84]	; (8001b30 <main+0xb4>)
 8001ada:	f007 ff0f 	bl	80098fc <iprintf>
  }

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001ade:	f7fe ffcf 	bl	8000a80 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001ae2:	f7ff f959 	bl	8000d98 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    uint8_t err;

    err = get_val(&hrm);
 8001ae6:	4810      	ldr	r0, [pc, #64]	; (8001b28 <main+0xac>)
 8001ae8:	f7fe fd8f 	bl	800060a <get_val>
 8001aec:	4603      	mov	r3, r0
 8001aee:	71bb      	strb	r3, [r7, #6]
    if(err != 0){
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <main+0x86>
    	printf("Could not read sensor. Error code: %d\n\r", err);
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	4619      	mov	r1, r3
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <main+0xb8>)
 8001afc:	f007 fefe 	bl	80098fc <iprintf>
 8001b00:	e008      	b.n	8001b14 <main+0x98>
    }else{
		printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <main+0xac>)
 8001b04:	791b      	ldrb	r3, [r3, #4]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <main+0xac>)
 8001b0a:	795b      	ldrb	r3, [r3, #5]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	480a      	ldr	r0, [pc, #40]	; (8001b38 <main+0xbc>)
 8001b10:	f007 fef4 	bl	80098fc <iprintf>
    }

    HAL_Delay(2000);
 8001b14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b18:	f7ff f919 	bl	8000d4e <HAL_Delay>
  {
 8001b1c:	e7e1      	b.n	8001ae2 <main+0x66>
 8001b1e:	bf00      	nop
 8001b20:	0800a84c 	.word	0x0800a84c
 8001b24:	20000a18 	.word	0x20000a18
 8001b28:	20000b60 	.word	0x20000b60
 8001b2c:	0800a864 	.word	0x0800a864
 8001b30:	0800a890 	.word	0x0800a890
 8001b34:	0800a8c4 	.word	0x0800a8c4
 8001b38:	0800a8ec 	.word	0x0800a8ec

08001b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b09a      	sub	sp, #104	; 0x68
 8001b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	2248      	movs	r2, #72	; 0x48
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f007 fece 	bl	80098ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b62:	f001 ff31 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001b66:	2010      	movs	r0, #16
 8001b68:	f7ff ff59 	bl	8001a1e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <SystemClock_Config+0xc0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <SystemClock_Config+0xc0>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <SystemClock_Config+0xc0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b88:	2327      	movs	r3, #39	; 0x27
 8001b8a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b92:	2301      	movs	r3, #1
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001ba8:	23a0      	movs	r3, #160	; 0xa0
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb0:	f107 0320 	add.w	r3, r7, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fa9b 	bl	80040f0 <HAL_RCC_OscConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001bc0:	f000 f988 	bl	8001ed4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001bc4:	236f      	movs	r3, #111	; 0x6f
 8001bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2101      	movs	r1, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fdf7 	bl	80047d8 <HAL_RCC_ClockConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001bf0:	f000 f970 	bl	8001ed4 <Error_Handler>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3768      	adds	r7, #104	; 0x68
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	58000400 	.word	0x58000400

08001c00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c06:	463b      	mov	r3, r7
 8001c08:	2250      	movs	r2, #80	; 0x50
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 fe6d 	bl	80098ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001c12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c16:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c26:	463b      	mov	r3, r7
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fa12 	bl	8005052 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001c34:	f000 f94e 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001c38:	bf00      	nop
 8001c3a:	3750      	adds	r7, #80	; 0x50
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <MX_I2C1_Init+0x78>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <MX_I2C1_Init+0x7c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7a:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c7c:	f000 fff6 	bl	8002c6c <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c86:	f000 f925 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001c8e:	f001 fd7d 	bl	800378c <HAL_I2CEx_ConfigAnalogFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f000 f91c 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_I2C1_Init+0x74>)
 8001ca0:	f001 fdbf 	bl	8003822 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 f913 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000a18 	.word	0x20000a18
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	00707cbb 	.word	0x00707cbb

08001cc0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_IPCC_Init+0x20>)
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <MX_IPCC_Init+0x24>)
 8001cc8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_IPCC_Init+0x20>)
 8001ccc:	f001 fdf6 	bl	80038bc <HAL_IPCC_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001cd6:	f000 f8fd 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000a6c 	.word	0x20000a6c
 8001ce4:	58000c00 	.word	0x58000c00

08001ce8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <MX_RTC_Init+0x60>)
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <MX_RTC_Init+0x64>)
 8001d00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d2e:	480a      	ldr	r0, [pc, #40]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d30:	f003 fc16 	bl	8005560 <HAL_RTC_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f000 f8cb 	bl	8001ed4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_RTC_Init+0x60>)
 8001d44:	f003 fd0c 	bl	8005760 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d4e:	f000 f8c1 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000aa8 	.word	0x20000aa8
 8001d5c:	40002800 	.word	0x40002800

08001d60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d66:	4a24      	ldr	r2, [pc, #144]	; (8001df8 <MX_USART1_UART_Init+0x98>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d80:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001d84:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d88:	220c      	movs	r2, #12
 8001d8a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001daa:	4812      	ldr	r0, [pc, #72]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001dac:	f003 fdb4 	bl	8005918 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001db6:	f000 f88d 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001dbe:	f004 fb03 	bl	80063c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001dc8:	f000 f884 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001dd0:	f004 fb38 	bl	8006444 <HAL_UARTEx_SetRxFifoThreshold>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001dda:	f000 f87b 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART1_UART_Init+0x94>)
 8001de0:	f004 fab9 	bl	8006356 <HAL_UARTEx_DisableFifoMode>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001dea:	f000 f873 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000acc 	.word	0x20000acc
 8001df8:	40013800 	.word	0x40013800

08001dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	2004      	movs	r0, #4
 8001e12:	f7ff fe1a 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7ff fe17 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7ff fe14 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e22:	2008      	movs	r0, #8
 8001e24:	f7ff fe11 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2123      	movs	r1, #35	; 0x23
 8001e2c:	481d      	ldr	r0, [pc, #116]	; (8001ea4 <MX_GPIO_Init+0xa8>)
 8001e2e:	f000 fee1 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e32:	2310      	movs	r3, #16
 8001e34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4819      	ldr	r0, [pc, #100]	; (8001ea8 <MX_GPIO_Init+0xac>)
 8001e44:	f000 fd66 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001e48:	2323      	movs	r3, #35	; 0x23
 8001e4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <MX_GPIO_Init+0xa8>)
 8001e5e:	f000 fd59 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e74:	230a      	movs	r3, #10
 8001e76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e80:	f000 fd48 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001e84:	2303      	movs	r3, #3
 8001e86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_GPIO_Init+0xb0>)
 8001e96:	f000 fd3d 	bl	8002914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00

08001eb0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001eb8:	1d39      	adds	r1, r7, #4
 8001eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <__io_putchar+0x20>)
 8001ec2:	f003 fd79 	bl	80059b8 <HAL_UART_Transmit>

  return ch;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000acc 	.word	0x20000acc

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	e7fe      	b.n	8001edc <Error_Handler+0x8>

08001ede <LL_RCC_EnableRTC>:
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_AHB2_GRP1_EnableClock>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f24:	68fb      	ldr	r3, [r7, #12]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_AHB3_GRP1_EnableClock>:
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4013      	ands	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f88:	68fb      	ldr	r3, [r7, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001fcc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001fd0:	f7ff ffaf 	bl	8001f32 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	202e      	movs	r0, #46	; 0x2e
 8001fda:	f000 fc3c 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001fde:	202e      	movs	r0, #46	; 0x2e
 8001fe0:	f000 fc53 	bl	800288a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b09c      	sub	sp, #112	; 0x70
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2250      	movs	r2, #80	; 0x50
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f007 fc6f 	bl	80098ec <memset>
  if(hi2c->Instance==I2C1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_I2C_MspInit+0x98>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12e      	bne.n	8002076 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002018:	2304      	movs	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800201c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4618      	mov	r0, r3
 8002028:	f003 f813 	bl	8005052 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002032:	f7ff ff4f 	bl	8001ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2002      	movs	r0, #2
 8002038:	f7ff ff62 	bl	8001f00 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800203c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002040:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204e:	2304      	movs	r3, #4
 8002050:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002056:	4619      	mov	r1, r3
 8002058:	480a      	ldr	r0, [pc, #40]	; (8002084 <HAL_I2C_MspInit+0x9c>)
 800205a:	f000 fc5b 	bl	8002914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002062:	f7ff ff7f 	bl	8001f64 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201e      	movs	r0, #30
 800206c:	f000 fbf3 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002070:	201e      	movs	r0, #30
 8002072:	f000 fc0a 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3770      	adds	r7, #112	; 0x70
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	48000400 	.word	0x48000400

08002088 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_IPCC_MspInit+0x44>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800209a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800209e:	f7ff ff48 	bl	8001f32 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	f000 fbd5 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80020ac:	202c      	movs	r0, #44	; 0x2c
 80020ae:	f000 fbec 	bl	800288a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	202d      	movs	r0, #45	; 0x2d
 80020b8:	f000 fbcd 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020bc:	202d      	movs	r0, #45	; 0x2d
 80020be:	f000 fbe4 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	58000c00 	.word	0x58000c00

080020d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b096      	sub	sp, #88	; 0x58
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	2250      	movs	r2, #80	; 0x50
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f007 fc03 	bl	80098ec <memset>
  if(hrtc->Instance==RTC)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_RTC_MspInit+0x64>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d11d      	bne.n	800212c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020f4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4618      	mov	r0, r3
 8002102:	f002 ffa6 	bl	8005052 <HAL_RCCEx_PeriphCLKConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800210c:	f7ff fee2 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002110:	f7ff fee5 	bl	8001ede <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002114:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002118:	f7ff ff24 	bl	8001f64 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2003      	movs	r0, #3
 8002122:	f000 fb98 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002126:	2003      	movs	r0, #3
 8002128:	f000 fbaf 	bl	800288a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800212c:	bf00      	nop
 800212e:	3758      	adds	r7, #88	; 0x58
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40002800 	.word	0x40002800

08002138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09c      	sub	sp, #112	; 0x70
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2250      	movs	r2, #80	; 0x50
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f007 fbc7 	bl	80098ec <memset>
  if(huart->Instance==USART1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a16      	ldr	r2, [pc, #88]	; (80021bc <HAL_UART_MspInit+0x84>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d124      	bne.n	80021b2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002168:	2301      	movs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4618      	mov	r0, r3
 8002176:	f002 ff6c 	bl	8005052 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002180:	f7ff fea8 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002184:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002188:	f7ff ff05 	bl	8001f96 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218c:	2002      	movs	r0, #2
 800218e:	f7ff feb7 	bl	8001f00 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a2:	2307      	movs	r3, #7
 80021a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021aa:	4619      	mov	r1, r3
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <HAL_UART_MspInit+0x88>)
 80021ae:	f000 fbb1 	bl	8002914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3770      	adds	r7, #112	; 0x70
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40013800 	.word	0x40013800
 80021c0:	48000400 	.word	0x48000400

080021c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <NMI_Handler+0x4>

080021ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler+0x4>

080021d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002210:	f000 f9ae 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800221c:	f7ff f946 	bl	80014ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <I2C1_EV_IRQHandler+0x10>)
 800222a:	f000 ffdd 	bl	80031e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000a18 	.word	0x20000a18

08002238 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800223c:	f006 ff5a 	bl	80090f4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002248:	f006 ff8c 	bl	8009164 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002254:	f000 fce6 	bl	8002c24 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800226e:	f3af 8000 	nop.w
 8002272:	4601      	mov	r1, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	b2ca      	uxtb	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf0      	blt.n	800226e <_read+0x12>
  }

  return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e009      	b.n	80022bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	60ba      	str	r2, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fdfd 	bl	8001eb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf1      	blt.n	80022a8 <_write+0x12>
  }
  return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_close>:

int _close(int file)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f6:	605a      	str	r2, [r3, #4]
  return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_isatty>:

int _isatty(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f007 fa88 	bl	800987c <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20030000 	.word	0x20030000
 8002398:	00000400 	.word	0x00000400
 800239c:	20000b68 	.word	0x20000b68
 80023a0:	20000d30 	.word	0x20000d30

080023a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <SystemInit+0x98>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a23      	ldr	r2, [pc, #140]	; (800243c <SystemInit+0x98>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80023c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023cc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80023d0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023dc:	4b18      	ldr	r3, [pc, #96]	; (8002440 <SystemInit+0x9c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ee:	f023 0305 	bic.w	r3, r3, #5
 80023f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <SystemInit+0xa0>)
 8002410:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <SystemInit+0xa0>)
 8002418:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	faf6fefb 	.word	0xfaf6fefb
 8002444:	22041000 	.word	0x22041000

08002448 <CopyDataInit>:
 8002448:	58d4      	ldr	r4, [r2, r3]
 800244a:	50c4      	str	r4, [r0, r3]
 800244c:	3304      	adds	r3, #4

0800244e <LoopCopyDataInit>:
 800244e:	18c4      	adds	r4, r0, r3
 8002450:	428c      	cmp	r4, r1
 8002452:	d3f9      	bcc.n	8002448 <CopyDataInit>
 8002454:	4770      	bx	lr

08002456 <FillZerobss>:
 8002456:	6003      	str	r3, [r0, #0]
 8002458:	3004      	adds	r0, #4

0800245a <LoopFillZerobss>:
 800245a:	4288      	cmp	r0, r1
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>
 800245e:	4770      	bx	lr

08002460 <Reset_Handler>:
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <LoopForever+0x2>)
 8002462:	4685      	mov	sp, r0
 8002464:	f7ff ff9e 	bl	80023a4 <SystemInit>
 8002468:	480b      	ldr	r0, [pc, #44]	; (8002498 <LoopForever+0x6>)
 800246a:	490c      	ldr	r1, [pc, #48]	; (800249c <LoopForever+0xa>)
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <LoopForever+0xe>)
 800246e:	2300      	movs	r3, #0
 8002470:	f7ff ffed 	bl	800244e <LoopCopyDataInit>
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <LoopForever+0x12>)
 8002476:	490c      	ldr	r1, [pc, #48]	; (80024a8 <LoopForever+0x16>)
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <LoopForever+0x1a>)
 800247a:	2300      	movs	r3, #0
 800247c:	f7ff ffe7 	bl	800244e <LoopCopyDataInit>
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <LoopForever+0x1e>)
 8002482:	490c      	ldr	r1, [pc, #48]	; (80024b4 <LoopForever+0x22>)
 8002484:	2300      	movs	r3, #0
 8002486:	f7ff ffe8 	bl	800245a <LoopFillZerobss>
 800248a:	f007 f9fd 	bl	8009888 <__libc_init_array>
 800248e:	f7ff faf5 	bl	8001a7c <main>

08002492 <LoopForever>:
 8002492:	e7fe      	b.n	8002492 <LoopForever>
 8002494:	20030000 	.word	0x20030000
 8002498:	20000008 	.word	0x20000008
 800249c:	2000008c 	.word	0x2000008c
 80024a0:	0800ac5c 	.word	0x0800ac5c
 80024a4:	200301e3 	.word	0x200301e3
 80024a8:	200301e3 	.word	0x200301e3
 80024ac:	0800b5a9 	.word	0x0800b5a9
 80024b0:	2000095c 	.word	0x2000095c
 80024b4:	20000d2c 	.word	0x20000d2c

080024b8 <ADC1_IRQHandler>:
 80024b8:	e7fe      	b.n	80024b8 <ADC1_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_Init+0x3c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_Init+0x3c>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f000 f9b4 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d8:	2000      	movs	r0, #0
 80024da:	f000 f80f 	bl	80024fc <HAL_InitTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	71fb      	strb	r3, [r7, #7]
 80024e8:	e001      	b.n	80024ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ea:	f7ff fd6d 	bl	8001fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58004000 	.word	0x58004000

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_InitTick+0x6c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d024      	beq.n	800255a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002510:	f002 fb0e 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_InitTick+0x6c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002520:	fbb3 f3f1 	udiv	r3, r3, r1
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f9ca 	bl	80028c2 <HAL_SYSTICK_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10f      	bne.n	8002554 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	d809      	bhi.n	800254e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253a:	2200      	movs	r2, #0
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002542:	f000 f988 	bl	8002856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_InitTick+0x70>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e007      	b.n	800255e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e004      	b.n	800255e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e001      	b.n	800255e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000010 	.word	0x20000010
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000010 	.word	0x20000010
 8002594:	20000b6c 	.word	0x20000b6c

08002598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000b6c 	.word	0x20000b6c

080025b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTickPrio+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTickFreq+0x14>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000010 	.word	0x20000010

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db12      	blt.n	80026b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	490a      	ldr	r1, [pc, #40]	; (80026c4 <__NVIC_DisableIRQ+0x44>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	3320      	adds	r3, #32
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80026ac:	f3bf 8f4f 	dsb	sy
}
 80026b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026b2:	f3bf 8f6f 	isb	sy
}
 80026b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100

080026c8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0c      	blt.n	80026f4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_SetPendingIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	3340      	adds	r3, #64	; 0x40
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0c      	blt.n	8002730 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <__NVIC_ClearPendingIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	3360      	adds	r3, #96	; 0x60
 800272c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fec9 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff fee0 	bl	8002628 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff90 	bl	8002794 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5f 	bl	8002740 <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fed3 	bl	8002644 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fee3 	bl	8002680 <__NVIC_DisableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ff96 	bl	80027fc <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff feed 	bl	80026c8 <__NVIC_SetPendingIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fefd 	bl	8002704 <__NVIC_ClearPendingIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002922:	e14c      	b.n	8002bbe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	4013      	ands	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 813e 	beq.w	8002bb8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d005      	beq.n	8002954 <HAL_GPIO_Init+0x40>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d130      	bne.n	80029b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	2203      	movs	r2, #3
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800298a:	2201      	movs	r2, #1
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f003 0201 	and.w	r2, r3, #1
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d017      	beq.n	80029f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d123      	bne.n	8002a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	08da      	lsrs	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3208      	adds	r2, #8
 8002a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	08da      	lsrs	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3208      	adds	r2, #8
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0203 	and.w	r2, r3, #3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8098 	beq.w	8002bb8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a88:	4a54      	ldr	r2, [pc, #336]	; (8002bdc <HAL_GPIO_Init+0x2c8>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ab2:	d019      	beq.n	8002ae8 <HAL_GPIO_Init+0x1d4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a4a      	ldr	r2, [pc, #296]	; (8002be0 <HAL_GPIO_Init+0x2cc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_GPIO_Init+0x1d0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a49      	ldr	r2, [pc, #292]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_GPIO_Init+0x1cc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a48      	ldr	r2, [pc, #288]	; (8002be8 <HAL_GPIO_Init+0x2d4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_Init+0x1c8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a47      	ldr	r2, [pc, #284]	; (8002bec <HAL_GPIO_Init+0x2d8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d101      	bne.n	8002ad8 <HAL_GPIO_Init+0x1c4>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e008      	b.n	8002aea <HAL_GPIO_Init+0x1d6>
 8002ad8:	2307      	movs	r3, #7
 8002ada:	e006      	b.n	8002aea <HAL_GPIO_Init+0x1d6>
 8002adc:	2303      	movs	r3, #3
 8002ade:	e004      	b.n	8002aea <HAL_GPIO_Init+0x1d6>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e002      	b.n	8002aea <HAL_GPIO_Init+0x1d6>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_GPIO_Init+0x1d6>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	f002 0203 	and.w	r2, r2, #3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4093      	lsls	r3, r2
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002afa:	4938      	ldr	r1, [pc, #224]	; (8002bdc <HAL_GPIO_Init+0x2c8>)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b2c:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b56:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bb0:	4a0f      	ldr	r2, [pc, #60]	; (8002bf0 <HAL_GPIO_Init+0x2dc>)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f aeab 	bne.w	8002924 <HAL_GPIO_Init+0x10>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	48000400 	.word	0x48000400
 8002be4:	48000800 	.word	0x48000800
 8002be8:	48000c00 	.word	0x48000c00
 8002bec:	48001000 	.word	0x48001000
 8002bf0:	58000800 	.word	0x58000800

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_HSEM_IRQHandler+0x30>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_HSEM_IRQHandler+0x30>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <HAL_HSEM_IRQHandler+0x30>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <HAL_HSEM_IRQHandler+0x30>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f807 	bl	8002c58 <HAL_HSEM_FreeCallback>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	58001500 	.word	0x58001500

08002c58 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e081      	b.n	8002d82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff f9a8 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d107      	bne.n	8002ce6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	e006      	b.n	8002cf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d104      	bne.n	8002d06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	817b      	strh	r3, [r7, #10]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	813b      	strh	r3, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	f040 80f9 	bne.w	8002fa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x34>
 8002dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ed      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2C_Mem_Write+0x4e>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0e6      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002de2:	f7ff fbd9 	bl	8002598 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2319      	movs	r3, #25
 8002dee:	2201      	movs	r2, #1
 8002df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fadd 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d1      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	; 0x21
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e2c:	88f8      	ldrh	r0, [r7, #6]
 8002e2e:	893a      	ldrh	r2, [r7, #8]
 8002e30:	8979      	ldrh	r1, [r7, #10]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f9ed 	bl	800321c <I2C_RequestMemoryWrite>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0a9      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2bff      	cmp	r3, #255	; 0xff
 8002e5c:	d90e      	bls.n	8002e7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fc57 	bl	8003728 <I2C_TransferConfig>
 8002e7a:	e00f      	b.n	8002e9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fc46 	bl	8003728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fad6 	bl	8003452 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e07b      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d034      	beq.n	8002f54 <HAL_I2C_Mem_Write+0x1c8>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d130      	bne.n	8002f54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fa59 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e04d      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d90e      	bls.n	8002f34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22ff      	movs	r2, #255	; 0xff
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fbfb 	bl	8003728 <I2C_TransferConfig>
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fbea 	bl	8003728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d19e      	bne.n	8002e9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fabc 	bl	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01a      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_I2C_Mem_Write+0x224>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	fe00e800 	.word	0xfe00e800

08002fb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	f040 80fd 	bne.w	80031d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x34>
 8002fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0f1      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Mem_Read+0x4e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0ea      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800300a:	f7ff fac5 	bl	8002598 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f9c9 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d5      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2222      	movs	r2, #34	; 0x22
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2240      	movs	r2, #64	; 0x40
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003054:	88f8      	ldrh	r0, [r7, #6]
 8003056:	893a      	ldrh	r2, [r7, #8]
 8003058:	8979      	ldrh	r1, [r7, #10]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f92d 	bl	80032c4 <I2C_RequestMemoryRead>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0ad      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2bff      	cmp	r3, #255	; 0xff
 8003084:	d90e      	bls.n	80030a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <HAL_I2C_Mem_Read+0x22c>)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fb43 	bl	8003728 <I2C_TransferConfig>
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_I2C_Mem_Read+0x22c>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fb32 	bl	8003728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	2104      	movs	r1, #4
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f970 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e07c      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d034      	beq.n	8003184 <HAL_I2C_Mem_Read+0x1d0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d130      	bne.n	8003184 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f941 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e04d      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	2bff      	cmp	r3, #255	; 0xff
 8003144:	d90e      	bls.n	8003164 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	22ff      	movs	r2, #255	; 0xff
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	b2da      	uxtb	r2, r3
 8003152:	8979      	ldrh	r1, [r7, #10]
 8003154:	2300      	movs	r3, #0
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fae3 	bl	8003728 <I2C_TransferConfig>
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	b2da      	uxtb	r2, r3
 8003174:	8979      	ldrh	r1, [r7, #10]
 8003176:	2300      	movs	r3, #0
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fad2 	bl	8003728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d19a      	bne.n	80030c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f9a4 	bl	80034e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e01a      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2220      	movs	r2, #32
 80031a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_I2C_Mem_Read+0x230>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e000      	b.n	80031d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	80002400 	.word	0x80002400
 80031e4:	fe00e800 	.word	0xfe00e800

080031e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
  }
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	817b      	strh	r3, [r7, #10]
 800322e:	460b      	mov	r3, r1
 8003230:	813b      	strh	r3, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <I2C_RequestMemoryWrite+0xa4>)
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fa6f 	bl	8003728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	69b9      	ldr	r1, [r7, #24]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f8ff 	bl	8003452 <I2C_WaitOnTXISFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e02c      	b.n	80032b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003264:	893b      	ldrh	r3, [r7, #8]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
 800326e:	e015      	b.n	800329c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	b29b      	uxth	r3, r3
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8e5 	bl	8003452 <I2C_WaitOnTXISFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e012      	b.n	80032b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003292:	893b      	ldrh	r3, [r7, #8]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f884 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	80002000 	.word	0x80002000

080032c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	817b      	strh	r3, [r7, #10]
 80032d6:	460b      	mov	r3, r1
 80032d8:	813b      	strh	r3, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <I2C_RequestMemoryRead+0xa4>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2300      	movs	r3, #0
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fa1c 	bl	8003728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8ac 	bl	8003452 <I2C_WaitOnTXISFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e02c      	b.n	800335e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800330a:	893b      	ldrh	r3, [r7, #8]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
 8003314:	e015      	b.n	8003342 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003316:	893b      	ldrh	r3, [r7, #8]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	b29b      	uxth	r3, r3
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	69b9      	ldr	r1, [r7, #24]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f892 	bl	8003452 <I2C_WaitOnTXISFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e012      	b.n	800335e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2200      	movs	r2, #0
 800334a:	2140      	movs	r1, #64	; 0x40
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f831 	bl	80033b4 <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	80002000 	.word	0x80002000

0800336c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d103      	bne.n	800338a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b01      	cmp	r3, #1
 8003396:	d007      	beq.n	80033a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	619a      	str	r2, [r3, #24]
  }
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c4:	e031      	b.n	800342a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033cc:	d02d      	beq.n	800342a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7ff f8e3 	bl	8002598 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d122      	bne.n	800342a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d113      	bne.n	800342a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	bf0c      	ite	eq
 800343a:	2301      	moveq	r3, #1
 800343c:	2300      	movne	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	429a      	cmp	r2, r3
 8003446:	d0be      	beq.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800345e:	e033      	b.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f87f 	bl	8003568 <I2C_IsErrorOccurred>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e031      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800347a:	d025      	beq.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347c:	f7ff f88c 	bl	8002598 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	d302      	bcc.n	8003492 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11a      	bne.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d013      	beq.n	80034c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d1c4      	bne.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ec:	e02f      	b.n	800354e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f838 	bl	8003568 <I2C_IsErrorOccurred>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e02d      	b.n	800355e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7ff f849 	bl	8002598 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11a      	bne.n	800354e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d013      	beq.n	800354e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e007      	b.n	800355e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b20      	cmp	r3, #32
 800355a:	d1c8      	bne.n	80034ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d068      	beq.n	8003666 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2210      	movs	r2, #16
 800359a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800359c:	e049      	b.n	8003632 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a4:	d045      	beq.n	8003632 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe fff7 	bl	8002598 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_IsErrorOccurred+0x54>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d13a      	bne.n	8003632 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035de:	d121      	bne.n	8003624 <I2C_IsErrorOccurred+0xbc>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e6:	d01d      	beq.n	8003624 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d01a      	beq.n	8003624 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035fe:	f7fe ffcb 	bl	8002598 <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003604:	e00e      	b.n	8003624 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003606:	f7fe ffc7 	bl	8002598 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b19      	cmp	r3, #25
 8003612:	d907      	bls.n	8003624 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f043 0320 	orr.w	r3, r3, #32
 800361a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003622:	e006      	b.n	8003632 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d1e9      	bne.n	8003606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d003      	beq.n	8003648 <I2C_IsErrorOccurred+0xe0>
 8003640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0aa      	beq.n	800359e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2220      	movs	r2, #32
 8003656:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01c      	beq.n	8003716 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff fe45 	bl	800336c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <I2C_IsErrorOccurred+0x1bc>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800371a:	4618      	mov	r0, r3
 800371c:	3728      	adds	r7, #40	; 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	fe00e800 	.word	0xfe00e800

08003728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	460b      	mov	r3, r1
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	4613      	mov	r3, r2
 8003738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003740:	7a7b      	ldrb	r3, [r7, #9]
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003748:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	4313      	orrs	r3, r2
 8003752:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003756:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	0d5b      	lsrs	r3, r3, #21
 8003762:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <I2C_TransferConfig+0x60>)
 8003768:	430b      	orrs	r3, r1
 800376a:	43db      	mvns	r3, r3
 800376c:	ea02 0103 	and.w	r1, r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	03ff63ff 	.word	0x03ff63ff

0800378c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d138      	bne.n	8003814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e032      	b.n	8003816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	d139      	bne.n	80038ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003842:	2302      	movs	r3, #2
 8003844:	e033      	b.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2224      	movs	r2, #36	; 0x24
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01e      	beq.n	800390c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_IPCC_Init+0x60>)
 80038d0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fbd2 	bl	8002088 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80038e4:	68b8      	ldr	r0, [r7, #8]
 80038e6:	f000 f85b 	bl	80039a0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f82c 	bl	8003954 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800390a:	e001      	b.n	8003910 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	58000c00 	.word	0x58000c00

08003920 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e00f      	b.n	8003982 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <IPCC_SetDefaultCallbacks+0x44>)
 800396c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3306      	adds	r3, #6
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	4a08      	ldr	r2, [pc, #32]	; (800399c <IPCC_SetDefaultCallbacks+0x48>)
 800397a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d9ec      	bls.n	8003962 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	08003921 	.word	0x08003921
 800399c:	0800393b 	.word	0x0800393b

080039a0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80039b4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223f      	movs	r2, #63	; 0x3f
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	58000400 	.word	0x58000400

080039e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_PWREx_GetVoltageRange+0x18>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	58000400 	.word	0x58000400

08003a04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a16:	d101      	bne.n	8003a1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_RCC_HSE_Enable>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_RCC_HSE_Disable>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_RCC_HSE_IsReady>:
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a76:	d101      	bne.n	8003a7c <LL_RCC_HSE_IsReady+0x18>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <LL_RCC_HSE_IsReady+0x1a>
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_RCC_HSI_Enable>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_HSI_Disable>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_HSI_IsReady>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d101      	bne.n	8003adc <LL_RCC_HSI_IsReady+0x18>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <LL_RCC_HSI_IsReady+0x1a>
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_HSI48_Enable>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_RCC_HSI48_Disable>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_RCC_HSI48_IsReady>:
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d101      	bne.n	8003b6e <LL_RCC_HSI48_IsReady+0x18>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <LL_RCC_HSI48_IsReady+0x1a>
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_LSE_Enable>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_LSE_Disable>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_LSE_EnableBypass>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_LSE_DisableBypass>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_RCC_LSE_IsReady>:
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d101      	bne.n	8003c1a <LL_RCC_LSE_IsReady+0x18>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <LL_RCC_LSE_IsReady+0x1a>
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_RCC_LSI1_Enable>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_LSI1_Disable>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_RCC_LSI1_IsReady>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d101      	bne.n	8003c82 <LL_RCC_LSI1_IsReady+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_RCC_LSI1_IsReady+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_RCC_LSI2_Enable>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_LSI2_Disable>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_LSI2_IsReady>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d101      	bne.n	8003cea <LL_RCC_LSI2_IsReady+0x18>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <LL_RCC_LSI2_IsReady+0x1a>
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_LSI2_SetTrimming>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_MSI_Enable>:
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_MSI_Disable>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_RCC_MSI_IsReady>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d101      	bne.n	8003d76 <LL_RCC_MSI_IsReady+0x16>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <LL_RCC_MSI_IsReady+0x18>
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_MSI_SetRange>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_MSI_GetRange>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2bb0      	cmp	r3, #176	; 0xb0
 8003dc0:	d901      	bls.n	8003dc6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003dc2:	23b0      	movs	r3, #176	; 0xb0
 8003dc4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003dc6:	687b      	ldr	r3, [r7, #4]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <LL_RCC_SetSysClkSource>:
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f023 0203 	bic.w	r2, r3, #3
 8003e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_RCC_GetSysClkSource>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <LL_RCC_SetAHBPrescaler>:
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_RCC_SetAHB4Prescaler>:
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ea2:	f023 020f 	bic.w	r2, r3, #15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_SetAPB1Prescaler>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_RCC_SetAPB2Prescaler>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_GetAHBPrescaler>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_GetAHB4Prescaler>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_GetAPB1Prescaler>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_GetAPB2Prescaler>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_PLL_Enable>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_PLL_Disable>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa4:	6013      	str	r3, [r2, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_PLL_IsReady>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc2:	d101      	bne.n	8003fc8 <LL_RCC_PLL_IsReady+0x18>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <LL_RCC_PLL_IsReady+0x1a>
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_PLL_GetN>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_PLL_GetR>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_PLL_GetDivider>:
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800400a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_RCC_PLL_GetMainSource>:
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0303 	and.w	r3, r3, #3
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d101      	bne.n	800404e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406e:	d101      	bne.n	8004074 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004088:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800408c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d101      	bne.n	800409a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b8:	d101      	bne.n	80040be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_IsActiveFlag_PPRE2>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040dc:	d101      	bne.n	80040e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b08d      	sub	sp, #52	; 0x34
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e363      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 808d 	beq.w	800422a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004110:	f7ff fe89 	bl	8003e26 <LL_RCC_GetSysClkSource>
 8004114:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004116:	f7ff ff82 	bl	800401e <LL_RCC_PLL_GetMainSource>
 800411a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_RCC_OscConfig+0x3e>
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d147      	bne.n	80041b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b01      	cmp	r3, #1
 800412c:	d144      	bne.n	80041b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e347      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800413e:	f7ff fe34 	bl	8003daa <LL_RCC_MSI_GetRange>
 8004142:	4603      	mov	r3, r0
 8004144:	429c      	cmp	r4, r3
 8004146:	d914      	bls.n	8004172 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fd2f 	bl	8004bb0 <RCC_SetFlashLatencyFromMSIRange>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e336      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fe0e 	bl	8003d82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fe32 	bl	8003dd4 <LL_RCC_MSI_SetCalibTrimming>
 8004170:	e013      	b.n	800419a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fe03 	bl	8003d82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fe27 	bl	8003dd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fd10 	bl	8004bb0 <RCC_SetFlashLatencyFromMSIRange>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e317      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800419a:	f000 fcc9 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 800419e:	4603      	mov	r3, r0
 80041a0:	4aa4      	ldr	r2, [pc, #656]	; (8004434 <HAL_RCC_OscConfig+0x344>)
 80041a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a4:	4ba4      	ldr	r3, [pc, #656]	; (8004438 <HAL_RCC_OscConfig+0x348>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe f9a7 	bl	80024fc <HAL_InitTick>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d039      	beq.n	8004228 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e308      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01e      	beq.n	80041fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041c0:	f7ff fdb0 	bl	8003d24 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041c4:	f7fe f9e8 	bl	8002598 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041cc:	f7fe f9e4 	bl	8002598 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e2f5      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80041de:	f7ff fdbf 	bl	8003d60 <LL_RCC_MSI_IsReady>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f1      	beq.n	80041cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fdc8 	bl	8003d82 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fdec 	bl	8003dd4 <LL_RCC_MSI_SetCalibTrimming>
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041fe:	f7ff fda0 	bl	8003d42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004202:	f7fe f9c9 	bl	8002598 <HAL_GetTick>
 8004206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800420a:	f7fe f9c5 	bl	8002598 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e2d6      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800421c:	f7ff fda0 	bl	8003d60 <LL_RCC_MSI_IsReady>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f1      	bne.n	800420a <HAL_RCC_OscConfig+0x11a>
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004228:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d047      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004236:	f7ff fdf6 	bl	8003e26 <LL_RCC_GetSysClkSource>
 800423a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800423c:	f7ff feef 	bl	800401e <LL_RCC_PLL_GetMainSource>
 8004240:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d005      	beq.n	8004254 <HAL_RCC_OscConfig+0x164>
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d108      	bne.n	8004260 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d105      	bne.n	8004260 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d134      	bne.n	80042c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e2b4      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d102      	bne.n	8004270 <HAL_RCC_OscConfig+0x180>
 800426a:	f7ff fbdd 	bl	8003a28 <LL_RCC_HSE_Enable>
 800426e:	e001      	b.n	8004274 <HAL_RCC_OscConfig+0x184>
 8004270:	f7ff fbe9 	bl	8003a46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d012      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fe f98c 	bl	8002598 <HAL_GetTick>
 8004280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe f988 	bl	8002598 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e299      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004296:	f7ff fbe5 	bl	8003a64 <LL_RCC_HSE_IsReady>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f1      	beq.n	8004284 <HAL_RCC_OscConfig+0x194>
 80042a0:	e011      	b.n	80042c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a2:	f7fe f979 	bl	8002598 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042aa:	f7fe f975 	bl	8002598 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b64      	cmp	r3, #100	; 0x64
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e286      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042bc:	f7ff fbd2 	bl	8003a64 <LL_RCC_HSE_IsReady>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f1      	bne.n	80042aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d04c      	beq.n	800436c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d2:	f7ff fda8 	bl	8003e26 <LL_RCC_GetSysClkSource>
 80042d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d8:	f7ff fea1 	bl	800401e <LL_RCC_PLL_GetMainSource>
 80042dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_OscConfig+0x200>
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	d10e      	bne.n	8004308 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d10b      	bne.n	8004308 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e266      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fbf1 	bl	8003ae8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004306:	e031      	b.n	800436c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d019      	beq.n	8004344 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	f7ff fbba 	bl	8003a88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe f940 	bl	8002598 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431c:	f7fe f93c 	bl	8002598 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e24d      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800432e:	f7ff fbc9 	bl	8003ac4 <LL_RCC_HSI_IsReady>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f1      	beq.n	800431c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fbd3 	bl	8003ae8 <LL_RCC_HSI_SetCalibTrimming>
 8004342:	e013      	b.n	800436c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004344:	f7ff fbaf 	bl	8003aa6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe f926 	bl	8002598 <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fe f922 	bl	8002598 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e233      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004362:	f7ff fbaf 	bl	8003ac4 <LL_RCC_HSI_IsReady>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f1      	bne.n	8004350 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80a3 	beq.w	80044cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d076      	beq.n	800447c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d046      	beq.n	8004428 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800439a:	f7ff fc66 	bl	8003c6a <LL_RCC_LSI1_IsReady>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d113      	bne.n	80043cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80043a4:	f7ff fc3f 	bl	8003c26 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043a8:	f7fe f8f6 	bl	8002598 <HAL_GetTick>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043b0:	f7fe f8f2 	bl	8002598 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e203      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043c2:	f7ff fc52 	bl	8003c6a <LL_RCC_LSI1_IsReady>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f1      	beq.n	80043b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80043cc:	f7ff fc5f 	bl	8003c8e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fe f8e2 	bl	8002598 <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043d8:	f7fe f8de 	bl	8002598 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e1ef      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043ea:	f7ff fc72 	bl	8003cd2 <LL_RCC_LSI2_IsReady>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f1      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fc7c 	bl	8003cf6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80043fe:	f7ff fc23 	bl	8003c48 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe f8c9 	bl	8002598 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800440a:	f7fe f8c5 	bl	8002598 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1d6      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800441c:	f7ff fc25 	bl	8003c6a <LL_RCC_LSI1_IsReady>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f1      	bne.n	800440a <HAL_RCC_OscConfig+0x31a>
 8004426:	e051      	b.n	80044cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004428:	f7ff fbfd 	bl	8003c26 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe f8b4 	bl	8002598 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004432:	e00c      	b.n	800444e <HAL_RCC_OscConfig+0x35e>
 8004434:	20000008 	.word	0x20000008
 8004438:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800443c:	f7fe f8ac 	bl	8002598 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e1bd      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800444e:	f7ff fc0c 	bl	8003c6a <LL_RCC_LSI1_IsReady>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f1      	beq.n	800443c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004458:	f7ff fc2a 	bl	8003cb0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800445e:	f7fe f89b 	bl	8002598 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b03      	cmp	r3, #3
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1ac      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004470:	f7ff fc2f 	bl	8003cd2 <LL_RCC_LSI2_IsReady>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f1      	bne.n	800445e <HAL_RCC_OscConfig+0x36e>
 800447a:	e027      	b.n	80044cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800447c:	f7ff fc18 	bl	8003cb0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe f88a 	bl	8002598 <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004488:	f7fe f886 	bl	8002598 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b03      	cmp	r3, #3
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e197      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800449a:	f7ff fc1a 	bl	8003cd2 <LL_RCC_LSI2_IsReady>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f1      	bne.n	8004488 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80044a4:	f7ff fbd0 	bl	8003c48 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fe f876 	bl	8002598 <HAL_GetTick>
 80044ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044b0:	f7fe f872 	bl	8002598 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e183      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044c2:	f7ff fbd2 	bl	8003c6a <LL_RCC_LSI1_IsReady>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f1      	bne.n	80044b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05b      	beq.n	8004590 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044d8:	4ba7      	ldr	r3, [pc, #668]	; (8004778 <HAL_RCC_OscConfig+0x688>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d114      	bne.n	800450e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80044e4:	f7ff fa70 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e8:	f7fe f856 	bl	8002598 <HAL_GetTick>
 80044ec:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fe f852 	bl	8002598 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e163      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	4b9d      	ldr	r3, [pc, #628]	; (8004778 <HAL_RCC_OscConfig+0x688>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HAL_RCC_OscConfig+0x42c>
 8004516:	f7ff fb30 	bl	8003b7a <LL_RCC_LSE_Enable>
 800451a:	e00c      	b.n	8004536 <HAL_RCC_OscConfig+0x446>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b05      	cmp	r3, #5
 8004522:	d104      	bne.n	800452e <HAL_RCC_OscConfig+0x43e>
 8004524:	f7ff fb4b 	bl	8003bbe <LL_RCC_LSE_EnableBypass>
 8004528:	f7ff fb27 	bl	8003b7a <LL_RCC_LSE_Enable>
 800452c:	e003      	b.n	8004536 <HAL_RCC_OscConfig+0x446>
 800452e:	f7ff fb35 	bl	8003b9c <LL_RCC_LSE_Disable>
 8004532:	f7ff fb55 	bl	8003be0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d014      	beq.n	8004568 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fe f82b 	bl	8002598 <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fe f827 	bl	8002598 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e136      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800455c:	f7ff fb51 	bl	8003c02 <LL_RCC_LSE_IsReady>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <HAL_RCC_OscConfig+0x456>
 8004566:	e013      	b.n	8004590 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fe f816 	bl	8002598 <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fe f812 	bl	8002598 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e121      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004586:	f7ff fb3c 	bl	8003c02 <LL_RCC_LSE_IsReady>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ef      	bne.n	8004570 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02c      	beq.n	80045f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d014      	beq.n	80045ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045a4:	f7ff fab5 	bl	8003b12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fff6 	bl	8002598 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b0:	f7fd fff2 	bl	8002598 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e103      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045c2:	f7ff fac8 	bl	8003b56 <LL_RCC_HSI48_IsReady>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f1      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4c0>
 80045cc:	e013      	b.n	80045f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ce:	f7ff fab1 	bl	8003b34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fd ffe1 	bl	8002598 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045da:	f7fd ffdd 	bl	8002598 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0ee      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045ec:	f7ff fab3 	bl	8003b56 <LL_RCC_HSI48_IsReady>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f1      	bne.n	80045da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80e4 	beq.w	80047c8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004600:	f7ff fc11 	bl	8003e26 <LL_RCC_GetSysClkSource>
 8004604:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	2b02      	cmp	r3, #2
 8004614:	f040 80b4 	bne.w	8004780 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0203 	and.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	429a      	cmp	r2, r3
 8004624:	d123      	bne.n	800466e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d11c      	bne.n	800466e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d114      	bne.n	800466e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d10d      	bne.n	800466e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d05d      	beq.n	800472a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d058      	beq.n	8004726 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0a1      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004686:	f7ff fc84 	bl	8003f92 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800468a:	f7fd ff85 	bl	8002598 <HAL_GetTick>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd ff81 	bl	8002598 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e092      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ef      	bne.n	8004692 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	4b30      	ldr	r3, [pc, #192]	; (800477c <HAL_RCC_OscConfig+0x68c>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ca:	0212      	lsls	r2, r2, #8
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80046de:	430a      	orrs	r2, r1
 80046e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046e8:	f7ff fc44 	bl	8003f74 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046fc:	f7fd ff4c 	bl	8002598 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fd ff48 	bl	8002598 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e059      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ef      	beq.n	8004704 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004724:	e050      	b.n	80047c8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e04f      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d147      	bne.n	80047c8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004738:	f7ff fc1c 	bl	8003f74 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800474c:	f7fd ff24 	bl	8002598 <HAL_GetTick>
 8004750:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fd ff20 	bl	8002598 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e031      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <HAL_RCC_OscConfig+0x664>
 8004774:	e028      	b.n	80047c8 <HAL_RCC_OscConfig+0x6d8>
 8004776:	bf00      	nop
 8004778:	58000400 	.word	0x58000400
 800477c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d01e      	beq.n	80047c4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	f7ff fc04 	bl	8003f92 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fd ff05 	bl	8002598 <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004792:	f7fd ff01 	bl	8002598 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e012      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCC_OscConfig+0x6e4>)
 80047be:	4013      	ands	r3, r2
 80047c0:	60cb      	str	r3, [r1, #12]
 80047c2:	e001      	b.n	80047c8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3734      	adds	r7, #52	; 0x34
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd90      	pop	{r4, r7, pc}
 80047d2:	bf00      	nop
 80047d4:	eefefffc 	.word	0xeefefffc

080047d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e12d      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ec:	4b98      	ldr	r3, [pc, #608]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d91b      	bls.n	8004832 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b95      	ldr	r3, [pc, #596]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0207 	bic.w	r2, r3, #7
 8004802:	4993      	ldr	r1, [pc, #588]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480a:	f7fd fec5 	bl	8002598 <HAL_GetTick>
 800480e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004810:	e008      	b.n	8004824 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004812:	f7fd fec1 	bl	8002598 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e111      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004824:	4b8a      	ldr	r3, [pc, #552]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d1ef      	bne.n	8004812 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fafb 	bl	8003e3e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004848:	f7fd fea6 	bl	8002598 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004850:	f7fd fea2 	bl	8002598 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0f2      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004862:	f7ff fbe8 	bl	8004036 <LL_RCC_IsActiveFlag_HPRE>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f1      	beq.n	8004850 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d016      	beq.n	80048a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff faf2 	bl	8003e66 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004882:	f7fd fe89 	bl	8002598 <HAL_GetTick>
 8004886:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800488a:	f7fd fe85 	bl	8002598 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0d5      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800489c:	f7ff fbdd 	bl	800405a <LL_RCC_IsActiveFlag_C2HPRE>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f1      	beq.n	800488a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff faeb 	bl	8003e92 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048bc:	f7fd fe6c 	bl	8002598 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048c4:	f7fd fe68 	bl	8002598 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0b8      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048d6:	f7ff fbd3 	bl	8004080 <LL_RCC_IsActiveFlag_SHDHPRE>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f1      	beq.n	80048c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d016      	beq.n	800491a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fae5 	bl	8003ec0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048f6:	f7fd fe4f 	bl	8002598 <HAL_GetTick>
 80048fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048fe:	f7fd fe4b 	bl	8002598 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e09b      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004910:	f7ff fbc9 	bl	80040a6 <LL_RCC_IsActiveFlag_PPRE1>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f1      	beq.n	80048fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d017      	beq.n	8004956 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fadb 	bl	8003ee8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004932:	f7fd fe31 	bl	8002598 <HAL_GetTick>
 8004936:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800493a:	f7fd fe2d 	bl	8002598 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e07d      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800494c:	f7ff fbbd 	bl	80040ca <LL_RCC_IsActiveFlag_PPRE2>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f1      	beq.n	800493a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d043      	beq.n	80049ea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d106      	bne.n	8004978 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800496a:	f7ff f87b 	bl	8003a64 <LL_RCC_HSE_IsReady>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d11e      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e067      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d106      	bne.n	800498e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004980:	f7ff fb16 	bl	8003fb0 <LL_RCC_PLL_IsReady>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d113      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e05c      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004996:	f7ff f9e3 	bl	8003d60 <LL_RCC_MSI_IsReady>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d108      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e051      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80049a4:	f7ff f88e 	bl	8003ac4 <LL_RCC_HSI_IsReady>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e04a      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fa21 	bl	8003dfe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049bc:	f7fd fdec 	bl	8002598 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fd fde8 	bl	8002598 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e036      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	f7ff fa24 	bl	8003e26 <LL_RCC_GetSysClkSource>
 80049de:	4602      	mov	r2, r0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d1ec      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d21b      	bcs.n	8004a30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 0207 	bic.w	r2, r3, #7
 8004a00:	4913      	ldr	r1, [pc, #76]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fd fdc6 	bl	8002598 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a10:	f7fd fdc2 	bl	8002598 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e012      	b.n	8004a48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x278>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1ef      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a30:	f000 f87e 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <HAL_RCC_ClockConfig+0x27c>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a3a:	f7fd fdb9 	bl	80025b0 <HAL_GetTickPrio>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fd fd5b 	bl	80024fc <HAL_InitTick>
 8004a46:	4603      	mov	r3, r0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	58004000 	.word	0x58004000
 8004a54:	20000008 	.word	0x20000008

08004a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5e:	f7ff f9e2 	bl	8003e26 <LL_RCC_GetSysClkSource>
 8004a62:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a6a:	f7ff f99e 	bl	8003daa <LL_RCC_MSI_GetRange>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e04b      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d102      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a86:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e045      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d10a      	bne.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004a92:	f7fe ffb7 	bl	8003a04 <LL_RCC_HSE_IsEnabledDiv2>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004a9c:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e03a      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004aa2:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e037      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004aa8:	f7ff fab9 	bl	800401e <LL_RCC_PLL_GetMainSource>
 8004aac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d003      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x64>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6a>
 8004aba:	e00d      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004abe:	60bb      	str	r3, [r7, #8]
        break;
 8004ac0:	e015      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ac2:	f7fe ff9f 	bl	8003a04 <LL_RCC_HSE_IsEnabledDiv2>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004acc:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ace:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ad0:	e00d      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ad2:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ad4:	60bb      	str	r3, [r7, #8]
        break;
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ad8:	f7ff f967 	bl	8003daa <LL_RCC_MSI_GetRange>
 8004adc:	4603      	mov	r3, r0
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	; (8004b24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aea:	60bb      	str	r3, [r7, #8]
        break;
 8004aec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004aee:	f7ff fa71 	bl	8003fd4 <LL_RCC_PLL_GetN>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	fb03 f402 	mul.w	r4, r3, r2
 8004afa:	f7ff fa84 	bl	8004006 <LL_RCC_PLL_GetDivider>
 8004afe:	4603      	mov	r3, r0
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	3301      	adds	r3, #1
 8004b04:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b08:	f7ff fa71 	bl	8003fee <LL_RCC_PLL_GetR>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	0f5b      	lsrs	r3, r3, #29
 8004b10:	3301      	adds	r3, #1
 8004b12:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b16:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b18:	68fb      	ldr	r3, [r7, #12]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd90      	pop	{r4, r7, pc}
 8004b22:	bf00      	nop
 8004b24:	0800ab14 	.word	0x0800ab14
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	01e84800 	.word	0x01e84800

08004b30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b598      	push	{r3, r4, r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b34:	f7ff ff90 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	f7ff f9e9 	bl	8003f10 <LL_RCC_GetAHBPrescaler>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	4a03      	ldr	r2, [pc, #12]	; (8004b54 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd98      	pop	{r3, r4, r7, pc}
 8004b54:	0800aab4 	.word	0x0800aab4

08004b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b58:	b598      	push	{r3, r4, r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b5c:	f7ff ffe8 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b60:	4604      	mov	r4, r0
 8004b62:	f7ff f9ef 	bl	8003f44 <LL_RCC_GetAPB1Prescaler>
 8004b66:	4603      	mov	r3, r0
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd98      	pop	{r3, r4, r7, pc}
 8004b80:	0800aaf4 	.word	0x0800aaf4

08004b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b84:	b598      	push	{r3, r4, r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b88:	f7ff ffd2 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	f7ff f9e5 	bl	8003f5c <LL_RCC_GetAPB2Prescaler>
 8004b92:	4603      	mov	r3, r0
 8004b94:	0adb      	lsrs	r3, r3, #11
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd98      	pop	{r3, r4, r7, pc}
 8004bac:	0800aaf4 	.word	0x0800aaf4

08004bb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2bb0      	cmp	r3, #176	; 0xb0
 8004bbc:	d903      	bls.n	8004bc6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e007      	b.n	8004bd6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bd6:	f7ff f9a7 	bl	8003f28 <LL_RCC_GetAHB4Prescaler>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0c9c      	lsrs	r4, r3, #18
 8004bfa:	f7fe fef5 	bl	80039e8 <HAL_PWREx_GetVoltageRange>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4619      	mov	r1, r3
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f80c 	bl	8004c20 <RCC_SetFlashLatency>
 8004c08:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}
 8004c12:	bf00      	nop
 8004c14:	0800ab14 	.word	0x0800ab14
 8004c18:	0800aab4 	.word	0x0800aab4
 8004c1c:	431bde83 	.word	0x431bde83

08004c20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b093      	sub	sp, #76	; 0x4c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <RCC_SetFlashLatency+0xe8>)
 8004c2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c36:	4a35      	ldr	r2, [pc, #212]	; (8004d0c <RCC_SetFlashLatency+0xec>)
 8004c38:	f107 031c 	add.w	r3, r7, #28
 8004c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c42:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <RCC_SetFlashLatency+0xf0>)
 8004c44:	f107 040c 	add.w	r4, r7, #12
 8004c48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c4e:	2300      	movs	r3, #0
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c58:	d11a      	bne.n	8004c90 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c5e:	e013      	b.n	8004c88 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	3348      	adds	r3, #72	; 0x48
 8004c66:	443b      	add	r3, r7
 8004c68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d807      	bhi.n	8004c82 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3348      	adds	r3, #72	; 0x48
 8004c78:	443b      	add	r3, r7
 8004c7a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004c80:	e020      	b.n	8004cc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c84:	3301      	adds	r3, #1
 8004c86:	643b      	str	r3, [r7, #64]	; 0x40
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d9e8      	bls.n	8004c60 <RCC_SetFlashLatency+0x40>
 8004c8e:	e019      	b.n	8004cc4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c94:	e013      	b.n	8004cbe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	3348      	adds	r3, #72	; 0x48
 8004c9c:	443b      	add	r3, r7
 8004c9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d807      	bhi.n	8004cb8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3348      	adds	r3, #72	; 0x48
 8004cae:	443b      	add	r3, r7
 8004cb0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cb6:	e005      	b.n	8004cc4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cba:	3301      	adds	r3, #1
 8004cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d9e8      	bls.n	8004c96 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <RCC_SetFlashLatency+0xf4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f023 0207 	bic.w	r2, r3, #7
 8004ccc:	4911      	ldr	r1, [pc, #68]	; (8004d14 <RCC_SetFlashLatency+0xf4>)
 8004cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cd4:	f7fd fc60 	bl	8002598 <HAL_GetTick>
 8004cd8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cda:	e008      	b.n	8004cee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cdc:	f7fd fc5c 	bl	8002598 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e007      	b.n	8004cfe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <RCC_SetFlashLatency+0xf4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d1ef      	bne.n	8004cdc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	374c      	adds	r7, #76	; 0x4c
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd90      	pop	{r4, r7, pc}
 8004d06:	bf00      	nop
 8004d08:	0800a910 	.word	0x0800a910
 8004d0c:	0800a920 	.word	0x0800a920
 8004d10:	0800a92c 	.word	0x0800a92c
 8004d14:	58004000 	.word	0x58004000

08004d18 <LL_RCC_LSE_IsEnabled>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <LL_RCC_LSE_IsEnabled+0x18>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_LSE_IsReady>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d101      	bne.n	8004d54 <LL_RCC_LSE_IsReady+0x18>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <LL_RCC_LSE_IsReady+0x1a>
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_RCC_SetRFWKPClockSource>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_SetSMPSClockSource>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_RCC_SetSMPSPrescaler>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <LL_RCC_SetUSARTClockSource>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f023 0203 	bic.w	r2, r3, #3
 8004df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_RCC_SetLPUARTClockSource>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_SetI2CClockSource>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_RCC_SetLPTIMClockSource>:
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	43db      	mvns	r3, r3
 8004e86:	401a      	ands	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <LL_RCC_SetSAIClockSource>:
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <LL_RCC_SetRNGClockSource>:
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_SetCLK48ClockSource>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_RCC_SetUSBClockSource>:
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b082      	sub	sp, #8
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ffe3 	bl	8004efa <LL_RCC_SetCLK48ClockSource>
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <LL_RCC_SetADCClockSource>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <LL_RCC_SetRTCClockSource>:
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <LL_RCC_GetRTCClockSource>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_ForceBackupDomainReset>:
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_RCC_PLLSAI1_Enable>:
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <LL_RCC_PLLSAI1_Disable>:
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800501e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005022:	6013      	str	r3, [r2, #0]
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_PLLSAI1_IsReady>:
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005040:	d101      	bne.n	8005046 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b088      	sub	sp, #32
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800505a:	2300      	movs	r3, #0
 800505c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800505e:	2300      	movs	r3, #0
 8005060:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d034      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005076:	d021      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005078:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800507c:	d81b      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800507e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005082:	d01d      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005088:	d815      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800508e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005092:	d110      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80050a4:	e00d      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f947 	bl	800533e <RCCEx_PLLSAI1_ConfigNP>
 80050b0:	4603      	mov	r3, r0
 80050b2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050b4:	e005      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	77fb      	strb	r3, [r7, #31]
        break;
 80050ba:	e002      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050bc:	bf00      	nop
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c2:	7ffb      	ldrb	r3, [r7, #31]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fee8 	bl	8004ea2 <LL_RCC_SetSAIClockSource>
 80050d2:	e001      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7ffb      	ldrb	r3, [r7, #31]
 80050d6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d046      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80050e4:	f7ff ff56 	bl	8004f94 <LL_RCC_GetRTCClockSource>
 80050e8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d03c      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80050f4:	f7fe fc68 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d105      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff ff30 	bl	8004f68 <LL_RCC_SetRTCClockSource>
 8005108:	e02e      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005114:	f7ff ff4b 	bl	8004fae <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005118:	f7ff ff5a 	bl	8004fd0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800512a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005134:	f7ff fdf0 	bl	8004d18 <LL_RCC_LSE_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	2b01      	cmp	r3, #1
 800513c:	d114      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800513e:	f7fd fa2b 	bl	8002598 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005144:	e00b      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fd fa27 	bl	8002598 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d902      	bls.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	77fb      	strb	r3, [r7, #31]
              break;
 800515c:	e004      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800515e:	f7ff fded 	bl	8004d3c <LL_RCC_LSE_IsReady>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d1ee      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005168:	7ffb      	ldrb	r3, [r7, #31]
 800516a:	77bb      	strb	r3, [r7, #30]
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fe2a 	bl	8004ddc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fe35 	bl	8004e08 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fe5d 	bl	8004e6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fe52 	bl	8004e6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fe2a 	bl	8004e34 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fe1f 	bl	8004e34 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d022      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fe8d 	bl	8004f26 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005214:	d107      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005224:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522e:	d10b      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f8dd 	bl	80053f4 <RCCEx_PLLSAI1_ConfigNQ>
 800523a:	4603      	mov	r3, r0
 800523c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800523e:	7ffb      	ldrb	r3, [r7, #31]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005244:	7ffb      	ldrb	r3, [r7, #31]
 8005246:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02b      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d008      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fe2a 	bl	8004ece <LL_RCC_SetRNGClockSource>
 800527a:	e00a      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	2000      	movs	r0, #0
 8005288:	f7ff fe21 	bl	8004ece <LL_RCC_SetRNGClockSource>
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fe34 	bl	8004efa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800529a:	d107      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800529c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d022      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fe3d 	bl	8004f3c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ca:	d107      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052da:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e4:	d10b      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f8dd 	bl	80054aa <RCCEx_PLLSAI1_ConfigNR>
 80052f0:	4603      	mov	r3, r0
 80052f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052f4:	7ffb      	ldrb	r3, [r7, #31]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80052fa:	7ffb      	ldrb	r3, [r7, #31]
 80052fc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fd26 	bl	8004d60 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fd45 	bl	8004db4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fd2c 	bl	8004d8c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005334:	7fbb      	ldrb	r3, [r7, #30]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800534a:	f7ff fe61 	bl	8005010 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800534e:	f7fd f923 	bl	8002598 <HAL_GetTick>
 8005352:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005354:	e009      	b.n	800536a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005356:	f7fd f91f 	bl	8002598 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d902      	bls.n	800536a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	73fb      	strb	r3, [r7, #15]
      break;
 8005368:	e004      	b.n	8005374 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800536a:	f7ff fe60 	bl	800502e <LL_RCC_PLLSAI1_IsReady>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d137      	bne.n	80053ea <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538e:	4313      	orrs	r3, r2
 8005390:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053a8:	f7ff fe23 	bl	8004ff2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fd f8f4 	bl	8002598 <HAL_GetTick>
 80053b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053b2:	e009      	b.n	80053c8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b4:	f7fd f8f0 	bl	8002598 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d902      	bls.n	80053c8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	73fb      	strb	r3, [r7, #15]
        break;
 80053c6:	e004      	b.n	80053d2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053c8:	f7ff fe31 	bl	800502e <LL_RCC_PLLSAI1_IsReady>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d1f0      	bne.n	80053b4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e6:	4313      	orrs	r3, r2
 80053e8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005400:	f7ff fe06 	bl	8005010 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005404:	f7fd f8c8 	bl	8002598 <HAL_GetTick>
 8005408:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800540a:	e009      	b.n	8005420 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800540c:	f7fd f8c4 	bl	8002598 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d902      	bls.n	8005420 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	73fb      	strb	r3, [r7, #15]
      break;
 800541e:	e004      	b.n	800542a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005420:	f7ff fe05 	bl	800502e <LL_RCC_PLLSAI1_IsReady>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d137      	bne.n	80054a0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005444:	4313      	orrs	r3, r2
 8005446:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800545a:	4313      	orrs	r3, r2
 800545c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800545e:	f7ff fdc8 	bl	8004ff2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005462:	f7fd f899 	bl	8002598 <HAL_GetTick>
 8005466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005468:	e009      	b.n	800547e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800546a:	f7fd f895 	bl	8002598 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d902      	bls.n	800547e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	73fb      	strb	r3, [r7, #15]
        break;
 800547c:	e004      	b.n	8005488 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800547e:	f7ff fdd6 	bl	800502e <LL_RCC_PLLSAI1_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d1f0      	bne.n	800546a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d108      	bne.n	80054a0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800549c:	4313      	orrs	r3, r2
 800549e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054b6:	f7ff fdab 	bl	8005010 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054ba:	f7fd f86d 	bl	8002598 <HAL_GetTick>
 80054be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054c0:	e009      	b.n	80054d6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c2:	f7fd f869 	bl	8002598 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d902      	bls.n	80054d6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	e004      	b.n	80054e0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054d6:	f7ff fdaa 	bl	800502e <LL_RCC_PLLSAI1_IsReady>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d137      	bne.n	8005556 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fa:	4313      	orrs	r3, r2
 80054fc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80054fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005510:	4313      	orrs	r3, r2
 8005512:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005514:	f7ff fd6d 	bl	8004ff2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fd f83e 	bl	8002598 <HAL_GetTick>
 800551c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800551e:	e009      	b.n	8005534 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005520:	f7fd f83a 	bl	8002598 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d902      	bls.n	8005534 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	73fb      	strb	r3, [r7, #15]
        break;
 8005532:	e004      	b.n	800553e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005534:	f7ff fd7b 	bl	800502e <LL_RCC_PLLSAI1_IsReady>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d1f0      	bne.n	8005520 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d108      	bne.n	8005556 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005552:	4313      	orrs	r3, r2
 8005554:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e09f      	b.n	80056b2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fc fda2 	bl	80020d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005594:	4b49      	ldr	r3, [pc, #292]	; (80056bc <HAL_RTC_Init+0x15c>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b10      	cmp	r3, #16
 800559e:	d07e      	beq.n	800569e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	22ca      	movs	r2, #202	; 0xca
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2253      	movs	r2, #83	; 0x53
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8ab 	bl	800570c <RTC_EnterInitMode>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2204      	movs	r2, #4
 80055c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	e067      	b.n	80056a2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6899      	ldr	r1, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68d2      	ldr	r2, [r2, #12]
 800560c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6919      	ldr	r1, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	041a      	lsls	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005630:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0203 	bic.w	r2, r2, #3
 8005640:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d113      	bne.n	8005690 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f829 	bl	80056c0 <HAL_RTC_WaitForSynchro>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2204      	movs	r2, #4
 8005680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e010      	b.n	80056b2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]
 800569c:	e001      	b.n	80056a2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40002800 	.word	0x40002800

080056c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056d6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056d8:	f7fc ff5e 	bl	8002598 <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056de:	e009      	b.n	80056f4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056e0:	f7fc ff5a 	bl	8002598 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ee:	d901      	bls.n	80056f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e007      	b.n	8005704 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ee      	beq.n	80056e0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d119      	bne.n	8005756 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800572c:	f7fc ff34 	bl	8002598 <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005732:	e009      	b.n	8005748 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005734:	f7fc ff30 	bl	8002598 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005742:	d901      	bls.n	8005748 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e007      	b.n	8005758 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ee      	beq.n	8005734 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005776:	2302      	movs	r3, #2
 8005778:	e0a8      	b.n	80058cc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	22ca      	movs	r2, #202	; 0xca
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2253      	movs	r2, #83	; 0x53
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80057a8:	f7fc fef6 	bl	8002598 <HAL_GetTick>
 80057ac:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057ae:	e015      	b.n	80057dc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057b0:	f7fc fef2 	bl	8002598 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057be:	d90d      	bls.n	80057dc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2203      	movs	r2, #3
 80057cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e077      	b.n	80058cc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e2      	bne.n	80057b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800580a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800580c:	f7fc fec4 	bl	8002598 <HAL_GetTick>
 8005810:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005812:	e015      	b.n	8005840 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005814:	f7fc fec0 	bl	8002598 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005822:	d90d      	bls.n	8005840 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	22ff      	movs	r2, #255	; 0xff
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2203      	movs	r2, #3
 8005830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e045      	b.n	80058cc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0e2      	beq.n	8005814 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0207 	bic.w	r2, r2, #7
 8005864:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6899      	ldr	r1, [r3, #8]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005876:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800587e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005882:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005886:	4b13      	ldr	r3, [pc, #76]	; (80058d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a12      	ldr	r2, [pc, #72]	; (80058d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800588c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005890:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058b0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	22ff      	movs	r2, #255	; 0xff
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	58000800 	.word	0x58000800

080058d8 <LL_RCC_GetUSARTClockSource>:
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4013      	ands	r3, r2
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_RCC_GetLPUARTClockSource>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005904:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4013      	ands	r3, r2
}
 800590c:	4618      	mov	r0, r3
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e042      	b.n	80059b0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fc fbfb 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2224      	movs	r2, #36	; 0x24
 8005946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8ba 	bl	8005ad4 <UART_SetConfig>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e022      	b.n	80059b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fad6 	bl	8005f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fb5d 	bl	8006068 <UART_CheckIdleState>
 80059ae:	4603      	mov	r3, r0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d17b      	bne.n	8005aca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_UART_Transmit+0x26>
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e074      	b.n	8005acc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2221      	movs	r2, #33	; 0x21
 80059ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f2:	f7fc fdd1 	bl	8002598 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a10:	d108      	bne.n	8005a24 <HAL_UART_Transmit+0x6c>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e003      	b.n	8005a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a2c:	e030      	b.n	8005a90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	; 0x80
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fbbf 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e03d      	b.n	8005acc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e007      	b.n	8005a7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1c8      	bne.n	8005a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2140      	movs	r1, #64	; 0x40
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fb88 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e006      	b.n	8005acc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad8:	b08c      	sub	sp, #48	; 0x30
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4baf      	ldr	r3, [pc, #700]	; (8005dc0 <UART_SetConfig+0x2ec>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4aa4      	ldr	r2, [pc, #656]	; (8005dc4 <UART_SetConfig+0x2f0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d004      	beq.n	8005b40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005b4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b54:	430b      	orrs	r3, r1
 8005b56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	f023 010f 	bic.w	r1, r3, #15
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a95      	ldr	r2, [pc, #596]	; (8005dc8 <UART_SetConfig+0x2f4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d125      	bne.n	8005bc4 <UART_SetConfig+0xf0>
 8005b78:	2003      	movs	r0, #3
 8005b7a:	f7ff fead 	bl	80058d8 <LL_RCC_GetUSARTClockSource>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d81b      	bhi.n	8005bbc <UART_SetConfig+0xe8>
 8005b84:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <UART_SetConfig+0xb8>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ba2:	e042      	b.n	8005c2a <UART_SetConfig+0x156>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005baa:	e03e      	b.n	8005c2a <UART_SetConfig+0x156>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb2:	e03a      	b.n	8005c2a <UART_SetConfig+0x156>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bba:	e036      	b.n	8005c2a <UART_SetConfig+0x156>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc2:	e032      	b.n	8005c2a <UART_SetConfig+0x156>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7e      	ldr	r2, [pc, #504]	; (8005dc4 <UART_SetConfig+0x2f0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d12a      	bne.n	8005c24 <UART_SetConfig+0x150>
 8005bce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005bd2:	f7ff fe91 	bl	80058f8 <LL_RCC_GetLPUARTClockSource>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bdc:	d01a      	beq.n	8005c14 <UART_SetConfig+0x140>
 8005bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005be2:	d81b      	bhi.n	8005c1c <UART_SetConfig+0x148>
 8005be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be8:	d00c      	beq.n	8005c04 <UART_SetConfig+0x130>
 8005bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bee:	d815      	bhi.n	8005c1c <UART_SetConfig+0x148>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <UART_SetConfig+0x128>
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf8:	d008      	beq.n	8005c0c <UART_SetConfig+0x138>
 8005bfa:	e00f      	b.n	8005c1c <UART_SetConfig+0x148>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c02:	e012      	b.n	8005c2a <UART_SetConfig+0x156>
 8005c04:	2302      	movs	r3, #2
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	e00e      	b.n	8005c2a <UART_SetConfig+0x156>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c12:	e00a      	b.n	8005c2a <UART_SetConfig+0x156>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1a:	e006      	b.n	8005c2a <UART_SetConfig+0x156>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e002      	b.n	8005c2a <UART_SetConfig+0x156>
 8005c24:	2310      	movs	r3, #16
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <UART_SetConfig+0x2f0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	f040 8097 	bne.w	8005d64 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d823      	bhi.n	8005c86 <UART_SetConfig+0x1b2>
 8005c3e:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x170>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c87 	.word	0x08005c87
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c87 	.word	0x08005c87
 8005c54:	08005c77 	.word	0x08005c77
 8005c58:	08005c87 	.word	0x08005c87
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c87 	.word	0x08005c87
 8005c64:	08005c7f 	.word	0x08005c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fe ff76 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8005c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c6e:	e010      	b.n	8005c92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c70:	4b56      	ldr	r3, [pc, #344]	; (8005dcc <UART_SetConfig+0x2f8>)
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c74:	e00d      	b.n	8005c92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c76:	f7fe feef 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8005c7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c7c:	e009      	b.n	8005c92 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c84:	e005      	b.n	8005c92 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 812b 	beq.w	8005ef0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	4a4c      	ldr	r2, [pc, #304]	; (8005dd0 <UART_SetConfig+0x2fc>)
 8005ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	4413      	add	r3, r2
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d305      	bcc.n	8005cca <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d903      	bls.n	8005cd2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cd0:	e10e      	b.n	8005ef0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	60fa      	str	r2, [r7, #12]
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	4a3c      	ldr	r2, [pc, #240]	; (8005dd0 <UART_SetConfig+0x2fc>)
 8005ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cf4:	f7fa fa9c 	bl	8000230 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	020b      	lsls	r3, r1, #8
 8005d0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d0e:	0202      	lsls	r2, r0, #8
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	6849      	ldr	r1, [r1, #4]
 8005d14:	0849      	lsrs	r1, r1, #1
 8005d16:	2000      	movs	r0, #0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	eb12 0804 	adds.w	r8, r2, r4
 8005d20:	eb43 0905 	adc.w	r9, r3, r5
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	469a      	mov	sl, r3
 8005d2c:	4693      	mov	fp, r2
 8005d2e:	4652      	mov	r2, sl
 8005d30:	465b      	mov	r3, fp
 8005d32:	4640      	mov	r0, r8
 8005d34:	4649      	mov	r1, r9
 8005d36:	f7fa fa7b 	bl	8000230 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4613      	mov	r3, r2
 8005d40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d48:	d308      	bcc.n	8005d5c <UART_SetConfig+0x288>
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d50:	d204      	bcs.n	8005d5c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	e0c9      	b.n	8005ef0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d62:	e0c5      	b.n	8005ef0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6c:	d16d      	bne.n	8005e4a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d72:	3b01      	subs	r3, #1
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	d82d      	bhi.n	8005dd4 <UART_SetConfig+0x300>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x2ac>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005da1 	.word	0x08005da1
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005dd5 	.word	0x08005dd5
 8005d8c:	08005daf 	.word	0x08005daf
 8005d90:	08005dd5 	.word	0x08005dd5
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe fef0 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8005da4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da6:	e01b      	b.n	8005de0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <UART_SetConfig+0x2f8>)
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dac:	e018      	b.n	8005de0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fe fe53 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db4:	e014      	b.n	8005de0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dbc:	e010      	b.n	8005de0 <UART_SetConfig+0x30c>
 8005dbe:	bf00      	nop
 8005dc0:	cfff69f3 	.word	0xcfff69f3
 8005dc4:	40008000 	.word	0x40008000
 8005dc8:	40013800 	.word	0x40013800
 8005dcc:	00f42400 	.word	0x00f42400
 8005dd0:	0800ab54 	.word	0x0800ab54
      default:
        pclk = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 8084 	beq.w	8005ef0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	4a4b      	ldr	r2, [pc, #300]	; (8005f1c <UART_SetConfig+0x448>)
 8005dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df2:	461a      	mov	r2, r3
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfa:	005a      	lsls	r2, r3, #1
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	441a      	add	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	2b0f      	cmp	r3, #15
 8005e12:	d916      	bls.n	8005e42 <UART_SetConfig+0x36e>
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d212      	bcs.n	8005e42 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f023 030f 	bic.w	r3, r3, #15
 8005e24:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	8bfb      	ldrh	r3, [r7, #30]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	8bfa      	ldrh	r2, [r7, #30]
 8005e3e:	60da      	str	r2, [r3, #12]
 8005e40:	e056      	b.n	8005ef0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e48:	e052      	b.n	8005ef0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	2b07      	cmp	r3, #7
 8005e52:	d822      	bhi.n	8005e9a <UART_SetConfig+0x3c6>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0x388>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e7d 	.word	0x08005e7d
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005e8b 	.word	0x08005e8b
 8005e6c:	08005e9b 	.word	0x08005e9b
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005e9b 	.word	0x08005e9b
 8005e78:	08005e93 	.word	0x08005e93
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e7c:	f7fe fe82 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e82:	e010      	b.n	8005ea6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e84:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <UART_SetConfig+0x44c>)
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e88:	e00d      	b.n	8005ea6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7fe fde5 	bl	8004a58 <HAL_RCC_GetSysClockFreq>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e90:	e009      	b.n	8005ea6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e98:	e005      	b.n	8005ea6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ea4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d021      	beq.n	8005ef0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <UART_SetConfig+0x448>)
 8005eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	441a      	add	r2, r3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	2b0f      	cmp	r3, #15
 8005ed4:	d909      	bls.n	8005eea <UART_SetConfig+0x416>
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d205      	bcs.n	8005eea <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	e002      	b.n	8005ef0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2200      	movs	r2, #0
 8005f04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f0c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3730      	adds	r7, #48	; 0x30
 8005f14:	46bd      	mov	sp, r7
 8005f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1a:	bf00      	nop
 8005f1c:	0800ab54 	.word	0x0800ab54
 8005f20:	00f42400 	.word	0x00f42400

08005f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01a      	beq.n	800603a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006022:	d10a      	bne.n	800603a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
  }
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b098      	sub	sp, #96	; 0x60
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006078:	f7fc fa8e 	bl	8002598 <HAL_GetTick>
 800607c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b08      	cmp	r3, #8
 800608a:	d12f      	bne.n	80060ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800608c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	2200      	movs	r2, #0
 8006096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f88e 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d022      	beq.n	80060ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ba:	653b      	str	r3, [r7, #80]	; 0x50
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
 80060c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e063      	b.n	80061b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d149      	bne.n	800618e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006102:	2200      	movs	r2, #0
 8006104:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f857 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d03c      	beq.n	800618e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	623b      	str	r3, [r7, #32]
   return(result);
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006132:	633b      	str	r3, [r7, #48]	; 0x30
 8006134:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	60fb      	str	r3, [r7, #12]
   return(result);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	64bb      	str	r3, [r7, #72]	; 0x48
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006166:	61fa      	str	r2, [r7, #28]
 8006168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	69b9      	ldr	r1, [r7, #24]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	617b      	str	r3, [r7, #20]
   return(result);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e012      	b.n	80061b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3758      	adds	r7, #88	; 0x58
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061cc:	e049      	b.n	8006262 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061d4:	d045      	beq.n	8006262 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d6:	f7fc f9df 	bl	8002598 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <UART_WaitOnFlagUntilTimeout+0x30>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e048      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d031      	beq.n	8006262 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b08      	cmp	r3, #8
 800620a:	d110      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2208      	movs	r2, #8
 8006212:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f838 	bl	800628a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2208      	movs	r2, #8
 800621e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e029      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623c:	d111      	bne.n	8006262 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f81e 	bl	800628a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e00f      	b.n	8006282 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4013      	ands	r3, r2
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	429a      	cmp	r2, r3
 800627e:	d0a6      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800628a:	b480      	push	{r7}
 800628c:	b095      	sub	sp, #84	; 0x54
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b0:	643b      	str	r3, [r7, #64]	; 0x40
 80062b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e6      	bne.n	8006292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3308      	adds	r3, #8
 80062e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e3      	bne.n	80062c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d118      	bne.n	8006336 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	60bb      	str	r3, [r7, #8]
   return(result);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f023 0310 	bic.w	r3, r3, #16
 8006318:	647b      	str	r3, [r7, #68]	; 0x44
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	613b      	str	r3, [r7, #16]
   return(result);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e6      	bne.n	8006304 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	675a      	str	r2, [r3, #116]	; 0x74
}
 800634a:	bf00      	nop
 800634c:	3754      	adds	r7, #84	; 0x54
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_UARTEx_DisableFifoMode+0x16>
 8006368:	2302      	movs	r3, #2
 800636a:	e027      	b.n	80063bc <HAL_UARTEx_DisableFifoMode+0x66>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2224      	movs	r2, #36	; 0x24
 8006378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800639a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e02d      	b.n	800643c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	; 0x24
 80063ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f84f 	bl	80064c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006458:	2302      	movs	r3, #2
 800645a:	e02d      	b.n	80064b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2224      	movs	r2, #36	; 0x24
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f811 	bl	80064c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064e0:	e031      	b.n	8006546 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064e2:	2308      	movs	r3, #8
 80064e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064e6:	2308      	movs	r3, #8
 80064e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	0e5b      	lsrs	r3, r3, #25
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	0f5b      	lsrs	r3, r3, #29
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	7b3a      	ldrb	r2, [r7, #12]
 800650e:	4911      	ldr	r1, [pc, #68]	; (8006554 <UARTEx_SetNbDataToProcess+0x94>)
 8006510:	5c8a      	ldrb	r2, [r1, r2]
 8006512:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006516:	7b3a      	ldrb	r2, [r7, #12]
 8006518:	490f      	ldr	r1, [pc, #60]	; (8006558 <UARTEx_SetNbDataToProcess+0x98>)
 800651a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800651c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006520:	b29a      	uxth	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	7b7a      	ldrb	r2, [r7, #13]
 800652c:	4909      	ldr	r1, [pc, #36]	; (8006554 <UARTEx_SetNbDataToProcess+0x94>)
 800652e:	5c8a      	ldrb	r2, [r1, r2]
 8006530:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006534:	7b7a      	ldrb	r2, [r7, #13]
 8006536:	4908      	ldr	r1, [pc, #32]	; (8006558 <UARTEx_SetNbDataToProcess+0x98>)
 8006538:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800653a:	fb93 f3f2 	sdiv	r3, r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	0800ab6c 	.word	0x0800ab6c
 8006558:	0800ab74 	.word	0x0800ab74

0800655c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	2218      	movs	r2, #24
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f8d8 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006574:	233f      	movs	r3, #63	; 0x3f
 8006576:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006578:	2381      	movs	r3, #129	; 0x81
 800657a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800657c:	1dfb      	adds	r3, r7, #7
 800657e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006580:	2301      	movs	r3, #1
 8006582:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fb54 	bl	8007c38 <hci_send_req>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	da01      	bge.n	800659a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006596:	23ff      	movs	r3, #255	; 0xff
 8006598:	e000      	b.n	800659c <aci_gap_set_non_discoverable+0x40>
  return status;
 800659a:	79fb      	ldrb	r3, [r7, #7]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80065a4:	b5b0      	push	{r4, r5, r7, lr}
 80065a6:	b0ce      	sub	sp, #312	; 0x138
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4605      	mov	r5, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	4610      	mov	r0, r2
 80065b0:	4619      	mov	r1, r3
 80065b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065b6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80065ba:	462a      	mov	r2, r5
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065c6:	4622      	mov	r2, r4
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ce:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80065d2:	4602      	mov	r2, r0
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065da:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80065de:	460a      	mov	r2, r1
 80065e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80065ea:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80065ee:	3308      	adds	r3, #8
 80065f0:	f107 0210 	add.w	r2, r7, #16
 80065f4:	4413      	add	r3, r2
 80065f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80065fa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80065fe:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006602:	4413      	add	r3, r2
 8006604:	3309      	adds	r3, #9
 8006606:	f107 0210 	add.w	r2, r7, #16
 800660a:	4413      	add	r3, r2
 800660c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006610:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006614:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006622:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006626:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800662a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006636:	3301      	adds	r3, #1
 8006638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800663c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006640:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006644:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006648:	8812      	ldrh	r2, [r2, #0]
 800664a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800664e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006652:	3302      	adds	r3, #2
 8006654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006658:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800665c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006660:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006664:	8812      	ldrh	r2, [r2, #0]
 8006666:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800666a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800666e:	3302      	adds	r3, #2
 8006670:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006678:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800667c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006688:	3301      	adds	r3, #1
 800668a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800668e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006692:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006696:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800669c:	3301      	adds	r3, #1
 800669e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80066a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066a6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80066aa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80066ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066b0:	3301      	adds	r3, #1
 80066b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80066b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066ba:	3308      	adds	r3, #8
 80066bc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80066c0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 f81d 	bl	8007704 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80066ca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80066ce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066d2:	4413      	add	r3, r2
 80066d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80066d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066dc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066e0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80066e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066e6:	3301      	adds	r3, #1
 80066e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80066ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066f0:	3301      	adds	r3, #1
 80066f2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066f6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 f802 	bl	8007704 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006700:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006704:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006708:	4413      	add	r3, r2
 800670a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800670e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006712:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006716:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800671c:	3302      	adds	r3, #2
 800671e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006726:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800672a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800672c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006730:	3302      	adds	r3, #2
 8006732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800673a:	2218      	movs	r2, #24
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fff0 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006744:	233f      	movs	r3, #63	; 0x3f
 8006746:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800674a:	2383      	movs	r3, #131	; 0x83
 800674c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006750:	f107 0310 	add.w	r3, r7, #16
 8006754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800675c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006760:	f107 030f 	add.w	r3, r7, #15
 8006764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006768:	2301      	movs	r3, #1
 800676a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800676e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fa5f 	bl	8007c38 <hci_send_req>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	da01      	bge.n	8006784 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006780:	23ff      	movs	r3, #255	; 0xff
 8006782:	e004      	b.n	800678e <aci_gap_set_discoverable+0x1ea>
  return status;
 8006784:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006788:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800678c:	781b      	ldrb	r3, [r3, #0]
}
 800678e:	4618      	mov	r0, r3
 8006790:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006794:	46bd      	mov	sp, r7
 8006796:	bdb0      	pop	{r4, r5, r7, pc}

08006798 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b0cc      	sub	sp, #304	; 0x130
 800679c:	af00      	add	r7, sp, #0
 800679e:	4602      	mov	r2, r0
 80067a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80067a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80067aa:	f107 0310 	add.w	r3, r7, #16
 80067ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80067c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80067d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067d8:	3301      	adds	r3, #1
 80067da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067e2:	2218      	movs	r2, #24
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 ff9c 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067ec:	233f      	movs	r3, #63	; 0x3f
 80067ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80067f2:	2385      	movs	r3, #133	; 0x85
 80067f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006804:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006808:	f107 030f 	add.w	r3, r7, #15
 800680c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006810:	2301      	movs	r3, #1
 8006812:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fa0b 	bl	8007c38 <hci_send_req>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	da01      	bge.n	800682c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006828:	23ff      	movs	r3, #255	; 0xff
 800682a:	e004      	b.n	8006836 <aci_gap_set_io_capability+0x9e>
  return status;
 800682c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006830:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006834:	781b      	ldrb	r3, [r3, #0]
}
 8006836:	4618      	mov	r0, r3
 8006838:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006840:	b5b0      	push	{r4, r5, r7, lr}
 8006842:	b0cc      	sub	sp, #304	; 0x130
 8006844:	af00      	add	r7, sp, #0
 8006846:	4605      	mov	r5, r0
 8006848:	460c      	mov	r4, r1
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006852:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006856:	462a      	mov	r2, r5
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006862:	4622      	mov	r2, r4
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800686e:	4602      	mov	r2, r0
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687a:	460a      	mov	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800687e:	f107 0310 	add.w	r3, r7, #16
 8006882:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80068a4:	7812      	ldrb	r2, [r2, #0]
 80068a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ac:	3301      	adds	r3, #1
 80068ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80068b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068ba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80068c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068c6:	3301      	adds	r3, #1
 80068c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80068cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068d4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80068d8:	7812      	ldrb	r2, [r2, #0]
 80068da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80068dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068e0:	3301      	adds	r3, #1
 80068e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80068e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80068f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068fa:	3301      	adds	r3, #1
 80068fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006904:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006908:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800690a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800690e:	3301      	adds	r3, #1
 8006910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800691c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800691e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006922:	3301      	adds	r3, #1
 8006924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006930:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006932:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006936:	3301      	adds	r3, #1
 8006938:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800693c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006940:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006944:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800694c:	3304      	adds	r3, #4
 800694e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006956:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800695a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800695c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006960:	3301      	adds	r3, #1
 8006962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800696a:	2218      	movs	r2, #24
 800696c:	2100      	movs	r1, #0
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fed8 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006974:	233f      	movs	r3, #63	; 0x3f
 8006976:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800697a:	2386      	movs	r3, #134	; 0x86
 800697c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800698c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006990:	f107 030f 	add.w	r3, r7, #15
 8006994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006998:	2301      	movs	r3, #1
 800699a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800699e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f001 f947 	bl	8007c38 <hci_send_req>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da01      	bge.n	80069b4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80069b0:	23ff      	movs	r3, #255	; 0xff
 80069b2:	e004      	b.n	80069be <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80069b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80069bc:	781b      	ldrb	r3, [r3, #0]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bdb0      	pop	{r4, r5, r7, pc}

080069c8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b0cc      	sub	sp, #304	; 0x130
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4602      	mov	r2, r0
 80069d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d8:	6019      	str	r1, [r3, #0]
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80069e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80069e4:	f107 0310 	add.w	r3, r7, #16
 80069e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80069ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80069fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006a0a:	8812      	ldrh	r2, [r2, #0]
 8006a0c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a12:	3302      	adds	r3, #2
 8006a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a20:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a2e:	3304      	adds	r3, #4
 8006a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a38:	2218      	movs	r2, #24
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fe71 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a42:	233f      	movs	r3, #63	; 0x3f
 8006a44:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006a48:	2388      	movs	r3, #136	; 0x88
 8006a4a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a4e:	f107 0310 	add.w	r3, r7, #16
 8006a52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a5e:	f107 030f 	add.w	r3, r7, #15
 8006a62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 f8e0 	bl	8007c38 <hci_send_req>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da01      	bge.n	8006a82 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006a7e:	23ff      	movs	r3, #255	; 0xff
 8006a80:	e004      	b.n	8006a8c <aci_gap_pass_key_resp+0xc4>
  return status;
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006a96:	b590      	push	{r4, r7, lr}
 8006a98:	b0cd      	sub	sp, #308	; 0x134
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aa6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006acc:	460a      	mov	r2, r1
 8006ace:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ad0:	f107 0310 	add.w	r3, r7, #16
 8006ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ad8:	f107 0308 	add.w	r3, r7, #8
 8006adc:	2207      	movs	r2, #7
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fe1f 	bl	8007724 <Osal_MemSet>
  int index_input = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006af4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b00:	3301      	adds	r3, #1
 8006b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b28:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b34:	3301      	adds	r3, #1
 8006b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b3e:	2218      	movs	r2, #24
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fdee 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b48:	233f      	movs	r3, #63	; 0x3f
 8006b4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006b4e:	238a      	movs	r3, #138	; 0x8a
 8006b50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b54:	f107 0310 	add.w	r3, r7, #16
 8006b58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006b64:	f107 0308 	add.w	r3, r7, #8
 8006b68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006b6c:	2307      	movs	r3, #7
 8006b6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 f85d 	bl	8007c38 <hci_send_req>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	da01      	bge.n	8006b88 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006b84:	23ff      	movs	r3, #255	; 0xff
 8006b86:	e02e      	b.n	8006be6 <aci_gap_init+0x150>
  if ( resp.Status )
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <aci_gap_init+0x10c>
    return resp.Status;
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	e021      	b.n	8006be6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006baa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bc4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006bce:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bd8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006be2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}

08006bf0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b0cc      	sub	sp, #304	; 0x130
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	6019      	str	r1, [r3, #0]
 8006c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c06:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c2e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006c32:	7812      	ldrb	r2, [r2, #0]
 8006c34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c44:	1c58      	adds	r0, r3, #1
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c4e:	781a      	ldrb	r2, [r3, #0]
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	f000 fd53 	bl	8007704 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c76:	2218      	movs	r2, #24
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fd52 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c80:	233f      	movs	r3, #63	; 0x3f
 8006c82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006c86:	238e      	movs	r3, #142	; 0x8e
 8006c88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c8c:	f107 0310 	add.w	r3, r7, #16
 8006c90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c9c:	f107 030f 	add.w	r3, r7, #15
 8006ca0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006caa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ffc1 	bl	8007c38 <hci_send_req>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da01      	bge.n	8006cc0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006cbc:	23ff      	movs	r3, #255	; 0xff
 8006cbe:	e004      	b.n	8006cca <aci_gap_update_adv_data+0xda>
  return status;
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cc8:	781b      	ldrb	r3, [r3, #0]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	2218      	movs	r2, #24
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fd1c 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cec:	233f      	movs	r3, #63	; 0x3f
 8006cee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006cf0:	2392      	movs	r3, #146	; 0x92
 8006cf2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006cf4:	1dfb      	adds	r3, r7, #7
 8006cf6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cfc:	f107 0308 	add.w	r3, r7, #8
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 ff98 	bl	8007c38 <hci_send_req>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da01      	bge.n	8006d12 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006d0e:	23ff      	movs	r3, #255	; 0xff
 8006d10:	e000      	b.n	8006d14 <aci_gap_configure_whitelist+0x40>
  return status;
 8006d12:	79fb      	ldrb	r3, [r7, #7]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b0cc      	sub	sp, #304	; 0x130
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4602      	mov	r2, r0
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006d36:	460a      	mov	r2, r1
 8006d38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006d3a:	f107 0310 	add.w	r3, r7, #16
 8006d3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d5c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d60:	8812      	ldrh	r2, [r2, #0]
 8006d62:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d68:	3302      	adds	r3, #2
 8006d6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d76:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d82:	3301      	adds	r3, #1
 8006d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d8c:	2218      	movs	r2, #24
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fcc7 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d96:	233f      	movs	r3, #63	; 0x3f
 8006d98:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006d9c:	23a5      	movs	r3, #165	; 0xa5
 8006d9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006da2:	f107 0310 	add.w	r3, r7, #16
 8006da6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006daa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006db2:	f107 030f 	add.w	r3, r7, #15
 8006db6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 ff36 	bl	8007c38 <hci_send_req>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	da01      	bge.n	8006dd6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006dd2:	23ff      	movs	r3, #255	; 0xff
 8006dd4:	e004      	b.n	8006de0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006dde:	781b      	ldrb	r3, [r3, #0]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b088      	sub	sp, #32
 8006dee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006df4:	f107 0308 	add.w	r3, r7, #8
 8006df8:	2218      	movs	r2, #24
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fc91 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e02:	233f      	movs	r3, #63	; 0x3f
 8006e04:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006e06:	f240 1301 	movw	r3, #257	; 0x101
 8006e0a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006e0c:	1dfb      	adds	r3, r7, #7
 8006e0e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006e10:	2301      	movs	r3, #1
 8006e12:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e14:	f107 0308 	add.w	r3, r7, #8
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 ff0c 	bl	8007c38 <hci_send_req>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	da01      	bge.n	8006e2a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006e26:	23ff      	movs	r3, #255	; 0xff
 8006e28:	e000      	b.n	8006e2c <aci_gatt_init+0x42>
  return status;
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006e34:	b590      	push	{r4, r7, lr}
 8006e36:	b0cf      	sub	sp, #316	; 0x13c
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006e40:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006e44:	6001      	str	r1, [r0, #0]
 8006e46:	4610      	mov	r0, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e4e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e52:	4622      	mov	r2, r4
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e5a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006e5e:	4602      	mov	r2, r0
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e66:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006e6e:	f107 0310 	add.w	r3, r7, #16
 8006e72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006e76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e7a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d00a      	beq.n	8006e9a <aci_gatt_add_service+0x66>
 8006e84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e88:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d101      	bne.n	8006e96 <aci_gatt_add_service+0x62>
 8006e92:	2311      	movs	r3, #17
 8006e94:	e002      	b.n	8006e9c <aci_gatt_add_service+0x68>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <aci_gatt_add_service+0x68>
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	f107 0210 	add.w	r2, r7, #16
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	2203      	movs	r2, #3
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fc38 	bl	8007724 <Osal_MemSet>
  int index_input = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006eba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ebe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ec2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006ec6:	7812      	ldrb	r2, [r2, #0]
 8006ec8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006ed4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ed8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d002      	beq.n	8006ee8 <aci_gatt_add_service+0xb4>
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d004      	beq.n	8006ef0 <aci_gatt_add_service+0xbc>
 8006ee6:	e007      	b.n	8006ef8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006eee:	e005      	b.n	8006efc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006ef0:	2310      	movs	r3, #16
 8006ef2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006ef6:	e001      	b.n	8006efc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006ef8:	2397      	movs	r3, #151	; 0x97
 8006efa:	e06c      	b.n	8006fd6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006efc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f00:	1c58      	adds	r0, r3, #1
 8006f02:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006f06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	f000 fbf8 	bl	8007704 <Osal_MemCpy>
    index_input += size;
 8006f14:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006f18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f26:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f2a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f36:	3301      	adds	r3, #1
 8006f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f44:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f50:	3301      	adds	r3, #1
 8006f52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f5a:	2218      	movs	r2, #24
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fbe0 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f64:	233f      	movs	r3, #63	; 0x3f
 8006f66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006f6a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006f6e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f72:	f107 0310 	add.w	r3, r7, #16
 8006f76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006f82:	f107 030c 	add.w	r3, r7, #12
 8006f86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fe4e 	bl	8007c38 <hci_send_req>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da01      	bge.n	8006fa6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006fa2:	23ff      	movs	r3, #255	; 0xff
 8006fa4:	e017      	b.n	8006fd6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006fa6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006fb4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	e00a      	b.n	8006fd6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006fc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006fd2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}

08006fe0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b0d1      	sub	sp, #324	; 0x144
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006fee:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006ff2:	600a      	str	r2, [r1, #0]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006ffa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006ffe:	4622      	mov	r2, r4
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007006:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800700a:	4602      	mov	r2, r0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007012:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007016:	460a      	mov	r2, r1
 8007018:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800701a:	f107 0318 	add.w	r3, r7, #24
 800701e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007022:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007026:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d00a      	beq.n	8007046 <aci_gatt_add_char+0x66>
 8007030:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007034:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d101      	bne.n	8007042 <aci_gatt_add_char+0x62>
 800703e:	2313      	movs	r3, #19
 8007040:	e002      	b.n	8007048 <aci_gatt_add_char+0x68>
 8007042:	2303      	movs	r3, #3
 8007044:	e000      	b.n	8007048 <aci_gatt_add_char+0x68>
 8007046:	2305      	movs	r3, #5
 8007048:	f107 0218 	add.w	r2, r7, #24
 800704c:	4413      	add	r3, r2
 800704e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007052:	f107 0314 	add.w	r3, r7, #20
 8007056:	2203      	movs	r2, #3
 8007058:	2100      	movs	r1, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fb62 	bl	8007724 <Osal_MemSet>
  int index_input = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007066:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800706a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800706e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007072:	8812      	ldrh	r2, [r2, #0]
 8007074:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007076:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800707a:	3302      	adds	r3, #2
 800707c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007080:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007084:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007088:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007090:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007094:	3301      	adds	r3, #1
 8007096:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800709a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800709e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d002      	beq.n	80070ae <aci_gatt_add_char+0xce>
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d004      	beq.n	80070b6 <aci_gatt_add_char+0xd6>
 80070ac:	e007      	b.n	80070be <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80070ae:	2302      	movs	r3, #2
 80070b0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80070b4:	e005      	b.n	80070c2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80070b6:	2310      	movs	r3, #16
 80070b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80070bc:	e001      	b.n	80070c2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80070be:	2397      	movs	r3, #151	; 0x97
 80070c0:	e091      	b.n	80071e6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80070c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070c6:	1cd8      	adds	r0, r3, #3
 80070c8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80070cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070d0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80070d4:	6819      	ldr	r1, [r3, #0]
 80070d6:	f000 fb15 	bl	8007704 <Osal_MemCpy>
    index_input += size;
 80070da:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80070de:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80070e2:	4413      	add	r3, r2
 80070e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80070e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80070f0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80070f4:	8812      	ldrh	r2, [r2, #0]
 80070f6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80070f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070fc:	3302      	adds	r3, #2
 80070fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007106:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800710a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800710c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007110:	3301      	adds	r3, #1
 8007112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800711a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800711e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007120:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007124:	3301      	adds	r3, #1
 8007126:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800712a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800712e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007132:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007134:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007138:	3301      	adds	r3, #1
 800713a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800713e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007142:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007146:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007148:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800714c:	3301      	adds	r3, #1
 800714e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007152:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007156:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800715a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800715c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007160:	3301      	adds	r3, #1
 8007162:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007166:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800716a:	2218      	movs	r2, #24
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fad8 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007174:	233f      	movs	r3, #63	; 0x3f
 8007176:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800717a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800717e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007182:	f107 0318 	add.w	r3, r7, #24
 8007186:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800718a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800718e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007192:	f107 0314 	add.w	r3, r7, #20
 8007196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800719a:	2303      	movs	r3, #3
 800719c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fd46 	bl	8007c38 <hci_send_req>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da01      	bge.n	80071b6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80071b2:	23ff      	movs	r3, #255	; 0xff
 80071b4:	e017      	b.n	80071e6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80071b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80071c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	e00a      	b.n	80071e6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80071d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80071e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd90      	pop	{r4, r7, pc}

080071f0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80071f0:	b5b0      	push	{r4, r5, r7, lr}
 80071f2:	b0cc      	sub	sp, #304	; 0x130
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4605      	mov	r5, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007206:	462a      	mov	r2, r5
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007212:	4622      	mov	r2, r4
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800721e:	4602      	mov	r2, r0
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800722a:	460a      	mov	r2, r1
 800722c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800722e:	f107 0310 	add.w	r3, r7, #16
 8007232:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007250:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007254:	8812      	ldrh	r2, [r2, #0]
 8007256:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800725c:	3302      	adds	r3, #2
 800725e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007266:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800726a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800726e:	8812      	ldrh	r2, [r2, #0]
 8007270:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007276:	3302      	adds	r3, #2
 8007278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800727c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007280:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007284:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007288:	7812      	ldrb	r2, [r2, #0]
 800728a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800728c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007290:	3301      	adds	r3, #1
 8007292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800729e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80072a2:	7812      	ldrb	r2, [r2, #0]
 80072a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80072a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072aa:	3301      	adds	r3, #1
 80072ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80072b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b4:	1d98      	adds	r0, r3, #6
 80072b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80072c6:	f000 fa1d 	bl	8007704 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80072d8:	4413      	add	r3, r2
 80072da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072e2:	2218      	movs	r2, #24
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fa1c 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 80072ec:	233f      	movs	r3, #63	; 0x3f
 80072ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80072f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80072f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072fa:	f107 0310 	add.w	r3, r7, #16
 80072fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007306:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800730a:	f107 030f 	add.w	r3, r7, #15
 800730e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007312:	2301      	movs	r3, #1
 8007314:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007318:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fc8a 	bl	8007c38 <hci_send_req>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	da01      	bge.n	800732e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800732a:	23ff      	movs	r3, #255	; 0xff
 800732c:	e004      	b.n	8007338 <aci_gatt_update_char_value+0x148>
  return status;
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007336:	781b      	ldrb	r3, [r3, #0]
}
 8007338:	4618      	mov	r0, r3
 800733a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800733e:	46bd      	mov	sp, r7
 8007340:	bdb0      	pop	{r4, r5, r7, pc}

08007342 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b0cc      	sub	sp, #304	; 0x130
 8007346:	af00      	add	r7, sp, #0
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800735a:	4602      	mov	r2, r0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007362:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007366:	460a      	mov	r2, r1
 8007368:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800736a:	f107 0310 	add.w	r3, r7, #16
 800736e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800738c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007398:	3301      	adds	r3, #1
 800739a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80073ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b2:	3301      	adds	r3, #1
 80073b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80073b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073bc:	1c98      	adds	r0, r3, #2
 80073be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	f000 f997 	bl	8007704 <Osal_MemCpy>
  index_input += Length;
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073e4:	4413      	add	r3, r2
 80073e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ee:	2218      	movs	r2, #24
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f996 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073f8:	233f      	movs	r3, #63	; 0x3f
 80073fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80073fe:	230c      	movs	r3, #12
 8007400:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007404:	f107 0310 	add.w	r3, r7, #16
 8007408:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800740c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007410:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007414:	f107 030f 	add.w	r3, r7, #15
 8007418:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800741c:	2301      	movs	r3, #1
 800741e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007426:	2100      	movs	r1, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fc05 	bl	8007c38 <hci_send_req>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	da01      	bge.n	8007438 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007434:	23ff      	movs	r3, #255	; 0xff
 8007436:	e004      	b.n	8007442 <aci_hal_write_config_data+0x100>
  return status;
 8007438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007440:	781b      	ldrb	r3, [r3, #0]
}
 8007442:	4618      	mov	r0, r3
 8007444:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b0cc      	sub	sp, #304	; 0x130
 8007450:	af00      	add	r7, sp, #0
 8007452:	4602      	mov	r2, r0
 8007454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007458:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007462:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007466:	460a      	mov	r2, r1
 8007468:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800746a:	f107 0310 	add.w	r3, r7, #16
 800746e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800747a:	2200      	movs	r2, #0
 800747c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800748c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800749e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074a6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80074ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074b2:	3301      	adds	r3, #1
 80074b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074bc:	2218      	movs	r2, #24
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 f92f 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074c6:	233f      	movs	r3, #63	; 0x3f
 80074c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80074cc:	230f      	movs	r3, #15
 80074ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074e2:	f107 030f 	add.w	r3, r7, #15
 80074e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fb9e 	bl	8007c38 <hci_send_req>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da01      	bge.n	8007506 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007502:	23ff      	movs	r3, #255	; 0xff
 8007504:	e004      	b.n	8007510 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800750e:	781b      	ldrb	r3, [r3, #0]
}
 8007510:	4618      	mov	r0, r3
 8007512:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b0cc      	sub	sp, #304	; 0x130
 800751e:	af00      	add	r7, sp, #0
 8007520:	4602      	mov	r2, r0
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800752a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007538:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800754e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007552:	8812      	ldrh	r2, [r2, #0]
 8007554:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800755a:	3302      	adds	r3, #2
 800755c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007560:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007564:	2218      	movs	r2, #24
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f8db 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x3f;
 800756e:	233f      	movs	r3, #63	; 0x3f
 8007570:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007574:	2318      	movs	r3, #24
 8007576:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800757a:	f107 0310 	add.w	r3, r7, #16
 800757e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007586:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800758a:	f107 030f 	add.w	r3, r7, #15
 800758e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007598:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fb4a 	bl	8007c38 <hci_send_req>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da01      	bge.n	80075ae <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80075aa:	23ff      	movs	r3, #255	; 0xff
 80075ac:	e004      	b.n	80075b8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075b6:	781b      	ldrb	r3, [r3, #0]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b088      	sub	sp, #32
 80075c6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	2218      	movs	r2, #24
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f8a5 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x03;
 80075da:	2303      	movs	r3, #3
 80075dc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80075de:	2303      	movs	r3, #3
 80075e0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80075e2:	1dfb      	adds	r3, r7, #7
 80075e4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075ea:	f107 0308 	add.w	r3, r7, #8
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fb21 	bl	8007c38 <hci_send_req>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da01      	bge.n	8007600 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80075fc:	23ff      	movs	r3, #255	; 0xff
 80075fe:	e000      	b.n	8007602 <hci_reset+0x40>
  return status;
 8007600:	79fb      	ldrb	r3, [r7, #7]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800760a:	b590      	push	{r4, r7, lr}
 800760c:	b0cd      	sub	sp, #308	; 0x134
 800760e:	af00      	add	r7, sp, #0
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800761e:	4622      	mov	r2, r4
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007626:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800762a:	4602      	mov	r2, r0
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007636:	460a      	mov	r2, r1
 8007638:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800763a:	f107 0310 	add.w	r3, r7, #16
 800763e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007658:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800765c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007668:	3301      	adds	r3, #1
 800766a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800766e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007676:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800767a:	7812      	ldrb	r2, [r2, #0]
 800767c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800767e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007682:	3301      	adds	r3, #1
 8007684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007690:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800769c:	3301      	adds	r3, #1
 800769e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a6:	2218      	movs	r2, #24
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f83a 	bl	8007724 <Osal_MemSet>
  rq.ogf = 0x08;
 80076b0:	2308      	movs	r3, #8
 80076b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80076b6:	2331      	movs	r3, #49	; 0x31
 80076b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076bc:	f107 0310 	add.w	r3, r7, #16
 80076c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076cc:	f107 030f 	add.w	r3, r7, #15
 80076d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076de:	2100      	movs	r1, #0
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 faa9 	bl	8007c38 <hci_send_req>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da01      	bge.n	80076f0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80076ec:	23ff      	movs	r3, #255	; 0xff
 80076ee:	e004      	b.n	80076fa <hci_le_set_default_phy+0xf0>
  return status;
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076f8:	781b      	ldrb	r3, [r3, #0]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007700:	46bd      	mov	sp, r7
 8007702:	bd90      	pop	{r4, r7, pc}

08007704 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f002 f8db 	bl	80098d0 <memcpy>
 800771a:	4603      	mov	r3, r0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f002 f8d9 	bl	80098ec <memset>
 800773a:	4603      	mov	r3, r0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  return;
 8007748:	bf00      	nop
}
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007752:	b480      	push	{r7}
 8007754:	af00      	add	r7, sp, #0
  return;
 8007756:	bf00      	nop
}
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  return;
 8007764:	bf00      	nop
}
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800776e:	b480      	push	{r7}
 8007770:	af00      	add	r7, sp, #0
  return;
 8007772:	bf00      	nop
}
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  return;
 8007780:	bf00      	nop
}
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800778a:	b480      	push	{r7}
 800778c:	af00      	add	r7, sp, #0
  return;
 800778e:	bf00      	nop
}
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return;
 800779c:	bf00      	nop
}
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80077a6:	b480      	push	{r7}
 80077a8:	af00      	add	r7, sp, #0
  return;
 80077aa:	bf00      	nop
}
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  return;
 80077b8:	bf00      	nop
}
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80077c2:	b480      	push	{r7}
 80077c4:	af00      	add	r7, sp, #0
  return;
 80077c6:	bf00      	nop
}
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  return;
 80077d4:	bf00      	nop
}
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80077de:	b480      	push	{r7}
 80077e0:	af00      	add	r7, sp, #0
  return;
 80077e2:	bf00      	nop
}
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  return;
 80077f0:	bf00      	nop
}
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80077fa:	b480      	push	{r7}
 80077fc:	af00      	add	r7, sp, #0
  return;
 80077fe:	bf00      	nop
}
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return;
 800780c:	bf00      	nop
}
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007816:	b480      	push	{r7}
 8007818:	af00      	add	r7, sp, #0
  return;
 800781a:	bf00      	nop
}
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  return;
 8007828:	bf00      	nop
}
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
	...

08007834 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <SVCCTL_Init+0x18>)
 800783a:	2200      	movs	r2, #0
 800783c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800783e:	4b04      	ldr	r3, [pc, #16]	; (8007850 <SVCCTL_Init+0x1c>)
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007844:	f000 f806 	bl	8007854 <SVCCTL_SvcInit>

  return;
 8007848:	bf00      	nop
}
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000910 	.word	0x20000910
 8007850:	20000930 	.word	0x20000930

08007854 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  BAS_Init();
 8007858:	f7ff ff74 	bl	8007744 <BAS_Init>

  BLS_Init();
 800785c:	f7ff ff79 	bl	8007752 <BLS_Init>

  CRS_STM_Init();
 8007860:	f7ff ff7e 	bl	8007760 <CRS_STM_Init>

  DIS_Init();
 8007864:	f7ff ff83 	bl	800776e <DIS_Init>

  EDS_STM_Init();
 8007868:	f7ff ff88 	bl	800777c <EDS_STM_Init>

  HIDS_Init();
 800786c:	f7ff ff8d 	bl	800778a <HIDS_Init>

  HRS_Init();
 8007870:	f7ff ff92 	bl	8007798 <HRS_Init>

  HTS_Init();
 8007874:	f7ff ff97 	bl	80077a6 <HTS_Init>

  IAS_Init();
 8007878:	f7ff ff9c 	bl	80077b4 <IAS_Init>

  LLS_Init();
 800787c:	f7ff ffa1 	bl	80077c2 <LLS_Init>

  TPS_Init();
 8007880:	f7ff ffa6 	bl	80077d0 <TPS_Init>

  MOTENV_STM_Init();
 8007884:	f7ff ffab 	bl	80077de <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007888:	f7ff ffb0 	bl	80077ec <P2PS_STM_Init>

  ZDD_STM_Init();
 800788c:	f7ff ffb5 	bl	80077fa <ZDD_STM_Init>

  OTAS_STM_Init();
 8007890:	f7ff ffba 	bl	8007808 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007894:	f7ff ffc6 	bl	8007824 <BVOPUS_STM_Init>

  MESH_Init();
 8007898:	f7ff ffbd 	bl	8007816 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800789c:	f001 faaa 	bl	8008df4 <SVCCTL_InitCustomSvc>
  
  return;
 80078a0:	bf00      	nop
}
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <SVCCTL_RegisterSvcHandler+0x30>)
 80078ae:	7f1b      	ldrb	r3, [r3, #28]
 80078b0:	4619      	mov	r1, r3
 80078b2:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <SVCCTL_RegisterSvcHandler+0x30>)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <SVCCTL_RegisterSvcHandler+0x30>)
 80078bc:	7f1b      	ldrb	r3, [r3, #28]
 80078be:	3301      	adds	r3, #1
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <SVCCTL_RegisterSvcHandler+0x30>)
 80078c4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80078c6:	bf00      	nop
}
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20000910 	.word	0x20000910

080078d8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3301      	adds	r3, #1
 80078e4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80078e6:	2300      	movs	r3, #0
 80078e8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d125      	bne.n	800793e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3302      	adds	r3, #2
 80078f6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007906:	d118      	bne.n	800793a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007908:	2300      	movs	r3, #0
 800790a:	757b      	strb	r3, [r7, #21]
 800790c:	e00d      	b.n	800792a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800790e:	7d7b      	ldrb	r3, [r7, #21]
 8007910:	4a1a      	ldr	r2, [pc, #104]	; (800797c <SVCCTL_UserEvtRx+0xa4>)
 8007912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d108      	bne.n	8007936 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007924:	7d7b      	ldrb	r3, [r7, #21]
 8007926:	3301      	adds	r3, #1
 8007928:	757b      	strb	r3, [r7, #21]
 800792a:	4b14      	ldr	r3, [pc, #80]	; (800797c <SVCCTL_UserEvtRx+0xa4>)
 800792c:	7f1b      	ldrb	r3, [r3, #28]
 800792e:	7d7a      	ldrb	r2, [r7, #21]
 8007930:	429a      	cmp	r2, r3
 8007932:	d3ec      	bcc.n	800790e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007934:	e002      	b.n	800793c <SVCCTL_UserEvtRx+0x64>
              break;
 8007936:	bf00      	nop
          break;
 8007938:	e000      	b.n	800793c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800793a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800793c:	e000      	b.n	8007940 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800793e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d00f      	beq.n	8007966 <SVCCTL_UserEvtRx+0x8e>
 8007946:	2b02      	cmp	r3, #2
 8007948:	dc10      	bgt.n	800796c <SVCCTL_UserEvtRx+0x94>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <SVCCTL_UserEvtRx+0x7c>
 800794e:	2b01      	cmp	r3, #1
 8007950:	d006      	beq.n	8007960 <SVCCTL_UserEvtRx+0x88>
 8007952:	e00b      	b.n	800796c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 ff7b 	bl	8008850 <SVCCTL_App_Notification>
 800795a:	4603      	mov	r3, r0
 800795c:	75bb      	strb	r3, [r7, #22]
      break;
 800795e:	e008      	b.n	8007972 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007960:	2301      	movs	r3, #1
 8007962:	75bb      	strb	r3, [r7, #22]
      break;
 8007964:	e005      	b.n	8007972 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007966:	2300      	movs	r3, #0
 8007968:	75bb      	strb	r3, [r7, #22]
      break;
 800796a:	e002      	b.n	8007972 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800796c:	2301      	movs	r3, #1
 800796e:	75bb      	strb	r3, [r7, #22]
      break;
 8007970:	bf00      	nop
  }

  return (return_status);
 8007972:	7dbb      	ldrb	r3, [r7, #22]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	20000910 	.word	0x20000910

08007980 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	212e      	movs	r1, #46	; 0x2e
 8007998:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800799c:	f000 fae2 	bl	8007f64 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	330b      	adds	r3, #11
 80079a4:	78db      	ldrb	r3, [r3, #3]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b088      	sub	sp, #32
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80079b6:	f107 030c 	add.w	r3, r7, #12
 80079ba:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	210f      	movs	r1, #15
 80079c6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80079ca:	f000 facb 	bl	8007f64 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	330b      	adds	r3, #11
 80079d2:	78db      	ldrb	r3, [r3, #3]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80079e4:	f107 030c 	add.w	r3, r7, #12
 80079e8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	2110      	movs	r1, #16
 80079f0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80079f4:	f000 fab6 	bl	8007f64 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	330b      	adds	r3, #11
 80079fc:	78db      	ldrb	r3, [r3, #3]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b08b      	sub	sp, #44	; 0x2c
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007a30:	4b4a      	ldr	r3, [pc, #296]	; (8007b5c <SHCI_GetWirelessFwInfo+0x154>)
 8007a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007a38:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007a42:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a44      	ldr	r2, [pc, #272]	; (8007b60 <SHCI_GetWirelessFwInfo+0x158>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d10f      	bne.n	8007a74 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	e01a      	b.n	8007aaa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007a7c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007a80:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	0c1b      	lsrs	r3, r3, #16
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	0a1b      	lsrs	r3, r3, #8
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	091b      	lsrs	r3, r3, #4
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	0e1b      	lsrs	r3, r3, #24
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	0a1b      	lsrs	r3, r3, #8
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	0e1b      	lsrs	r3, r3, #24
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	0a1b      	lsrs	r3, r3, #8
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	0e1b      	lsrs	r3, r3, #24
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	0c1b      	lsrs	r3, r3, #16
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	372c      	adds	r7, #44	; 0x2c
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	58004000 	.word	0x58004000
 8007b60:	a94656b9 	.word	0xa94656b9

08007b64 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	4a08      	ldr	r2, [pc, #32]	; (8007b94 <hci_init+0x30>)
 8007b74:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007b76:	4a08      	ldr	r2, [pc, #32]	; (8007b98 <hci_init+0x34>)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007b7c:	4806      	ldr	r0, [pc, #24]	; (8007b98 <hci_init+0x34>)
 8007b7e:	f000 f973 	bl	8007e68 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f8d4 	bl	8007d34 <TlInit>

  return;
 8007b8c:	bf00      	nop
}
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000b98 	.word	0x20000b98
 8007b98:	20000b70 	.word	0x20000b70

08007b9c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007ba2:	4822      	ldr	r0, [pc, #136]	; (8007c2c <hci_user_evt_proc+0x90>)
 8007ba4:	f000 fd28 	bl	80085f8 <LST_is_empty>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d12b      	bne.n	8007c06 <hci_user_evt_proc+0x6a>
 8007bae:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <hci_user_evt_proc+0x94>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d027      	beq.n	8007c06 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007bb6:	f107 030c 	add.w	r3, r7, #12
 8007bba:	4619      	mov	r1, r3
 8007bbc:	481b      	ldr	r0, [pc, #108]	; (8007c2c <hci_user_evt_proc+0x90>)
 8007bbe:	f000 fdaa 	bl	8008716 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <hci_user_evt_proc+0x98>)
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00c      	beq.n	8007be4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007bd2:	4b18      	ldr	r3, [pc, #96]	; (8007c34 <hci_user_evt_proc+0x98>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	1d3a      	adds	r2, r7, #4
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007bdc:	793a      	ldrb	r2, [r7, #4]
 8007bde:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <hci_user_evt_proc+0x94>)
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e002      	b.n	8007bea <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007be4:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <hci_user_evt_proc+0x94>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007bea:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <hci_user_evt_proc+0x94>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 fc03 	bl	8008400 <TL_MM_EvtDone>
 8007bfa:	e004      	b.n	8007c06 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	480a      	ldr	r0, [pc, #40]	; (8007c2c <hci_user_evt_proc+0x90>)
 8007c02:	f000 fd1b 	bl	800863c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c06:	4809      	ldr	r0, [pc, #36]	; (8007c2c <hci_user_evt_proc+0x90>)
 8007c08:	f000 fcf6 	bl	80085f8 <LST_is_empty>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d107      	bne.n	8007c22 <hci_user_evt_proc+0x86>
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <hci_user_evt_proc+0x94>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007c1a:	4804      	ldr	r0, [pc, #16]	; (8007c2c <hci_user_evt_proc+0x90>)
 8007c1c:	f001 f830 	bl	8008c80 <hci_notify_asynch_evt>
  }


  return;
 8007c20:	bf00      	nop
 8007c22:	bf00      	nop
}
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20000938 	.word	0x20000938
 8007c30:	20000944 	.word	0x20000944
 8007c34:	20000b70 	.word	0x20000b70

08007c38 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007c44:	2000      	movs	r0, #0
 8007c46:	f000 f8cb 	bl	8007de0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	b21b      	sxth	r3, r3
 8007c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c58:	b21a      	sxth	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	029b      	lsls	r3, r3, #10
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	4313      	orrs	r3, r2
 8007c64:	b21b      	sxth	r3, r3
 8007c66:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	b2d9      	uxtb	r1, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	8bbb      	ldrh	r3, [r7, #28]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f88d 	bl	8007d94 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007c7a:	e04e      	b.n	8007d1a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007c7c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007c80:	f001 f815 	bl	8008cae <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c84:	e043      	b.n	8007d0e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4828      	ldr	r0, [pc, #160]	; (8007d30 <hci_send_req+0xf8>)
 8007c8e:	f000 fd42 	bl	8008716 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	7a5b      	ldrb	r3, [r3, #9]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d114      	bne.n	8007cc4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	330b      	adds	r3, #11
 8007c9e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	885b      	ldrh	r3, [r3, #2]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	8bba      	ldrh	r2, [r7, #28]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d104      	bne.n	8007cb6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	785b      	ldrb	r3, [r3, #1]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d027      	beq.n	8007d0e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e024      	b.n	8007d0e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	330b      	adds	r3, #11
 8007cc8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	8bba      	ldrh	r2, [r7, #28]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d114      	bne.n	8007d02 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	7a9b      	ldrb	r3, [r3, #10]
 8007cdc:	3b03      	subs	r3, #3
 8007cde:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bfa8      	it	ge
 8007cea:	461a      	movge	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6918      	ldr	r0, [r3, #16]
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	1cd9      	adds	r1, r3, #3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f001 fde7 	bl	80098d0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007d0e:	4808      	ldr	r0, [pc, #32]	; (8007d30 <hci_send_req+0xf8>)
 8007d10:	f000 fc72 	bl	80085f8 <LST_is_empty>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0b5      	beq.n	8007c86 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007d1a:	7ffb      	ldrb	r3, [r7, #31]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ad      	beq.n	8007c7c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007d20:	2001      	movs	r0, #1
 8007d22:	f000 f85d 	bl	8007de0 <NotifyCmdStatus>

  return 0;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000b90 	.word	0x20000b90

08007d34 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007d3c:	480f      	ldr	r0, [pc, #60]	; (8007d7c <TlInit+0x48>)
 8007d3e:	f000 fc4b 	bl	80085d8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007d42:	4a0f      	ldr	r2, [pc, #60]	; (8007d80 <TlInit+0x4c>)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007d48:	480e      	ldr	r0, [pc, #56]	; (8007d84 <TlInit+0x50>)
 8007d4a:	f000 fc45 	bl	80085d8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <TlInit+0x54>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007d54:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <TlInit+0x58>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <TlInit+0x5c>)
 8007d62:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <TlInit+0x58>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f107 0208 	add.w	r2, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
  }

  return;
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
}
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000b90 	.word	0x20000b90
 8007d80:	20000940 	.word	0x20000940
 8007d84:	20000938 	.word	0x20000938
 8007d88:	20000944 	.word	0x20000944
 8007d8c:	20000b70 	.word	0x20000b70
 8007d90:	08007e21 	.word	0x08007e21

08007d94 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	603a      	str	r2, [r7, #0]
 8007d9e:	80fb      	strh	r3, [r7, #6]
 8007da0:	460b      	mov	r3, r1
 8007da2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007da4:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <SendCmd+0x44>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007dae:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <SendCmd+0x44>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	797a      	ldrb	r2, [r7, #5]
 8007db4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007db6:	4b08      	ldr	r3, [pc, #32]	; (8007dd8 <SendCmd+0x44>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	797a      	ldrb	r2, [r7, #5]
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f001 fd85 	bl	80098d0 <memcpy>

  hciContext.io.Send(0,0);
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <SendCmd+0x48>)
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	2000      	movs	r0, #0
 8007dce:	4798      	blx	r3

  return;
 8007dd0:	bf00      	nop
}
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000940 	.word	0x20000940
 8007ddc:	20000b70 	.word	0x20000b70

08007de0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d108      	bne.n	8007e02 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <NotifyCmdStatus+0x3c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00d      	beq.n	8007e14 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007df8:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <NotifyCmdStatus+0x3c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007e00:	e008      	b.n	8007e14 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007e02:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <NotifyCmdStatus+0x3c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007e0a:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <NotifyCmdStatus+0x3c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2001      	movs	r0, #1
 8007e10:	4798      	blx	r3
  return;
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
}
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000b98 	.word	0x20000b98

08007e20 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7a5b      	ldrb	r3, [r3, #9]
 8007e2c:	2b0f      	cmp	r3, #15
 8007e2e:	d003      	beq.n	8007e38 <TlEvtReceived+0x18>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7a5b      	ldrb	r3, [r3, #9]
 8007e34:	2b0e      	cmp	r3, #14
 8007e36:	d107      	bne.n	8007e48 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4809      	ldr	r0, [pc, #36]	; (8007e60 <TlEvtReceived+0x40>)
 8007e3c:	f000 fc24 	bl	8008688 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007e40:	2000      	movs	r0, #0
 8007e42:	f000 ff29 	bl	8008c98 <hci_cmd_resp_release>
 8007e46:	e006      	b.n	8007e56 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4806      	ldr	r0, [pc, #24]	; (8007e64 <TlEvtReceived+0x44>)
 8007e4c:	f000 fc1c 	bl	8008688 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007e50:	4804      	ldr	r0, [pc, #16]	; (8007e64 <TlEvtReceived+0x44>)
 8007e52:	f000 ff15 	bl	8008c80 <hci_notify_asynch_evt>
  }

  return;
 8007e56:	bf00      	nop
}
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000b90 	.word	0x20000b90
 8007e64:	20000938 	.word	0x20000938

08007e68 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a05      	ldr	r2, [pc, #20]	; (8007e88 <hci_register_io_bus+0x20>)
 8007e74:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <hci_register_io_bus+0x24>)
 8007e7a:	611a      	str	r2, [r3, #16]

  return;
 8007e7c:	bf00      	nop
}
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	08008179 	.word	0x08008179
 8007e8c:	080081e1 	.word	0x080081e1

08007e90 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	4a08      	ldr	r2, [pc, #32]	; (8007ec0 <shci_init+0x30>)
 8007ea0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007ea2:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <shci_init+0x34>)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007ea8:	4806      	ldr	r0, [pc, #24]	; (8007ec4 <shci_init+0x34>)
 8007eaa:	f000 f911 	bl	80080d0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f894 	bl	8007fe0 <TlInit>

  return;
 8007eb8:	bf00      	nop
}
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000bbc 	.word	0x20000bbc
 8007ec4:	20000b9c 	.word	0x20000b9c

08007ec8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007ece:	4822      	ldr	r0, [pc, #136]	; (8007f58 <shci_user_evt_proc+0x90>)
 8007ed0:	f000 fb92 	bl	80085f8 <LST_is_empty>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d12b      	bne.n	8007f32 <shci_user_evt_proc+0x6a>
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <shci_user_evt_proc+0x94>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d027      	beq.n	8007f32 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007ee2:	f107 030c 	add.w	r3, r7, #12
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	481b      	ldr	r0, [pc, #108]	; (8007f58 <shci_user_evt_proc+0x90>)
 8007eea:	f000 fc14 	bl	8008716 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007eee:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <shci_user_evt_proc+0x98>)
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00c      	beq.n	8007f10 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007efa:	2301      	movs	r3, #1
 8007efc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007efe:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <shci_user_evt_proc+0x98>)
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	1d3a      	adds	r2, r7, #4
 8007f04:	4610      	mov	r0, r2
 8007f06:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007f08:	793a      	ldrb	r2, [r7, #4]
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <shci_user_evt_proc+0x94>)
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	e002      	b.n	8007f16 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <shci_user_evt_proc+0x94>)
 8007f12:	2201      	movs	r2, #1
 8007f14:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007f16:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <shci_user_evt_proc+0x94>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d004      	beq.n	8007f28 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fa6d 	bl	8008400 <TL_MM_EvtDone>
 8007f26:	e004      	b.n	8007f32 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	480a      	ldr	r0, [pc, #40]	; (8007f58 <shci_user_evt_proc+0x90>)
 8007f2e:	f000 fb85 	bl	800863c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f32:	4809      	ldr	r0, [pc, #36]	; (8007f58 <shci_user_evt_proc+0x90>)
 8007f34:	f000 fb60 	bl	80085f8 <LST_is_empty>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d107      	bne.n	8007f4e <shci_user_evt_proc+0x86>
 8007f3e:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <shci_user_evt_proc+0x94>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007f46:	4804      	ldr	r0, [pc, #16]	; (8007f58 <shci_user_evt_proc+0x90>)
 8007f48:	f7f8 ff42 	bl	8000dd0 <shci_notify_asynch_evt>
  }


  return;
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
}
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000948 	.word	0x20000948
 8007f5c:	20000958 	.word	0x20000958
 8007f60:	20000b9c 	.word	0x20000b9c

08007f64 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60ba      	str	r2, [r7, #8]
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	4603      	mov	r3, r0
 8007f70:	81fb      	strh	r3, [r7, #14]
 8007f72:	460b      	mov	r3, r1
 8007f74:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007f76:	2000      	movs	r0, #0
 8007f78:	f000 f864 	bl	8008044 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007f7c:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <shci_send+0x74>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	89fa      	ldrh	r2, [r7, #14]
 8007f82:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007f86:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <shci_send+0x74>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	7b7a      	ldrb	r2, [r7, #13]
 8007f8c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <shci_send+0x74>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	7b7a      	ldrb	r2, [r7, #13]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 fc99 	bl	80098d0 <memcpy>

  shciContext.io.Send(0,0);
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	; (8007fdc <shci_send+0x78>)
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007fa8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007fac:	f7f8 ff27 	bl	8000dfe <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f103 0008 	add.w	r0, r3, #8
 8007fb6:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <shci_send+0x74>)
 8007fb8:	6819      	ldr	r1, [r3, #0]
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <shci_send+0x74>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	789b      	ldrb	r3, [r3, #2]
 8007fc0:	3303      	adds	r3, #3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f001 fc84 	bl	80098d0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007fc8:	2001      	movs	r0, #1
 8007fca:	f000 f83b 	bl	8008044 <Cmd_SetStatus>

  return;
 8007fce:	bf00      	nop
}
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000954 	.word	0x20000954
 8007fdc:	20000b9c 	.word	0x20000b9c

08007fe0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007fe8:	4a10      	ldr	r2, [pc, #64]	; (800802c <TlInit+0x4c>)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007fee:	4810      	ldr	r0, [pc, #64]	; (8008030 <TlInit+0x50>)
 8007ff0:	f000 faf2 	bl	80085d8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f000 f825 	bl	8008044 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007ffa:	4b0e      	ldr	r3, [pc, #56]	; (8008034 <TlInit+0x54>)
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008000:	4b0d      	ldr	r3, [pc, #52]	; (8008038 <TlInit+0x58>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00c      	beq.n	8008022 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800800c:	4b0b      	ldr	r3, [pc, #44]	; (800803c <TlInit+0x5c>)
 800800e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008010:	4b0b      	ldr	r3, [pc, #44]	; (8008040 <TlInit+0x60>)
 8008012:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008014:	4b08      	ldr	r3, [pc, #32]	; (8008038 <TlInit+0x58>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f107 020c 	add.w	r2, r7, #12
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
  }

  return;
 8008020:	bf00      	nop
 8008022:	bf00      	nop
}
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20000954 	.word	0x20000954
 8008030:	20000948 	.word	0x20000948
 8008034:	20000958 	.word	0x20000958
 8008038:	20000b9c 	.word	0x20000b9c
 800803c:	08008095 	.word	0x08008095
 8008040:	080080ad 	.word	0x080080ad

08008044 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008054:	4b0d      	ldr	r3, [pc, #52]	; (800808c <Cmd_SetStatus+0x48>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <Cmd_SetStatus+0x48>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2000      	movs	r0, #0
 8008062:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <Cmd_SetStatus+0x4c>)
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800806a:	e00b      	b.n	8008084 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800806c:	4b08      	ldr	r3, [pc, #32]	; (8008090 <Cmd_SetStatus+0x4c>)
 800806e:	2201      	movs	r2, #1
 8008070:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008072:	4b06      	ldr	r3, [pc, #24]	; (800808c <Cmd_SetStatus+0x48>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800807a:	4b04      	ldr	r3, [pc, #16]	; (800808c <Cmd_SetStatus+0x48>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2001      	movs	r0, #1
 8008080:	4798      	blx	r3
  return;
 8008082:	bf00      	nop
 8008084:	bf00      	nop
}
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000bbc 	.word	0x20000bbc
 8008090:	20000950 	.word	0x20000950

08008094 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800809c:	2000      	movs	r0, #0
 800809e:	f7f8 fea3 	bl	8000de8 <shci_cmd_resp_release>

  return;
 80080a2:	bf00      	nop
}
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4805      	ldr	r0, [pc, #20]	; (80080cc <TlUserEvtReceived+0x20>)
 80080b8:	f000 fae6 	bl	8008688 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80080bc:	4803      	ldr	r0, [pc, #12]	; (80080cc <TlUserEvtReceived+0x20>)
 80080be:	f7f8 fe87 	bl	8000dd0 <shci_notify_asynch_evt>

  return;
 80080c2:	bf00      	nop
}
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000948 	.word	0x20000948

080080d0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <shci_register_io_bus+0x20>)
 80080dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a04      	ldr	r2, [pc, #16]	; (80080f4 <shci_register_io_bus+0x24>)
 80080e2:	611a      	str	r2, [r3, #16]

  return;
 80080e4:	bf00      	nop
}
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	0800828d 	.word	0x0800828d
 80080f4:	080082e1 	.word	0x080082e1

080080f8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80080fc:	f001 f86c 	bl	80091d8 <HW_IPCC_Enable>

  return;
 8008100:	bf00      	nop
}
 8008102:	bd80      	pop	{r7, pc}

08008104 <TL_Init>:


void TL_Init( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008108:	4b10      	ldr	r3, [pc, #64]	; (800814c <TL_Init+0x48>)
 800810a:	4a11      	ldr	r2, [pc, #68]	; (8008150 <TL_Init+0x4c>)
 800810c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <TL_Init+0x48>)
 8008110:	4a10      	ldr	r2, [pc, #64]	; (8008154 <TL_Init+0x50>)
 8008112:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008114:	4b0d      	ldr	r3, [pc, #52]	; (800814c <TL_Init+0x48>)
 8008116:	4a10      	ldr	r2, [pc, #64]	; (8008158 <TL_Init+0x54>)
 8008118:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800811a:	4b0c      	ldr	r3, [pc, #48]	; (800814c <TL_Init+0x48>)
 800811c:	4a0f      	ldr	r2, [pc, #60]	; (800815c <TL_Init+0x58>)
 800811e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <TL_Init+0x48>)
 8008122:	4a0f      	ldr	r2, [pc, #60]	; (8008160 <TL_Init+0x5c>)
 8008124:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008126:	4b09      	ldr	r3, [pc, #36]	; (800814c <TL_Init+0x48>)
 8008128:	4a0e      	ldr	r2, [pc, #56]	; (8008164 <TL_Init+0x60>)
 800812a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800812c:	4b07      	ldr	r3, [pc, #28]	; (800814c <TL_Init+0x48>)
 800812e:	4a0e      	ldr	r2, [pc, #56]	; (8008168 <TL_Init+0x64>)
 8008130:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008132:	4b06      	ldr	r3, [pc, #24]	; (800814c <TL_Init+0x48>)
 8008134:	4a0d      	ldr	r2, [pc, #52]	; (800816c <TL_Init+0x68>)
 8008136:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <TL_Init+0x48>)
 800813a:	4a0d      	ldr	r2, [pc, #52]	; (8008170 <TL_Init+0x6c>)
 800813c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800813e:	4b03      	ldr	r3, [pc, #12]	; (800814c <TL_Init+0x48>)
 8008140:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <TL_Init+0x70>)
 8008142:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008144:	f001 f85c 	bl	8009200 <HW_IPCC_Init>

  return;
 8008148:	bf00      	nop
}
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20030000 	.word	0x20030000
 8008150:	20030028 	.word	0x20030028
 8008154:	20030048 	.word	0x20030048
 8008158:	20030058 	.word	0x20030058
 800815c:	20030068 	.word	0x20030068
 8008160:	20030070 	.word	0x20030070
 8008164:	20030078 	.word	0x20030078
 8008168:	20030080 	.word	0x20030080
 800816c:	2003009c 	.word	0x2003009c
 8008170:	200300a0 	.word	0x200300a0
 8008174:	200300ac 	.word	0x200300ac

08008178 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008184:	4811      	ldr	r0, [pc, #68]	; (80081cc <TL_BLE_Init+0x54>)
 8008186:	f000 fa27 	bl	80085d8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <TL_BLE_Init+0x58>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <TL_BLE_Init+0x5c>)
 80081a4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a08      	ldr	r2, [pc, #32]	; (80081cc <TL_BLE_Init+0x54>)
 80081aa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80081ac:	f001 f83e 	bl	800922c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a08      	ldr	r2, [pc, #32]	; (80081d8 <TL_BLE_Init+0x60>)
 80081b6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a07      	ldr	r2, [pc, #28]	; (80081dc <TL_BLE_Init+0x64>)
 80081be:	6013      	str	r3, [r2, #0]

  return 0;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200300c8 	.word	0x200300c8
 80081d0:	20030000 	.word	0x20030000
 80081d4:	20000900 	.word	0x20000900
 80081d8:	20000bc8 	.word	0x20000bc8
 80081dc:	20000bcc 	.word	0x20000bcc

080081e0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <TL_BLE_SendCmd+0x34>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2201      	movs	r2, #1
 80081f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <TL_BLE_SendCmd+0x34>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4619      	mov	r1, r3
 80081fe:	2001      	movs	r0, #1
 8008200:	f000 f96c 	bl	80084dc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008204:	f001 f81c 	bl	8009240 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20030000 	.word	0x20030000

08008218 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800821e:	e01c      	b.n	800825a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	4619      	mov	r1, r3
 8008224:	4812      	ldr	r0, [pc, #72]	; (8008270 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008226:	f000 fa76 	bl	8008716 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7a5b      	ldrb	r3, [r3, #9]
 800822e:	2b0f      	cmp	r3, #15
 8008230:	d003      	beq.n	800823a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7a5b      	ldrb	r3, [r3, #9]
 8008236:	2b0e      	cmp	r3, #14
 8008238:	d105      	bne.n	8008246 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4619      	mov	r1, r3
 800823e:	2002      	movs	r0, #2
 8008240:	f000 f94c 	bl	80084dc <OutputDbgTrace>
 8008244:	e004      	b.n	8008250 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4619      	mov	r1, r3
 800824a:	2003      	movs	r0, #3
 800824c:	f000 f946 	bl	80084dc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800825a:	4805      	ldr	r0, [pc, #20]	; (8008270 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800825c:	f000 f9cc 	bl	80085f8 <LST_is_empty>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0dc      	beq.n	8008220 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008266:	bf00      	nop
}
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200300c8 	.word	0x200300c8
 8008274:	20000bc8 	.word	0x20000bc8

08008278 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4798      	blx	r3

  return;
 8008282:	bf00      	nop
}
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000bcc 	.word	0x20000bcc

0800828c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008298:	480d      	ldr	r0, [pc, #52]	; (80082d0 <TL_SYS_Init+0x44>)
 800829a:	f000 f99d 	bl	80085d8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800829e:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <TL_SYS_Init+0x48>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4a08      	ldr	r2, [pc, #32]	; (80082d0 <TL_SYS_Init+0x44>)
 80082b0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80082b2:	f000 ffe7 	bl	8009284 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <TL_SYS_Init+0x4c>)
 80082bc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	4a06      	ldr	r2, [pc, #24]	; (80082dc <TL_SYS_Init+0x50>)
 80082c4:	6013      	str	r3, [r2, #0]

  return 0;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	200300d0 	.word	0x200300d0
 80082d4:	20030000 	.word	0x20030000
 80082d8:	20000bd0 	.word	0x20000bd0
 80082dc:	20000bd4 	.word	0x20000bd4

080082e0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <TL_SYS_SendCmd+0x34>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2210      	movs	r2, #16
 80082f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80082f6:	4b07      	ldr	r3, [pc, #28]	; (8008314 <TL_SYS_SendCmd+0x34>)
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4619      	mov	r1, r3
 80082fe:	2004      	movs	r0, #4
 8008300:	f000 f8ec 	bl	80084dc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008304:	f000 ffc8 	bl	8009298 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20030000 	.word	0x20030000

08008318 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4619      	mov	r1, r3
 8008324:	2005      	movs	r0, #5
 8008326:	f000 f8d9 	bl	80084dc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a03      	ldr	r2, [pc, #12]	; (800833c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008330:	68d2      	ldr	r2, [r2, #12]
 8008332:	6812      	ldr	r2, [r2, #0]
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3

  return;
 8008338:	bf00      	nop
}
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20030000 	.word	0x20030000
 8008340:	20000bd0 	.word	0x20000bd0

08008344 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800834a:	e00e      	b.n	800836a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800834c:	1d3b      	adds	r3, r7, #4
 800834e:	4619      	mov	r1, r3
 8008350:	480b      	ldr	r0, [pc, #44]	; (8008380 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008352:	f000 f9e0 	bl	8008716 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4619      	mov	r1, r3
 800835a:	2006      	movs	r0, #6
 800835c:	f000 f8be 	bl	80084dc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008360:	4b08      	ldr	r3, [pc, #32]	; (8008384 <HW_IPCC_SYS_EvtNot+0x40>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4610      	mov	r0, r2
 8008368:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <HW_IPCC_SYS_EvtNot+0x3c>)
 800836c:	f000 f944 	bl	80085f8 <LST_is_empty>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0ea      	beq.n	800834c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008376:	bf00      	nop
}
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200300d0 	.word	0x200300d0
 8008384:	20000bd4 	.word	0x20000bd4

08008388 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008390:	4817      	ldr	r0, [pc, #92]	; (80083f0 <TL_MM_Init+0x68>)
 8008392:	f000 f921 	bl	80085d8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008396:	4817      	ldr	r0, [pc, #92]	; (80083f4 <TL_MM_Init+0x6c>)
 8008398:	f000 f91e 	bl	80085d8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800839c:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <TL_MM_Init+0x70>)
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	4a16      	ldr	r2, [pc, #88]	; (80083fc <TL_MM_Init+0x74>)
 80083a2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80083a4:	4b15      	ldr	r3, [pc, #84]	; (80083fc <TL_MM_Init+0x74>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6892      	ldr	r2, [r2, #8]
 80083ac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <TL_MM_Init+0x74>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68d2      	ldr	r2, [r2, #12]
 80083b6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80083b8:	4b10      	ldr	r3, [pc, #64]	; (80083fc <TL_MM_Init+0x74>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a0c      	ldr	r2, [pc, #48]	; (80083f0 <TL_MM_Init+0x68>)
 80083be:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80083c0:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <TL_MM_Init+0x74>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6812      	ldr	r2, [r2, #0]
 80083c8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <TL_MM_Init+0x74>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6852      	ldr	r2, [r2, #4]
 80083d2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80083d4:	4b09      	ldr	r3, [pc, #36]	; (80083fc <TL_MM_Init+0x74>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6912      	ldr	r2, [r2, #16]
 80083dc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <TL_MM_Init+0x74>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6952      	ldr	r2, [r2, #20]
 80083e6:	619a      	str	r2, [r3, #24]

  return;
 80083e8:	bf00      	nop
}
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	200300b8 	.word	0x200300b8
 80083f4:	20000bc0 	.word	0x20000bc0
 80083f8:	20030000 	.word	0x20030000
 80083fc:	20000bd8 	.word	0x20000bd8

08008400 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	4807      	ldr	r0, [pc, #28]	; (8008428 <TL_MM_EvtDone+0x28>)
 800840c:	f000 f93c 	bl	8008688 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	2000      	movs	r0, #0
 8008414:	f000 f862 	bl	80084dc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008418:	4804      	ldr	r0, [pc, #16]	; (800842c <TL_MM_EvtDone+0x2c>)
 800841a:	f000 ff63 	bl	80092e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800841e:	bf00      	nop
}
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000bc0 	.word	0x20000bc0
 800842c:	08008431 	.word	0x08008431

08008430 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008436:	e00c      	b.n	8008452 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008438:	1d3b      	adds	r3, r7, #4
 800843a:	4619      	mov	r1, r3
 800843c:	480a      	ldr	r0, [pc, #40]	; (8008468 <SendFreeBuf+0x38>)
 800843e:	f000 f96a 	bl	8008716 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <SendFreeBuf+0x3c>)
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f91b 	bl	8008688 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008452:	4805      	ldr	r0, [pc, #20]	; (8008468 <SendFreeBuf+0x38>)
 8008454:	f000 f8d0 	bl	80085f8 <LST_is_empty>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0ec      	beq.n	8008438 <SendFreeBuf+0x8>
  }

  return;
 800845e:	bf00      	nop
}
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000bc0 	.word	0x20000bc0
 800846c:	20030000 	.word	0x20030000

08008470 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <TL_TRACES_Init+0x1c>)
 8008476:	f000 f8af 	bl	80085d8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <TL_TRACES_Init+0x20>)
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	4a03      	ldr	r2, [pc, #12]	; (800848c <TL_TRACES_Init+0x1c>)
 8008480:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008482:	f000 ff65 	bl	8009350 <HW_IPCC_TRACES_Init>

  return;
 8008486:	bf00      	nop
}
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200300c0 	.word	0x200300c0
 8008490:	20030000 	.word	0x20030000

08008494 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800849a:	e008      	b.n	80084ae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800849c:	1d3b      	adds	r3, r7, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4808      	ldr	r0, [pc, #32]	; (80084c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80084a2:	f000 f938 	bl	8008716 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f80d 	bl	80084c8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80084ae:	4805      	ldr	r0, [pc, #20]	; (80084c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80084b0:	f000 f8a2 	bl	80085f8 <LST_is_empty>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f0      	beq.n	800849c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80084ba:	bf00      	nop
}
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200300c0 	.word	0x200300c0

080084c8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	2b06      	cmp	r3, #6
 80084ec:	d845      	bhi.n	800857a <OutputDbgTrace+0x9e>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <OutputDbgTrace+0x18>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008535 	.word	0x08008535
 80084fc:	0800853b 	.word	0x0800853b
 8008500:	0800854f 	.word	0x0800854f
 8008504:	0800855b 	.word	0x0800855b
 8008508:	08008561 	.word	0x08008561
 800850c:	0800856f 	.word	0x0800856f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	7a5b      	ldrb	r3, [r3, #9]
 8008518:	2bff      	cmp	r3, #255	; 0xff
 800851a:	d005      	beq.n	8008528 <OutputDbgTrace+0x4c>
 800851c:	2bff      	cmp	r3, #255	; 0xff
 800851e:	dc05      	bgt.n	800852c <OutputDbgTrace+0x50>
 8008520:	2b0e      	cmp	r3, #14
 8008522:	d005      	beq.n	8008530 <OutputDbgTrace+0x54>
 8008524:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008526:	e001      	b.n	800852c <OutputDbgTrace+0x50>
          break;
 8008528:	bf00      	nop
 800852a:	e027      	b.n	800857c <OutputDbgTrace+0xa0>
          break;
 800852c:	bf00      	nop
 800852e:	e025      	b.n	800857c <OutputDbgTrace+0xa0>
          break;
 8008530:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008532:	e023      	b.n	800857c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008538:	e020      	b.n	800857c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	7a5b      	ldrb	r3, [r3, #9]
 8008542:	2b0e      	cmp	r3, #14
 8008544:	d001      	beq.n	800854a <OutputDbgTrace+0x6e>
 8008546:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008548:	e000      	b.n	800854c <OutputDbgTrace+0x70>
          break;
 800854a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800854c:	e016      	b.n	800857c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	7a5b      	ldrb	r3, [r3, #9]
 8008556:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008558:	e010      	b.n	800857c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800855e:	e00d      	b.n	800857c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	7a5b      	ldrb	r3, [r3, #9]
 8008568:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800856a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800856c:	e006      	b.n	800857c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	7a5b      	ldrb	r3, [r3, #9]
 8008576:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008578:	e000      	b.n	800857c <OutputDbgTrace+0xa0>

    default:
      break;
 800857a:	bf00      	nop
  }

  return;
 800857c:	bf00      	nop
}
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008592:	4b0f      	ldr	r3, [pc, #60]	; (80085d0 <OTP_Read+0x48>)
 8008594:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008596:	e002      	b.n	800859e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3b08      	subs	r3, #8
 800859c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3307      	adds	r3, #7
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	79fa      	ldrb	r2, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d003      	beq.n	80085b2 <OTP_Read+0x2a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4a09      	ldr	r2, [pc, #36]	; (80085d4 <OTP_Read+0x4c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d1f2      	bne.n	8008598 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3307      	adds	r3, #7
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	79fa      	ldrb	r2, [r7, #7]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d001      	beq.n	80085c2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80085c2:	68fb      	ldr	r3, [r7, #12]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	1fff73f8 	.word	0x1fff73f8
 80085d4:	1fff7000 	.word	0x1fff7000

080085d8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008600:	f3ef 8310 	mrs	r3, PRIMASK
 8008604:	60fb      	str	r3, [r7, #12]
  return(result);
 8008606:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008608:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800860a:	b672      	cpsid	i
}
 800860c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d102      	bne.n	800861e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
 800861c:	e001      	b.n	8008622 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	75fb      	strb	r3, [r7, #23]
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f383 8810 	msr	PRIMASK, r3
}
 800862c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008646:	f3ef 8310 	mrs	r3, PRIMASK
 800864a:	60fb      	str	r3, [r7, #12]
  return(result);
 800864c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800864e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008650:	b672      	cpsid	i
}
 8008652:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	605a      	str	r2, [r3, #4]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f383 8810 	msr	PRIMASK, r3
}
 800867a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800867c:	bf00      	nop
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008692:	f3ef 8310 	mrs	r3, PRIMASK
 8008696:	60fb      	str	r3, [r7, #12]
  return(result);
 8008698:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800869a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800869c:	b672      	cpsid	i
}
 800869e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f383 8810 	msr	PRIMASK, r3
}
 80086c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086c8:	bf00      	nop
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086dc:	f3ef 8310 	mrs	r3, PRIMASK
 80086e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086e6:	b672      	cpsid	i
}
 80086e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6852      	ldr	r2, [r2, #4]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f383 8810 	msr	PRIMASK, r3
}
 8008708:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800870a:	bf00      	nop
 800870c:	371c      	adds	r7, #28
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b086      	sub	sp, #24
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008720:	f3ef 8310 	mrs	r3, PRIMASK
 8008724:	60fb      	str	r3, [r7, #12]
  return(result);
 8008726:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800872a:	b672      	cpsid	i
}
 800872c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff ffca 	bl	80086d4 <LST_remove_node>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800874c:	bf00      	nop
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008758:	4b03      	ldr	r3, [pc, #12]	; (8008768 <LL_FLASH_GetUDN+0x14>)
 800875a:	681b      	ldr	r3, [r3, #0]
}
 800875c:	4618      	mov	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	1fff7580 	.word	0x1fff7580

0800876c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008770:	4b03      	ldr	r3, [pc, #12]	; (8008780 <LL_FLASH_GetDeviceID+0x14>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	b2db      	uxtb	r3, r3
}
 8008776:	4618      	mov	r0, r3
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	1fff7584 	.word	0x1fff7584

08008784 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <LL_FLASH_GetSTCompanyID+0x14>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	0a1b      	lsrs	r3, r3, #8
}
 800878e:	4618      	mov	r0, r3
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	1fff7584 	.word	0x1fff7584

0800879c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800879c:	b5b0      	push	{r4, r5, r7, lr}
 800879e:	b090      	sub	sp, #64	; 0x40
 80087a0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80087a2:	2392      	movs	r3, #146	; 0x92
 80087a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <APP_BLE_Init+0xa4>)
 80087aa:	1d3c      	adds	r4, r7, #4
 80087ac:	461d      	mov	r5, r3
 80087ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087be:	c403      	stmia	r4!, {r0, r1}
 80087c0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80087c2:	f000 f905 	bl	80089d0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80087c6:	2101      	movs	r1, #1
 80087c8:	2002      	movs	r0, #2
 80087ca:	f000 fde9 	bl	80093a0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80087ce:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <APP_BLE_Init+0xa8>)
 80087d0:	2100      	movs	r1, #0
 80087d2:	2002      	movs	r0, #2
 80087d4:	f000 ff10 	bl	80095f8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff f8d0 	bl	8007980 <SHCI_C2_BLE_Init>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80087e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80087ee:	f7f9 fb71 	bl	8001ed4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80087f2:	f000 f903 	bl	80089fc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80087f6:	f7ff f81d 	bl	8007834 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80087fa:	4b13      	ldr	r3, [pc, #76]	; (8008848 <APP_BLE_Init+0xac>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008802:	4b11      	ldr	r3, [pc, #68]	; (8008848 <APP_BLE_Init+0xac>)
 8008804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008808:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <APP_BLE_Init+0xb0>)
 800880c:	2100      	movs	r1, #0
 800880e:	2001      	movs	r0, #1
 8008810:	f000 fef2 	bl	80095f8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008814:	2006      	movs	r0, #6
 8008816:	f7fe fe80 	bl	800751a <aci_hal_set_radio_activity_mask>
 800881a:	4603      	mov	r3, r0
 800881c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008820:	f000 fa9b 	bl	8008d5a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008824:	4b08      	ldr	r3, [pc, #32]	; (8008848 <APP_BLE_Init+0xac>)
 8008826:	2200      	movs	r2, #0
 8008828:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <APP_BLE_Init+0xac>)
 800882c:	2200      	movs	r2, #0
 800882e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008830:	2001      	movs	r0, #1
 8008832:	f000 f997 	bl	8008b64 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008836:	bf00      	nop
}
 8008838:	3740      	adds	r7, #64	; 0x40
 800883a:	46bd      	mov	sp, r7
 800883c:	bdb0      	pop	{r4, r5, r7, pc}
 800883e:	bf00      	nop
 8008840:	0800a93c 	.word	0x0800a93c
 8008844:	08007b9d 	.word	0x08007b9d
 8008848:	20000be4 	.word	0x20000be4
 800884c:	08008c4d 	.word	0x08008c4d

08008850 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008858:	2392      	movs	r3, #146	; 0x92
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3301      	adds	r3, #1
 8008862:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2bff      	cmp	r3, #255	; 0xff
 800886a:	d053      	beq.n	8008914 <SVCCTL_App_Notification+0xc4>
 800886c:	2bff      	cmp	r3, #255	; 0xff
 800886e:	f300 80a1 	bgt.w	80089b4 <SVCCTL_App_Notification+0x164>
 8008872:	2b05      	cmp	r3, #5
 8008874:	d002      	beq.n	800887c <SVCCTL_App_Notification+0x2c>
 8008876:	2b3e      	cmp	r3, #62	; 0x3e
 8008878:	d020      	beq.n	80088bc <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800887a:	e09b      	b.n	80089b4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	3302      	adds	r3, #2
 8008880:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008888:	b29a      	uxth	r2, r3
 800888a:	4b4e      	ldr	r3, [pc, #312]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 800888c:	8adb      	ldrh	r3, [r3, #22]
 800888e:	429a      	cmp	r2, r3
 8008890:	d106      	bne.n	80088a0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008892:	4b4c      	ldr	r3, [pc, #304]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 8008894:	2200      	movs	r2, #0
 8008896:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008898:	4b4a      	ldr	r3, [pc, #296]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80088a0:	2001      	movs	r0, #1
 80088a2:	f000 f95f 	bl	8008b64 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80088a6:	4b48      	ldr	r3, [pc, #288]	; (80089c8 <SVCCTL_App_Notification+0x178>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80088ac:	4b45      	ldr	r3, [pc, #276]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 80088ae:	8ada      	ldrh	r2, [r3, #22]
 80088b0:	4b45      	ldr	r3, [pc, #276]	; (80089c8 <SVCCTL_App_Notification+0x178>)
 80088b2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80088b4:	4844      	ldr	r0, [pc, #272]	; (80089c8 <SVCCTL_App_Notification+0x178>)
 80088b6:	f000 fa3c 	bl	8008d32 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80088ba:	e07e      	b.n	80089ba <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	3302      	adds	r3, #2
 80088c0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d001      	beq.n	80088ce <SVCCTL_App_Notification+0x7e>
 80088ca:	2b03      	cmp	r3, #3
          break;
 80088cc:	e021      	b.n	8008912 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3301      	adds	r3, #1
 80088d2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80088d4:	4b3b      	ldr	r3, [pc, #236]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 80088d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d104      	bne.n	80088e8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80088de:	4b39      	ldr	r3, [pc, #228]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 80088e0:	2206      	movs	r2, #6
 80088e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80088e6:	e003      	b.n	80088f0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80088e8:	4b36      	ldr	r3, [pc, #216]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 80088ea:	2205      	movs	r2, #5
 80088ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	4b32      	ldr	r3, [pc, #200]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 80088fa:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80088fc:	4b32      	ldr	r3, [pc, #200]	; (80089c8 <SVCCTL_App_Notification+0x178>)
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008902:	4b30      	ldr	r3, [pc, #192]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 8008904:	8ada      	ldrh	r2, [r3, #22]
 8008906:	4b30      	ldr	r3, [pc, #192]	; (80089c8 <SVCCTL_App_Notification+0x178>)
 8008908:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800890a:	482f      	ldr	r0, [pc, #188]	; (80089c8 <SVCCTL_App_Notification+0x178>)
 800890c:	f000 fa11 	bl	8008d32 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008910:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008912:	e052      	b.n	80089ba <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	3302      	adds	r3, #2
 8008918:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008924:	d040      	beq.n	80089a8 <SVCCTL_App_Notification+0x158>
 8008926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892a:	dc45      	bgt.n	80089b8 <SVCCTL_App_Notification+0x168>
 800892c:	2b04      	cmp	r3, #4
 800892e:	d03d      	beq.n	80089ac <SVCCTL_App_Notification+0x15c>
 8008930:	2b04      	cmp	r3, #4
 8008932:	db41      	blt.n	80089b8 <SVCCTL_App_Notification+0x168>
 8008934:	f240 420a 	movw	r2, #1034	; 0x40a
 8008938:	4293      	cmp	r3, r2
 800893a:	dc3d      	bgt.n	80089b8 <SVCCTL_App_Notification+0x168>
 800893c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008940:	dd3a      	ble.n	80089b8 <SVCCTL_App_Notification+0x168>
 8008942:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008946:	2b09      	cmp	r3, #9
 8008948:	d836      	bhi.n	80089b8 <SVCCTL_App_Notification+0x168>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <SVCCTL_App_Notification+0x100>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	080089a1 	.word	0x080089a1
 8008954:	08008979 	.word	0x08008979
 8008958:	080089b9 	.word	0x080089b9
 800895c:	080089b9 	.word	0x080089b9
 8008960:	080089b9 	.word	0x080089b9
 8008964:	080089b9 	.word	0x080089b9
 8008968:	080089b1 	.word	0x080089b1
 800896c:	080089b9 	.word	0x080089b9
 8008970:	0800898d 	.word	0x0800898d
 8008974:	080089b1 	.word	0x080089b1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 800897a:	8adb      	ldrh	r3, [r3, #22]
 800897c:	4913      	ldr	r1, [pc, #76]	; (80089cc <SVCCTL_App_Notification+0x17c>)
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe f822 	bl	80069c8 <aci_gap_pass_key_resp>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800898a:	e012      	b.n	80089b2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800898c:	4b0d      	ldr	r3, [pc, #52]	; (80089c4 <SVCCTL_App_Notification+0x174>)
 800898e:	8adb      	ldrh	r3, [r3, #22]
 8008990:	2101      	movs	r1, #1
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe f9c2 	bl	8006d1c <aci_gap_numeric_comparison_value_confirm_yesno>
 8008998:	4603      	mov	r3, r0
 800899a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800899e:	e008      	b.n	80089b2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	3302      	adds	r3, #2
 80089a4:	61bb      	str	r3, [r7, #24]
          break;
 80089a6:	e004      	b.n	80089b2 <SVCCTL_App_Notification+0x162>
          break;
 80089a8:	bf00      	nop
 80089aa:	e005      	b.n	80089b8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80089ac:	bf00      	nop
 80089ae:	e003      	b.n	80089b8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80089b0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80089b2:	e001      	b.n	80089b8 <SVCCTL_App_Notification+0x168>
      break;
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80089b8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80089ba:	2301      	movs	r3, #1
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3728      	adds	r7, #40	; 0x28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000be4 	.word	0x20000be4
 80089c8:	20000c68 	.word	0x20000c68
 80089cc:	0001b207 	.word	0x0001b207

080089d0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80089d6:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <Ble_Tl_Init+0x20>)
 80089d8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80089da:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <Ble_Tl_Init+0x24>)
 80089dc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80089de:	463b      	mov	r3, r7
 80089e0:	4619      	mov	r1, r3
 80089e2:	4805      	ldr	r0, [pc, #20]	; (80089f8 <Ble_Tl_Init+0x28>)
 80089e4:	f7ff f8be 	bl	8007b64 <hci_init>

  return;
 80089e8:	bf00      	nop
}
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	200300d8 	.word	0x200300d8
 80089f4:	08008cfd 	.word	0x08008cfd
 80089f8:	08008cc5 	.word	0x08008cc5

080089fc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80089fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fe:	b08d      	sub	sp, #52	; 0x34
 8008a00:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008a02:	2300      	movs	r3, #0
 8008a04:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008a06:	2392      	movs	r3, #146	; 0x92
 8008a08:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008a0a:	f7fe fdda 	bl	80075c2 <hci_reset>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008a12:	f000 f8d7 	bl	8008bc4 <BleGetBdAddress>
 8008a16:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	2106      	movs	r1, #6
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7fe fc90 	bl	8007342 <aci_hal_write_config_data>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008a26:	4a4a      	ldr	r2, [pc, #296]	; (8008b50 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008a28:	2110      	movs	r1, #16
 8008a2a:	2018      	movs	r0, #24
 8008a2c:	f7fe fc89 	bl	8007342 <aci_hal_write_config_data>
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008a34:	4a47      	ldr	r2, [pc, #284]	; (8008b54 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008a36:	2110      	movs	r1, #16
 8008a38:	2008      	movs	r0, #8
 8008a3a:	f7fe fc82 	bl	8007342 <aci_hal_write_config_data>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008a42:	2118      	movs	r1, #24
 8008a44:	2001      	movs	r0, #1
 8008a46:	f7fe fd01 	bl	800744c <aci_hal_set_tx_power_level>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008a4e:	f7fe f9cc 	bl	8006dea <aci_gatt_init>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01f      	beq.n	8008aa8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008a68:	4b3b      	ldr	r3, [pc, #236]	; (8008b58 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008a6a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008a6c:	1dba      	adds	r2, r7, #6
 8008a6e:	7bf8      	ldrb	r0, [r7, #15]
 8008a70:	1cbb      	adds	r3, r7, #2
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	1d3b      	adds	r3, r7, #4
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f7fe f80a 	bl	8006a96 <aci_gap_init>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008a86:	88fc      	ldrh	r4, [r7, #6]
 8008a88:	88bd      	ldrh	r5, [r7, #4]
 8008a8a:	68b8      	ldr	r0, [r7, #8]
 8008a8c:	f7f7 fb78 	bl	8000180 <strlen>
 8008a90:	4603      	mov	r3, r0
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7fe fba6 	bl	80071f0 <aci_gatt_update_char_value>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008aa8:	88f8      	ldrh	r0, [r7, #6]
 8008aaa:	8879      	ldrh	r1, [r7, #2]
 8008aac:	463b      	mov	r3, r7
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f7fe fb9c 	bl	80071f0 <aci_gatt_update_char_value>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008abc:	2202      	movs	r2, #2
 8008abe:	2102      	movs	r1, #2
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f7fe fda2 	bl	800760a <hci_le_set_default_phy>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008aca:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008ad0:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fd fe5f 	bl	8006798 <aci_gap_set_io_capability>
 8008ada:	4603      	mov	r3, r0
 8008adc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008ade:	4b1f      	ldr	r3, [pc, #124]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008ae4:	4b1d      	ldr	r3, [pc, #116]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008aea:	4b1c      	ldr	r3, [pc, #112]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008aec:	2210      	movs	r2, #16
 8008aee:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008af0:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008af6:	4b19      	ldr	r3, [pc, #100]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008af8:	4a19      	ldr	r2, [pc, #100]	; (8008b60 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008afa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008afc:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008b02:	4b16      	ldr	r3, [pc, #88]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b04:	789c      	ldrb	r4, [r3, #2]
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b08:	785d      	ldrb	r5, [r3, #1]
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	4a13      	ldr	r2, [pc, #76]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b10:	7952      	ldrb	r2, [r2, #5]
 8008b12:	4912      	ldr	r1, [pc, #72]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b14:	78c9      	ldrb	r1, [r1, #3]
 8008b16:	4811      	ldr	r0, [pc, #68]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b18:	6880      	ldr	r0, [r0, #8]
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	9604      	str	r6, [sp, #16]
 8008b1e:	9003      	str	r0, [sp, #12]
 8008b20:	9102      	str	r1, [sp, #8]
 8008b22:	9201      	str	r2, [sp, #4]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	2201      	movs	r2, #1
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7fd fe87 	bl	8006840 <aci_gap_set_authentication_requirement>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008b36:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b38:	789b      	ldrb	r3, [r3, #2]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008b3e:	f7fe f8c9 	bl	8006cd4 <aci_gap_configure_whitelist>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	0800ab84 	.word	0x0800ab84
 8008b54:	0800ab94 	.word	0x0800ab94
 8008b58:	0800a978 	.word	0x0800a978
 8008b5c:	20000be4 	.word	0x20000be4
 8008b60:	0001b207 	.word	0x0001b207

08008b64 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af08      	add	r7, sp, #32
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008b6e:	2392      	movs	r3, #146	; 0x92
 8008b70:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008b72:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <Adv_Request+0x58>)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9306      	str	r3, [sp, #24]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	2300      	movs	r3, #0
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	9302      	str	r3, [sp, #8]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	2300      	movs	r3, #0
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	2300      	movs	r3, #0
 8008b98:	22a0      	movs	r2, #160	; 0xa0
 8008b9a:	2180      	movs	r1, #128	; 0x80
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f7fd fd01 	bl	80065a4 <aci_gap_set_discoverable>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008ba6:	4906      	ldr	r1, [pc, #24]	; (8008bc0 <Adv_Request+0x5c>)
 8008ba8:	2009      	movs	r0, #9
 8008baa:	f7fe f821 	bl	8006bf0 <aci_gap_update_adv_data>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8008bb2:	bf00      	nop
}
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000be4 	.word	0x20000be4
 8008bc0:	20000014 	.word	0x20000014

08008bc4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008bca:	f7ff fdc3 	bl	8008754 <LL_FLASH_GetUDN>
 8008bce:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd6:	d023      	beq.n	8008c20 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008bd8:	f7ff fdd4 	bl	8008784 <LL_FLASH_GetSTCompanyID>
 8008bdc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008bde:	f7ff fdc5 	bl	800876c <LL_FLASH_GetDeviceID>
 8008be2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <BleGetBdAddress+0x80>)
 8008bea:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <BleGetBdAddress+0x80>)
 8008bf4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	4b12      	ldr	r3, [pc, #72]	; (8008c44 <BleGetBdAddress+0x80>)
 8008bfc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <BleGetBdAddress+0x80>)
 8008c04:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <BleGetBdAddress+0x80>)
 8008c0e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	0c1b      	lsrs	r3, r3, #16
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <BleGetBdAddress+0x80>)
 8008c18:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008c1a:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <BleGetBdAddress+0x80>)
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e00b      	b.n	8008c38 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008c20:	2000      	movs	r0, #0
 8008c22:	f7ff fcb1 	bl	8008588 <OTP_Read>
 8008c26:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	e001      	b.n	8008c38 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008c34:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <BleGetBdAddress+0x84>)
 8008c36:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000bdc 	.word	0x20000bdc
 8008c48:	0800ab7c 	.word	0x0800ab7c

08008c4c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <Adv_Cancel+0x30>)
 8008c54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	d00a      	beq.n	8008c72 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c5c:	2392      	movs	r3, #146	; 0x92
 8008c5e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008c60:	f7fd fc7c 	bl	800655c <aci_gap_set_non_discoverable>
 8008c64:	4603      	mov	r3, r0
 8008c66:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008c68:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <Adv_Cancel+0x30>)
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
}
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000be4 	.word	0x20000be4

08008c80 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2002      	movs	r0, #2
 8008c8c:	f000 fcd6 	bl	800963c <UTIL_SEQ_SetTask>

  return;
 8008c90:	bf00      	nop
}
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	f000 fd37 	bl	8009714 <UTIL_SEQ_SetEvt>

  return;
 8008ca6:	bf00      	nop
}
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	f000 fd4c 	bl	8009754 <UTIL_SEQ_WaitEvt>

  return;
 8008cbc:	bf00      	nop
}
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fdfe 	bl	80078d8 <SVCCTL_UserEvtRx>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008cec:	e003      	b.n	8008cf6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
  return;
 8008cf4:	bf00      	nop
}
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <BLE_StatusNot+0x16>
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d006      	beq.n	8008d1e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008d10:	e00b      	b.n	8008d2a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d12:	2303      	movs	r3, #3
 8008d14:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fcbc 	bl	8009694 <UTIL_SEQ_PauseTask>
      break;
 8008d1c:	e005      	b.n	8008d2a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fcd6 	bl	80096d4 <UTIL_SEQ_ResumeTask>
      break;
 8008d28:	bf00      	nop
  }

  return;
 8008d2a:	bf00      	nop
}
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <Custom_APP_Notification+0x16>
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d002      	beq.n	8008d4c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008d46:	e002      	b.n	8008d4e <Custom_APP_Notification+0x1c>
      break;
 8008d48:	bf00      	nop
 8008d4a:	e000      	b.n	8008d4e <Custom_APP_Notification+0x1c>
      break;
 8008d4c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008d4e:	bf00      	nop
}
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008d5e:	bf00      	nop
}
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b08b      	sub	sp, #44	; 0x2c
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2bff      	cmp	r3, #255	; 0xff
 8008d82:	d12b      	bne.n	8008ddc <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	3302      	adds	r3, #2
 8008d88:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	f640 4214 	movw	r2, #3092	; 0xc14
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d01b      	beq.n	8008dd0 <Custom_STM_Event_Handler+0x68>
 8008d98:	f640 4214 	movw	r2, #3092	; 0xc14
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	dc19      	bgt.n	8008dd4 <Custom_STM_Event_Handler+0x6c>
 8008da0:	f640 4201 	movw	r2, #3073	; 0xc01
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <Custom_STM_Event_Handler+0x48>
 8008da8:	f640 4213 	movw	r2, #3091	; 0xc13
 8008dac:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008dae:	e014      	b.n	8008dda <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	3302      	adds	r3, #2
 8008db4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <Custom_STM_Event_Handler+0x88>)
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d107      	bne.n	8008dd8 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008dce:	e003      	b.n	8008dd8 <Custom_STM_Event_Handler+0x70>
          break;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <Custom_STM_Event_Handler+0x76>
          break;
 8008dd8:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008dda:	e000      	b.n	8008dde <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008ddc:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8008de2:	4618      	mov	r0, r3
 8008de4:	372c      	adds	r7, #44	; 0x2c
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000c6c 	.word	0x20000c6c

08008df4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008dfa:	2392      	movs	r3, #146	; 0x92
 8008dfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008dfe:	4834      	ldr	r0, [pc, #208]	; (8008ed0 <SVCCTL_InitCustomSvc+0xdc>)
 8008e00:	f7fe fd50 	bl	80078a4 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8008e04:	238f      	movs	r3, #143	; 0x8f
 8008e06:	713b      	strb	r3, [r7, #4]
 8008e08:	23e5      	movs	r3, #229	; 0xe5
 8008e0a:	717b      	strb	r3, [r7, #5]
 8008e0c:	23b3      	movs	r3, #179	; 0xb3
 8008e0e:	71bb      	strb	r3, [r7, #6]
 8008e10:	23d5      	movs	r3, #213	; 0xd5
 8008e12:	71fb      	strb	r3, [r7, #7]
 8008e14:	232e      	movs	r3, #46	; 0x2e
 8008e16:	723b      	strb	r3, [r7, #8]
 8008e18:	237f      	movs	r3, #127	; 0x7f
 8008e1a:	727b      	strb	r3, [r7, #9]
 8008e1c:	234a      	movs	r3, #74	; 0x4a
 8008e1e:	72bb      	strb	r3, [r7, #10]
 8008e20:	2398      	movs	r3, #152	; 0x98
 8008e22:	72fb      	strb	r3, [r7, #11]
 8008e24:	232a      	movs	r3, #42	; 0x2a
 8008e26:	733b      	strb	r3, [r7, #12]
 8008e28:	2348      	movs	r3, #72	; 0x48
 8008e2a:	737b      	strb	r3, [r7, #13]
 8008e2c:	237a      	movs	r3, #122	; 0x7a
 8008e2e:	73bb      	strb	r3, [r7, #14]
 8008e30:	23cc      	movs	r3, #204	; 0xcc
 8008e32:	73fb      	strb	r3, [r7, #15]
 8008e34:	2300      	movs	r3, #0
 8008e36:	743b      	strb	r3, [r7, #16]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	747b      	strb	r3, [r7, #17]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	74bb      	strb	r3, [r7, #18]
 8008e40:	2300      	movs	r3, #0
 8008e42:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008e44:	1d39      	adds	r1, r7, #4
 8008e46:	4b23      	ldr	r3, [pc, #140]	; (8008ed4 <SVCCTL_InitCustomSvc+0xe0>)
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	2002      	movs	r0, #2
 8008e50:	f7fd fff0 	bl	8006e34 <aci_gatt_add_service>
 8008e54:	4603      	mov	r3, r0
 8008e56:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008e58:	2319      	movs	r3, #25
 8008e5a:	713b      	strb	r3, [r7, #4]
 8008e5c:	23ed      	movs	r3, #237	; 0xed
 8008e5e:	717b      	strb	r3, [r7, #5]
 8008e60:	2382      	movs	r3, #130	; 0x82
 8008e62:	71bb      	strb	r3, [r7, #6]
 8008e64:	23ae      	movs	r3, #174	; 0xae
 8008e66:	71fb      	strb	r3, [r7, #7]
 8008e68:	23ed      	movs	r3, #237	; 0xed
 8008e6a:	723b      	strb	r3, [r7, #8]
 8008e6c:	2321      	movs	r3, #33	; 0x21
 8008e6e:	727b      	strb	r3, [r7, #9]
 8008e70:	234c      	movs	r3, #76	; 0x4c
 8008e72:	72bb      	strb	r3, [r7, #10]
 8008e74:	239d      	movs	r3, #157	; 0x9d
 8008e76:	72fb      	strb	r3, [r7, #11]
 8008e78:	2341      	movs	r3, #65	; 0x41
 8008e7a:	733b      	strb	r3, [r7, #12]
 8008e7c:	2345      	movs	r3, #69	; 0x45
 8008e7e:	737b      	strb	r3, [r7, #13]
 8008e80:	2322      	movs	r3, #34	; 0x22
 8008e82:	73bb      	strb	r3, [r7, #14]
 8008e84:	238e      	movs	r3, #142	; 0x8e
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	743b      	strb	r3, [r7, #16]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	747b      	strb	r3, [r7, #17]
 8008e90:	2300      	movs	r3, #0
 8008e92:	74bb      	strb	r3, [r7, #18]
 8008e94:	2300      	movs	r3, #0
 8008e96:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008e98:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <SVCCTL_InitCustomSvc+0xe0>)
 8008e9a:	8818      	ldrh	r0, [r3, #0]
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <SVCCTL_InitCustomSvc+0xe4>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	1d3a      	adds	r2, r7, #4
 8008ea4:	490d      	ldr	r1, [pc, #52]	; (8008edc <SVCCTL_InitCustomSvc+0xe8>)
 8008ea6:	9105      	str	r1, [sp, #20]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	9104      	str	r1, [sp, #16]
 8008eac:	2110      	movs	r1, #16
 8008eae:	9103      	str	r1, [sp, #12]
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	9102      	str	r1, [sp, #8]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	9101      	str	r1, [sp, #4]
 8008eb8:	2108      	movs	r1, #8
 8008eba:	9100      	str	r1, [sp, #0]
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	f7fe f88f 	bl	8006fe0 <aci_gatt_add_char>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008ec6:	bf00      	nop
}
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	08008d69 	.word	0x08008d69
 8008ed4:	20000c6c 	.word	0x20000c6c
 8008ed8:	2000001d 	.word	0x2000001d
 8008edc:	20000c6e 	.word	0x20000c6e

08008ee0 <LL_PWR_EnableBootC2>:
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008ee4:	4b05      	ldr	r3, [pc, #20]	; (8008efc <LL_PWR_EnableBootC2+0x1c>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4a04      	ldr	r2, [pc, #16]	; (8008efc <LL_PWR_EnableBootC2+0x1c>)
 8008eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eee:	60d3      	str	r3, [r2, #12]
}
 8008ef0:	bf00      	nop
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	58000400 	.word	0x58000400

08008f00 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008f0a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008f0e:	4905      	ldr	r1, [pc, #20]	; (8008f24 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	58000800 	.word	0x58000800

08008f28 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	4904      	ldr	r1, [pc, #16]	; (8008f48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	620b      	str	r3, [r1, #32]
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	58000800 	.word	0x58000800

08008f4c <LL_AHB3_GRP1_EnableClock>:
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008f70:	68fb      	ldr	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f9e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <LL_C1_IPCC_EnableIT_TXF>:
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	601a      	str	r2, [r3, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <LL_C1_IPCC_EnableIT_RXO>:
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f043 0201 	orr.w	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	041b      	lsls	r3, r3, #16
 8009008:	43db      	mvns	r3, r3
 800900a:	401a      	ands	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	041b      	lsls	r3, r3, #16
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	605a      	str	r2, [r3, #4]
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	43db      	mvns	r3, r3
 8009052:	401a      	ands	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	605a      	str	r2, [r3, #4]
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	609a      	str	r2, [r3, #8]
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	041a      	lsls	r2, r3, #16
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	609a      	str	r2, [r3, #8]
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	4013      	ands	r3, r2
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d101      	bne.n	80090ba <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69da      	ldr	r2, [r3, #28]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	4013      	ands	r3, r2
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d101      	bne.n	80090e4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80090f8:	2102      	movs	r1, #2
 80090fa:	4819      	ldr	r0, [pc, #100]	; (8009160 <HW_IPCC_Rx_Handler+0x6c>)
 80090fc:	f7ff ffe4 	bl	80090c8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d009      	beq.n	800911a <HW_IPCC_Rx_Handler+0x26>
 8009106:	4b16      	ldr	r3, [pc, #88]	; (8009160 <HW_IPCC_Rx_Handler+0x6c>)
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	43db      	mvns	r3, r3
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009114:	f000 f8da 	bl	80092cc <HW_IPCC_SYS_EvtHandler>
 8009118:	e01f      	b.n	800915a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800911a:	2101      	movs	r1, #1
 800911c:	4810      	ldr	r0, [pc, #64]	; (8009160 <HW_IPCC_Rx_Handler+0x6c>)
 800911e:	f7ff ffd3 	bl	80090c8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d008      	beq.n	800913a <HW_IPCC_Rx_Handler+0x46>
 8009128:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <HW_IPCC_Rx_Handler+0x6c>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d102      	bne.n	800913a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8009134:	f000 f88e 	bl	8009254 <HW_IPCC_BLE_EvtHandler>
 8009138:	e00f      	b.n	800915a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800913a:	2108      	movs	r1, #8
 800913c:	4808      	ldr	r0, [pc, #32]	; (8009160 <HW_IPCC_Rx_Handler+0x6c>)
 800913e:	f7ff ffc3 	bl	80090c8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d009      	beq.n	800915c <HW_IPCC_Rx_Handler+0x68>
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <HW_IPCC_Rx_Handler+0x6c>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	43db      	mvns	r3, r3
 800914e:	f003 0308 	and.w	r3, r3, #8
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009156:	f000 f905 	bl	8009364 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800915a:	bf00      	nop
 800915c:	bf00      	nop
}
 800915e:	bd80      	pop	{r7, pc}
 8009160:	58000c00 	.word	0x58000c00

08009164 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009168:	2102      	movs	r1, #2
 800916a:	481a      	ldr	r0, [pc, #104]	; (80091d4 <HW_IPCC_Tx_Handler+0x70>)
 800916c:	f7ff ff97 	bl	800909e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <HW_IPCC_Tx_Handler+0x26>
 8009176:	4b17      	ldr	r3, [pc, #92]	; (80091d4 <HW_IPCC_Tx_Handler+0x70>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	43db      	mvns	r3, r3
 800917c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009184:	f000 f896 	bl	80092b4 <HW_IPCC_SYS_CmdEvtHandler>
 8009188:	e020      	b.n	80091cc <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800918a:	2108      	movs	r1, #8
 800918c:	4811      	ldr	r0, [pc, #68]	; (80091d4 <HW_IPCC_Tx_Handler+0x70>)
 800918e:	f7ff ff86 	bl	800909e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <HW_IPCC_Tx_Handler+0x48>
 8009198:	4b0e      	ldr	r3, [pc, #56]	; (80091d4 <HW_IPCC_Tx_Handler+0x70>)
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	43db      	mvns	r3, r3
 800919e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80091a6:	f000 f8bf 	bl	8009328 <HW_IPCC_MM_FreeBufHandler>
 80091aa:	e00f      	b.n	80091cc <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80091ac:	2120      	movs	r1, #32
 80091ae:	4809      	ldr	r0, [pc, #36]	; (80091d4 <HW_IPCC_Tx_Handler+0x70>)
 80091b0:	f7ff ff75 	bl	800909e <LL_C1_IPCC_IsActiveFlag_CHx>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <HW_IPCC_Tx_Handler+0x6a>
 80091ba:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <HW_IPCC_Tx_Handler+0x70>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	43db      	mvns	r3, r3
 80091c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80091c8:	f000 f850 	bl	800926c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
}
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	58000c00 	.word	0x58000c00

080091d8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80091dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80091e0:	f7ff fecd 	bl	8008f7e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80091e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091e8:	f7ff fe9e 	bl	8008f28 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80091ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80091f0:	f7ff fe86 	bl	8008f00 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80091f4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80091f6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80091f8:	f7ff fe72 	bl	8008ee0 <LL_PWR_EnableBootC2>

  return;
 80091fc:	bf00      	nop
}
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009204:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009208:	f7ff fea0 	bl	8008f4c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800920c:	4806      	ldr	r0, [pc, #24]	; (8009228 <HW_IPCC_Init+0x28>)
 800920e:	f7ff fee2 	bl	8008fd6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009212:	4805      	ldr	r0, [pc, #20]	; (8009228 <HW_IPCC_Init+0x28>)
 8009214:	f7ff fecf 	bl	8008fb6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009218:	202c      	movs	r0, #44	; 0x2c
 800921a:	f7f9 fb36 	bl	800288a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800921e:	202d      	movs	r0, #45	; 0x2d
 8009220:	f7f9 fb33 	bl	800288a <HAL_NVIC_EnableIRQ>

  return;
 8009224:	bf00      	nop
}
 8009226:	bd80      	pop	{r7, pc}
 8009228:	58000c00 	.word	0x58000c00

0800922c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009230:	2101      	movs	r1, #1
 8009232:	4802      	ldr	r0, [pc, #8]	; (800923c <HW_IPCC_BLE_Init+0x10>)
 8009234:	f7ff ff04 	bl	8009040 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009238:	bf00      	nop
}
 800923a:	bd80      	pop	{r7, pc}
 800923c:	58000c00 	.word	0x58000c00

08009240 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009244:	2101      	movs	r1, #1
 8009246:	4802      	ldr	r0, [pc, #8]	; (8009250 <HW_IPCC_BLE_SendCmd+0x10>)
 8009248:	f7ff ff1a 	bl	8009080 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800924c:	bf00      	nop
}
 800924e:	bd80      	pop	{r7, pc}
 8009250:	58000c00 	.word	0x58000c00

08009254 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009258:	f7fe ffde 	bl	8008218 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800925c:	2101      	movs	r1, #1
 800925e:	4802      	ldr	r0, [pc, #8]	; (8009268 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009260:	f7ff ff00 	bl	8009064 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009264:	bf00      	nop
}
 8009266:	bd80      	pop	{r7, pc}
 8009268:	58000c00 	.word	0x58000c00

0800926c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009270:	2120      	movs	r1, #32
 8009272:	4803      	ldr	r0, [pc, #12]	; (8009280 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009274:	f7ff fed2 	bl	800901c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009278:	f7fe fffe 	bl	8008278 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800927c:	bf00      	nop
}
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58000c00 	.word	0x58000c00

08009284 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009288:	2102      	movs	r1, #2
 800928a:	4802      	ldr	r0, [pc, #8]	; (8009294 <HW_IPCC_SYS_Init+0x10>)
 800928c:	f7ff fed8 	bl	8009040 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009290:	bf00      	nop
}
 8009292:	bd80      	pop	{r7, pc}
 8009294:	58000c00 	.word	0x58000c00

08009298 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800929c:	2102      	movs	r1, #2
 800929e:	4804      	ldr	r0, [pc, #16]	; (80092b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80092a0:	f7ff feee 	bl	8009080 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80092a4:	2102      	movs	r1, #2
 80092a6:	4802      	ldr	r0, [pc, #8]	; (80092b0 <HW_IPCC_SYS_SendCmd+0x18>)
 80092a8:	f7ff fea5 	bl	8008ff6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80092ac:	bf00      	nop
}
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	58000c00 	.word	0x58000c00

080092b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80092b8:	2102      	movs	r1, #2
 80092ba:	4803      	ldr	r0, [pc, #12]	; (80092c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80092bc:	f7ff feae 	bl	800901c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80092c0:	f7ff f82a 	bl	8008318 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80092c4:	bf00      	nop
}
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	58000c00 	.word	0x58000c00

080092cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80092d0:	f7ff f838 	bl	8008344 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80092d4:	2102      	movs	r1, #2
 80092d6:	4802      	ldr	r0, [pc, #8]	; (80092e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80092d8:	f7ff fec4 	bl	8009064 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80092dc:	bf00      	nop
}
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	58000c00 	.word	0x58000c00

080092e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80092ec:	2108      	movs	r1, #8
 80092ee:	480c      	ldr	r0, [pc, #48]	; (8009320 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80092f0:	f7ff fed5 	bl	800909e <LL_C1_IPCC_IsActiveFlag_CHx>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d007      	beq.n	800930a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80092fa:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009300:	2108      	movs	r1, #8
 8009302:	4807      	ldr	r0, [pc, #28]	; (8009320 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009304:	f7ff fe77 	bl	8008ff6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009308:	e006      	b.n	8009318 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800930e:	2108      	movs	r1, #8
 8009310:	4803      	ldr	r0, [pc, #12]	; (8009320 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009312:	f7ff feb5 	bl	8009080 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009316:	bf00      	nop
}
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	58000c00 	.word	0x58000c00
 8009324:	20000c70 	.word	0x20000c70

08009328 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800932c:	2108      	movs	r1, #8
 800932e:	4806      	ldr	r0, [pc, #24]	; (8009348 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009330:	f7ff fe74 	bl	800901c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800933a:	2108      	movs	r1, #8
 800933c:	4802      	ldr	r0, [pc, #8]	; (8009348 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800933e:	f7ff fe9f 	bl	8009080 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009342:	bf00      	nop
}
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	58000c00 	.word	0x58000c00
 800934c:	20000c70 	.word	0x20000c70

08009350 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009354:	2108      	movs	r1, #8
 8009356:	4802      	ldr	r0, [pc, #8]	; (8009360 <HW_IPCC_TRACES_Init+0x10>)
 8009358:	f7ff fe72 	bl	8009040 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800935c:	bf00      	nop
}
 800935e:	bd80      	pop	{r7, pc}
 8009360:	58000c00 	.word	0x58000c00

08009364 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009368:	f7ff f894 	bl	8008494 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800936c:	2108      	movs	r1, #8
 800936e:	4802      	ldr	r0, [pc, #8]	; (8009378 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009370:	f7ff fe78 	bl	8009064 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009374:	bf00      	nop
}
 8009376:	bd80      	pop	{r7, pc}
 8009378:	58000c00 	.word	0x58000c00

0800937c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <UTIL_LPM_Init+0x1c>)
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <UTIL_LPM_Init+0x20>)
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800938c:	bf00      	nop
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20000c74 	.word	0x20000c74
 800939c:	20000c78 	.word	0x20000c78

080093a0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ac:	f3ef 8310 	mrs	r3, PRIMASK
 80093b0:	613b      	str	r3, [r7, #16]
  return(result);
 80093b2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80093b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80093b6:	b672      	cpsid	i
}
 80093b8:	bf00      	nop
  
  switch(state)
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d008      	beq.n	80093d2 <UTIL_LPM_SetOffMode+0x32>
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d10e      	bne.n	80093e2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <UTIL_LPM_SetOffMode+0x5c>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	4a0b      	ldr	r2, [pc, #44]	; (80093fc <UTIL_LPM_SetOffMode+0x5c>)
 80093ce:	6013      	str	r3, [r2, #0]
      break;
 80093d0:	e008      	b.n	80093e4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	43da      	mvns	r2, r3
 80093d6:	4b09      	ldr	r3, [pc, #36]	; (80093fc <UTIL_LPM_SetOffMode+0x5c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4013      	ands	r3, r2
 80093dc:	4a07      	ldr	r2, [pc, #28]	; (80093fc <UTIL_LPM_SetOffMode+0x5c>)
 80093de:	6013      	str	r3, [r2, #0]
      break;
 80093e0:	e000      	b.n	80093e4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80093e2:	bf00      	nop
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f383 8810 	msr	PRIMASK, r3
}
 80093ee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80093f0:	bf00      	nop
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	20000c78 	.word	0x20000c78

08009400 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b090      	sub	sp, #64	; 0x40
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009408:	4b73      	ldr	r3, [pc, #460]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800940e:	4b72      	ldr	r3, [pc, #456]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4013      	ands	r3, r2
 8009416:	4a70      	ldr	r2, [pc, #448]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 8009418:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800941a:	4b70      	ldr	r3, [pc, #448]	; (80095dc <UTIL_SEQ_Run+0x1dc>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009420:	4b6f      	ldr	r3, [pc, #444]	; (80095e0 <UTIL_SEQ_Run+0x1e0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009426:	4b6f      	ldr	r3, [pc, #444]	; (80095e4 <UTIL_SEQ_Run+0x1e4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800942c:	4b6e      	ldr	r3, [pc, #440]	; (80095e8 <UTIL_SEQ_Run+0x1e8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009432:	e08d      	b.n	8009550 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009438:	e002      	b.n	8009440 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800943a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943c:	3301      	adds	r3, #1
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009440:	4a6a      	ldr	r2, [pc, #424]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 8009442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009444:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	401a      	ands	r2, r3
 800944c:	4b62      	ldr	r3, [pc, #392]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4013      	ands	r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f1      	beq.n	800943a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009456:	4a65      	ldr	r2, [pc, #404]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 8009458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800945a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	401a      	ands	r2, r3
 8009462:	4b5d      	ldr	r3, [pc, #372]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4013      	ands	r3, r2
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800946a:	4a60      	ldr	r2, [pc, #384]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	4413      	add	r3, r2
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	4013      	ands	r3, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d106      	bne.n	800948a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800947c:	4a5b      	ldr	r2, [pc, #364]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 800947e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	4413      	add	r3, r2
 8009484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009488:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800948a:	4a58      	ldr	r2, [pc, #352]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	4413      	add	r3, r2
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	4013      	ands	r3, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f9b3 	bl	8009804 <SEQ_BitPosition>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	4b53      	ldr	r3, [pc, #332]	; (80095f0 <UTIL_SEQ_Run+0x1f0>)
 80094a4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80094a6:	4a51      	ldr	r2, [pc, #324]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 80094a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b4f      	ldr	r3, [pc, #316]	; (80095f0 <UTIL_SEQ_Run+0x1f0>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2101      	movs	r1, #1
 80094b6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ba:	43db      	mvns	r3, r3
 80094bc:	401a      	ands	r2, r3
 80094be:	494b      	ldr	r1, [pc, #300]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 80094c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	440b      	add	r3, r1
 80094c6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c8:	f3ef 8310 	mrs	r3, PRIMASK
 80094cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80094ce:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80094d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80094d2:	b672      	cpsid	i
}
 80094d4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80094d6:	4b46      	ldr	r3, [pc, #280]	; (80095f0 <UTIL_SEQ_Run+0x1f0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2201      	movs	r2, #1
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	43da      	mvns	r2, r3
 80094e2:	4b3e      	ldr	r3, [pc, #248]	; (80095dc <UTIL_SEQ_Run+0x1dc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4013      	ands	r3, r2
 80094e8:	4a3c      	ldr	r2, [pc, #240]	; (80095dc <UTIL_SEQ_Run+0x1dc>)
 80094ea:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80094ec:	2302      	movs	r3, #2
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f0:	e013      	b.n	800951a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	3b01      	subs	r3, #1
 80094f6:	4a3d      	ldr	r2, [pc, #244]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 80094f8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80094fc:	4b3c      	ldr	r3, [pc, #240]	; (80095f0 <UTIL_SEQ_Run+0x1f0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2201      	movs	r2, #1
 8009502:	fa02 f303 	lsl.w	r3, r2, r3
 8009506:	43da      	mvns	r2, r3
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950a:	3b01      	subs	r3, #1
 800950c:	400a      	ands	r2, r1
 800950e:	4937      	ldr	r1, [pc, #220]	; (80095ec <UTIL_SEQ_Run+0x1ec>)
 8009510:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009516:	3b01      	subs	r3, #1
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e8      	bne.n	80094f2 <UTIL_SEQ_Run+0xf2>
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f383 8810 	msr	PRIMASK, r3
}
 800952a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800952c:	4b30      	ldr	r3, [pc, #192]	; (80095f0 <UTIL_SEQ_Run+0x1f0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a30      	ldr	r2, [pc, #192]	; (80095f4 <UTIL_SEQ_Run+0x1f4>)
 8009532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009536:	4798      	blx	r3

    local_taskset = TaskSet;
 8009538:	4b28      	ldr	r3, [pc, #160]	; (80095dc <UTIL_SEQ_Run+0x1dc>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800953e:	4b28      	ldr	r3, [pc, #160]	; (80095e0 <UTIL_SEQ_Run+0x1e0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009544:	4b27      	ldr	r3, [pc, #156]	; (80095e4 <UTIL_SEQ_Run+0x1e4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800954a:	4b27      	ldr	r3, [pc, #156]	; (80095e8 <UTIL_SEQ_Run+0x1e8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	401a      	ands	r2, r3
 8009556:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4013      	ands	r3, r2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <UTIL_SEQ_Run+0x16c>
 8009560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	4013      	ands	r3, r2
 8009566:	2b00      	cmp	r3, #0
 8009568:	f43f af64 	beq.w	8009434 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800956c:	4b20      	ldr	r3, [pc, #128]	; (80095f0 <UTIL_SEQ_Run+0x1f0>)
 800956e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009572:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009574:	f000 f938 	bl	80097e8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009578:	f3ef 8310 	mrs	r3, PRIMASK
 800957c:	613b      	str	r3, [r7, #16]
  return(result);
 800957e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009582:	b672      	cpsid	i
}
 8009584:	bf00      	nop
  local_taskset = TaskSet;
 8009586:	4b15      	ldr	r3, [pc, #84]	; (80095dc <UTIL_SEQ_Run+0x1dc>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800958c:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <UTIL_SEQ_Run+0x1e0>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009592:	4b14      	ldr	r3, [pc, #80]	; (80095e4 <UTIL_SEQ_Run+0x1e4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	401a      	ands	r2, r3
 800959e:	4b0e      	ldr	r3, [pc, #56]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4013      	ands	r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d107      	bne.n	80095b8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80095a8:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <UTIL_SEQ_Run+0x1e8>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80095b4:	f7f7 fbf8 	bl	8000da8 <UTIL_SEQ_Idle>
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f383 8810 	msr	PRIMASK, r3
}
 80095c2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80095c4:	f000 f917 	bl	80097f6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80095c8:	4a03      	ldr	r2, [pc, #12]	; (80095d8 <UTIL_SEQ_Run+0x1d8>)
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	6013      	str	r3, [r2, #0]

  return;
 80095ce:	bf00      	nop
}
 80095d0:	3740      	adds	r7, #64	; 0x40
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000024 	.word	0x20000024
 80095dc:	20000c7c 	.word	0x20000c7c
 80095e0:	20000c80 	.word	0x20000c80
 80095e4:	20000020 	.word	0x20000020
 80095e8:	20000c84 	.word	0x20000c84
 80095ec:	20000d0c 	.word	0x20000d0c
 80095f0:	20000c88 	.word	0x20000c88
 80095f4:	20000c8c 	.word	0x20000c8c

080095f8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009604:	f3ef 8310 	mrs	r3, PRIMASK
 8009608:	617b      	str	r3, [r7, #20]
  return(result);
 800960a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800960c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800960e:	b672      	cpsid	i
}
 8009610:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f8f6 	bl	8009804 <SEQ_BitPosition>
 8009618:	4603      	mov	r3, r0
 800961a:	4619      	mov	r1, r3
 800961c:	4a06      	ldr	r2, [pc, #24]	; (8009638 <UTIL_SEQ_RegTask+0x40>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	f383 8810 	msr	PRIMASK, r3
}
 800962e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009630:	bf00      	nop
}
 8009632:	3720      	adds	r7, #32
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000c8c 	.word	0x20000c8c

0800963c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009646:	f3ef 8310 	mrs	r3, PRIMASK
 800964a:	60fb      	str	r3, [r7, #12]
  return(result);
 800964c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800964e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009650:	b672      	cpsid	i
}
 8009652:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <UTIL_SEQ_SetTask+0x50>)
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4313      	orrs	r3, r2
 800965c:	4a0b      	ldr	r2, [pc, #44]	; (800968c <UTIL_SEQ_SetTask+0x50>)
 800965e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009660:	4a0b      	ldr	r2, [pc, #44]	; (8009690 <UTIL_SEQ_SetTask+0x54>)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	431a      	orrs	r2, r3
 800966c:	4908      	ldr	r1, [pc, #32]	; (8009690 <UTIL_SEQ_SetTask+0x54>)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f383 8810 	msr	PRIMASK, r3
}
 800967e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009680:	bf00      	nop
}
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000c7c 	.word	0x20000c7c
 8009690:	20000d0c 	.word	0x20000d0c

08009694 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800969c:	f3ef 8310 	mrs	r3, PRIMASK
 80096a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80096a2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80096a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096a6:	b672      	cpsid	i
}
 80096a8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	43da      	mvns	r2, r3
 80096ae:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <UTIL_SEQ_PauseTask+0x3c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4013      	ands	r3, r2
 80096b4:	4a06      	ldr	r2, [pc, #24]	; (80096d0 <UTIL_SEQ_PauseTask+0x3c>)
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f383 8810 	msr	PRIMASK, r3
}
 80096c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80096c4:	bf00      	nop
}
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	20000020 	.word	0x20000020

080096d4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096dc:	f3ef 8310 	mrs	r3, PRIMASK
 80096e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80096e2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80096e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096e6:	b672      	cpsid	i
}
 80096e8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80096ea:	4b09      	ldr	r3, [pc, #36]	; (8009710 <UTIL_SEQ_ResumeTask+0x3c>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	4a07      	ldr	r2, [pc, #28]	; (8009710 <UTIL_SEQ_ResumeTask+0x3c>)
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f383 8810 	msr	PRIMASK, r3
}
 8009700:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009702:	bf00      	nop
}
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000020 	.word	0x20000020

08009714 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800971c:	f3ef 8310 	mrs	r3, PRIMASK
 8009720:	60fb      	str	r3, [r7, #12]
  return(result);
 8009722:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009726:	b672      	cpsid	i
}
 8009728:	bf00      	nop

  EvtSet |= EvtId_bm;
 800972a:	4b09      	ldr	r3, [pc, #36]	; (8009750 <UTIL_SEQ_SetEvt+0x3c>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4313      	orrs	r3, r2
 8009732:	4a07      	ldr	r2, [pc, #28]	; (8009750 <UTIL_SEQ_SetEvt+0x3c>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f383 8810 	msr	PRIMASK, r3
}
 8009740:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009742:	bf00      	nop
}
 8009744:	371c      	adds	r7, #28
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000c80 	.word	0x20000c80

08009754 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800975c:	4b1f      	ldr	r3, [pc, #124]	; (80097dc <UTIL_SEQ_WaitEvt+0x88>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009762:	4b1e      	ldr	r3, [pc, #120]	; (80097dc <UTIL_SEQ_WaitEvt+0x88>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800976a:	d102      	bne.n	8009772 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800976c:	2300      	movs	r3, #0
 800976e:	61fb      	str	r3, [r7, #28]
 8009770:	e005      	b.n	800977e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009772:	4b1a      	ldr	r3, [pc, #104]	; (80097dc <UTIL_SEQ_WaitEvt+0x88>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2201      	movs	r2, #1
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800977e:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <UTIL_SEQ_WaitEvt+0x8c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009784:	4a16      	ldr	r2, [pc, #88]	; (80097e0 <UTIL_SEQ_WaitEvt+0x8c>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800978a:	e003      	b.n	8009794 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	69f8      	ldr	r0, [r7, #28]
 8009790:	f7f7 fb11 	bl	8000db6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009794:	4b13      	ldr	r3, [pc, #76]	; (80097e4 <UTIL_SEQ_WaitEvt+0x90>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4013      	ands	r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0f5      	beq.n	800978c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80097a0:	4a0e      	ldr	r2, [pc, #56]	; (80097dc <UTIL_SEQ_WaitEvt+0x88>)
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a6:	f3ef 8310 	mrs	r3, PRIMASK
 80097aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80097ac:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80097ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80097b0:	b672      	cpsid	i
}
 80097b2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	43da      	mvns	r2, r3
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <UTIL_SEQ_WaitEvt+0x90>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4013      	ands	r3, r2
 80097be:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <UTIL_SEQ_WaitEvt+0x90>)
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f383 8810 	msr	PRIMASK, r3
}
 80097cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80097ce:	4a04      	ldr	r2, [pc, #16]	; (80097e0 <UTIL_SEQ_WaitEvt+0x8c>)
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6013      	str	r3, [r2, #0]
  return;
 80097d4:	bf00      	nop
}
 80097d6:	3720      	adds	r7, #32
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20000c88 	.word	0x20000c88
 80097e0:	20000c84 	.word	0x20000c84
 80097e4:	20000c80 	.word	0x20000c80

080097e8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80097ec:	bf00      	nop
}
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80097f6:	b480      	push	{r7}
 80097f8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80097fa:	bf00      	nop
}
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	0c1b      	lsrs	r3, r3, #16
 8009818:	041b      	lsls	r3, r3, #16
 800981a:	2b00      	cmp	r3, #0
 800981c:	d104      	bne.n	8009828 <SEQ_BitPosition+0x24>
 800981e:	2310      	movs	r3, #16
 8009820:	73fb      	strb	r3, [r7, #15]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	041b      	lsls	r3, r3, #16
 8009826:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d105      	bne.n	800983e <SEQ_BitPosition+0x3a>
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	3308      	adds	r3, #8
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d105      	bne.n	8009854 <SEQ_BitPosition+0x50>
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	3304      	adds	r3, #4
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	0f1b      	lsrs	r3, r3, #28
 8009858:	4a07      	ldr	r2, [pc, #28]	; (8009878 <SEQ_BitPosition+0x74>)
 800985a:	5cd2      	ldrb	r2, [r2, r3]
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	4413      	add	r3, r2
 8009860:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	f1c3 031f 	rsb	r3, r3, #31
 8009868:	b2db      	uxtb	r3, r3
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	0800aba4 	.word	0x0800aba4

0800987c <__errno>:
 800987c:	4b01      	ldr	r3, [pc, #4]	; (8009884 <__errno+0x8>)
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	20000028 	.word	0x20000028

08009888 <__libc_init_array>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4d0d      	ldr	r5, [pc, #52]	; (80098c0 <__libc_init_array+0x38>)
 800988c:	4c0d      	ldr	r4, [pc, #52]	; (80098c4 <__libc_init_array+0x3c>)
 800988e:	1b64      	subs	r4, r4, r5
 8009890:	10a4      	asrs	r4, r4, #2
 8009892:	2600      	movs	r6, #0
 8009894:	42a6      	cmp	r6, r4
 8009896:	d109      	bne.n	80098ac <__libc_init_array+0x24>
 8009898:	4d0b      	ldr	r5, [pc, #44]	; (80098c8 <__libc_init_array+0x40>)
 800989a:	4c0c      	ldr	r4, [pc, #48]	; (80098cc <__libc_init_array+0x44>)
 800989c:	f000 ffbc 	bl	800a818 <_init>
 80098a0:	1b64      	subs	r4, r4, r5
 80098a2:	10a4      	asrs	r4, r4, #2
 80098a4:	2600      	movs	r6, #0
 80098a6:	42a6      	cmp	r6, r4
 80098a8:	d105      	bne.n	80098b6 <__libc_init_array+0x2e>
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b0:	4798      	blx	r3
 80098b2:	3601      	adds	r6, #1
 80098b4:	e7ee      	b.n	8009894 <__libc_init_array+0xc>
 80098b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ba:	4798      	blx	r3
 80098bc:	3601      	adds	r6, #1
 80098be:	e7f2      	b.n	80098a6 <__libc_init_array+0x1e>
 80098c0:	0800ac54 	.word	0x0800ac54
 80098c4:	0800ac54 	.word	0x0800ac54
 80098c8:	0800ac54 	.word	0x0800ac54
 80098cc:	0800ac58 	.word	0x0800ac58

080098d0 <memcpy>:
 80098d0:	440a      	add	r2, r1
 80098d2:	4291      	cmp	r1, r2
 80098d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80098d8:	d100      	bne.n	80098dc <memcpy+0xc>
 80098da:	4770      	bx	lr
 80098dc:	b510      	push	{r4, lr}
 80098de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e6:	4291      	cmp	r1, r2
 80098e8:	d1f9      	bne.n	80098de <memcpy+0xe>
 80098ea:	bd10      	pop	{r4, pc}

080098ec <memset>:
 80098ec:	4402      	add	r2, r0
 80098ee:	4603      	mov	r3, r0
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d100      	bne.n	80098f6 <memset+0xa>
 80098f4:	4770      	bx	lr
 80098f6:	f803 1b01 	strb.w	r1, [r3], #1
 80098fa:	e7f9      	b.n	80098f0 <memset+0x4>

080098fc <iprintf>:
 80098fc:	b40f      	push	{r0, r1, r2, r3}
 80098fe:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <iprintf+0x2c>)
 8009900:	b513      	push	{r0, r1, r4, lr}
 8009902:	681c      	ldr	r4, [r3, #0]
 8009904:	b124      	cbz	r4, 8009910 <iprintf+0x14>
 8009906:	69a3      	ldr	r3, [r4, #24]
 8009908:	b913      	cbnz	r3, 8009910 <iprintf+0x14>
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f866 	bl	80099dc <__sinit>
 8009910:	ab05      	add	r3, sp, #20
 8009912:	9a04      	ldr	r2, [sp, #16]
 8009914:	68a1      	ldr	r1, [r4, #8]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	4620      	mov	r0, r4
 800991a:	f000 f9bd 	bl	8009c98 <_vfiprintf_r>
 800991e:	b002      	add	sp, #8
 8009920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009924:	b004      	add	sp, #16
 8009926:	4770      	bx	lr
 8009928:	20000028 	.word	0x20000028

0800992c <std>:
 800992c:	2300      	movs	r3, #0
 800992e:	b510      	push	{r4, lr}
 8009930:	4604      	mov	r4, r0
 8009932:	e9c0 3300 	strd	r3, r3, [r0]
 8009936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800993a:	6083      	str	r3, [r0, #8]
 800993c:	8181      	strh	r1, [r0, #12]
 800993e:	6643      	str	r3, [r0, #100]	; 0x64
 8009940:	81c2      	strh	r2, [r0, #14]
 8009942:	6183      	str	r3, [r0, #24]
 8009944:	4619      	mov	r1, r3
 8009946:	2208      	movs	r2, #8
 8009948:	305c      	adds	r0, #92	; 0x5c
 800994a:	f7ff ffcf 	bl	80098ec <memset>
 800994e:	4b05      	ldr	r3, [pc, #20]	; (8009964 <std+0x38>)
 8009950:	6263      	str	r3, [r4, #36]	; 0x24
 8009952:	4b05      	ldr	r3, [pc, #20]	; (8009968 <std+0x3c>)
 8009954:	62a3      	str	r3, [r4, #40]	; 0x28
 8009956:	4b05      	ldr	r3, [pc, #20]	; (800996c <std+0x40>)
 8009958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800995a:	4b05      	ldr	r3, [pc, #20]	; (8009970 <std+0x44>)
 800995c:	6224      	str	r4, [r4, #32]
 800995e:	6323      	str	r3, [r4, #48]	; 0x30
 8009960:	bd10      	pop	{r4, pc}
 8009962:	bf00      	nop
 8009964:	0800a241 	.word	0x0800a241
 8009968:	0800a263 	.word	0x0800a263
 800996c:	0800a29b 	.word	0x0800a29b
 8009970:	0800a2bf 	.word	0x0800a2bf

08009974 <_cleanup_r>:
 8009974:	4901      	ldr	r1, [pc, #4]	; (800997c <_cleanup_r+0x8>)
 8009976:	f000 b8af 	b.w	8009ad8 <_fwalk_reent>
 800997a:	bf00      	nop
 800997c:	0800a599 	.word	0x0800a599

08009980 <__sfmoreglue>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	2268      	movs	r2, #104	; 0x68
 8009984:	1e4d      	subs	r5, r1, #1
 8009986:	4355      	muls	r5, r2
 8009988:	460e      	mov	r6, r1
 800998a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800998e:	f000 f8e5 	bl	8009b5c <_malloc_r>
 8009992:	4604      	mov	r4, r0
 8009994:	b140      	cbz	r0, 80099a8 <__sfmoreglue+0x28>
 8009996:	2100      	movs	r1, #0
 8009998:	e9c0 1600 	strd	r1, r6, [r0]
 800999c:	300c      	adds	r0, #12
 800999e:	60a0      	str	r0, [r4, #8]
 80099a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099a4:	f7ff ffa2 	bl	80098ec <memset>
 80099a8:	4620      	mov	r0, r4
 80099aa:	bd70      	pop	{r4, r5, r6, pc}

080099ac <__sfp_lock_acquire>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__sfp_lock_acquire+0x8>)
 80099ae:	f000 b8b3 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 80099b2:	bf00      	nop
 80099b4:	20000d1d 	.word	0x20000d1d

080099b8 <__sfp_lock_release>:
 80099b8:	4801      	ldr	r0, [pc, #4]	; (80099c0 <__sfp_lock_release+0x8>)
 80099ba:	f000 b8ae 	b.w	8009b1a <__retarget_lock_release_recursive>
 80099be:	bf00      	nop
 80099c0:	20000d1d 	.word	0x20000d1d

080099c4 <__sinit_lock_acquire>:
 80099c4:	4801      	ldr	r0, [pc, #4]	; (80099cc <__sinit_lock_acquire+0x8>)
 80099c6:	f000 b8a7 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 80099ca:	bf00      	nop
 80099cc:	20000d1e 	.word	0x20000d1e

080099d0 <__sinit_lock_release>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__sinit_lock_release+0x8>)
 80099d2:	f000 b8a2 	b.w	8009b1a <__retarget_lock_release_recursive>
 80099d6:	bf00      	nop
 80099d8:	20000d1e 	.word	0x20000d1e

080099dc <__sinit>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	4604      	mov	r4, r0
 80099e0:	f7ff fff0 	bl	80099c4 <__sinit_lock_acquire>
 80099e4:	69a3      	ldr	r3, [r4, #24]
 80099e6:	b11b      	cbz	r3, 80099f0 <__sinit+0x14>
 80099e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ec:	f7ff bff0 	b.w	80099d0 <__sinit_lock_release>
 80099f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099f4:	6523      	str	r3, [r4, #80]	; 0x50
 80099f6:	4b13      	ldr	r3, [pc, #76]	; (8009a44 <__sinit+0x68>)
 80099f8:	4a13      	ldr	r2, [pc, #76]	; (8009a48 <__sinit+0x6c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	bf04      	itt	eq
 8009a02:	2301      	moveq	r3, #1
 8009a04:	61a3      	streq	r3, [r4, #24]
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 f820 	bl	8009a4c <__sfp>
 8009a0c:	6060      	str	r0, [r4, #4]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 f81c 	bl	8009a4c <__sfp>
 8009a14:	60a0      	str	r0, [r4, #8]
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f818 	bl	8009a4c <__sfp>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	60e0      	str	r0, [r4, #12]
 8009a20:	2104      	movs	r1, #4
 8009a22:	6860      	ldr	r0, [r4, #4]
 8009a24:	f7ff ff82 	bl	800992c <std>
 8009a28:	68a0      	ldr	r0, [r4, #8]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	2109      	movs	r1, #9
 8009a2e:	f7ff ff7d 	bl	800992c <std>
 8009a32:	68e0      	ldr	r0, [r4, #12]
 8009a34:	2202      	movs	r2, #2
 8009a36:	2112      	movs	r1, #18
 8009a38:	f7ff ff78 	bl	800992c <std>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	61a3      	str	r3, [r4, #24]
 8009a40:	e7d2      	b.n	80099e8 <__sinit+0xc>
 8009a42:	bf00      	nop
 8009a44:	0800abb4 	.word	0x0800abb4
 8009a48:	08009975 	.word	0x08009975

08009a4c <__sfp>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	4607      	mov	r7, r0
 8009a50:	f7ff ffac 	bl	80099ac <__sfp_lock_acquire>
 8009a54:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <__sfp+0x84>)
 8009a56:	681e      	ldr	r6, [r3, #0]
 8009a58:	69b3      	ldr	r3, [r6, #24]
 8009a5a:	b913      	cbnz	r3, 8009a62 <__sfp+0x16>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff ffbd 	bl	80099dc <__sinit>
 8009a62:	3648      	adds	r6, #72	; 0x48
 8009a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	d503      	bpl.n	8009a74 <__sfp+0x28>
 8009a6c:	6833      	ldr	r3, [r6, #0]
 8009a6e:	b30b      	cbz	r3, 8009ab4 <__sfp+0x68>
 8009a70:	6836      	ldr	r6, [r6, #0]
 8009a72:	e7f7      	b.n	8009a64 <__sfp+0x18>
 8009a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a78:	b9d5      	cbnz	r5, 8009ab0 <__sfp+0x64>
 8009a7a:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <__sfp+0x88>)
 8009a7c:	60e3      	str	r3, [r4, #12]
 8009a7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a82:	6665      	str	r5, [r4, #100]	; 0x64
 8009a84:	f000 f847 	bl	8009b16 <__retarget_lock_init_recursive>
 8009a88:	f7ff ff96 	bl	80099b8 <__sfp_lock_release>
 8009a8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a94:	6025      	str	r5, [r4, #0]
 8009a96:	61a5      	str	r5, [r4, #24]
 8009a98:	2208      	movs	r2, #8
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009aa0:	f7ff ff24 	bl	80098ec <memset>
 8009aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009aac:	4620      	mov	r0, r4
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab0:	3468      	adds	r4, #104	; 0x68
 8009ab2:	e7d9      	b.n	8009a68 <__sfp+0x1c>
 8009ab4:	2104      	movs	r1, #4
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	f7ff ff62 	bl	8009980 <__sfmoreglue>
 8009abc:	4604      	mov	r4, r0
 8009abe:	6030      	str	r0, [r6, #0]
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d1d5      	bne.n	8009a70 <__sfp+0x24>
 8009ac4:	f7ff ff78 	bl	80099b8 <__sfp_lock_release>
 8009ac8:	230c      	movs	r3, #12
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	e7ee      	b.n	8009aac <__sfp+0x60>
 8009ace:	bf00      	nop
 8009ad0:	0800abb4 	.word	0x0800abb4
 8009ad4:	ffff0001 	.word	0xffff0001

08009ad8 <_fwalk_reent>:
 8009ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009adc:	4606      	mov	r6, r0
 8009ade:	4688      	mov	r8, r1
 8009ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ae4:	2700      	movs	r7, #0
 8009ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aea:	f1b9 0901 	subs.w	r9, r9, #1
 8009aee:	d505      	bpl.n	8009afc <_fwalk_reent+0x24>
 8009af0:	6824      	ldr	r4, [r4, #0]
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	d1f7      	bne.n	8009ae6 <_fwalk_reent+0xe>
 8009af6:	4638      	mov	r0, r7
 8009af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afc:	89ab      	ldrh	r3, [r5, #12]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d907      	bls.n	8009b12 <_fwalk_reent+0x3a>
 8009b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b06:	3301      	adds	r3, #1
 8009b08:	d003      	beq.n	8009b12 <_fwalk_reent+0x3a>
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	47c0      	blx	r8
 8009b10:	4307      	orrs	r7, r0
 8009b12:	3568      	adds	r5, #104	; 0x68
 8009b14:	e7e9      	b.n	8009aea <_fwalk_reent+0x12>

08009b16 <__retarget_lock_init_recursive>:
 8009b16:	4770      	bx	lr

08009b18 <__retarget_lock_acquire_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__retarget_lock_release_recursive>:
 8009b1a:	4770      	bx	lr

08009b1c <sbrk_aligned>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	4e0e      	ldr	r6, [pc, #56]	; (8009b58 <sbrk_aligned+0x3c>)
 8009b20:	460c      	mov	r4, r1
 8009b22:	6831      	ldr	r1, [r6, #0]
 8009b24:	4605      	mov	r5, r0
 8009b26:	b911      	cbnz	r1, 8009b2e <sbrk_aligned+0x12>
 8009b28:	f000 fb7a 	bl	800a220 <_sbrk_r>
 8009b2c:	6030      	str	r0, [r6, #0]
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4628      	mov	r0, r5
 8009b32:	f000 fb75 	bl	800a220 <_sbrk_r>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d00a      	beq.n	8009b50 <sbrk_aligned+0x34>
 8009b3a:	1cc4      	adds	r4, r0, #3
 8009b3c:	f024 0403 	bic.w	r4, r4, #3
 8009b40:	42a0      	cmp	r0, r4
 8009b42:	d007      	beq.n	8009b54 <sbrk_aligned+0x38>
 8009b44:	1a21      	subs	r1, r4, r0
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 fb6a 	bl	800a220 <_sbrk_r>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d101      	bne.n	8009b54 <sbrk_aligned+0x38>
 8009b50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b54:	4620      	mov	r0, r4
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	20000d24 	.word	0x20000d24

08009b5c <_malloc_r>:
 8009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b60:	1ccd      	adds	r5, r1, #3
 8009b62:	f025 0503 	bic.w	r5, r5, #3
 8009b66:	3508      	adds	r5, #8
 8009b68:	2d0c      	cmp	r5, #12
 8009b6a:	bf38      	it	cc
 8009b6c:	250c      	movcc	r5, #12
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	4607      	mov	r7, r0
 8009b72:	db01      	blt.n	8009b78 <_malloc_r+0x1c>
 8009b74:	42a9      	cmp	r1, r5
 8009b76:	d905      	bls.n	8009b84 <_malloc_r+0x28>
 8009b78:	230c      	movs	r3, #12
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	2600      	movs	r6, #0
 8009b7e:	4630      	mov	r0, r6
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b84:	4e2e      	ldr	r6, [pc, #184]	; (8009c40 <_malloc_r+0xe4>)
 8009b86:	f000 fdbb 	bl	800a700 <__malloc_lock>
 8009b8a:	6833      	ldr	r3, [r6, #0]
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	bb34      	cbnz	r4, 8009bde <_malloc_r+0x82>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7ff ffc2 	bl	8009b1c <sbrk_aligned>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	d14d      	bne.n	8009c3a <_malloc_r+0xde>
 8009b9e:	6834      	ldr	r4, [r6, #0]
 8009ba0:	4626      	mov	r6, r4
 8009ba2:	2e00      	cmp	r6, #0
 8009ba4:	d140      	bne.n	8009c28 <_malloc_r+0xcc>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4638      	mov	r0, r7
 8009bac:	eb04 0803 	add.w	r8, r4, r3
 8009bb0:	f000 fb36 	bl	800a220 <_sbrk_r>
 8009bb4:	4580      	cmp	r8, r0
 8009bb6:	d13a      	bne.n	8009c2e <_malloc_r+0xd2>
 8009bb8:	6821      	ldr	r1, [r4, #0]
 8009bba:	3503      	adds	r5, #3
 8009bbc:	1a6d      	subs	r5, r5, r1
 8009bbe:	f025 0503 	bic.w	r5, r5, #3
 8009bc2:	3508      	adds	r5, #8
 8009bc4:	2d0c      	cmp	r5, #12
 8009bc6:	bf38      	it	cc
 8009bc8:	250c      	movcc	r5, #12
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f7ff ffa5 	bl	8009b1c <sbrk_aligned>
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	d02b      	beq.n	8009c2e <_malloc_r+0xd2>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	442b      	add	r3, r5
 8009bda:	6023      	str	r3, [r4, #0]
 8009bdc:	e00e      	b.n	8009bfc <_malloc_r+0xa0>
 8009bde:	6822      	ldr	r2, [r4, #0]
 8009be0:	1b52      	subs	r2, r2, r5
 8009be2:	d41e      	bmi.n	8009c22 <_malloc_r+0xc6>
 8009be4:	2a0b      	cmp	r2, #11
 8009be6:	d916      	bls.n	8009c16 <_malloc_r+0xba>
 8009be8:	1961      	adds	r1, r4, r5
 8009bea:	42a3      	cmp	r3, r4
 8009bec:	6025      	str	r5, [r4, #0]
 8009bee:	bf18      	it	ne
 8009bf0:	6059      	strne	r1, [r3, #4]
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	bf08      	it	eq
 8009bf6:	6031      	streq	r1, [r6, #0]
 8009bf8:	5162      	str	r2, [r4, r5]
 8009bfa:	604b      	str	r3, [r1, #4]
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f104 060b 	add.w	r6, r4, #11
 8009c02:	f000 fd83 	bl	800a70c <__malloc_unlock>
 8009c06:	f026 0607 	bic.w	r6, r6, #7
 8009c0a:	1d23      	adds	r3, r4, #4
 8009c0c:	1af2      	subs	r2, r6, r3
 8009c0e:	d0b6      	beq.n	8009b7e <_malloc_r+0x22>
 8009c10:	1b9b      	subs	r3, r3, r6
 8009c12:	50a3      	str	r3, [r4, r2]
 8009c14:	e7b3      	b.n	8009b7e <_malloc_r+0x22>
 8009c16:	6862      	ldr	r2, [r4, #4]
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	bf0c      	ite	eq
 8009c1c:	6032      	streq	r2, [r6, #0]
 8009c1e:	605a      	strne	r2, [r3, #4]
 8009c20:	e7ec      	b.n	8009bfc <_malloc_r+0xa0>
 8009c22:	4623      	mov	r3, r4
 8009c24:	6864      	ldr	r4, [r4, #4]
 8009c26:	e7b2      	b.n	8009b8e <_malloc_r+0x32>
 8009c28:	4634      	mov	r4, r6
 8009c2a:	6876      	ldr	r6, [r6, #4]
 8009c2c:	e7b9      	b.n	8009ba2 <_malloc_r+0x46>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	603b      	str	r3, [r7, #0]
 8009c32:	4638      	mov	r0, r7
 8009c34:	f000 fd6a 	bl	800a70c <__malloc_unlock>
 8009c38:	e7a1      	b.n	8009b7e <_malloc_r+0x22>
 8009c3a:	6025      	str	r5, [r4, #0]
 8009c3c:	e7de      	b.n	8009bfc <_malloc_r+0xa0>
 8009c3e:	bf00      	nop
 8009c40:	20000d20 	.word	0x20000d20

08009c44 <__sfputc_r>:
 8009c44:	6893      	ldr	r3, [r2, #8]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	b410      	push	{r4}
 8009c4c:	6093      	str	r3, [r2, #8]
 8009c4e:	da08      	bge.n	8009c62 <__sfputc_r+0x1e>
 8009c50:	6994      	ldr	r4, [r2, #24]
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	db01      	blt.n	8009c5a <__sfputc_r+0x16>
 8009c56:	290a      	cmp	r1, #10
 8009c58:	d103      	bne.n	8009c62 <__sfputc_r+0x1e>
 8009c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c5e:	f000 bb33 	b.w	800a2c8 <__swbuf_r>
 8009c62:	6813      	ldr	r3, [r2, #0]
 8009c64:	1c58      	adds	r0, r3, #1
 8009c66:	6010      	str	r0, [r2, #0]
 8009c68:	7019      	strb	r1, [r3, #0]
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <__sfputs_r>:
 8009c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	18d5      	adds	r5, r2, r3
 8009c7c:	42ac      	cmp	r4, r5
 8009c7e:	d101      	bne.n	8009c84 <__sfputs_r+0x12>
 8009c80:	2000      	movs	r0, #0
 8009c82:	e007      	b.n	8009c94 <__sfputs_r+0x22>
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	463a      	mov	r2, r7
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ffda 	bl	8009c44 <__sfputc_r>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d1f3      	bne.n	8009c7c <__sfputs_r+0xa>
 8009c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c98 <_vfiprintf_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	b09d      	sub	sp, #116	; 0x74
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	4698      	mov	r8, r3
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	b118      	cbz	r0, 8009cb0 <_vfiprintf_r+0x18>
 8009ca8:	6983      	ldr	r3, [r0, #24]
 8009caa:	b90b      	cbnz	r3, 8009cb0 <_vfiprintf_r+0x18>
 8009cac:	f7ff fe96 	bl	80099dc <__sinit>
 8009cb0:	4b89      	ldr	r3, [pc, #548]	; (8009ed8 <_vfiprintf_r+0x240>)
 8009cb2:	429d      	cmp	r5, r3
 8009cb4:	d11b      	bne.n	8009cee <_vfiprintf_r+0x56>
 8009cb6:	6875      	ldr	r5, [r6, #4]
 8009cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d405      	bmi.n	8009cca <_vfiprintf_r+0x32>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_vfiprintf_r+0x32>
 8009cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc6:	f7ff ff27 	bl	8009b18 <__retarget_lock_acquire_recursive>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	071b      	lsls	r3, r3, #28
 8009cce:	d501      	bpl.n	8009cd4 <_vfiprintf_r+0x3c>
 8009cd0:	692b      	ldr	r3, [r5, #16]
 8009cd2:	b9eb      	cbnz	r3, 8009d10 <_vfiprintf_r+0x78>
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f000 fb5a 	bl	800a390 <__swsetup_r>
 8009cdc:	b1c0      	cbz	r0, 8009d10 <_vfiprintf_r+0x78>
 8009cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce0:	07dc      	lsls	r4, r3, #31
 8009ce2:	d50e      	bpl.n	8009d02 <_vfiprintf_r+0x6a>
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce8:	b01d      	add	sp, #116	; 0x74
 8009cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cee:	4b7b      	ldr	r3, [pc, #492]	; (8009edc <_vfiprintf_r+0x244>)
 8009cf0:	429d      	cmp	r5, r3
 8009cf2:	d101      	bne.n	8009cf8 <_vfiprintf_r+0x60>
 8009cf4:	68b5      	ldr	r5, [r6, #8]
 8009cf6:	e7df      	b.n	8009cb8 <_vfiprintf_r+0x20>
 8009cf8:	4b79      	ldr	r3, [pc, #484]	; (8009ee0 <_vfiprintf_r+0x248>)
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	bf08      	it	eq
 8009cfe:	68f5      	ldreq	r5, [r6, #12]
 8009d00:	e7da      	b.n	8009cb8 <_vfiprintf_r+0x20>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	0598      	lsls	r0, r3, #22
 8009d06:	d4ed      	bmi.n	8009ce4 <_vfiprintf_r+0x4c>
 8009d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d0a:	f7ff ff06 	bl	8009b1a <__retarget_lock_release_recursive>
 8009d0e:	e7e9      	b.n	8009ce4 <_vfiprintf_r+0x4c>
 8009d10:	2300      	movs	r3, #0
 8009d12:	9309      	str	r3, [sp, #36]	; 0x24
 8009d14:	2320      	movs	r3, #32
 8009d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1e:	2330      	movs	r3, #48	; 0x30
 8009d20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ee4 <_vfiprintf_r+0x24c>
 8009d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d28:	f04f 0901 	mov.w	r9, #1
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	469a      	mov	sl, r3
 8009d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d34:	b10a      	cbz	r2, 8009d3a <_vfiprintf_r+0xa2>
 8009d36:	2a25      	cmp	r2, #37	; 0x25
 8009d38:	d1f9      	bne.n	8009d2e <_vfiprintf_r+0x96>
 8009d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3e:	d00b      	beq.n	8009d58 <_vfiprintf_r+0xc0>
 8009d40:	465b      	mov	r3, fp
 8009d42:	4622      	mov	r2, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff93 	bl	8009c72 <__sfputs_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f000 80aa 	beq.w	8009ea6 <_vfiprintf_r+0x20e>
 8009d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d54:	445a      	add	r2, fp
 8009d56:	9209      	str	r2, [sp, #36]	; 0x24
 8009d58:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80a2 	beq.w	8009ea6 <_vfiprintf_r+0x20e>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6c:	f10a 0a01 	add.w	sl, sl, #1
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	9307      	str	r3, [sp, #28]
 8009d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d78:	931a      	str	r3, [sp, #104]	; 0x68
 8009d7a:	4654      	mov	r4, sl
 8009d7c:	2205      	movs	r2, #5
 8009d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d82:	4858      	ldr	r0, [pc, #352]	; (8009ee4 <_vfiprintf_r+0x24c>)
 8009d84:	f7f6 fa04 	bl	8000190 <memchr>
 8009d88:	9a04      	ldr	r2, [sp, #16]
 8009d8a:	b9d8      	cbnz	r0, 8009dc4 <_vfiprintf_r+0x12c>
 8009d8c:	06d1      	lsls	r1, r2, #27
 8009d8e:	bf44      	itt	mi
 8009d90:	2320      	movmi	r3, #32
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d96:	0713      	lsls	r3, r2, #28
 8009d98:	bf44      	itt	mi
 8009d9a:	232b      	movmi	r3, #43	; 0x2b
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da0:	f89a 3000 	ldrb.w	r3, [sl]
 8009da4:	2b2a      	cmp	r3, #42	; 0x2a
 8009da6:	d015      	beq.n	8009dd4 <_vfiprintf_r+0x13c>
 8009da8:	9a07      	ldr	r2, [sp, #28]
 8009daa:	4654      	mov	r4, sl
 8009dac:	2000      	movs	r0, #0
 8009dae:	f04f 0c0a 	mov.w	ip, #10
 8009db2:	4621      	mov	r1, r4
 8009db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db8:	3b30      	subs	r3, #48	; 0x30
 8009dba:	2b09      	cmp	r3, #9
 8009dbc:	d94e      	bls.n	8009e5c <_vfiprintf_r+0x1c4>
 8009dbe:	b1b0      	cbz	r0, 8009dee <_vfiprintf_r+0x156>
 8009dc0:	9207      	str	r2, [sp, #28]
 8009dc2:	e014      	b.n	8009dee <_vfiprintf_r+0x156>
 8009dc4:	eba0 0308 	sub.w	r3, r0, r8
 8009dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	46a2      	mov	sl, r4
 8009dd2:	e7d2      	b.n	8009d7a <_vfiprintf_r+0xe2>
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	1d19      	adds	r1, r3, #4
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfbb      	ittet	lt
 8009de0:	425b      	neglt	r3, r3
 8009de2:	f042 0202 	orrlt.w	r2, r2, #2
 8009de6:	9307      	strge	r3, [sp, #28]
 8009de8:	9307      	strlt	r3, [sp, #28]
 8009dea:	bfb8      	it	lt
 8009dec:	9204      	strlt	r2, [sp, #16]
 8009dee:	7823      	ldrb	r3, [r4, #0]
 8009df0:	2b2e      	cmp	r3, #46	; 0x2e
 8009df2:	d10c      	bne.n	8009e0e <_vfiprintf_r+0x176>
 8009df4:	7863      	ldrb	r3, [r4, #1]
 8009df6:	2b2a      	cmp	r3, #42	; 0x2a
 8009df8:	d135      	bne.n	8009e66 <_vfiprintf_r+0x1ce>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	9203      	str	r2, [sp, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	bfb8      	it	lt
 8009e06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e0a:	3402      	adds	r4, #2
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ef4 <_vfiprintf_r+0x25c>
 8009e12:	7821      	ldrb	r1, [r4, #0]
 8009e14:	2203      	movs	r2, #3
 8009e16:	4650      	mov	r0, sl
 8009e18:	f7f6 f9ba 	bl	8000190 <memchr>
 8009e1c:	b140      	cbz	r0, 8009e30 <_vfiprintf_r+0x198>
 8009e1e:	2340      	movs	r3, #64	; 0x40
 8009e20:	eba0 000a 	sub.w	r0, r0, sl
 8009e24:	fa03 f000 	lsl.w	r0, r3, r0
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	4303      	orrs	r3, r0
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e34:	482c      	ldr	r0, [pc, #176]	; (8009ee8 <_vfiprintf_r+0x250>)
 8009e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e3a:	2206      	movs	r2, #6
 8009e3c:	f7f6 f9a8 	bl	8000190 <memchr>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d03f      	beq.n	8009ec4 <_vfiprintf_r+0x22c>
 8009e44:	4b29      	ldr	r3, [pc, #164]	; (8009eec <_vfiprintf_r+0x254>)
 8009e46:	bb1b      	cbnz	r3, 8009e90 <_vfiprintf_r+0x1f8>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	3307      	adds	r3, #7
 8009e4c:	f023 0307 	bic.w	r3, r3, #7
 8009e50:	3308      	adds	r3, #8
 8009e52:	9303      	str	r3, [sp, #12]
 8009e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e56:	443b      	add	r3, r7
 8009e58:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5a:	e767      	b.n	8009d2c <_vfiprintf_r+0x94>
 8009e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e60:	460c      	mov	r4, r1
 8009e62:	2001      	movs	r0, #1
 8009e64:	e7a5      	b.n	8009db2 <_vfiprintf_r+0x11a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	3401      	adds	r4, #1
 8009e6a:	9305      	str	r3, [sp, #20]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f04f 0c0a 	mov.w	ip, #10
 8009e72:	4620      	mov	r0, r4
 8009e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e78:	3a30      	subs	r2, #48	; 0x30
 8009e7a:	2a09      	cmp	r2, #9
 8009e7c:	d903      	bls.n	8009e86 <_vfiprintf_r+0x1ee>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0c5      	beq.n	8009e0e <_vfiprintf_r+0x176>
 8009e82:	9105      	str	r1, [sp, #20]
 8009e84:	e7c3      	b.n	8009e0e <_vfiprintf_r+0x176>
 8009e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e7f0      	b.n	8009e72 <_vfiprintf_r+0x1da>
 8009e90:	ab03      	add	r3, sp, #12
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	462a      	mov	r2, r5
 8009e96:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <_vfiprintf_r+0x258>)
 8009e98:	a904      	add	r1, sp, #16
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	1c78      	adds	r0, r7, #1
 8009ea4:	d1d6      	bne.n	8009e54 <_vfiprintf_r+0x1bc>
 8009ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea8:	07d9      	lsls	r1, r3, #31
 8009eaa:	d405      	bmi.n	8009eb8 <_vfiprintf_r+0x220>
 8009eac:	89ab      	ldrh	r3, [r5, #12]
 8009eae:	059a      	lsls	r2, r3, #22
 8009eb0:	d402      	bmi.n	8009eb8 <_vfiprintf_r+0x220>
 8009eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb4:	f7ff fe31 	bl	8009b1a <__retarget_lock_release_recursive>
 8009eb8:	89ab      	ldrh	r3, [r5, #12]
 8009eba:	065b      	lsls	r3, r3, #25
 8009ebc:	f53f af12 	bmi.w	8009ce4 <_vfiprintf_r+0x4c>
 8009ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec2:	e711      	b.n	8009ce8 <_vfiprintf_r+0x50>
 8009ec4:	ab03      	add	r3, sp, #12
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <_vfiprintf_r+0x258>)
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f000 f880 	bl	8009fd4 <_printf_i>
 8009ed4:	e7e4      	b.n	8009ea0 <_vfiprintf_r+0x208>
 8009ed6:	bf00      	nop
 8009ed8:	0800abd8 	.word	0x0800abd8
 8009edc:	0800abf8 	.word	0x0800abf8
 8009ee0:	0800abb8 	.word	0x0800abb8
 8009ee4:	0800ac18 	.word	0x0800ac18
 8009ee8:	0800ac22 	.word	0x0800ac22
 8009eec:	00000000 	.word	0x00000000
 8009ef0:	08009c73 	.word	0x08009c73
 8009ef4:	0800ac1e 	.word	0x0800ac1e

08009ef8 <_printf_common>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	4616      	mov	r6, r2
 8009efe:	4699      	mov	r9, r3
 8009f00:	688a      	ldr	r2, [r1, #8]
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	bfb8      	it	lt
 8009f0c:	4613      	movlt	r3, r2
 8009f0e:	6033      	str	r3, [r6, #0]
 8009f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f14:	4607      	mov	r7, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	b10a      	cbz	r2, 8009f1e <_printf_common+0x26>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	0699      	lsls	r1, r3, #26
 8009f22:	bf42      	ittt	mi
 8009f24:	6833      	ldrmi	r3, [r6, #0]
 8009f26:	3302      	addmi	r3, #2
 8009f28:	6033      	strmi	r3, [r6, #0]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d106      	bne.n	8009f40 <_printf_common+0x48>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	6832      	ldr	r2, [r6, #0]
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dc26      	bgt.n	8009f8e <_printf_common+0x96>
 8009f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f44:	1e13      	subs	r3, r2, #0
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	bf18      	it	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	0692      	lsls	r2, r2, #26
 8009f4e:	d42b      	bmi.n	8009fa8 <_printf_common+0xb0>
 8009f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f54:	4649      	mov	r1, r9
 8009f56:	4638      	mov	r0, r7
 8009f58:	47c0      	blx	r8
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d01e      	beq.n	8009f9c <_printf_common+0xa4>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	68e5      	ldr	r5, [r4, #12]
 8009f62:	6832      	ldr	r2, [r6, #0]
 8009f64:	f003 0306 	and.w	r3, r3, #6
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	bf08      	it	eq
 8009f6c:	1aad      	subeq	r5, r5, r2
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	bf0c      	ite	eq
 8009f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f78:	2500      	movne	r5, #0
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	bfc4      	itt	gt
 8009f7e:	1a9b      	subgt	r3, r3, r2
 8009f80:	18ed      	addgt	r5, r5, r3
 8009f82:	2600      	movs	r6, #0
 8009f84:	341a      	adds	r4, #26
 8009f86:	42b5      	cmp	r5, r6
 8009f88:	d11a      	bne.n	8009fc0 <_printf_common+0xc8>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e008      	b.n	8009fa0 <_printf_common+0xa8>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	4649      	mov	r1, r9
 8009f94:	4638      	mov	r0, r7
 8009f96:	47c0      	blx	r8
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d103      	bne.n	8009fa4 <_printf_common+0xac>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	e7c6      	b.n	8009f36 <_printf_common+0x3e>
 8009fa8:	18e1      	adds	r1, r4, r3
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	2030      	movs	r0, #48	; 0x30
 8009fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb2:	4422      	add	r2, r4
 8009fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	e7c7      	b.n	8009f50 <_printf_common+0x58>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	47c0      	blx	r8
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d0e6      	beq.n	8009f9c <_printf_common+0xa4>
 8009fce:	3601      	adds	r6, #1
 8009fd0:	e7d9      	b.n	8009f86 <_printf_common+0x8e>
	...

08009fd4 <_printf_i>:
 8009fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	7e0f      	ldrb	r7, [r1, #24]
 8009fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fdc:	2f78      	cmp	r7, #120	; 0x78
 8009fde:	4691      	mov	r9, r2
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fea:	d807      	bhi.n	8009ffc <_printf_i+0x28>
 8009fec:	2f62      	cmp	r7, #98	; 0x62
 8009fee:	d80a      	bhi.n	800a006 <_printf_i+0x32>
 8009ff0:	2f00      	cmp	r7, #0
 8009ff2:	f000 80d8 	beq.w	800a1a6 <_printf_i+0x1d2>
 8009ff6:	2f58      	cmp	r7, #88	; 0x58
 8009ff8:	f000 80a3 	beq.w	800a142 <_printf_i+0x16e>
 8009ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a004:	e03a      	b.n	800a07c <_printf_i+0xa8>
 800a006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a00a:	2b15      	cmp	r3, #21
 800a00c:	d8f6      	bhi.n	8009ffc <_printf_i+0x28>
 800a00e:	a101      	add	r1, pc, #4	; (adr r1, 800a014 <_printf_i+0x40>)
 800a010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a014:	0800a06d 	.word	0x0800a06d
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	08009ffd 	.word	0x08009ffd
 800a020:	08009ffd 	.word	0x08009ffd
 800a024:	08009ffd 	.word	0x08009ffd
 800a028:	08009ffd 	.word	0x08009ffd
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	08009ffd 	.word	0x08009ffd
 800a034:	08009ffd 	.word	0x08009ffd
 800a038:	08009ffd 	.word	0x08009ffd
 800a03c:	08009ffd 	.word	0x08009ffd
 800a040:	0800a18d 	.word	0x0800a18d
 800a044:	0800a0b1 	.word	0x0800a0b1
 800a048:	0800a16f 	.word	0x0800a16f
 800a04c:	08009ffd 	.word	0x08009ffd
 800a050:	08009ffd 	.word	0x08009ffd
 800a054:	0800a1af 	.word	0x0800a1af
 800a058:	08009ffd 	.word	0x08009ffd
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	08009ffd 	.word	0x08009ffd
 800a064:	08009ffd 	.word	0x08009ffd
 800a068:	0800a177 	.word	0x0800a177
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	1d1a      	adds	r2, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	602a      	str	r2, [r5, #0]
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0a3      	b.n	800a1c8 <_printf_i+0x1f4>
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	6829      	ldr	r1, [r5, #0]
 800a084:	0606      	lsls	r6, r0, #24
 800a086:	f101 0304 	add.w	r3, r1, #4
 800a08a:	d50a      	bpl.n	800a0a2 <_printf_i+0xce>
 800a08c:	680e      	ldr	r6, [r1, #0]
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	2e00      	cmp	r6, #0
 800a092:	da03      	bge.n	800a09c <_printf_i+0xc8>
 800a094:	232d      	movs	r3, #45	; 0x2d
 800a096:	4276      	negs	r6, r6
 800a098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a09c:	485e      	ldr	r0, [pc, #376]	; (800a218 <_printf_i+0x244>)
 800a09e:	230a      	movs	r3, #10
 800a0a0:	e019      	b.n	800a0d6 <_printf_i+0x102>
 800a0a2:	680e      	ldr	r6, [r1, #0]
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0aa:	bf18      	it	ne
 800a0ac:	b236      	sxthne	r6, r6
 800a0ae:	e7ef      	b.n	800a090 <_printf_i+0xbc>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	1d19      	adds	r1, r3, #4
 800a0b6:	6029      	str	r1, [r5, #0]
 800a0b8:	0601      	lsls	r1, r0, #24
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_i+0xec>
 800a0bc:	681e      	ldr	r6, [r3, #0]
 800a0be:	e002      	b.n	800a0c6 <_printf_i+0xf2>
 800a0c0:	0646      	lsls	r6, r0, #25
 800a0c2:	d5fb      	bpl.n	800a0bc <_printf_i+0xe8>
 800a0c4:	881e      	ldrh	r6, [r3, #0]
 800a0c6:	4854      	ldr	r0, [pc, #336]	; (800a218 <_printf_i+0x244>)
 800a0c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2308      	moveq	r3, #8
 800a0ce:	230a      	movne	r3, #10
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0d6:	6865      	ldr	r5, [r4, #4]
 800a0d8:	60a5      	str	r5, [r4, #8]
 800a0da:	2d00      	cmp	r5, #0
 800a0dc:	bfa2      	ittt	ge
 800a0de:	6821      	ldrge	r1, [r4, #0]
 800a0e0:	f021 0104 	bicge.w	r1, r1, #4
 800a0e4:	6021      	strge	r1, [r4, #0]
 800a0e6:	b90e      	cbnz	r6, 800a0ec <_printf_i+0x118>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	d04d      	beq.n	800a188 <_printf_i+0x1b4>
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0f6:	5dc7      	ldrb	r7, [r0, r7]
 800a0f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0fc:	4637      	mov	r7, r6
 800a0fe:	42bb      	cmp	r3, r7
 800a100:	460e      	mov	r6, r1
 800a102:	d9f4      	bls.n	800a0ee <_printf_i+0x11a>
 800a104:	2b08      	cmp	r3, #8
 800a106:	d10b      	bne.n	800a120 <_printf_i+0x14c>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	07de      	lsls	r6, r3, #31
 800a10c:	d508      	bpl.n	800a120 <_printf_i+0x14c>
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	6861      	ldr	r1, [r4, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	bfde      	ittt	le
 800a116:	2330      	movle	r3, #48	; 0x30
 800a118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a11c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a120:	1b52      	subs	r2, r2, r5
 800a122:	6122      	str	r2, [r4, #16]
 800a124:	f8cd a000 	str.w	sl, [sp]
 800a128:	464b      	mov	r3, r9
 800a12a:	aa03      	add	r2, sp, #12
 800a12c:	4621      	mov	r1, r4
 800a12e:	4640      	mov	r0, r8
 800a130:	f7ff fee2 	bl	8009ef8 <_printf_common>
 800a134:	3001      	adds	r0, #1
 800a136:	d14c      	bne.n	800a1d2 <_printf_i+0x1fe>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13c:	b004      	add	sp, #16
 800a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a142:	4835      	ldr	r0, [pc, #212]	; (800a218 <_printf_i+0x244>)
 800a144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a148:	6829      	ldr	r1, [r5, #0]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a150:	6029      	str	r1, [r5, #0]
 800a152:	061d      	lsls	r5, r3, #24
 800a154:	d514      	bpl.n	800a180 <_printf_i+0x1ac>
 800a156:	07df      	lsls	r7, r3, #31
 800a158:	bf44      	itt	mi
 800a15a:	f043 0320 	orrmi.w	r3, r3, #32
 800a15e:	6023      	strmi	r3, [r4, #0]
 800a160:	b91e      	cbnz	r6, 800a16a <_printf_i+0x196>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	f023 0320 	bic.w	r3, r3, #32
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	2310      	movs	r3, #16
 800a16c:	e7b0      	b.n	800a0d0 <_printf_i+0xfc>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	f043 0320 	orr.w	r3, r3, #32
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	2378      	movs	r3, #120	; 0x78
 800a178:	4828      	ldr	r0, [pc, #160]	; (800a21c <_printf_i+0x248>)
 800a17a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a17e:	e7e3      	b.n	800a148 <_printf_i+0x174>
 800a180:	0659      	lsls	r1, r3, #25
 800a182:	bf48      	it	mi
 800a184:	b2b6      	uxthmi	r6, r6
 800a186:	e7e6      	b.n	800a156 <_printf_i+0x182>
 800a188:	4615      	mov	r5, r2
 800a18a:	e7bb      	b.n	800a104 <_printf_i+0x130>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	6826      	ldr	r6, [r4, #0]
 800a190:	6961      	ldr	r1, [r4, #20]
 800a192:	1d18      	adds	r0, r3, #4
 800a194:	6028      	str	r0, [r5, #0]
 800a196:	0635      	lsls	r5, r6, #24
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	d501      	bpl.n	800a1a0 <_printf_i+0x1cc>
 800a19c:	6019      	str	r1, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <_printf_i+0x1d2>
 800a1a0:	0670      	lsls	r0, r6, #25
 800a1a2:	d5fb      	bpl.n	800a19c <_printf_i+0x1c8>
 800a1a4:	8019      	strh	r1, [r3, #0]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	4615      	mov	r5, r2
 800a1ac:	e7ba      	b.n	800a124 <_printf_i+0x150>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	1d1a      	adds	r2, r3, #4
 800a1b2:	602a      	str	r2, [r5, #0]
 800a1b4:	681d      	ldr	r5, [r3, #0]
 800a1b6:	6862      	ldr	r2, [r4, #4]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f7f5 ffe8 	bl	8000190 <memchr>
 800a1c0:	b108      	cbz	r0, 800a1c6 <_printf_i+0x1f2>
 800a1c2:	1b40      	subs	r0, r0, r5
 800a1c4:	6060      	str	r0, [r4, #4]
 800a1c6:	6863      	ldr	r3, [r4, #4]
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d0:	e7a8      	b.n	800a124 <_printf_i+0x150>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	47d0      	blx	sl
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d0ab      	beq.n	800a138 <_printf_i+0x164>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	079b      	lsls	r3, r3, #30
 800a1e4:	d413      	bmi.n	800a20e <_printf_i+0x23a>
 800a1e6:	68e0      	ldr	r0, [r4, #12]
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	4298      	cmp	r0, r3
 800a1ec:	bfb8      	it	lt
 800a1ee:	4618      	movlt	r0, r3
 800a1f0:	e7a4      	b.n	800a13c <_printf_i+0x168>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	47d0      	blx	sl
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d09b      	beq.n	800a138 <_printf_i+0x164>
 800a200:	3501      	adds	r5, #1
 800a202:	68e3      	ldr	r3, [r4, #12]
 800a204:	9903      	ldr	r1, [sp, #12]
 800a206:	1a5b      	subs	r3, r3, r1
 800a208:	42ab      	cmp	r3, r5
 800a20a:	dcf2      	bgt.n	800a1f2 <_printf_i+0x21e>
 800a20c:	e7eb      	b.n	800a1e6 <_printf_i+0x212>
 800a20e:	2500      	movs	r5, #0
 800a210:	f104 0619 	add.w	r6, r4, #25
 800a214:	e7f5      	b.n	800a202 <_printf_i+0x22e>
 800a216:	bf00      	nop
 800a218:	0800ac29 	.word	0x0800ac29
 800a21c:	0800ac3a 	.word	0x0800ac3a

0800a220 <_sbrk_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d06      	ldr	r5, [pc, #24]	; (800a23c <_sbrk_r+0x1c>)
 800a224:	2300      	movs	r3, #0
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f8 f884 	bl	8002338 <_sbrk>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_sbrk_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_sbrk_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	20000d28 	.word	0x20000d28

0800a240 <__sread>:
 800a240:	b510      	push	{r4, lr}
 800a242:	460c      	mov	r4, r1
 800a244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a248:	f000 fab2 	bl	800a7b0 <_read_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	bfab      	itete	ge
 800a250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a252:	89a3      	ldrhlt	r3, [r4, #12]
 800a254:	181b      	addge	r3, r3, r0
 800a256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a25a:	bfac      	ite	ge
 800a25c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a25e:	81a3      	strhlt	r3, [r4, #12]
 800a260:	bd10      	pop	{r4, pc}

0800a262 <__swrite>:
 800a262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a266:	461f      	mov	r7, r3
 800a268:	898b      	ldrh	r3, [r1, #12]
 800a26a:	05db      	lsls	r3, r3, #23
 800a26c:	4605      	mov	r5, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	4616      	mov	r6, r2
 800a272:	d505      	bpl.n	800a280 <__swrite+0x1e>
 800a274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a278:	2302      	movs	r3, #2
 800a27a:	2200      	movs	r2, #0
 800a27c:	f000 f9c8 	bl	800a610 <_lseek_r>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	f000 b869 	b.w	800a36c <_write_r>

0800a29a <__sseek>:
 800a29a:	b510      	push	{r4, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a2:	f000 f9b5 	bl	800a610 <_lseek_r>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	bf15      	itete	ne
 800a2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2b6:	81a3      	strheq	r3, [r4, #12]
 800a2b8:	bf18      	it	ne
 800a2ba:	81a3      	strhne	r3, [r4, #12]
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <__sclose>:
 800a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c2:	f000 b8d3 	b.w	800a46c <_close_r>
	...

0800a2c8 <__swbuf_r>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	460e      	mov	r6, r1
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	b118      	cbz	r0, 800a2da <__swbuf_r+0x12>
 800a2d2:	6983      	ldr	r3, [r0, #24]
 800a2d4:	b90b      	cbnz	r3, 800a2da <__swbuf_r+0x12>
 800a2d6:	f7ff fb81 	bl	80099dc <__sinit>
 800a2da:	4b21      	ldr	r3, [pc, #132]	; (800a360 <__swbuf_r+0x98>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d12b      	bne.n	800a338 <__swbuf_r+0x70>
 800a2e0:	686c      	ldr	r4, [r5, #4]
 800a2e2:	69a3      	ldr	r3, [r4, #24]
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	071a      	lsls	r2, r3, #28
 800a2ea:	d52f      	bpl.n	800a34c <__swbuf_r+0x84>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b36b      	cbz	r3, 800a34c <__swbuf_r+0x84>
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	6820      	ldr	r0, [r4, #0]
 800a2f4:	1ac0      	subs	r0, r0, r3
 800a2f6:	6963      	ldr	r3, [r4, #20]
 800a2f8:	b2f6      	uxtb	r6, r6
 800a2fa:	4283      	cmp	r3, r0
 800a2fc:	4637      	mov	r7, r6
 800a2fe:	dc04      	bgt.n	800a30a <__swbuf_r+0x42>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f948 	bl	800a598 <_fflush_r>
 800a308:	bb30      	cbnz	r0, 800a358 <__swbuf_r+0x90>
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	60a3      	str	r3, [r4, #8]
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	6022      	str	r2, [r4, #0]
 800a316:	701e      	strb	r6, [r3, #0]
 800a318:	6963      	ldr	r3, [r4, #20]
 800a31a:	3001      	adds	r0, #1
 800a31c:	4283      	cmp	r3, r0
 800a31e:	d004      	beq.n	800a32a <__swbuf_r+0x62>
 800a320:	89a3      	ldrh	r3, [r4, #12]
 800a322:	07db      	lsls	r3, r3, #31
 800a324:	d506      	bpl.n	800a334 <__swbuf_r+0x6c>
 800a326:	2e0a      	cmp	r6, #10
 800a328:	d104      	bne.n	800a334 <__swbuf_r+0x6c>
 800a32a:	4621      	mov	r1, r4
 800a32c:	4628      	mov	r0, r5
 800a32e:	f000 f933 	bl	800a598 <_fflush_r>
 800a332:	b988      	cbnz	r0, 800a358 <__swbuf_r+0x90>
 800a334:	4638      	mov	r0, r7
 800a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a338:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <__swbuf_r+0x9c>)
 800a33a:	429c      	cmp	r4, r3
 800a33c:	d101      	bne.n	800a342 <__swbuf_r+0x7a>
 800a33e:	68ac      	ldr	r4, [r5, #8]
 800a340:	e7cf      	b.n	800a2e2 <__swbuf_r+0x1a>
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <__swbuf_r+0xa0>)
 800a344:	429c      	cmp	r4, r3
 800a346:	bf08      	it	eq
 800a348:	68ec      	ldreq	r4, [r5, #12]
 800a34a:	e7ca      	b.n	800a2e2 <__swbuf_r+0x1a>
 800a34c:	4621      	mov	r1, r4
 800a34e:	4628      	mov	r0, r5
 800a350:	f000 f81e 	bl	800a390 <__swsetup_r>
 800a354:	2800      	cmp	r0, #0
 800a356:	d0cb      	beq.n	800a2f0 <__swbuf_r+0x28>
 800a358:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a35c:	e7ea      	b.n	800a334 <__swbuf_r+0x6c>
 800a35e:	bf00      	nop
 800a360:	0800abd8 	.word	0x0800abd8
 800a364:	0800abf8 	.word	0x0800abf8
 800a368:	0800abb8 	.word	0x0800abb8

0800a36c <_write_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d07      	ldr	r5, [pc, #28]	; (800a38c <_write_r+0x20>)
 800a370:	4604      	mov	r4, r0
 800a372:	4608      	mov	r0, r1
 800a374:	4611      	mov	r1, r2
 800a376:	2200      	movs	r2, #0
 800a378:	602a      	str	r2, [r5, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f7f7 ff8b 	bl	8002296 <_write>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_write_r+0x1e>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_write_r+0x1e>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20000d28 	.word	0x20000d28

0800a390 <__swsetup_r>:
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <__swsetup_r+0xcc>)
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	681d      	ldr	r5, [r3, #0]
 800a396:	4606      	mov	r6, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	b125      	cbz	r5, 800a3a6 <__swsetup_r+0x16>
 800a39c:	69ab      	ldr	r3, [r5, #24]
 800a39e:	b913      	cbnz	r3, 800a3a6 <__swsetup_r+0x16>
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	f7ff fb1b 	bl	80099dc <__sinit>
 800a3a6:	4b2e      	ldr	r3, [pc, #184]	; (800a460 <__swsetup_r+0xd0>)
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	d10f      	bne.n	800a3cc <__swsetup_r+0x3c>
 800a3ac:	686c      	ldr	r4, [r5, #4]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b4:	0719      	lsls	r1, r3, #28
 800a3b6:	d42c      	bmi.n	800a412 <__swsetup_r+0x82>
 800a3b8:	06dd      	lsls	r5, r3, #27
 800a3ba:	d411      	bmi.n	800a3e0 <__swsetup_r+0x50>
 800a3bc:	2309      	movs	r3, #9
 800a3be:	6033      	str	r3, [r6, #0]
 800a3c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ca:	e03e      	b.n	800a44a <__swsetup_r+0xba>
 800a3cc:	4b25      	ldr	r3, [pc, #148]	; (800a464 <__swsetup_r+0xd4>)
 800a3ce:	429c      	cmp	r4, r3
 800a3d0:	d101      	bne.n	800a3d6 <__swsetup_r+0x46>
 800a3d2:	68ac      	ldr	r4, [r5, #8]
 800a3d4:	e7eb      	b.n	800a3ae <__swsetup_r+0x1e>
 800a3d6:	4b24      	ldr	r3, [pc, #144]	; (800a468 <__swsetup_r+0xd8>)
 800a3d8:	429c      	cmp	r4, r3
 800a3da:	bf08      	it	eq
 800a3dc:	68ec      	ldreq	r4, [r5, #12]
 800a3de:	e7e6      	b.n	800a3ae <__swsetup_r+0x1e>
 800a3e0:	0758      	lsls	r0, r3, #29
 800a3e2:	d512      	bpl.n	800a40a <__swsetup_r+0x7a>
 800a3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3e6:	b141      	cbz	r1, 800a3fa <__swsetup_r+0x6a>
 800a3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ec:	4299      	cmp	r1, r3
 800a3ee:	d002      	beq.n	800a3f6 <__swsetup_r+0x66>
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f000 f991 	bl	800a718 <_free_r>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6363      	str	r3, [r4, #52]	; 0x34
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	2300      	movs	r3, #0
 800a404:	6063      	str	r3, [r4, #4]
 800a406:	6923      	ldr	r3, [r4, #16]
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f043 0308 	orr.w	r3, r3, #8
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	b94b      	cbnz	r3, 800a42a <__swsetup_r+0x9a>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a420:	d003      	beq.n	800a42a <__swsetup_r+0x9a>
 800a422:	4621      	mov	r1, r4
 800a424:	4630      	mov	r0, r6
 800a426:	f000 f92b 	bl	800a680 <__smakebuf_r>
 800a42a:	89a0      	ldrh	r0, [r4, #12]
 800a42c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a430:	f010 0301 	ands.w	r3, r0, #1
 800a434:	d00a      	beq.n	800a44c <__swsetup_r+0xbc>
 800a436:	2300      	movs	r3, #0
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	6963      	ldr	r3, [r4, #20]
 800a43c:	425b      	negs	r3, r3
 800a43e:	61a3      	str	r3, [r4, #24]
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	b943      	cbnz	r3, 800a456 <__swsetup_r+0xc6>
 800a444:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a448:	d1ba      	bne.n	800a3c0 <__swsetup_r+0x30>
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	0781      	lsls	r1, r0, #30
 800a44e:	bf58      	it	pl
 800a450:	6963      	ldrpl	r3, [r4, #20]
 800a452:	60a3      	str	r3, [r4, #8]
 800a454:	e7f4      	b.n	800a440 <__swsetup_r+0xb0>
 800a456:	2000      	movs	r0, #0
 800a458:	e7f7      	b.n	800a44a <__swsetup_r+0xba>
 800a45a:	bf00      	nop
 800a45c:	20000028 	.word	0x20000028
 800a460:	0800abd8 	.word	0x0800abd8
 800a464:	0800abf8 	.word	0x0800abf8
 800a468:	0800abb8 	.word	0x0800abb8

0800a46c <_close_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d06      	ldr	r5, [pc, #24]	; (800a488 <_close_r+0x1c>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	602b      	str	r3, [r5, #0]
 800a478:	f7f7 ff29 	bl	80022ce <_close>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_close_r+0x1a>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_close_r+0x1a>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20000d28 	.word	0x20000d28

0800a48c <__sflush_r>:
 800a48c:	898a      	ldrh	r2, [r1, #12]
 800a48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	0710      	lsls	r0, r2, #28
 800a496:	460c      	mov	r4, r1
 800a498:	d458      	bmi.n	800a54c <__sflush_r+0xc0>
 800a49a:	684b      	ldr	r3, [r1, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	dc05      	bgt.n	800a4ac <__sflush_r+0x20>
 800a4a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc02      	bgt.n	800a4ac <__sflush_r+0x20>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	d0f9      	beq.n	800a4a6 <__sflush_r+0x1a>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4b8:	682f      	ldr	r7, [r5, #0]
 800a4ba:	602b      	str	r3, [r5, #0]
 800a4bc:	d032      	beq.n	800a524 <__sflush_r+0x98>
 800a4be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	075a      	lsls	r2, r3, #29
 800a4c4:	d505      	bpl.n	800a4d2 <__sflush_r+0x46>
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	1ac0      	subs	r0, r0, r3
 800a4ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4cc:	b10b      	cbz	r3, 800a4d2 <__sflush_r+0x46>
 800a4ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4d0:	1ac0      	subs	r0, r0, r3
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4d8:	6a21      	ldr	r1, [r4, #32]
 800a4da:	4628      	mov	r0, r5
 800a4dc:	47b0      	blx	r6
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	d106      	bne.n	800a4f2 <__sflush_r+0x66>
 800a4e4:	6829      	ldr	r1, [r5, #0]
 800a4e6:	291d      	cmp	r1, #29
 800a4e8:	d82c      	bhi.n	800a544 <__sflush_r+0xb8>
 800a4ea:	4a2a      	ldr	r2, [pc, #168]	; (800a594 <__sflush_r+0x108>)
 800a4ec:	40ca      	lsrs	r2, r1
 800a4ee:	07d6      	lsls	r6, r2, #31
 800a4f0:	d528      	bpl.n	800a544 <__sflush_r+0xb8>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	6062      	str	r2, [r4, #4]
 800a4f6:	04d9      	lsls	r1, r3, #19
 800a4f8:	6922      	ldr	r2, [r4, #16]
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	d504      	bpl.n	800a508 <__sflush_r+0x7c>
 800a4fe:	1c42      	adds	r2, r0, #1
 800a500:	d101      	bne.n	800a506 <__sflush_r+0x7a>
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	b903      	cbnz	r3, 800a508 <__sflush_r+0x7c>
 800a506:	6560      	str	r0, [r4, #84]	; 0x54
 800a508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a50a:	602f      	str	r7, [r5, #0]
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d0ca      	beq.n	800a4a6 <__sflush_r+0x1a>
 800a510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a514:	4299      	cmp	r1, r3
 800a516:	d002      	beq.n	800a51e <__sflush_r+0x92>
 800a518:	4628      	mov	r0, r5
 800a51a:	f000 f8fd 	bl	800a718 <_free_r>
 800a51e:	2000      	movs	r0, #0
 800a520:	6360      	str	r0, [r4, #52]	; 0x34
 800a522:	e7c1      	b.n	800a4a8 <__sflush_r+0x1c>
 800a524:	6a21      	ldr	r1, [r4, #32]
 800a526:	2301      	movs	r3, #1
 800a528:	4628      	mov	r0, r5
 800a52a:	47b0      	blx	r6
 800a52c:	1c41      	adds	r1, r0, #1
 800a52e:	d1c7      	bne.n	800a4c0 <__sflush_r+0x34>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0c4      	beq.n	800a4c0 <__sflush_r+0x34>
 800a536:	2b1d      	cmp	r3, #29
 800a538:	d001      	beq.n	800a53e <__sflush_r+0xb2>
 800a53a:	2b16      	cmp	r3, #22
 800a53c:	d101      	bne.n	800a542 <__sflush_r+0xb6>
 800a53e:	602f      	str	r7, [r5, #0]
 800a540:	e7b1      	b.n	800a4a6 <__sflush_r+0x1a>
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	e7ad      	b.n	800a4a8 <__sflush_r+0x1c>
 800a54c:	690f      	ldr	r7, [r1, #16]
 800a54e:	2f00      	cmp	r7, #0
 800a550:	d0a9      	beq.n	800a4a6 <__sflush_r+0x1a>
 800a552:	0793      	lsls	r3, r2, #30
 800a554:	680e      	ldr	r6, [r1, #0]
 800a556:	bf08      	it	eq
 800a558:	694b      	ldreq	r3, [r1, #20]
 800a55a:	600f      	str	r7, [r1, #0]
 800a55c:	bf18      	it	ne
 800a55e:	2300      	movne	r3, #0
 800a560:	eba6 0807 	sub.w	r8, r6, r7
 800a564:	608b      	str	r3, [r1, #8]
 800a566:	f1b8 0f00 	cmp.w	r8, #0
 800a56a:	dd9c      	ble.n	800a4a6 <__sflush_r+0x1a>
 800a56c:	6a21      	ldr	r1, [r4, #32]
 800a56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a570:	4643      	mov	r3, r8
 800a572:	463a      	mov	r2, r7
 800a574:	4628      	mov	r0, r5
 800a576:	47b0      	blx	r6
 800a578:	2800      	cmp	r0, #0
 800a57a:	dc06      	bgt.n	800a58a <__sflush_r+0xfe>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a588:	e78e      	b.n	800a4a8 <__sflush_r+0x1c>
 800a58a:	4407      	add	r7, r0
 800a58c:	eba8 0800 	sub.w	r8, r8, r0
 800a590:	e7e9      	b.n	800a566 <__sflush_r+0xda>
 800a592:	bf00      	nop
 800a594:	20400001 	.word	0x20400001

0800a598 <_fflush_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	690b      	ldr	r3, [r1, #16]
 800a59c:	4605      	mov	r5, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b913      	cbnz	r3, 800a5a8 <_fflush_r+0x10>
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	b118      	cbz	r0, 800a5b2 <_fflush_r+0x1a>
 800a5aa:	6983      	ldr	r3, [r0, #24]
 800a5ac:	b90b      	cbnz	r3, 800a5b2 <_fflush_r+0x1a>
 800a5ae:	f7ff fa15 	bl	80099dc <__sinit>
 800a5b2:	4b14      	ldr	r3, [pc, #80]	; (800a604 <_fflush_r+0x6c>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	d11b      	bne.n	800a5f0 <_fflush_r+0x58>
 800a5b8:	686c      	ldr	r4, [r5, #4]
 800a5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0ef      	beq.n	800a5a2 <_fflush_r+0xa>
 800a5c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5c4:	07d0      	lsls	r0, r2, #31
 800a5c6:	d404      	bmi.n	800a5d2 <_fflush_r+0x3a>
 800a5c8:	0599      	lsls	r1, r3, #22
 800a5ca:	d402      	bmi.n	800a5d2 <_fflush_r+0x3a>
 800a5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ce:	f7ff faa3 	bl	8009b18 <__retarget_lock_acquire_recursive>
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f7ff ff59 	bl	800a48c <__sflush_r>
 800a5da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5dc:	07da      	lsls	r2, r3, #31
 800a5de:	4605      	mov	r5, r0
 800a5e0:	d4e0      	bmi.n	800a5a4 <_fflush_r+0xc>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	059b      	lsls	r3, r3, #22
 800a5e6:	d4dd      	bmi.n	800a5a4 <_fflush_r+0xc>
 800a5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ea:	f7ff fa96 	bl	8009b1a <__retarget_lock_release_recursive>
 800a5ee:	e7d9      	b.n	800a5a4 <_fflush_r+0xc>
 800a5f0:	4b05      	ldr	r3, [pc, #20]	; (800a608 <_fflush_r+0x70>)
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d101      	bne.n	800a5fa <_fflush_r+0x62>
 800a5f6:	68ac      	ldr	r4, [r5, #8]
 800a5f8:	e7df      	b.n	800a5ba <_fflush_r+0x22>
 800a5fa:	4b04      	ldr	r3, [pc, #16]	; (800a60c <_fflush_r+0x74>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	bf08      	it	eq
 800a600:	68ec      	ldreq	r4, [r5, #12]
 800a602:	e7da      	b.n	800a5ba <_fflush_r+0x22>
 800a604:	0800abd8 	.word	0x0800abd8
 800a608:	0800abf8 	.word	0x0800abf8
 800a60c:	0800abb8 	.word	0x0800abb8

0800a610 <_lseek_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	; (800a630 <_lseek_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f7 fe7c 	bl	800231c <_lseek>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_lseek_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_lseek_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	20000d28 	.word	0x20000d28

0800a634 <__swhatbuf_r>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	460e      	mov	r6, r1
 800a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63c:	2900      	cmp	r1, #0
 800a63e:	b096      	sub	sp, #88	; 0x58
 800a640:	4614      	mov	r4, r2
 800a642:	461d      	mov	r5, r3
 800a644:	da08      	bge.n	800a658 <__swhatbuf_r+0x24>
 800a646:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	061a      	lsls	r2, r3, #24
 800a650:	d410      	bmi.n	800a674 <__swhatbuf_r+0x40>
 800a652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a656:	e00e      	b.n	800a676 <__swhatbuf_r+0x42>
 800a658:	466a      	mov	r2, sp
 800a65a:	f000 f8bb 	bl	800a7d4 <_fstat_r>
 800a65e:	2800      	cmp	r0, #0
 800a660:	dbf1      	blt.n	800a646 <__swhatbuf_r+0x12>
 800a662:	9a01      	ldr	r2, [sp, #4]
 800a664:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a668:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a66c:	425a      	negs	r2, r3
 800a66e:	415a      	adcs	r2, r3
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	e7ee      	b.n	800a652 <__swhatbuf_r+0x1e>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	2000      	movs	r0, #0
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	b016      	add	sp, #88	; 0x58
 800a67c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a680 <__smakebuf_r>:
 800a680:	898b      	ldrh	r3, [r1, #12]
 800a682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a684:	079d      	lsls	r5, r3, #30
 800a686:	4606      	mov	r6, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	d507      	bpl.n	800a69c <__smakebuf_r+0x1c>
 800a68c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	2301      	movs	r3, #1
 800a696:	6163      	str	r3, [r4, #20]
 800a698:	b002      	add	sp, #8
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	ab01      	add	r3, sp, #4
 800a69e:	466a      	mov	r2, sp
 800a6a0:	f7ff ffc8 	bl	800a634 <__swhatbuf_r>
 800a6a4:	9900      	ldr	r1, [sp, #0]
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff fa57 	bl	8009b5c <_malloc_r>
 800a6ae:	b948      	cbnz	r0, 800a6c4 <__smakebuf_r+0x44>
 800a6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d4ef      	bmi.n	800a698 <__smakebuf_r+0x18>
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	f043 0302 	orr.w	r3, r3, #2
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	e7e3      	b.n	800a68c <__smakebuf_r+0xc>
 800a6c4:	4b0d      	ldr	r3, [pc, #52]	; (800a6fc <__smakebuf_r+0x7c>)
 800a6c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	6020      	str	r0, [r4, #0]
 800a6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	9b00      	ldr	r3, [sp, #0]
 800a6d4:	6163      	str	r3, [r4, #20]
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	6120      	str	r0, [r4, #16]
 800a6da:	b15b      	cbz	r3, 800a6f4 <__smakebuf_r+0x74>
 800a6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f000 f889 	bl	800a7f8 <_isatty_r>
 800a6e6:	b128      	cbz	r0, 800a6f4 <__smakebuf_r+0x74>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	f023 0303 	bic.w	r3, r3, #3
 800a6ee:	f043 0301 	orr.w	r3, r3, #1
 800a6f2:	81a3      	strh	r3, [r4, #12]
 800a6f4:	89a0      	ldrh	r0, [r4, #12]
 800a6f6:	4305      	orrs	r5, r0
 800a6f8:	81a5      	strh	r5, [r4, #12]
 800a6fa:	e7cd      	b.n	800a698 <__smakebuf_r+0x18>
 800a6fc:	08009975 	.word	0x08009975

0800a700 <__malloc_lock>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__malloc_lock+0x8>)
 800a702:	f7ff ba09 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 800a706:	bf00      	nop
 800a708:	20000d1c 	.word	0x20000d1c

0800a70c <__malloc_unlock>:
 800a70c:	4801      	ldr	r0, [pc, #4]	; (800a714 <__malloc_unlock+0x8>)
 800a70e:	f7ff ba04 	b.w	8009b1a <__retarget_lock_release_recursive>
 800a712:	bf00      	nop
 800a714:	20000d1c 	.word	0x20000d1c

0800a718 <_free_r>:
 800a718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a71a:	2900      	cmp	r1, #0
 800a71c:	d044      	beq.n	800a7a8 <_free_r+0x90>
 800a71e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a722:	9001      	str	r0, [sp, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	f1a1 0404 	sub.w	r4, r1, #4
 800a72a:	bfb8      	it	lt
 800a72c:	18e4      	addlt	r4, r4, r3
 800a72e:	f7ff ffe7 	bl	800a700 <__malloc_lock>
 800a732:	4a1e      	ldr	r2, [pc, #120]	; (800a7ac <_free_r+0x94>)
 800a734:	9801      	ldr	r0, [sp, #4]
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	b933      	cbnz	r3, 800a748 <_free_r+0x30>
 800a73a:	6063      	str	r3, [r4, #4]
 800a73c:	6014      	str	r4, [r2, #0]
 800a73e:	b003      	add	sp, #12
 800a740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a744:	f7ff bfe2 	b.w	800a70c <__malloc_unlock>
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d908      	bls.n	800a75e <_free_r+0x46>
 800a74c:	6825      	ldr	r5, [r4, #0]
 800a74e:	1961      	adds	r1, r4, r5
 800a750:	428b      	cmp	r3, r1
 800a752:	bf01      	itttt	eq
 800a754:	6819      	ldreq	r1, [r3, #0]
 800a756:	685b      	ldreq	r3, [r3, #4]
 800a758:	1949      	addeq	r1, r1, r5
 800a75a:	6021      	streq	r1, [r4, #0]
 800a75c:	e7ed      	b.n	800a73a <_free_r+0x22>
 800a75e:	461a      	mov	r2, r3
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	b10b      	cbz	r3, 800a768 <_free_r+0x50>
 800a764:	42a3      	cmp	r3, r4
 800a766:	d9fa      	bls.n	800a75e <_free_r+0x46>
 800a768:	6811      	ldr	r1, [r2, #0]
 800a76a:	1855      	adds	r5, r2, r1
 800a76c:	42a5      	cmp	r5, r4
 800a76e:	d10b      	bne.n	800a788 <_free_r+0x70>
 800a770:	6824      	ldr	r4, [r4, #0]
 800a772:	4421      	add	r1, r4
 800a774:	1854      	adds	r4, r2, r1
 800a776:	42a3      	cmp	r3, r4
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	d1e0      	bne.n	800a73e <_free_r+0x26>
 800a77c:	681c      	ldr	r4, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	6053      	str	r3, [r2, #4]
 800a782:	4421      	add	r1, r4
 800a784:	6011      	str	r1, [r2, #0]
 800a786:	e7da      	b.n	800a73e <_free_r+0x26>
 800a788:	d902      	bls.n	800a790 <_free_r+0x78>
 800a78a:	230c      	movs	r3, #12
 800a78c:	6003      	str	r3, [r0, #0]
 800a78e:	e7d6      	b.n	800a73e <_free_r+0x26>
 800a790:	6825      	ldr	r5, [r4, #0]
 800a792:	1961      	adds	r1, r4, r5
 800a794:	428b      	cmp	r3, r1
 800a796:	bf04      	itt	eq
 800a798:	6819      	ldreq	r1, [r3, #0]
 800a79a:	685b      	ldreq	r3, [r3, #4]
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	bf04      	itt	eq
 800a7a0:	1949      	addeq	r1, r1, r5
 800a7a2:	6021      	streq	r1, [r4, #0]
 800a7a4:	6054      	str	r4, [r2, #4]
 800a7a6:	e7ca      	b.n	800a73e <_free_r+0x26>
 800a7a8:	b003      	add	sp, #12
 800a7aa:	bd30      	pop	{r4, r5, pc}
 800a7ac:	20000d20 	.word	0x20000d20

0800a7b0 <_read_r>:
 800a7b0:	b538      	push	{r3, r4, r5, lr}
 800a7b2:	4d07      	ldr	r5, [pc, #28]	; (800a7d0 <_read_r+0x20>)
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	4608      	mov	r0, r1
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	602a      	str	r2, [r5, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	f7f7 fd4c 	bl	800225c <_read>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_read_r+0x1e>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_read_r+0x1e>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	20000d28 	.word	0x20000d28

0800a7d4 <_fstat_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_fstat_r+0x20>)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	4611      	mov	r1, r2
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	f7f7 fd80 	bl	80022e6 <_fstat>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	d102      	bne.n	800a7f0 <_fstat_r+0x1c>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	b103      	cbz	r3, 800a7f0 <_fstat_r+0x1c>
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	bd38      	pop	{r3, r4, r5, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000d28 	.word	0x20000d28

0800a7f8 <_isatty_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d06      	ldr	r5, [pc, #24]	; (800a814 <_isatty_r+0x1c>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7f7 fd7f 	bl	8002306 <_isatty>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_isatty_r+0x1a>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_isatty_r+0x1a>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20000d28 	.word	0x20000d28

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
