
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a300  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800a440  0800a440  0001a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a7a8  0800a7a8  0001a7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a7b0  0800a7b0  0001a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a7b4  0800a7b4  0001a7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800a7b8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800a83c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800b0bf  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800b0f4  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003dc  2000095c  0800b105  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d38  0800b105  00020d38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   000305db  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ea3  00000000  00000000  00050f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029f8  00000000  00000000  00056e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002750  00000000  00000000  00059800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d140  00000000  00000000  0005bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ee11  00000000  00000000  00089090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa6e1  00000000  00000000  000b7ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b2582  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b774  00000000  00000000  001b25d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a428 	.word	0x0800a428

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800a428 	.word	0x0800a428

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:
******************************************************************************/

#include "BH1790GLC.h"

uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->measurements[0] = 0.0f;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
	dev->measurements[1] = 0.0f;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	dev->measurements[2] = 0.0f;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
	dev->measurement = 0.0f;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

	/* Keep count of errors */
	uint8_t errNum = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
	 * get mid val				0xE0
	 * get pid val				0x0D
	 */
	uint8_t regData;

	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000568:	f107 030d 	add.w	r3, r7, #13
 800056c:	461a      	mov	r2, r3
 800056e:	210f      	movs	r1, #15
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f85e 	bl	8000632 <read>
 8000576:	4603      	mov	r3, r0
 8000578:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	2b00      	cmp	r3, #0
 800057e:	bf14      	ite	ne
 8000580:	2301      	movne	r3, #1
 8000582:	2300      	moveq	r3, #0
 8000584:	b2db      	uxtb	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	4413      	add	r3, r2
 800058c:	73fb      	strb	r3, [r7, #15]
	if(regData != 0xE0){
 800058e:	7b7b      	ldrb	r3, [r7, #13]
 8000590:	2be0      	cmp	r3, #224	; 0xe0
 8000592:	d001      	beq.n	8000598 <BH1790GLC_init+0x64>
		//error
		return 1;
 8000594:	2301      	movs	r3, #1
 8000596:	e048      	b.n	800062a <BH1790GLC_init+0xf6>
	}

	status = read(dev, BH1790GLC_MID_VAL, &regData);	//get mid val
 8000598:	f107 030d 	add.w	r3, r7, #13
 800059c:	461a      	mov	r2, r3
 800059e:	21e0      	movs	r1, #224	; 0xe0
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 f846 	bl	8000632 <read>
 80005a6:	4603      	mov	r3, r0
 80005a8:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	bf14      	ite	ne
 80005b0:	2301      	movne	r3, #1
 80005b2:	2300      	moveq	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4413      	add	r3, r2
 80005bc:	73fb      	strb	r3, [r7, #15]
	if(regData != 0x00){
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <BH1790GLC_init+0x94>
		//error
		return 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e030      	b.n	800062a <BH1790GLC_init+0xf6>
	}

	status = read(dev, BH1790GLC_PID_VAL, &regData);	//get pid val
 80005c8:	f107 030d 	add.w	r3, r7, #13
 80005cc:	461a      	mov	r2, r3
 80005ce:	210d      	movs	r1, #13
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f82e 	bl	8000632 <read>
 80005d6:	4603      	mov	r3, r0
 80005d8:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80005da:	7bbb      	ldrb	r3, [r7, #14]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bf14      	ite	ne
 80005e0:	2301      	movne	r3, #1
 80005e2:	2300      	moveq	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4413      	add	r3, r2
 80005ec:	73fb      	strb	r3, [r7, #15]
	if(regData != 0x00){
 80005ee:	7b7b      	ldrb	r3, [r7, #13]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <BH1790GLC_init+0xc4>
		//error
		return 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	e018      	b.n	800062a <BH1790GLC_init+0xf6>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 80005f8:	f107 030d 	add.w	r3, r7, #13
 80005fc:	461a      	mov	r2, r3
 80005fe:	2110      	movs	r1, #16
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f816 	bl	8000632 <read>
 8000606:	4603      	mov	r3, r0
 8000608:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4413      	add	r3, r2
 800061c:	73fb      	strb	r3, [r7, #15]
	if(regData != 0x0D){
 800061e:	7b7b      	ldrb	r3, [r7, #13]
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d001      	beq.n	8000628 <BH1790GLC_init+0xf4>
		//error
		return 1;
 8000624:	2301      	movs	r3, #1
 8000626:	e000      	b.n	800062a <BH1790GLC_init+0xf6>
//    printf("Can't write BH1790GLC MEAS_CONTROL1-MEAS_START register\n");
//  }
//
//  return (rc);

	return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <read>:
/*
 * reg : which register in the sensor to read from
 * data : data to write (consider not having this be a pointer?
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b08a      	sub	sp, #40	; 0x28
 8000636:	af04      	add	r7, sp, #16
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	460b      	mov	r3, r1
 800063c:	607a      	str	r2, [r7, #4]
 800063e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	b29a      	uxth	r2, r3
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2301      	movs	r3, #1
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	21b6      	movs	r1, #182	; 0xb6
 800065a:	f002 fb07 	bl	8002c6c <HAL_I2C_Mem_Read>
 800065e:	4603      	mov	r3, r0
 8000660:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){ return ret; }	//error check
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <read+0x3a>
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	e000      	b.n	800066e <read+0x3c>


	return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <APPD_EnableCPU2+0x34>)
 8000680:	1d3c      	adds	r4, r7, #4
 8000682:	461d      	mov	r5, r3
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068c:	c403      	stmia	r4!, {r0, r1}
 800068e:	8022      	strh	r2, [r4, #0]
 8000690:	3402      	adds	r4, #2
 8000692:	0c13      	lsrs	r3, r2, #16
 8000694:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000696:	f007 fcf3 	bl	8008080 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f006 ff8e 	bl	80075be <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80006a2:	bf00      	nop
}
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bdb0      	pop	{r4, r5, r7, pc}
 80006aa:	bf00      	nop
 80006ac:	0800a440 	.word	0x0800a440

080006b0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <LL_C2_PWR_SetPowerMode+0x28>)
 80006ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006be:	f023 0207 	bic.w	r2, r3, #7
 80006c2:	4905      	ldr	r1, [pc, #20]	; (80006d8 <LL_C2_PWR_SetPowerMode+0x28>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	58000400 	.word	0x58000400

080006dc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_EXTI_EnableIT_32_63+0x24>)
 80006e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80006ea:	4905      	ldr	r1, [pc, #20]	; (8000700 <LL_EXTI_EnableIT_32_63+0x24>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58000800 	.word	0x58000800

08000704 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000712:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800071e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800072a:	4313      	orrs	r3, r2
 800072c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	cafecafe 	.word	0xcafecafe

08000740 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	608b      	str	r3, [r1, #8]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800076c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800079a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800079e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80007c0:	d101      	bne.n	80007c6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80007c2:	2301      	movs	r3, #1
 80007c4:	e000      	b.n	80007c8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80007e6:	d101      	bne.n	80007ec <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e000      	b.n	80007ee <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081c:	68fb      	ldr	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <LL_DBGMCU_GetDeviceID+0x18>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e0042000 	.word	0xe0042000

08000848 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <LL_DBGMCU_GetRevisionID+0x18>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	0c1b      	lsrs	r3, r3, #16
 8000852:	b29b      	uxth	r3, r3
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e0042000 	.word	0xe0042000

08000864 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	041b      	lsls	r3, r3, #16
 8000876:	431a      	orrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	431a      	orrs	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	605a      	str	r2, [r3, #4]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	041b      	lsls	r3, r3, #16
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	615a      	str	r2, [r3, #20]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	431a      	orrs	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	615a      	str	r2, [r3, #20]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	609a      	str	r2, [r3, #8]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	619a      	str	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <LL_LPM_EnableSleep+0x1c>)
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <LL_LPM_EnableSleep+0x1c>)
 8000932:	f023 0304 	bic.w	r3, r3, #4
 8000936:	6113      	str	r3, [r2, #16]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	22ca      	movs	r2, #202	; 0xca
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2253      	movs	r2, #83	; 0x53
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f023 0207 	bic.w	r2, r3, #7
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	431a      	orrs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	609a      	str	r2, [r3, #8]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <MX_APPE_Config+0x18>)
 80009ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80009b4:	f000 f824 	bl	8000a00 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80009b8:	f000 f864 	bl	8000a84 <Config_HSE>

  return;
 80009bc:	bf00      	nop
}
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58004000 	.word	0x58004000

080009c4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80009c8:	f000 f870 	bl	8000aac <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80009cc:	f000 f888 	bl	8000ae0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80009d0:	4903      	ldr	r1, [pc, #12]	; (80009e0 <MX_APPE_Init+0x1c>)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 fdd4 	bl	8001580 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80009d8:	f000 f890 	bl	8000afc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80009dc:	bf00      	nop
}
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000aa8 	.word	0x20000aa8

080009e4 <Init_Smps>:

void Init_Smps(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80009e8:	bf00      	nop
}
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <Init_Exti>:

void Init_Exti(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80009f6:	2050      	movs	r0, #80	; 0x50
 80009f8:	f7ff fe70 	bl	80006dc <LL_EXTI_EnableIT_32_63>

  return;
 80009fc:	bf00      	nop
}
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000a04:	f000 f804 	bl	8000a10 <Reset_BackupDomain>

  Reset_IPCC();
 8000a08:	f000 f81a 	bl	8000a40 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000a0c:	bf00      	nop
}
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000a14:	f7ff feca 	bl	80007ac <LL_RCC_IsActiveFlag_PINRST>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00d      	beq.n	8000a3a <Reset_BackupDomain+0x2a>
 8000a1e:	f7ff fed8 	bl	80007d2 <LL_RCC_IsActiveFlag_SFTRST>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d108      	bne.n	8000a3a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000a28:	f002 fdd6 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000a2c:	f002 fdd4 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000a30:	f7ff fe9a 	bl	8000768 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000a34:	f7ff fea9 	bl	800078a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
}
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000a44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a48:	f7ff fed6 	bl	80007f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000a4c:	213f      	movs	r1, #63	; 0x3f
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <Reset_IPCC+0x40>)
 8000a50:	f7ff ff4e 	bl	80008f0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000a54:	213f      	movs	r1, #63	; 0x3f
 8000a56:	480a      	ldr	r0, [pc, #40]	; (8000a80 <Reset_IPCC+0x40>)
 8000a58:	f7ff ff58 	bl	800090c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000a5c:	213f      	movs	r1, #63	; 0x3f
 8000a5e:	4808      	ldr	r0, [pc, #32]	; (8000a80 <Reset_IPCC+0x40>)
 8000a60:	f7ff ff00 	bl	8000864 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000a64:	213f      	movs	r1, #63	; 0x3f
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <Reset_IPCC+0x40>)
 8000a68:	f7ff ff1f 	bl	80008aa <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000a6c:	213f      	movs	r1, #63	; 0x3f
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <Reset_IPCC+0x40>)
 8000a70:	f7ff ff0a 	bl	8000888 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000a74:	213f      	movs	r1, #63	; 0x3f
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <Reset_IPCC+0x40>)
 8000a78:	f7ff ff29 	bl	80008ce <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000a7c:	bf00      	nop
}
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	58000c00 	.word	0x58000c00

08000a84 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f007 fb84 	bl	8008198 <OTP_Read>
 8000a90:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	799b      	ldrb	r3, [r3, #6]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe31 	bl	8000704 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
}
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <System_Init>:

static void System_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  Init_Smps();
 8000ab0:	f7ff ff98 	bl	80009e4 <Init_Smps>

  Init_Exti();
 8000ab4:	f7ff ff9d 	bl	80009f2 <Init_Exti>

  Init_Rtc();
 8000ab8:	f000 f802 	bl	8000ac0 <Init_Rtc>

  return;
 8000abc:	bf00      	nop
}
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <Init_Rtc+0x1c>)
 8000ac6:	f7ff ff4c 	bl	8000962 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000aca:	2100      	movs	r1, #0
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <Init_Rtc+0x1c>)
 8000ace:	f7ff ff58 	bl	8000982 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000ad2:	4802      	ldr	r0, [pc, #8]	; (8000adc <Init_Rtc+0x1c>)
 8000ad4:	f7ff ff38 	bl	8000948 <LL_RTC_EnableWriteProtection>

  return;
 8000ad8:	bf00      	nop
}
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40002800 	.word	0x40002800

08000ae0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000ae4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ae8:	f7ff fe2a 	bl	8000740 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000aec:	f008 fa4e 	bl	8008f8c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000af0:	2004      	movs	r0, #4
 8000af2:	f7ff fddd 	bl	80006b0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000af6:	bf00      	nop
}
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000b02:	f007 f907 	bl	8007d14 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <appe_Tl_Init+0x50>)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f008 fb7c 	bl	8009208 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <appe_Tl_Init+0x54>)
 8000b12:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <appe_Tl_Init+0x58>)
 8000b16:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480e      	ldr	r0, [pc, #56]	; (8000b58 <appe_Tl_Init+0x5c>)
 8000b1e:	f006 ffbf 	bl	8007aa0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <appe_Tl_Init+0x60>)
 8000b24:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <appe_Tl_Init+0x64>)
 8000b28:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <appe_Tl_Init+0x68>)
 8000b2c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000b2e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000b32:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f007 fa2d 	bl	8007f98 <TL_MM_Init>

  TL_Enable();
 8000b3e:	f007 f8e3 	bl	8007d08 <TL_Enable>

  return;
 8000b42:	bf00      	nop
}
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	08007ad9 	.word	0x08007ad9
 8000b50:	200005dc 	.word	0x200005dc
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b81 	.word	0x08000b81
 8000b5c:	200007f4 	.word	0x200007f4
 8000b60:	200006e8 	.word	0x200006e8
 8000b64:	200000a0 	.word	0x200000a0

08000b68 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000b72:	bf00      	nop
}
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	330b      	adds	r3, #11
 8000b8e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	d81f      	bhi.n	8000bde <APPE_SysUserEvtRx+0x5e>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <APPE_SysUserEvtRx+0x24>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000bc5 	.word	0x08000bc5
 8000ba8:	08000bd7 	.word	0x08000bd7
 8000bac:	08000bdf 	.word	0x08000bdf
 8000bb0:	08000bdf 	.word	0x08000bdf
 8000bb4:	08000bdf 	.word	0x08000bdf
 8000bb8:	08000bdf 	.word	0x08000bdf
 8000bbc:	08000bdf 	.word	0x08000bdf
 8000bc0:	08000bdf 	.word	0x08000bdf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fd25 	bl	8007618 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f81b 	bl	8000c0a <APPE_SysEvtReadyProcessing>
    break;
 8000bd4:	e004      	b.n	8000be0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f806 	bl	8000be8 <APPE_SysEvtError>
    break;
 8000bdc:	e000      	b.n	8000be0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000bde:	bf00      	nop
  }

  return;
 8000be0:	bf00      	nop
}
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	330b      	adds	r3, #11
 8000bf6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000bfe:	bf00      	nop
}
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b08a      	sub	sp, #40	; 0x28
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	330b      	adds	r3, #11
 8000c2e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	3302      	adds	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d11d      	bne.n	8000c7a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000c3e:	f7ff fd1b 	bl	8000678 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000c42:	230f      	movs	r3, #15
 8000c44:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000c46:	237f      	movs	r3, #127	; 0x7f
 8000c48:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000c4a:	f7ff fdfd 	bl	8000848 <LL_DBGMCU_GetRevisionID>
 8000c4e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000c56:	f7ff fde9 	bl	800082c <LL_DBGMCU_GetDeviceID>
 8000c5a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 fcc0 	bl	80075ec <SHCI_C2_Config>

    APP_BLE_Init();
 8000c6c:	f007 fb9e 	bl	80083ac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000c70:	2100      	movs	r1, #0
 8000c72:	2001      	movs	r0, #1
 8000c74:	f008 f99c 	bl	8008fb0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000c78:	e007      	b.n	8000c8a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d103      	bne.n	8000c8a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
  return;
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
}
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9a:	f001 fbed 	bl	8002478 <HAL_GetTick>
 8000c9e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000caa:	d00a      	beq.n	8000cc2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000cac:	f001 fbfc 	bl	80024a8 <HAL_GetTickFreq>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	e002      	b.n	8000cc2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000cbc:	f7ff fe34 	bl	8000928 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000cc0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	f001 fbd9 	bl	8002478 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d8f4      	bhi.n	8000cbc <HAL_Delay+0x2a>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce4:	f008 f994 	bl	8009010 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000cf0:	bf00      	nop
}
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d08:	f008 f982 	bl	8009010 <UTIL_SEQ_Run>

  return;
 8000d0c:	bf00      	nop
}
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2004      	movs	r0, #4
 8000d20:	f008 fa94 	bl	800924c <UTIL_SEQ_SetTask>
  return;
 8000d24:	bf00      	nop
}
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f008 faf5 	bl	8009324 <UTIL_SEQ_SetEvt>
  return;
 8000d3a:	bf00      	nop
}
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f008 fb0a 	bl	8009364 <UTIL_SEQ_WaitEvt>
  return;
 8000d50:	bf00      	nop
}
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <LL_EXTI_EnableIT_0_31>:
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <LL_EXTI_EnableIT_0_31+0x24>)
 8000d62:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d66:	4905      	ldr	r1, [pc, #20]	; (8000d7c <LL_EXTI_EnableIT_0_31+0x24>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	58000800 	.word	0x58000800

08000d80 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4904      	ldr	r1, [pc, #16]	; (8000da0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]

}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58000800 	.word	0x58000800

08000da4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <ReadRtcSsrValue+0x3c>)
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <ReadRtcSsrValue+0x3c>)
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000dba:	e005      	b.n	8000dc8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <ReadRtcSsrValue+0x3c>)
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d1f5      	bne.n	8000dbc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000dd0:	683b      	ldr	r3, [r7, #0]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40002800 	.word	0x40002800

08000de4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000df4:	79ba      	ldrb	r2, [r7, #6]
 8000df6:	491d      	ldr	r1, [pc, #116]	; (8000e6c <LinkTimerAfter+0x88>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	3315      	adds	r3, #21
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d009      	beq.n	8000e22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	4916      	ldr	r1, [pc, #88]	; (8000e6c <LinkTimerAfter+0x88>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3314      	adds	r3, #20
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	4911      	ldr	r1, [pc, #68]	; (8000e6c <LinkTimerAfter+0x88>)
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	3315      	adds	r3, #21
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <LinkTimerAfter+0x88>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3314      	adds	r3, #20
 8000e46:	79ba      	ldrb	r2, [r7, #6]
 8000e48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000e4a:	79ba      	ldrb	r2, [r7, #6]
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <LinkTimerAfter+0x88>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	3315      	adds	r3, #21
 8000e5a:	79fa      	ldrb	r2, [r7, #7]
 8000e5c:	701a      	strb	r2, [r3, #0]

  return;
 8000e5e:	bf00      	nop
}
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000978 	.word	0x20000978

08000e70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	460a      	mov	r2, r1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LinkTimerBefore+0xb8>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	79ba      	ldrb	r2, [r7, #6]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d032      	beq.n	8000ef2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	4927      	ldr	r1, [pc, #156]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3314      	adds	r3, #20
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	4922      	ldr	r1, [pc, #136]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	3315      	adds	r3, #21
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000eb4:	79fa      	ldrb	r2, [r7, #7]
 8000eb6:	491d      	ldr	r1, [pc, #116]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3315      	adds	r3, #21
 8000ec4:	79ba      	ldrb	r2, [r7, #6]
 8000ec6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	4918      	ldr	r1, [pc, #96]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3314      	adds	r3, #20
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	4913      	ldr	r1, [pc, #76]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	3314      	adds	r3, #20
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000ef0:	e014      	b.n	8000f1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	490d      	ldr	r1, [pc, #52]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3315      	adds	r3, #21
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	4908      	ldr	r1, [pc, #32]	; (8000f2c <LinkTimerBefore+0xbc>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3314      	adds	r3, #20
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	701a      	strb	r2, [r3, #0]
  return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000a08 	.word	0x20000a08
 8000f2c:	20000978 	.word	0x20000978

08000f30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f3a:	4b4e      	ldr	r3, [pc, #312]	; (8001074 <linkTimer+0x144>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d118      	bne.n	8000f76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f44:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <linkTimer+0x144>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <linkTimer+0x148>)
 8000f4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000f4e:	4a49      	ldr	r2, [pc, #292]	; (8001074 <linkTimer+0x144>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	4949      	ldr	r1, [pc, #292]	; (800107c <linkTimer+0x14c>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	440b      	add	r3, r1
 8000f62:	3315      	adds	r3, #21
 8000f64:	2206      	movs	r2, #6
 8000f66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f68:	4b45      	ldr	r3, [pc, #276]	; (8001080 <linkTimer+0x150>)
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	81fb      	strh	r3, [r7, #14]
 8000f74:	e078      	b.n	8001068 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000f76:	f000 f909 	bl	800118c <ReturnTimeElapsed>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	493e      	ldr	r1, [pc, #248]	; (800107c <linkTimer+0x14c>)
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	4419      	add	r1, r3
 8000f96:	4839      	ldr	r0, [pc, #228]	; (800107c <linkTimer+0x14c>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4403      	add	r3, r0
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	4934      	ldr	r1, [pc, #208]	; (800107c <linkTimer+0x14c>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <linkTimer+0x144>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	; (800107c <linkTimer+0x14c>)
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	440b      	add	r3, r1
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4413      	add	r3, r2
 8000fce:	3308      	adds	r3, #8
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d337      	bcc.n	8001048 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <linkTimer+0x144>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	4926      	ldr	r1, [pc, #152]	; (800107c <linkTimer+0x14c>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	3315      	adds	r3, #21
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ff2:	e013      	b.n	800101c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ff4:	7b7a      	ldrb	r2, [r7, #13]
 8000ff6:	4921      	ldr	r1, [pc, #132]	; (800107c <linkTimer+0x14c>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	3315      	adds	r3, #21
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001008:	7b7a      	ldrb	r2, [r7, #13]
 800100a:	491c      	ldr	r1, [pc, #112]	; (800107c <linkTimer+0x14c>)
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3315      	adds	r3, #21
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	2b06      	cmp	r3, #6
 8001020:	d00b      	beq.n	800103a <linkTimer+0x10a>
 8001022:	7b3a      	ldrb	r2, [r7, #12]
 8001024:	4915      	ldr	r1, [pc, #84]	; (800107c <linkTimer+0x14c>)
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	3308      	adds	r3, #8
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d2dc      	bcs.n	8000ff4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800103a:	7b7a      	ldrb	r2, [r7, #13]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fecf 	bl	8000de4 <LinkTimerAfter>
 8001046:	e00f      	b.n	8001068 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <linkTimer+0x144>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff0c 	bl	8000e70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <linkTimer+0x144>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <linkTimer+0x148>)
 8001060:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <linkTimer+0x144>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001068:	89fb      	ldrh	r3, [r7, #14]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000a08 	.word	0x20000a08
 8001078:	20000a09 	.word	0x20000a09
 800107c:	20000978 	.word	0x20000978
 8001080:	20000a0c 	.word	0x20000a0c

08001084 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001094:	4b39      	ldr	r3, [pc, #228]	; (800117c <UnlinkTimer+0xf8>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	429a      	cmp	r2, r3
 800109e:	d111      	bne.n	80010c4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <UnlinkTimer+0xf8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <UnlinkTimer+0xfc>)
 80010a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	4935      	ldr	r1, [pc, #212]	; (8001184 <UnlinkTimer+0x100>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3315      	adds	r3, #21
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <UnlinkTimer+0xf8>)
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e03e      	b.n	8001142 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	492f      	ldr	r1, [pc, #188]	; (8001184 <UnlinkTimer+0x100>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3314      	adds	r3, #20
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	492a      	ldr	r1, [pc, #168]	; (8001184 <UnlinkTimer+0x100>)
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3315      	adds	r3, #21
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010ec:	79f9      	ldrb	r1, [r7, #7]
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	4824      	ldr	r0, [pc, #144]	; (8001184 <UnlinkTimer+0x100>)
 80010f2:	460b      	mov	r3, r1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	440b      	add	r3, r1
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4403      	add	r3, r0
 80010fc:	3315      	adds	r3, #21
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2d8      	uxtb	r0, r3
 8001102:	4920      	ldr	r1, [pc, #128]	; (8001184 <UnlinkTimer+0x100>)
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	3315      	adds	r3, #21
 8001110:	4602      	mov	r2, r0
 8001112:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d013      	beq.n	8001142 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800111a:	79f9      	ldrb	r1, [r7, #7]
 800111c:	7bba      	ldrb	r2, [r7, #14]
 800111e:	4819      	ldr	r0, [pc, #100]	; (8001184 <UnlinkTimer+0x100>)
 8001120:	460b      	mov	r3, r1
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	440b      	add	r3, r1
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	4403      	add	r3, r0
 800112a:	3314      	adds	r3, #20
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	b2d8      	uxtb	r0, r3
 8001130:	4914      	ldr	r1, [pc, #80]	; (8001184 <UnlinkTimer+0x100>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3314      	adds	r3, #20
 800113e:	4602      	mov	r2, r0
 8001140:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	490f      	ldr	r1, [pc, #60]	; (8001184 <UnlinkTimer+0x100>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	330c      	adds	r3, #12
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <UnlinkTimer+0xf8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b06      	cmp	r3, #6
 800115e:	d107      	bne.n	8001170 <UnlinkTimer+0xec>
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <UnlinkTimer+0x104>)
 8001168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116c:	601a      	str	r2, [r3, #0]
  }

  return;
 800116e:	bf00      	nop
 8001170:	bf00      	nop
}
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000a08 	.word	0x20000a08
 8001180:	20000a09 	.word	0x20000a09
 8001184:	20000978 	.word	0x20000978
 8001188:	20000a0c 	.word	0x20000a0c

0800118c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <ReturnTimeElapsed+0x70>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800119a:	d026      	beq.n	80011ea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800119c:	f7ff fe02 	bl	8000da4 <ReadRtcSsrValue>
 80011a0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <ReturnTimeElapsed+0x70>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d805      	bhi.n	80011b8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <ReturnTimeElapsed+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	e00a      	b.n	80011ce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <ReturnTimeElapsed+0x74>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <ReturnTimeElapsed+0x70>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <ReturnTimeElapsed+0x78>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <ReturnTimeElapsed+0x7c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	40d3      	lsrs	r3, r2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	e001      	b.n	80011ee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	b29b      	uxth	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000a0c 	.word	0x20000a0c
 8001200:	20000a14 	.word	0x20000a14
 8001204:	20000a12 	.word	0x20000a12
 8001208:	20000a11 	.word	0x20000a11

0800120c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800121c:	f7ff fdc2 	bl	8000da4 <ReadRtcSsrValue>
 8001220:	4603      	mov	r3, r0
 8001222:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <RestartWakeupCounter+0x9c>)
 8001224:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001226:	2003      	movs	r0, #3
 8001228:	f001 fac7 	bl	80027ba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800122c:	e039      	b.n	80012a2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d803      	bhi.n	800123c <RestartWakeupCounter+0x30>
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <RestartWakeupCounter+0xa0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d002      	beq.n	8001242 <RestartWakeupCounter+0x36>
      Value -= 1;
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	3b01      	subs	r3, #1
 8001240:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001242:	bf00      	nop
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <RestartWakeupCounter+0xa4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f8      	beq.n	8001244 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <RestartWakeupCounter+0xa4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <RestartWakeupCounter+0xa4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001262:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <RestartWakeupCounter+0xa8>)
 8001266:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800126a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800126c:	2003      	movs	r0, #3
 800126e:	f001 fab2 	bl	80027d6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <RestartWakeupCounter+0xac>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	0c1b      	lsrs	r3, r3, #16
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	88fa      	ldrh	r2, [r7, #6]
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <RestartWakeupCounter+0xac>)
 800127e:	4313      	orrs	r3, r2
 8001280:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001282:	f7ff fd8f 	bl	8000da4 <ReadRtcSsrValue>
 8001286:	4603      	mov	r3, r0
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <RestartWakeupCounter+0x9c>)
 800128a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <RestartWakeupCounter+0xa4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <RestartWakeupCounter+0xa4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800129a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800129c:	f3af 8000 	nop.w
  return ;
 80012a0:	bf00      	nop
}
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000a0c 	.word	0x20000a0c
 80012ac:	20000a11 	.word	0x20000a11
 80012b0:	20000aa8 	.word	0x20000aa8
 80012b4:	58000800 	.word	0x58000800
 80012b8:	40002800 	.word	0x40002800

080012bc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012c2:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <RescheduleTimerList+0x11c>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ce:	d107      	bne.n	80012e0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80012d0:	bf00      	nop
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <RescheduleTimerList+0x120>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f8      	bne.n	80012d2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <RescheduleTimerList+0x120>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <RescheduleTimerList+0x120>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <RescheduleTimerList+0x124>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	493a      	ldr	r1, [pc, #232]	; (80013e4 <RescheduleTimerList+0x128>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	3308      	adds	r3, #8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800130a:	f7ff ff3f 	bl	800118c <ReturnTimeElapsed>
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	429a      	cmp	r2, r3
 8001318:	d205      	bcs.n	8001326 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <RescheduleTimerList+0x12c>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e04d      	b.n	80013c2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4a30      	ldr	r2, [pc, #192]	; (80013ec <RescheduleTimerList+0x130>)
 800132a:	8812      	ldrh	r2, [r2, #0]
 800132c:	b292      	uxth	r2, r2
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4293      	cmp	r3, r2
 8001336:	d906      	bls.n	8001346 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <RescheduleTimerList+0x130>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <RescheduleTimerList+0x12c>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e03d      	b.n	80013c2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	b29a      	uxth	r2, r3
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <RescheduleTimerList+0x12c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001356:	e034      	b.n	80013c2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	4922      	ldr	r1, [pc, #136]	; (80013e4 <RescheduleTimerList+0x128>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	429a      	cmp	r2, r3
 800136e:	d20a      	bcs.n	8001386 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	491c      	ldr	r1, [pc, #112]	; (80013e4 <RescheduleTimerList+0x128>)
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	3308      	adds	r3, #8
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e013      	b.n	80013ae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	4916      	ldr	r1, [pc, #88]	; (80013e4 <RescheduleTimerList+0x128>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	3308      	adds	r3, #8
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	1ac9      	subs	r1, r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <RescheduleTimerList+0x128>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4403      	add	r3, r0
 80013aa:	3308      	adds	r3, #8
 80013ac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <RescheduleTimerList+0x128>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3315      	adds	r3, #21
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b06      	cmp	r3, #6
 80013c6:	d1c7      	bne.n	8001358 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff1e 	bl	800120c <RestartWakeupCounter>

  return ;
 80013d0:	bf00      	nop
}
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40002800 	.word	0x40002800
 80013dc:	20000aa8 	.word	0x20000aa8
 80013e0:	20000a08 	.word	0x20000a08
 80013e4:	20000978 	.word	0x20000978
 80013e8:	20000a10 	.word	0x20000a10
 80013ec:	20000a16 	.word	0x20000a16

080013f0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f6:	f3ef 8310 	mrs	r3, PRIMASK
 80013fa:	617b      	str	r3, [r7, #20]
  return(result);
 80013fc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	22ca      	movs	r2, #202	; 0xca
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
 800140c:	4b57      	ldr	r3, [pc, #348]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2253      	movs	r2, #83	; 0x53
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001414:	4b55      	ldr	r3, [pc, #340]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001422:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800142c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001430:	4950      	ldr	r1, [pc, #320]	; (8001574 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	330c      	adds	r3, #12
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d16e      	bne.n	8001524 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001446:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800144a:	494a      	ldr	r1, [pc, #296]	; (8001574 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800145a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800145e:	4945      	ldr	r1, [pc, #276]	; (8001574 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3310      	adds	r3, #16
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04c      	beq.n	8001514 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800147a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800147e:	493d      	ldr	r1, [pc, #244]	; (8001574 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	330d      	adds	r3, #13
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d124      	bne.n	80014de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fdf2 	bl	8001084 <UnlinkTimer>
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f383 8810 	msr	PRIMASK, r3
}
 80014aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80014ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014b0:	4930      	ldr	r1, [pc, #192]	; (8001574 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3304      	adds	r3, #4
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f9b8 	bl	800183c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	22ca      	movs	r2, #202	; 0xca
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2253      	movs	r2, #83	; 0x53
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
 80014dc:	e012      	b.n	8001504 <HW_TS_RTC_Wakeup_Handler+0x114>
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f383 8810 	msr	PRIMASK, r3
}
 80014e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80014ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f920 	bl	8001734 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	22ca      	movs	r2, #202	; 0xca
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2253      	movs	r2, #83	; 0x53
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	4619      	mov	r1, r3
 800150c:	69b8      	ldr	r0, [r7, #24]
 800150e:	f000 fa1b 	bl	8001948 <HW_TS_RTC_Int_AppNot>
 8001512:	e022      	b.n	800155a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001514:	f7ff fed2 	bl	80012bc <RescheduleTimerList>
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f383 8810 	msr	PRIMASK, r3
}
 8001522:	e01a      	b.n	800155a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001524:	bf00      	nop
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f8      	beq.n	8001526 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001544:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001548:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f383 8810 	msr	PRIMASK, r3
}
 8001558:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	22ff      	movs	r2, #255	; 0xff
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001562:	bf00      	nop
}
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000aa8 	.word	0x20000aa8
 8001570:	20000a08 	.word	0x20000a08
 8001574:	20000978 	.word	0x20000978
 8001578:	20000a10 	.word	0x20000a10
 800157c:	58000800 	.word	0x58000800

08001580 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <HW_TS_Init+0x188>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	22ca      	movs	r2, #202	; 0xca
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
 8001594:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <HW_TS_Init+0x188>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2253      	movs	r2, #83	; 0x53
 800159a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800159c:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HW_TS_Init+0x18c>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a5a      	ldr	r2, [pc, #360]	; (800170c <HW_TS_Init+0x18c>)
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80015a8:	4b58      	ldr	r3, [pc, #352]	; (800170c <HW_TS_Init+0x18c>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f1c3 0304 	rsb	r3, r3, #4
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b55      	ldr	r3, [pc, #340]	; (8001710 <HW_TS_Init+0x190>)
 80015bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <HW_TS_Init+0x18c>)
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015c6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80015ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	fa92 f2a2 	rbit	r2, r2
 80015d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d101      	bne.n	80015e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80015de:	2220      	movs	r2, #32
 80015e0:	e003      	b.n	80015ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	fab2 f282 	clz	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	40d3      	lsrs	r3, r2
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HW_TS_Init+0x194>)
 80015f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80015f6:	4b45      	ldr	r3, [pc, #276]	; (800170c <HW_TS_Init+0x18c>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001600:	b29b      	uxth	r3, r3
 8001602:	3301      	adds	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HW_TS_Init+0x198>)
 8001608:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HW_TS_Init+0x198>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	4a40      	ldr	r2, [pc, #256]	; (8001714 <HW_TS_Init+0x194>)
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800161c:	4a3c      	ldr	r2, [pc, #240]	; (8001710 <HW_TS_Init+0x190>)
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	40d3      	lsrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800162a:	4293      	cmp	r3, r2
 800162c:	d904      	bls.n	8001638 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HW_TS_Init+0x19c>)
 8001630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001634:	801a      	strh	r2, [r3, #0]
 8001636:	e003      	b.n	8001640 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <HW_TS_Init+0x19c>)
 800163e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001640:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001644:	f7ff fb9c 	bl	8000d80 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001648:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800164c:	f7ff fb84 	bl	8000d58 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d13d      	bne.n	80016d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <HW_TS_Init+0x1a0>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HW_TS_Init+0x1a4>)
 800165e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001662:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	e00c      	b.n	8001684 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800166a:	7ffa      	ldrb	r2, [r7, #31]
 800166c:	492e      	ldr	r1, [pc, #184]	; (8001728 <HW_TS_Init+0x1a8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	330c      	adds	r3, #12
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	3301      	adds	r3, #1
 8001682:	77fb      	strb	r3, [r7, #31]
 8001684:	7ffb      	ldrb	r3, [r7, #31]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d9ef      	bls.n	800166a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <HW_TS_Init+0x1ac>)
 800168c:	2206      	movs	r2, #6
 800168e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HW_TS_Init+0x188>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HW_TS_Init+0x188>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HW_TS_Init+0x188>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HW_TS_Init+0x188>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <HW_TS_Init+0x1b0>)
 80016b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80016ba:	2003      	movs	r0, #3
 80016bc:	f001 f88b 	bl	80027d6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HW_TS_Init+0x188>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HW_TS_Init+0x188>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e009      	b.n	80016e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HW_TS_Init+0x188>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f001 f86a 	bl	80027ba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HW_TS_Init+0x188>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80016ee:	2200      	movs	r2, #0
 80016f0:	2103      	movs	r1, #3
 80016f2:	2003      	movs	r0, #3
 80016f4:	f001 f81f 	bl	8002736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 f836 	bl	800276a <HAL_NVIC_EnableIRQ>

  return;
 80016fe:	bf00      	nop
}
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000aa8 	.word	0x20000aa8
 800170c:	40002800 	.word	0x40002800
 8001710:	20000a11 	.word	0x20000a11
 8001714:	20000a12 	.word	0x20000a12
 8001718:	20000a14 	.word	0x20000a14
 800171c:	20000a16 	.word	0x20000a16
 8001720:	20000a10 	.word	0x20000a10
 8001724:	20000a0c 	.word	0x20000a0c
 8001728:	20000978 	.word	0x20000978
 800172c:	20000a08 	.word	0x20000a08
 8001730:	58000800 	.word	0x58000800

08001734 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800173e:	f3ef 8310 	mrs	r3, PRIMASK
 8001742:	60fb      	str	r3, [r7, #12]
  return(result);
 8001744:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800174c:	2003      	movs	r0, #3
 800174e:	f001 f81a 	bl	8002786 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001752:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HW_TS_Stop+0xf0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	22ca      	movs	r2, #202	; 0xca
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HW_TS_Stop+0xf0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2253      	movs	r2, #83	; 0x53
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	4930      	ldr	r1, [pc, #192]	; (8001828 <HW_TS_Stop+0xf4>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d142      	bne.n	8001800 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc80 	bl	8001084 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <HW_TS_Stop+0xf8>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	2b06      	cmp	r3, #6
 800178e:	d12f      	bne.n	80017f0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HW_TS_Stop+0xfc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179c:	d107      	bne.n	80017ae <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800179e:	bf00      	nop
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HW_TS_Stop+0xf0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f8      	bne.n	80017a0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HW_TS_Stop+0xf0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HW_TS_Stop+0xf0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80017be:	bf00      	nop
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HW_TS_Stop+0xf0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f8      	beq.n	80017c0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HW_TS_Stop+0xf0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HW_TS_Stop+0xf0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HW_TS_Stop+0x100>)
 80017e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 fff4 	bl	80027d6 <HAL_NVIC_ClearPendingIRQ>
 80017ee:	e007      	b.n	8001800 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HW_TS_Stop+0x104>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	7cfa      	ldrb	r2, [r7, #19]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80017fc:	f7ff fd5e 	bl	80012bc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HW_TS_Stop+0xf0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001808:	2003      	movs	r0, #3
 800180a:	f000 ffae 	bl	800276a <HAL_NVIC_EnableIRQ>
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f383 8810 	msr	PRIMASK, r3
}
 8001818:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800181a:	bf00      	nop
}
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000aa8 	.word	0x20000aa8
 8001828:	20000978 	.word	0x20000978
 800182c:	20000a08 	.word	0x20000a08
 8001830:	40002800 	.word	0x40002800
 8001834:	58000800 	.word	0x58000800
 8001838:	20000a09 	.word	0x20000a09

0800183c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001848:	79fa      	ldrb	r2, [r7, #7]
 800184a:	493b      	ldr	r1, [pc, #236]	; (8001938 <HW_TS_Start+0xfc>)
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	330c      	adds	r3, #12
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d103      	bne.n	8001868 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff66 	bl	8001734 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001868:	f3ef 8310 	mrs	r3, PRIMASK
 800186c:	60fb      	str	r3, [r7, #12]
  return(result);
 800186e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001872:	b672      	cpsid	i
}
 8001874:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001876:	2003      	movs	r0, #3
 8001878:	f000 ff85 	bl	8002786 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HW_TS_Start+0x100>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	22ca      	movs	r2, #202	; 0xca
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HW_TS_Start+0x100>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2253      	movs	r2, #83	; 0x53
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	492a      	ldr	r1, [pc, #168]	; (8001938 <HW_TS_Start+0xfc>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	330c      	adds	r3, #12
 800189c:	2202      	movs	r2, #2
 800189e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	4925      	ldr	r1, [pc, #148]	; (8001938 <HW_TS_Start+0xfc>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3308      	adds	r3, #8
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	4920      	ldr	r1, [pc, #128]	; (8001938 <HW_TS_Start+0xfc>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	3304      	adds	r3, #4
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fb30 	bl	8000f30 <linkTimer>
 80018d0:	4603      	mov	r3, r0
 80018d2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HW_TS_Start+0x104>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HW_TS_Start+0x108>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	7c7a      	ldrb	r2, [r7, #17]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d002      	beq.n	80018ec <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80018e6:	f7ff fce9 	bl	80012bc <RescheduleTimerList>
 80018ea:	e013      	b.n	8001914 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80018ec:	79fa      	ldrb	r2, [r7, #7]
 80018ee:	4912      	ldr	r1, [pc, #72]	; (8001938 <HW_TS_Start+0xfc>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3308      	adds	r3, #8
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	8a7b      	ldrh	r3, [r7, #18]
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	1ac9      	subs	r1, r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <HW_TS_Start+0xfc>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4403      	add	r3, r0
 8001910:	3308      	adds	r3, #8
 8001912:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <HW_TS_Start+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	22ff      	movs	r2, #255	; 0xff
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800191c:	2003      	movs	r0, #3
 800191e:	f000 ff24 	bl	800276a <HAL_NVIC_EnableIRQ>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f383 8810 	msr	PRIMASK, r3
}
 800192c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800192e:	bf00      	nop
}
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000978 	.word	0x20000978
 800193c:	20000aa8 	.word	0x20000aa8
 8001940:	20000a08 	.word	0x20000a08
 8001944:	20000a09 	.word	0x20000a09

08001948 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	460b      	mov	r3, r1
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4798      	blx	r3

  return;
 800195a:	bf00      	nop
}
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <LL_RCC_LSE_SetDriveCapability>:
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f023 0218 	bic.w	r2, r3, #24
 8001976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_AHB2_GRP1_EnableClock>:
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800199c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4013      	ands	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f000 fce9 	bl	800239c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80019ca:	f7fe ffed 	bl	80009a8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ce:	f000 f825 	bl	8001a1c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019d2:	f000 f885 	bl	8001ae0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80019d6:	f000 f8e3 	bl	8001ba0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019da:	f000 f97f 	bl	8001cdc <MX_GPIO_Init>
  MX_RTC_Init();
 80019de:	f000 f8fb 	bl	8001bd8 <MX_RTC_Init>
  MX_I2C1_Init();
 80019e2:	f000 f89d 	bl	8001b20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80019e6:	f000 f92b 	bl	8001c40 <MX_USART1_UART_Init>
  MX_RF_Init();
 80019ea:	f000 f8ed 	bl	8001bc8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80019ee:	f7fe ffe9 	bl	80009c4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80019f2:	f7ff f973 	bl	8000cdc <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    printf("Hello World\n\r");		//test UART
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <main+0x50>)
 80019f8:	f007 fd88 	bl	800950c <iprintf>
    HAL_Delay(1000);				//wait
 80019fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a00:	f7ff f947 	bl	8000c92 <HAL_Delay>
    BH1790GLC_init(&hrm, &hi2c1);	//test I2C
 8001a04:	4903      	ldr	r1, [pc, #12]	; (8001a14 <main+0x54>)
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <main+0x58>)
 8001a08:	f7fe fd94 	bl	8000534 <BH1790GLC_init>
  {
 8001a0c:	e7f1      	b.n	80019f2 <main+0x32>
 8001a0e:	bf00      	nop
 8001a10:	0800a45c 	.word	0x0800a45c
 8001a14:	20000a18 	.word	0x20000a18
 8001a18:	20000b60 	.word	0x20000b60

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b09a      	sub	sp, #104	; 0x68
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2248      	movs	r2, #72	; 0x48
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 fd66 	bl	80094fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a42:	f001 fdc9 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001a46:	2010      	movs	r0, #16
 8001a48:	f7ff ff8b 	bl	8001962 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <SystemClock_Config+0xc0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <SystemClock_Config+0xc0>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <SystemClock_Config+0xc0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a68:	2327      	movs	r3, #39	; 0x27
 8001a6a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a80:	2340      	movs	r3, #64	; 0x40
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001a88:	23a0      	movs	r3, #160	; 0xa0
 8001a8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 f933 	bl	8003d00 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001aa0:	f000 f988 	bl	8001db4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001aa4:	236f      	movs	r3, #111	; 0x6f
 8001aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fc8f 	bl	80043e8 <HAL_RCC_ClockConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ad0:	f000 f970 	bl	8001db4 <Error_Handler>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3768      	adds	r7, #104	; 0x68
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	58000400 	.word	0x58000400

08001ae0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2250      	movs	r2, #80	; 0x50
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f007 fd05 	bl	80094fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001af2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001af6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 f8aa 	bl	8004c62 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001b14:	f000 f94e 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001b18:	bf00      	nop
 8001b1a:	3750      	adds	r7, #80	; 0x50
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <MX_I2C1_Init+0x78>)
 8001b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <MX_I2C1_Init+0x7c>)
 8001b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b5a:	480e      	ldr	r0, [pc, #56]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b5c:	f000 fff6 	bl	8002b4c <HAL_I2C_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b66:	f000 f925 	bl	8001db4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4809      	ldr	r0, [pc, #36]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b6e:	f001 fc15 	bl	800339c <HAL_I2CEx_ConfigAnalogFilter>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b78:	f000 f91c 	bl	8001db4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_I2C1_Init+0x74>)
 8001b80:	f001 fc57 	bl	8003432 <HAL_I2CEx_ConfigDigitalFilter>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b8a:	f000 f913 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000a18 	.word	0x20000a18
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	00707cbb 	.word	0x00707cbb

08001ba0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_IPCC_Init+0x20>)
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <MX_IPCC_Init+0x24>)
 8001ba8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_IPCC_Init+0x20>)
 8001bac:	f001 fc8e 	bl	80034cc <HAL_IPCC_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001bb6:	f000 f8fd 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000a6c 	.word	0x20000a6c
 8001bc4:	58000c00 	.word	0x58000c00

08001bc8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_RTC_Init+0x60>)
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <MX_RTC_Init+0x64>)
 8001be0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_RTC_Init+0x60>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_RTC_Init+0x60>)
 8001bea:	220f      	movs	r2, #15
 8001bec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_RTC_Init+0x60>)
 8001bf0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001bf4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_RTC_Init+0x60>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_RTC_Init+0x60>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_RTC_Init+0x60>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_RTC_Init+0x60>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c0e:	480a      	ldr	r0, [pc, #40]	; (8001c38 <MX_RTC_Init+0x60>)
 8001c10:	f003 faae 	bl	8005170 <HAL_RTC_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001c1a:	f000 f8cb 	bl	8001db4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_RTC_Init+0x60>)
 8001c24:	f003 fba4 	bl	8005370 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001c2e:	f000 f8c1 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000aa8 	.word	0x20000aa8
 8001c3c:	40002800 	.word	0x40002800

08001c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c46:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <MX_USART1_UART_Init+0x98>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c60:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c64:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c68:	220c      	movs	r2, #12
 8001c6a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8a:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c8c:	f003 fc4c 	bl	8005528 <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001c96:	f000 f88d 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001c9e:	f004 f99b 	bl	8005fd8 <HAL_UARTEx_SetTxFifoThreshold>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001ca8:	f000 f884 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cac:	2100      	movs	r1, #0
 8001cae:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001cb0:	f004 f9d0 	bl	8006054 <HAL_UARTEx_SetRxFifoThreshold>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001cba:	f000 f87b 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_USART1_UART_Init+0x94>)
 8001cc0:	f004 f951 	bl	8005f66 <HAL_UARTEx_DisableFifoMode>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001cca:	f000 f873 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000acc 	.word	0x20000acc
 8001cd8:	40013800 	.word	0x40013800

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	2004      	movs	r0, #4
 8001cf2:	f7ff fe4c 	bl	800198e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f7ff fe49 	bl	800198e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff fe46 	bl	800198e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	2008      	movs	r0, #8
 8001d04:	f7ff fe43 	bl	800198e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2123      	movs	r1, #35	; 0x23
 8001d0c:	481d      	ldr	r0, [pc, #116]	; (8001d84 <MX_GPIO_Init+0xa8>)
 8001d0e:	f000 fee1 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d12:	2310      	movs	r3, #16
 8001d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4819      	ldr	r0, [pc, #100]	; (8001d88 <MX_GPIO_Init+0xac>)
 8001d24:	f000 fd66 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001d28:	2323      	movs	r3, #35	; 0x23
 8001d2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4811      	ldr	r0, [pc, #68]	; (8001d84 <MX_GPIO_Init+0xa8>)
 8001d3e:	f000 fd59 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001d54:	230a      	movs	r3, #10
 8001d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f000 fd48 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001d64:	2303      	movs	r3, #3
 8001d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_GPIO_Init+0xb0>)
 8001d76:	f000 fd3d 	bl	80027f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	48000400 	.word	0x48000400
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	48000c00 	.word	0x48000c00

08001d90 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d98:	1d39      	adds	r1, r7, #4
 8001d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <__io_putchar+0x20>)
 8001da2:	f003 fc11 	bl	80055c8 <HAL_UART_Transmit>

  return ch;
 8001da6:	687b      	ldr	r3, [r7, #4]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000acc 	.word	0x20000acc

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <Error_Handler+0x8>

08001dbe <LL_RCC_EnableRTC>:
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_AHB2_GRP1_EnableClock>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e04:	68fb      	ldr	r3, [r7, #12]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_AHB3_GRP1_EnableClock>:
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e68:	68fb      	ldr	r3, [r7, #12]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b085      	sub	sp, #20
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001eac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001eb0:	f7ff ffaf 	bl	8001e12 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	202e      	movs	r0, #46	; 0x2e
 8001eba:	f000 fc3c 	bl	8002736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ebe:	202e      	movs	r0, #46	; 0x2e
 8001ec0:	f000 fc53 	bl	800276a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b09c      	sub	sp, #112	; 0x70
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2250      	movs	r2, #80	; 0x50
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f007 fb07 	bl	80094fc <memset>
  if(hi2c->Instance==I2C1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_I2C_MspInit+0x98>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d12e      	bne.n	8001f56 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001efc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 feab 	bl	8004c62 <HAL_RCCEx_PeriphCLKConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f12:	f7ff ff4f 	bl	8001db4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7ff ff62 	bl	8001de0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f22:	2312      	movs	r3, #18
 8001f24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f36:	4619      	mov	r1, r3
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <HAL_I2C_MspInit+0x9c>)
 8001f3a:	f000 fc5b 	bl	80027f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f42:	f7ff ff7f 	bl	8001e44 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	201e      	movs	r0, #30
 8001f4c:	f000 fbf3 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f50:	201e      	movs	r0, #30
 8001f52:	f000 fc0a 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3770      	adds	r7, #112	; 0x70
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40005400 	.word	0x40005400
 8001f64:	48000400 	.word	0x48000400

08001f68 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_IPCC_MspInit+0x44>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d113      	bne.n	8001fa2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f7e:	f7ff ff48 	bl	8001e12 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	202c      	movs	r0, #44	; 0x2c
 8001f88:	f000 fbd5 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f8c:	202c      	movs	r0, #44	; 0x2c
 8001f8e:	f000 fbec 	bl	800276a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	202d      	movs	r0, #45	; 0x2d
 8001f98:	f000 fbcd 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f9c:	202d      	movs	r0, #45	; 0x2d
 8001f9e:	f000 fbe4 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	58000c00 	.word	0x58000c00

08001fb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b096      	sub	sp, #88	; 0x58
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	2250      	movs	r2, #80	; 0x50
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fa9b 	bl	80094fc <memset>
  if(hrtc->Instance==RTC)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_RTC_MspInit+0x64>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d11d      	bne.n	800200c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fd4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fda:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fe3e 	bl	8004c62 <HAL_RCCEx_PeriphCLKConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001fec:	f7ff fee2 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ff0:	f7ff fee5 	bl	8001dbe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ff4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ff8:	f7ff ff24 	bl	8001e44 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2003      	movs	r0, #3
 8002002:	f000 fb98 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002006:	2003      	movs	r0, #3
 8002008:	f000 fbaf 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3758      	adds	r7, #88	; 0x58
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40002800 	.word	0x40002800

08002018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b09c      	sub	sp, #112	; 0x70
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2250      	movs	r2, #80	; 0x50
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f007 fa5f 	bl	80094fc <memset>
  if(huart->Instance==USART1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_UART_MspInit+0x84>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d124      	bne.n	8002092 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002048:	2301      	movs	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fe04 	bl	8004c62 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002060:	f7ff fea8 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002064:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002068:	f7ff ff05 	bl	8001e76 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	2002      	movs	r0, #2
 800206e:	f7ff feb7 	bl	8001de0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002072:	23c0      	movs	r3, #192	; 0xc0
 8002074:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002082:	2307      	movs	r3, #7
 8002084:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800208a:	4619      	mov	r1, r3
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <HAL_UART_MspInit+0x88>)
 800208e:	f000 fbb1 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3770      	adds	r7, #112	; 0x70
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40013800 	.word	0x40013800
 80020a0:	48000400 	.word	0x48000400

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <NMI_Handler+0x4>

080020aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <MemManage_Handler+0x4>

080020b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f0:	f000 f9ae 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80020fc:	f7ff f978 	bl	80013f0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <I2C1_EV_IRQHandler+0x10>)
 800210a:	f000 fec9 	bl	8002ea0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000a18 	.word	0x20000a18

08002118 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800211c:	f006 fdf2 	bl	8008d04 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002128:	f006 fe24 	bl	8008d74 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002134:	f000 fce6 	bl	8002b04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
  }

  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e009      	b.n	800219c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	60ba      	str	r2, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fdfd 	bl	8001d90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <_write+0x12>
  }
  return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f007 f920 	bl	800948c <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20030000 	.word	0x20030000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000b74 	.word	0x20000b74
 8002280:	20000d38 	.word	0x20000d38

08002284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <SystemInit+0x98>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <SystemInit+0x98>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80022b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <SystemInit+0x9c>)
 80022be:	4013      	ands	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	f023 0305 	bic.w	r3, r3, #5
 80022d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <SystemInit+0xa0>)
 80022f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <SystemInit+0xa0>)
 80022f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002308:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	faf6fefb 	.word	0xfaf6fefb
 8002324:	22041000 	.word	0x22041000

08002328 <CopyDataInit>:
 8002328:	58d4      	ldr	r4, [r2, r3]
 800232a:	50c4      	str	r4, [r0, r3]
 800232c:	3304      	adds	r3, #4

0800232e <LoopCopyDataInit>:
 800232e:	18c4      	adds	r4, r0, r3
 8002330:	428c      	cmp	r4, r1
 8002332:	d3f9      	bcc.n	8002328 <CopyDataInit>
 8002334:	4770      	bx	lr

08002336 <FillZerobss>:
 8002336:	6003      	str	r3, [r0, #0]
 8002338:	3004      	adds	r0, #4

0800233a <LoopFillZerobss>:
 800233a:	4288      	cmp	r0, r1
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>
 800233e:	4770      	bx	lr

08002340 <Reset_Handler>:
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopForever+0x2>)
 8002342:	4685      	mov	sp, r0
 8002344:	f7ff ff9e 	bl	8002284 <SystemInit>
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <LoopForever+0x6>)
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <LoopForever+0xa>)
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <LoopForever+0xe>)
 800234e:	2300      	movs	r3, #0
 8002350:	f7ff ffed 	bl	800232e <LoopCopyDataInit>
 8002354:	480b      	ldr	r0, [pc, #44]	; (8002384 <LoopForever+0x12>)
 8002356:	490c      	ldr	r1, [pc, #48]	; (8002388 <LoopForever+0x16>)
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <LoopForever+0x1a>)
 800235a:	2300      	movs	r3, #0
 800235c:	f7ff ffe7 	bl	800232e <LoopCopyDataInit>
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <LoopForever+0x1e>)
 8002362:	490c      	ldr	r1, [pc, #48]	; (8002394 <LoopForever+0x22>)
 8002364:	2300      	movs	r3, #0
 8002366:	f7ff ffe8 	bl	800233a <LoopFillZerobss>
 800236a:	f007 f895 	bl	8009498 <__libc_init_array>
 800236e:	f7ff fb27 	bl	80019c0 <main>

08002372 <LoopForever>:
 8002372:	e7fe      	b.n	8002372 <LoopForever>
 8002374:	20030000 	.word	0x20030000
 8002378:	20000008 	.word	0x20000008
 800237c:	2000008c 	.word	0x2000008c
 8002380:	0800a7b8 	.word	0x0800a7b8
 8002384:	200301e3 	.word	0x200301e3
 8002388:	200301e3 	.word	0x200301e3
 800238c:	0800b105 	.word	0x0800b105
 8002390:	2000095c 	.word	0x2000095c
 8002394:	20000d38 	.word	0x20000d38

08002398 <ADC1_IRQHandler>:
 8002398:	e7fe      	b.n	8002398 <ADC1_IRQHandler>
	...

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_Init+0x3c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_Init+0x3c>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f000 f9b4 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023b8:	2000      	movs	r0, #0
 80023ba:	f000 f80f 	bl	80023dc <HAL_InitTick>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	e001      	b.n	80023ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ca:	f7ff fd6d 	bl	8001ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ce:	79fb      	ldrb	r3, [r7, #7]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58004000 	.word	0x58004000

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_InitTick+0x6c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d024      	beq.n	800243a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023f0:	f002 f9a6 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_InitTick+0x6c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002400:	fbb3 f3f1 	udiv	r3, r3, r1
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f9ca 	bl	80027a2 <HAL_SYSTICK_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10f      	bne.n	8002434 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d809      	bhi.n	800242e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241a:	2200      	movs	r2, #0
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002422:	f000 f988 	bl	8002736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_InitTick+0x70>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e007      	b.n	800243e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e004      	b.n	800243e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e001      	b.n	800243e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000010 	.word	0x20000010
 800244c:	2000000c 	.word	0x2000000c

08002450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x20>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x24>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_IncTick+0x24>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000010 	.word	0x20000010
 8002474:	20000b78 	.word	0x20000b78

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_GetTick+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000b78 	.word	0x20000b78

08002490 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_GetTickPrio+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_GetTickFreq+0x14>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000010 	.word	0x20000010

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db12      	blt.n	8002598 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	490a      	ldr	r1, [pc, #40]	; (80025a4 <__NVIC_DisableIRQ+0x44>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	3320      	adds	r3, #32
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800258c:	f3bf 8f4f 	dsb	sy
}
 8002590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002592:	f3bf 8f6f 	isb	sy
}
 8002596:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0c      	blt.n	80025d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_SetPendingIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	3340      	adds	r3, #64	; 0x40
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0c      	blt.n	8002610 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_ClearPendingIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	3360      	adds	r3, #96	; 0x60
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff fec9 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff fee0 	bl	8002508 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff90 	bl	8002674 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5f 	bl	8002620 <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fed3 	bl	8002524 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fee3 	bl	8002560 <__NVIC_DisableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff96 	bl	80026dc <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff feed 	bl	80025a8 <__NVIC_SetPendingIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fefd 	bl	80025e4 <__NVIC_ClearPendingIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	e14c      	b.n	8002a9e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 813e 	beq.w	8002a98 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d005      	beq.n	8002834 <HAL_GPIO_Init+0x40>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d130      	bne.n	8002896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286a:	2201      	movs	r2, #1
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 0201 	and.w	r2, r3, #1
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d017      	beq.n	80028d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d123      	bne.n	8002926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	6939      	ldr	r1, [r7, #16]
 8002922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8098 	beq.w	8002a98 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002968:	4a54      	ldr	r2, [pc, #336]	; (8002abc <HAL_GPIO_Init+0x2c8>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002992:	d019      	beq.n	80029c8 <HAL_GPIO_Init+0x1d4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_GPIO_Init+0x2cc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_GPIO_Init+0x1d0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a49      	ldr	r2, [pc, #292]	; (8002ac4 <HAL_GPIO_Init+0x2d0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00d      	beq.n	80029c0 <HAL_GPIO_Init+0x1cc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a48      	ldr	r2, [pc, #288]	; (8002ac8 <HAL_GPIO_Init+0x2d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x1c8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a47      	ldr	r2, [pc, #284]	; (8002acc <HAL_GPIO_Init+0x2d8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_GPIO_Init+0x1c4>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e008      	b.n	80029ca <HAL_GPIO_Init+0x1d6>
 80029b8:	2307      	movs	r3, #7
 80029ba:	e006      	b.n	80029ca <HAL_GPIO_Init+0x1d6>
 80029bc:	2303      	movs	r3, #3
 80029be:	e004      	b.n	80029ca <HAL_GPIO_Init+0x1d6>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e002      	b.n	80029ca <HAL_GPIO_Init+0x1d6>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_GPIO_Init+0x1d6>
 80029c8:	2300      	movs	r3, #0
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	f002 0203 	and.w	r2, r2, #3
 80029d0:	0092      	lsls	r2, r2, #2
 80029d2:	4093      	lsls	r3, r2
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029da:	4938      	ldr	r1, [pc, #224]	; (8002abc <HAL_GPIO_Init+0x2c8>)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e8:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0c:	4a30      	ldr	r2, [pc, #192]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a36:	4a26      	ldr	r2, [pc, #152]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a62:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_GPIO_Init+0x2dc>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f aeab 	bne.w	8002804 <HAL_GPIO_Init+0x10>
  }
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	48000400 	.word	0x48000400
 8002ac4:	48000800 	.word	0x48000800
 8002ac8:	48000c00 	.word	0x48000c00
 8002acc:	48001000 	.word	0x48001000
 8002ad0:	58000800 	.word	0x58000800

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_HSEM_IRQHandler+0x30>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_HSEM_IRQHandler+0x30>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	4906      	ldr	r1, [pc, #24]	; (8002b34 <HAL_HSEM_IRQHandler+0x30>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002b1e:	4a05      	ldr	r2, [pc, #20]	; (8002b34 <HAL_HSEM_IRQHandler+0x30>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f807 	bl	8002b38 <HAL_HSEM_FreeCallback>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	58001500 	.word	0x58001500

08002b38 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e081      	b.n	8002c62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff f9a8 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	e006      	b.n	8002bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d104      	bne.n	8002be6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69d9      	ldr	r1, [r3, #28]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	4608      	mov	r0, r1
 8002c76:	4611      	mov	r1, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	813b      	strh	r3, [r7, #8]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	f040 80fd 	bne.w	8002e8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x34>
 8002c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d105      	bne.n	8002cac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0f1      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_I2C_Mem_Read+0x4e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e0ea      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cc2:	f7ff fbd9 	bl	8002478 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f975 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d5      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2222      	movs	r2, #34	; 0x22
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2240      	movs	r2, #64	; 0x40
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a3a      	ldr	r2, [r7, #32]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0c:	88f8      	ldrh	r0, [r7, #6]
 8002d0e:	893a      	ldrh	r2, [r7, #8]
 8002d10:	8979      	ldrh	r1, [r7, #10]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8d9 	bl	8002ed4 <I2C_RequestMemoryRead>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0ad      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2bff      	cmp	r3, #255	; 0xff
 8002d3c:	d90e      	bls.n	8002d5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	22ff      	movs	r2, #255	; 0xff
 8002d42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	8979      	ldrh	r1, [r7, #10]
 8002d4c:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <HAL_I2C_Mem_Read+0x22c>)
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 faef 	bl	8003338 <I2C_TransferConfig>
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_I2C_Mem_Read+0x22c>)
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fade 	bl	8003338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2200      	movs	r2, #0
 8002d84:	2104      	movs	r1, #4
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f91c 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07c      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d034      	beq.n	8002e3c <HAL_I2C_Mem_Read+0x1d0>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d130      	bne.n	8002e3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	2200      	movs	r2, #0
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f8ed 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04d      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d90e      	bls.n	8002e1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	22ff      	movs	r2, #255	; 0xff
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	8979      	ldrh	r1, [r7, #10]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fa8f 	bl	8003338 <I2C_TransferConfig>
 8002e1a:	e00f      	b.n	8002e3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fa7e 	bl	8003338 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d19a      	bne.n	8002d7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f950 	bl	80030f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e01a      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_I2C_Mem_Read+0x230>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	80002400 	.word	0x80002400
 8002e9c:	fe00e800 	.word	0xfe00e800

08002ea0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	8979      	ldrh	r1, [r7, #10]
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <I2C_RequestMemoryRead+0xa4>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fa1c 	bl	8003338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f8ac 	bl	8003062 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02c      	b.n	8002f6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1a:	893b      	ldrh	r3, [r7, #8]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
 8002f24:	e015      	b.n	8002f52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f26:	893b      	ldrh	r3, [r7, #8]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f892 	bl	8003062 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e012      	b.n	8002f6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f831 	bl	8002fc4 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	80002000 	.word	0x80002000

08002f7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d007      	beq.n	8002fb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	619a      	str	r2, [r3, #24]
  }
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd4:	e031      	b.n	800303a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fdc:	d02d      	beq.n	800303a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7ff fa4b 	bl	8002478 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d122      	bne.n	800303a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	429a      	cmp	r2, r3
 8003010:	d113      	bne.n	800303a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	429a      	cmp	r2, r3
 8003056:	d0be      	beq.n	8002fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800306e:	e033      	b.n	80030d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f87f 	bl	8003178 <I2C_IsErrorOccurred>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e031      	b.n	80030e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308a:	d025      	beq.n	80030d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308c:	f7ff f9f4 	bl	8002478 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	429a      	cmp	r2, r3
 800309a:	d302      	bcc.n	80030a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11a      	bne.n	80030d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d013      	beq.n	80030d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e007      	b.n	80030e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d1c4      	bne.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030fc:	e02f      	b.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f838 	bl	8003178 <I2C_IsErrorOccurred>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e02d      	b.n	800316e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7ff f9b1 	bl	8002478 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11a      	bne.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	d013      	beq.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b20      	cmp	r3, #32
 800316a:	d1c8      	bne.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d068      	beq.n	8003276 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2210      	movs	r2, #16
 80031aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031ac:	e049      	b.n	8003242 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b4:	d045      	beq.n	8003242 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7ff f95f 	bl	8002478 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_IsErrorOccurred+0x54>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d13a      	bne.n	8003242 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d121      	bne.n	8003234 <I2C_IsErrorOccurred+0xbc>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031f6:	d01d      	beq.n	8003234 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d01a      	beq.n	8003234 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800320e:	f7ff f933 	bl	8002478 <HAL_GetTick>
 8003212:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003214:	e00e      	b.n	8003234 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003216:	f7ff f92f 	bl	8002478 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b19      	cmp	r3, #25
 8003222:	d907      	bls.n	8003234 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	f043 0320 	orr.w	r3, r3, #32
 800322a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003232:	e006      	b.n	8003242 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b20      	cmp	r3, #32
 8003240:	d1e9      	bne.n	8003216 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b20      	cmp	r3, #32
 800324e:	d003      	beq.n	8003258 <I2C_IsErrorOccurred+0xe0>
 8003250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0aa      	beq.n	80031ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800325c:	2b00      	cmp	r3, #0
 800325e:	d103      	bne.n	8003268 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2220      	movs	r2, #32
 8003266:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f043 0302 	orr.w	r3, r3, #2
 80032d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01c      	beq.n	8003326 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff fe45 	bl	8002f7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <I2C_IsErrorOccurred+0x1bc>)
 80032fe:	400b      	ands	r3, r1
 8003300:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	431a      	orrs	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800332a:	4618      	mov	r0, r3
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	817b      	strh	r3, [r7, #10]
 8003346:	4613      	mov	r3, r2
 8003348:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003350:	7a7b      	ldrb	r3, [r7, #9]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003358:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	4313      	orrs	r3, r2
 8003362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003366:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	0d5b      	lsrs	r3, r3, #21
 8003372:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <I2C_TransferConfig+0x60>)
 8003378:	430b      	orrs	r3, r1
 800337a:	43db      	mvns	r3, r3
 800337c:	ea02 0103 	and.w	r1, r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	03ff63ff 	.word	0x03ff63ff

0800339c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d138      	bne.n	8003424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033bc:	2302      	movs	r3, #2
 80033be:	e032      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	d139      	bne.n	80034bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003452:	2302      	movs	r3, #2
 8003454:	e033      	b.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2224      	movs	r2, #36	; 0x24
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01e      	beq.n	800351c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_IPCC_Init+0x60>)
 80034e0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe fd3a 	bl	8001f68 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80034f4:	68b8      	ldr	r0, [r7, #8]
 80034f6:	f000 f85b 	bl	80035b0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f82c 	bl	8003564 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800351a:	e001      	b.n	8003520 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	58000c00 	.word	0x58000c00

08003530 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e00f      	b.n	8003592 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <IPCC_SetDefaultCallbacks+0x44>)
 800357c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3306      	adds	r3, #6
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	4a08      	ldr	r2, [pc, #32]	; (80035ac <IPCC_SetDefaultCallbacks+0x48>)
 800358a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d9ec      	bls.n	8003572 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	08003531 	.word	0x08003531
 80035ac:	0800354b 	.word	0x0800354b

080035b0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80035c4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223f      	movs	r2, #63	; 0x3f
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	58000400 	.word	0x58000400

080035f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <HAL_PWREx_GetVoltageRange+0x18>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	58000400 	.word	0x58000400

08003614 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d101      	bne.n	800362c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_RCC_HSE_Enable>:
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_HSE_Disable>:
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_RCC_HSE_IsReady>:
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003686:	d101      	bne.n	800368c <LL_RCC_HSE_IsReady+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_RCC_HSE_IsReady+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_HSI_Enable>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <LL_RCC_HSI_Disable>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_RCC_HSI_IsReady>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d101      	bne.n	80036ec <LL_RCC_HSI_IsReady+0x18>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <LL_RCC_HSI_IsReady+0x1a>
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_RCC_HSI48_Enable>:
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <LL_RCC_HSI48_Disable>:
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003754:	f023 0301 	bic.w	r3, r3, #1
 8003758:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_RCC_HSI48_IsReady>:
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d101      	bne.n	800377e <LL_RCC_HSI48_IsReady+0x18>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <LL_RCC_HSI48_IsReady+0x1a>
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_RCC_LSE_Enable>:
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <LL_RCC_LSE_Disable>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <LL_RCC_LSE_EnableBypass>:
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_RCC_LSE_DisableBypass>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_RCC_LSE_IsReady>:
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d101      	bne.n	800382a <LL_RCC_LSE_IsReady+0x18>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <LL_RCC_LSE_IsReady+0x1a>
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_RCC_LSI1_Enable>:
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_RCC_LSI1_Disable>:
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_RCC_LSI1_IsReady>:
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d101      	bne.n	8003892 <LL_RCC_LSI1_IsReady+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_RCC_LSI1_IsReady+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_RCC_LSI2_Enable>:
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_RCC_LSI2_Disable>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d0:	f023 0304 	bic.w	r3, r3, #4
 80038d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <LL_RCC_LSI2_IsReady>:
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d101      	bne.n	80038fa <LL_RCC_LSI2_IsReady+0x18>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <LL_RCC_LSI2_IsReady+0x1a>
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <LL_RCC_LSI2_SetTrimming>:
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_RCC_MSI_Enable>:
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_RCC_MSI_Disable>:
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6013      	str	r3, [r2, #0]
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_RCC_MSI_IsReady>:
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	d101      	bne.n	8003986 <LL_RCC_MSI_IsReady+0x16>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <LL_RCC_MSI_IsReady+0x18>
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_RCC_MSI_SetRange>:
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	600b      	str	r3, [r1, #0]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_MSI_GetRange>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2bb0      	cmp	r3, #176	; 0xb0
 80039d0:	d901      	bls.n	80039d6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80039d2:	23b0      	movs	r3, #176	; 0xb0
 80039d4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80039d6:	687b      	ldr	r3, [r7, #4]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_RCC_SetSysClkSource>:
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 0203 	bic.w	r2, r3, #3
 8003a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_RCC_GetSysClkSource>:
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <LL_RCC_SetAHBPrescaler>:
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_SetAHB4Prescaler>:
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ab2:	f023 020f 	bic.w	r2, r3, #15
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_RCC_SetAPB1Prescaler>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_RCC_SetAPB2Prescaler>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_GetAHBPrescaler>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_RCC_GetAHB4Prescaler>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_GetAPB1Prescaler>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_RCC_GetAPB2Prescaler>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_RCC_PLL_Enable>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_RCC_PLL_Disable>:
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	6013      	str	r3, [r2, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_PLL_IsReady>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd2:	d101      	bne.n	8003bd8 <LL_RCC_PLL_IsReady+0x18>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_RCC_PLL_IsReady+0x1a>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_RCC_PLL_GetN>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_RCC_PLL_GetR>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_PLL_GetDivider>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_RCC_PLL_GetMainSource>:
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d101      	bne.n	8003c5e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c7e:	d101      	bne.n	8003c84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca4:	d101      	bne.n	8003caa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc8:	d101      	bne.n	8003cce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cec:	d101      	bne.n	8003cf2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b08d      	sub	sp, #52	; 0x34
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e363      	b.n	80043da <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 808d 	beq.w	8003e3a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d20:	f7ff fe89 	bl	8003a36 <LL_RCC_GetSysClkSource>
 8003d24:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d26:	f7ff ff82 	bl	8003c2e <LL_RCC_PLL_GetMainSource>
 8003d2a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3e>
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d147      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d144      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e347      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d4e:	f7ff fe34 	bl	80039ba <LL_RCC_MSI_GetRange>
 8003d52:	4603      	mov	r3, r0
 8003d54:	429c      	cmp	r4, r3
 8003d56:	d914      	bls.n	8003d82 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fd2f 	bl	80047c0 <RCC_SetFlashLatencyFromMSIRange>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e336      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fe0e 	bl	8003992 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fe32 	bl	80039e4 <LL_RCC_MSI_SetCalibTrimming>
 8003d80:	e013      	b.n	8003daa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fe03 	bl	8003992 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fe27 	bl	80039e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd10 	bl	80047c0 <RCC_SetFlashLatencyFromMSIRange>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e317      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003daa:	f000 fcc9 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4aa4      	ldr	r2, [pc, #656]	; (8004044 <HAL_RCC_OscConfig+0x344>)
 8003db2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003db4:	4ba4      	ldr	r3, [pc, #656]	; (8004048 <HAL_RCC_OscConfig+0x348>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fb0f 	bl	80023dc <HAL_InitTick>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d039      	beq.n	8003e38 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e308      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01e      	beq.n	8003e0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dd0:	f7ff fdb0 	bl	8003934 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fb50 	bl	8002478 <HAL_GetTick>
 8003dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fb4c 	bl	8002478 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e2f5      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003dee:	f7ff fdbf 	bl	8003970 <LL_RCC_MSI_IsReady>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f1      	beq.n	8003ddc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fdc8 	bl	8003992 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fdec 	bl	80039e4 <LL_RCC_MSI_SetCalibTrimming>
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e0e:	f7ff fda0 	bl	8003952 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fb31 	bl	8002478 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e1a:	f7fe fb2d 	bl	8002478 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e2d6      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e2c:	f7ff fda0 	bl	8003970 <LL_RCC_MSI_IsReady>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f1      	bne.n	8003e1a <HAL_RCC_OscConfig+0x11a>
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e38:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d047      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	f7ff fdf6 	bl	8003a36 <LL_RCC_GetSysClkSource>
 8003e4a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	f7ff feef 	bl	8003c2e <LL_RCC_PLL_GetMainSource>
 8003e50:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_OscConfig+0x164>
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d108      	bne.n	8003e70 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d105      	bne.n	8003e70 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d134      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e2b4      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d102      	bne.n	8003e80 <HAL_RCC_OscConfig+0x180>
 8003e7a:	f7ff fbdd 	bl	8003638 <LL_RCC_HSE_Enable>
 8003e7e:	e001      	b.n	8003e84 <HAL_RCC_OscConfig+0x184>
 8003e80:	f7ff fbe9 	bl	8003656 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe faf4 	bl	8002478 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e94:	f7fe faf0 	bl	8002478 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e299      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ea6:	f7ff fbe5 	bl	8003674 <LL_RCC_HSE_IsReady>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f1      	beq.n	8003e94 <HAL_RCC_OscConfig+0x194>
 8003eb0:	e011      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fae1 	bl	8002478 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eba:	f7fe fadd 	bl	8002478 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b64      	cmp	r3, #100	; 0x64
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e286      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ecc:	f7ff fbd2 	bl	8003674 <LL_RCC_HSE_IsReady>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f1      	bne.n	8003eba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d04c      	beq.n	8003f7c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee2:	f7ff fda8 	bl	8003a36 <LL_RCC_GetSysClkSource>
 8003ee6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee8:	f7ff fea1 	bl	8003c2e <LL_RCC_PLL_GetMainSource>
 8003eec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_OscConfig+0x200>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d10e      	bne.n	8003f18 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e266      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fbf1 	bl	80036f8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f16:	e031      	b.n	8003f7c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	f7ff fbba 	bl	8003698 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe faa8 	bl	8002478 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe faa4 	bl	8002478 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e24d      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f3e:	f7ff fbc9 	bl	80036d4 <LL_RCC_HSI_IsReady>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f1      	beq.n	8003f2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fbd3 	bl	80036f8 <LL_RCC_HSI_SetCalibTrimming>
 8003f52:	e013      	b.n	8003f7c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f54:	f7ff fbaf 	bl	80036b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe fa8e 	bl	8002478 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fe fa8a 	bl	8002478 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e233      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f72:	f7ff fbaf 	bl	80036d4 <LL_RCC_HSI_IsReady>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f1      	bne.n	8003f60 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a3 	beq.w	80040dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d076      	beq.n	800408c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d046      	beq.n	8004038 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003faa:	f7ff fc66 	bl	800387a <LL_RCC_LSI1_IsReady>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d113      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003fb4:	f7ff fc3f 	bl	8003836 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fb8:	f7fe fa5e 	bl	8002478 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fc0:	f7fe fa5a 	bl	8002478 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e203      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fd2:	f7ff fc52 	bl	800387a <LL_RCC_LSI1_IsReady>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f1      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003fdc:	f7ff fc5f 	bl	800389e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fa4a 	bl	8002478 <HAL_GetTick>
 8003fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fe8:	f7fe fa46 	bl	8002478 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1ef      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003ffa:	f7ff fc72 	bl	80038e2 <LL_RCC_LSI2_IsReady>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f1      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fc7c 	bl	8003906 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800400e:	f7ff fc23 	bl	8003858 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fe fa31 	bl	8002478 <HAL_GetTick>
 8004016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800401a:	f7fe fa2d 	bl	8002478 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e1d6      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800402c:	f7ff fc25 	bl	800387a <LL_RCC_LSI1_IsReady>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f1      	bne.n	800401a <HAL_RCC_OscConfig+0x31a>
 8004036:	e051      	b.n	80040dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004038:	f7ff fbfd 	bl	8003836 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fa1c 	bl	8002478 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004042:	e00c      	b.n	800405e <HAL_RCC_OscConfig+0x35e>
 8004044:	20000008 	.word	0x20000008
 8004048:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800404c:	f7fe fa14 	bl	8002478 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1bd      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800405e:	f7ff fc0c 	bl	800387a <LL_RCC_LSI1_IsReady>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f1      	beq.n	800404c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004068:	f7ff fc2a 	bl	80038c0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800406e:	f7fe fa03 	bl	8002478 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b03      	cmp	r3, #3
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1ac      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004080:	f7ff fc2f 	bl	80038e2 <LL_RCC_LSI2_IsReady>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f1      	bne.n	800406e <HAL_RCC_OscConfig+0x36e>
 800408a:	e027      	b.n	80040dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800408c:	f7ff fc18 	bl	80038c0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe f9f2 	bl	8002478 <HAL_GetTick>
 8004094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004098:	f7fe f9ee 	bl	8002478 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e197      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040aa:	f7ff fc1a 	bl	80038e2 <LL_RCC_LSI2_IsReady>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f1      	bne.n	8004098 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80040b4:	f7ff fbd0 	bl	8003858 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fe f9de 	bl	8002478 <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040c0:	f7fe f9da 	bl	8002478 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e183      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040d2:	f7ff fbd2 	bl	800387a <LL_RCC_LSI1_IsReady>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f1      	bne.n	80040c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e8:	4ba7      	ldr	r3, [pc, #668]	; (8004388 <HAL_RCC_OscConfig+0x688>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d114      	bne.n	800411e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040f4:	f7ff fa70 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f8:	f7fe f9be 	bl	8002478 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004100:	f7fe f9ba 	bl	8002478 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e163      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004112:	4b9d      	ldr	r3, [pc, #628]	; (8004388 <HAL_RCC_OscConfig+0x688>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_RCC_OscConfig+0x42c>
 8004126:	f7ff fb30 	bl	800378a <LL_RCC_LSE_Enable>
 800412a:	e00c      	b.n	8004146 <HAL_RCC_OscConfig+0x446>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b05      	cmp	r3, #5
 8004132:	d104      	bne.n	800413e <HAL_RCC_OscConfig+0x43e>
 8004134:	f7ff fb4b 	bl	80037ce <LL_RCC_LSE_EnableBypass>
 8004138:	f7ff fb27 	bl	800378a <LL_RCC_LSE_Enable>
 800413c:	e003      	b.n	8004146 <HAL_RCC_OscConfig+0x446>
 800413e:	f7ff fb35 	bl	80037ac <LL_RCC_LSE_Disable>
 8004142:	f7ff fb55 	bl	80037f0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d014      	beq.n	8004178 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414e:	f7fe f993 	bl	8002478 <HAL_GetTick>
 8004152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004154:	e00a      	b.n	800416c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fe f98f 	bl	8002478 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	; 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e136      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800416c:	f7ff fb51 	bl	8003812 <LL_RCC_LSE_IsReady>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ef      	beq.n	8004156 <HAL_RCC_OscConfig+0x456>
 8004176:	e013      	b.n	80041a0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe f97e 	bl	8002478 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fe f97a 	bl	8002478 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	; 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e121      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004196:	f7ff fb3c 	bl	8003812 <LL_RCC_LSE_IsReady>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ef      	bne.n	8004180 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02c      	beq.n	8004206 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d014      	beq.n	80041de <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041b4:	f7ff fab5 	bl	8003722 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fe f95e 	bl	8002478 <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c0:	f7fe f95a 	bl	8002478 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e103      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041d2:	f7ff fac8 	bl	8003766 <LL_RCC_HSI48_IsReady>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f1      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4c0>
 80041dc:	e013      	b.n	8004206 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041de:	f7ff fab1 	bl	8003744 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fe f949 	bl	8002478 <HAL_GetTick>
 80041e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ea:	f7fe f945 	bl	8002478 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e0ee      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80041fc:	f7ff fab3 	bl	8003766 <LL_RCC_HSI48_IsReady>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f1      	bne.n	80041ea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80e4 	beq.w	80043d8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004210:	f7ff fc11 	bl	8003a36 <LL_RCC_GetSysClkSource>
 8004214:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	2b02      	cmp	r3, #2
 8004224:	f040 80b4 	bne.w	8004390 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0203 	and.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	429a      	cmp	r2, r3
 8004234:	d123      	bne.n	800427e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d11c      	bne.n	800427e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	0a1b      	lsrs	r3, r3, #8
 8004248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d114      	bne.n	800427e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d10d      	bne.n	800427e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d05d      	beq.n	800433a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d058      	beq.n	8004336 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0a1      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004296:	f7ff fc84 	bl	8003ba2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800429a:	f7fe f8ed 	bl	8002478 <HAL_GetTick>
 800429e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fe f8e9 	bl	8002478 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e092      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ef      	bne.n	80042a2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	4b30      	ldr	r3, [pc, #192]	; (800438c <HAL_RCC_OscConfig+0x68c>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042d4:	4311      	orrs	r1, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042da:	0212      	lsls	r2, r2, #8
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042e2:	4311      	orrs	r1, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042e8:	4311      	orrs	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042ee:	430a      	orrs	r2, r1
 80042f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042f8:	f7ff fc44 	bl	8003b84 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800430c:	f7fe f8b4 	bl	8002478 <HAL_GetTick>
 8004310:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fe f8b0 	bl	8002478 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e059      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ef      	beq.n	8004314 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004334:	e050      	b.n	80043d8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e04f      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d147      	bne.n	80043d8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004348:	f7ff fc1c 	bl	8003b84 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800435c:	f7fe f88c 	bl	8002478 <HAL_GetTick>
 8004360:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fe f888 	bl	8002478 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e031      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ef      	beq.n	8004364 <HAL_RCC_OscConfig+0x664>
 8004384:	e028      	b.n	80043d8 <HAL_RCC_OscConfig+0x6d8>
 8004386:	bf00      	nop
 8004388:	58000400 	.word	0x58000400
 800438c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d01e      	beq.n	80043d4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004396:	f7ff fc04 	bl	8003ba2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fe f86d 	bl	8002478 <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a2:	f7fe f869 	bl	8002478 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e012      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ef      	bne.n	80043a2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80043c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_OscConfig+0x6e4>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	60cb      	str	r3, [r1, #12]
 80043d2:	e001      	b.n	80043d8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3734      	adds	r7, #52	; 0x34
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	eefefffc 	.word	0xeefefffc

080043e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e12d      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043fc:	4b98      	ldr	r3, [pc, #608]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d91b      	bls.n	8004442 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b95      	ldr	r3, [pc, #596]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 0207 	bic.w	r2, r3, #7
 8004412:	4993      	ldr	r1, [pc, #588]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800441a:	f7fe f82d 	bl	8002478 <HAL_GetTick>
 800441e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004420:	e008      	b.n	8004434 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004422:	f7fe f829 	bl	8002478 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e111      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004434:	4b8a      	ldr	r3, [pc, #552]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d1ef      	bne.n	8004422 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fafb 	bl	8003a4e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004458:	f7fe f80e 	bl	8002478 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004460:	f7fe f80a 	bl	8002478 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0f2      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004472:	f7ff fbe8 	bl	8003c46 <LL_RCC_IsActiveFlag_HPRE>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f1      	beq.n	8004460 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d016      	beq.n	80044b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff faf2 	bl	8003a76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004492:	f7fd fff1 	bl	8002478 <HAL_GetTick>
 8004496:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800449a:	f7fd ffed 	bl	8002478 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0d5      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044ac:	f7ff fbdd 	bl	8003c6a <LL_RCC_IsActiveFlag_C2HPRE>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f1      	beq.n	800449a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff faeb 	bl	8003aa2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044cc:	f7fd ffd4 	bl	8002478 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044d4:	f7fd ffd0 	bl	8002478 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0b8      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80044e6:	f7ff fbd3 	bl	8003c90 <LL_RCC_IsActiveFlag_SHDHPRE>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f1      	beq.n	80044d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fae5 	bl	8003ad0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004506:	f7fd ffb7 	bl	8002478 <HAL_GetTick>
 800450a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800450e:	f7fd ffb3 	bl	8002478 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e09b      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004520:	f7ff fbc9 	bl	8003cb6 <LL_RCC_IsActiveFlag_PPRE1>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f1      	beq.n	800450e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d017      	beq.n	8004566 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fadb 	bl	8003af8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004542:	f7fd ff99 	bl	8002478 <HAL_GetTick>
 8004546:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800454a:	f7fd ff95 	bl	8002478 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e07d      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800455c:	f7ff fbbd 	bl	8003cda <LL_RCC_IsActiveFlag_PPRE2>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f1      	beq.n	800454a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d043      	beq.n	80045fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d106      	bne.n	8004588 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800457a:	f7ff f87b 	bl	8003674 <LL_RCC_HSE_IsReady>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d11e      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e067      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d106      	bne.n	800459e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004590:	f7ff fb16 	bl	8003bc0 <LL_RCC_PLL_IsReady>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d113      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e05c      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80045a6:	f7ff f9e3 	bl	8003970 <LL_RCC_MSI_IsReady>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d108      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e051      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80045b4:	f7ff f88e 	bl	80036d4 <LL_RCC_HSI_IsReady>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e04a      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fa21 	bl	8003a0e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045cc:	f7fd ff54 	bl	8002478 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fd ff50 	bl	8002478 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e036      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	f7ff fa24 	bl	8003a36 <LL_RCC_GetSysClkSource>
 80045ee:	4602      	mov	r2, r0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d1ec      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d21b      	bcs.n	8004640 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 0207 	bic.w	r2, r3, #7
 8004610:	4913      	ldr	r1, [pc, #76]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004618:	f7fd ff2e 	bl	8002478 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	e008      	b.n	8004632 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004620:	f7fd ff2a 	bl	8002478 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e012      	b.n	8004658 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_ClockConfig+0x278>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d1ef      	bne.n	8004620 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004640:	f000 f87e 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004644:	4603      	mov	r3, r0
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <HAL_RCC_ClockConfig+0x27c>)
 8004648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800464a:	f7fd ff21 	bl	8002490 <HAL_GetTickPrio>
 800464e:	4603      	mov	r3, r0
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd fec3 	bl	80023dc <HAL_InitTick>
 8004656:	4603      	mov	r3, r0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	58004000 	.word	0x58004000
 8004664:	20000008 	.word	0x20000008

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466e:	f7ff f9e2 	bl	8003a36 <LL_RCC_GetSysClkSource>
 8004672:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800467a:	f7ff f99e 	bl	80039ba <LL_RCC_MSI_GetRange>
 800467e:	4603      	mov	r3, r0
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e04b      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d102      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004696:	4b28      	ldr	r3, [pc, #160]	; (8004738 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e045      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d10a      	bne.n	80046b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046a2:	f7fe ffb7 	bl	8003614 <LL_RCC_HSE_IsEnabledDiv2>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d102      	bne.n	80046b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046ac:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e03a      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_GetSysClockFreq+0xd4>)
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e037      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80046b8:	f7ff fab9 	bl	8003c2e <LL_RCC_PLL_GetMainSource>
 80046bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d003      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x64>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d003      	beq.n	80046d2 <HAL_RCC_GetSysClockFreq+0x6a>
 80046ca:	e00d      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ce:	60bb      	str	r3, [r7, #8]
        break;
 80046d0:	e015      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046d2:	f7fe ff9f 	bl	8003614 <LL_RCC_HSE_IsEnabledDiv2>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046de:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80046e0:	e00d      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <HAL_RCC_GetSysClockFreq+0xd4>)
 80046e4:	60bb      	str	r3, [r7, #8]
        break;
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046e8:	f7ff f967 	bl	80039ba <LL_RCC_MSI_GetRange>
 80046ec:	4603      	mov	r3, r0
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fa:	60bb      	str	r3, [r7, #8]
        break;
 80046fc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80046fe:	f7ff fa71 	bl	8003be4 <LL_RCC_PLL_GetN>
 8004702:	4602      	mov	r2, r0
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	fb03 f402 	mul.w	r4, r3, r2
 800470a:	f7ff fa84 	bl	8003c16 <LL_RCC_PLL_GetDivider>
 800470e:	4603      	mov	r3, r0
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	3301      	adds	r3, #1
 8004714:	fbb4 f4f3 	udiv	r4, r4, r3
 8004718:	f7ff fa71 	bl	8003bfe <LL_RCC_PLL_GetR>
 800471c:	4603      	mov	r3, r0
 800471e:	0f5b      	lsrs	r3, r3, #29
 8004720:	3301      	adds	r3, #1
 8004722:	fbb4 f3f3 	udiv	r3, r4, r3
 8004726:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004728:	68fb      	ldr	r3, [r7, #12]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}
 8004732:	bf00      	nop
 8004734:	0800a670 	.word	0x0800a670
 8004738:	00f42400 	.word	0x00f42400
 800473c:	01e84800 	.word	0x01e84800

08004740 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b598      	push	{r3, r4, r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004744:	f7ff ff90 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004748:	4604      	mov	r4, r0
 800474a:	f7ff f9e9 	bl	8003b20 <LL_RCC_GetAHBPrescaler>
 800474e:	4603      	mov	r3, r0
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	4a03      	ldr	r2, [pc, #12]	; (8004764 <HAL_RCC_GetHCLKFreq+0x24>)
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd98      	pop	{r3, r4, r7, pc}
 8004764:	0800a610 	.word	0x0800a610

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b598      	push	{r3, r4, r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800476c:	f7ff ffe8 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004770:	4604      	mov	r4, r0
 8004772:	f7ff f9ef 	bl	8003b54 <LL_RCC_GetAPB1Prescaler>
 8004776:	4603      	mov	r3, r0
 8004778:	0a1b      	lsrs	r3, r3, #8
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	fa24 f303 	lsr.w	r3, r4, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd98      	pop	{r3, r4, r7, pc}
 8004790:	0800a650 	.word	0x0800a650

08004794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004794:	b598      	push	{r3, r4, r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004798:	f7ff ffd2 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 800479c:	4604      	mov	r4, r0
 800479e:	f7ff f9e5 	bl	8003b6c <LL_RCC_GetAPB2Prescaler>
 80047a2:	4603      	mov	r3, r0
 80047a4:	0adb      	lsrs	r3, r3, #11
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	4a04      	ldr	r2, [pc, #16]	; (80047bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd98      	pop	{r3, r4, r7, pc}
 80047bc:	0800a650 	.word	0x0800a650

080047c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2bb0      	cmp	r3, #176	; 0xb0
 80047cc:	d903      	bls.n	80047d6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047ce:	4b15      	ldr	r3, [pc, #84]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e007      	b.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	4a11      	ldr	r2, [pc, #68]	; (8004824 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80047e6:	f7ff f9a7 	bl	8003b38 <LL_RCC_GetAHB4Prescaler>
 80047ea:	4603      	mov	r3, r0
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	4a0d      	ldr	r2, [pc, #52]	; (8004828 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4a0a      	ldr	r2, [pc, #40]	; (800482c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	0c9c      	lsrs	r4, r3, #18
 800480a:	f7fe fef5 	bl	80035f8 <HAL_PWREx_GetVoltageRange>
 800480e:	4603      	mov	r3, r0
 8004810:	4619      	mov	r1, r3
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f80c 	bl	8004830 <RCC_SetFlashLatency>
 8004818:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bd90      	pop	{r4, r7, pc}
 8004822:	bf00      	nop
 8004824:	0800a670 	.word	0x0800a670
 8004828:	0800a610 	.word	0x0800a610
 800482c:	431bde83 	.word	0x431bde83

08004830 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b093      	sub	sp, #76	; 0x4c
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800483a:	4b37      	ldr	r3, [pc, #220]	; (8004918 <RCC_SetFlashLatency+0xe8>)
 800483c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004846:	4a35      	ldr	r2, [pc, #212]	; (800491c <RCC_SetFlashLatency+0xec>)
 8004848:	f107 031c 	add.w	r3, r7, #28
 800484c:	ca07      	ldmia	r2, {r0, r1, r2}
 800484e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004852:	4b33      	ldr	r3, [pc, #204]	; (8004920 <RCC_SetFlashLatency+0xf0>)
 8004854:	f107 040c 	add.w	r4, r7, #12
 8004858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800485a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800485e:	2300      	movs	r3, #0
 8004860:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d11a      	bne.n	80048a0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800486a:	2300      	movs	r3, #0
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
 800486e:	e013      	b.n	8004898 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	3348      	adds	r3, #72	; 0x48
 8004876:	443b      	add	r3, r7
 8004878:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d807      	bhi.n	8004892 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3348      	adds	r3, #72	; 0x48
 8004888:	443b      	add	r3, r7
 800488a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800488e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004890:	e020      	b.n	80048d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004894:	3301      	adds	r3, #1
 8004896:	643b      	str	r3, [r7, #64]	; 0x40
 8004898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489a:	2b03      	cmp	r3, #3
 800489c:	d9e8      	bls.n	8004870 <RCC_SetFlashLatency+0x40>
 800489e:	e019      	b.n	80048d4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048a0:	2300      	movs	r3, #0
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a4:	e013      	b.n	80048ce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	3348      	adds	r3, #72	; 0x48
 80048ac:	443b      	add	r3, r7
 80048ae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d807      	bhi.n	80048c8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	3348      	adds	r3, #72	; 0x48
 80048be:	443b      	add	r3, r7
 80048c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048c6:	e005      	b.n	80048d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ca:	3301      	adds	r3, #1
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d9e8      	bls.n	80048a6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <RCC_SetFlashLatency+0xf4>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 0207 	bic.w	r2, r3, #7
 80048dc:	4911      	ldr	r1, [pc, #68]	; (8004924 <RCC_SetFlashLatency+0xf4>)
 80048de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048e4:	f7fd fdc8 	bl	8002478 <HAL_GetTick>
 80048e8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048ea:	e008      	b.n	80048fe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048ec:	f7fd fdc4 	bl	8002478 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e007      	b.n	800490e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <RCC_SetFlashLatency+0xf4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004908:	429a      	cmp	r2, r3
 800490a:	d1ef      	bne.n	80048ec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	374c      	adds	r7, #76	; 0x4c
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}
 8004916:	bf00      	nop
 8004918:	0800a46c 	.word	0x0800a46c
 800491c:	0800a47c 	.word	0x0800a47c
 8004920:	0800a488 	.word	0x0800a488
 8004924:	58004000 	.word	0x58004000

08004928 <LL_RCC_LSE_IsEnabled>:
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <LL_RCC_LSE_IsEnabled+0x18>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <LL_RCC_LSE_IsEnabled+0x1a>
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <LL_RCC_LSE_IsReady>:
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b02      	cmp	r3, #2
 800495e:	d101      	bne.n	8004964 <LL_RCC_LSE_IsReady+0x18>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <LL_RCC_LSE_IsReady+0x1a>
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_RCC_SetRFWKPClockSource>:
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004980:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <LL_RCC_SetSMPSClockSource>:
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80049a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	f023 0203 	bic.w	r2, r3, #3
 80049ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <LL_RCC_SetSMPSPrescaler>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_SetUSARTClockSource>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f023 0203 	bic.w	r2, r3, #3
 8004a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_SetLPUARTClockSource>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_RCC_SetI2CClockSource>:
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	401a      	ands	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_RCC_SetLPTIMClockSource>:
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	43db      	mvns	r3, r3
 8004a96:	401a      	ands	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <LL_RCC_SetSAIClockSource>:
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_RCC_SetRNGClockSource>:
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_RCC_SetCLK48ClockSource>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_RCC_SetUSBClockSource>:
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ffe3 	bl	8004b0a <LL_RCC_SetCLK48ClockSource>
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <LL_RCC_SetADCClockSource>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_SetRTCClockSource>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_RCC_GetRTCClockSource>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_RCC_ForceBackupDomainReset>:
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <LL_RCC_PLLSAI1_Enable>:
{
 8004c02:	b480      	push	{r7}
 8004c04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c14:	6013      	str	r3, [r2, #0]
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_RCC_PLLSAI1_Disable>:
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c32:	6013      	str	r3, [r2, #0]
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <LL_RCC_PLLSAI1_IsReady>:
{
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c50:	d101      	bne.n	8004c56 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c6e:	2300      	movs	r3, #0
 8004c70:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d034      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c86:	d021      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c8c:	d81b      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c92:	d01d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c98:	d815      	bhi.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca2:	d110      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cb4:	e00d      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f947 	bl	8004f4e <RCCEx_PLLSAI1_ConfigNP>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cc4:	e005      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	77fb      	strb	r3, [r7, #31]
        break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd2:	7ffb      	ldrb	r3, [r7, #31]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fee8 	bl	8004ab2 <LL_RCC_SetSAIClockSource>
 8004ce2:	e001      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	7ffb      	ldrb	r3, [r7, #31]
 8004ce6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d046      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004cf4:	f7ff ff56 	bl	8004ba4 <LL_RCC_GetRTCClockSource>
 8004cf8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d03c      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d04:	f7fe fc68 	bl	80035d8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff30 	bl	8004b78 <LL_RCC_SetRTCClockSource>
 8004d18:	e02e      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d24:	f7ff ff4b 	bl	8004bbe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d28:	f7ff ff5a 	bl	8004be0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d44:	f7ff fdf0 	bl	8004928 <LL_RCC_LSE_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d114      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d4e:	f7fd fb93 	bl	8002478 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d54:	e00b      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fd fb8f 	bl	8002478 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d902      	bls.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	77fb      	strb	r3, [r7, #31]
              break;
 8004d6c:	e004      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d6e:	f7ff fded 	bl	800494c <LL_RCC_LSE_IsReady>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d1ee      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	77bb      	strb	r3, [r7, #30]
 8004d7c:	e001      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fe2a 	bl	80049ec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fe35 	bl	8004a18 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff fe5d 	bl	8004a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fe52 	bl	8004a7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fe2a 	bl	8004a44 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fe1f 	bl	8004a44 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d022      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fe8d 	bl	8004b36 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e24:	d107      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e34:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f8dd 	bl	8005004 <RCCEx_PLLSAI1_ConfigNQ>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004e54:	7ffb      	ldrb	r3, [r7, #31]
 8004e56:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d02b      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e76:	d003      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fe2a 	bl	8004ade <LL_RCC_SetRNGClockSource>
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7ff fe21 	bl	8004ade <LL_RCC_SetRNGClockSource>
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff fe34 	bl	8004b0a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d022      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fe3d 	bl	8004b4c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eda:	d107      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eea:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ef4:	d10b      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f8dd 	bl	80050ba <RCCEx_PLLSAI1_ConfigNR>
 8004f00:	4603      	mov	r3, r0
 8004f02:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fd26 	bl	8004970 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d009      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fd45 	bl	80049c4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fd2c 	bl	800499c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f5a:	f7ff fe61 	bl	8004c20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f5e:	f7fd fa8b 	bl	8002478 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f64:	e009      	b.n	8004f7a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f66:	f7fd fa87 	bl	8002478 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d902      	bls.n	8004f7a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	73fb      	strb	r3, [r7, #15]
      break;
 8004f78:	e004      	b.n	8004f84 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f7a:	f7ff fe60 	bl	8004c3e <LL_RCC_PLLSAI1_IsReady>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d137      	bne.n	8004ffa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fb8:	f7ff fe23 	bl	8004c02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fa5c 	bl	8002478 <HAL_GetTick>
 8004fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fc2:	e009      	b.n	8004fd8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fc4:	f7fd fa58 	bl	8002478 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d902      	bls.n	8004fd8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004fd6:	e004      	b.n	8004fe2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fd8:	f7ff fe31 	bl	8004c3e <LL_RCC_PLLSAI1_IsReady>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d1f0      	bne.n	8004fc4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d108      	bne.n	8004ffa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005010:	f7ff fe06 	bl	8004c20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005014:	f7fd fa30 	bl	8002478 <HAL_GetTick>
 8005018:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800501a:	e009      	b.n	8005030 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800501c:	f7fd fa2c 	bl	8002478 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d902      	bls.n	8005030 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	73fb      	strb	r3, [r7, #15]
      break;
 800502e:	e004      	b.n	800503a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005030:	f7ff fe05 	bl	8004c3e <LL_RCC_PLLSAI1_IsReady>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d137      	bne.n	80050b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506a:	4313      	orrs	r3, r2
 800506c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800506e:	f7ff fdc8 	bl	8004c02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005072:	f7fd fa01 	bl	8002478 <HAL_GetTick>
 8005076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005078:	e009      	b.n	800508e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800507a:	f7fd f9fd 	bl	8002478 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d902      	bls.n	800508e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	73fb      	strb	r3, [r7, #15]
        break;
 800508c:	e004      	b.n	8005098 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800508e:	f7ff fdd6 	bl	8004c3e <LL_RCC_PLLSAI1_IsReady>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d1f0      	bne.n	800507a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d108      	bne.n	80050b0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ac:	4313      	orrs	r3, r2
 80050ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050c6:	f7ff fdab 	bl	8004c20 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050ca:	f7fd f9d5 	bl	8002478 <HAL_GetTick>
 80050ce:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050d0:	e009      	b.n	80050e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d2:	f7fd f9d1 	bl	8002478 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d902      	bls.n	80050e6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e004      	b.n	80050f0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050e6:	f7ff fdaa 	bl	8004c3e <LL_RCC_PLLSAI1_IsReady>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d137      	bne.n	8005166 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510a:	4313      	orrs	r3, r2
 800510c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005120:	4313      	orrs	r3, r2
 8005122:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005124:	f7ff fd6d 	bl	8004c02 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005128:	f7fd f9a6 	bl	8002478 <HAL_GetTick>
 800512c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800512e:	e009      	b.n	8005144 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005130:	f7fd f9a2 	bl	8002478 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	73fb      	strb	r3, [r7, #15]
        break;
 8005142:	e004      	b.n	800514e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005144:	f7ff fd7b 	bl	8004c3e <LL_RCC_PLLSAI1_IsReady>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d1f0      	bne.n	8005130 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e09f      	b.n	80052c2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc ff0a 	bl	8001fb0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051a4:	4b49      	ldr	r3, [pc, #292]	; (80052cc <HAL_RTC_Init+0x15c>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d07e      	beq.n	80052ae <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	22ca      	movs	r2, #202	; 0xca
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2253      	movs	r2, #83	; 0x53
 80051be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8ab 	bl	800531c <RTC_EnterInitMode>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2204      	movs	r2, #4
 80051d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e067      	b.n	80052b2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68d2      	ldr	r2, [r2, #12]
 800521c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6919      	ldr	r1, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005240:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0203 	bic.w	r2, r2, #3
 8005250:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d113      	bne.n	80052a0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f829 	bl	80052d0 <HAL_RTC_WaitForSynchro>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	22ff      	movs	r2, #255	; 0xff
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2204      	movs	r2, #4
 8005290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e010      	b.n	80052c2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	22ff      	movs	r2, #255	; 0xff
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e001      	b.n	80052b2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d103      	bne.n	80052c0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40002800 	.word	0x40002800

080052d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052e6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052e8:	f7fd f8c6 	bl	8002478 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052ee:	e009      	b.n	8005304 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052f0:	f7fd f8c2 	bl	8002478 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fe:	d901      	bls.n	8005304 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e007      	b.n	8005314 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ee      	beq.n	80052f0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800533a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800533c:	f7fd f89c 	bl	8002478 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005342:	e009      	b.n	8005358 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005344:	f7fd f898 	bl	8002478 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005352:	d901      	bls.n	8005358 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e007      	b.n	8005368 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ee      	beq.n	8005344 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005386:	2302      	movs	r3, #2
 8005388:	e0a8      	b.n	80054dc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	22ca      	movs	r2, #202	; 0xca
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2253      	movs	r2, #83	; 0x53
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d020      	beq.n	80053fa <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80053b8:	f7fd f85e 	bl	8002478 <HAL_GetTick>
 80053bc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80053be:	e015      	b.n	80053ec <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053c0:	f7fd f85a 	bl	8002478 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ce:	d90d      	bls.n	80053ec <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2203      	movs	r2, #3
 80053dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e077      	b.n	80054dc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e2      	bne.n	80053c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005408:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800541a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800541c:	f7fd f82c 	bl	8002478 <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005422:	e015      	b.n	8005450 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005424:	f7fd f828 	bl	8002478 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005432:	d90d      	bls.n	8005450 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	22ff      	movs	r2, #255	; 0xff
 800543a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e045      	b.n	80054dc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0e2      	beq.n	8005424 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0207 	bic.w	r2, r2, #7
 8005474:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	430a      	orrs	r2, r1
 8005484:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005486:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800548e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005492:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800549c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	22ff      	movs	r2, #255	; 0xff
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58000800 	.word	0x58000800

080054e8 <LL_RCC_GetUSARTClockSource>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80054f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4013      	ands	r3, r2
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_RCC_GetLPUARTClockSource>:
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005514:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4013      	ands	r3, r2
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e042      	b.n	80055c0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fc fd63 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	; 0x24
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8ba 	bl	80056e4 <UART_SetConfig>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e022      	b.n	80055c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fad6 	bl	8005b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb5d 	bl	8005c78 <UART_CheckIdleState>
 80055be:	4603      	mov	r3, r0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d17b      	bne.n	80056da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_UART_Transmit+0x26>
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e074      	b.n	80056dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2221      	movs	r2, #33	; 0x21
 80055fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005602:	f7fc ff39 	bl	8002478 <HAL_GetTick>
 8005606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	d108      	bne.n	8005634 <HAL_UART_Transmit+0x6c>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e003      	b.n	800563c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800563c:	e030      	b.n	80056a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2180      	movs	r1, #128	; 0x80
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fbbf 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e03d      	b.n	80056dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005674:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	3302      	adds	r3, #2
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e007      	b.n	800568e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1c8      	bne.n	800563e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2140      	movs	r1, #64	; 0x40
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fb88 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e006      	b.n	80056dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e000      	b.n	80056dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e8:	b08c      	sub	sp, #48	; 0x30
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	431a      	orrs	r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	4313      	orrs	r3, r2
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4baf      	ldr	r3, [pc, #700]	; (80059d0 <UART_SetConfig+0x2ec>)
 8005714:	4013      	ands	r3, r2
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571c:	430b      	orrs	r3, r1
 800571e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4aa4      	ldr	r2, [pc, #656]	; (80059d4 <UART_SetConfig+0x2f0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574c:	4313      	orrs	r3, r2
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800575a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005764:	430b      	orrs	r3, r1
 8005766:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	f023 010f 	bic.w	r1, r3, #15
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a95      	ldr	r2, [pc, #596]	; (80059d8 <UART_SetConfig+0x2f4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d125      	bne.n	80057d4 <UART_SetConfig+0xf0>
 8005788:	2003      	movs	r0, #3
 800578a:	f7ff fead 	bl	80054e8 <LL_RCC_GetUSARTClockSource>
 800578e:	4603      	mov	r3, r0
 8005790:	2b03      	cmp	r3, #3
 8005792:	d81b      	bhi.n	80057cc <UART_SetConfig+0xe8>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0xb8>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057bd 	.word	0x080057bd
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057c5 	.word	0x080057c5
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b2:	e042      	b.n	800583a <UART_SetConfig+0x156>
 80057b4:	2302      	movs	r3, #2
 80057b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ba:	e03e      	b.n	800583a <UART_SetConfig+0x156>
 80057bc:	2304      	movs	r3, #4
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c2:	e03a      	b.n	800583a <UART_SetConfig+0x156>
 80057c4:	2308      	movs	r3, #8
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ca:	e036      	b.n	800583a <UART_SetConfig+0x156>
 80057cc:	2310      	movs	r3, #16
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d2:	e032      	b.n	800583a <UART_SetConfig+0x156>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a7e      	ldr	r2, [pc, #504]	; (80059d4 <UART_SetConfig+0x2f0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d12a      	bne.n	8005834 <UART_SetConfig+0x150>
 80057de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80057e2:	f7ff fe91 	bl	8005508 <LL_RCC_GetLPUARTClockSource>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ec:	d01a      	beq.n	8005824 <UART_SetConfig+0x140>
 80057ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f2:	d81b      	bhi.n	800582c <UART_SetConfig+0x148>
 80057f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f8:	d00c      	beq.n	8005814 <UART_SetConfig+0x130>
 80057fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fe:	d815      	bhi.n	800582c <UART_SetConfig+0x148>
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <UART_SetConfig+0x128>
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d008      	beq.n	800581c <UART_SetConfig+0x138>
 800580a:	e00f      	b.n	800582c <UART_SetConfig+0x148>
 800580c:	2300      	movs	r3, #0
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005812:	e012      	b.n	800583a <UART_SetConfig+0x156>
 8005814:	2302      	movs	r3, #2
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e00e      	b.n	800583a <UART_SetConfig+0x156>
 800581c:	2304      	movs	r3, #4
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e00a      	b.n	800583a <UART_SetConfig+0x156>
 8005824:	2308      	movs	r3, #8
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e006      	b.n	800583a <UART_SetConfig+0x156>
 800582c:	2310      	movs	r3, #16
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e002      	b.n	800583a <UART_SetConfig+0x156>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a65      	ldr	r2, [pc, #404]	; (80059d4 <UART_SetConfig+0x2f0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	f040 8097 	bne.w	8005974 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800584a:	2b08      	cmp	r3, #8
 800584c:	d823      	bhi.n	8005896 <UART_SetConfig+0x1b2>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x170>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005879 	.word	0x08005879
 8005858:	08005897 	.word	0x08005897
 800585c:	08005881 	.word	0x08005881
 8005860:	08005897 	.word	0x08005897
 8005864:	08005887 	.word	0x08005887
 8005868:	08005897 	.word	0x08005897
 800586c:	08005897 	.word	0x08005897
 8005870:	08005897 	.word	0x08005897
 8005874:	0800588f 	.word	0x0800588f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fe ff76 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 800587c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800587e:	e010      	b.n	80058a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005880:	4b56      	ldr	r3, [pc, #344]	; (80059dc <UART_SetConfig+0x2f8>)
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005884:	e00d      	b.n	80058a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005886:	f7fe feef 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 800588a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800588c:	e009      	b.n	80058a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005894:	e005      	b.n	80058a2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 812b 	beq.w	8005b00 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	4a4c      	ldr	r2, [pc, #304]	; (80059e0 <UART_SetConfig+0x2fc>)
 80058b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	4413      	add	r3, r2
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d305      	bcc.n	80058da <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d903      	bls.n	80058e2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058e0:	e10e      	b.n	8005b00 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	2200      	movs	r2, #0
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	60fa      	str	r2, [r7, #12]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	4a3c      	ldr	r2, [pc, #240]	; (80059e0 <UART_SetConfig+0x2fc>)
 80058f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2200      	movs	r2, #0
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005904:	f7fa fc94 	bl	8000230 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4610      	mov	r0, r2
 800590e:	4619      	mov	r1, r3
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	020b      	lsls	r3, r1, #8
 800591a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800591e:	0202      	lsls	r2, r0, #8
 8005920:	6979      	ldr	r1, [r7, #20]
 8005922:	6849      	ldr	r1, [r1, #4]
 8005924:	0849      	lsrs	r1, r1, #1
 8005926:	2000      	movs	r0, #0
 8005928:	460c      	mov	r4, r1
 800592a:	4605      	mov	r5, r0
 800592c:	eb12 0804 	adds.w	r8, r2, r4
 8005930:	eb43 0905 	adc.w	r9, r3, r5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	469a      	mov	sl, r3
 800593c:	4693      	mov	fp, r2
 800593e:	4652      	mov	r2, sl
 8005940:	465b      	mov	r3, fp
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	f7fa fc73 	bl	8000230 <__aeabi_uldivmod>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4613      	mov	r3, r2
 8005950:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005958:	d308      	bcc.n	800596c <UART_SetConfig+0x288>
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005960:	d204      	bcs.n	800596c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e0c9      	b.n	8005b00 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005972:	e0c5      	b.n	8005b00 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	d16d      	bne.n	8005a5a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800597e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005982:	3b01      	subs	r3, #1
 8005984:	2b07      	cmp	r3, #7
 8005986:	d82d      	bhi.n	80059e4 <UART_SetConfig+0x300>
 8005988:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <UART_SetConfig+0x2ac>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059e5 	.word	0x080059e5
 800599c:	080059bf 	.word	0x080059bf
 80059a0:	080059e5 	.word	0x080059e5
 80059a4:	080059e5 	.word	0x080059e5
 80059a8:	080059e5 	.word	0x080059e5
 80059ac:	080059c7 	.word	0x080059c7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b0:	f7fe fef0 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059b6:	e01b      	b.n	80059f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <UART_SetConfig+0x2f8>)
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059bc:	e018      	b.n	80059f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059be:	f7fe fe53 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 80059c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059c4:	e014      	b.n	80059f0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059cc:	e010      	b.n	80059f0 <UART_SetConfig+0x30c>
 80059ce:	bf00      	nop
 80059d0:	cfff69f3 	.word	0xcfff69f3
 80059d4:	40008000 	.word	0x40008000
 80059d8:	40013800 	.word	0x40013800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	0800a6b0 	.word	0x0800a6b0
      default:
        pclk = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8084 	beq.w	8005b00 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	4a4b      	ldr	r2, [pc, #300]	; (8005b2c <UART_SetConfig+0x448>)
 80059fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0a:	005a      	lsls	r2, r3, #1
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	441a      	add	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b0f      	cmp	r3, #15
 8005a22:	d916      	bls.n	8005a52 <UART_SetConfig+0x36e>
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2a:	d212      	bcs.n	8005a52 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f023 030f 	bic.w	r3, r3, #15
 8005a34:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	8bfb      	ldrh	r3, [r7, #30]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	8bfa      	ldrh	r2, [r7, #30]
 8005a4e:	60da      	str	r2, [r3, #12]
 8005a50:	e056      	b.n	8005b00 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a58:	e052      	b.n	8005b00 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	2b07      	cmp	r3, #7
 8005a62:	d822      	bhi.n	8005aaa <UART_SetConfig+0x3c6>
 8005a64:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <UART_SetConfig+0x388>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a8d 	.word	0x08005a8d
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005a9b 	.word	0x08005a9b
 8005a7c:	08005aab 	.word	0x08005aab
 8005a80:	08005aab 	.word	0x08005aab
 8005a84:	08005aab 	.word	0x08005aab
 8005a88:	08005aa3 	.word	0x08005aa3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fe82 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 8005a90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a92:	e010      	b.n	8005ab6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a94:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <UART_SetConfig+0x44c>)
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a98:	e00d      	b.n	8005ab6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9a:	f7fe fde5 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8005a9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aa0:	e009      	b.n	8005ab6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005aa8:	e005      	b.n	8005ab6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ab4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d021      	beq.n	8005b00 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <UART_SetConfig+0x448>)
 8005ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	441a      	add	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b0f      	cmp	r3, #15
 8005ae4:	d909      	bls.n	8005afa <UART_SetConfig+0x416>
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d205      	bcs.n	8005afa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	e002      	b.n	8005b00 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2200      	movs	r2, #0
 8005b14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3730      	adds	r7, #48	; 0x30
 8005b24:	46bd      	mov	sp, r7
 8005b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2a:	bf00      	nop
 8005b2c:	0800a6b0 	.word	0x0800a6b0
 8005b30:	00f42400 	.word	0x00f42400

08005b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01a      	beq.n	8005c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c32:	d10a      	bne.n	8005c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b098      	sub	sp, #96	; 0x60
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c88:	f7fc fbf6 	bl	8002478 <HAL_GetTick>
 8005c8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d12f      	bne.n	8005cfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f88e 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d022      	beq.n	8005cfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e063      	b.n	8005dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d149      	bne.n	8005d9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d12:	2200      	movs	r2, #0
 8005d14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f857 	bl	8005dcc <UART_WaitOnFlagUntilTimeout>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	623b      	str	r3, [r7, #32]
   return(result);
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
 8005d44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d76:	61fa      	str	r2, [r7, #28]
 8005d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	69b9      	ldr	r1, [r7, #24]
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	617b      	str	r3, [r7, #20]
   return(result);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e5      	bne.n	8005d56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e012      	b.n	8005dc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3758      	adds	r7, #88	; 0x58
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	e049      	b.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de4:	d045      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fc fb47 	bl	8002478 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e048      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d031      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d110      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2208      	movs	r2, #8
 8005e22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f838 	bl	8005e9a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e029      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d111      	bne.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f81e 	bl	8005e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0a6      	beq.n	8005dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b095      	sub	sp, #84	; 0x54
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e3      	bne.n	8005ed4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d118      	bne.n	8005f46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f023 0310 	bic.w	r3, r3, #16
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6979      	ldr	r1, [r7, #20]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e6      	bne.n	8005f14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f5a:	bf00      	nop
 8005f5c:	3754      	adds	r7, #84	; 0x54
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_UARTEx_DisableFifoMode+0x16>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e027      	b.n	8005fcc <HAL_UARTEx_DisableFifoMode+0x66>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0201 	bic.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005faa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e02d      	b.n	800604c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f84f 	bl	80060d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006068:	2302      	movs	r3, #2
 800606a:	e02d      	b.n	80060c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	; 0x24
 8006078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f811 	bl	80060d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060f0:	e031      	b.n	8006156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060f2:	2308      	movs	r3, #8
 80060f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060f6:	2308      	movs	r3, #8
 80060f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	0e5b      	lsrs	r3, r3, #25
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	0f5b      	lsrs	r3, r3, #29
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	7b3a      	ldrb	r2, [r7, #12]
 800611e:	4911      	ldr	r1, [pc, #68]	; (8006164 <UARTEx_SetNbDataToProcess+0x94>)
 8006120:	5c8a      	ldrb	r2, [r1, r2]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006126:	7b3a      	ldrb	r2, [r7, #12]
 8006128:	490f      	ldr	r1, [pc, #60]	; (8006168 <UARTEx_SetNbDataToProcess+0x98>)
 800612a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800612c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	7b7a      	ldrb	r2, [r7, #13]
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <UARTEx_SetNbDataToProcess+0x94>)
 800613e:	5c8a      	ldrb	r2, [r1, r2]
 8006140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006144:	7b7a      	ldrb	r2, [r7, #13]
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <UARTEx_SetNbDataToProcess+0x98>)
 8006148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800614a:	fb93 f3f2 	sdiv	r3, r3, r2
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	0800a6c8 	.word	0x0800a6c8
 8006168:	0800a6d0 	.word	0x0800a6d0

0800616c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	2218      	movs	r2, #24
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f001 f8d8 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006184:	233f      	movs	r3, #63	; 0x3f
 8006186:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006188:	2381      	movs	r3, #129	; 0x81
 800618a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800618c:	1dfb      	adds	r3, r7, #7
 800618e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006190:	2301      	movs	r3, #1
 8006192:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006194:	f107 0308 	add.w	r3, r7, #8
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fb54 	bl	8007848 <hci_send_req>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da01      	bge.n	80061aa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80061a6:	23ff      	movs	r3, #255	; 0xff
 80061a8:	e000      	b.n	80061ac <aci_gap_set_non_discoverable+0x40>
  return status;
 80061aa:	79fb      	ldrb	r3, [r7, #7]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80061b4:	b5b0      	push	{r4, r5, r7, lr}
 80061b6:	b0ce      	sub	sp, #312	; 0x138
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4605      	mov	r5, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061c6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80061ca:	462a      	mov	r2, r5
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80061d6:	4622      	mov	r2, r4
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061de:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80061e2:	4602      	mov	r2, r0
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061ea:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80061ee:	460a      	mov	r2, r1
 80061f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80061f2:	f107 0310 	add.w	r3, r7, #16
 80061f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80061fa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80061fe:	3308      	adds	r3, #8
 8006200:	f107 0210 	add.w	r2, r7, #16
 8006204:	4413      	add	r3, r2
 8006206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800620a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800620e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006212:	4413      	add	r3, r2
 8006214:	3309      	adds	r3, #9
 8006216:	f107 0210 	add.w	r2, r7, #16
 800621a:	4413      	add	r3, r2
 800621c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006220:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006224:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006232:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006236:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800623a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006246:	3301      	adds	r3, #1
 8006248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800624c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006250:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006254:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800625e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006262:	3302      	adds	r3, #2
 8006264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006268:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800626c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006270:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800627a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800627e:	3302      	adds	r3, #2
 8006280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006288:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800628c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006290:	7812      	ldrb	r2, [r2, #0]
 8006292:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006298:	3301      	adds	r3, #1
 800629a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800629e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062a2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80062a6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80062a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ac:	3301      	adds	r3, #1
 80062ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80062b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062b6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80062ba:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80062bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062c0:	3301      	adds	r3, #1
 80062c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80062c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80062ca:	3308      	adds	r3, #8
 80062cc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80062d0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f81d 	bl	8007314 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80062da:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80062de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062e2:	4413      	add	r3, r2
 80062e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80062e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062ec:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80062f0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80062f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062f6:	3301      	adds	r3, #1
 80062f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80062fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006300:	3301      	adds	r3, #1
 8006302:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006306:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800630a:	4618      	mov	r0, r3
 800630c:	f001 f802 	bl	8007314 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006310:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006314:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006318:	4413      	add	r3, r2
 800631a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800631e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006322:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006326:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800632c:	3302      	adds	r3, #2
 800632e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006336:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800633a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800633c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006340:	3302      	adds	r3, #2
 8006342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800634a:	2218      	movs	r2, #24
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fff0 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006354:	233f      	movs	r3, #63	; 0x3f
 8006356:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800635a:	2383      	movs	r3, #131	; 0x83
 800635c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006360:	f107 0310 	add.w	r3, r7, #16
 8006364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800636c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006370:	f107 030f 	add.w	r3, r7, #15
 8006374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006378:	2301      	movs	r3, #1
 800637a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800637e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fa5f 	bl	8007848 <hci_send_req>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	da01      	bge.n	8006394 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006390:	23ff      	movs	r3, #255	; 0xff
 8006392:	e004      	b.n	800639e <aci_gap_set_discoverable+0x1ea>
  return status;
 8006394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006398:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800639c:	781b      	ldrb	r3, [r3, #0]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bdb0      	pop	{r4, r5, r7, pc}

080063a8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0cc      	sub	sp, #304	; 0x130
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4602      	mov	r2, r0
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80063b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80063ba:	f107 0310 	add.w	r3, r7, #16
 80063be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80063d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063dc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80063e0:	7812      	ldrb	r2, [r2, #0]
 80063e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80063e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063e8:	3301      	adds	r3, #1
 80063ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063f2:	2218      	movs	r2, #24
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 ff9c 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063fc:	233f      	movs	r3, #63	; 0x3f
 80063fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006402:	2385      	movs	r3, #133	; 0x85
 8006404:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006408:	f107 0310 	add.w	r3, r7, #16
 800640c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006414:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006418:	f107 030f 	add.w	r3, r7, #15
 800641c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006420:	2301      	movs	r3, #1
 8006422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fa0b 	bl	8007848 <hci_send_req>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	da01      	bge.n	800643c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006438:	23ff      	movs	r3, #255	; 0xff
 800643a:	e004      	b.n	8006446 <aci_gap_set_io_capability+0x9e>
  return status;
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006444:	781b      	ldrb	r3, [r3, #0]
}
 8006446:	4618      	mov	r0, r3
 8006448:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006450:	b5b0      	push	{r4, r5, r7, lr}
 8006452:	b0cc      	sub	sp, #304	; 0x130
 8006454:	af00      	add	r7, sp, #0
 8006456:	4605      	mov	r5, r0
 8006458:	460c      	mov	r4, r1
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006462:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006466:	462a      	mov	r2, r5
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006472:	4622      	mov	r2, r4
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800647e:	4602      	mov	r2, r0
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800648a:	460a      	mov	r2, r1
 800648c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80064a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064b0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064bc:	3301      	adds	r3, #1
 80064be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80064d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064d6:	3301      	adds	r3, #1
 80064d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064e4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80064ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064f0:	3301      	adds	r3, #1
 80064f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800650a:	3301      	adds	r3, #1
 800650c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006518:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800651a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800651e:	3301      	adds	r3, #1
 8006520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006528:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800652c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800652e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006532:	3301      	adds	r3, #1
 8006534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006540:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800654c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006550:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006554:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006558:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800655c:	3304      	adds	r3, #4
 800655e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006566:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800656a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800656c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006570:	3301      	adds	r3, #1
 8006572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006576:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800657a:	2218      	movs	r2, #24
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fed8 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006584:	233f      	movs	r3, #63	; 0x3f
 8006586:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800658a:	2386      	movs	r3, #134	; 0x86
 800658c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006590:	f107 0310 	add.w	r3, r7, #16
 8006594:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800659c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80065a0:	f107 030f 	add.w	r3, r7, #15
 80065a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f947 	bl	8007848 <hci_send_req>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da01      	bge.n	80065c4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80065c0:	23ff      	movs	r3, #255	; 0xff
 80065c2:	e004      	b.n	80065ce <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80065c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80065cc:	781b      	ldrb	r3, [r3, #0]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bdb0      	pop	{r4, r5, r7, pc}

080065d8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b0cc      	sub	sp, #304	; 0x130
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4602      	mov	r2, r0
 80065e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e8:	6019      	str	r1, [r3, #0]
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80065f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800660e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006612:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006616:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800661a:	8812      	ldrh	r2, [r2, #0]
 800661c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800661e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006622:	3302      	adds	r3, #2
 8006624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006630:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800663a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800663e:	3304      	adds	r3, #4
 8006640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006644:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006648:	2218      	movs	r2, #24
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fe71 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006652:	233f      	movs	r3, #63	; 0x3f
 8006654:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006658:	2388      	movs	r3, #136	; 0x88
 800665a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800666a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800666e:	f107 030f 	add.w	r3, r7, #15
 8006672:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006676:	2301      	movs	r3, #1
 8006678:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800667c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f001 f8e0 	bl	8007848 <hci_send_req>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	da01      	bge.n	8006692 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800668e:	23ff      	movs	r3, #255	; 0xff
 8006690:	e004      	b.n	800669c <aci_gap_pass_key_resp+0xc4>
  return status;
 8006692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006696:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800669a:	781b      	ldrb	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80066a6:	b590      	push	{r4, r7, lr}
 80066a8:	b0cd      	sub	sp, #308	; 0x134
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066b6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80066c4:	4622      	mov	r2, r4
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066cc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80066d0:	4602      	mov	r2, r0
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80066dc:	460a      	mov	r2, r1
 80066de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80066e0:	f107 0310 	add.w	r3, r7, #16
 80066e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80066e8:	f107 0308 	add.w	r3, r7, #8
 80066ec:	2207      	movs	r2, #7
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fe1f 	bl	8007334 <Osal_MemSet>
  int index_input = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006704:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800670c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006710:	3301      	adds	r3, #1
 8006712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800671e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006726:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800672a:	3301      	adds	r3, #1
 800672c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006734:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006738:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006744:	3301      	adds	r3, #1
 8006746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800674a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800674e:	2218      	movs	r2, #24
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fdee 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006758:	233f      	movs	r3, #63	; 0x3f
 800675a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800675e:	238a      	movs	r3, #138	; 0x8a
 8006760:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800676c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006774:	f107 0308 	add.w	r3, r7, #8
 8006778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800677c:	2307      	movs	r3, #7
 800677e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f85d 	bl	8007848 <hci_send_req>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	da01      	bge.n	8006798 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006794:	23ff      	movs	r3, #255	; 0xff
 8006796:	e02e      	b.n	80067f6 <aci_gap_init+0x150>
  if ( resp.Status )
 8006798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <aci_gap_init+0x10c>
    return resp.Status;
 80067a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	e021      	b.n	80067f6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80067be:	b29a      	uxth	r2, r3
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80067de:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80067e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80067e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80067f2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd90      	pop	{r4, r7, pc}

08006800 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b0cc      	sub	sp, #304	; 0x130
 8006804:	af00      	add	r7, sp, #0
 8006806:	4602      	mov	r2, r0
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006810:	6019      	str	r1, [r3, #0]
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800681a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800681c:	f107 0310 	add.w	r3, r7, #16
 8006820:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800683e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800684a:	3301      	adds	r3, #1
 800684c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006854:	1c58      	adds	r0, r3, #1
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800685e:	781a      	ldrb	r2, [r3, #0]
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	f000 fd53 	bl	8007314 <Osal_MemCpy>
  index_input += AdvDataLen;
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800687c:	4413      	add	r3, r2
 800687e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006886:	2218      	movs	r2, #24
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fd52 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006890:	233f      	movs	r3, #63	; 0x3f
 8006892:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006896:	238e      	movs	r3, #142	; 0x8e
 8006898:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800689c:	f107 0310 	add.w	r3, r7, #16
 80068a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80068a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068ac:	f107 030f 	add.w	r3, r7, #15
 80068b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 ffc1 	bl	8007848 <hci_send_req>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da01      	bge.n	80068d0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80068cc:	23ff      	movs	r3, #255	; 0xff
 80068ce:	e004      	b.n	80068da <aci_gap_update_adv_data+0xda>
  return status;
 80068d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068d8:	781b      	ldrb	r3, [r3, #0]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068ee:	f107 0308 	add.w	r3, r7, #8
 80068f2:	2218      	movs	r2, #24
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fd1c 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80068fc:	233f      	movs	r3, #63	; 0x3f
 80068fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006900:	2392      	movs	r3, #146	; 0x92
 8006902:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006904:	1dfb      	adds	r3, r7, #7
 8006906:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006908:	2301      	movs	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800690c:	f107 0308 	add.w	r3, r7, #8
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ff98 	bl	8007848 <hci_send_req>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	da01      	bge.n	8006922 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800691e:	23ff      	movs	r3, #255	; 0xff
 8006920:	e000      	b.n	8006924 <aci_gap_configure_whitelist+0x40>
  return status;
 8006922:	79fb      	ldrb	r3, [r7, #7]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b0cc      	sub	sp, #304	; 0x130
 8006930:	af00      	add	r7, sp, #0
 8006932:	4602      	mov	r2, r0
 8006934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006938:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006946:	460a      	mov	r2, r1
 8006948:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800694a:	f107 0310 	add.w	r3, r7, #16
 800694e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006956:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006968:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800696c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006970:	8812      	ldrh	r2, [r2, #0]
 8006972:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006978:	3302      	adds	r3, #2
 800697a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800697e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006982:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006986:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800698e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006992:	3301      	adds	r3, #1
 8006994:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800699c:	2218      	movs	r2, #24
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fcc7 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80069a6:	233f      	movs	r3, #63	; 0x3f
 80069a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80069ac:	23a5      	movs	r3, #165	; 0xa5
 80069ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069b2:	f107 0310 	add.w	r3, r7, #16
 80069b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069c2:	f107 030f 	add.w	r3, r7, #15
 80069c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069d4:	2100      	movs	r1, #0
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 ff36 	bl	8007848 <hci_send_req>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	da01      	bge.n	80069e6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80069e2:	23ff      	movs	r3, #255	; 0xff
 80069e4:	e004      	b.n	80069f0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80069ee:	781b      	ldrb	r3, [r3, #0]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b088      	sub	sp, #32
 80069fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a04:	f107 0308 	add.w	r3, r7, #8
 8006a08:	2218      	movs	r2, #24
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fc91 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a12:	233f      	movs	r3, #63	; 0x3f
 8006a14:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006a16:	f240 1301 	movw	r3, #257	; 0x101
 8006a1a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006a1c:	1dfb      	adds	r3, r7, #7
 8006a1e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006a20:	2301      	movs	r3, #1
 8006a22:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a24:	f107 0308 	add.w	r3, r7, #8
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 ff0c 	bl	8007848 <hci_send_req>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da01      	bge.n	8006a3a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006a36:	23ff      	movs	r3, #255	; 0xff
 8006a38:	e000      	b.n	8006a3c <aci_gatt_init+0x42>
  return status;
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b0cf      	sub	sp, #316	; 0x13c
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006a50:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006a54:	6001      	str	r1, [r0, #0]
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a5e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a62:	4622      	mov	r2, r4
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a6a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006a6e:	4602      	mov	r2, r0
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a76:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006a7a:	460a      	mov	r2, r1
 8006a7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a8a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d00a      	beq.n	8006aaa <aci_gatt_add_service+0x66>
 8006a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a98:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d101      	bne.n	8006aa6 <aci_gatt_add_service+0x62>
 8006aa2:	2311      	movs	r3, #17
 8006aa4:	e002      	b.n	8006aac <aci_gatt_add_service+0x68>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <aci_gatt_add_service+0x68>
 8006aaa:	2303      	movs	r3, #3
 8006aac:	f107 0210 	add.w	r2, r7, #16
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ab6:	f107 030c 	add.w	r3, r7, #12
 8006aba:	2203      	movs	r2, #3
 8006abc:	2100      	movs	r1, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fc38 	bl	8007334 <Osal_MemSet>
  int index_input = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006aca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ace:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ad2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006ad6:	7812      	ldrb	r2, [r2, #0]
 8006ad8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ade:	3301      	adds	r3, #1
 8006ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006ae4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ae8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d002      	beq.n	8006af8 <aci_gatt_add_service+0xb4>
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d004      	beq.n	8006b00 <aci_gatt_add_service+0xbc>
 8006af6:	e007      	b.n	8006b08 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006af8:	2302      	movs	r3, #2
 8006afa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006afe:	e005      	b.n	8006b0c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006b06:	e001      	b.n	8006b0c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006b08:	2397      	movs	r3, #151	; 0x97
 8006b0a:	e06c      	b.n	8006be6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006b0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b10:	1c58      	adds	r0, r3, #1
 8006b12:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006b16:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	f000 fbf8 	bl	8007314 <Osal_MemCpy>
    index_input += size;
 8006b24:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006b28:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006b3a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006b3e:	7812      	ldrb	r2, [r2, #0]
 8006b40:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b46:	3301      	adds	r3, #1
 8006b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b50:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006b54:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006b58:	7812      	ldrb	r2, [r2, #0]
 8006b5a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b60:	3301      	adds	r3, #1
 8006b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b6a:	2218      	movs	r2, #24
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fbe0 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b74:	233f      	movs	r3, #63	; 0x3f
 8006b76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006b7a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006b7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b82:	f107 0310 	add.w	r3, r7, #16
 8006b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006b92:	f107 030c 	add.w	r3, r7, #12
 8006b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fe4e 	bl	8007848 <hci_send_req>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	da01      	bge.n	8006bb6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006bb2:	23ff      	movs	r3, #255	; 0xff
 8006bb4:	e017      	b.n	8006be6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006bb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006bc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	e00a      	b.n	8006be6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006bd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006be2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}

08006bf0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b0d1      	sub	sp, #324	; 0x144
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006bfe:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006c02:	600a      	str	r2, [r1, #0]
 8006c04:	4619      	mov	r1, r3
 8006c06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006c0e:	4622      	mov	r2, r4
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c16:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c22:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006c26:	460a      	mov	r2, r1
 8006c28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006c2a:	f107 0318 	add.w	r3, r7, #24
 8006c2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006c32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c36:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d00a      	beq.n	8006c56 <aci_gatt_add_char+0x66>
 8006c40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c44:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d101      	bne.n	8006c52 <aci_gatt_add_char+0x62>
 8006c4e:	2313      	movs	r3, #19
 8006c50:	e002      	b.n	8006c58 <aci_gatt_add_char+0x68>
 8006c52:	2303      	movs	r3, #3
 8006c54:	e000      	b.n	8006c58 <aci_gatt_add_char+0x68>
 8006c56:	2305      	movs	r3, #5
 8006c58:	f107 0218 	add.w	r2, r7, #24
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006c62:	f107 0314 	add.w	r3, r7, #20
 8006c66:	2203      	movs	r2, #3
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fb62 	bl	8007334 <Osal_MemSet>
  int index_input = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8006c76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c7a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006c7e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006c82:	8812      	ldrh	r2, [r2, #0]
 8006c84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006c90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c94:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006c98:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ca0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006caa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006cae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d002      	beq.n	8006cbe <aci_gatt_add_char+0xce>
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d004      	beq.n	8006cc6 <aci_gatt_add_char+0xd6>
 8006cbc:	e007      	b.n	8006cce <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006cc4:	e005      	b.n	8006cd2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006ccc:	e001      	b.n	8006cd2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006cce:	2397      	movs	r3, #151	; 0x97
 8006cd0:	e091      	b.n	8006df6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cd6:	1cd8      	adds	r0, r3, #3
 8006cd8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006cdc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006ce0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	f000 fb15 	bl	8007314 <Osal_MemCpy>
    index_input += size;
 8006cea:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006cee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006cf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cfc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006d00:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006d04:	8812      	ldrh	r2, [r2, #0]
 8006d06:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006d08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006d12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d16:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006d1a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d20:	3301      	adds	r3, #1
 8006d22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d2a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006d2e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d34:	3301      	adds	r3, #1
 8006d36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d3e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006d42:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006d44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d48:	3301      	adds	r3, #1
 8006d4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d52:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006d56:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006d58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006d62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d66:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006d6a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006d6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d70:	3301      	adds	r3, #1
 8006d72:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d7a:	2218      	movs	r2, #24
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fad8 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d84:	233f      	movs	r3, #63	; 0x3f
 8006d86:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006d8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d8e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006d92:	f107 0318 	add.w	r3, r7, #24
 8006d96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006d9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006da2:	f107 0314 	add.w	r3, r7, #20
 8006da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006daa:	2303      	movs	r3, #3
 8006dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006db0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fd46 	bl	8007848 <hci_send_req>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da01      	bge.n	8006dc6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006dc2:	23ff      	movs	r3, #255	; 0xff
 8006dc4:	e017      	b.n	8006df6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006dc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006dd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	e00a      	b.n	8006df6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006de0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006df2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd90      	pop	{r4, r7, pc}

08006e00 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006e00:	b5b0      	push	{r4, r5, r7, lr}
 8006e02:	b0cc      	sub	sp, #304	; 0x130
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4605      	mov	r5, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006e16:	462a      	mov	r2, r5
 8006e18:	801a      	strh	r2, [r3, #0]
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e22:	4622      	mov	r2, r4
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006e2e:	4602      	mov	r2, r0
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006e3e:	f107 0310 	add.w	r3, r7, #16
 8006e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8006e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e60:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e64:	8812      	ldrh	r2, [r2, #0]
 8006e66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e6c:	3302      	adds	r3, #2
 8006e6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8006e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e7a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e7e:	8812      	ldrh	r2, [r2, #0]
 8006e80:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e86:	3302      	adds	r3, #2
 8006e88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e94:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eae:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006eb2:	7812      	ldrb	r2, [r2, #0]
 8006eb4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eba:	3301      	adds	r3, #1
 8006ebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec4:	1d98      	adds	r0, r3, #6
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006ed6:	f000 fa1d 	bl	8007314 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ee8:	4413      	add	r3, r2
 8006eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ef2:	2218      	movs	r2, #24
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fa1c 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006efc:	233f      	movs	r3, #63	; 0x3f
 8006efe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006f02:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006f06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f0a:	f107 0310 	add.w	r3, r7, #16
 8006f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f1a:	f107 030f 	add.w	r3, r7, #15
 8006f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fc8a 	bl	8007848 <hci_send_req>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da01      	bge.n	8006f3e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006f3a:	23ff      	movs	r3, #255	; 0xff
 8006f3c:	e004      	b.n	8006f48 <aci_gatt_update_char_value+0x148>
  return status;
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f46:	781b      	ldrb	r3, [r3, #0]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bdb0      	pop	{r4, r5, r7, pc}

08006f52 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b0cc      	sub	sp, #304	; 0x130
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f76:	460a      	mov	r2, r1
 8006f78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006f7a:	f107 0310 	add.w	r3, r7, #16
 8006f7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa8:	3301      	adds	r3, #1
 8006faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fcc:	1c98      	adds	r0, r3, #2
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	f000 f997 	bl	8007314 <Osal_MemCpy>
  index_input += Length;
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ffe:	2218      	movs	r2, #24
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f996 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007008:	233f      	movs	r3, #63	; 0x3f
 800700a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800700e:	230c      	movs	r3, #12
 8007010:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007014:	f107 0310 	add.w	r3, r7, #16
 8007018:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800701c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007020:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007024:	f107 030f 	add.w	r3, r7, #15
 8007028:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800702c:	2301      	movs	r3, #1
 800702e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007032:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fc05 	bl	8007848 <hci_send_req>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	da01      	bge.n	8007048 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007044:	23ff      	movs	r3, #255	; 0xff
 8007046:	e004      	b.n	8007052 <aci_hal_write_config_data+0x100>
  return status;
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007050:	781b      	ldrb	r3, [r3, #0]
}
 8007052:	4618      	mov	r0, r3
 8007054:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b0cc      	sub	sp, #304	; 0x130
 8007060:	af00      	add	r7, sp, #0
 8007062:	4602      	mov	r2, r0
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007076:	460a      	mov	r2, r1
 8007078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800707a:	f107 0310 	add.w	r3, r7, #16
 800707e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007098:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800709c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80070ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80070ba:	7812      	ldrb	r2, [r2, #0]
 80070bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80070be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070c2:	3301      	adds	r3, #1
 80070c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070cc:	2218      	movs	r2, #24
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f92f 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070d6:	233f      	movs	r3, #63	; 0x3f
 80070d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80070dc:	230f      	movs	r3, #15
 80070de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070e2:	f107 0310 	add.w	r3, r7, #16
 80070e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80070f2:	f107 030f 	add.w	r3, r7, #15
 80070f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007100:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fb9e 	bl	8007848 <hci_send_req>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	da01      	bge.n	8007116 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007112:	23ff      	movs	r3, #255	; 0xff
 8007114:	e004      	b.n	8007120 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800711e:	781b      	ldrb	r3, [r3, #0]
}
 8007120:	4618      	mov	r0, r3
 8007122:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b0cc      	sub	sp, #304	; 0x130
 800712e:	af00      	add	r7, sp, #0
 8007130:	4602      	mov	r2, r0
 8007132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007136:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800713a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800713c:	f107 0310 	add.w	r3, r7, #16
 8007140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800715e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007162:	8812      	ldrh	r2, [r2, #0]
 8007164:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800716a:	3302      	adds	r3, #2
 800716c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007170:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007174:	2218      	movs	r2, #24
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f8db 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x3f;
 800717e:	233f      	movs	r3, #63	; 0x3f
 8007180:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007184:	2318      	movs	r3, #24
 8007186:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800718a:	f107 0310 	add.w	r3, r7, #16
 800718e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007196:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800719a:	f107 030f 	add.w	r3, r7, #15
 800719e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fb4a 	bl	8007848 <hci_send_req>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	da01      	bge.n	80071be <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80071ba:	23ff      	movs	r3, #255	; 0xff
 80071bc:	e004      	b.n	80071c8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071c6:	781b      	ldrb	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b088      	sub	sp, #32
 80071d6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071dc:	f107 0308 	add.w	r3, r7, #8
 80071e0:	2218      	movs	r2, #24
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f8a5 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x03;
 80071ea:	2303      	movs	r3, #3
 80071ec:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80071ee:	2303      	movs	r3, #3
 80071f0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80071f2:	1dfb      	adds	r3, r7, #7
 80071f4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb21 	bl	8007848 <hci_send_req>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	da01      	bge.n	8007210 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800720c:	23ff      	movs	r3, #255	; 0xff
 800720e:	e000      	b.n	8007212 <hci_reset+0x40>
  return status;
 8007210:	79fb      	ldrb	r3, [r7, #7]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800721a:	b590      	push	{r4, r7, lr}
 800721c:	b0cd      	sub	sp, #308	; 0x134
 800721e:	af00      	add	r7, sp, #0
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800722e:	4622      	mov	r2, r4
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800723a:	4602      	mov	r2, r0
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007246:	460a      	mov	r2, r1
 8007248:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800724a:	f107 0310 	add.w	r3, r7, #16
 800724e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007256:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800726c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007278:	3301      	adds	r3, #1
 800727a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800727e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007286:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800728e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007292:	3301      	adds	r3, #1
 8007294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072a0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80072a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ac:	3301      	adds	r3, #1
 80072ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072b6:	2218      	movs	r2, #24
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 f83a 	bl	8007334 <Osal_MemSet>
  rq.ogf = 0x08;
 80072c0:	2308      	movs	r3, #8
 80072c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80072c6:	2331      	movs	r3, #49	; 0x31
 80072c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072cc:	f107 0310 	add.w	r3, r7, #16
 80072d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80072dc:	f107 030f 	add.w	r3, r7, #15
 80072e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 faa9 	bl	8007848 <hci_send_req>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da01      	bge.n	8007300 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80072fc:	23ff      	movs	r3, #255	; 0xff
 80072fe:	e004      	b.n	800730a <hci_le_set_default_phy+0xf0>
  return status;
 8007300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007304:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007308:	781b      	ldrb	r3, [r3, #0]
}
 800730a:	4618      	mov	r0, r3
 800730c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}

08007314 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f002 f8db 	bl	80094e0 <memcpy>
 800732a:	4603      	mov	r3, r0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f002 f8d9 	bl	80094fc <memset>
 800734a:	4603      	mov	r3, r0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return;
 8007358:	bf00      	nop
}
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007362:	b480      	push	{r7}
 8007364:	af00      	add	r7, sp, #0
  return;
 8007366:	bf00      	nop
}
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  return;
 8007374:	bf00      	nop
}
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800737e:	b480      	push	{r7}
 8007380:	af00      	add	r7, sp, #0
  return;
 8007382:	bf00      	nop
}
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return;
 8007390:	bf00      	nop
}
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  return;
 800739e:	bf00      	nop
}
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return;
 80073ac:	bf00      	nop
}
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80073b6:	b480      	push	{r7}
 80073b8:	af00      	add	r7, sp, #0
  return;
 80073ba:	bf00      	nop
}
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  return;
 80073c8:	bf00      	nop
}
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80073d2:	b480      	push	{r7}
 80073d4:	af00      	add	r7, sp, #0
  return;
 80073d6:	bf00      	nop
}
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return;
 80073e4:	bf00      	nop
}
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  return;
 80073f2:	bf00      	nop
}
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  return;
 8007400:	bf00      	nop
}
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800740a:	b480      	push	{r7}
 800740c:	af00      	add	r7, sp, #0
  return;
 800740e:	bf00      	nop
}
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return;
 800741c:	bf00      	nop
}
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007426:	b480      	push	{r7}
 8007428:	af00      	add	r7, sp, #0
  return;
 800742a:	bf00      	nop
}
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  return;
 8007438:	bf00      	nop
}
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <SVCCTL_Init+0x18>)
 800744a:	2200      	movs	r2, #0
 800744c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800744e:	4b04      	ldr	r3, [pc, #16]	; (8007460 <SVCCTL_Init+0x1c>)
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007454:	f000 f806 	bl	8007464 <SVCCTL_SvcInit>

  return;
 8007458:	bf00      	nop
}
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000910 	.word	0x20000910
 8007460:	20000930 	.word	0x20000930

08007464 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  BAS_Init();
 8007468:	f7ff ff74 	bl	8007354 <BAS_Init>

  BLS_Init();
 800746c:	f7ff ff79 	bl	8007362 <BLS_Init>

  CRS_STM_Init();
 8007470:	f7ff ff7e 	bl	8007370 <CRS_STM_Init>

  DIS_Init();
 8007474:	f7ff ff83 	bl	800737e <DIS_Init>

  EDS_STM_Init();
 8007478:	f7ff ff88 	bl	800738c <EDS_STM_Init>

  HIDS_Init();
 800747c:	f7ff ff8d 	bl	800739a <HIDS_Init>

  HRS_Init();
 8007480:	f7ff ff92 	bl	80073a8 <HRS_Init>

  HTS_Init();
 8007484:	f7ff ff97 	bl	80073b6 <HTS_Init>

  IAS_Init();
 8007488:	f7ff ff9c 	bl	80073c4 <IAS_Init>

  LLS_Init();
 800748c:	f7ff ffa1 	bl	80073d2 <LLS_Init>

  TPS_Init();
 8007490:	f7ff ffa6 	bl	80073e0 <TPS_Init>

  MOTENV_STM_Init();
 8007494:	f7ff ffab 	bl	80073ee <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007498:	f7ff ffb0 	bl	80073fc <P2PS_STM_Init>

  ZDD_STM_Init();
 800749c:	f7ff ffb5 	bl	800740a <ZDD_STM_Init>

  OTAS_STM_Init();
 80074a0:	f7ff ffba 	bl	8007418 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80074a4:	f7ff ffc6 	bl	8007434 <BVOPUS_STM_Init>

  MESH_Init();
 80074a8:	f7ff ffbd 	bl	8007426 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80074ac:	f001 faaa 	bl	8008a04 <SVCCTL_InitCustomSvc>
  
  return;
 80074b0:	bf00      	nop
}
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80074bc:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80074be:	7f1b      	ldrb	r3, [r3, #28]
 80074c0:	4619      	mov	r1, r3
 80074c2:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80074ca:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80074cc:	7f1b      	ldrb	r3, [r3, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <SVCCTL_RegisterSvcHandler+0x30>)
 80074d4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80074d6:	bf00      	nop
}
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000910 	.word	0x20000910

080074e8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3301      	adds	r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2bff      	cmp	r3, #255	; 0xff
 8007500:	d125      	bne.n	800754e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	3302      	adds	r3, #2
 8007506:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007516:	d118      	bne.n	800754a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007518:	2300      	movs	r3, #0
 800751a:	757b      	strb	r3, [r7, #21]
 800751c:	e00d      	b.n	800753a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800751e:	7d7b      	ldrb	r3, [r7, #21]
 8007520:	4a1a      	ldr	r2, [pc, #104]	; (800758c <SVCCTL_UserEvtRx+0xa4>)
 8007522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d108      	bne.n	8007546 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007534:	7d7b      	ldrb	r3, [r7, #21]
 8007536:	3301      	adds	r3, #1
 8007538:	757b      	strb	r3, [r7, #21]
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <SVCCTL_UserEvtRx+0xa4>)
 800753c:	7f1b      	ldrb	r3, [r3, #28]
 800753e:	7d7a      	ldrb	r2, [r7, #21]
 8007540:	429a      	cmp	r2, r3
 8007542:	d3ec      	bcc.n	800751e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007544:	e002      	b.n	800754c <SVCCTL_UserEvtRx+0x64>
              break;
 8007546:	bf00      	nop
          break;
 8007548:	e000      	b.n	800754c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800754a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800754c:	e000      	b.n	8007550 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800754e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d00f      	beq.n	8007576 <SVCCTL_UserEvtRx+0x8e>
 8007556:	2b02      	cmp	r3, #2
 8007558:	dc10      	bgt.n	800757c <SVCCTL_UserEvtRx+0x94>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <SVCCTL_UserEvtRx+0x7c>
 800755e:	2b01      	cmp	r3, #1
 8007560:	d006      	beq.n	8007570 <SVCCTL_UserEvtRx+0x88>
 8007562:	e00b      	b.n	800757c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 ff7b 	bl	8008460 <SVCCTL_App_Notification>
 800756a:	4603      	mov	r3, r0
 800756c:	75bb      	strb	r3, [r7, #22]
      break;
 800756e:	e008      	b.n	8007582 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007570:	2301      	movs	r3, #1
 8007572:	75bb      	strb	r3, [r7, #22]
      break;
 8007574:	e005      	b.n	8007582 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007576:	2300      	movs	r3, #0
 8007578:	75bb      	strb	r3, [r7, #22]
      break;
 800757a:	e002      	b.n	8007582 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800757c:	2301      	movs	r3, #1
 800757e:	75bb      	strb	r3, [r7, #22]
      break;
 8007580:	bf00      	nop
  }

  return (return_status);
 8007582:	7dbb      	ldrb	r3, [r7, #22]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000910 	.word	0x20000910

08007590 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007598:	f107 030c 	add.w	r3, r7, #12
 800759c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	212e      	movs	r1, #46	; 0x2e
 80075a8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80075ac:	f000 fae2 	bl	8007b74 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	330b      	adds	r3, #11
 80075b4:	78db      	ldrb	r3, [r3, #3]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b088      	sub	sp, #32
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80075c6:	f107 030c 	add.w	r3, r7, #12
 80075ca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	210f      	movs	r1, #15
 80075d6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80075da:	f000 facb 	bl	8007b74 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	330b      	adds	r3, #11
 80075e2:	78db      	ldrb	r3, [r3, #3]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80075f4:	f107 030c 	add.w	r3, r7, #12
 80075f8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	2110      	movs	r1, #16
 8007600:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007604:	f000 fab6 	bl	8007b74 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	330b      	adds	r3, #11
 800760c:	78db      	ldrb	r3, [r3, #3]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007618:	b480      	push	{r7}
 800761a:	b08b      	sub	sp, #44	; 0x2c
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007640:	4b4a      	ldr	r3, [pc, #296]	; (800776c <SHCI_GetWirelessFwInfo+0x154>)
 8007642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007644:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007648:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007652:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a44      	ldr	r2, [pc, #272]	; (8007770 <SHCI_GetWirelessFwInfo+0x158>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d10f      	bne.n	8007684 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e01a      	b.n	80076ba <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800768c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007690:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	0e1b      	lsrs	r3, r3, #24
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	091b      	lsrs	r3, r3, #4
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	0e1b      	lsrs	r3, r3, #24
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	b2da      	uxtb	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	b2da      	uxtb	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	b2da      	uxtb	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	0e1b      	lsrs	r3, r3, #24
 8007728:	b2da      	uxtb	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	0c1b      	lsrs	r3, r3, #16
 8007732:	b2da      	uxtb	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	b2da      	uxtb	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	0e1b      	lsrs	r3, r3, #24
 8007746:	b2da      	uxtb	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	b2da      	uxtb	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	372c      	adds	r7, #44	; 0x2c
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	58004000 	.word	0x58004000
 8007770:	a94656b9 	.word	0xa94656b9

08007774 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <hci_init+0x30>)
 8007784:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <hci_init+0x34>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800778c:	4806      	ldr	r0, [pc, #24]	; (80077a8 <hci_init+0x34>)
 800778e:	f000 f973 	bl	8007a78 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f8d4 	bl	8007944 <TlInit>

  return;
 800779c:	bf00      	nop
}
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000ba4 	.word	0x20000ba4
 80077a8:	20000b7c 	.word	0x20000b7c

080077ac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80077b2:	4822      	ldr	r0, [pc, #136]	; (800783c <hci_user_evt_proc+0x90>)
 80077b4:	f000 fd28 	bl	8008208 <LST_is_empty>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d12b      	bne.n	8007816 <hci_user_evt_proc+0x6a>
 80077be:	4b20      	ldr	r3, [pc, #128]	; (8007840 <hci_user_evt_proc+0x94>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d027      	beq.n	8007816 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80077c6:	f107 030c 	add.w	r3, r7, #12
 80077ca:	4619      	mov	r1, r3
 80077cc:	481b      	ldr	r0, [pc, #108]	; (800783c <hci_user_evt_proc+0x90>)
 80077ce:	f000 fdaa 	bl	8008326 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80077d2:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <hci_user_evt_proc+0x98>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00c      	beq.n	80077f4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80077de:	2301      	movs	r3, #1
 80077e0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80077e2:	4b18      	ldr	r3, [pc, #96]	; (8007844 <hci_user_evt_proc+0x98>)
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	1d3a      	adds	r2, r7, #4
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80077ec:	793a      	ldrb	r2, [r7, #4]
 80077ee:	4b14      	ldr	r3, [pc, #80]	; (8007840 <hci_user_evt_proc+0x94>)
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	e002      	b.n	80077fa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80077f4:	4b12      	ldr	r3, [pc, #72]	; (8007840 <hci_user_evt_proc+0x94>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <hci_user_evt_proc+0x94>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fc03 	bl	8008010 <TL_MM_EvtDone>
 800780a:	e004      	b.n	8007816 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4619      	mov	r1, r3
 8007810:	480a      	ldr	r0, [pc, #40]	; (800783c <hci_user_evt_proc+0x90>)
 8007812:	f000 fd1b 	bl	800824c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007816:	4809      	ldr	r0, [pc, #36]	; (800783c <hci_user_evt_proc+0x90>)
 8007818:	f000 fcf6 	bl	8008208 <LST_is_empty>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d107      	bne.n	8007832 <hci_user_evt_proc+0x86>
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <hci_user_evt_proc+0x94>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800782a:	4804      	ldr	r0, [pc, #16]	; (800783c <hci_user_evt_proc+0x90>)
 800782c:	f001 f830 	bl	8008890 <hci_notify_asynch_evt>
  }


  return;
 8007830:	bf00      	nop
 8007832:	bf00      	nop
}
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	20000938 	.word	0x20000938
 8007840:	20000944 	.word	0x20000944
 8007844:	20000b7c 	.word	0x20000b7c

08007848 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007854:	2000      	movs	r0, #0
 8007856:	f000 f8cb 	bl	80079f0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800785a:	2300      	movs	r3, #0
 800785c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	885b      	ldrh	r3, [r3, #2]
 8007862:	b21b      	sxth	r3, r3
 8007864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007868:	b21a      	sxth	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	029b      	lsls	r3, r3, #10
 8007870:	b21b      	sxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b21b      	sxth	r3, r3
 8007876:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	b2d9      	uxtb	r1, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	8bbb      	ldrh	r3, [r7, #28]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f88d 	bl	80079a4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800788a:	e04e      	b.n	800792a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800788c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007890:	f001 f815 	bl	80088be <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007894:	e043      	b.n	800791e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007896:	f107 030c 	add.w	r3, r7, #12
 800789a:	4619      	mov	r1, r3
 800789c:	4828      	ldr	r0, [pc, #160]	; (8007940 <hci_send_req+0xf8>)
 800789e:	f000 fd42 	bl	8008326 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	7a5b      	ldrb	r3, [r3, #9]
 80078a6:	2b0f      	cmp	r3, #15
 80078a8:	d114      	bne.n	80078d4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	330b      	adds	r3, #11
 80078ae:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	8bba      	ldrh	r2, [r7, #28]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d104      	bne.n	80078c6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	7812      	ldrb	r2, [r2, #0]
 80078c4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d027      	beq.n	800791e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80078ce:	2301      	movs	r3, #1
 80078d0:	77fb      	strb	r3, [r7, #31]
 80078d2:	e024      	b.n	800791e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	330b      	adds	r3, #11
 80078d8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8bba      	ldrh	r2, [r7, #28]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d114      	bne.n	8007912 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	7a9b      	ldrb	r3, [r3, #10]
 80078ec:	3b03      	subs	r3, #3
 80078ee:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	bfa8      	it	ge
 80078fa:	461a      	movge	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6918      	ldr	r0, [r3, #16]
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	1cd9      	adds	r1, r3, #3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	461a      	mov	r2, r3
 800790e:	f001 fde7 	bl	80094e0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800791a:	2301      	movs	r3, #1
 800791c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800791e:	4808      	ldr	r0, [pc, #32]	; (8007940 <hci_send_req+0xf8>)
 8007920:	f000 fc72 	bl	8008208 <LST_is_empty>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0b5      	beq.n	8007896 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800792a:	7ffb      	ldrb	r3, [r7, #31]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0ad      	beq.n	800788c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007930:	2001      	movs	r0, #1
 8007932:	f000 f85d 	bl	80079f0 <NotifyCmdStatus>

  return 0;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20000b9c 	.word	0x20000b9c

08007944 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800794c:	480f      	ldr	r0, [pc, #60]	; (800798c <TlInit+0x48>)
 800794e:	f000 fc4b 	bl	80081e8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007952:	4a0f      	ldr	r2, [pc, #60]	; (8007990 <TlInit+0x4c>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007958:	480e      	ldr	r0, [pc, #56]	; (8007994 <TlInit+0x50>)
 800795a:	f000 fc45 	bl	80081e8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800795e:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <TlInit+0x54>)
 8007960:	2201      	movs	r2, #1
 8007962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007964:	4b0d      	ldr	r3, [pc, #52]	; (800799c <TlInit+0x58>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <TlInit+0x5c>)
 8007972:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <TlInit+0x58>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f107 0208 	add.w	r2, r7, #8
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
  }

  return;
 8007980:	bf00      	nop
 8007982:	bf00      	nop
}
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000b9c 	.word	0x20000b9c
 8007990:	20000940 	.word	0x20000940
 8007994:	20000938 	.word	0x20000938
 8007998:	20000944 	.word	0x20000944
 800799c:	20000b7c 	.word	0x20000b7c
 80079a0:	08007a31 	.word	0x08007a31

080079a4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	603a      	str	r2, [r7, #0]
 80079ae:	80fb      	strh	r3, [r7, #6]
 80079b0:	460b      	mov	r3, r1
 80079b2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80079b4:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <SendCmd+0x44>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80079be:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <SendCmd+0x44>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	797a      	ldrb	r2, [r7, #5]
 80079c4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <SendCmd+0x44>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	797a      	ldrb	r2, [r7, #5]
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 fd85 	bl	80094e0 <memcpy>

  hciContext.io.Send(0,0);
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <SendCmd+0x48>)
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2100      	movs	r1, #0
 80079dc:	2000      	movs	r0, #0
 80079de:	4798      	blx	r3

  return;
 80079e0:	bf00      	nop
}
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000940 	.word	0x20000940
 80079ec:	20000b7c 	.word	0x20000b7c

080079f0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d108      	bne.n	8007a12 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <NotifyCmdStatus+0x3c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <NotifyCmdStatus+0x3c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007a10:	e008      	b.n	8007a24 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007a12:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <NotifyCmdStatus+0x3c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d004      	beq.n	8007a24 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007a1a:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <NotifyCmdStatus+0x3c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	4798      	blx	r3
  return;
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
}
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000ba4 	.word	0x20000ba4

08007a30 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7a5b      	ldrb	r3, [r3, #9]
 8007a3c:	2b0f      	cmp	r3, #15
 8007a3e:	d003      	beq.n	8007a48 <TlEvtReceived+0x18>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7a5b      	ldrb	r3, [r3, #9]
 8007a44:	2b0e      	cmp	r3, #14
 8007a46:	d107      	bne.n	8007a58 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	4809      	ldr	r0, [pc, #36]	; (8007a70 <TlEvtReceived+0x40>)
 8007a4c:	f000 fc24 	bl	8008298 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007a50:	2000      	movs	r0, #0
 8007a52:	f000 ff29 	bl	80088a8 <hci_cmd_resp_release>
 8007a56:	e006      	b.n	8007a66 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4806      	ldr	r0, [pc, #24]	; (8007a74 <TlEvtReceived+0x44>)
 8007a5c:	f000 fc1c 	bl	8008298 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007a60:	4804      	ldr	r0, [pc, #16]	; (8007a74 <TlEvtReceived+0x44>)
 8007a62:	f000 ff15 	bl	8008890 <hci_notify_asynch_evt>
  }

  return;
 8007a66:	bf00      	nop
}
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000b9c 	.word	0x20000b9c
 8007a74:	20000938 	.word	0x20000938

08007a78 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a05      	ldr	r2, [pc, #20]	; (8007a98 <hci_register_io_bus+0x20>)
 8007a84:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a04      	ldr	r2, [pc, #16]	; (8007a9c <hci_register_io_bus+0x24>)
 8007a8a:	611a      	str	r2, [r3, #16]

  return;
 8007a8c:	bf00      	nop
}
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	08007d89 	.word	0x08007d89
 8007a9c:	08007df1 	.word	0x08007df1

08007aa0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	4a08      	ldr	r2, [pc, #32]	; (8007ad0 <shci_init+0x30>)
 8007ab0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007ab2:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <shci_init+0x34>)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007ab8:	4806      	ldr	r0, [pc, #24]	; (8007ad4 <shci_init+0x34>)
 8007aba:	f000 f911 	bl	8007ce0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f894 	bl	8007bf0 <TlInit>

  return;
 8007ac8:	bf00      	nop
}
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000bc8 	.word	0x20000bc8
 8007ad4:	20000ba8 	.word	0x20000ba8

08007ad8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007ade:	4822      	ldr	r0, [pc, #136]	; (8007b68 <shci_user_evt_proc+0x90>)
 8007ae0:	f000 fb92 	bl	8008208 <LST_is_empty>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d12b      	bne.n	8007b42 <shci_user_evt_proc+0x6a>
 8007aea:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <shci_user_evt_proc+0x94>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d027      	beq.n	8007b42 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4619      	mov	r1, r3
 8007af8:	481b      	ldr	r0, [pc, #108]	; (8007b68 <shci_user_evt_proc+0x90>)
 8007afa:	f000 fc14 	bl	8008326 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007afe:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <shci_user_evt_proc+0x98>)
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007b0e:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <shci_user_evt_proc+0x98>)
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	1d3a      	adds	r2, r7, #4
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007b18:	793a      	ldrb	r2, [r7, #4]
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <shci_user_evt_proc+0x94>)
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e002      	b.n	8007b26 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007b20:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <shci_user_evt_proc+0x94>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007b26:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <shci_user_evt_proc+0x94>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fa6d 	bl	8008010 <TL_MM_EvtDone>
 8007b36:	e004      	b.n	8007b42 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	480a      	ldr	r0, [pc, #40]	; (8007b68 <shci_user_evt_proc+0x90>)
 8007b3e:	f000 fb85 	bl	800824c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007b42:	4809      	ldr	r0, [pc, #36]	; (8007b68 <shci_user_evt_proc+0x90>)
 8007b44:	f000 fb60 	bl	8008208 <LST_is_empty>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d107      	bne.n	8007b5e <shci_user_evt_proc+0x86>
 8007b4e:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <shci_user_evt_proc+0x94>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007b56:	4804      	ldr	r0, [pc, #16]	; (8007b68 <shci_user_evt_proc+0x90>)
 8007b58:	f7f9 f8dc 	bl	8000d14 <shci_notify_asynch_evt>
  }


  return;
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
}
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000948 	.word	0x20000948
 8007b6c:	20000958 	.word	0x20000958
 8007b70:	20000ba8 	.word	0x20000ba8

08007b74 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60ba      	str	r2, [r7, #8]
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	4603      	mov	r3, r0
 8007b80:	81fb      	strh	r3, [r7, #14]
 8007b82:	460b      	mov	r3, r1
 8007b84:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007b86:	2000      	movs	r0, #0
 8007b88:	f000 f864 	bl	8007c54 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <shci_send+0x74>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	89fa      	ldrh	r2, [r7, #14]
 8007b92:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007b96:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <shci_send+0x74>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	7b7a      	ldrb	r2, [r7, #13]
 8007b9c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <shci_send+0x74>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	7b7a      	ldrb	r2, [r7, #13]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fc99 	bl	80094e0 <memcpy>

  shciContext.io.Send(0,0);
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <shci_send+0x78>)
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007bb8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007bbc:	f7f9 f8c1 	bl	8000d42 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f103 0008 	add.w	r0, r3, #8
 8007bc6:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <shci_send+0x74>)
 8007bc8:	6819      	ldr	r1, [r3, #0]
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <shci_send+0x74>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	789b      	ldrb	r3, [r3, #2]
 8007bd0:	3303      	adds	r3, #3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f001 fc84 	bl	80094e0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007bd8:	2001      	movs	r0, #1
 8007bda:	f000 f83b 	bl	8007c54 <Cmd_SetStatus>

  return;
 8007bde:	bf00      	nop
}
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000954 	.word	0x20000954
 8007bec:	20000ba8 	.word	0x20000ba8

08007bf0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007bf8:	4a10      	ldr	r2, [pc, #64]	; (8007c3c <TlInit+0x4c>)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007bfe:	4810      	ldr	r0, [pc, #64]	; (8007c40 <TlInit+0x50>)
 8007c00:	f000 faf2 	bl	80081e8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007c04:	2001      	movs	r0, #1
 8007c06:	f000 f825 	bl	8007c54 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007c0a:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <TlInit+0x54>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007c10:	4b0d      	ldr	r3, [pc, #52]	; (8007c48 <TlInit+0x58>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00c      	beq.n	8007c32 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <TlInit+0x5c>)
 8007c1e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <TlInit+0x60>)
 8007c22:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <TlInit+0x58>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f107 020c 	add.w	r2, r7, #12
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
  }

  return;
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
}
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000954 	.word	0x20000954
 8007c40:	20000948 	.word	0x20000948
 8007c44:	20000958 	.word	0x20000958
 8007c48:	20000ba8 	.word	0x20000ba8
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007cbd 	.word	0x08007cbd

08007c54 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007c64:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <Cmd_SetStatus+0x48>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <Cmd_SetStatus+0x48>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2000      	movs	r0, #0
 8007c72:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <Cmd_SetStatus+0x4c>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007c7a:	e00b      	b.n	8007c94 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007c7c:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <Cmd_SetStatus+0x4c>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007c82:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <Cmd_SetStatus+0x48>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007c8a:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <Cmd_SetStatus+0x48>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2001      	movs	r0, #1
 8007c90:	4798      	blx	r3
  return;
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
}
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	20000bc8 	.word	0x20000bc8
 8007ca0:	20000950 	.word	0x20000950

08007ca4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007cac:	2000      	movs	r0, #0
 8007cae:	f7f9 f83d 	bl	8000d2c <shci_cmd_resp_release>

  return;
 8007cb2:	bf00      	nop
}
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4805      	ldr	r0, [pc, #20]	; (8007cdc <TlUserEvtReceived+0x20>)
 8007cc8:	f000 fae6 	bl	8008298 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007ccc:	4803      	ldr	r0, [pc, #12]	; (8007cdc <TlUserEvtReceived+0x20>)
 8007cce:	f7f9 f821 	bl	8000d14 <shci_notify_asynch_evt>

  return;
 8007cd2:	bf00      	nop
}
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000948 	.word	0x20000948

08007ce0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <shci_register_io_bus+0x20>)
 8007cec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a04      	ldr	r2, [pc, #16]	; (8007d04 <shci_register_io_bus+0x24>)
 8007cf2:	611a      	str	r2, [r3, #16]

  return;
 8007cf4:	bf00      	nop
}
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	08007e9d 	.word	0x08007e9d
 8007d04:	08007ef1 	.word	0x08007ef1

08007d08 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007d0c:	f001 f86c 	bl	8008de8 <HW_IPCC_Enable>

  return;
 8007d10:	bf00      	nop
}
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <TL_Init>:


void TL_Init( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007d18:	4b10      	ldr	r3, [pc, #64]	; (8007d5c <TL_Init+0x48>)
 8007d1a:	4a11      	ldr	r2, [pc, #68]	; (8007d60 <TL_Init+0x4c>)
 8007d1c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <TL_Init+0x48>)
 8007d20:	4a10      	ldr	r2, [pc, #64]	; (8007d64 <TL_Init+0x50>)
 8007d22:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007d24:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <TL_Init+0x48>)
 8007d26:	4a10      	ldr	r2, [pc, #64]	; (8007d68 <TL_Init+0x54>)
 8007d28:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <TL_Init+0x48>)
 8007d2c:	4a0f      	ldr	r2, [pc, #60]	; (8007d6c <TL_Init+0x58>)
 8007d2e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <TL_Init+0x48>)
 8007d32:	4a0f      	ldr	r2, [pc, #60]	; (8007d70 <TL_Init+0x5c>)
 8007d34:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <TL_Init+0x48>)
 8007d38:	4a0e      	ldr	r2, [pc, #56]	; (8007d74 <TL_Init+0x60>)
 8007d3a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <TL_Init+0x48>)
 8007d3e:	4a0e      	ldr	r2, [pc, #56]	; (8007d78 <TL_Init+0x64>)
 8007d40:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007d42:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <TL_Init+0x48>)
 8007d44:	4a0d      	ldr	r2, [pc, #52]	; (8007d7c <TL_Init+0x68>)
 8007d46:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007d48:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <TL_Init+0x48>)
 8007d4a:	4a0d      	ldr	r2, [pc, #52]	; (8007d80 <TL_Init+0x6c>)
 8007d4c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007d4e:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <TL_Init+0x48>)
 8007d50:	4a0c      	ldr	r2, [pc, #48]	; (8007d84 <TL_Init+0x70>)
 8007d52:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007d54:	f001 f85c 	bl	8008e10 <HW_IPCC_Init>

  return;
 8007d58:	bf00      	nop
}
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20030000 	.word	0x20030000
 8007d60:	20030028 	.word	0x20030028
 8007d64:	20030048 	.word	0x20030048
 8007d68:	20030058 	.word	0x20030058
 8007d6c:	20030068 	.word	0x20030068
 8007d70:	20030070 	.word	0x20030070
 8007d74:	20030078 	.word	0x20030078
 8007d78:	20030080 	.word	0x20030080
 8007d7c:	2003009c 	.word	0x2003009c
 8007d80:	200300a0 	.word	0x200300a0
 8007d84:	200300ac 	.word	0x200300ac

08007d88 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007d94:	4811      	ldr	r0, [pc, #68]	; (8007ddc <TL_BLE_Init+0x54>)
 8007d96:	f000 fa27 	bl	80081e8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007d9a:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <TL_BLE_Init+0x58>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <TL_BLE_Init+0x5c>)
 8007db4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4a08      	ldr	r2, [pc, #32]	; (8007ddc <TL_BLE_Init+0x54>)
 8007dba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007dbc:	f001 f83e 	bl	8008e3c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a08      	ldr	r2, [pc, #32]	; (8007de8 <TL_BLE_Init+0x60>)
 8007dc6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a07      	ldr	r2, [pc, #28]	; (8007dec <TL_BLE_Init+0x64>)
 8007dce:	6013      	str	r3, [r2, #0]

  return 0;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200300c8 	.word	0x200300c8
 8007de0:	20030000 	.word	0x20030000
 8007de4:	20000900 	.word	0x20000900
 8007de8:	20000bd4 	.word	0x20000bd4
 8007dec:	20000bd8 	.word	0x20000bd8

08007df0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007dfc:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <TL_BLE_SendCmd+0x34>)
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007e06:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <TL_BLE_SendCmd+0x34>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	2001      	movs	r0, #1
 8007e10:	f000 f96c 	bl	80080ec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007e14:	f001 f81c 	bl	8008e50 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20030000 	.word	0x20030000

08007e28 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007e2e:	e01c      	b.n	8007e6a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007e30:	1d3b      	adds	r3, r7, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4812      	ldr	r0, [pc, #72]	; (8007e80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007e36:	f000 fa76 	bl	8008326 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	7a5b      	ldrb	r3, [r3, #9]
 8007e3e:	2b0f      	cmp	r3, #15
 8007e40:	d003      	beq.n	8007e4a <HW_IPCC_BLE_RxEvtNot+0x22>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7a5b      	ldrb	r3, [r3, #9]
 8007e46:	2b0e      	cmp	r3, #14
 8007e48:	d105      	bne.n	8007e56 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	2002      	movs	r0, #2
 8007e50:	f000 f94c 	bl	80080ec <OutputDbgTrace>
 8007e54:	e004      	b.n	8007e60 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2003      	movs	r0, #3
 8007e5c:	f000 f946 	bl	80080ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007e60:	4b08      	ldr	r3, [pc, #32]	; (8007e84 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	4610      	mov	r0, r2
 8007e68:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007e6a:	4805      	ldr	r0, [pc, #20]	; (8007e80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007e6c:	f000 f9cc 	bl	8008208 <LST_is_empty>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0dc      	beq.n	8007e30 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007e76:	bf00      	nop
}
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200300c8 	.word	0x200300c8
 8007e84:	20000bd4 	.word	0x20000bd4

08007e88 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4798      	blx	r3

  return;
 8007e92:	bf00      	nop
}
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000bd8 	.word	0x20000bd8

08007e9c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007ea8:	480d      	ldr	r0, [pc, #52]	; (8007ee0 <TL_SYS_Init+0x44>)
 8007eaa:	f000 f99d 	bl	80081e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <TL_SYS_Init+0x48>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4a08      	ldr	r2, [pc, #32]	; (8007ee0 <TL_SYS_Init+0x44>)
 8007ec0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007ec2:	f000 ffe7 	bl	8008e94 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a07      	ldr	r2, [pc, #28]	; (8007ee8 <TL_SYS_Init+0x4c>)
 8007ecc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4a06      	ldr	r2, [pc, #24]	; (8007eec <TL_SYS_Init+0x50>)
 8007ed4:	6013      	str	r3, [r2, #0]

  return 0;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	200300d0 	.word	0x200300d0
 8007ee4:	20030000 	.word	0x20030000
 8007ee8:	20000bdc 	.word	0x20000bdc
 8007eec:	20000be0 	.word	0x20000be0

08007ef0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <TL_SYS_SendCmd+0x34>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2210      	movs	r2, #16
 8007f04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007f06:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <TL_SYS_SendCmd+0x34>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2004      	movs	r0, #4
 8007f10:	f000 f8ec 	bl	80080ec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007f14:	f000 ffc8 	bl	8008ea8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	20030000 	.word	0x20030000

08007f28 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	2005      	movs	r0, #5
 8007f36:	f000 f8d9 	bl	80080ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007f3a:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a03      	ldr	r2, [pc, #12]	; (8007f4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007f40:	68d2      	ldr	r2, [r2, #12]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3

  return;
 8007f48:	bf00      	nop
}
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20030000 	.word	0x20030000
 8007f50:	20000bdc 	.word	0x20000bdc

08007f54 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007f5a:	e00e      	b.n	8007f7a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	4619      	mov	r1, r3
 8007f60:	480b      	ldr	r0, [pc, #44]	; (8007f90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007f62:	f000 f9e0 	bl	8008326 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	2006      	movs	r0, #6
 8007f6c:	f000 f8be 	bl	80080ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007f70:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <HW_IPCC_SYS_EvtNot+0x40>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4610      	mov	r0, r2
 8007f78:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007f7a:	4805      	ldr	r0, [pc, #20]	; (8007f90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007f7c:	f000 f944 	bl	8008208 <LST_is_empty>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0ea      	beq.n	8007f5c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007f86:	bf00      	nop
}
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	200300d0 	.word	0x200300d0
 8007f94:	20000be0 	.word	0x20000be0

08007f98 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007fa0:	4817      	ldr	r0, [pc, #92]	; (8008000 <TL_MM_Init+0x68>)
 8007fa2:	f000 f921 	bl	80081e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007fa6:	4817      	ldr	r0, [pc, #92]	; (8008004 <TL_MM_Init+0x6c>)
 8007fa8:	f000 f91e 	bl	80081e8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007fac:	4b16      	ldr	r3, [pc, #88]	; (8008008 <TL_MM_Init+0x70>)
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	4a16      	ldr	r2, [pc, #88]	; (800800c <TL_MM_Init+0x74>)
 8007fb2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007fb4:	4b15      	ldr	r3, [pc, #84]	; (800800c <TL_MM_Init+0x74>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	6892      	ldr	r2, [r2, #8]
 8007fbc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <TL_MM_Init+0x74>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	68d2      	ldr	r2, [r2, #12]
 8007fc6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <TL_MM_Init+0x74>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a0c      	ldr	r2, [pc, #48]	; (8008000 <TL_MM_Init+0x68>)
 8007fce:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <TL_MM_Init+0x74>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <TL_MM_Init+0x74>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6852      	ldr	r2, [r2, #4]
 8007fe2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <TL_MM_Init+0x74>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6912      	ldr	r2, [r2, #16]
 8007fec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <TL_MM_Init+0x74>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6952      	ldr	r2, [r2, #20]
 8007ff6:	619a      	str	r2, [r3, #24]

  return;
 8007ff8:	bf00      	nop
}
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200300b8 	.word	0x200300b8
 8008004:	20000bcc 	.word	0x20000bcc
 8008008:	20030000 	.word	0x20030000
 800800c:	20000be4 	.word	0x20000be4

08008010 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4807      	ldr	r0, [pc, #28]	; (8008038 <TL_MM_EvtDone+0x28>)
 800801c:	f000 f93c 	bl	8008298 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	2000      	movs	r0, #0
 8008024:	f000 f862 	bl	80080ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008028:	4804      	ldr	r0, [pc, #16]	; (800803c <TL_MM_EvtDone+0x2c>)
 800802a:	f000 ff63 	bl	8008ef4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800802e:	bf00      	nop
}
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000bcc 	.word	0x20000bcc
 800803c:	08008041 	.word	0x08008041

08008040 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008046:	e00c      	b.n	8008062 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	4619      	mov	r1, r3
 800804c:	480a      	ldr	r0, [pc, #40]	; (8008078 <SendFreeBuf+0x38>)
 800804e:	f000 f96a 	bl	8008326 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <SendFreeBuf+0x3c>)
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f91b 	bl	8008298 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008062:	4805      	ldr	r0, [pc, #20]	; (8008078 <SendFreeBuf+0x38>)
 8008064:	f000 f8d0 	bl	8008208 <LST_is_empty>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0ec      	beq.n	8008048 <SendFreeBuf+0x8>
  }

  return;
 800806e:	bf00      	nop
}
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000bcc 	.word	0x20000bcc
 800807c:	20030000 	.word	0x20030000

08008080 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <TL_TRACES_Init+0x1c>)
 8008086:	f000 f8af 	bl	80081e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800808a:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <TL_TRACES_Init+0x20>)
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	4a03      	ldr	r2, [pc, #12]	; (800809c <TL_TRACES_Init+0x1c>)
 8008090:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008092:	f000 ff65 	bl	8008f60 <HW_IPCC_TRACES_Init>

  return;
 8008096:	bf00      	nop
}
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200300c0 	.word	0x200300c0
 80080a0:	20030000 	.word	0x20030000

080080a4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80080aa:	e008      	b.n	80080be <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	4619      	mov	r1, r3
 80080b0:	4808      	ldr	r0, [pc, #32]	; (80080d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80080b2:	f000 f938 	bl	8008326 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f80d 	bl	80080d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80080be:	4805      	ldr	r0, [pc, #20]	; (80080d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80080c0:	f000 f8a2 	bl	8008208 <LST_is_empty>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f0      	beq.n	80080ac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80080ca:	bf00      	nop
}
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200300c0 	.word	0x200300c0

080080d8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80080f8:	79fb      	ldrb	r3, [r7, #7]
 80080fa:	2b06      	cmp	r3, #6
 80080fc:	d845      	bhi.n	800818a <OutputDbgTrace+0x9e>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <OutputDbgTrace+0x18>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008121 	.word	0x08008121
 8008108:	08008145 	.word	0x08008145
 800810c:	0800814b 	.word	0x0800814b
 8008110:	0800815f 	.word	0x0800815f
 8008114:	0800816b 	.word	0x0800816b
 8008118:	08008171 	.word	0x08008171
 800811c:	0800817f 	.word	0x0800817f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	7a5b      	ldrb	r3, [r3, #9]
 8008128:	2bff      	cmp	r3, #255	; 0xff
 800812a:	d005      	beq.n	8008138 <OutputDbgTrace+0x4c>
 800812c:	2bff      	cmp	r3, #255	; 0xff
 800812e:	dc05      	bgt.n	800813c <OutputDbgTrace+0x50>
 8008130:	2b0e      	cmp	r3, #14
 8008132:	d005      	beq.n	8008140 <OutputDbgTrace+0x54>
 8008134:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008136:	e001      	b.n	800813c <OutputDbgTrace+0x50>
          break;
 8008138:	bf00      	nop
 800813a:	e027      	b.n	800818c <OutputDbgTrace+0xa0>
          break;
 800813c:	bf00      	nop
 800813e:	e025      	b.n	800818c <OutputDbgTrace+0xa0>
          break;
 8008140:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008142:	e023      	b.n	800818c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008148:	e020      	b.n	800818c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	7a5b      	ldrb	r3, [r3, #9]
 8008152:	2b0e      	cmp	r3, #14
 8008154:	d001      	beq.n	800815a <OutputDbgTrace+0x6e>
 8008156:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008158:	e000      	b.n	800815c <OutputDbgTrace+0x70>
          break;
 800815a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800815c:	e016      	b.n	800818c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	7a5b      	ldrb	r3, [r3, #9]
 8008166:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008168:	e010      	b.n	800818c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800816e:	e00d      	b.n	800818c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	7a5b      	ldrb	r3, [r3, #9]
 8008178:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800817a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800817c:	e006      	b.n	800818c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	7a5b      	ldrb	r3, [r3, #9]
 8008186:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008188:	e000      	b.n	800818c <OutputDbgTrace+0xa0>

    default:
      break;
 800818a:	bf00      	nop
  }

  return;
 800818c:	bf00      	nop
}
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80081a2:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <OTP_Read+0x48>)
 80081a4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80081a6:	e002      	b.n	80081ae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b08      	subs	r3, #8
 80081ac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3307      	adds	r3, #7
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	79fa      	ldrb	r2, [r7, #7]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d003      	beq.n	80081c2 <OTP_Read+0x2a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4a09      	ldr	r2, [pc, #36]	; (80081e4 <OTP_Read+0x4c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d1f2      	bne.n	80081a8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3307      	adds	r3, #7
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	79fa      	ldrb	r2, [r7, #7]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d001      	beq.n	80081d2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80081d2:	68fb      	ldr	r3, [r7, #12]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	1fff73f8 	.word	0x1fff73f8
 80081e4:	1fff7000 	.word	0x1fff7000

080081e8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	605a      	str	r2, [r3, #4]
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008210:	f3ef 8310 	mrs	r3, PRIMASK
 8008214:	60fb      	str	r3, [r7, #12]
  return(result);
 8008216:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800821a:	b672      	cpsid	i
}
 800821c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d102      	bne.n	800822e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	75fb      	strb	r3, [r7, #23]
 800822c:	e001      	b.n	8008232 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f383 8810 	msr	PRIMASK, r3
}
 800823c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008240:	4618      	mov	r0, r3
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008256:	f3ef 8310 	mrs	r3, PRIMASK
 800825a:	60fb      	str	r3, [r7, #12]
  return(result);
 800825c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800825e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008260:	b672      	cpsid	i
}
 8008262:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	605a      	str	r2, [r3, #4]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f383 8810 	msr	PRIMASK, r3
}
 800828a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a2:	f3ef 8310 	mrs	r3, PRIMASK
 80082a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80082a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80082aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082ac:	b672      	cpsid	i
}
 80082ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f383 8810 	msr	PRIMASK, r3
}
 80082d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ec:	f3ef 8310 	mrs	r3, PRIMASK
 80082f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80082f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80082f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082f6:	b672      	cpsid	i
}
 80082f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	6812      	ldr	r2, [r2, #0]
 8008302:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6852      	ldr	r2, [r2, #4]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f383 8810 	msr	PRIMASK, r3
}
 8008318:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800831a:	bf00      	nop
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008330:	f3ef 8310 	mrs	r3, PRIMASK
 8008334:	60fb      	str	r3, [r7, #12]
  return(result);
 8008336:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800833a:	b672      	cpsid	i
}
 800833c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff ffca 	bl	80082e4 <LST_remove_node>
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f383 8810 	msr	PRIMASK, r3
}
 800835a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800835c:	bf00      	nop
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008368:	4b03      	ldr	r3, [pc, #12]	; (8008378 <LL_FLASH_GetUDN+0x14>)
 800836a:	681b      	ldr	r3, [r3, #0]
}
 800836c:	4618      	mov	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	1fff7580 	.word	0x1fff7580

0800837c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008380:	4b03      	ldr	r3, [pc, #12]	; (8008390 <LL_FLASH_GetDeviceID+0x14>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	b2db      	uxtb	r3, r3
}
 8008386:	4618      	mov	r0, r3
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	1fff7584 	.word	0x1fff7584

08008394 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008398:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <LL_FLASH_GetSTCompanyID+0x14>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	0a1b      	lsrs	r3, r3, #8
}
 800839e:	4618      	mov	r0, r3
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	1fff7584 	.word	0x1fff7584

080083ac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80083ac:	b5b0      	push	{r4, r5, r7, lr}
 80083ae:	b090      	sub	sp, #64	; 0x40
 80083b0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80083b2:	2392      	movs	r3, #146	; 0x92
 80083b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80083b8:	4b25      	ldr	r3, [pc, #148]	; (8008450 <APP_BLE_Init+0xa4>)
 80083ba:	1d3c      	adds	r4, r7, #4
 80083bc:	461d      	mov	r5, r3
 80083be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80083ce:	c403      	stmia	r4!, {r0, r1}
 80083d0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80083d2:	f000 f905 	bl	80085e0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80083d6:	2101      	movs	r1, #1
 80083d8:	2002      	movs	r0, #2
 80083da:	f000 fde9 	bl	8008fb0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80083de:	4a1d      	ldr	r2, [pc, #116]	; (8008454 <APP_BLE_Init+0xa8>)
 80083e0:	2100      	movs	r1, #0
 80083e2:	2002      	movs	r0, #2
 80083e4:	f000 ff10 	bl	8009208 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80083e8:	1d3b      	adds	r3, r7, #4
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff f8d0 	bl	8007590 <SHCI_C2_BLE_Init>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80083f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80083fe:	f7f9 fcd9 	bl	8001db4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008402:	f000 f903 	bl	800860c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008406:	f7ff f81d 	bl	8007444 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <APP_BLE_Init+0xac>)
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <APP_BLE_Init+0xac>)
 8008414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008418:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800841a:	4a10      	ldr	r2, [pc, #64]	; (800845c <APP_BLE_Init+0xb0>)
 800841c:	2100      	movs	r1, #0
 800841e:	2001      	movs	r0, #1
 8008420:	f000 fef2 	bl	8009208 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008424:	2006      	movs	r0, #6
 8008426:	f7fe fe80 	bl	800712a <aci_hal_set_radio_activity_mask>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008430:	f000 fa9b 	bl	800896a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008434:	4b08      	ldr	r3, [pc, #32]	; (8008458 <APP_BLE_Init+0xac>)
 8008436:	2200      	movs	r2, #0
 8008438:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800843a:	4b07      	ldr	r3, [pc, #28]	; (8008458 <APP_BLE_Init+0xac>)
 800843c:	2200      	movs	r2, #0
 800843e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008440:	2001      	movs	r0, #1
 8008442:	f000 f997 	bl	8008774 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008446:	bf00      	nop
}
 8008448:	3740      	adds	r7, #64	; 0x40
 800844a:	46bd      	mov	sp, r7
 800844c:	bdb0      	pop	{r4, r5, r7, pc}
 800844e:	bf00      	nop
 8008450:	0800a498 	.word	0x0800a498
 8008454:	080077ad 	.word	0x080077ad
 8008458:	20000bf0 	.word	0x20000bf0
 800845c:	0800885d 	.word	0x0800885d

08008460 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008468:	2392      	movs	r3, #146	; 0x92
 800846a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3301      	adds	r3, #1
 8008472:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2bff      	cmp	r3, #255	; 0xff
 800847a:	d053      	beq.n	8008524 <SVCCTL_App_Notification+0xc4>
 800847c:	2bff      	cmp	r3, #255	; 0xff
 800847e:	f300 80a1 	bgt.w	80085c4 <SVCCTL_App_Notification+0x164>
 8008482:	2b05      	cmp	r3, #5
 8008484:	d002      	beq.n	800848c <SVCCTL_App_Notification+0x2c>
 8008486:	2b3e      	cmp	r3, #62	; 0x3e
 8008488:	d020      	beq.n	80084cc <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800848a:	e09b      	b.n	80085c4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	3302      	adds	r3, #2
 8008490:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008498:	b29a      	uxth	r2, r3
 800849a:	4b4e      	ldr	r3, [pc, #312]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 800849c:	8adb      	ldrh	r3, [r3, #22]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d106      	bne.n	80084b0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80084a2:	4b4c      	ldr	r3, [pc, #304]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80084a8:	4b4a      	ldr	r3, [pc, #296]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80084b0:	2001      	movs	r0, #1
 80084b2:	f000 f95f 	bl	8008774 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80084b6:	4b48      	ldr	r3, [pc, #288]	; (80085d8 <SVCCTL_App_Notification+0x178>)
 80084b8:	2201      	movs	r2, #1
 80084ba:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80084bc:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 80084be:	8ada      	ldrh	r2, [r3, #22]
 80084c0:	4b45      	ldr	r3, [pc, #276]	; (80085d8 <SVCCTL_App_Notification+0x178>)
 80084c2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80084c4:	4844      	ldr	r0, [pc, #272]	; (80085d8 <SVCCTL_App_Notification+0x178>)
 80084c6:	f000 fa3c 	bl	8008942 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80084ca:	e07e      	b.n	80085ca <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	3302      	adds	r3, #2
 80084d0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d001      	beq.n	80084de <SVCCTL_App_Notification+0x7e>
 80084da:	2b03      	cmp	r3, #3
          break;
 80084dc:	e021      	b.n	8008522 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	3301      	adds	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80084e4:	4b3b      	ldr	r3, [pc, #236]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 80084e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d104      	bne.n	80084f8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80084ee:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 80084f0:	2206      	movs	r2, #6
 80084f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80084f6:	e003      	b.n	8008500 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80084f8:	4b36      	ldr	r3, [pc, #216]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 80084fa:	2205      	movs	r2, #5
 80084fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008506:	b29a      	uxth	r2, r3
 8008508:	4b32      	ldr	r3, [pc, #200]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 800850a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800850c:	4b32      	ldr	r3, [pc, #200]	; (80085d8 <SVCCTL_App_Notification+0x178>)
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008512:	4b30      	ldr	r3, [pc, #192]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 8008514:	8ada      	ldrh	r2, [r3, #22]
 8008516:	4b30      	ldr	r3, [pc, #192]	; (80085d8 <SVCCTL_App_Notification+0x178>)
 8008518:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800851a:	482f      	ldr	r0, [pc, #188]	; (80085d8 <SVCCTL_App_Notification+0x178>)
 800851c:	f000 fa11 	bl	8008942 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008520:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008522:	e052      	b.n	80085ca <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	3302      	adds	r3, #2
 8008528:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008534:	d040      	beq.n	80085b8 <SVCCTL_App_Notification+0x158>
 8008536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800853a:	dc45      	bgt.n	80085c8 <SVCCTL_App_Notification+0x168>
 800853c:	2b04      	cmp	r3, #4
 800853e:	d03d      	beq.n	80085bc <SVCCTL_App_Notification+0x15c>
 8008540:	2b04      	cmp	r3, #4
 8008542:	db41      	blt.n	80085c8 <SVCCTL_App_Notification+0x168>
 8008544:	f240 420a 	movw	r2, #1034	; 0x40a
 8008548:	4293      	cmp	r3, r2
 800854a:	dc3d      	bgt.n	80085c8 <SVCCTL_App_Notification+0x168>
 800854c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008550:	dd3a      	ble.n	80085c8 <SVCCTL_App_Notification+0x168>
 8008552:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008556:	2b09      	cmp	r3, #9
 8008558:	d836      	bhi.n	80085c8 <SVCCTL_App_Notification+0x168>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <SVCCTL_App_Notification+0x100>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	080085b1 	.word	0x080085b1
 8008564:	08008589 	.word	0x08008589
 8008568:	080085c9 	.word	0x080085c9
 800856c:	080085c9 	.word	0x080085c9
 8008570:	080085c9 	.word	0x080085c9
 8008574:	080085c9 	.word	0x080085c9
 8008578:	080085c1 	.word	0x080085c1
 800857c:	080085c9 	.word	0x080085c9
 8008580:	0800859d 	.word	0x0800859d
 8008584:	080085c1 	.word	0x080085c1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 800858a:	8adb      	ldrh	r3, [r3, #22]
 800858c:	4913      	ldr	r1, [pc, #76]	; (80085dc <SVCCTL_App_Notification+0x17c>)
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe f822 	bl	80065d8 <aci_gap_pass_key_resp>
 8008594:	4603      	mov	r3, r0
 8008596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800859a:	e012      	b.n	80085c2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <SVCCTL_App_Notification+0x174>)
 800859e:	8adb      	ldrh	r3, [r3, #22]
 80085a0:	2101      	movs	r1, #1
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe f9c2 	bl	800692c <aci_gap_numeric_comparison_value_confirm_yesno>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80085ae:	e008      	b.n	80085c2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	3302      	adds	r3, #2
 80085b4:	61bb      	str	r3, [r7, #24]
          break;
 80085b6:	e004      	b.n	80085c2 <SVCCTL_App_Notification+0x162>
          break;
 80085b8:	bf00      	nop
 80085ba:	e005      	b.n	80085c8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80085bc:	bf00      	nop
 80085be:	e003      	b.n	80085c8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80085c0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80085c2:	e001      	b.n	80085c8 <SVCCTL_App_Notification+0x168>
      break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80085c8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80085ca:	2301      	movs	r3, #1
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3728      	adds	r7, #40	; 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000bf0 	.word	0x20000bf0
 80085d8:	20000c74 	.word	0x20000c74
 80085dc:	0001b207 	.word	0x0001b207

080085e0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <Ble_Tl_Init+0x20>)
 80085e8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <Ble_Tl_Init+0x24>)
 80085ec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80085ee:	463b      	mov	r3, r7
 80085f0:	4619      	mov	r1, r3
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <Ble_Tl_Init+0x28>)
 80085f4:	f7ff f8be 	bl	8007774 <hci_init>

  return;
 80085f8:	bf00      	nop
}
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	200300d8 	.word	0x200300d8
 8008604:	0800890d 	.word	0x0800890d
 8008608:	080088d5 	.word	0x080088d5

0800860c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800860c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800860e:	b08d      	sub	sp, #52	; 0x34
 8008610:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008612:	2300      	movs	r3, #0
 8008614:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008616:	2392      	movs	r3, #146	; 0x92
 8008618:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800861a:	f7fe fdda 	bl	80071d2 <hci_reset>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008622:	f000 f8d7 	bl	80087d4 <BleGetBdAddress>
 8008626:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	2106      	movs	r1, #6
 800862c:	2000      	movs	r0, #0
 800862e:	f7fe fc90 	bl	8006f52 <aci_hal_write_config_data>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008636:	4a4a      	ldr	r2, [pc, #296]	; (8008760 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008638:	2110      	movs	r1, #16
 800863a:	2018      	movs	r0, #24
 800863c:	f7fe fc89 	bl	8006f52 <aci_hal_write_config_data>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008644:	4a47      	ldr	r2, [pc, #284]	; (8008764 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008646:	2110      	movs	r1, #16
 8008648:	2008      	movs	r0, #8
 800864a:	f7fe fc82 	bl	8006f52 <aci_hal_write_config_data>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008652:	2118      	movs	r1, #24
 8008654:	2001      	movs	r0, #1
 8008656:	f7fe fd01 	bl	800705c <aci_hal_set_tx_power_level>
 800865a:	4603      	mov	r3, r0
 800865c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800865e:	f7fe f9cc 	bl	80069fa <aci_gatt_init>
 8008662:	4603      	mov	r3, r0
 8008664:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d01f      	beq.n	80086b8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008678:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800867a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800867c:	1dba      	adds	r2, r7, #6
 800867e:	7bf8      	ldrb	r0, [r7, #15]
 8008680:	1cbb      	adds	r3, r7, #2
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	4613      	mov	r3, r2
 800868a:	2208      	movs	r2, #8
 800868c:	2100      	movs	r1, #0
 800868e:	f7fe f80a 	bl	80066a6 <aci_gap_init>
 8008692:	4603      	mov	r3, r0
 8008694:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008696:	88fc      	ldrh	r4, [r7, #6]
 8008698:	88bd      	ldrh	r5, [r7, #4]
 800869a:	68b8      	ldr	r0, [r7, #8]
 800869c:	f7f7 fd70 	bl	8000180 <strlen>
 80086a0:	4603      	mov	r3, r0
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4613      	mov	r3, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	4629      	mov	r1, r5
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7fe fba6 	bl	8006e00 <aci_gatt_update_char_value>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80086b8:	88f8      	ldrh	r0, [r7, #6]
 80086ba:	8879      	ldrh	r1, [r7, #2]
 80086bc:	463b      	mov	r3, r7
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	2302      	movs	r3, #2
 80086c2:	2200      	movs	r2, #0
 80086c4:	f7fe fb9c 	bl	8006e00 <aci_gatt_update_char_value>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80086cc:	2202      	movs	r2, #2
 80086ce:	2102      	movs	r1, #2
 80086d0:	2000      	movs	r0, #0
 80086d2:	f7fe fda2 	bl	800721a <hci_le_set_default_phy>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80086da:	4b24      	ldr	r3, [pc, #144]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086dc:	2201      	movs	r2, #1
 80086de:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80086e0:	4b22      	ldr	r3, [pc, #136]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fd fe5f 	bl	80063a8 <aci_gap_set_io_capability>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80086ee:	4b1f      	ldr	r3, [pc, #124]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80086f4:	4b1d      	ldr	r3, [pc, #116]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086f6:	2208      	movs	r2, #8
 80086f8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80086fa:	4b1c      	ldr	r3, [pc, #112]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086fc:	2210      	movs	r2, #16
 80086fe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008700:	4b1a      	ldr	r3, [pc, #104]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008702:	2200      	movs	r2, #0
 8008704:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008706:	4b19      	ldr	r3, [pc, #100]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008708:	4a19      	ldr	r2, [pc, #100]	; (8008770 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800870a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800870c:	4b17      	ldr	r3, [pc, #92]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800870e:	2200      	movs	r2, #0
 8008710:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008712:	4b16      	ldr	r3, [pc, #88]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008714:	789c      	ldrb	r4, [r3, #2]
 8008716:	4b15      	ldr	r3, [pc, #84]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008718:	785d      	ldrb	r5, [r3, #1]
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800871c:	791b      	ldrb	r3, [r3, #4]
 800871e:	4a13      	ldr	r2, [pc, #76]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008720:	7952      	ldrb	r2, [r2, #5]
 8008722:	4912      	ldr	r1, [pc, #72]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008724:	78c9      	ldrb	r1, [r1, #3]
 8008726:	4811      	ldr	r0, [pc, #68]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008728:	6880      	ldr	r0, [r0, #8]
 800872a:	2600      	movs	r6, #0
 800872c:	9604      	str	r6, [sp, #16]
 800872e:	9003      	str	r0, [sp, #12]
 8008730:	9102      	str	r1, [sp, #8]
 8008732:	9201      	str	r2, [sp, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	2300      	movs	r3, #0
 8008738:	2201      	movs	r2, #1
 800873a:	4629      	mov	r1, r5
 800873c:	4620      	mov	r0, r4
 800873e:	f7fd fe87 	bl	8006450 <aci_gap_set_authentication_requirement>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008748:	789b      	ldrb	r3, [r3, #2]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800874e:	f7fe f8c9 	bl	80068e4 <aci_gap_configure_whitelist>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875e:	bf00      	nop
 8008760:	0800a6e0 	.word	0x0800a6e0
 8008764:	0800a6f0 	.word	0x0800a6f0
 8008768:	0800a4d4 	.word	0x0800a4d4
 800876c:	20000bf0 	.word	0x20000bf0
 8008770:	0001b207 	.word	0x0001b207

08008774 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08c      	sub	sp, #48	; 0x30
 8008778:	af08      	add	r7, sp, #32
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800877e:	2392      	movs	r3, #146	; 0x92
 8008780:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008782:	4a12      	ldr	r2, [pc, #72]	; (80087cc <Adv_Request+0x58>)
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800878a:	2300      	movs	r3, #0
 800878c:	9306      	str	r3, [sp, #24]
 800878e:	2300      	movs	r3, #0
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	2300      	movs	r3, #0
 8008794:	9304      	str	r3, [sp, #16]
 8008796:	2300      	movs	r3, #0
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	2300      	movs	r3, #0
 800879c:	9302      	str	r3, [sp, #8]
 800879e:	2300      	movs	r3, #0
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	2300      	movs	r3, #0
 80087a8:	22a0      	movs	r2, #160	; 0xa0
 80087aa:	2180      	movs	r1, #128	; 0x80
 80087ac:	2000      	movs	r0, #0
 80087ae:	f7fd fd01 	bl	80061b4 <aci_gap_set_discoverable>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80087b6:	4906      	ldr	r1, [pc, #24]	; (80087d0 <Adv_Request+0x5c>)
 80087b8:	2009      	movs	r0, #9
 80087ba:	f7fe f821 	bl	8006800 <aci_gap_update_adv_data>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80087c2:	bf00      	nop
}
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000bf0 	.word	0x20000bf0
 80087d0:	20000014 	.word	0x20000014

080087d4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80087da:	f7ff fdc3 	bl	8008364 <LL_FLASH_GetUDN>
 80087de:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e6:	d023      	beq.n	8008830 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80087e8:	f7ff fdd4 	bl	8008394 <LL_FLASH_GetSTCompanyID>
 80087ec:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80087ee:	f7ff fdc5 	bl	800837c <LL_FLASH_GetDeviceID>
 80087f2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	4b16      	ldr	r3, [pc, #88]	; (8008854 <BleGetBdAddress+0x80>)
 80087fa:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	0a1b      	lsrs	r3, r3, #8
 8008800:	b2da      	uxtb	r2, r3
 8008802:	4b14      	ldr	r3, [pc, #80]	; (8008854 <BleGetBdAddress+0x80>)
 8008804:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b12      	ldr	r3, [pc, #72]	; (8008854 <BleGetBdAddress+0x80>)
 800880c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	b2da      	uxtb	r2, r3
 8008812:	4b10      	ldr	r3, [pc, #64]	; (8008854 <BleGetBdAddress+0x80>)
 8008814:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	b2da      	uxtb	r2, r3
 800881c:	4b0d      	ldr	r3, [pc, #52]	; (8008854 <BleGetBdAddress+0x80>)
 800881e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	0c1b      	lsrs	r3, r3, #16
 8008824:	b2da      	uxtb	r2, r3
 8008826:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <BleGetBdAddress+0x80>)
 8008828:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800882a:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <BleGetBdAddress+0x80>)
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e00b      	b.n	8008848 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008830:	2000      	movs	r0, #0
 8008832:	f7ff fcb1 	bl	8008198 <OTP_Read>
 8008836:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	e001      	b.n	8008848 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <BleGetBdAddress+0x84>)
 8008846:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008848:	697b      	ldr	r3, [r7, #20]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000be8 	.word	0x20000be8
 8008858:	0800a6d8 	.word	0x0800a6d8

0800885c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <Adv_Cancel+0x30>)
 8008864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008868:	2b05      	cmp	r3, #5
 800886a:	d00a      	beq.n	8008882 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800886c:	2392      	movs	r3, #146	; 0x92
 800886e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008870:	f7fd fc7c 	bl	800616c <aci_gap_set_non_discoverable>
 8008874:	4603      	mov	r3, r0
 8008876:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008878:	4b04      	ldr	r3, [pc, #16]	; (800888c <Adv_Cancel+0x30>)
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008880:	bf00      	nop
 8008882:	bf00      	nop
}
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000bf0 	.word	0x20000bf0

08008890 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008898:	2100      	movs	r1, #0
 800889a:	2002      	movs	r0, #2
 800889c:	f000 fcd6 	bl	800924c <UTIL_SEQ_SetTask>

  return;
 80088a0:	bf00      	nop
}
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80088b0:	2001      	movs	r0, #1
 80088b2:	f000 fd37 	bl	8009324 <UTIL_SEQ_SetEvt>

  return;
 80088b6:	bf00      	nop
}
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80088c6:	2001      	movs	r0, #1
 80088c8:	f000 fd4c 	bl	8009364 <UTIL_SEQ_WaitEvt>

  return;
 80088cc:	bf00      	nop
}
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	3308      	adds	r3, #8
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fdfe 	bl	80074e8 <SVCCTL_UserEvtRx>
 80088ec:	4603      	mov	r3, r0
 80088ee:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80088fc:	e003      	b.n	8008906 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
  return;
 8008904:	bf00      	nop
}
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <BLE_StatusNot+0x16>
 800891c:	2b01      	cmp	r3, #1
 800891e:	d006      	beq.n	800892e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008920:	e00b      	b.n	800893a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008922:	2303      	movs	r3, #3
 8008924:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fcbc 	bl	80092a4 <UTIL_SEQ_PauseTask>
      break;
 800892c:	e005      	b.n	800893a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800892e:	2303      	movs	r3, #3
 8008930:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fcd6 	bl	80092e4 <UTIL_SEQ_ResumeTask>
      break;
 8008938:	bf00      	nop
  }

  return;
 800893a:	bf00      	nop
}
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <Custom_APP_Notification+0x16>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d002      	beq.n	800895c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008956:	e002      	b.n	800895e <Custom_APP_Notification+0x1c>
      break;
 8008958:	bf00      	nop
 800895a:	e000      	b.n	800895e <Custom_APP_Notification+0x1c>
      break;
 800895c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800895e:	bf00      	nop
}
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800896a:	b480      	push	{r7}
 800896c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800896e:	bf00      	nop
}
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008978:	b480      	push	{r7}
 800897a:	b08b      	sub	sp, #44	; 0x2c
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3301      	adds	r3, #1
 800898a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2bff      	cmp	r3, #255	; 0xff
 8008992:	d12b      	bne.n	80089ec <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	3302      	adds	r3, #2
 8008998:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f640 4214 	movw	r2, #3092	; 0xc14
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d01b      	beq.n	80089e0 <Custom_STM_Event_Handler+0x68>
 80089a8:	f640 4214 	movw	r2, #3092	; 0xc14
 80089ac:	4293      	cmp	r3, r2
 80089ae:	dc19      	bgt.n	80089e4 <Custom_STM_Event_Handler+0x6c>
 80089b0:	f640 4201 	movw	r2, #3073	; 0xc01
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <Custom_STM_Event_Handler+0x48>
 80089b8:	f640 4213 	movw	r2, #3091	; 0xc13
 80089bc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80089be:	e014      	b.n	80089ea <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	3302      	adds	r3, #2
 80089c4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	885b      	ldrh	r3, [r3, #2]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <Custom_STM_Event_Handler+0x88>)
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	3301      	adds	r3, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d107      	bne.n	80089e8 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80089de:	e003      	b.n	80089e8 <Custom_STM_Event_Handler+0x70>
          break;
 80089e0:	bf00      	nop
 80089e2:	e004      	b.n	80089ee <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80089e4:	bf00      	nop
 80089e6:	e002      	b.n	80089ee <Custom_STM_Event_Handler+0x76>
          break;
 80089e8:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80089ea:	e000      	b.n	80089ee <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80089ec:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80089ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80089f2:	4618      	mov	r0, r3
 80089f4:	372c      	adds	r7, #44	; 0x2c
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	20000c78 	.word	0x20000c78

08008a04 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08c      	sub	sp, #48	; 0x30
 8008a08:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008a0a:	2392      	movs	r3, #146	; 0x92
 8008a0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008a0e:	4834      	ldr	r0, [pc, #208]	; (8008ae0 <SVCCTL_InitCustomSvc+0xdc>)
 8008a10:	f7fe fd50 	bl	80074b4 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8008a14:	238f      	movs	r3, #143	; 0x8f
 8008a16:	713b      	strb	r3, [r7, #4]
 8008a18:	23e5      	movs	r3, #229	; 0xe5
 8008a1a:	717b      	strb	r3, [r7, #5]
 8008a1c:	23b3      	movs	r3, #179	; 0xb3
 8008a1e:	71bb      	strb	r3, [r7, #6]
 8008a20:	23d5      	movs	r3, #213	; 0xd5
 8008a22:	71fb      	strb	r3, [r7, #7]
 8008a24:	232e      	movs	r3, #46	; 0x2e
 8008a26:	723b      	strb	r3, [r7, #8]
 8008a28:	237f      	movs	r3, #127	; 0x7f
 8008a2a:	727b      	strb	r3, [r7, #9]
 8008a2c:	234a      	movs	r3, #74	; 0x4a
 8008a2e:	72bb      	strb	r3, [r7, #10]
 8008a30:	2398      	movs	r3, #152	; 0x98
 8008a32:	72fb      	strb	r3, [r7, #11]
 8008a34:	232a      	movs	r3, #42	; 0x2a
 8008a36:	733b      	strb	r3, [r7, #12]
 8008a38:	2348      	movs	r3, #72	; 0x48
 8008a3a:	737b      	strb	r3, [r7, #13]
 8008a3c:	237a      	movs	r3, #122	; 0x7a
 8008a3e:	73bb      	strb	r3, [r7, #14]
 8008a40:	23cc      	movs	r3, #204	; 0xcc
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	2300      	movs	r3, #0
 8008a46:	743b      	strb	r3, [r7, #16]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	747b      	strb	r3, [r7, #17]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	74bb      	strb	r3, [r7, #18]
 8008a50:	2300      	movs	r3, #0
 8008a52:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008a54:	1d39      	adds	r1, r7, #4
 8008a56:	4b23      	ldr	r3, [pc, #140]	; (8008ae4 <SVCCTL_InitCustomSvc+0xe0>)
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	2002      	movs	r0, #2
 8008a60:	f7fd fff0 	bl	8006a44 <aci_gatt_add_service>
 8008a64:	4603      	mov	r3, r0
 8008a66:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008a68:	2319      	movs	r3, #25
 8008a6a:	713b      	strb	r3, [r7, #4]
 8008a6c:	23ed      	movs	r3, #237	; 0xed
 8008a6e:	717b      	strb	r3, [r7, #5]
 8008a70:	2382      	movs	r3, #130	; 0x82
 8008a72:	71bb      	strb	r3, [r7, #6]
 8008a74:	23ae      	movs	r3, #174	; 0xae
 8008a76:	71fb      	strb	r3, [r7, #7]
 8008a78:	23ed      	movs	r3, #237	; 0xed
 8008a7a:	723b      	strb	r3, [r7, #8]
 8008a7c:	2321      	movs	r3, #33	; 0x21
 8008a7e:	727b      	strb	r3, [r7, #9]
 8008a80:	234c      	movs	r3, #76	; 0x4c
 8008a82:	72bb      	strb	r3, [r7, #10]
 8008a84:	239d      	movs	r3, #157	; 0x9d
 8008a86:	72fb      	strb	r3, [r7, #11]
 8008a88:	2341      	movs	r3, #65	; 0x41
 8008a8a:	733b      	strb	r3, [r7, #12]
 8008a8c:	2345      	movs	r3, #69	; 0x45
 8008a8e:	737b      	strb	r3, [r7, #13]
 8008a90:	2322      	movs	r3, #34	; 0x22
 8008a92:	73bb      	strb	r3, [r7, #14]
 8008a94:	238e      	movs	r3, #142	; 0x8e
 8008a96:	73fb      	strb	r3, [r7, #15]
 8008a98:	2300      	movs	r3, #0
 8008a9a:	743b      	strb	r3, [r7, #16]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	747b      	strb	r3, [r7, #17]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	74bb      	strb	r3, [r7, #18]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <SVCCTL_InitCustomSvc+0xe0>)
 8008aaa:	8818      	ldrh	r0, [r3, #0]
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <SVCCTL_InitCustomSvc+0xe4>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	1d3a      	adds	r2, r7, #4
 8008ab4:	490d      	ldr	r1, [pc, #52]	; (8008aec <SVCCTL_InitCustomSvc+0xe8>)
 8008ab6:	9105      	str	r1, [sp, #20]
 8008ab8:	2100      	movs	r1, #0
 8008aba:	9104      	str	r1, [sp, #16]
 8008abc:	2110      	movs	r1, #16
 8008abe:	9103      	str	r1, [sp, #12]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	9102      	str	r1, [sp, #8]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	9101      	str	r1, [sp, #4]
 8008ac8:	2108      	movs	r1, #8
 8008aca:	9100      	str	r1, [sp, #0]
 8008acc:	2102      	movs	r1, #2
 8008ace:	f7fe f88f 	bl	8006bf0 <aci_gatt_add_char>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008ad6:	bf00      	nop
}
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	08008979 	.word	0x08008979
 8008ae4:	20000c78 	.word	0x20000c78
 8008ae8:	2000001d 	.word	0x2000001d
 8008aec:	20000c7a 	.word	0x20000c7a

08008af0 <LL_PWR_EnableBootC2>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008af4:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <LL_PWR_EnableBootC2+0x1c>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4a04      	ldr	r2, [pc, #16]	; (8008b0c <LL_PWR_EnableBootC2+0x1c>)
 8008afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afe:	60d3      	str	r3, [r2, #12]
}
 8008b00:	bf00      	nop
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	58000400 	.word	0x58000400

08008b10 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008b1a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008b1e:	4905      	ldr	r1, [pc, #20]	; (8008b34 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	58000800 	.word	0x58000800

08008b38 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	4904      	ldr	r1, [pc, #16]	; (8008b58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	620b      	str	r3, [r1, #32]
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	58000800 	.word	0x58000800

08008b5c <LL_AHB3_GRP1_EnableClock>:
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008b80:	68fb      	ldr	r3, [r7, #12]
}
 8008b82:	bf00      	nop
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b9a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bae:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <LL_C1_IPCC_EnableIT_TXF>:
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <LL_C1_IPCC_EnableIT_RXO>:
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f043 0201 	orr.w	r2, r3, #1
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	601a      	str	r2, [r3, #0]
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	041b      	lsls	r3, r3, #16
 8008c18:	43db      	mvns	r3, r3
 8008c1a:	401a      	ands	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	605a      	str	r2, [r3, #4]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	041b      	lsls	r3, r3, #16
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	605a      	str	r2, [r3, #4]
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	401a      	ands	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	605a      	str	r2, [r3, #4]
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	609a      	str	r2, [r3, #8]
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <LL_C1_IPCC_SetFlag_CHx>:
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	041a      	lsls	r2, r3, #16
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	609a      	str	r2, [r3, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d101      	bne.n	8008cca <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	69da      	ldr	r2, [r3, #28]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d101      	bne.n	8008cf4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e000      	b.n	8008cf6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
	...

08008d04 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008d08:	2102      	movs	r1, #2
 8008d0a:	4819      	ldr	r0, [pc, #100]	; (8008d70 <HW_IPCC_Rx_Handler+0x6c>)
 8008d0c:	f7ff ffe4 	bl	8008cd8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <HW_IPCC_Rx_Handler+0x26>
 8008d16:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <HW_IPCC_Rx_Handler+0x6c>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008d24:	f000 f8da 	bl	8008edc <HW_IPCC_SYS_EvtHandler>
 8008d28:	e01f      	b.n	8008d6a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	4810      	ldr	r0, [pc, #64]	; (8008d70 <HW_IPCC_Rx_Handler+0x6c>)
 8008d2e:	f7ff ffd3 	bl	8008cd8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <HW_IPCC_Rx_Handler+0x46>
 8008d38:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <HW_IPCC_Rx_Handler+0x6c>)
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008d44:	f000 f88e 	bl	8008e64 <HW_IPCC_BLE_EvtHandler>
 8008d48:	e00f      	b.n	8008d6a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008d4a:	2108      	movs	r1, #8
 8008d4c:	4808      	ldr	r0, [pc, #32]	; (8008d70 <HW_IPCC_Rx_Handler+0x6c>)
 8008d4e:	f7ff ffc3 	bl	8008cd8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d009      	beq.n	8008d6c <HW_IPCC_Rx_Handler+0x68>
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <HW_IPCC_Rx_Handler+0x6c>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	f003 0308 	and.w	r3, r3, #8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008d66:	f000 f905 	bl	8008f74 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
}
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	58000c00 	.word	0x58000c00

08008d74 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008d78:	2102      	movs	r1, #2
 8008d7a:	481a      	ldr	r0, [pc, #104]	; (8008de4 <HW_IPCC_Tx_Handler+0x70>)
 8008d7c:	f7ff ff97 	bl	8008cae <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <HW_IPCC_Tx_Handler+0x26>
 8008d86:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <HW_IPCC_Tx_Handler+0x70>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008d94:	f000 f896 	bl	8008ec4 <HW_IPCC_SYS_CmdEvtHandler>
 8008d98:	e020      	b.n	8008ddc <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008d9a:	2108      	movs	r1, #8
 8008d9c:	4811      	ldr	r0, [pc, #68]	; (8008de4 <HW_IPCC_Tx_Handler+0x70>)
 8008d9e:	f7ff ff86 	bl	8008cae <LL_C1_IPCC_IsActiveFlag_CHx>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d109      	bne.n	8008dbc <HW_IPCC_Tx_Handler+0x48>
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <HW_IPCC_Tx_Handler+0x70>)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008db6:	f000 f8bf 	bl	8008f38 <HW_IPCC_MM_FreeBufHandler>
 8008dba:	e00f      	b.n	8008ddc <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008dbc:	2120      	movs	r1, #32
 8008dbe:	4809      	ldr	r0, [pc, #36]	; (8008de4 <HW_IPCC_Tx_Handler+0x70>)
 8008dc0:	f7ff ff75 	bl	8008cae <LL_C1_IPCC_IsActiveFlag_CHx>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <HW_IPCC_Tx_Handler+0x6a>
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <HW_IPCC_Tx_Handler+0x70>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	43db      	mvns	r3, r3
 8008dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008dd8:	f000 f850 	bl	8008e7c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
}
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	58000c00 	.word	0x58000c00

08008de8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008dec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008df0:	f7ff fecd 	bl	8008b8e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008df4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008df8:	f7ff fe9e 	bl	8008b38 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008dfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e00:	f7ff fe86 	bl	8008b10 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008e04:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008e06:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008e08:	f7ff fe72 	bl	8008af0 <LL_PWR_EnableBootC2>

  return;
 8008e0c:	bf00      	nop
}
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008e14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008e18:	f7ff fea0 	bl	8008b5c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008e1c:	4806      	ldr	r0, [pc, #24]	; (8008e38 <HW_IPCC_Init+0x28>)
 8008e1e:	f7ff fee2 	bl	8008be6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <HW_IPCC_Init+0x28>)
 8008e24:	f7ff fecf 	bl	8008bc6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008e28:	202c      	movs	r0, #44	; 0x2c
 8008e2a:	f7f9 fc9e 	bl	800276a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008e2e:	202d      	movs	r0, #45	; 0x2d
 8008e30:	f7f9 fc9b 	bl	800276a <HAL_NVIC_EnableIRQ>

  return;
 8008e34:	bf00      	nop
}
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	58000c00 	.word	0x58000c00

08008e3c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008e40:	2101      	movs	r1, #1
 8008e42:	4802      	ldr	r0, [pc, #8]	; (8008e4c <HW_IPCC_BLE_Init+0x10>)
 8008e44:	f7ff ff04 	bl	8008c50 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008e48:	bf00      	nop
}
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	58000c00 	.word	0x58000c00

08008e50 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008e54:	2101      	movs	r1, #1
 8008e56:	4802      	ldr	r0, [pc, #8]	; (8008e60 <HW_IPCC_BLE_SendCmd+0x10>)
 8008e58:	f7ff ff1a 	bl	8008c90 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008e5c:	bf00      	nop
}
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	58000c00 	.word	0x58000c00

08008e64 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008e68:	f7fe ffde 	bl	8007e28 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4802      	ldr	r0, [pc, #8]	; (8008e78 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008e70:	f7ff ff00 	bl	8008c74 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008e74:	bf00      	nop
}
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	58000c00 	.word	0x58000c00

08008e7c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008e80:	2120      	movs	r1, #32
 8008e82:	4803      	ldr	r0, [pc, #12]	; (8008e90 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008e84:	f7ff fed2 	bl	8008c2c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008e88:	f7fe fffe 	bl	8007e88 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008e8c:	bf00      	nop
}
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	58000c00 	.word	0x58000c00

08008e94 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008e98:	2102      	movs	r1, #2
 8008e9a:	4802      	ldr	r0, [pc, #8]	; (8008ea4 <HW_IPCC_SYS_Init+0x10>)
 8008e9c:	f7ff fed8 	bl	8008c50 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008ea0:	bf00      	nop
}
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	58000c00 	.word	0x58000c00

08008ea8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008eac:	2102      	movs	r1, #2
 8008eae:	4804      	ldr	r0, [pc, #16]	; (8008ec0 <HW_IPCC_SYS_SendCmd+0x18>)
 8008eb0:	f7ff feee 	bl	8008c90 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008eb4:	2102      	movs	r1, #2
 8008eb6:	4802      	ldr	r0, [pc, #8]	; (8008ec0 <HW_IPCC_SYS_SendCmd+0x18>)
 8008eb8:	f7ff fea5 	bl	8008c06 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008ebc:	bf00      	nop
}
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	58000c00 	.word	0x58000c00

08008ec4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008ec8:	2102      	movs	r1, #2
 8008eca:	4803      	ldr	r0, [pc, #12]	; (8008ed8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008ecc:	f7ff feae 	bl	8008c2c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008ed0:	f7ff f82a 	bl	8007f28 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008ed4:	bf00      	nop
}
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	58000c00 	.word	0x58000c00

08008edc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008ee0:	f7ff f838 	bl	8007f54 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008ee4:	2102      	movs	r1, #2
 8008ee6:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008ee8:	f7ff fec4 	bl	8008c74 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008eec:	bf00      	nop
}
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	58000c00 	.word	0x58000c00

08008ef4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008efc:	2108      	movs	r1, #8
 8008efe:	480c      	ldr	r0, [pc, #48]	; (8008f30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008f00:	f7ff fed5 	bl	8008cae <LL_C1_IPCC_IsActiveFlag_CHx>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d007      	beq.n	8008f1a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008f0a:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f10:	2108      	movs	r1, #8
 8008f12:	4807      	ldr	r0, [pc, #28]	; (8008f30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008f14:	f7ff fe77 	bl	8008c06 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008f18:	e006      	b.n	8008f28 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f1e:	2108      	movs	r1, #8
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008f22:	f7ff feb5 	bl	8008c90 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008f26:	bf00      	nop
}
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	58000c00 	.word	0x58000c00
 8008f34:	20000c7c 	.word	0x20000c7c

08008f38 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f3c:	2108      	movs	r1, #8
 8008f3e:	4806      	ldr	r0, [pc, #24]	; (8008f58 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008f40:	f7ff fe74 	bl	8008c2c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f4a:	2108      	movs	r1, #8
 8008f4c:	4802      	ldr	r0, [pc, #8]	; (8008f58 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008f4e:	f7ff fe9f 	bl	8008c90 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008f52:	bf00      	nop
}
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	58000c00 	.word	0x58000c00
 8008f5c:	20000c7c 	.word	0x20000c7c

08008f60 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008f64:	2108      	movs	r1, #8
 8008f66:	4802      	ldr	r0, [pc, #8]	; (8008f70 <HW_IPCC_TRACES_Init+0x10>)
 8008f68:	f7ff fe72 	bl	8008c50 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008f6c:	bf00      	nop
}
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	58000c00 	.word	0x58000c00

08008f74 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008f78:	f7ff f894 	bl	80080a4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008f7c:	2108      	movs	r1, #8
 8008f7e:	4802      	ldr	r0, [pc, #8]	; (8008f88 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008f80:	f7ff fe78 	bl	8008c74 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008f84:	bf00      	nop
}
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	58000c00 	.word	0x58000c00

08008f8c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <UTIL_LPM_Init+0x1c>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008f96:	4b05      	ldr	r3, [pc, #20]	; (8008fac <UTIL_LPM_Init+0x20>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008f9c:	bf00      	nop
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20000c80 	.word	0x20000c80
 8008fac:	20000c84 	.word	0x20000c84

08008fb0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8008fc2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fc6:	b672      	cpsid	i
}
 8008fc8:	bf00      	nop
  
  switch(state)
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <UTIL_LPM_SetOffMode+0x32>
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10e      	bne.n	8008ff2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008fd4:	4b0d      	ldr	r3, [pc, #52]	; (800900c <UTIL_LPM_SetOffMode+0x5c>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	4a0b      	ldr	r2, [pc, #44]	; (800900c <UTIL_LPM_SetOffMode+0x5c>)
 8008fde:	6013      	str	r3, [r2, #0]
      break;
 8008fe0:	e008      	b.n	8008ff4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	43da      	mvns	r2, r3
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <UTIL_LPM_SetOffMode+0x5c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4013      	ands	r3, r2
 8008fec:	4a07      	ldr	r2, [pc, #28]	; (800900c <UTIL_LPM_SetOffMode+0x5c>)
 8008fee:	6013      	str	r3, [r2, #0]
      break;
 8008ff0:	e000      	b.n	8008ff4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008ff2:	bf00      	nop
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f383 8810 	msr	PRIMASK, r3
}
 8008ffe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	20000c84 	.word	0x20000c84

08009010 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b090      	sub	sp, #64	; 0x40
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009018:	4b73      	ldr	r3, [pc, #460]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800901e:	4b72      	ldr	r3, [pc, #456]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4013      	ands	r3, r2
 8009026:	4a70      	ldr	r2, [pc, #448]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 8009028:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800902a:	4b70      	ldr	r3, [pc, #448]	; (80091ec <UTIL_SEQ_Run+0x1dc>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009030:	4b6f      	ldr	r3, [pc, #444]	; (80091f0 <UTIL_SEQ_Run+0x1e0>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009036:	4b6f      	ldr	r3, [pc, #444]	; (80091f4 <UTIL_SEQ_Run+0x1e4>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800903c:	4b6e      	ldr	r3, [pc, #440]	; (80091f8 <UTIL_SEQ_Run+0x1e8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009042:	e08d      	b.n	8009160 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009048:	e002      	b.n	8009050 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800904a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904c:	3301      	adds	r3, #1
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009050:	4a6a      	ldr	r2, [pc, #424]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 8009052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009054:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	401a      	ands	r2, r3
 800905c:	4b62      	ldr	r3, [pc, #392]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4013      	ands	r3, r2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0f1      	beq.n	800904a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009066:	4a65      	ldr	r2, [pc, #404]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 8009068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	401a      	ands	r2, r3
 8009072:	4b5d      	ldr	r3, [pc, #372]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4013      	ands	r3, r2
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800907a:	4a60      	ldr	r2, [pc, #384]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	4413      	add	r3, r2
 8009082:	685a      	ldr	r2, [r3, #4]
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	4013      	ands	r3, r2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800908c:	4a5b      	ldr	r2, [pc, #364]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 800908e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009090:	00db      	lsls	r3, r3, #3
 8009092:	4413      	add	r3, r2
 8009094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009098:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800909a:	4a58      	ldr	r2, [pc, #352]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	4413      	add	r3, r2
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	4013      	ands	r3, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f9b3 	bl	8009414 <SEQ_BitPosition>
 80090ae:	4603      	mov	r3, r0
 80090b0:	461a      	mov	r2, r3
 80090b2:	4b53      	ldr	r3, [pc, #332]	; (8009200 <UTIL_SEQ_Run+0x1f0>)
 80090b4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80090b6:	4a51      	ldr	r2, [pc, #324]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	4413      	add	r3, r2
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	4b4f      	ldr	r3, [pc, #316]	; (8009200 <UTIL_SEQ_Run+0x1f0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2101      	movs	r1, #1
 80090c6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ca:	43db      	mvns	r3, r3
 80090cc:	401a      	ands	r2, r3
 80090ce:	494b      	ldr	r1, [pc, #300]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 80090d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	440b      	add	r3, r1
 80090d6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090d8:	f3ef 8310 	mrs	r3, PRIMASK
 80090dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80090de:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80090e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80090e2:	b672      	cpsid	i
}
 80090e4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80090e6:	4b46      	ldr	r3, [pc, #280]	; (8009200 <UTIL_SEQ_Run+0x1f0>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2201      	movs	r2, #1
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	43da      	mvns	r2, r3
 80090f2:	4b3e      	ldr	r3, [pc, #248]	; (80091ec <UTIL_SEQ_Run+0x1dc>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4013      	ands	r3, r2
 80090f8:	4a3c      	ldr	r2, [pc, #240]	; (80091ec <UTIL_SEQ_Run+0x1dc>)
 80090fa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80090fc:	2302      	movs	r3, #2
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009100:	e013      	b.n	800912a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009104:	3b01      	subs	r3, #1
 8009106:	4a3d      	ldr	r2, [pc, #244]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 8009108:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800910c:	4b3c      	ldr	r3, [pc, #240]	; (8009200 <UTIL_SEQ_Run+0x1f0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2201      	movs	r2, #1
 8009112:	fa02 f303 	lsl.w	r3, r2, r3
 8009116:	43da      	mvns	r2, r3
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	3b01      	subs	r3, #1
 800911c:	400a      	ands	r2, r1
 800911e:	4937      	ldr	r1, [pc, #220]	; (80091fc <UTIL_SEQ_Run+0x1ec>)
 8009120:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009126:	3b01      	subs	r3, #1
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e8      	bne.n	8009102 <UTIL_SEQ_Run+0xf2>
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f383 8810 	msr	PRIMASK, r3
}
 800913a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800913c:	4b30      	ldr	r3, [pc, #192]	; (8009200 <UTIL_SEQ_Run+0x1f0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a30      	ldr	r2, [pc, #192]	; (8009204 <UTIL_SEQ_Run+0x1f4>)
 8009142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009146:	4798      	blx	r3

    local_taskset = TaskSet;
 8009148:	4b28      	ldr	r3, [pc, #160]	; (80091ec <UTIL_SEQ_Run+0x1dc>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800914e:	4b28      	ldr	r3, [pc, #160]	; (80091f0 <UTIL_SEQ_Run+0x1e0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009154:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <UTIL_SEQ_Run+0x1e4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800915a:	4b27      	ldr	r3, [pc, #156]	; (80091f8 <UTIL_SEQ_Run+0x1e8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	401a      	ands	r2, r3
 8009166:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4013      	ands	r3, r2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d005      	beq.n	800917c <UTIL_SEQ_Run+0x16c>
 8009170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	4013      	ands	r3, r2
 8009176:	2b00      	cmp	r3, #0
 8009178:	f43f af64 	beq.w	8009044 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800917c:	4b20      	ldr	r3, [pc, #128]	; (8009200 <UTIL_SEQ_Run+0x1f0>)
 800917e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009182:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009184:	f000 f938 	bl	80093f8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009188:	f3ef 8310 	mrs	r3, PRIMASK
 800918c:	613b      	str	r3, [r7, #16]
  return(result);
 800918e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009192:	b672      	cpsid	i
}
 8009194:	bf00      	nop
  local_taskset = TaskSet;
 8009196:	4b15      	ldr	r3, [pc, #84]	; (80091ec <UTIL_SEQ_Run+0x1dc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800919c:	4b14      	ldr	r3, [pc, #80]	; (80091f0 <UTIL_SEQ_Run+0x1e0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <UTIL_SEQ_Run+0x1e4>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80091a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	401a      	ands	r2, r3
 80091ae:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4013      	ands	r3, r2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d107      	bne.n	80091c8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80091b8:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <UTIL_SEQ_Run+0x1e8>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	4013      	ands	r3, r2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80091c4:	f7f7 fd92 	bl	8000cec <UTIL_SEQ_Idle>
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f383 8810 	msr	PRIMASK, r3
}
 80091d2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80091d4:	f000 f917 	bl	8009406 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80091d8:	4a03      	ldr	r2, [pc, #12]	; (80091e8 <UTIL_SEQ_Run+0x1d8>)
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	6013      	str	r3, [r2, #0]

  return;
 80091de:	bf00      	nop
}
 80091e0:	3740      	adds	r7, #64	; 0x40
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000024 	.word	0x20000024
 80091ec:	20000c88 	.word	0x20000c88
 80091f0:	20000c8c 	.word	0x20000c8c
 80091f4:	20000020 	.word	0x20000020
 80091f8:	20000c90 	.word	0x20000c90
 80091fc:	20000d18 	.word	0x20000d18
 8009200:	20000c94 	.word	0x20000c94
 8009204:	20000c98 	.word	0x20000c98

08009208 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	617b      	str	r3, [r7, #20]
  return(result);
 800921a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800921c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800921e:	b672      	cpsid	i
}
 8009220:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 f8f6 	bl	8009414 <SEQ_BitPosition>
 8009228:	4603      	mov	r3, r0
 800922a:	4619      	mov	r1, r3
 800922c:	4a06      	ldr	r2, [pc, #24]	; (8009248 <UTIL_SEQ_RegTask+0x40>)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f383 8810 	msr	PRIMASK, r3
}
 800923e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009240:	bf00      	nop
}
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20000c98 	.word	0x20000c98

0800924c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009256:	f3ef 8310 	mrs	r3, PRIMASK
 800925a:	60fb      	str	r3, [r7, #12]
  return(result);
 800925c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800925e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009260:	b672      	cpsid	i
}
 8009262:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <UTIL_SEQ_SetTask+0x50>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4313      	orrs	r3, r2
 800926c:	4a0b      	ldr	r2, [pc, #44]	; (800929c <UTIL_SEQ_SetTask+0x50>)
 800926e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009270:	4a0b      	ldr	r2, [pc, #44]	; (80092a0 <UTIL_SEQ_SetTask+0x54>)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	431a      	orrs	r2, r3
 800927c:	4908      	ldr	r1, [pc, #32]	; (80092a0 <UTIL_SEQ_SetTask+0x54>)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f383 8810 	msr	PRIMASK, r3
}
 800928e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009290:	bf00      	nop
}
 8009292:	371c      	adds	r7, #28
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20000c88 	.word	0x20000c88
 80092a0:	20000d18 	.word	0x20000d18

080092a4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ac:	f3ef 8310 	mrs	r3, PRIMASK
 80092b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80092b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80092b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092b6:	b672      	cpsid	i
}
 80092b8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	43da      	mvns	r2, r3
 80092be:	4b08      	ldr	r3, [pc, #32]	; (80092e0 <UTIL_SEQ_PauseTask+0x3c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4013      	ands	r3, r2
 80092c4:	4a06      	ldr	r2, [pc, #24]	; (80092e0 <UTIL_SEQ_PauseTask+0x3c>)
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f383 8810 	msr	PRIMASK, r3
}
 80092d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80092d4:	bf00      	nop
}
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20000020 	.word	0x20000020

080092e4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ec:	f3ef 8310 	mrs	r3, PRIMASK
 80092f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80092f2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80092f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092f6:	b672      	cpsid	i
}
 80092f8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80092fa:	4b09      	ldr	r3, [pc, #36]	; (8009320 <UTIL_SEQ_ResumeTask+0x3c>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4313      	orrs	r3, r2
 8009302:	4a07      	ldr	r2, [pc, #28]	; (8009320 <UTIL_SEQ_ResumeTask+0x3c>)
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f383 8810 	msr	PRIMASK, r3
}
 8009310:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009312:	bf00      	nop
}
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000020 	.word	0x20000020

08009324 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800932c:	f3ef 8310 	mrs	r3, PRIMASK
 8009330:	60fb      	str	r3, [r7, #12]
  return(result);
 8009332:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009336:	b672      	cpsid	i
}
 8009338:	bf00      	nop

  EvtSet |= EvtId_bm;
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <UTIL_SEQ_SetEvt+0x3c>)
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4313      	orrs	r3, r2
 8009342:	4a07      	ldr	r2, [pc, #28]	; (8009360 <UTIL_SEQ_SetEvt+0x3c>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f383 8810 	msr	PRIMASK, r3
}
 8009350:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009352:	bf00      	nop
}
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20000c8c 	.word	0x20000c8c

08009364 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800936c:	4b1f      	ldr	r3, [pc, #124]	; (80093ec <UTIL_SEQ_WaitEvt+0x88>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009372:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <UTIL_SEQ_WaitEvt+0x88>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800937a:	d102      	bne.n	8009382 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e005      	b.n	800938e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009382:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <UTIL_SEQ_WaitEvt+0x88>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2201      	movs	r2, #1
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800938e:	4b18      	ldr	r3, [pc, #96]	; (80093f0 <UTIL_SEQ_WaitEvt+0x8c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009394:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <UTIL_SEQ_WaitEvt+0x8c>)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800939a:	e003      	b.n	80093a4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	69f8      	ldr	r0, [r7, #28]
 80093a0:	f7f7 fcab 	bl	8000cfa <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80093a4:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <UTIL_SEQ_WaitEvt+0x90>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0f5      	beq.n	800939c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80093b0:	4a0e      	ldr	r2, [pc, #56]	; (80093ec <UTIL_SEQ_WaitEvt+0x88>)
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093b6:	f3ef 8310 	mrs	r3, PRIMASK
 80093ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80093bc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80093be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80093c0:	b672      	cpsid	i
}
 80093c2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	43da      	mvns	r2, r3
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <UTIL_SEQ_WaitEvt+0x90>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4013      	ands	r3, r2
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <UTIL_SEQ_WaitEvt+0x90>)
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f383 8810 	msr	PRIMASK, r3
}
 80093dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80093de:	4a04      	ldr	r2, [pc, #16]	; (80093f0 <UTIL_SEQ_WaitEvt+0x8c>)
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	6013      	str	r3, [r2, #0]
  return;
 80093e4:	bf00      	nop
}
 80093e6:	3720      	adds	r7, #32
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20000c94 	.word	0x20000c94
 80093f0:	20000c90 	.word	0x20000c90
 80093f4:	20000c8c 	.word	0x20000c8c

080093f8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80093fc:	bf00      	nop
}
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009406:	b480      	push	{r7}
 8009408:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800940a:	bf00      	nop
}
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	0c1b      	lsrs	r3, r3, #16
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <SEQ_BitPosition+0x24>
 800942e:	2310      	movs	r3, #16
 8009430:	73fb      	strb	r3, [r7, #15]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	041b      	lsls	r3, r3, #16
 8009436:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <SEQ_BitPosition+0x3a>
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	3308      	adds	r3, #8
 8009446:	73fb      	strb	r3, [r7, #15]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d105      	bne.n	8009464 <SEQ_BitPosition+0x50>
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	3304      	adds	r3, #4
 800945c:	73fb      	strb	r3, [r7, #15]
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	011b      	lsls	r3, r3, #4
 8009462:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	0f1b      	lsrs	r3, r3, #28
 8009468:	4a07      	ldr	r2, [pc, #28]	; (8009488 <SEQ_BitPosition+0x74>)
 800946a:	5cd2      	ldrb	r2, [r2, r3]
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	4413      	add	r3, r2
 8009470:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	f1c3 031f 	rsb	r3, r3, #31
 8009478:	b2db      	uxtb	r3, r3
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	0800a700 	.word	0x0800a700

0800948c <__errno>:
 800948c:	4b01      	ldr	r3, [pc, #4]	; (8009494 <__errno+0x8>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20000028 	.word	0x20000028

08009498 <__libc_init_array>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4d0d      	ldr	r5, [pc, #52]	; (80094d0 <__libc_init_array+0x38>)
 800949c:	4c0d      	ldr	r4, [pc, #52]	; (80094d4 <__libc_init_array+0x3c>)
 800949e:	1b64      	subs	r4, r4, r5
 80094a0:	10a4      	asrs	r4, r4, #2
 80094a2:	2600      	movs	r6, #0
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	d109      	bne.n	80094bc <__libc_init_array+0x24>
 80094a8:	4d0b      	ldr	r5, [pc, #44]	; (80094d8 <__libc_init_array+0x40>)
 80094aa:	4c0c      	ldr	r4, [pc, #48]	; (80094dc <__libc_init_array+0x44>)
 80094ac:	f000 ffbc 	bl	800a428 <_init>
 80094b0:	1b64      	subs	r4, r4, r5
 80094b2:	10a4      	asrs	r4, r4, #2
 80094b4:	2600      	movs	r6, #0
 80094b6:	42a6      	cmp	r6, r4
 80094b8:	d105      	bne.n	80094c6 <__libc_init_array+0x2e>
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c0:	4798      	blx	r3
 80094c2:	3601      	adds	r6, #1
 80094c4:	e7ee      	b.n	80094a4 <__libc_init_array+0xc>
 80094c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ca:	4798      	blx	r3
 80094cc:	3601      	adds	r6, #1
 80094ce:	e7f2      	b.n	80094b6 <__libc_init_array+0x1e>
 80094d0:	0800a7b0 	.word	0x0800a7b0
 80094d4:	0800a7b0 	.word	0x0800a7b0
 80094d8:	0800a7b0 	.word	0x0800a7b0
 80094dc:	0800a7b4 	.word	0x0800a7b4

080094e0 <memcpy>:
 80094e0:	440a      	add	r2, r1
 80094e2:	4291      	cmp	r1, r2
 80094e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094e8:	d100      	bne.n	80094ec <memcpy+0xc>
 80094ea:	4770      	bx	lr
 80094ec:	b510      	push	{r4, lr}
 80094ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f6:	4291      	cmp	r1, r2
 80094f8:	d1f9      	bne.n	80094ee <memcpy+0xe>
 80094fa:	bd10      	pop	{r4, pc}

080094fc <memset>:
 80094fc:	4402      	add	r2, r0
 80094fe:	4603      	mov	r3, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	d100      	bne.n	8009506 <memset+0xa>
 8009504:	4770      	bx	lr
 8009506:	f803 1b01 	strb.w	r1, [r3], #1
 800950a:	e7f9      	b.n	8009500 <memset+0x4>

0800950c <iprintf>:
 800950c:	b40f      	push	{r0, r1, r2, r3}
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <iprintf+0x2c>)
 8009510:	b513      	push	{r0, r1, r4, lr}
 8009512:	681c      	ldr	r4, [r3, #0]
 8009514:	b124      	cbz	r4, 8009520 <iprintf+0x14>
 8009516:	69a3      	ldr	r3, [r4, #24]
 8009518:	b913      	cbnz	r3, 8009520 <iprintf+0x14>
 800951a:	4620      	mov	r0, r4
 800951c:	f000 f866 	bl	80095ec <__sinit>
 8009520:	ab05      	add	r3, sp, #20
 8009522:	9a04      	ldr	r2, [sp, #16]
 8009524:	68a1      	ldr	r1, [r4, #8]
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	4620      	mov	r0, r4
 800952a:	f000 f9bd 	bl	80098a8 <_vfiprintf_r>
 800952e:	b002      	add	sp, #8
 8009530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009534:	b004      	add	sp, #16
 8009536:	4770      	bx	lr
 8009538:	20000028 	.word	0x20000028

0800953c <std>:
 800953c:	2300      	movs	r3, #0
 800953e:	b510      	push	{r4, lr}
 8009540:	4604      	mov	r4, r0
 8009542:	e9c0 3300 	strd	r3, r3, [r0]
 8009546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800954a:	6083      	str	r3, [r0, #8]
 800954c:	8181      	strh	r1, [r0, #12]
 800954e:	6643      	str	r3, [r0, #100]	; 0x64
 8009550:	81c2      	strh	r2, [r0, #14]
 8009552:	6183      	str	r3, [r0, #24]
 8009554:	4619      	mov	r1, r3
 8009556:	2208      	movs	r2, #8
 8009558:	305c      	adds	r0, #92	; 0x5c
 800955a:	f7ff ffcf 	bl	80094fc <memset>
 800955e:	4b05      	ldr	r3, [pc, #20]	; (8009574 <std+0x38>)
 8009560:	6263      	str	r3, [r4, #36]	; 0x24
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <std+0x3c>)
 8009564:	62a3      	str	r3, [r4, #40]	; 0x28
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <std+0x40>)
 8009568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <std+0x44>)
 800956c:	6224      	str	r4, [r4, #32]
 800956e:	6323      	str	r3, [r4, #48]	; 0x30
 8009570:	bd10      	pop	{r4, pc}
 8009572:	bf00      	nop
 8009574:	08009e51 	.word	0x08009e51
 8009578:	08009e73 	.word	0x08009e73
 800957c:	08009eab 	.word	0x08009eab
 8009580:	08009ecf 	.word	0x08009ecf

08009584 <_cleanup_r>:
 8009584:	4901      	ldr	r1, [pc, #4]	; (800958c <_cleanup_r+0x8>)
 8009586:	f000 b8af 	b.w	80096e8 <_fwalk_reent>
 800958a:	bf00      	nop
 800958c:	0800a1a9 	.word	0x0800a1a9

08009590 <__sfmoreglue>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	2268      	movs	r2, #104	; 0x68
 8009594:	1e4d      	subs	r5, r1, #1
 8009596:	4355      	muls	r5, r2
 8009598:	460e      	mov	r6, r1
 800959a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800959e:	f000 f8e5 	bl	800976c <_malloc_r>
 80095a2:	4604      	mov	r4, r0
 80095a4:	b140      	cbz	r0, 80095b8 <__sfmoreglue+0x28>
 80095a6:	2100      	movs	r1, #0
 80095a8:	e9c0 1600 	strd	r1, r6, [r0]
 80095ac:	300c      	adds	r0, #12
 80095ae:	60a0      	str	r0, [r4, #8]
 80095b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095b4:	f7ff ffa2 	bl	80094fc <memset>
 80095b8:	4620      	mov	r0, r4
 80095ba:	bd70      	pop	{r4, r5, r6, pc}

080095bc <__sfp_lock_acquire>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__sfp_lock_acquire+0x8>)
 80095be:	f000 b8b3 	b.w	8009728 <__retarget_lock_acquire_recursive>
 80095c2:	bf00      	nop
 80095c4:	20000d29 	.word	0x20000d29

080095c8 <__sfp_lock_release>:
 80095c8:	4801      	ldr	r0, [pc, #4]	; (80095d0 <__sfp_lock_release+0x8>)
 80095ca:	f000 b8ae 	b.w	800972a <__retarget_lock_release_recursive>
 80095ce:	bf00      	nop
 80095d0:	20000d29 	.word	0x20000d29

080095d4 <__sinit_lock_acquire>:
 80095d4:	4801      	ldr	r0, [pc, #4]	; (80095dc <__sinit_lock_acquire+0x8>)
 80095d6:	f000 b8a7 	b.w	8009728 <__retarget_lock_acquire_recursive>
 80095da:	bf00      	nop
 80095dc:	20000d2a 	.word	0x20000d2a

080095e0 <__sinit_lock_release>:
 80095e0:	4801      	ldr	r0, [pc, #4]	; (80095e8 <__sinit_lock_release+0x8>)
 80095e2:	f000 b8a2 	b.w	800972a <__retarget_lock_release_recursive>
 80095e6:	bf00      	nop
 80095e8:	20000d2a 	.word	0x20000d2a

080095ec <__sinit>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	4604      	mov	r4, r0
 80095f0:	f7ff fff0 	bl	80095d4 <__sinit_lock_acquire>
 80095f4:	69a3      	ldr	r3, [r4, #24]
 80095f6:	b11b      	cbz	r3, 8009600 <__sinit+0x14>
 80095f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fc:	f7ff bff0 	b.w	80095e0 <__sinit_lock_release>
 8009600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009604:	6523      	str	r3, [r4, #80]	; 0x50
 8009606:	4b13      	ldr	r3, [pc, #76]	; (8009654 <__sinit+0x68>)
 8009608:	4a13      	ldr	r2, [pc, #76]	; (8009658 <__sinit+0x6c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	62a2      	str	r2, [r4, #40]	; 0x28
 800960e:	42a3      	cmp	r3, r4
 8009610:	bf04      	itt	eq
 8009612:	2301      	moveq	r3, #1
 8009614:	61a3      	streq	r3, [r4, #24]
 8009616:	4620      	mov	r0, r4
 8009618:	f000 f820 	bl	800965c <__sfp>
 800961c:	6060      	str	r0, [r4, #4]
 800961e:	4620      	mov	r0, r4
 8009620:	f000 f81c 	bl	800965c <__sfp>
 8009624:	60a0      	str	r0, [r4, #8]
 8009626:	4620      	mov	r0, r4
 8009628:	f000 f818 	bl	800965c <__sfp>
 800962c:	2200      	movs	r2, #0
 800962e:	60e0      	str	r0, [r4, #12]
 8009630:	2104      	movs	r1, #4
 8009632:	6860      	ldr	r0, [r4, #4]
 8009634:	f7ff ff82 	bl	800953c <std>
 8009638:	68a0      	ldr	r0, [r4, #8]
 800963a:	2201      	movs	r2, #1
 800963c:	2109      	movs	r1, #9
 800963e:	f7ff ff7d 	bl	800953c <std>
 8009642:	68e0      	ldr	r0, [r4, #12]
 8009644:	2202      	movs	r2, #2
 8009646:	2112      	movs	r1, #18
 8009648:	f7ff ff78 	bl	800953c <std>
 800964c:	2301      	movs	r3, #1
 800964e:	61a3      	str	r3, [r4, #24]
 8009650:	e7d2      	b.n	80095f8 <__sinit+0xc>
 8009652:	bf00      	nop
 8009654:	0800a710 	.word	0x0800a710
 8009658:	08009585 	.word	0x08009585

0800965c <__sfp>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	4607      	mov	r7, r0
 8009660:	f7ff ffac 	bl	80095bc <__sfp_lock_acquire>
 8009664:	4b1e      	ldr	r3, [pc, #120]	; (80096e0 <__sfp+0x84>)
 8009666:	681e      	ldr	r6, [r3, #0]
 8009668:	69b3      	ldr	r3, [r6, #24]
 800966a:	b913      	cbnz	r3, 8009672 <__sfp+0x16>
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff ffbd 	bl	80095ec <__sinit>
 8009672:	3648      	adds	r6, #72	; 0x48
 8009674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009678:	3b01      	subs	r3, #1
 800967a:	d503      	bpl.n	8009684 <__sfp+0x28>
 800967c:	6833      	ldr	r3, [r6, #0]
 800967e:	b30b      	cbz	r3, 80096c4 <__sfp+0x68>
 8009680:	6836      	ldr	r6, [r6, #0]
 8009682:	e7f7      	b.n	8009674 <__sfp+0x18>
 8009684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009688:	b9d5      	cbnz	r5, 80096c0 <__sfp+0x64>
 800968a:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <__sfp+0x88>)
 800968c:	60e3      	str	r3, [r4, #12]
 800968e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009692:	6665      	str	r5, [r4, #100]	; 0x64
 8009694:	f000 f847 	bl	8009726 <__retarget_lock_init_recursive>
 8009698:	f7ff ff96 	bl	80095c8 <__sfp_lock_release>
 800969c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096a4:	6025      	str	r5, [r4, #0]
 80096a6:	61a5      	str	r5, [r4, #24]
 80096a8:	2208      	movs	r2, #8
 80096aa:	4629      	mov	r1, r5
 80096ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096b0:	f7ff ff24 	bl	80094fc <memset>
 80096b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096bc:	4620      	mov	r0, r4
 80096be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c0:	3468      	adds	r4, #104	; 0x68
 80096c2:	e7d9      	b.n	8009678 <__sfp+0x1c>
 80096c4:	2104      	movs	r1, #4
 80096c6:	4638      	mov	r0, r7
 80096c8:	f7ff ff62 	bl	8009590 <__sfmoreglue>
 80096cc:	4604      	mov	r4, r0
 80096ce:	6030      	str	r0, [r6, #0]
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d1d5      	bne.n	8009680 <__sfp+0x24>
 80096d4:	f7ff ff78 	bl	80095c8 <__sfp_lock_release>
 80096d8:	230c      	movs	r3, #12
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	e7ee      	b.n	80096bc <__sfp+0x60>
 80096de:	bf00      	nop
 80096e0:	0800a710 	.word	0x0800a710
 80096e4:	ffff0001 	.word	0xffff0001

080096e8 <_fwalk_reent>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	4606      	mov	r6, r0
 80096ee:	4688      	mov	r8, r1
 80096f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096f4:	2700      	movs	r7, #0
 80096f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096fa:	f1b9 0901 	subs.w	r9, r9, #1
 80096fe:	d505      	bpl.n	800970c <_fwalk_reent+0x24>
 8009700:	6824      	ldr	r4, [r4, #0]
 8009702:	2c00      	cmp	r4, #0
 8009704:	d1f7      	bne.n	80096f6 <_fwalk_reent+0xe>
 8009706:	4638      	mov	r0, r7
 8009708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970c:	89ab      	ldrh	r3, [r5, #12]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d907      	bls.n	8009722 <_fwalk_reent+0x3a>
 8009712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009716:	3301      	adds	r3, #1
 8009718:	d003      	beq.n	8009722 <_fwalk_reent+0x3a>
 800971a:	4629      	mov	r1, r5
 800971c:	4630      	mov	r0, r6
 800971e:	47c0      	blx	r8
 8009720:	4307      	orrs	r7, r0
 8009722:	3568      	adds	r5, #104	; 0x68
 8009724:	e7e9      	b.n	80096fa <_fwalk_reent+0x12>

08009726 <__retarget_lock_init_recursive>:
 8009726:	4770      	bx	lr

08009728 <__retarget_lock_acquire_recursive>:
 8009728:	4770      	bx	lr

0800972a <__retarget_lock_release_recursive>:
 800972a:	4770      	bx	lr

0800972c <sbrk_aligned>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4e0e      	ldr	r6, [pc, #56]	; (8009768 <sbrk_aligned+0x3c>)
 8009730:	460c      	mov	r4, r1
 8009732:	6831      	ldr	r1, [r6, #0]
 8009734:	4605      	mov	r5, r0
 8009736:	b911      	cbnz	r1, 800973e <sbrk_aligned+0x12>
 8009738:	f000 fb7a 	bl	8009e30 <_sbrk_r>
 800973c:	6030      	str	r0, [r6, #0]
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	f000 fb75 	bl	8009e30 <_sbrk_r>
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	d00a      	beq.n	8009760 <sbrk_aligned+0x34>
 800974a:	1cc4      	adds	r4, r0, #3
 800974c:	f024 0403 	bic.w	r4, r4, #3
 8009750:	42a0      	cmp	r0, r4
 8009752:	d007      	beq.n	8009764 <sbrk_aligned+0x38>
 8009754:	1a21      	subs	r1, r4, r0
 8009756:	4628      	mov	r0, r5
 8009758:	f000 fb6a 	bl	8009e30 <_sbrk_r>
 800975c:	3001      	adds	r0, #1
 800975e:	d101      	bne.n	8009764 <sbrk_aligned+0x38>
 8009760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009764:	4620      	mov	r0, r4
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	20000d30 	.word	0x20000d30

0800976c <_malloc_r>:
 800976c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009770:	1ccd      	adds	r5, r1, #3
 8009772:	f025 0503 	bic.w	r5, r5, #3
 8009776:	3508      	adds	r5, #8
 8009778:	2d0c      	cmp	r5, #12
 800977a:	bf38      	it	cc
 800977c:	250c      	movcc	r5, #12
 800977e:	2d00      	cmp	r5, #0
 8009780:	4607      	mov	r7, r0
 8009782:	db01      	blt.n	8009788 <_malloc_r+0x1c>
 8009784:	42a9      	cmp	r1, r5
 8009786:	d905      	bls.n	8009794 <_malloc_r+0x28>
 8009788:	230c      	movs	r3, #12
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	2600      	movs	r6, #0
 800978e:	4630      	mov	r0, r6
 8009790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009794:	4e2e      	ldr	r6, [pc, #184]	; (8009850 <_malloc_r+0xe4>)
 8009796:	f000 fdbb 	bl	800a310 <__malloc_lock>
 800979a:	6833      	ldr	r3, [r6, #0]
 800979c:	461c      	mov	r4, r3
 800979e:	bb34      	cbnz	r4, 80097ee <_malloc_r+0x82>
 80097a0:	4629      	mov	r1, r5
 80097a2:	4638      	mov	r0, r7
 80097a4:	f7ff ffc2 	bl	800972c <sbrk_aligned>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	4604      	mov	r4, r0
 80097ac:	d14d      	bne.n	800984a <_malloc_r+0xde>
 80097ae:	6834      	ldr	r4, [r6, #0]
 80097b0:	4626      	mov	r6, r4
 80097b2:	2e00      	cmp	r6, #0
 80097b4:	d140      	bne.n	8009838 <_malloc_r+0xcc>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	4631      	mov	r1, r6
 80097ba:	4638      	mov	r0, r7
 80097bc:	eb04 0803 	add.w	r8, r4, r3
 80097c0:	f000 fb36 	bl	8009e30 <_sbrk_r>
 80097c4:	4580      	cmp	r8, r0
 80097c6:	d13a      	bne.n	800983e <_malloc_r+0xd2>
 80097c8:	6821      	ldr	r1, [r4, #0]
 80097ca:	3503      	adds	r5, #3
 80097cc:	1a6d      	subs	r5, r5, r1
 80097ce:	f025 0503 	bic.w	r5, r5, #3
 80097d2:	3508      	adds	r5, #8
 80097d4:	2d0c      	cmp	r5, #12
 80097d6:	bf38      	it	cc
 80097d8:	250c      	movcc	r5, #12
 80097da:	4629      	mov	r1, r5
 80097dc:	4638      	mov	r0, r7
 80097de:	f7ff ffa5 	bl	800972c <sbrk_aligned>
 80097e2:	3001      	adds	r0, #1
 80097e4:	d02b      	beq.n	800983e <_malloc_r+0xd2>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	442b      	add	r3, r5
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	e00e      	b.n	800980c <_malloc_r+0xa0>
 80097ee:	6822      	ldr	r2, [r4, #0]
 80097f0:	1b52      	subs	r2, r2, r5
 80097f2:	d41e      	bmi.n	8009832 <_malloc_r+0xc6>
 80097f4:	2a0b      	cmp	r2, #11
 80097f6:	d916      	bls.n	8009826 <_malloc_r+0xba>
 80097f8:	1961      	adds	r1, r4, r5
 80097fa:	42a3      	cmp	r3, r4
 80097fc:	6025      	str	r5, [r4, #0]
 80097fe:	bf18      	it	ne
 8009800:	6059      	strne	r1, [r3, #4]
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	bf08      	it	eq
 8009806:	6031      	streq	r1, [r6, #0]
 8009808:	5162      	str	r2, [r4, r5]
 800980a:	604b      	str	r3, [r1, #4]
 800980c:	4638      	mov	r0, r7
 800980e:	f104 060b 	add.w	r6, r4, #11
 8009812:	f000 fd83 	bl	800a31c <__malloc_unlock>
 8009816:	f026 0607 	bic.w	r6, r6, #7
 800981a:	1d23      	adds	r3, r4, #4
 800981c:	1af2      	subs	r2, r6, r3
 800981e:	d0b6      	beq.n	800978e <_malloc_r+0x22>
 8009820:	1b9b      	subs	r3, r3, r6
 8009822:	50a3      	str	r3, [r4, r2]
 8009824:	e7b3      	b.n	800978e <_malloc_r+0x22>
 8009826:	6862      	ldr	r2, [r4, #4]
 8009828:	42a3      	cmp	r3, r4
 800982a:	bf0c      	ite	eq
 800982c:	6032      	streq	r2, [r6, #0]
 800982e:	605a      	strne	r2, [r3, #4]
 8009830:	e7ec      	b.n	800980c <_malloc_r+0xa0>
 8009832:	4623      	mov	r3, r4
 8009834:	6864      	ldr	r4, [r4, #4]
 8009836:	e7b2      	b.n	800979e <_malloc_r+0x32>
 8009838:	4634      	mov	r4, r6
 800983a:	6876      	ldr	r6, [r6, #4]
 800983c:	e7b9      	b.n	80097b2 <_malloc_r+0x46>
 800983e:	230c      	movs	r3, #12
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	4638      	mov	r0, r7
 8009844:	f000 fd6a 	bl	800a31c <__malloc_unlock>
 8009848:	e7a1      	b.n	800978e <_malloc_r+0x22>
 800984a:	6025      	str	r5, [r4, #0]
 800984c:	e7de      	b.n	800980c <_malloc_r+0xa0>
 800984e:	bf00      	nop
 8009850:	20000d2c 	.word	0x20000d2c

08009854 <__sfputc_r>:
 8009854:	6893      	ldr	r3, [r2, #8]
 8009856:	3b01      	subs	r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	b410      	push	{r4}
 800985c:	6093      	str	r3, [r2, #8]
 800985e:	da08      	bge.n	8009872 <__sfputc_r+0x1e>
 8009860:	6994      	ldr	r4, [r2, #24]
 8009862:	42a3      	cmp	r3, r4
 8009864:	db01      	blt.n	800986a <__sfputc_r+0x16>
 8009866:	290a      	cmp	r1, #10
 8009868:	d103      	bne.n	8009872 <__sfputc_r+0x1e>
 800986a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800986e:	f000 bb33 	b.w	8009ed8 <__swbuf_r>
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	1c58      	adds	r0, r3, #1
 8009876:	6010      	str	r0, [r2, #0]
 8009878:	7019      	strb	r1, [r3, #0]
 800987a:	4608      	mov	r0, r1
 800987c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009880:	4770      	bx	lr

08009882 <__sfputs_r>:
 8009882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009884:	4606      	mov	r6, r0
 8009886:	460f      	mov	r7, r1
 8009888:	4614      	mov	r4, r2
 800988a:	18d5      	adds	r5, r2, r3
 800988c:	42ac      	cmp	r4, r5
 800988e:	d101      	bne.n	8009894 <__sfputs_r+0x12>
 8009890:	2000      	movs	r0, #0
 8009892:	e007      	b.n	80098a4 <__sfputs_r+0x22>
 8009894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009898:	463a      	mov	r2, r7
 800989a:	4630      	mov	r0, r6
 800989c:	f7ff ffda 	bl	8009854 <__sfputc_r>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d1f3      	bne.n	800988c <__sfputs_r+0xa>
 80098a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098a8 <_vfiprintf_r>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	460d      	mov	r5, r1
 80098ae:	b09d      	sub	sp, #116	; 0x74
 80098b0:	4614      	mov	r4, r2
 80098b2:	4698      	mov	r8, r3
 80098b4:	4606      	mov	r6, r0
 80098b6:	b118      	cbz	r0, 80098c0 <_vfiprintf_r+0x18>
 80098b8:	6983      	ldr	r3, [r0, #24]
 80098ba:	b90b      	cbnz	r3, 80098c0 <_vfiprintf_r+0x18>
 80098bc:	f7ff fe96 	bl	80095ec <__sinit>
 80098c0:	4b89      	ldr	r3, [pc, #548]	; (8009ae8 <_vfiprintf_r+0x240>)
 80098c2:	429d      	cmp	r5, r3
 80098c4:	d11b      	bne.n	80098fe <_vfiprintf_r+0x56>
 80098c6:	6875      	ldr	r5, [r6, #4]
 80098c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d405      	bmi.n	80098da <_vfiprintf_r+0x32>
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	059a      	lsls	r2, r3, #22
 80098d2:	d402      	bmi.n	80098da <_vfiprintf_r+0x32>
 80098d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d6:	f7ff ff27 	bl	8009728 <__retarget_lock_acquire_recursive>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	071b      	lsls	r3, r3, #28
 80098de:	d501      	bpl.n	80098e4 <_vfiprintf_r+0x3c>
 80098e0:	692b      	ldr	r3, [r5, #16]
 80098e2:	b9eb      	cbnz	r3, 8009920 <_vfiprintf_r+0x78>
 80098e4:	4629      	mov	r1, r5
 80098e6:	4630      	mov	r0, r6
 80098e8:	f000 fb5a 	bl	8009fa0 <__swsetup_r>
 80098ec:	b1c0      	cbz	r0, 8009920 <_vfiprintf_r+0x78>
 80098ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098f0:	07dc      	lsls	r4, r3, #31
 80098f2:	d50e      	bpl.n	8009912 <_vfiprintf_r+0x6a>
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f8:	b01d      	add	sp, #116	; 0x74
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	4b7b      	ldr	r3, [pc, #492]	; (8009aec <_vfiprintf_r+0x244>)
 8009900:	429d      	cmp	r5, r3
 8009902:	d101      	bne.n	8009908 <_vfiprintf_r+0x60>
 8009904:	68b5      	ldr	r5, [r6, #8]
 8009906:	e7df      	b.n	80098c8 <_vfiprintf_r+0x20>
 8009908:	4b79      	ldr	r3, [pc, #484]	; (8009af0 <_vfiprintf_r+0x248>)
 800990a:	429d      	cmp	r5, r3
 800990c:	bf08      	it	eq
 800990e:	68f5      	ldreq	r5, [r6, #12]
 8009910:	e7da      	b.n	80098c8 <_vfiprintf_r+0x20>
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	0598      	lsls	r0, r3, #22
 8009916:	d4ed      	bmi.n	80098f4 <_vfiprintf_r+0x4c>
 8009918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800991a:	f7ff ff06 	bl	800972a <__retarget_lock_release_recursive>
 800991e:	e7e9      	b.n	80098f4 <_vfiprintf_r+0x4c>
 8009920:	2300      	movs	r3, #0
 8009922:	9309      	str	r3, [sp, #36]	; 0x24
 8009924:	2320      	movs	r3, #32
 8009926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992a:	f8cd 800c 	str.w	r8, [sp, #12]
 800992e:	2330      	movs	r3, #48	; 0x30
 8009930:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009af4 <_vfiprintf_r+0x24c>
 8009934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009938:	f04f 0901 	mov.w	r9, #1
 800993c:	4623      	mov	r3, r4
 800993e:	469a      	mov	sl, r3
 8009940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009944:	b10a      	cbz	r2, 800994a <_vfiprintf_r+0xa2>
 8009946:	2a25      	cmp	r2, #37	; 0x25
 8009948:	d1f9      	bne.n	800993e <_vfiprintf_r+0x96>
 800994a:	ebba 0b04 	subs.w	fp, sl, r4
 800994e:	d00b      	beq.n	8009968 <_vfiprintf_r+0xc0>
 8009950:	465b      	mov	r3, fp
 8009952:	4622      	mov	r2, r4
 8009954:	4629      	mov	r1, r5
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ff93 	bl	8009882 <__sfputs_r>
 800995c:	3001      	adds	r0, #1
 800995e:	f000 80aa 	beq.w	8009ab6 <_vfiprintf_r+0x20e>
 8009962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009964:	445a      	add	r2, fp
 8009966:	9209      	str	r2, [sp, #36]	; 0x24
 8009968:	f89a 3000 	ldrb.w	r3, [sl]
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 80a2 	beq.w	8009ab6 <_vfiprintf_r+0x20e>
 8009972:	2300      	movs	r3, #0
 8009974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997c:	f10a 0a01 	add.w	sl, sl, #1
 8009980:	9304      	str	r3, [sp, #16]
 8009982:	9307      	str	r3, [sp, #28]
 8009984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009988:	931a      	str	r3, [sp, #104]	; 0x68
 800998a:	4654      	mov	r4, sl
 800998c:	2205      	movs	r2, #5
 800998e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009992:	4858      	ldr	r0, [pc, #352]	; (8009af4 <_vfiprintf_r+0x24c>)
 8009994:	f7f6 fbfc 	bl	8000190 <memchr>
 8009998:	9a04      	ldr	r2, [sp, #16]
 800999a:	b9d8      	cbnz	r0, 80099d4 <_vfiprintf_r+0x12c>
 800999c:	06d1      	lsls	r1, r2, #27
 800999e:	bf44      	itt	mi
 80099a0:	2320      	movmi	r3, #32
 80099a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a6:	0713      	lsls	r3, r2, #28
 80099a8:	bf44      	itt	mi
 80099aa:	232b      	movmi	r3, #43	; 0x2b
 80099ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b0:	f89a 3000 	ldrb.w	r3, [sl]
 80099b4:	2b2a      	cmp	r3, #42	; 0x2a
 80099b6:	d015      	beq.n	80099e4 <_vfiprintf_r+0x13c>
 80099b8:	9a07      	ldr	r2, [sp, #28]
 80099ba:	4654      	mov	r4, sl
 80099bc:	2000      	movs	r0, #0
 80099be:	f04f 0c0a 	mov.w	ip, #10
 80099c2:	4621      	mov	r1, r4
 80099c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c8:	3b30      	subs	r3, #48	; 0x30
 80099ca:	2b09      	cmp	r3, #9
 80099cc:	d94e      	bls.n	8009a6c <_vfiprintf_r+0x1c4>
 80099ce:	b1b0      	cbz	r0, 80099fe <_vfiprintf_r+0x156>
 80099d0:	9207      	str	r2, [sp, #28]
 80099d2:	e014      	b.n	80099fe <_vfiprintf_r+0x156>
 80099d4:	eba0 0308 	sub.w	r3, r0, r8
 80099d8:	fa09 f303 	lsl.w	r3, r9, r3
 80099dc:	4313      	orrs	r3, r2
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	46a2      	mov	sl, r4
 80099e2:	e7d2      	b.n	800998a <_vfiprintf_r+0xe2>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	1d19      	adds	r1, r3, #4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	9103      	str	r1, [sp, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bfbb      	ittet	lt
 80099f0:	425b      	neglt	r3, r3
 80099f2:	f042 0202 	orrlt.w	r2, r2, #2
 80099f6:	9307      	strge	r3, [sp, #28]
 80099f8:	9307      	strlt	r3, [sp, #28]
 80099fa:	bfb8      	it	lt
 80099fc:	9204      	strlt	r2, [sp, #16]
 80099fe:	7823      	ldrb	r3, [r4, #0]
 8009a00:	2b2e      	cmp	r3, #46	; 0x2e
 8009a02:	d10c      	bne.n	8009a1e <_vfiprintf_r+0x176>
 8009a04:	7863      	ldrb	r3, [r4, #1]
 8009a06:	2b2a      	cmp	r3, #42	; 0x2a
 8009a08:	d135      	bne.n	8009a76 <_vfiprintf_r+0x1ce>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	1d1a      	adds	r2, r3, #4
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	9203      	str	r2, [sp, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfb8      	it	lt
 8009a16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a1a:	3402      	adds	r4, #2
 8009a1c:	9305      	str	r3, [sp, #20]
 8009a1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b04 <_vfiprintf_r+0x25c>
 8009a22:	7821      	ldrb	r1, [r4, #0]
 8009a24:	2203      	movs	r2, #3
 8009a26:	4650      	mov	r0, sl
 8009a28:	f7f6 fbb2 	bl	8000190 <memchr>
 8009a2c:	b140      	cbz	r0, 8009a40 <_vfiprintf_r+0x198>
 8009a2e:	2340      	movs	r3, #64	; 0x40
 8009a30:	eba0 000a 	sub.w	r0, r0, sl
 8009a34:	fa03 f000 	lsl.w	r0, r3, r0
 8009a38:	9b04      	ldr	r3, [sp, #16]
 8009a3a:	4303      	orrs	r3, r0
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a44:	482c      	ldr	r0, [pc, #176]	; (8009af8 <_vfiprintf_r+0x250>)
 8009a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4a:	2206      	movs	r2, #6
 8009a4c:	f7f6 fba0 	bl	8000190 <memchr>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d03f      	beq.n	8009ad4 <_vfiprintf_r+0x22c>
 8009a54:	4b29      	ldr	r3, [pc, #164]	; (8009afc <_vfiprintf_r+0x254>)
 8009a56:	bb1b      	cbnz	r3, 8009aa0 <_vfiprintf_r+0x1f8>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	3307      	adds	r3, #7
 8009a5c:	f023 0307 	bic.w	r3, r3, #7
 8009a60:	3308      	adds	r3, #8
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	443b      	add	r3, r7
 8009a68:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6a:	e767      	b.n	800993c <_vfiprintf_r+0x94>
 8009a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a70:	460c      	mov	r4, r1
 8009a72:	2001      	movs	r0, #1
 8009a74:	e7a5      	b.n	80099c2 <_vfiprintf_r+0x11a>
 8009a76:	2300      	movs	r3, #0
 8009a78:	3401      	adds	r4, #1
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f04f 0c0a 	mov.w	ip, #10
 8009a82:	4620      	mov	r0, r4
 8009a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a88:	3a30      	subs	r2, #48	; 0x30
 8009a8a:	2a09      	cmp	r2, #9
 8009a8c:	d903      	bls.n	8009a96 <_vfiprintf_r+0x1ee>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0c5      	beq.n	8009a1e <_vfiprintf_r+0x176>
 8009a92:	9105      	str	r1, [sp, #20]
 8009a94:	e7c3      	b.n	8009a1e <_vfiprintf_r+0x176>
 8009a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e7f0      	b.n	8009a82 <_vfiprintf_r+0x1da>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b16      	ldr	r3, [pc, #88]	; (8009b00 <_vfiprintf_r+0x258>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f3af 8000 	nop.w
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	1c78      	adds	r0, r7, #1
 8009ab4:	d1d6      	bne.n	8009a64 <_vfiprintf_r+0x1bc>
 8009ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ab8:	07d9      	lsls	r1, r3, #31
 8009aba:	d405      	bmi.n	8009ac8 <_vfiprintf_r+0x220>
 8009abc:	89ab      	ldrh	r3, [r5, #12]
 8009abe:	059a      	lsls	r2, r3, #22
 8009ac0:	d402      	bmi.n	8009ac8 <_vfiprintf_r+0x220>
 8009ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ac4:	f7ff fe31 	bl	800972a <__retarget_lock_release_recursive>
 8009ac8:	89ab      	ldrh	r3, [r5, #12]
 8009aca:	065b      	lsls	r3, r3, #25
 8009acc:	f53f af12 	bmi.w	80098f4 <_vfiprintf_r+0x4c>
 8009ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ad2:	e711      	b.n	80098f8 <_vfiprintf_r+0x50>
 8009ad4:	ab03      	add	r3, sp, #12
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	462a      	mov	r2, r5
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <_vfiprintf_r+0x258>)
 8009adc:	a904      	add	r1, sp, #16
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f000 f880 	bl	8009be4 <_printf_i>
 8009ae4:	e7e4      	b.n	8009ab0 <_vfiprintf_r+0x208>
 8009ae6:	bf00      	nop
 8009ae8:	0800a734 	.word	0x0800a734
 8009aec:	0800a754 	.word	0x0800a754
 8009af0:	0800a714 	.word	0x0800a714
 8009af4:	0800a774 	.word	0x0800a774
 8009af8:	0800a77e 	.word	0x0800a77e
 8009afc:	00000000 	.word	0x00000000
 8009b00:	08009883 	.word	0x08009883
 8009b04:	0800a77a 	.word	0x0800a77a

08009b08 <_printf_common>:
 8009b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	4699      	mov	r9, r3
 8009b10:	688a      	ldr	r2, [r1, #8]
 8009b12:	690b      	ldr	r3, [r1, #16]
 8009b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	bfb8      	it	lt
 8009b1c:	4613      	movlt	r3, r2
 8009b1e:	6033      	str	r3, [r6, #0]
 8009b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b24:	4607      	mov	r7, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	b10a      	cbz	r2, 8009b2e <_printf_common+0x26>
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	6033      	str	r3, [r6, #0]
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	0699      	lsls	r1, r3, #26
 8009b32:	bf42      	ittt	mi
 8009b34:	6833      	ldrmi	r3, [r6, #0]
 8009b36:	3302      	addmi	r3, #2
 8009b38:	6033      	strmi	r3, [r6, #0]
 8009b3a:	6825      	ldr	r5, [r4, #0]
 8009b3c:	f015 0506 	ands.w	r5, r5, #6
 8009b40:	d106      	bne.n	8009b50 <_printf_common+0x48>
 8009b42:	f104 0a19 	add.w	sl, r4, #25
 8009b46:	68e3      	ldr	r3, [r4, #12]
 8009b48:	6832      	ldr	r2, [r6, #0]
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	42ab      	cmp	r3, r5
 8009b4e:	dc26      	bgt.n	8009b9e <_printf_common+0x96>
 8009b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b54:	1e13      	subs	r3, r2, #0
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	bf18      	it	ne
 8009b5a:	2301      	movne	r3, #1
 8009b5c:	0692      	lsls	r2, r2, #26
 8009b5e:	d42b      	bmi.n	8009bb8 <_printf_common+0xb0>
 8009b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b64:	4649      	mov	r1, r9
 8009b66:	4638      	mov	r0, r7
 8009b68:	47c0      	blx	r8
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	d01e      	beq.n	8009bac <_printf_common+0xa4>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	68e5      	ldr	r5, [r4, #12]
 8009b72:	6832      	ldr	r2, [r6, #0]
 8009b74:	f003 0306 	and.w	r3, r3, #6
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	bf08      	it	eq
 8009b7c:	1aad      	subeq	r5, r5, r2
 8009b7e:	68a3      	ldr	r3, [r4, #8]
 8009b80:	6922      	ldr	r2, [r4, #16]
 8009b82:	bf0c      	ite	eq
 8009b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b88:	2500      	movne	r5, #0
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	bfc4      	itt	gt
 8009b8e:	1a9b      	subgt	r3, r3, r2
 8009b90:	18ed      	addgt	r5, r5, r3
 8009b92:	2600      	movs	r6, #0
 8009b94:	341a      	adds	r4, #26
 8009b96:	42b5      	cmp	r5, r6
 8009b98:	d11a      	bne.n	8009bd0 <_printf_common+0xc8>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	e008      	b.n	8009bb0 <_printf_common+0xa8>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	4649      	mov	r1, r9
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	47c0      	blx	r8
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d103      	bne.n	8009bb4 <_printf_common+0xac>
 8009bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb4:	3501      	adds	r5, #1
 8009bb6:	e7c6      	b.n	8009b46 <_printf_common+0x3e>
 8009bb8:	18e1      	adds	r1, r4, r3
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	2030      	movs	r0, #48	; 0x30
 8009bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bc2:	4422      	add	r2, r4
 8009bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bcc:	3302      	adds	r3, #2
 8009bce:	e7c7      	b.n	8009b60 <_printf_common+0x58>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	47c0      	blx	r8
 8009bda:	3001      	adds	r0, #1
 8009bdc:	d0e6      	beq.n	8009bac <_printf_common+0xa4>
 8009bde:	3601      	adds	r6, #1
 8009be0:	e7d9      	b.n	8009b96 <_printf_common+0x8e>
	...

08009be4 <_printf_i>:
 8009be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009be8:	7e0f      	ldrb	r7, [r1, #24]
 8009bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bec:	2f78      	cmp	r7, #120	; 0x78
 8009bee:	4691      	mov	r9, r2
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	469a      	mov	sl, r3
 8009bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bfa:	d807      	bhi.n	8009c0c <_printf_i+0x28>
 8009bfc:	2f62      	cmp	r7, #98	; 0x62
 8009bfe:	d80a      	bhi.n	8009c16 <_printf_i+0x32>
 8009c00:	2f00      	cmp	r7, #0
 8009c02:	f000 80d8 	beq.w	8009db6 <_printf_i+0x1d2>
 8009c06:	2f58      	cmp	r7, #88	; 0x58
 8009c08:	f000 80a3 	beq.w	8009d52 <_printf_i+0x16e>
 8009c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c14:	e03a      	b.n	8009c8c <_printf_i+0xa8>
 8009c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c1a:	2b15      	cmp	r3, #21
 8009c1c:	d8f6      	bhi.n	8009c0c <_printf_i+0x28>
 8009c1e:	a101      	add	r1, pc, #4	; (adr r1, 8009c24 <_printf_i+0x40>)
 8009c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c24:	08009c7d 	.word	0x08009c7d
 8009c28:	08009c91 	.word	0x08009c91
 8009c2c:	08009c0d 	.word	0x08009c0d
 8009c30:	08009c0d 	.word	0x08009c0d
 8009c34:	08009c0d 	.word	0x08009c0d
 8009c38:	08009c0d 	.word	0x08009c0d
 8009c3c:	08009c91 	.word	0x08009c91
 8009c40:	08009c0d 	.word	0x08009c0d
 8009c44:	08009c0d 	.word	0x08009c0d
 8009c48:	08009c0d 	.word	0x08009c0d
 8009c4c:	08009c0d 	.word	0x08009c0d
 8009c50:	08009d9d 	.word	0x08009d9d
 8009c54:	08009cc1 	.word	0x08009cc1
 8009c58:	08009d7f 	.word	0x08009d7f
 8009c5c:	08009c0d 	.word	0x08009c0d
 8009c60:	08009c0d 	.word	0x08009c0d
 8009c64:	08009dbf 	.word	0x08009dbf
 8009c68:	08009c0d 	.word	0x08009c0d
 8009c6c:	08009cc1 	.word	0x08009cc1
 8009c70:	08009c0d 	.word	0x08009c0d
 8009c74:	08009c0d 	.word	0x08009c0d
 8009c78:	08009d87 	.word	0x08009d87
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	1d1a      	adds	r2, r3, #4
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	602a      	str	r2, [r5, #0]
 8009c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e0a3      	b.n	8009dd8 <_printf_i+0x1f4>
 8009c90:	6820      	ldr	r0, [r4, #0]
 8009c92:	6829      	ldr	r1, [r5, #0]
 8009c94:	0606      	lsls	r6, r0, #24
 8009c96:	f101 0304 	add.w	r3, r1, #4
 8009c9a:	d50a      	bpl.n	8009cb2 <_printf_i+0xce>
 8009c9c:	680e      	ldr	r6, [r1, #0]
 8009c9e:	602b      	str	r3, [r5, #0]
 8009ca0:	2e00      	cmp	r6, #0
 8009ca2:	da03      	bge.n	8009cac <_printf_i+0xc8>
 8009ca4:	232d      	movs	r3, #45	; 0x2d
 8009ca6:	4276      	negs	r6, r6
 8009ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cac:	485e      	ldr	r0, [pc, #376]	; (8009e28 <_printf_i+0x244>)
 8009cae:	230a      	movs	r3, #10
 8009cb0:	e019      	b.n	8009ce6 <_printf_i+0x102>
 8009cb2:	680e      	ldr	r6, [r1, #0]
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cba:	bf18      	it	ne
 8009cbc:	b236      	sxthne	r6, r6
 8009cbe:	e7ef      	b.n	8009ca0 <_printf_i+0xbc>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	6820      	ldr	r0, [r4, #0]
 8009cc4:	1d19      	adds	r1, r3, #4
 8009cc6:	6029      	str	r1, [r5, #0]
 8009cc8:	0601      	lsls	r1, r0, #24
 8009cca:	d501      	bpl.n	8009cd0 <_printf_i+0xec>
 8009ccc:	681e      	ldr	r6, [r3, #0]
 8009cce:	e002      	b.n	8009cd6 <_printf_i+0xf2>
 8009cd0:	0646      	lsls	r6, r0, #25
 8009cd2:	d5fb      	bpl.n	8009ccc <_printf_i+0xe8>
 8009cd4:	881e      	ldrh	r6, [r3, #0]
 8009cd6:	4854      	ldr	r0, [pc, #336]	; (8009e28 <_printf_i+0x244>)
 8009cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8009cda:	bf0c      	ite	eq
 8009cdc:	2308      	moveq	r3, #8
 8009cde:	230a      	movne	r3, #10
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ce6:	6865      	ldr	r5, [r4, #4]
 8009ce8:	60a5      	str	r5, [r4, #8]
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	bfa2      	ittt	ge
 8009cee:	6821      	ldrge	r1, [r4, #0]
 8009cf0:	f021 0104 	bicge.w	r1, r1, #4
 8009cf4:	6021      	strge	r1, [r4, #0]
 8009cf6:	b90e      	cbnz	r6, 8009cfc <_printf_i+0x118>
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	d04d      	beq.n	8009d98 <_printf_i+0x1b4>
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d02:	fb03 6711 	mls	r7, r3, r1, r6
 8009d06:	5dc7      	ldrb	r7, [r0, r7]
 8009d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d0c:	4637      	mov	r7, r6
 8009d0e:	42bb      	cmp	r3, r7
 8009d10:	460e      	mov	r6, r1
 8009d12:	d9f4      	bls.n	8009cfe <_printf_i+0x11a>
 8009d14:	2b08      	cmp	r3, #8
 8009d16:	d10b      	bne.n	8009d30 <_printf_i+0x14c>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	07de      	lsls	r6, r3, #31
 8009d1c:	d508      	bpl.n	8009d30 <_printf_i+0x14c>
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	6861      	ldr	r1, [r4, #4]
 8009d22:	4299      	cmp	r1, r3
 8009d24:	bfde      	ittt	le
 8009d26:	2330      	movle	r3, #48	; 0x30
 8009d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d30:	1b52      	subs	r2, r2, r5
 8009d32:	6122      	str	r2, [r4, #16]
 8009d34:	f8cd a000 	str.w	sl, [sp]
 8009d38:	464b      	mov	r3, r9
 8009d3a:	aa03      	add	r2, sp, #12
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7ff fee2 	bl	8009b08 <_printf_common>
 8009d44:	3001      	adds	r0, #1
 8009d46:	d14c      	bne.n	8009de2 <_printf_i+0x1fe>
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d4c:	b004      	add	sp, #16
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	4835      	ldr	r0, [pc, #212]	; (8009e28 <_printf_i+0x244>)
 8009d54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d58:	6829      	ldr	r1, [r5, #0]
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d60:	6029      	str	r1, [r5, #0]
 8009d62:	061d      	lsls	r5, r3, #24
 8009d64:	d514      	bpl.n	8009d90 <_printf_i+0x1ac>
 8009d66:	07df      	lsls	r7, r3, #31
 8009d68:	bf44      	itt	mi
 8009d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d6e:	6023      	strmi	r3, [r4, #0]
 8009d70:	b91e      	cbnz	r6, 8009d7a <_printf_i+0x196>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	f023 0320 	bic.w	r3, r3, #32
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	2310      	movs	r3, #16
 8009d7c:	e7b0      	b.n	8009ce0 <_printf_i+0xfc>
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	f043 0320 	orr.w	r3, r3, #32
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	2378      	movs	r3, #120	; 0x78
 8009d88:	4828      	ldr	r0, [pc, #160]	; (8009e2c <_printf_i+0x248>)
 8009d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d8e:	e7e3      	b.n	8009d58 <_printf_i+0x174>
 8009d90:	0659      	lsls	r1, r3, #25
 8009d92:	bf48      	it	mi
 8009d94:	b2b6      	uxthmi	r6, r6
 8009d96:	e7e6      	b.n	8009d66 <_printf_i+0x182>
 8009d98:	4615      	mov	r5, r2
 8009d9a:	e7bb      	b.n	8009d14 <_printf_i+0x130>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	6826      	ldr	r6, [r4, #0]
 8009da0:	6961      	ldr	r1, [r4, #20]
 8009da2:	1d18      	adds	r0, r3, #4
 8009da4:	6028      	str	r0, [r5, #0]
 8009da6:	0635      	lsls	r5, r6, #24
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	d501      	bpl.n	8009db0 <_printf_i+0x1cc>
 8009dac:	6019      	str	r1, [r3, #0]
 8009dae:	e002      	b.n	8009db6 <_printf_i+0x1d2>
 8009db0:	0670      	lsls	r0, r6, #25
 8009db2:	d5fb      	bpl.n	8009dac <_printf_i+0x1c8>
 8009db4:	8019      	strh	r1, [r3, #0]
 8009db6:	2300      	movs	r3, #0
 8009db8:	6123      	str	r3, [r4, #16]
 8009dba:	4615      	mov	r5, r2
 8009dbc:	e7ba      	b.n	8009d34 <_printf_i+0x150>
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	1d1a      	adds	r2, r3, #4
 8009dc2:	602a      	str	r2, [r5, #0]
 8009dc4:	681d      	ldr	r5, [r3, #0]
 8009dc6:	6862      	ldr	r2, [r4, #4]
 8009dc8:	2100      	movs	r1, #0
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f7f6 f9e0 	bl	8000190 <memchr>
 8009dd0:	b108      	cbz	r0, 8009dd6 <_printf_i+0x1f2>
 8009dd2:	1b40      	subs	r0, r0, r5
 8009dd4:	6060      	str	r0, [r4, #4]
 8009dd6:	6863      	ldr	r3, [r4, #4]
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de0:	e7a8      	b.n	8009d34 <_printf_i+0x150>
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	462a      	mov	r2, r5
 8009de6:	4649      	mov	r1, r9
 8009de8:	4640      	mov	r0, r8
 8009dea:	47d0      	blx	sl
 8009dec:	3001      	adds	r0, #1
 8009dee:	d0ab      	beq.n	8009d48 <_printf_i+0x164>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	079b      	lsls	r3, r3, #30
 8009df4:	d413      	bmi.n	8009e1e <_printf_i+0x23a>
 8009df6:	68e0      	ldr	r0, [r4, #12]
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	4298      	cmp	r0, r3
 8009dfc:	bfb8      	it	lt
 8009dfe:	4618      	movlt	r0, r3
 8009e00:	e7a4      	b.n	8009d4c <_printf_i+0x168>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4632      	mov	r2, r6
 8009e06:	4649      	mov	r1, r9
 8009e08:	4640      	mov	r0, r8
 8009e0a:	47d0      	blx	sl
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d09b      	beq.n	8009d48 <_printf_i+0x164>
 8009e10:	3501      	adds	r5, #1
 8009e12:	68e3      	ldr	r3, [r4, #12]
 8009e14:	9903      	ldr	r1, [sp, #12]
 8009e16:	1a5b      	subs	r3, r3, r1
 8009e18:	42ab      	cmp	r3, r5
 8009e1a:	dcf2      	bgt.n	8009e02 <_printf_i+0x21e>
 8009e1c:	e7eb      	b.n	8009df6 <_printf_i+0x212>
 8009e1e:	2500      	movs	r5, #0
 8009e20:	f104 0619 	add.w	r6, r4, #25
 8009e24:	e7f5      	b.n	8009e12 <_printf_i+0x22e>
 8009e26:	bf00      	nop
 8009e28:	0800a785 	.word	0x0800a785
 8009e2c:	0800a796 	.word	0x0800a796

08009e30 <_sbrk_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_sbrk_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f8 f9ec 	bl	8002218 <_sbrk>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_sbrk_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_sbrk_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	20000d34 	.word	0x20000d34

08009e50 <__sread>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	f000 fab2 	bl	800a3c0 <_read_r>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	bfab      	itete	ge
 8009e60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e62:	89a3      	ldrhlt	r3, [r4, #12]
 8009e64:	181b      	addge	r3, r3, r0
 8009e66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6a:	bfac      	ite	ge
 8009e6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e6e:	81a3      	strhlt	r3, [r4, #12]
 8009e70:	bd10      	pop	{r4, pc}

08009e72 <__swrite>:
 8009e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	461f      	mov	r7, r3
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	05db      	lsls	r3, r3, #23
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4616      	mov	r6, r2
 8009e82:	d505      	bpl.n	8009e90 <__swrite+0x1e>
 8009e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e88:	2302      	movs	r3, #2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f000 f9c8 	bl	800a220 <_lseek_r>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	f000 b869 	b.w	8009f7c <_write_r>

08009eaa <__sseek>:
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	460c      	mov	r4, r1
 8009eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb2:	f000 f9b5 	bl	800a220 <_lseek_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	bf15      	itete	ne
 8009ebc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ebe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ec6:	81a3      	strheq	r3, [r4, #12]
 8009ec8:	bf18      	it	ne
 8009eca:	81a3      	strhne	r3, [r4, #12]
 8009ecc:	bd10      	pop	{r4, pc}

08009ece <__sclose>:
 8009ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed2:	f000 b8d3 	b.w	800a07c <_close_r>
	...

08009ed8 <__swbuf_r>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	460e      	mov	r6, r1
 8009edc:	4614      	mov	r4, r2
 8009ede:	4605      	mov	r5, r0
 8009ee0:	b118      	cbz	r0, 8009eea <__swbuf_r+0x12>
 8009ee2:	6983      	ldr	r3, [r0, #24]
 8009ee4:	b90b      	cbnz	r3, 8009eea <__swbuf_r+0x12>
 8009ee6:	f7ff fb81 	bl	80095ec <__sinit>
 8009eea:	4b21      	ldr	r3, [pc, #132]	; (8009f70 <__swbuf_r+0x98>)
 8009eec:	429c      	cmp	r4, r3
 8009eee:	d12b      	bne.n	8009f48 <__swbuf_r+0x70>
 8009ef0:	686c      	ldr	r4, [r5, #4]
 8009ef2:	69a3      	ldr	r3, [r4, #24]
 8009ef4:	60a3      	str	r3, [r4, #8]
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	071a      	lsls	r2, r3, #28
 8009efa:	d52f      	bpl.n	8009f5c <__swbuf_r+0x84>
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	b36b      	cbz	r3, 8009f5c <__swbuf_r+0x84>
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	6820      	ldr	r0, [r4, #0]
 8009f04:	1ac0      	subs	r0, r0, r3
 8009f06:	6963      	ldr	r3, [r4, #20]
 8009f08:	b2f6      	uxtb	r6, r6
 8009f0a:	4283      	cmp	r3, r0
 8009f0c:	4637      	mov	r7, r6
 8009f0e:	dc04      	bgt.n	8009f1a <__swbuf_r+0x42>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 f948 	bl	800a1a8 <_fflush_r>
 8009f18:	bb30      	cbnz	r0, 8009f68 <__swbuf_r+0x90>
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	60a3      	str	r3, [r4, #8]
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	6022      	str	r2, [r4, #0]
 8009f26:	701e      	strb	r6, [r3, #0]
 8009f28:	6963      	ldr	r3, [r4, #20]
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	4283      	cmp	r3, r0
 8009f2e:	d004      	beq.n	8009f3a <__swbuf_r+0x62>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	07db      	lsls	r3, r3, #31
 8009f34:	d506      	bpl.n	8009f44 <__swbuf_r+0x6c>
 8009f36:	2e0a      	cmp	r6, #10
 8009f38:	d104      	bne.n	8009f44 <__swbuf_r+0x6c>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	f000 f933 	bl	800a1a8 <_fflush_r>
 8009f42:	b988      	cbnz	r0, 8009f68 <__swbuf_r+0x90>
 8009f44:	4638      	mov	r0, r7
 8009f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <__swbuf_r+0x9c>)
 8009f4a:	429c      	cmp	r4, r3
 8009f4c:	d101      	bne.n	8009f52 <__swbuf_r+0x7a>
 8009f4e:	68ac      	ldr	r4, [r5, #8]
 8009f50:	e7cf      	b.n	8009ef2 <__swbuf_r+0x1a>
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <__swbuf_r+0xa0>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	bf08      	it	eq
 8009f58:	68ec      	ldreq	r4, [r5, #12]
 8009f5a:	e7ca      	b.n	8009ef2 <__swbuf_r+0x1a>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f81e 	bl	8009fa0 <__swsetup_r>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0cb      	beq.n	8009f00 <__swbuf_r+0x28>
 8009f68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f6c:	e7ea      	b.n	8009f44 <__swbuf_r+0x6c>
 8009f6e:	bf00      	nop
 8009f70:	0800a734 	.word	0x0800a734
 8009f74:	0800a754 	.word	0x0800a754
 8009f78:	0800a714 	.word	0x0800a714

08009f7c <_write_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d07      	ldr	r5, [pc, #28]	; (8009f9c <_write_r+0x20>)
 8009f80:	4604      	mov	r4, r0
 8009f82:	4608      	mov	r0, r1
 8009f84:	4611      	mov	r1, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7f8 f8f3 	bl	8002176 <_write>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_write_r+0x1e>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_write_r+0x1e>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	20000d34 	.word	0x20000d34

08009fa0 <__swsetup_r>:
 8009fa0:	4b32      	ldr	r3, [pc, #200]	; (800a06c <__swsetup_r+0xcc>)
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	681d      	ldr	r5, [r3, #0]
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	b125      	cbz	r5, 8009fb6 <__swsetup_r+0x16>
 8009fac:	69ab      	ldr	r3, [r5, #24]
 8009fae:	b913      	cbnz	r3, 8009fb6 <__swsetup_r+0x16>
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f7ff fb1b 	bl	80095ec <__sinit>
 8009fb6:	4b2e      	ldr	r3, [pc, #184]	; (800a070 <__swsetup_r+0xd0>)
 8009fb8:	429c      	cmp	r4, r3
 8009fba:	d10f      	bne.n	8009fdc <__swsetup_r+0x3c>
 8009fbc:	686c      	ldr	r4, [r5, #4]
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fc4:	0719      	lsls	r1, r3, #28
 8009fc6:	d42c      	bmi.n	800a022 <__swsetup_r+0x82>
 8009fc8:	06dd      	lsls	r5, r3, #27
 8009fca:	d411      	bmi.n	8009ff0 <__swsetup_r+0x50>
 8009fcc:	2309      	movs	r3, #9
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fda:	e03e      	b.n	800a05a <__swsetup_r+0xba>
 8009fdc:	4b25      	ldr	r3, [pc, #148]	; (800a074 <__swsetup_r+0xd4>)
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	d101      	bne.n	8009fe6 <__swsetup_r+0x46>
 8009fe2:	68ac      	ldr	r4, [r5, #8]
 8009fe4:	e7eb      	b.n	8009fbe <__swsetup_r+0x1e>
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <__swsetup_r+0xd8>)
 8009fe8:	429c      	cmp	r4, r3
 8009fea:	bf08      	it	eq
 8009fec:	68ec      	ldreq	r4, [r5, #12]
 8009fee:	e7e6      	b.n	8009fbe <__swsetup_r+0x1e>
 8009ff0:	0758      	lsls	r0, r3, #29
 8009ff2:	d512      	bpl.n	800a01a <__swsetup_r+0x7a>
 8009ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ff6:	b141      	cbz	r1, 800a00a <__swsetup_r+0x6a>
 8009ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ffc:	4299      	cmp	r1, r3
 8009ffe:	d002      	beq.n	800a006 <__swsetup_r+0x66>
 800a000:	4630      	mov	r0, r6
 800a002:	f000 f991 	bl	800a328 <_free_r>
 800a006:	2300      	movs	r3, #0
 800a008:	6363      	str	r3, [r4, #52]	; 0x34
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	2300      	movs	r3, #0
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f043 0308 	orr.w	r3, r3, #8
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	b94b      	cbnz	r3, 800a03a <__swsetup_r+0x9a>
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a030:	d003      	beq.n	800a03a <__swsetup_r+0x9a>
 800a032:	4621      	mov	r1, r4
 800a034:	4630      	mov	r0, r6
 800a036:	f000 f92b 	bl	800a290 <__smakebuf_r>
 800a03a:	89a0      	ldrh	r0, [r4, #12]
 800a03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a040:	f010 0301 	ands.w	r3, r0, #1
 800a044:	d00a      	beq.n	800a05c <__swsetup_r+0xbc>
 800a046:	2300      	movs	r3, #0
 800a048:	60a3      	str	r3, [r4, #8]
 800a04a:	6963      	ldr	r3, [r4, #20]
 800a04c:	425b      	negs	r3, r3
 800a04e:	61a3      	str	r3, [r4, #24]
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	b943      	cbnz	r3, 800a066 <__swsetup_r+0xc6>
 800a054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a058:	d1ba      	bne.n	8009fd0 <__swsetup_r+0x30>
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	0781      	lsls	r1, r0, #30
 800a05e:	bf58      	it	pl
 800a060:	6963      	ldrpl	r3, [r4, #20]
 800a062:	60a3      	str	r3, [r4, #8]
 800a064:	e7f4      	b.n	800a050 <__swsetup_r+0xb0>
 800a066:	2000      	movs	r0, #0
 800a068:	e7f7      	b.n	800a05a <__swsetup_r+0xba>
 800a06a:	bf00      	nop
 800a06c:	20000028 	.word	0x20000028
 800a070:	0800a734 	.word	0x0800a734
 800a074:	0800a754 	.word	0x0800a754
 800a078:	0800a714 	.word	0x0800a714

0800a07c <_close_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	; (800a098 <_close_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7f8 f891 	bl	80021ae <_close>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_close_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_close_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20000d34 	.word	0x20000d34

0800a09c <__sflush_r>:
 800a09c:	898a      	ldrh	r2, [r1, #12]
 800a09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	0710      	lsls	r0, r2, #28
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	d458      	bmi.n	800a15c <__sflush_r+0xc0>
 800a0aa:	684b      	ldr	r3, [r1, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dc05      	bgt.n	800a0bc <__sflush_r+0x20>
 800a0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dc02      	bgt.n	800a0bc <__sflush_r+0x20>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	d0f9      	beq.n	800a0b6 <__sflush_r+0x1a>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0c8:	682f      	ldr	r7, [r5, #0]
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	d032      	beq.n	800a134 <__sflush_r+0x98>
 800a0ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	075a      	lsls	r2, r3, #29
 800a0d4:	d505      	bpl.n	800a0e2 <__sflush_r+0x46>
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	1ac0      	subs	r0, r0, r3
 800a0da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0dc:	b10b      	cbz	r3, 800a0e2 <__sflush_r+0x46>
 800a0de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e0:	1ac0      	subs	r0, r0, r3
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0e8:	6a21      	ldr	r1, [r4, #32]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b0      	blx	r6
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	d106      	bne.n	800a102 <__sflush_r+0x66>
 800a0f4:	6829      	ldr	r1, [r5, #0]
 800a0f6:	291d      	cmp	r1, #29
 800a0f8:	d82c      	bhi.n	800a154 <__sflush_r+0xb8>
 800a0fa:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <__sflush_r+0x108>)
 800a0fc:	40ca      	lsrs	r2, r1
 800a0fe:	07d6      	lsls	r6, r2, #31
 800a100:	d528      	bpl.n	800a154 <__sflush_r+0xb8>
 800a102:	2200      	movs	r2, #0
 800a104:	6062      	str	r2, [r4, #4]
 800a106:	04d9      	lsls	r1, r3, #19
 800a108:	6922      	ldr	r2, [r4, #16]
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	d504      	bpl.n	800a118 <__sflush_r+0x7c>
 800a10e:	1c42      	adds	r2, r0, #1
 800a110:	d101      	bne.n	800a116 <__sflush_r+0x7a>
 800a112:	682b      	ldr	r3, [r5, #0]
 800a114:	b903      	cbnz	r3, 800a118 <__sflush_r+0x7c>
 800a116:	6560      	str	r0, [r4, #84]	; 0x54
 800a118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	d0ca      	beq.n	800a0b6 <__sflush_r+0x1a>
 800a120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <__sflush_r+0x92>
 800a128:	4628      	mov	r0, r5
 800a12a:	f000 f8fd 	bl	800a328 <_free_r>
 800a12e:	2000      	movs	r0, #0
 800a130:	6360      	str	r0, [r4, #52]	; 0x34
 800a132:	e7c1      	b.n	800a0b8 <__sflush_r+0x1c>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	2301      	movs	r3, #1
 800a138:	4628      	mov	r0, r5
 800a13a:	47b0      	blx	r6
 800a13c:	1c41      	adds	r1, r0, #1
 800a13e:	d1c7      	bne.n	800a0d0 <__sflush_r+0x34>
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c4      	beq.n	800a0d0 <__sflush_r+0x34>
 800a146:	2b1d      	cmp	r3, #29
 800a148:	d001      	beq.n	800a14e <__sflush_r+0xb2>
 800a14a:	2b16      	cmp	r3, #22
 800a14c:	d101      	bne.n	800a152 <__sflush_r+0xb6>
 800a14e:	602f      	str	r7, [r5, #0]
 800a150:	e7b1      	b.n	800a0b6 <__sflush_r+0x1a>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a158:	81a3      	strh	r3, [r4, #12]
 800a15a:	e7ad      	b.n	800a0b8 <__sflush_r+0x1c>
 800a15c:	690f      	ldr	r7, [r1, #16]
 800a15e:	2f00      	cmp	r7, #0
 800a160:	d0a9      	beq.n	800a0b6 <__sflush_r+0x1a>
 800a162:	0793      	lsls	r3, r2, #30
 800a164:	680e      	ldr	r6, [r1, #0]
 800a166:	bf08      	it	eq
 800a168:	694b      	ldreq	r3, [r1, #20]
 800a16a:	600f      	str	r7, [r1, #0]
 800a16c:	bf18      	it	ne
 800a16e:	2300      	movne	r3, #0
 800a170:	eba6 0807 	sub.w	r8, r6, r7
 800a174:	608b      	str	r3, [r1, #8]
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	dd9c      	ble.n	800a0b6 <__sflush_r+0x1a>
 800a17c:	6a21      	ldr	r1, [r4, #32]
 800a17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a180:	4643      	mov	r3, r8
 800a182:	463a      	mov	r2, r7
 800a184:	4628      	mov	r0, r5
 800a186:	47b0      	blx	r6
 800a188:	2800      	cmp	r0, #0
 800a18a:	dc06      	bgt.n	800a19a <__sflush_r+0xfe>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a198:	e78e      	b.n	800a0b8 <__sflush_r+0x1c>
 800a19a:	4407      	add	r7, r0
 800a19c:	eba8 0800 	sub.w	r8, r8, r0
 800a1a0:	e7e9      	b.n	800a176 <__sflush_r+0xda>
 800a1a2:	bf00      	nop
 800a1a4:	20400001 	.word	0x20400001

0800a1a8 <_fflush_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	690b      	ldr	r3, [r1, #16]
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	b913      	cbnz	r3, 800a1b8 <_fflush_r+0x10>
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	b118      	cbz	r0, 800a1c2 <_fflush_r+0x1a>
 800a1ba:	6983      	ldr	r3, [r0, #24]
 800a1bc:	b90b      	cbnz	r3, 800a1c2 <_fflush_r+0x1a>
 800a1be:	f7ff fa15 	bl	80095ec <__sinit>
 800a1c2:	4b14      	ldr	r3, [pc, #80]	; (800a214 <_fflush_r+0x6c>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	d11b      	bne.n	800a200 <_fflush_r+0x58>
 800a1c8:	686c      	ldr	r4, [r5, #4]
 800a1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d0ef      	beq.n	800a1b2 <_fflush_r+0xa>
 800a1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1d4:	07d0      	lsls	r0, r2, #31
 800a1d6:	d404      	bmi.n	800a1e2 <_fflush_r+0x3a>
 800a1d8:	0599      	lsls	r1, r3, #22
 800a1da:	d402      	bmi.n	800a1e2 <_fflush_r+0x3a>
 800a1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1de:	f7ff faa3 	bl	8009728 <__retarget_lock_acquire_recursive>
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	f7ff ff59 	bl	800a09c <__sflush_r>
 800a1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ec:	07da      	lsls	r2, r3, #31
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	d4e0      	bmi.n	800a1b4 <_fflush_r+0xc>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	d4dd      	bmi.n	800a1b4 <_fflush_r+0xc>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1fa:	f7ff fa96 	bl	800972a <__retarget_lock_release_recursive>
 800a1fe:	e7d9      	b.n	800a1b4 <_fflush_r+0xc>
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <_fflush_r+0x70>)
 800a202:	429c      	cmp	r4, r3
 800a204:	d101      	bne.n	800a20a <_fflush_r+0x62>
 800a206:	68ac      	ldr	r4, [r5, #8]
 800a208:	e7df      	b.n	800a1ca <_fflush_r+0x22>
 800a20a:	4b04      	ldr	r3, [pc, #16]	; (800a21c <_fflush_r+0x74>)
 800a20c:	429c      	cmp	r4, r3
 800a20e:	bf08      	it	eq
 800a210:	68ec      	ldreq	r4, [r5, #12]
 800a212:	e7da      	b.n	800a1ca <_fflush_r+0x22>
 800a214:	0800a734 	.word	0x0800a734
 800a218:	0800a754 	.word	0x0800a754
 800a21c:	0800a714 	.word	0x0800a714

0800a220 <_lseek_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d07      	ldr	r5, [pc, #28]	; (800a240 <_lseek_r+0x20>)
 800a224:	4604      	mov	r4, r0
 800a226:	4608      	mov	r0, r1
 800a228:	4611      	mov	r1, r2
 800a22a:	2200      	movs	r2, #0
 800a22c:	602a      	str	r2, [r5, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	f7f7 ffe4 	bl	80021fc <_lseek>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_lseek_r+0x1e>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_lseek_r+0x1e>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20000d34 	.word	0x20000d34

0800a244 <__swhatbuf_r>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	460e      	mov	r6, r1
 800a248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24c:	2900      	cmp	r1, #0
 800a24e:	b096      	sub	sp, #88	; 0x58
 800a250:	4614      	mov	r4, r2
 800a252:	461d      	mov	r5, r3
 800a254:	da08      	bge.n	800a268 <__swhatbuf_r+0x24>
 800a256:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	602a      	str	r2, [r5, #0]
 800a25e:	061a      	lsls	r2, r3, #24
 800a260:	d410      	bmi.n	800a284 <__swhatbuf_r+0x40>
 800a262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a266:	e00e      	b.n	800a286 <__swhatbuf_r+0x42>
 800a268:	466a      	mov	r2, sp
 800a26a:	f000 f8bb 	bl	800a3e4 <_fstat_r>
 800a26e:	2800      	cmp	r0, #0
 800a270:	dbf1      	blt.n	800a256 <__swhatbuf_r+0x12>
 800a272:	9a01      	ldr	r2, [sp, #4]
 800a274:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a278:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a27c:	425a      	negs	r2, r3
 800a27e:	415a      	adcs	r2, r3
 800a280:	602a      	str	r2, [r5, #0]
 800a282:	e7ee      	b.n	800a262 <__swhatbuf_r+0x1e>
 800a284:	2340      	movs	r3, #64	; 0x40
 800a286:	2000      	movs	r0, #0
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	b016      	add	sp, #88	; 0x58
 800a28c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a290 <__smakebuf_r>:
 800a290:	898b      	ldrh	r3, [r1, #12]
 800a292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a294:	079d      	lsls	r5, r3, #30
 800a296:	4606      	mov	r6, r0
 800a298:	460c      	mov	r4, r1
 800a29a:	d507      	bpl.n	800a2ac <__smakebuf_r+0x1c>
 800a29c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	6123      	str	r3, [r4, #16]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	6163      	str	r3, [r4, #20]
 800a2a8:	b002      	add	sp, #8
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	ab01      	add	r3, sp, #4
 800a2ae:	466a      	mov	r2, sp
 800a2b0:	f7ff ffc8 	bl	800a244 <__swhatbuf_r>
 800a2b4:	9900      	ldr	r1, [sp, #0]
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7ff fa57 	bl	800976c <_malloc_r>
 800a2be:	b948      	cbnz	r0, 800a2d4 <__smakebuf_r+0x44>
 800a2c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c4:	059a      	lsls	r2, r3, #22
 800a2c6:	d4ef      	bmi.n	800a2a8 <__smakebuf_r+0x18>
 800a2c8:	f023 0303 	bic.w	r3, r3, #3
 800a2cc:	f043 0302 	orr.w	r3, r3, #2
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	e7e3      	b.n	800a29c <__smakebuf_r+0xc>
 800a2d4:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <__smakebuf_r+0x7c>)
 800a2d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	6020      	str	r0, [r4, #0]
 800a2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	9b00      	ldr	r3, [sp, #0]
 800a2e4:	6163      	str	r3, [r4, #20]
 800a2e6:	9b01      	ldr	r3, [sp, #4]
 800a2e8:	6120      	str	r0, [r4, #16]
 800a2ea:	b15b      	cbz	r3, 800a304 <__smakebuf_r+0x74>
 800a2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f000 f889 	bl	800a408 <_isatty_r>
 800a2f6:	b128      	cbz	r0, 800a304 <__smakebuf_r+0x74>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	f023 0303 	bic.w	r3, r3, #3
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	81a3      	strh	r3, [r4, #12]
 800a304:	89a0      	ldrh	r0, [r4, #12]
 800a306:	4305      	orrs	r5, r0
 800a308:	81a5      	strh	r5, [r4, #12]
 800a30a:	e7cd      	b.n	800a2a8 <__smakebuf_r+0x18>
 800a30c:	08009585 	.word	0x08009585

0800a310 <__malloc_lock>:
 800a310:	4801      	ldr	r0, [pc, #4]	; (800a318 <__malloc_lock+0x8>)
 800a312:	f7ff ba09 	b.w	8009728 <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	20000d28 	.word	0x20000d28

0800a31c <__malloc_unlock>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__malloc_unlock+0x8>)
 800a31e:	f7ff ba04 	b.w	800972a <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	20000d28 	.word	0x20000d28

0800a328 <_free_r>:
 800a328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a32a:	2900      	cmp	r1, #0
 800a32c:	d044      	beq.n	800a3b8 <_free_r+0x90>
 800a32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a332:	9001      	str	r0, [sp, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f1a1 0404 	sub.w	r4, r1, #4
 800a33a:	bfb8      	it	lt
 800a33c:	18e4      	addlt	r4, r4, r3
 800a33e:	f7ff ffe7 	bl	800a310 <__malloc_lock>
 800a342:	4a1e      	ldr	r2, [pc, #120]	; (800a3bc <_free_r+0x94>)
 800a344:	9801      	ldr	r0, [sp, #4]
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	b933      	cbnz	r3, 800a358 <_free_r+0x30>
 800a34a:	6063      	str	r3, [r4, #4]
 800a34c:	6014      	str	r4, [r2, #0]
 800a34e:	b003      	add	sp, #12
 800a350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a354:	f7ff bfe2 	b.w	800a31c <__malloc_unlock>
 800a358:	42a3      	cmp	r3, r4
 800a35a:	d908      	bls.n	800a36e <_free_r+0x46>
 800a35c:	6825      	ldr	r5, [r4, #0]
 800a35e:	1961      	adds	r1, r4, r5
 800a360:	428b      	cmp	r3, r1
 800a362:	bf01      	itttt	eq
 800a364:	6819      	ldreq	r1, [r3, #0]
 800a366:	685b      	ldreq	r3, [r3, #4]
 800a368:	1949      	addeq	r1, r1, r5
 800a36a:	6021      	streq	r1, [r4, #0]
 800a36c:	e7ed      	b.n	800a34a <_free_r+0x22>
 800a36e:	461a      	mov	r2, r3
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	b10b      	cbz	r3, 800a378 <_free_r+0x50>
 800a374:	42a3      	cmp	r3, r4
 800a376:	d9fa      	bls.n	800a36e <_free_r+0x46>
 800a378:	6811      	ldr	r1, [r2, #0]
 800a37a:	1855      	adds	r5, r2, r1
 800a37c:	42a5      	cmp	r5, r4
 800a37e:	d10b      	bne.n	800a398 <_free_r+0x70>
 800a380:	6824      	ldr	r4, [r4, #0]
 800a382:	4421      	add	r1, r4
 800a384:	1854      	adds	r4, r2, r1
 800a386:	42a3      	cmp	r3, r4
 800a388:	6011      	str	r1, [r2, #0]
 800a38a:	d1e0      	bne.n	800a34e <_free_r+0x26>
 800a38c:	681c      	ldr	r4, [r3, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	6053      	str	r3, [r2, #4]
 800a392:	4421      	add	r1, r4
 800a394:	6011      	str	r1, [r2, #0]
 800a396:	e7da      	b.n	800a34e <_free_r+0x26>
 800a398:	d902      	bls.n	800a3a0 <_free_r+0x78>
 800a39a:	230c      	movs	r3, #12
 800a39c:	6003      	str	r3, [r0, #0]
 800a39e:	e7d6      	b.n	800a34e <_free_r+0x26>
 800a3a0:	6825      	ldr	r5, [r4, #0]
 800a3a2:	1961      	adds	r1, r4, r5
 800a3a4:	428b      	cmp	r3, r1
 800a3a6:	bf04      	itt	eq
 800a3a8:	6819      	ldreq	r1, [r3, #0]
 800a3aa:	685b      	ldreq	r3, [r3, #4]
 800a3ac:	6063      	str	r3, [r4, #4]
 800a3ae:	bf04      	itt	eq
 800a3b0:	1949      	addeq	r1, r1, r5
 800a3b2:	6021      	streq	r1, [r4, #0]
 800a3b4:	6054      	str	r4, [r2, #4]
 800a3b6:	e7ca      	b.n	800a34e <_free_r+0x26>
 800a3b8:	b003      	add	sp, #12
 800a3ba:	bd30      	pop	{r4, r5, pc}
 800a3bc:	20000d2c 	.word	0x20000d2c

0800a3c0 <_read_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	; (800a3e0 <_read_r+0x20>)
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	602a      	str	r2, [r5, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f7f7 feb4 	bl	800213c <_read>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_read_r+0x1e>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_read_r+0x1e>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	20000d34 	.word	0x20000d34

0800a3e4 <_fstat_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d07      	ldr	r5, [pc, #28]	; (800a404 <_fstat_r+0x20>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	f7f7 fee8 	bl	80021c6 <_fstat>
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	d102      	bne.n	800a400 <_fstat_r+0x1c>
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	b103      	cbz	r3, 800a400 <_fstat_r+0x1c>
 800a3fe:	6023      	str	r3, [r4, #0]
 800a400:	bd38      	pop	{r3, r4, r5, pc}
 800a402:	bf00      	nop
 800a404:	20000d34 	.word	0x20000d34

0800a408 <_isatty_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d06      	ldr	r5, [pc, #24]	; (800a424 <_isatty_r+0x1c>)
 800a40c:	2300      	movs	r3, #0
 800a40e:	4604      	mov	r4, r0
 800a410:	4608      	mov	r0, r1
 800a412:	602b      	str	r3, [r5, #0]
 800a414:	f7f7 fee7 	bl	80021e6 <_isatty>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_isatty_r+0x1a>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_isatty_r+0x1a>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	20000d34 	.word	0x20000d34

0800a428 <_init>:
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	bf00      	nop
 800a42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42e:	bc08      	pop	{r3}
 800a430:	469e      	mov	lr, r3
 800a432:	4770      	bx	lr

0800a434 <_fini>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	bf00      	nop
 800a438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43a:	bc08      	pop	{r3}
 800a43c:	469e      	mov	lr, r3
 800a43e:	4770      	bx	lr
