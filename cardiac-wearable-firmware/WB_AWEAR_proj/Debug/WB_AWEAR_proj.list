
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b930  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be84  0800be84  0001be84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800be8c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800bf10  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800c793  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800c7c8  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000530  2000095c  0800c7d9  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e8c  0800c7d9  00020e8c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00034eba  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006559  00000000  00000000  00055843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e68  00000000  00000000  0005bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002b90  00000000  00000000  0005ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e2cb  00000000  00000000  00061798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033e29  00000000  00000000  0008fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff1f3  00000000  00000000  000c388c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001c2a7f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cb00  00000000  00000000  001c2ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ba58 	.word	0x0800ba58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800ba58 	.word	0x0800ba58

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	80da      	strh	r2, [r3, #6]
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000550:	f107 030e 	add.w	r3, r7, #14
 8000554:	461a      	mov	r2, r3
 8000556:	210f      	movs	r1, #15
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f8a3 	bl	80006a4 <read>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <BH1790GLC_init+0x38>
		return ERR_MID_VAL;
 8000568:	230a      	movs	r3, #10
 800056a:	e04a      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2be0      	cmp	r3, #224	; 0xe0
 8000570:	d001      	beq.n	8000576 <BH1790GLC_init+0x42>
		return ERR_MID_VAL;
 8000572:	230a      	movs	r3, #10
 8000574:	e045      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000576:	f107 030e 	add.w	r3, r7, #14
 800057a:	461a      	mov	r2, r3
 800057c:	2110      	movs	r1, #16
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f890 	bl	80006a4 <read>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <BH1790GLC_init+0x5e>
		return ERR_PID_VAL;
 800058e:	230b      	movs	r3, #11
 8000590:	e037      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b0d      	cmp	r3, #13
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		return ERR_PID_VAL;
 8000598:	230b      	movs	r3, #11
 800059a:	e032      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800059c:	2382      	movs	r3, #130	; 0x82
 800059e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005a0:	230c      	movs	r3, #12
 80005a2:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	2141      	movs	r1, #65	; 0x41
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f855 	bl	8000660 <write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <BH1790GLC_init+0x90>
		return ERR_MEAS_CONTROL1;
 80005c0:	2314      	movs	r3, #20
 80005c2:	e01e      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	3301      	adds	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2142      	movs	r1, #66	; 0x42
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f846 	bl	8000660 <write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BH1790GLC_init+0xae>
		return ERR_MEAS_CONTROL2;
 80005de:	2315      	movs	r3, #21
 80005e0:	e00f      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3302      	adds	r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	2143      	movs	r1, #67	; 0x43
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f837 	bl	8000660 <write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <BH1790GLC_init+0xcc>
		return ERR_MEAS_START;
 80005fc:	2316      	movs	r3, #22
 80005fe:	e000      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	return SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	2304      	movs	r3, #4
 8000618:	2154      	movs	r1, #84	; 0x54
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f864 	bl	80006e8 <many_reads>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 800062a:	231e      	movs	r3, #30
 800062c:	e014      	b.n	8000658 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7a3b      	ldrb	r3, [r7, #8]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	7abb      	ldrb	r3, [r7, #10]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af04      	add	r7, sp, #16
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	21b6      	movs	r1, #182	; 0xb6
 8000688:	f002 ff4e 	bl	8003528 <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <write+0x3a>
		return ret;			//error check
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	e000      	b.n	800069c <write+0x3c>
	}

	return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	21b6      	movs	r1, #182	; 0xb6
 80006cc:	f003 f840 	bl	8003750 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <read+0x3a>
		return ret;			//error check
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	e000      	b.n	80006e0 <read+0x3c>
	}


	return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	4613      	mov	r3, r2
 80006fa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	b29a      	uxth	r2, r3
 8000704:	7abb      	ldrb	r3, [r7, #10]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	21b6      	movs	r1, #182	; 0xb6
 8000718:	f003 f81a 	bl	8003750 <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <many_reads+0x42>
		return ret;			//error check
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	e000      	b.n	800072c <many_reads+0x44>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <APPD_EnableCPU2+0x34>)
 800073c:	1d3c      	adds	r4, r7, #4
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	c403      	stmia	r4!, {r0, r1}
 800074a:	8022      	strh	r2, [r4, #0]
 800074c:	3402      	adds	r4, #2
 800074e:	0c13      	lsrs	r3, r2, #16
 8000750:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000752:	f008 ffad 	bl	80096b0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f008 fa48 	bl	8008bee <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800075e:	bf00      	nop
}
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bdb0      	pop	{r4, r5, r7, pc}
 8000766:	bf00      	nop
 8000768:	0800ba70 	.word	0x0800ba70

0800076c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800077a:	f023 0207 	bic.w	r2, r3, #7
 800077e:	4905      	ldr	r1, [pc, #20]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	58000400 	.word	0x58000400

08000798 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	58000800 	.word	0x58000800

080007c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	cafecafe 	.word	0xcafecafe

080007fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	608b      	str	r3, [r1, #8]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800084a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800087c:	d101      	bne.n	8000882 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008a2:	d101      	bne.n	80008a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_DBGMCU_GetDeviceID+0x18>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e0042000 	.word	0xe0042000

08000904 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <LL_DBGMCU_GetRevisionID+0x18>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e0042000 	.word	0xe0042000

08000920 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	041b      	lsls	r3, r3, #16
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	615a      	str	r2, [r3, #20]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	615a      	str	r2, [r3, #20]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	619a      	str	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ee:	f023 0304 	bic.w	r3, r3, #4
 80009f2:	6113      	str	r3, [r2, #16]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MX_APPE_Config+0x18>)
 8000a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a70:	f000 f824 	bl	8000abc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a74:	f000 f864 	bl	8000b40 <Config_HSE>

  return;
 8000a78:	bf00      	nop
}
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000

08000a80 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000a84:	f000 f870 	bl	8000b68 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a88:	f000 f888 	bl	8000b9c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a8c:	4903      	ldr	r1, [pc, #12]	; (8000a9c <MX_APPE_Init+0x1c>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fdd4 	bl	800163c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a94:	f000 f890 	bl	8000bb8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000ae0 	.word	0x20000ae0

08000aa0 <Init_Smps>:

void Init_Smps(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000aa4:	bf00      	nop
}
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <Init_Exti>:

void Init_Exti(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ab2:	2050      	movs	r0, #80	; 0x50
 8000ab4:	f7ff fe70 	bl	8000798 <LL_EXTI_EnableIT_32_63>

  return;
 8000ab8:	bf00      	nop
}
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000ac0:	f000 f804 	bl	8000acc <Reset_BackupDomain>

  Reset_IPCC();
 8000ac4:	f000 f81a 	bl	8000afc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ad0:	f7ff feca 	bl	8000868 <LL_RCC_IsActiveFlag_PINRST>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <Reset_BackupDomain+0x2a>
 8000ada:	f7ff fed8 	bl	800088e <LL_RCC_IsActiveFlag_SFTRST>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d108      	bne.n	8000af6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000ae4:	f003 fecc 	bl	8004880 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ae8:	f003 feca 	bl	8004880 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000aec:	f7ff fe9a 	bl	8000824 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000af0:	f7ff fea9 	bl	8000846 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
}
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b04:	f7ff fed6 	bl	80008b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b08:	213f      	movs	r1, #63	; 0x3f
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <Reset_IPCC+0x40>)
 8000b0c:	f7ff ff4e 	bl	80009ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b10:	213f      	movs	r1, #63	; 0x3f
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <Reset_IPCC+0x40>)
 8000b14:	f7ff ff58 	bl	80009c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b18:	213f      	movs	r1, #63	; 0x3f
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <Reset_IPCC+0x40>)
 8000b1c:	f7ff ff00 	bl	8000920 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b20:	213f      	movs	r1, #63	; 0x3f
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <Reset_IPCC+0x40>)
 8000b24:	f7ff ff1f 	bl	8000966 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b28:	213f      	movs	r1, #63	; 0x3f
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <Reset_IPCC+0x40>)
 8000b2c:	f7ff ff0a 	bl	8000944 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b30:	213f      	movs	r1, #63	; 0x3f
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <Reset_IPCC+0x40>)
 8000b34:	f7ff ff29 	bl	800098a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b38:	bf00      	nop
}
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58000c00 	.word	0x58000c00

08000b40 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f008 fe3e 	bl	80097c8 <OTP_Read>
 8000b4c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe31 	bl	80007c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <System_Init>:

static void System_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b6c:	f7ff ff98 	bl	8000aa0 <Init_Smps>

  Init_Exti();
 8000b70:	f7ff ff9d 	bl	8000aae <Init_Exti>

  Init_Rtc();
 8000b74:	f000 f802 	bl	8000b7c <Init_Rtc>

  return;
 8000b78:	bf00      	nop
}
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Init_Rtc>:

static void Init_Rtc(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <Init_Rtc+0x1c>)
 8000b82:	f7ff ff4c 	bl	8000a1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b86:	2100      	movs	r1, #0
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <Init_Rtc+0x1c>)
 8000b8a:	f7ff ff58 	bl	8000a3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <Init_Rtc+0x1c>)
 8000b90:	f7ff ff38 	bl	8000a04 <LL_RTC_EnableWriteProtection>

  return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40002800 	.word	0x40002800

08000b9c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba4:	f7ff fe2a 	bl	80007fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ba8:	f009 fd08 	bl	800a5bc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bac:	2004      	movs	r0, #4
 8000bae:	f7ff fddd 	bl	800076c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bbe:	f008 fbc1 	bl	8009344 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <appe_Tl_Init+0x50>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f009 fe36 	bl	800a838 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <appe_Tl_Init+0x54>)
 8000bce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <appe_Tl_Init+0x58>)
 8000bd2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <appe_Tl_Init+0x5c>)
 8000bda:	f008 fa79 	bl	80090d0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <appe_Tl_Init+0x60>)
 8000be0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <appe_Tl_Init+0x64>)
 8000be4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <appe_Tl_Init+0x68>)
 8000be8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bea:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 fce7 	bl	80095c8 <TL_MM_Init>

  TL_Enable();
 8000bfa:	f008 fb9d 	bl	8009338 <TL_Enable>

  return;
 8000bfe:	bf00      	nop
}
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	08009109 	.word	0x08009109
 8000c0c:	200005dc 	.word	0x200005dc
 8000c10:	08000c25 	.word	0x08000c25
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	200007f4 	.word	0x200007f4
 8000c1c:	200006e8 	.word	0x200006e8
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c2e:	bf00      	nop
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	330b      	adds	r3, #11
 8000c4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d81f      	bhi.n	8000c9a <APPE_SysUserEvtRx+0x5e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <APPE_SysUserEvtRx+0x24>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000c93 	.word	0x08000c93
 8000c68:	08000c9b 	.word	0x08000c9b
 8000c6c:	08000c9b 	.word	0x08000c9b
 8000c70:	08000c9b 	.word	0x08000c9b
 8000c74:	08000c9b 	.word	0x08000c9b
 8000c78:	08000c9b 	.word	0x08000c9b
 8000c7c:	08000c9b 	.word	0x08000c9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f007 ffdf 	bl	8008c48 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f81b 	bl	8000cc6 <APPE_SysEvtReadyProcessing>
    break;
 8000c90:	e004      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f806 	bl	8000ca4 <APPE_SysEvtError>
    break;
 8000c98:	e000      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000c9a:	bf00      	nop
  }

  return;
 8000c9c:	bf00      	nop
}
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000cba:	bf00      	nop
}
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b08a      	sub	sp, #40	; 0x28
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	330b      	adds	r3, #11
 8000cea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d11d      	bne.n	8000d36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000cfa:	f7ff fd1b 	bl	8000734 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d02:	237f      	movs	r3, #127	; 0x7f
 8000d04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d06:	f7ff fdfd 	bl	8000904 <LL_DBGMCU_GetRevisionID>
 8000d0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d12:	f7ff fde9 	bl	80008e8 <LL_DBGMCU_GetDeviceID>
 8000d16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 ff7a 	bl	8008c1c <SHCI_C2_Config>

    APP_BLE_Init();
 8000d28:	f008 fe58 	bl	80099dc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f009 fc56 	bl	800a5e0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000d34:	e007      	b.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
  return;
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
}
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d56:	f001 fdd3 	bl	8002900 <HAL_GetTick>
 8000d5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d66:	d00a      	beq.n	8000d7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000d68:	f001 fde2 	bl	8002930 <HAL_GetTickFreq>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	e002      	b.n	8000d7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000d78:	f7ff fe34 	bl	80009e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000d7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	f001 fdbf 	bl	8002900 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8f4      	bhi.n	8000d78 <HAL_Delay+0x2a>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f009 fc4e 	bl	800a640 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f009 fc3c 	bl	800a640 <UTIL_SEQ_Run>

  return;
 8000dc8:	bf00      	nop
}
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f009 fd4e 	bl	800a87c <UTIL_SEQ_SetTask>
  return;
 8000de0:	bf00      	nop
}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000df0:	2002      	movs	r0, #2
 8000df2:	f009 fdaf 	bl	800a954 <UTIL_SEQ_SetEvt>
  return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f009 fdc4 	bl	800a994 <UTIL_SEQ_WaitEvt>
  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <LL_EXTI_EnableIT_0_31>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e22:	4905      	ldr	r1, [pc, #20]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58000800 	.word	0x58000800

08000e3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]

}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	58000800 	.word	0x58000800

08000e60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000e76:	e005      	b.n	8000e84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d1f5      	bne.n	8000e78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000e8c:	683b      	ldr	r3, [r7, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40002800 	.word	0x40002800

08000ea0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	491d      	ldr	r1, [pc, #116]	; (8000f28 <LinkTimerAfter+0x88>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d009      	beq.n	8000ede <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	4916      	ldr	r1, [pc, #88]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3314      	adds	r3, #20
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3315      	adds	r3, #21
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3314      	adds	r3, #20
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <LinkTimerAfter+0x88>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3315      	adds	r3, #21
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	701a      	strb	r2, [r3, #0]

  return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000978 	.word	0x20000978

08000f2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <LinkTimerBefore+0xb8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d032      	beq.n	8000fae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3315      	adds	r3, #21
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3315      	adds	r3, #21
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3314      	adds	r3, #20
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	4913      	ldr	r1, [pc, #76]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000fac:	e014      	b.n	8000fd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3315      	adds	r3, #21
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3314      	adds	r3, #20
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	701a      	strb	r2, [r3, #0]
  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000a08 	.word	0x20000a08
 8000fe8:	20000978 	.word	0x20000978

08000fec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <linkTimer+0x144>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d118      	bne.n	8001032 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <linkTimer+0x144>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <linkTimer+0x148>)
 8001008:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <linkTimer+0x144>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	4949      	ldr	r1, [pc, #292]	; (8001138 <linkTimer+0x14c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	3315      	adds	r3, #21
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <linkTimer+0x150>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	81fb      	strh	r3, [r7, #14]
 8001030:	e078      	b.n	8001124 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001032:	f000 f909 	bl	8001248 <ReturnTimeElapsed>
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	493e      	ldr	r1, [pc, #248]	; (8001138 <linkTimer+0x14c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	4419      	add	r1, r3
 8001052:	4839      	ldr	r0, [pc, #228]	; (8001138 <linkTimer+0x14c>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4403      	add	r3, r0
 800105e:	3308      	adds	r3, #8
 8001060:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	4934      	ldr	r1, [pc, #208]	; (8001138 <linkTimer+0x14c>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <linkTimer+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <linkTimer+0x14c>)
 8001080:	460b      	mov	r3, r1
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	440b      	add	r3, r1
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d337      	bcc.n	8001104 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <linkTimer+0x144>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800109a:	7b7a      	ldrb	r2, [r7, #13]
 800109c:	4926      	ldr	r1, [pc, #152]	; (8001138 <linkTimer+0x14c>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3315      	adds	r3, #21
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010ae:	e013      	b.n	80010d8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80010b0:	7b7a      	ldrb	r2, [r7, #13]
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <linkTimer+0x14c>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	3315      	adds	r3, #21
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010c4:	7b7a      	ldrb	r2, [r7, #13]
 80010c6:	491c      	ldr	r1, [pc, #112]	; (8001138 <linkTimer+0x14c>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3315      	adds	r3, #21
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d00b      	beq.n	80010f6 <linkTimer+0x10a>
 80010de:	7b3a      	ldrb	r2, [r7, #12]
 80010e0:	4915      	ldr	r1, [pc, #84]	; (8001138 <linkTimer+0x14c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d2dc      	bcs.n	80010b0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80010f6:	7b7a      	ldrb	r2, [r7, #13]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fecf 	bl	8000ea0 <LinkTimerAfter>
 8001102:	e00f      	b.n	8001124 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <linkTimer+0x144>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff0c 	bl	8000f2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <linkTimer+0x144>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <linkTimer+0x148>)
 800111c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <linkTimer+0x144>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001124:	89fb      	ldrh	r3, [r7, #14]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000a08 	.word	0x20000a08
 8001134:	20000a09 	.word	0x20000a09
 8001138:	20000978 	.word	0x20000978
 800113c:	20000a0c 	.word	0x20000a0c

08001140 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <UnlinkTimer+0xf8>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	429a      	cmp	r2, r3
 800115a:	d111      	bne.n	8001180 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <UnlinkTimer+0xf8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <UnlinkTimer+0xfc>)
 8001164:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <UnlinkTimer+0x100>)
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3315      	adds	r3, #21
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <UnlinkTimer+0xf8>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e03e      	b.n	80011fe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	492f      	ldr	r1, [pc, #188]	; (8001240 <UnlinkTimer+0x100>)
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	3314      	adds	r3, #20
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	492a      	ldr	r1, [pc, #168]	; (8001240 <UnlinkTimer+0x100>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3315      	adds	r3, #21
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011a8:	79f9      	ldrb	r1, [r7, #7]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	4824      	ldr	r0, [pc, #144]	; (8001240 <UnlinkTimer+0x100>)
 80011ae:	460b      	mov	r3, r1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4403      	add	r3, r0
 80011b8:	3315      	adds	r3, #21
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	4920      	ldr	r1, [pc, #128]	; (8001240 <UnlinkTimer+0x100>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3315      	adds	r3, #21
 80011cc:	4602      	mov	r2, r0
 80011ce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d013      	beq.n	80011fe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80011d6:	79f9      	ldrb	r1, [r7, #7]
 80011d8:	7bba      	ldrb	r2, [r7, #14]
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <UnlinkTimer+0x100>)
 80011dc:	460b      	mov	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	440b      	add	r3, r1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4403      	add	r3, r0
 80011e6:	3314      	adds	r3, #20
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2d8      	uxtb	r0, r3
 80011ec:	4914      	ldr	r1, [pc, #80]	; (8001240 <UnlinkTimer+0x100>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3314      	adds	r3, #20
 80011fa:	4602      	mov	r2, r0
 80011fc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <UnlinkTimer+0x100>)
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <UnlinkTimer+0xf8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b06      	cmp	r3, #6
 800121a:	d107      	bne.n	800122c <UnlinkTimer+0xec>
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <UnlinkTimer+0x104>)
 8001224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001228:	601a      	str	r2, [r3, #0]
  }

  return;
 800122a:	bf00      	nop
 800122c:	bf00      	nop
}
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000a08 	.word	0x20000a08
 800123c:	20000a09 	.word	0x20000a09
 8001240:	20000978 	.word	0x20000978
 8001244:	20000a0c 	.word	0x20000a0c

08001248 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001256:	d026      	beq.n	80012a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001258:	f7ff fe02 	bl	8000e60 <ReadRtcSsrValue>
 800125c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	d805      	bhi.n	8001274 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <ReturnTimeElapsed+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e00a      	b.n	800128a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <ReturnTimeElapsed+0x74>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <ReturnTimeElapsed+0x78>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <ReturnTimeElapsed+0x7c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	40d3      	lsrs	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000a0c 	.word	0x20000a0c
 80012bc:	20000a14 	.word	0x20000a14
 80012c0:	20000a12 	.word	0x20000a12
 80012c4:	20000a11 	.word	0x20000a11

080012c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80012d8:	f7ff fdc2 	bl	8000e60 <ReadRtcSsrValue>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <RestartWakeupCounter+0x9c>)
 80012e0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f001 fcad 	bl	8002c42 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80012e8:	e039      	b.n	800135e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d803      	bhi.n	80012f8 <RestartWakeupCounter+0x30>
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <RestartWakeupCounter+0xa0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d002      	beq.n	80012fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80012fe:	bf00      	nop
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <RestartWakeupCounter+0xa4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f8      	beq.n	8001300 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <RestartWakeupCounter+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <RestartWakeupCounter+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800131e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <RestartWakeupCounter+0xa8>)
 8001322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001326:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001328:	2003      	movs	r0, #3
 800132a:	f001 fc98 	bl	8002c5e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <RestartWakeupCounter+0xac>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <RestartWakeupCounter+0xac>)
 800133a:	4313      	orrs	r3, r2
 800133c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800133e:	f7ff fd8f 	bl	8000e60 <ReadRtcSsrValue>
 8001342:	4603      	mov	r3, r0
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <RestartWakeupCounter+0x9c>)
 8001346:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <RestartWakeupCounter+0xa4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <RestartWakeupCounter+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001356:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001358:	f3af 8000 	nop.w
  return ;
 800135c:	bf00      	nop
}
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000a0c 	.word	0x20000a0c
 8001368:	20000a11 	.word	0x20000a11
 800136c:	20000ae0 	.word	0x20000ae0
 8001370:	58000800 	.word	0x58000800
 8001374:	40002800 	.word	0x40002800

08001378 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <RescheduleTimerList+0x11c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d107      	bne.n	800139c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800138c:	bf00      	nop
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <RescheduleTimerList+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f8      	bne.n	800138e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <RescheduleTimerList+0x120>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <RescheduleTimerList+0x120>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <RescheduleTimerList+0x124>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	493a      	ldr	r1, [pc, #232]	; (80014a0 <RescheduleTimerList+0x128>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80013c6:	f7ff ff3f 	bl	8001248 <ReturnTimeElapsed>
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d205      	bcs.n	80013e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e04d      	b.n	800147e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <RescheduleTimerList+0x130>)
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4413      	add	r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d906      	bls.n	8001402 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <RescheduleTimerList+0x130>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e03d      	b.n	800147e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <RescheduleTimerList+0x12c>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	e034      	b.n	800147e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	4922      	ldr	r1, [pc, #136]	; (80014a0 <RescheduleTimerList+0x128>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	429a      	cmp	r2, r3
 800142a:	d20a      	bcs.n	8001442 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	491c      	ldr	r1, [pc, #112]	; (80014a0 <RescheduleTimerList+0x128>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3308      	adds	r3, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e013      	b.n	800146a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	4916      	ldr	r1, [pc, #88]	; (80014a0 <RescheduleTimerList+0x128>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3308      	adds	r3, #8
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	1ac9      	subs	r1, r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <RescheduleTimerList+0x128>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4403      	add	r3, r0
 8001466:	3308      	adds	r3, #8
 8001468:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <RescheduleTimerList+0x128>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3315      	adds	r3, #21
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d1c7      	bne.n	8001414 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff1e 	bl	80012c8 <RestartWakeupCounter>

  return ;
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40002800 	.word	0x40002800
 8001498:	20000ae0 	.word	0x20000ae0
 800149c:	20000a08 	.word	0x20000a08
 80014a0:	20000978 	.word	0x20000978
 80014a4:	20000a10 	.word	0x20000a10
 80014a8:	20000a16 	.word	0x20000a16

080014ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b2:	f3ef 8310 	mrs	r3, PRIMASK
 80014b6:	617b      	str	r3, [r7, #20]
  return(result);
 80014b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ca      	movs	r2, #202	; 0xca
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2253      	movs	r2, #83	; 0x53
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80014e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014ec:	4950      	ldr	r1, [pc, #320]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	330c      	adds	r3, #12
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d16e      	bne.n	80015e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001502:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001506:	494a      	ldr	r1, [pc, #296]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001516:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800151a:	4945      	ldr	r1, [pc, #276]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d04c      	beq.n	80015d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001536:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800153a:	493d      	ldr	r1, [pc, #244]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	330d      	adds	r3, #13
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d124      	bne.n	800159a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdf2 	bl	8001140 <UnlinkTimer>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f383 8810 	msr	PRIMASK, r3
}
 8001566:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001568:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f9b8 	bl	80018f8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	22ca      	movs	r2, #202	; 0xca
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2253      	movs	r2, #83	; 0x53
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	e012      	b.n	80015c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f383 8810 	msr	PRIMASK, r3
}
 80015a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f920 	bl	80017f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22ca      	movs	r2, #202	; 0xca
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2253      	movs	r2, #83	; 0x53
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80015c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4619      	mov	r1, r3
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f000 fa1b 	bl	8001a04 <HW_TS_RTC_Int_AppNot>
 80015ce:	e022      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80015d0:	f7ff fed2 	bl	8001378 <RescheduleTimerList>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f383 8810 	msr	PRIMASK, r3
}
 80015de:	e01a      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015e0:	bf00      	nop
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f8      	beq.n	80015e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001600:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001604:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f383 8810 	msr	PRIMASK, r3
}
 8001614:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800161e:	bf00      	nop
}
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000ae0 	.word	0x20000ae0
 800162c:	20000a08 	.word	0x20000a08
 8001630:	20000978 	.word	0x20000978
 8001634:	20000a10 	.word	0x20000a10
 8001638:	58000800 	.word	0x58000800

0800163c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HW_TS_Init+0x188>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	22ca      	movs	r2, #202	; 0xca
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HW_TS_Init+0x188>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001658:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HW_TS_Init+0x18c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <HW_TS_Init+0x18c>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HW_TS_Init+0x18c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f1c3 0304 	rsb	r3, r3, #4
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HW_TS_Init+0x190>)
 8001678:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HW_TS_Init+0x18c>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001682:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001686:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	fa92 f2a2 	rbit	r2, r2
 800168e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	2a00      	cmp	r2, #0
 8001698:	d101      	bne.n	800169e <HW_TS_Init+0x62>
  {
    return 32U;
 800169a:	2220      	movs	r2, #32
 800169c:	e003      	b.n	80016a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	40d3      	lsrs	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HW_TS_Init+0x194>)
 80016b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HW_TS_Init+0x18c>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HW_TS_Init+0x198>)
 80016c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HW_TS_Init+0x198>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HW_TS_Init+0x194>)
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d8:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HW_TS_Init+0x190>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	40d3      	lsrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d904      	bls.n	80016f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HW_TS_Init+0x19c>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e003      	b.n	80016fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HW_TS_Init+0x19c>)
 80016fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80016fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001700:	f7ff fb9c 	bl	8000e3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001708:	f7ff fb84 	bl	8000e14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HW_TS_Init+0x1a0>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HW_TS_Init+0x1a4>)
 800171a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
 8001724:	e00c      	b.n	8001740 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001726:	7ffa      	ldrb	r2, [r7, #31]
 8001728:	492e      	ldr	r1, [pc, #184]	; (80017e4 <HW_TS_Init+0x1a8>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	330c      	adds	r3, #12
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	3301      	adds	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d9ef      	bls.n	8001726 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HW_TS_Init+0x1ac>)
 8001748:	2206      	movs	r2, #6
 800174a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HW_TS_Init+0x188>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HW_TS_Init+0x188>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HW_TS_Init+0x188>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HW_TS_Init+0x188>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800176c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HW_TS_Init+0x1b0>)
 8001770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001776:	2003      	movs	r0, #3
 8001778:	f001 fa71 	bl	8002c5e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HW_TS_Init+0x188>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HW_TS_Init+0x188>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e009      	b.n	80017a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HW_TS_Init+0x188>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800179c:	2003      	movs	r0, #3
 800179e:	f001 fa50 	bl	8002c42 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HW_TS_Init+0x188>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80017aa:	2200      	movs	r2, #0
 80017ac:	2103      	movs	r1, #3
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 fa05 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017b4:	2003      	movs	r0, #3
 80017b6:	f001 fa1c 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

  return;
 80017ba:	bf00      	nop
}
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000ae0 	.word	0x20000ae0
 80017c8:	40002800 	.word	0x40002800
 80017cc:	20000a11 	.word	0x20000a11
 80017d0:	20000a12 	.word	0x20000a12
 80017d4:	20000a14 	.word	0x20000a14
 80017d8:	20000a16 	.word	0x20000a16
 80017dc:	20000a10 	.word	0x20000a10
 80017e0:	20000a0c 	.word	0x20000a0c
 80017e4:	20000978 	.word	0x20000978
 80017e8:	20000a08 	.word	0x20000a08
 80017ec:	58000800 	.word	0x58000800

080017f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fa:	f3ef 8310 	mrs	r3, PRIMASK
 80017fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001800:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001808:	2003      	movs	r0, #3
 800180a:	f001 fa00 	bl	8002c0e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22ca      	movs	r2, #202	; 0xca
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2253      	movs	r2, #83	; 0x53
 800181c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	4930      	ldr	r1, [pc, #192]	; (80018e4 <HW_TS_Stop+0xf4>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	330c      	adds	r3, #12
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d142      	bne.n	80018bc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc80 	bl	8001140 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HW_TS_Stop+0xf8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d12f      	bne.n	80018ac <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HW_TS_Stop+0xfc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001858:	d107      	bne.n	800186a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800185a:	bf00      	nop
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HW_TS_Stop+0xf0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f8      	bne.n	800185c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HW_TS_Stop+0xf0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001878:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800187a:	bf00      	nop
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HW_TS_Stop+0xf0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f8      	beq.n	800187c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HW_TS_Stop+0xf0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800189a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HW_TS_Stop+0x100>)
 800189e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 f9da 	bl	8002c5e <HAL_NVIC_ClearPendingIRQ>
 80018aa:	e007      	b.n	80018bc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HW_TS_Stop+0x104>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	7cfa      	ldrb	r2, [r7, #19]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80018b8:	f7ff fd5e 	bl	8001378 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HW_TS_Stop+0xf0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018c4:	2003      	movs	r0, #3
 80018c6:	f001 f994 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f383 8810 	msr	PRIMASK, r3
}
 80018d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018d6:	bf00      	nop
}
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000ae0 	.word	0x20000ae0
 80018e4:	20000978 	.word	0x20000978
 80018e8:	20000a08 	.word	0x20000a08
 80018ec:	40002800 	.word	0x40002800
 80018f0:	58000800 	.word	0x58000800
 80018f4:	20000a09 	.word	0x20000a09

080018f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	493b      	ldr	r1, [pc, #236]	; (80019f4 <HW_TS_Start+0xfc>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	330c      	adds	r3, #12
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d103      	bne.n	8001924 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff66 	bl	80017f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001924:	f3ef 8310 	mrs	r3, PRIMASK
 8001928:	60fb      	str	r3, [r7, #12]
  return(result);
 800192a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800192c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800192e:	b672      	cpsid	i
}
 8001930:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001932:	2003      	movs	r0, #3
 8001934:	f001 f96b 	bl	8002c0e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HW_TS_Start+0x100>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	22ca      	movs	r2, #202	; 0xca
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HW_TS_Start+0x100>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2253      	movs	r2, #83	; 0x53
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	492a      	ldr	r1, [pc, #168]	; (80019f4 <HW_TS_Start+0xfc>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <HW_TS_Start+0xfc>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	4920      	ldr	r1, [pc, #128]	; (80019f4 <HW_TS_Start+0xfc>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb30 	bl	8000fec <linkTimer>
 800198c:	4603      	mov	r3, r0
 800198e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HW_TS_Start+0x104>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HW_TS_Start+0x108>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	7c7a      	ldrb	r2, [r7, #17]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d002      	beq.n	80019a8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80019a2:	f7ff fce9 	bl	8001378 <RescheduleTimerList>
 80019a6:	e013      	b.n	80019d0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	4912      	ldr	r1, [pc, #72]	; (80019f4 <HW_TS_Start+0xfc>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3308      	adds	r3, #8
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	8a7b      	ldrh	r3, [r7, #18]
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HW_TS_Start+0xfc>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4403      	add	r3, r0
 80019cc:	3308      	adds	r3, #8
 80019ce:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HW_TS_Start+0x100>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019d8:	2003      	movs	r0, #3
 80019da:	f001 f90a 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f383 8810 	msr	PRIMASK, r3
}
 80019e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019ea:	bf00      	nop
}
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000978 	.word	0x20000978
 80019f8:	20000ae0 	.word	0x20000ae0
 80019fc:	20000a08 	.word	0x20000a08
 8001a00:	20000a09 	.word	0x20000a09

08001a04 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4798      	blx	r3

  return;
 8001a16:	bf00      	nop
}
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <LL_RCC_LSE_SetDriveCapability>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f023 0218 	bic.w	r2, r3, #24
 8001a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_AHB1_GRP1_EnableClock>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_AHB2_GRP1_EnableClock>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab6:	f000 feb5 	bl	8002824 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001aba:	f7fe ffd3 	bl	8000a64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abe:	f000 f871 	bl	8001ba4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ac2:	f000 f8d1 	bl	8001c68 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001ac6:	f000 f92f 	bl	8001d28 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aca:	f000 fa4f 	bl	8001f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ace:	f000 fa33 	bl	8001f38 <MX_DMA_Init>
  MX_RTC_Init();
 8001ad2:	f000 f971 	bl	8001db8 <MX_RTC_Init>
  MX_I2C1_Init();
 8001ad6:	f000 f8e7 	bl	8001ca8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001ada:	f000 f9df 	bl	8001e9c <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8001ade:	f000 f937 	bl	8001d50 <MX_LPTIM1_Init>
  MX_SPI1_Init();
 8001ae2:	f000 f99d 	bl	8001e20 <MX_SPI1_Init>
  MX_RF_Init();
 8001ae6:	f000 f95f 	bl	8001da8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring sensor...");
 8001aea:	4825      	ldr	r0, [pc, #148]	; (8001b80 <main+0xd0>)
 8001aec:	f009 f826 	bl	800ab3c <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001af0:	200a      	movs	r0, #10
 8001af2:	f7ff f92c 	bl	8000d4e <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001af6:	4923      	ldr	r1, [pc, #140]	; (8001b84 <main+0xd4>)
 8001af8:	4823      	ldr	r0, [pc, #140]	; (8001b88 <main+0xd8>)
 8001afa:	f7fe fd1b 	bl	8000534 <BH1790GLC_init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if(status != 0){
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <main+0x6a>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <main+0xdc>)
 8001b0e:	f009 f815 	bl	800ab3c <iprintf>
	  sensorReady = 0;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <main+0xe0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <main+0x7a>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	481d      	ldr	r0, [pc, #116]	; (8001b94 <main+0xe4>)
 8001b20:	f009 f80c 	bl	800ab3c <iprintf>
	  sensorReady = 1;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <main+0xe0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <main+0xe8>)
 8001b32:	f002 fc31 	bl	8004398 <HAL_LPTIM_TimeOut_Start_IT>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <main+0x90>
	  Error_Handler();
 8001b3c:	f000 fa92 	bl	8002064 <Error_Handler>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001b40:	f7fe ff9e 	bl	8000a80 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  // TO DO: FIGURE OUT IF THIS IS A GOOD IDEA... HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);	//enter low power mode
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001b44:	f7ff f928 	bl	8000d98 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <main+0xe0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f9      	beq.n	8001b44 <main+0x94>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <main+0xe0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 8001b56:	480c      	ldr	r0, [pc, #48]	; (8001b88 <main+0xd8>)
 8001b58:	f7fe fd57 	bl	800060a <get_val>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71bb      	strb	r3, [r7, #6]
        if(err != 0){
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <main+0xc2>
        	printf("Could not read sensor. Error code: %d\n\r", err);
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <main+0xec>)
 8001b6c:	f008 ffe6 	bl	800ab3c <iprintf>
 8001b70:	e7e8      	b.n	8001b44 <main+0x94>
        }else{
        	//printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
    		printf("ppg_data[1]: %d\n\r", hrm.ppg_data[1]);
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <main+0xd8>)
 8001b74:	88db      	ldrh	r3, [r3, #6]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <main+0xf0>)
 8001b7a:	f008 ffdf 	bl	800ab3c <iprintf>
    MX_APPE_Process();
 8001b7e:	e7e1      	b.n	8001b44 <main+0x94>
 8001b80:	0800ba8c 	.word	0x0800ba8c
 8001b84:	20000a18 	.word	0x20000a18
 8001b88:	20000cbc 	.word	0x20000cbc
 8001b8c:	0800baa4 	.word	0x0800baa4
 8001b90:	20000cc4 	.word	0x20000cc4
 8001b94:	0800bad0 	.word	0x0800bad0
 8001b98:	20000aa8 	.word	0x20000aa8
 8001b9c:	0800bb04 	.word	0x0800bb04
 8001ba0:	0800bb2c 	.word	0x0800bb2c

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09a      	sub	sp, #104	; 0x68
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	2248      	movs	r2, #72	; 0x48
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f008 ffba 	bl	800ab2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bca:	f002 fe59 	bl	8004880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001bce:	2010      	movs	r0, #16
 8001bd0:	f7ff ff25 	bl	8001a1e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <SystemClock_Config+0xc0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bdc:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <SystemClock_Config+0xc0>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <SystemClock_Config+0xc0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001bf0:	2327      	movs	r3, #39	; 0x27
 8001bf2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c04:	2301      	movs	r3, #1
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c08:	2340      	movs	r3, #64	; 0x40
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001c10:	23a0      	movs	r3, #160	; 0xa0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 f9c3 	bl	8004fa8 <HAL_RCC_OscConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001c28:	f000 fa1c 	bl	8002064 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c2c:	236f      	movs	r3, #111	; 0x6f
 8001c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fd1f 	bl	8005690 <HAL_RCC_ClockConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001c58:	f000 fa04 	bl	8002064 <Error_Handler>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3768      	adds	r7, #104	; 0x68
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	58000400 	.word	0x58000400

08001c68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b094      	sub	sp, #80	; 0x50
 8001c6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2250      	movs	r2, #80	; 0x50
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f008 ff59 	bl	800ab2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001c7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c7e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c86:	2300      	movs	r3, #0
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4618      	mov	r0, r3
 8001c92:	f004 f93a 	bl	8005f0a <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001c9c:	f000 f9e2 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ca0:	bf00      	nop
 8001ca2:	3750      	adds	r7, #80	; 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <MX_I2C1_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <MX_I2C1_Init+0x7c>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001ce4:	f001 fb90 	bl	8003408 <HAL_I2C_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cee:	f000 f9b9 	bl	8002064 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001cf6:	f002 f917 	bl	8003f28 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d00:	f000 f9b0 	bl	8002064 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_I2C1_Init+0x74>)
 8001d08:	f002 f959 	bl	8003fbe <HAL_I2CEx_ConfigDigitalFilter>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 f9a7 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000a18 	.word	0x20000a18
 8001d20:	40005400 	.word	0x40005400
 8001d24:	00707cbb 	.word	0x00707cbb

08001d28 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_IPCC_Init+0x20>)
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <MX_IPCC_Init+0x24>)
 8001d30:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_IPCC_Init+0x20>)
 8001d34:	f002 f990 	bl	8004058 <HAL_IPCC_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001d3e:	f000 f991 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000a6c 	.word	0x20000a6c
 8001d4c:	58000c00 	.word	0x58000c00

08001d50 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <MX_LPTIM1_Init+0x54>)
 8001d58:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_LPTIM1_Init+0x50>)
 8001d8e:	f002 fa61 	bl	8004254 <HAL_LPTIM_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001d98:	f000 f964 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000aa8 	.word	0x20000aa8
 8001da4:	40007c00 	.word	0x40007c00

08001da8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dbe:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <MX_RTC_Init+0x64>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dca:	220f      	movs	r2, #15
 8001dcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dd0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001dd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <MX_RTC_Init+0x60>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_RTC_Init+0x60>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dee:	480a      	ldr	r0, [pc, #40]	; (8001e18 <MX_RTC_Init+0x60>)
 8001df0:	f004 fb12 	bl	8006418 <HAL_RTC_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001dfa:	f000 f933 	bl	8002064 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_RTC_Init+0x60>)
 8001e04:	f004 fc08 	bl	8006618 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001e0e:	f000 f929 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000ae0 	.word	0x20000ae0
 8001e1c:	40002800 	.word	0x40002800

08001e20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <MX_SPI1_Init+0x78>)
 8001e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e56:	2210      	movs	r2, #16
 8001e58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_SPI1_Init+0x74>)
 8001e80:	f004 fc86 	bl	8006790 <HAL_SPI_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 f8eb 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000b04 	.word	0x20000b04
 8001e98:	40013000 	.word	0x40013000

08001e9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ea2:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <MX_USART1_UART_Init+0x98>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ebc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ec0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ec4:	220c      	movs	r2, #12
 8001ec6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ee8:	f004 fe35 	bl	8006b56 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001ef2:	f000 f8b7 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001efa:	f005 fb85 	bl	8007608 <HAL_UARTEx_SetTxFifoThreshold>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001f04:	f000 f8ae 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001f0c:	f005 fbba 	bl	8007684 <HAL_UARTEx_SetRxFifoThreshold>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001f16:	f000 f8a5 	bl	8002064 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001f1c:	f005 fb3b 	bl	8007596 <HAL_UARTEx_DisableFifoMode>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001f26:	f000 f89d 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000c28 	.word	0x20000c28
 8001f34:	40013800 	.word	0x40013800

08001f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	f7ff fd84 	bl	8001a4a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff fd81 	bl	8001a4a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	200b      	movs	r0, #11
 8001f4e:	f000 fe36 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f52:	200b      	movs	r0, #11
 8001f54:	f000 fe4d 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	200c      	movs	r0, #12
 8001f5e:	f000 fe2e 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f62:	200c      	movs	r0, #12
 8001f64:	f000 fe45 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f80:	2004      	movs	r0, #4
 8001f82:	f7ff fd7b 	bl	8001a7c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2002      	movs	r0, #2
 8001f88:	f7ff fd78 	bl	8001a7c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7ff fd75 	bl	8001a7c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	2008      	movs	r0, #8
 8001f94:	f7ff fd72 	bl	8001a7c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	212b      	movs	r1, #43	; 0x2b
 8001f9c:	481d      	ldr	r0, [pc, #116]	; (8002014 <MX_GPIO_Init+0xa8>)
 8001f9e:	f001 f9f7 	bl	8003390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001faa:	2301      	movs	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4819      	ldr	r0, [pc, #100]	; (8002018 <MX_GPIO_Init+0xac>)
 8001fb4:	f001 f87c 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin;
 8001fb8:	232b      	movs	r3, #43	; 0x2b
 8001fba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4811      	ldr	r0, [pc, #68]	; (8002014 <MX_GPIO_Init+0xa8>)
 8001fce:	f001 f86f 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f001 f85e 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_GPIO_Init+0xb0>)
 8002006:	f001 f853 	bl	80030b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	48000400 	.word	0x48000400
 8002018:	48000800 	.word	0x48000800
 800201c:	48000c00 	.word	0x48000c00

08002020 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_LPTIM_CompareMatchCallback+0x1c>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000cc4 	.word	0x20000cc4

08002040 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002048:	1d39      	adds	r1, r7, #4
 800204a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800204e:	2201      	movs	r2, #1
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <__io_putchar+0x20>)
 8002052:	f004 fdd0 	bl	8006bf6 <HAL_UART_Transmit>

  return ch;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000c28 	.word	0x20000c28

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>

0800206e <LL_RCC_EnableRTC>:
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_AHB2_GRP1_EnableClock>:
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800209e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_AHB3_GRP1_EnableClock>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4013      	ands	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800215c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002160:	f7ff ffaf 	bl	80020c2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	202e      	movs	r0, #46	; 0x2e
 800216a:	f000 fd28 	bl	8002bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800216e:	202e      	movs	r0, #46	; 0x2e
 8002170:	f000 fd3f 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b09c      	sub	sp, #112	; 0x70
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2250      	movs	r2, #80	; 0x50
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f008 fcc7 	bl	800ab2c <memset>
  if(hi2c->Instance==I2C1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_I2C_MspInit+0x98>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d12e      	bne.n	8002206 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021a8:	2304      	movs	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021ac:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fea7 	bl	8005f0a <HAL_RCCEx_PeriphCLKConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021c2:	f7ff ff4f 	bl	8002064 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2002      	movs	r0, #2
 80021c8:	f7ff ff62 	bl	8002090 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021de:	2304      	movs	r3, #4
 80021e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021e6:	4619      	mov	r1, r3
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <HAL_I2C_MspInit+0x9c>)
 80021ea:	f000 ff61 	bl	80030b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80021f2:	f7ff ff7f 	bl	80020f4 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	201e      	movs	r0, #30
 80021fc:	f000 fcdf 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002200:	201e      	movs	r0, #30
 8002202:	f000 fcf6 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3770      	adds	r7, #112	; 0x70
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40005400 	.word	0x40005400
 8002214:	48000400 	.word	0x48000400

08002218 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_IPCC_MspInit+0x44>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800222a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800222e:	f7ff ff48 	bl	80020c2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	202c      	movs	r0, #44	; 0x2c
 8002238:	f000 fcc1 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800223c:	202c      	movs	r0, #44	; 0x2c
 800223e:	f000 fcd8 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	202d      	movs	r0, #45	; 0x2d
 8002248:	f000 fcb9 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800224c:	202d      	movs	r0, #45	; 0x2d
 800224e:	f000 fcd0 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	58000c00 	.word	0x58000c00

08002260 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b096      	sub	sp, #88	; 0x58
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	2250      	movs	r2, #80	; 0x50
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f008 fc5b 	bl	800ab2c <memset>
  if(hlptim->Instance==LPTIM1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_LPTIM_MspInit+0x60>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d11a      	bne.n	80022b6 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002280:	2310      	movs	r3, #16
 8002282:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002284:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fe3b 	bl	8005f0a <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800229a:	f7ff fee3 	bl	8002064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800229e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80022a2:	f7ff ff27 	bl	80020f4 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	202f      	movs	r0, #47	; 0x2f
 80022ac:	f000 fc87 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80022b0:	202f      	movs	r0, #47	; 0x2f
 80022b2:	f000 fc9e 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3758      	adds	r7, #88	; 0x58
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40007c00 	.word	0x40007c00

080022c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b096      	sub	sp, #88	; 0x58
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	2250      	movs	r2, #80	; 0x50
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f008 fc29 	bl	800ab2c <memset>
  if(hrtc->Instance==RTC)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_RTC_MspInit+0x64>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d11d      	bne.n	8002320 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fe08 	bl	8005f0a <HAL_RCCEx_PeriphCLKConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002300:	f7ff feb0 	bl	8002064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002304:	f7ff feb3 	bl	800206e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002308:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800230c:	f7ff fef2 	bl	80020f4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2003      	movs	r0, #3
 8002316:	f000 fc52 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800231a:	2003      	movs	r0, #3
 800231c:	f000 fc69 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3758      	adds	r7, #88	; 0x58
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40002800 	.word	0x40002800

0800232c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a3c      	ldr	r2, [pc, #240]	; (800243c <HAL_SPI_MspInit+0x110>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d171      	bne.n	8002432 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800234e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002352:	f7ff fee8 	bl	8002126 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff fe9a 	bl	8002090 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800235c:	23c2      	movs	r3, #194	; 0xc2
 800235e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800236c:	2305      	movs	r3, #5
 800236e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	4619      	mov	r1, r3
 8002376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237a:	f000 fe99 	bl	80030b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_SPI_MspInit+0x114>)
 8002380:	4a30      	ldr	r2, [pc, #192]	; (8002444 <HAL_SPI_MspInit+0x118>)
 8002382:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002384:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_SPI_MspInit+0x114>)
 8002386:	2206      	movs	r2, #6
 8002388:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_SPI_MspInit+0x114>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_SPI_MspInit+0x114>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_SPI_MspInit+0x114>)
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_SPI_MspInit+0x114>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a2:	4b27      	ldr	r3, [pc, #156]	; (8002440 <HAL_SPI_MspInit+0x114>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_SPI_MspInit+0x114>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_SPI_MspInit+0x114>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80023b4:	4822      	ldr	r0, [pc, #136]	; (8002440 <HAL_SPI_MspInit+0x114>)
 80023b6:	f000 fc61 	bl	8002c7c <HAL_DMA_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 80023c0:	f7ff fe50 	bl	8002064 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_SPI_MspInit+0x114>)
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_SPI_MspInit+0x114>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023d2:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_SPI_MspInit+0x120>)
 80023d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023d8:	2207      	movs	r2, #7
 80023da:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023de:	2210      	movs	r2, #16
 80023e0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002406:	4810      	ldr	r0, [pc, #64]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 8002408:	f000 fc38 	bl	8002c7c <HAL_DMA_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8002412:	f7ff fe27 	bl	8002064 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_SPI_MspInit+0x11c>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2022      	movs	r0, #34	; 0x22
 8002428:	f000 fbc9 	bl	8002bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800242c:	2022      	movs	r0, #34	; 0x22
 800242e:	f000 fbe0 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40013000 	.word	0x40013000
 8002440:	20000b68 	.word	0x20000b68
 8002444:	40020008 	.word	0x40020008
 8002448:	20000bc8 	.word	0x20000bc8
 800244c:	4002001c 	.word	0x4002001c

08002450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b09c      	sub	sp, #112	; 0x70
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	2250      	movs	r2, #80	; 0x50
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f008 fb5b 	bl	800ab2c <memset>
  if(huart->Instance==USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_UART_MspInit+0x84>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d124      	bne.n	80024ca <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002480:	2301      	movs	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fd3c 	bl	8005f0a <HAL_RCCEx_PeriphCLKConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002498:	f7ff fde4 	bl	8002064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800249c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a0:	f7ff fe41 	bl	8002126 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	2002      	movs	r0, #2
 80024a6:	f7ff fdf3 	bl	8002090 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024aa:	23c0      	movs	r3, #192	; 0xc0
 80024ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024ba:	2307      	movs	r3, #7
 80024bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024c2:	4619      	mov	r1, r3
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <HAL_UART_MspInit+0x88>)
 80024c6:	f000 fdf3 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3770      	adds	r7, #112	; 0x70
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40013800 	.word	0x40013800
 80024d8:	48000400 	.word	0x48000400

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 f9d6 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002534:	f7fe ffba 	bl	80014ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA1_Channel1_IRQHandler+0x10>)
 8002542:	f000 fca2 	bl	8002e8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000b68 	.word	0x20000b68

08002550 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA1_Channel2_IRQHandler+0x10>)
 8002556:	f000 fc98 	bl	8002e8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000bc8 	.word	0x20000bc8

08002564 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <I2C1_EV_IRQHandler+0x10>)
 800256a:	f001 fa0b 	bl	8003984 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000a18 	.word	0x20000a18

08002578 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <SPI1_IRQHandler+0x10>)
 800257e:	f004 f9ab 	bl	80068d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000b04 	.word	0x20000b04

0800258c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002590:	f007 fed0 	bl	800a334 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800259c:	f007 ff02 	bl	800a3a4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80025a8:	f000 ff0a 	bl	80033c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <LPTIM1_IRQHandler+0x10>)
 80025b6:	f001 ff71 	bl	800449c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000aa8 	.word	0x20000aa8

080025c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e00a      	b.n	80025ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d6:	f3af 8000 	nop.w
 80025da:	4601      	mov	r1, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf0      	blt.n	80025d6 <_read+0x12>
  }

  return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e009      	b.n	8002624 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	60ba      	str	r2, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd11 	bl	8002040 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbf1      	blt.n	8002610 <_write+0x12>
  }
  return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_close>:

int _close(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800265e:	605a      	str	r2, [r3, #4]
  return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_isatty>:

int _isatty(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f008 f9f4 	bl	800aabc <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20030000 	.word	0x20030000
 8002700:	00000400 	.word	0x00000400
 8002704:	20000cc8 	.word	0x20000cc8
 8002708:	20000e90 	.word	0x20000e90

0800270c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <SystemInit+0x98>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <SystemInit+0x98>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002734:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002738:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <SystemInit+0x9c>)
 8002746:	4013      	ands	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002756:	f023 0305 	bic.w	r3, r3, #5
 800275a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <SystemInit+0xa0>)
 8002778:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <SystemInit+0xa0>)
 8002780:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	2200      	movs	r2, #0
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00
 80027a8:	faf6fefb 	.word	0xfaf6fefb
 80027ac:	22041000 	.word	0x22041000

080027b0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80027b0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b4:	3304      	adds	r3, #4

080027b6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80027ba:	d3f9      	bcc.n	80027b0 <CopyDataInit>
  bx lr
 80027bc:	4770      	bx	lr

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80027be:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80027c0:	3004      	adds	r0, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80027c2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>
  bx lr
 80027c6:	4770      	bx	lr

080027c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027cc:	f7ff ff9e 	bl	800270c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80027d0:	480b      	ldr	r0, [pc, #44]	; (8002800 <LoopForever+0x6>)
 80027d2:	490c      	ldr	r1, [pc, #48]	; (8002804 <LoopForever+0xa>)
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <LoopForever+0xe>)
 80027d6:	2300      	movs	r3, #0
 80027d8:	f7ff ffed 	bl	80027b6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80027dc:	480b      	ldr	r0, [pc, #44]	; (800280c <LoopForever+0x12>)
 80027de:	490c      	ldr	r1, [pc, #48]	; (8002810 <LoopForever+0x16>)
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <LoopForever+0x1a>)
 80027e2:	2300      	movs	r3, #0
 80027e4:	f7ff ffe7 	bl	80027b6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80027e8:	480b      	ldr	r0, [pc, #44]	; (8002818 <LoopForever+0x1e>)
 80027ea:	490c      	ldr	r1, [pc, #48]	; (800281c <LoopForever+0x22>)
 80027ec:	2300      	movs	r3, #0
 80027ee:	f7ff ffe8 	bl	80027c2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027f2:	f008 f969 	bl	800aac8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027f6:	f7ff f95b 	bl	8001ab0 <main>

080027fa <LoopForever>:

LoopForever:
  b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   r0, =_estack
 80027fc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002800:	20000008 	.word	0x20000008
 8002804:	2000008c 	.word	0x2000008c
 8002808:	0800be8c 	.word	0x0800be8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800280c:	200301e3 	.word	0x200301e3
 8002810:	200301e3 	.word	0x200301e3
 8002814:	0800c7d9 	.word	0x0800c7d9
  INIT_BSS _sbss, _ebss
 8002818:	2000095c 	.word	0x2000095c
 800281c:	20000e8c 	.word	0x20000e8c

08002820 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC1_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_Init+0x3c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_Init+0x3c>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283a:	2003      	movs	r0, #3
 800283c:	f000 f9b4 	bl	8002ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002840:	2000      	movs	r0, #0
 8002842:	f000 f80f 	bl	8002864 <HAL_InitTick>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	e001      	b.n	8002856 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002852:	f7ff fc81 	bl	8002158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002856:	79fb      	ldrb	r3, [r7, #7]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	58004000 	.word	0x58004000

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_InitTick+0x6c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d024      	beq.n	80028c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002878:	f003 f8b6 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_InitTick+0x6c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002888:	fbb3 f3f1 	udiv	r3, r3, r1
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f9ca 	bl	8002c2a <HAL_SYSTICK_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	d809      	bhi.n	80028b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a2:	2200      	movs	r2, #0
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028aa:	f000 f988 	bl	8002bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_InitTick+0x70>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e007      	b.n	80028c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e004      	b.n	80028c6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000010 	.word	0x20000010
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_IncTick+0x20>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_IncTick+0x24>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <HAL_IncTick+0x24>)
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000010 	.word	0x20000010
 80028fc:	20000ccc 	.word	0x20000ccc

08002900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_GetTick+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000ccc 	.word	0x20000ccc

08002918 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_GetTickPrio+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	2000000c 	.word	0x2000000c

08002930 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_GetTickFreq+0x14>)
 8002936:	781b      	ldrb	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000010 	.word	0x20000010

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db12      	blt.n	8002a20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	490a      	ldr	r1, [pc, #40]	; (8002a2c <__NVIC_DisableIRQ+0x44>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	3320      	adds	r3, #32
 8002a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a14:	f3bf 8f4f 	dsb	sy
}
 8002a18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a1a:	f3bf 8f6f 	isb	sy
}
 8002a1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100

08002a30 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0c      	blt.n	8002a5c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_SetPendingIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	3340      	adds	r3, #64	; 0x40
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0c      	blt.n	8002a98 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <__NVIC_ClearPendingIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	3360      	adds	r3, #96	; 0x60
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b74:	d301      	bcc.n	8002b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00f      	b.n	8002b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <SysTick_Config+0x40>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b82:	210f      	movs	r1, #15
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b88:	f7ff ff8e 	bl	8002aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SysTick_Config+0x40>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b92:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <SysTick_Config+0x40>)
 8002b94:	2207      	movs	r2, #7
 8002b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010

08002ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fec9 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff fee0 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff90 	bl	8002afc <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5f 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fed3 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fee3 	bl	80029e8 <__NVIC_DisableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff96 	bl	8002b64 <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff feed 	bl	8002a30 <__NVIC_SetPendingIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fefd 	bl	8002a6c <__NVIC_ClearPendingIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e08e      	b.n	8002dac <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b47      	ldr	r3, [pc, #284]	; (8002db4 <HAL_DMA_Init+0x138>)
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d80f      	bhi.n	8002cba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_DMA_Init+0x13c>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a45      	ldr	r2, [pc, #276]	; (8002dbc <HAL_DMA_Init+0x140>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	009a      	lsls	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_DMA_Init+0x144>)
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb8:	e00e      	b.n	8002cd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_DMA_Init+0x148>)
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a3d      	ldr	r2, [pc, #244]	; (8002dbc <HAL_DMA_Init+0x140>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	009a      	lsls	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a3c      	ldr	r2, [pc, #240]	; (8002dc8 <HAL_DMA_Init+0x14c>)
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f95c 	bl	8002fe8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d38:	d102      	bne.n	8002d40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d56:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_DMA_Init+0x106>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d80c      	bhi.n	8002d82 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f97b 	bl	8003064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e008      	b.n	8002d94 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40020407 	.word	0x40020407
 8002db8:	bffdfff8 	.word	0xbffdfff8
 8002dbc:	cccccccd 	.word	0xcccccccd
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	bffdfbf8 	.word	0xbffdfbf8
 8002dc8:	40020400 	.word	0x40020400

08002dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d005      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2204      	movs	r2, #4
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e047      	b.n	8002e80 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 020e 	bic.w	r2, r2, #14
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	f003 021c 	and.w	r2, r3, #28
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
    }
  }
  return status;
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f003 031c 	and.w	r3, r3, #28
 8002eaa:	2204      	movs	r2, #4
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d026      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x7a>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d021      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0204 	bic.w	r2, r2, #4
 8002edc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f003 021c 	and.w	r2, r3, #28
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2104      	movs	r1, #4
 8002eec:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d071      	beq.n	8002fde <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f02:	e06c      	b.n	8002fde <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f08:	f003 031c 	and.w	r3, r3, #28
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d02e      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xec>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d029      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 020a 	bic.w	r2, r2, #10
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f003 021c 	and.w	r2, r3, #28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2102      	movs	r1, #2
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d038      	beq.n	8002fde <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f74:	e033      	b.n	8002fde <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	2208      	movs	r2, #8
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02a      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x156>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d025      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 020e 	bic.w	r2, r2, #14
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f003 021c 	and.w	r2, r3, #28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fde:	bf00      	nop
 8002fe0:	bf00      	nop
}
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d80a      	bhi.n	8003012 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003008:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6493      	str	r3, [r2, #72]	; 0x48
 8003010:	e007      	b.n	8003022 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800301c:	4413      	add	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3b08      	subs	r3, #8
 800302a:	4a0c      	ldr	r2, [pc, #48]	; (800305c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003038:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2201      	movs	r2, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40020407 	.word	0x40020407
 8003058:	4002081c 	.word	0x4002081c
 800305c:	cccccccd 	.word	0xcccccccd
 8003060:	40020880 	.word	0x40020880

08003064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003088:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b01      	subs	r3, #1
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	1000823f 	.word	0x1000823f
 80030ac:	40020940 	.word	0x40020940

080030b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030be:	e14c      	b.n	800335a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 813e 	beq.w	8003354 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d005      	beq.n	80030f0 <HAL_GPIO_Init+0x40>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d130      	bne.n	8003152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003126:	2201      	movs	r2, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0201 	and.w	r2, r3, #1
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	2b03      	cmp	r3, #3
 800315c:	d017      	beq.n	800318e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d123      	bne.n	80031e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	08da      	lsrs	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3208      	adds	r2, #8
 80031a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	08da      	lsrs	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3208      	adds	r2, #8
 80031dc:	6939      	ldr	r1, [r7, #16]
 80031de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	2203      	movs	r2, #3
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0203 	and.w	r2, r3, #3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8098 	beq.w	8003354 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003224:	4a54      	ldr	r2, [pc, #336]	; (8003378 <HAL_GPIO_Init+0x2c8>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	220f      	movs	r2, #15
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800324e:	d019      	beq.n	8003284 <HAL_GPIO_Init+0x1d4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_GPIO_Init+0x2cc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_GPIO_Init+0x1d0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a49      	ldr	r2, [pc, #292]	; (8003380 <HAL_GPIO_Init+0x2d0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00d      	beq.n	800327c <HAL_GPIO_Init+0x1cc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a48      	ldr	r2, [pc, #288]	; (8003384 <HAL_GPIO_Init+0x2d4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <HAL_GPIO_Init+0x1c8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a47      	ldr	r2, [pc, #284]	; (8003388 <HAL_GPIO_Init+0x2d8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_GPIO_Init+0x1c4>
 8003270:	2304      	movs	r3, #4
 8003272:	e008      	b.n	8003286 <HAL_GPIO_Init+0x1d6>
 8003274:	2307      	movs	r3, #7
 8003276:	e006      	b.n	8003286 <HAL_GPIO_Init+0x1d6>
 8003278:	2303      	movs	r3, #3
 800327a:	e004      	b.n	8003286 <HAL_GPIO_Init+0x1d6>
 800327c:	2302      	movs	r3, #2
 800327e:	e002      	b.n	8003286 <HAL_GPIO_Init+0x1d6>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_GPIO_Init+0x1d6>
 8003284:	2300      	movs	r3, #0
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	f002 0203 	and.w	r2, r2, #3
 800328c:	0092      	lsls	r2, r2, #2
 800328e:	4093      	lsls	r3, r2
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003296:	4938      	ldr	r1, [pc, #224]	; (8003378 <HAL_GPIO_Init+0x2c8>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a4:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_GPIO_Init+0x2dc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c8:	4a30      	ldr	r2, [pc, #192]	; (800338c <HAL_GPIO_Init+0x2dc>)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_GPIO_Init+0x2dc>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032f2:	4a26      	ldr	r2, [pc, #152]	; (800338c <HAL_GPIO_Init+0x2dc>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032f8:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_GPIO_Init+0x2dc>)
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800331e:	4a1b      	ldr	r2, [pc, #108]	; (800338c <HAL_GPIO_Init+0x2dc>)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_GPIO_Init+0x2dc>)
 8003328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43db      	mvns	r3, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800334c:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_GPIO_Init+0x2dc>)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3301      	adds	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f aeab 	bne.w	80030c0 <HAL_GPIO_Init+0x10>
  }
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40010000 	.word	0x40010000
 800337c:	48000400 	.word	0x48000400
 8003380:	48000800 	.word	0x48000800
 8003384:	48000c00 	.word	0x48000c00
 8003388:	48001000 	.word	0x48001000
 800338c:	58000800 	.word	0x58000800

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ae:	887a      	ldrh	r2, [r7, #2]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_HSEM_IRQHandler+0x30>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_HSEM_IRQHandler+0x30>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	4906      	ldr	r1, [pc, #24]	; (80033f0 <HAL_HSEM_IRQHandler+0x30>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80033da:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <HAL_HSEM_IRQHandler+0x30>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f807 	bl	80033f4 <HAL_HSEM_FreeCallback>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	58001500 	.word	0x58001500

080033f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e081      	b.n	800351e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fea2 	bl	8002178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	e006      	b.n	8003490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800348e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d104      	bne.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b20      	cmp	r3, #32
 800354c:	f040 80f9 	bne.w	8003742 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_I2C_Mem_Write+0x34>
 8003556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0ed      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Mem_Write+0x4e>
 8003572:	2302      	movs	r3, #2
 8003574:	e0e6      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800357e:	f7ff f9bf 	bl	8002900 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2319      	movs	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fadd 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0d1      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2221      	movs	r2, #33	; 0x21
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035c8:	88f8      	ldrh	r0, [r7, #6]
 80035ca:	893a      	ldrh	r2, [r7, #8]
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	4603      	mov	r3, r0
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f9ed 	bl	80039b8 <I2C_RequestMemoryWrite>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0a9      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2bff      	cmp	r3, #255	; 0xff
 80035f8:	d90e      	bls.n	8003618 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	b2da      	uxtb	r2, r3
 8003606:	8979      	ldrh	r1, [r7, #10]
 8003608:	2300      	movs	r3, #0
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fc57 	bl	8003ec4 <I2C_TransferConfig>
 8003616:	e00f      	b.n	8003638 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	b2da      	uxtb	r2, r3
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	2300      	movs	r3, #0
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fc46 	bl	8003ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fad6 	bl	8003bee <I2C_WaitOnTXISFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e07b      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d034      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x1c8>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d130      	bne.n	80036f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2200      	movs	r2, #0
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa59 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04d      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2bff      	cmp	r3, #255	; 0xff
 80036b0:	d90e      	bls.n	80036d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fbfb 	bl	8003ec4 <I2C_TransferConfig>
 80036ce:	e00f      	b.n	80036f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fbea 	bl	8003ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d19e      	bne.n	8003638 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fabc 	bl	8003c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e01a      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2220      	movs	r2, #32
 8003714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_I2C_Mem_Write+0x224>)
 8003722:	400b      	ands	r3, r1
 8003724:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
  }
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	f040 80fd 	bne.w	8003972 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_I2C_Mem_Read+0x34>
 800377e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0f1      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_I2C_Mem_Read+0x4e>
 800379a:	2302      	movs	r3, #2
 800379c:	e0ea      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037a6:	f7ff f8ab 	bl	8002900 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2319      	movs	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f9c9 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d5      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2222      	movs	r2, #34	; 0x22
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f0:	88f8      	ldrh	r0, [r7, #6]
 80037f2:	893a      	ldrh	r2, [r7, #8]
 80037f4:	8979      	ldrh	r1, [r7, #10]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	4603      	mov	r3, r0
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f92d 	bl	8003a60 <I2C_RequestMemoryRead>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0ad      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2bff      	cmp	r3, #255	; 0xff
 8003820:	d90e      	bls.n	8003840 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	22ff      	movs	r2, #255	; 0xff
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	b2da      	uxtb	r2, r3
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	4b52      	ldr	r3, [pc, #328]	; (800397c <HAL_I2C_Mem_Read+0x22c>)
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fb43 	bl	8003ec4 <I2C_TransferConfig>
 800383e:	e00f      	b.n	8003860 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	8979      	ldrh	r1, [r7, #10]
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_I2C_Mem_Read+0x22c>)
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fb32 	bl	8003ec4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	2200      	movs	r2, #0
 8003868:	2104      	movs	r1, #4
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f970 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07c      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d034      	beq.n	8003920 <HAL_I2C_Mem_Read+0x1d0>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d130      	bne.n	8003920 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f941 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e04d      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2bff      	cmp	r3, #255	; 0xff
 80038e0:	d90e      	bls.n	8003900 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	22ff      	movs	r2, #255	; 0xff
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	8979      	ldrh	r1, [r7, #10]
 80038f0:	2300      	movs	r3, #0
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fae3 	bl	8003ec4 <I2C_TransferConfig>
 80038fe:	e00f      	b.n	8003920 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	b2da      	uxtb	r2, r3
 8003910:	8979      	ldrh	r1, [r7, #10]
 8003912:	2300      	movs	r3, #0
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fad2 	bl	8003ec4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d19a      	bne.n	8003860 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f9a4 	bl	8003c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e01a      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2220      	movs	r2, #32
 8003944:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_I2C_Mem_Read+0x230>)
 8003952:	400b      	ands	r3, r1
 8003954:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	80002400 	.word	0x80002400
 8003980:	fe00e800 	.word	0xfe00e800

08003984 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
  }
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <I2C_RequestMemoryWrite+0xa4>)
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa6f 	bl	8003ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8ff 	bl	8003bee <I2C_WaitOnTXISFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e02c      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	629a      	str	r2, [r3, #40]	; 0x28
 8003a0a:	e015      	b.n	8003a38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	69b9      	ldr	r1, [r7, #24]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8e5 	bl	8003bee <I2C_WaitOnTXISFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e012      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f884 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	80002000 	.word	0x80002000

08003a60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <I2C_RequestMemoryRead+0xa4>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fa1c 	bl	8003ec4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	69b9      	ldr	r1, [r7, #24]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f8ac 	bl	8003bee <I2C_WaitOnTXISFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e02c      	b.n	8003afa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa6:	893b      	ldrh	r3, [r7, #8]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab0:	e015      	b.n	8003ade <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ab2:	893b      	ldrh	r3, [r7, #8]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f892 	bl	8003bee <I2C_WaitOnTXISFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e012      	b.n	8003afa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2140      	movs	r1, #64	; 0x40
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f831 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	80002000 	.word	0x80002000

08003b08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d103      	bne.n	8003b26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d007      	beq.n	8003b44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	619a      	str	r2, [r3, #24]
  }
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b60:	e031      	b.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b68:	d02d      	beq.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fe fec9 	bl	8002900 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d122      	bne.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d113      	bne.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00f      	b.n	8003be6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d0be      	beq.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bfa:	e033      	b.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f87f 	bl	8003d04 <I2C_IsErrorOccurred>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e031      	b.n	8003c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c16:	d025      	beq.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7fe fe72 	bl	8002900 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11a      	bne.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d013      	beq.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e007      	b.n	8003c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d1c4      	bne.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c88:	e02f      	b.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f838 	bl	8003d04 <I2C_IsErrorOccurred>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e02d      	b.n	8003cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe fe2f 	bl	8002900 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11a      	bne.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d013      	beq.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e007      	b.n	8003cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d1c8      	bne.n	8003c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d068      	beq.n	8003e02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2210      	movs	r2, #16
 8003d36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d38:	e049      	b.n	8003dce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d40:	d045      	beq.n	8003dce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe fddd 	bl	8002900 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_IsErrorOccurred+0x54>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d13a      	bne.n	8003dce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d121      	bne.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d82:	d01d      	beq.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d01a      	beq.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d9a:	f7fe fdb1 	bl	8002900 <HAL_GetTick>
 8003d9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da0:	e00e      	b.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003da2:	f7fe fdad 	bl	8002900 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b19      	cmp	r3, #25
 8003dae:	d907      	bls.n	8003dc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f043 0320 	orr.w	r3, r3, #32
 8003db6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003dbe:	e006      	b.n	8003dce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d1e9      	bne.n	8003da2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d003      	beq.n	8003de4 <I2C_IsErrorOccurred+0xe0>
 8003ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0aa      	beq.n	8003d3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2220      	movs	r2, #32
 8003df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f043 0304 	orr.w	r3, r3, #4
 8003dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01c      	beq.n	8003eb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff fe45 	bl	8003b08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <I2C_IsErrorOccurred+0x1bc>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	fe00e800 	.word	0xfe00e800

08003ec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	817b      	strh	r3, [r7, #10]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003edc:	7a7b      	ldrb	r3, [r7, #9]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ee4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	0d5b      	lsrs	r3, r3, #21
 8003efe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <I2C_TransferConfig+0x60>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	43db      	mvns	r3, r3
 8003f08:	ea02 0103 	and.w	r1, r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	03ff63ff 	.word	0x03ff63ff

08003f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d138      	bne.n	8003fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e032      	b.n	8003fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d139      	bne.n	8004048 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e033      	b.n	800404a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2224      	movs	r2, #36	; 0x24
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004010:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01e      	beq.n	80040a8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_IPCC_Init+0x60>)
 800406c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe f8cc 	bl	8002218 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f000 f85b 	bl	800413c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f82c 	bl	80040f0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80040a6:	e001      	b.n	80040ac <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	58000c00 	.word	0x58000c00

080040bc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	4613      	mov	r3, r2
 80040e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e00f      	b.n	800411e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <IPCC_SetDefaultCallbacks+0x44>)
 8004108:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3306      	adds	r3, #6
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	4a08      	ldr	r2, [pc, #32]	; (8004138 <IPCC_SetDefaultCallbacks+0x48>)
 8004116:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b05      	cmp	r3, #5
 8004122:	d9ec      	bls.n	80040fe <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	080040bd 	.word	0x080040bd
 8004138:	080040d7 	.word	0x080040d7

0800413c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004150:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	223f      	movs	r2, #63	; 0x3f
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_RCC_SetLPTIMClockSource>:
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	43db      	mvns	r3, r3
 800417c:	401a      	ands	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_GetLPTIMClockSource>:
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4013      	ands	r3, r2
 80041ac:	0c1a      	lsrs	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4313      	orrs	r3, r2
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_APB1_GRP1_ForceReset>:
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	638b      	str	r3, [r1, #56]	; 0x38
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_APB1_GRP2_ForceReset>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_APB1_GRP1_ReleaseReset>:
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800420e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	43db      	mvns	r3, r3
 8004218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421c:	4013      	ands	r3, r2
 800421e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_APB1_GRP2_ReleaseReset>:
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	43db      	mvns	r3, r3
 800423e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004242:	4013      	ands	r3, r2
 8004244:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e08f      	b.n	8004386 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7fd ffed 	bl	8002260 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d004      	beq.n	80042a8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042a6:	d103      	bne.n	80042b0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 031e 	bic.w	r3, r3, #30
 80042ae:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d005      	beq.n	80042c8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80042c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_LPTIM_Init+0x13c>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80042d8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80042de:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80042e4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80042ea:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004302:	4313      	orrs	r3, r2
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d004      	beq.n	800431c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800431a:	d107      	bne.n	800432c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004324:	4313      	orrs	r3, r2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004334:	4293      	cmp	r3, r2
 8004336:	d00a      	beq.n	800434e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004340:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004346:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_LPTIM_Init+0x140>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	621a      	str	r2, [r3, #32]
 8004370:	e004      	b.n	800437c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800437a:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	ff19f1fe 	.word	0xff19f1fe
 8004394:	40007c00 	.word	0x40007c00

08004398 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a38      	ldr	r2, [pc, #224]	; (8004494 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 80043b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043bc:	4a36      	ldr	r2, [pc, #216]	; (8004498 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 80043be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043c6:	e007      	b.n	80043d8 <HAL_LPTIM_TimeOut_Start_IT+0x40>
 80043c8:	4b33      	ldr	r3, [pc, #204]	; (8004498 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 80043d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80043e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2210      	movs	r2, #16
 80043fe:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004408:	2110      	movs	r1, #16
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f92c 	bl	8004668 <LPTIM_WaitForFlag>
 8004410:	4603      	mov	r3, r0
 8004412:	2b03      	cmp	r3, #3
 8004414:	d101      	bne.n	800441a <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e038      	b.n	800448c <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2208      	movs	r2, #8
 8004420:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800442a:	2108      	movs	r1, #8
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f91b 	bl	8004668 <LPTIM_WaitForFlag>
 8004432:	4603      	mov	r3, r0
 8004434:	2b03      	cmp	r3, #3
 8004436:	d101      	bne.n	800443c <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e027      	b.n	800448c <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f943 	bl	80046c8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f901 	bl	800464a <HAL_LPTIM_GetState>
 8004448:	4603      	mov	r3, r0
 800444a:	2b03      	cmp	r3, #3
 800444c:	d101      	bne.n	8004452 <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e01c      	b.n	800448c <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0201 	orr.w	r2, r2, #1
 8004460:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0204 	orr.w	r2, r2, #4
 8004480:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40007c00 	.word	0x40007c00
 8004498:	58000800 	.word	0x58000800

0800449c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10d      	bne.n	80044ce <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2201      	movs	r2, #1
 80044c6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fd fda9 	bl	8002020 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d10d      	bne.n	80044f8 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d106      	bne.n	80044f8 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2202      	movs	r2, #2
 80044f0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f86d 	bl	80045d2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d10d      	bne.n	8004522 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d106      	bne.n	8004522 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2204      	movs	r2, #4
 800451a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f862 	bl	80045e6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b08      	cmp	r3, #8
 800452e:	d10d      	bne.n	800454c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b08      	cmp	r3, #8
 800453c:	d106      	bne.n	800454c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2208      	movs	r2, #8
 8004544:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f857 	bl	80045fa <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d10d      	bne.n	8004576 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d106      	bne.n	8004576 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2210      	movs	r2, #16
 800456e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f84c 	bl	800460e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b20      	cmp	r3, #32
 8004582:	d10d      	bne.n	80045a0 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b20      	cmp	r3, #32
 8004590:	d106      	bne.n	80045a0 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2220      	movs	r2, #32
 8004598:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f841 	bl	8004622 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d10d      	bne.n	80045ca <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d106      	bne.n	80045ca <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2240      	movs	r2, #64	; 0x40
 80045c2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f836 	bl	8004636 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004658:	b2db      	uxtb	r3, r3
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <LPTIM_WaitForFlag+0x58>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <LPTIM_WaitForFlag+0x5c>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0b9b      	lsrs	r3, r3, #14
 8004682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3b01      	subs	r3, #1
 8004690:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	4013      	ands	r3, r2
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d002      	beq.n	80046b2 <LPTIM_WaitForFlag+0x4a>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ec      	bne.n	800468c <LPTIM_WaitForFlag+0x24>

  return result;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	20000008 	.word	0x20000008
 80046c4:	d1b71759 	.word	0xd1b71759

080046c8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d4:	f3ef 8310 	mrs	r3, PRIMASK
 80046d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80046da:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046de:	2301      	movs	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a62      	ldr	r2, [pc, #392]	; (8004878 <LPTIM_Disable+0x1b0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <LPTIM_Disable+0x34>
 80046f4:	4a61      	ldr	r2, [pc, #388]	; (800487c <LPTIM_Disable+0x1b4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d006      	beq.n	8004708 <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80046fa:	e00b      	b.n	8004714 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80046fc:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004700:	f7ff fd4a 	bl	8004198 <LL_RCC_GetLPTIMClockSource>
 8004704:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8004706:	e005      	b.n	8004714 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004708:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800470c:	f7ff fd44 	bl	8004198 <LL_RCC_GetLPTIMClockSource>
 8004710:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8004712:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a4d      	ldr	r2, [pc, #308]	; (8004878 <LPTIM_Disable+0x1b0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <LPTIM_Disable+0x86>
 8004746:	4a4d      	ldr	r2, [pc, #308]	; (800487c <LPTIM_Disable+0x1b4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800474c:	e00f      	b.n	800476e <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800474e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004752:	f7ff fd34 	bl	80041be <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004756:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800475a:	f7ff fd54 	bl	8004206 <LL_APB1_GRP1_ReleaseReset>
      break;
 800475e:	e006      	b.n	800476e <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004760:	2020      	movs	r0, #32
 8004762:	f7ff fd3e 	bl	80041e2 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004766:	2020      	movs	r0, #32
 8004768:	f7ff fd60 	bl	800422c <LL_APB1_GRP2_ReleaseReset>
      break;
 800476c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <LPTIM_Disable+0xb2>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d05f      	beq.n	800483a <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <LPTIM_Disable+0x1b0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <LPTIM_Disable+0xc4>
 8004784:	4a3d      	ldr	r2, [pc, #244]	; (800487c <LPTIM_Disable+0x1b4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d005      	beq.n	8004796 <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800478a:	e009      	b.n	80047a0 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800478c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004790:	f7ff fce8 	bl	8004164 <LL_RCC_SetLPTIMClockSource>
        break;
 8004794:	e004      	b.n	80047a0 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004796:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800479a:	f7ff fce3 	bl	8004164 <LL_RCC_SetLPTIMClockSource>
        break;
 800479e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01a      	beq.n	80047dc <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80047be:	2108      	movs	r1, #8
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff ff51 	bl	8004668 <LPTIM_WaitForFlag>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d103      	bne.n	80047d4 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2208      	movs	r2, #8
 80047da:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01a      	beq.n	8004818 <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80047fa:	2110      	movs	r1, #16
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff33 	bl	8004668 <LPTIM_WaitForFlag>
 8004802:	4603      	mov	r3, r0
 8004804:	2b03      	cmp	r3, #3
 8004806:	d103      	bne.n	8004810 <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2203      	movs	r2, #3
 800480c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2210      	movs	r2, #16
 8004816:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a16      	ldr	r2, [pc, #88]	; (8004878 <LPTIM_Disable+0x1b0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <LPTIM_Disable+0x162>
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <LPTIM_Disable+0x1b4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004828:	e008      	b.n	800483c <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800482a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800482c:	f7ff fc9a 	bl	8004164 <LL_RCC_SetLPTIMClockSource>
        break;
 8004830:	e004      	b.n	800483c <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004834:	f7ff fc96 	bl	8004164 <LL_RCC_SetLPTIMClockSource>
        break;
 8004838:	e000      	b.n	800483c <LPTIM_Disable+0x174>
    }
  }
 800483a:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004852:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	621a      	str	r2, [r3, #32]
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004870:	bf00      	nop
 8004872:	3730      	adds	r7, #48	; 0x30
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40007c00 	.word	0x40007c00
 800487c:	40009400 	.word	0x40009400

08004880 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488e:	6013      	str	r3, [r2, #0]
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	58000400 	.word	0x58000400

080048a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	58000400 	.word	0x58000400

080048bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ce:	d101      	bne.n	80048d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_RCC_HSE_Enable>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80048e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_RCC_HSE_Disable>:
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_RCC_HSE_IsReady>:
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800492e:	d101      	bne.n	8004934 <LL_RCC_HSE_IsReady+0x18>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <LL_RCC_HSE_IsReady+0x1a>
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_RCC_HSI_Enable>:
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	6013      	str	r3, [r2, #0]
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_RCC_HSI_Disable>:
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800496c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <LL_RCC_HSI_IsReady>:
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498e:	d101      	bne.n	8004994 <LL_RCC_HSI_IsReady+0x18>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <LL_RCC_HSI_IsReady+0x1a>
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_HSI48_Enable>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80049e2:	bf00      	nop
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_HSI48_Disable>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <LL_RCC_HSI48_IsReady>:
{
 8004a0e:	b480      	push	{r7}
 8004a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d101      	bne.n	8004a26 <LL_RCC_HSI48_IsReady+0x18>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <LL_RCC_HSI48_IsReady+0x1a>
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_LSE_Enable>:
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_LSE_Disable>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_RCC_LSE_EnableBypass>:
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a86:	f043 0304 	orr.w	r3, r3, #4
 8004a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a8e:	bf00      	nop
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_RCC_LSE_DisableBypass>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_RCC_LSE_IsReady>:
{
 8004aba:	b480      	push	{r7}
 8004abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d101      	bne.n	8004ad2 <LL_RCC_LSE_IsReady+0x18>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <LL_RCC_LSE_IsReady+0x1a>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_RCC_LSI1_Enable>:
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_RCC_LSI1_Disable>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_LSI1_IsReady>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d101      	bne.n	8004b3a <LL_RCC_LSI1_IsReady+0x18>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_RCC_LSI1_IsReady+0x1a>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LL_RCC_LSI2_Enable>:
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <LL_RCC_LSI2_Disable>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <LL_RCC_LSI2_IsReady>:
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d101      	bne.n	8004ba2 <LL_RCC_LSI2_IsReady+0x18>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <LL_RCC_LSI2_IsReady+0x1a>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <LL_RCC_LSI2_SetTrimming>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_RCC_MSI_Enable>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_MSI_Disable>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_RCC_MSI_IsReady>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d101      	bne.n	8004c2e <LL_RCC_MSI_IsReady+0x16>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <LL_RCC_MSI_IsReady+0x18>
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <LL_RCC_MSI_SetRange>:
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_MSI_GetRange>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2bb0      	cmp	r3, #176	; 0xb0
 8004c78:	d901      	bls.n	8004c7e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004c7a:	23b0      	movs	r3, #176	; 0xb0
 8004c7c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004c7e:	687b      	ldr	r3, [r7, #4]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <LL_RCC_SetSysClkSource>:
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 0203 	bic.w	r2, r3, #3
 8004cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_GetSysClkSource>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <LL_RCC_SetAHBPrescaler>:
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <LL_C2_RCC_SetAHBPrescaler>:
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_RCC_SetAHB4Prescaler>:
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d5a:	f023 020f 	bic.w	r2, r3, #15
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_SetAPB1Prescaler>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <LL_RCC_SetAPB2Prescaler>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	608b      	str	r3, [r1, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_GetAHBPrescaler>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_GetAHB4Prescaler>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_RCC_GetAPB1Prescaler>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_GetAPB2Prescaler>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <LL_RCC_PLL_Enable>:
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_PLL_Disable>:
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_PLL_IsReady>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e7a:	d101      	bne.n	8004e80 <LL_RCC_PLL_IsReady+0x18>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e000      	b.n	8004e82 <LL_RCC_PLL_IsReady+0x1a>
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_RCC_PLL_GetN>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_PLL_GetR>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_RCC_PLL_GetDivider>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_PLL_GetMainSource>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <LL_RCC_IsActiveFlag_HPRE>:
{
 8004eee:	b480      	push	{r7}
 8004ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d101      	bne.n	8004f06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004f12:	b480      	push	{r7}
 8004f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f26:	d101      	bne.n	8004f2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d101      	bne.n	8004f52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f70:	d101      	bne.n	8004f76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f94:	d101      	bne.n	8004f9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
	...

08004fa8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b08d      	sub	sp, #52	; 0x34
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e363      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 808d 	beq.w	80050e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc8:	f7ff fe89 	bl	8004cde <LL_RCC_GetSysClkSource>
 8004fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fce:	f7ff ff82 	bl	8004ed6 <LL_RCC_PLL_GetMainSource>
 8004fd2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x3e>
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d147      	bne.n	8005070 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d144      	bne.n	8005070 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e347      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004ff6:	f7ff fe34 	bl	8004c62 <LL_RCC_MSI_GetRange>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	d914      	bls.n	800502a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fd2f 	bl	8005a68 <RCC_SetFlashLatencyFromMSIRange>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e336      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fe0e 	bl	8004c3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fe32 	bl	8004c8c <LL_RCC_MSI_SetCalibTrimming>
 8005028:	e013      	b.n	8005052 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fe03 	bl	8004c3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fe27 	bl	8004c8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fd10 	bl	8005a68 <RCC_SetFlashLatencyFromMSIRange>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e317      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005052:	f000 fcc9 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 8005056:	4603      	mov	r3, r0
 8005058:	4aa4      	ldr	r2, [pc, #656]	; (80052ec <HAL_RCC_OscConfig+0x344>)
 800505a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800505c:	4ba4      	ldr	r3, [pc, #656]	; (80052f0 <HAL_RCC_OscConfig+0x348>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7fd fbff 	bl	8002864 <HAL_InitTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d039      	beq.n	80050e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e308      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01e      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005078:	f7ff fdb0 	bl	8004bdc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800507c:	f7fd fc40 	bl	8002900 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005084:	f7fd fc3c 	bl	8002900 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e2f5      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005096:	f7ff fdbf 	bl	8004c18 <LL_RCC_MSI_IsReady>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f1      	beq.n	8005084 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fdc8 	bl	8004c3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fdec 	bl	8004c8c <LL_RCC_MSI_SetCalibTrimming>
 80050b4:	e015      	b.n	80050e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050b6:	f7ff fda0 	bl	8004bfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050ba:	f7fd fc21 	bl	8002900 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050c2:	f7fd fc1d 	bl	8002900 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e2d6      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80050d4:	f7ff fda0 	bl	8004c18 <LL_RCC_MSI_IsReady>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f1      	bne.n	80050c2 <HAL_RCC_OscConfig+0x11a>
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d047      	beq.n	800517e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ee:	f7ff fdf6 	bl	8004cde <LL_RCC_GetSysClkSource>
 80050f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050f4:	f7ff feef 	bl	8004ed6 <LL_RCC_PLL_GetMainSource>
 80050f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d005      	beq.n	800510c <HAL_RCC_OscConfig+0x164>
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d108      	bne.n	8005118 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d105      	bne.n	8005118 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d134      	bne.n	800517e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e2b4      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d102      	bne.n	8005128 <HAL_RCC_OscConfig+0x180>
 8005122:	f7ff fbdd 	bl	80048e0 <LL_RCC_HSE_Enable>
 8005126:	e001      	b.n	800512c <HAL_RCC_OscConfig+0x184>
 8005128:	f7ff fbe9 	bl	80048fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd fbe4 	bl	8002900 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800513c:	f7fd fbe0 	bl	8002900 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e299      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800514e:	f7ff fbe5 	bl	800491c <LL_RCC_HSE_IsReady>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f1      	beq.n	800513c <HAL_RCC_OscConfig+0x194>
 8005158:	e011      	b.n	800517e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515a:	f7fd fbd1 	bl	8002900 <HAL_GetTick>
 800515e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005162:	f7fd fbcd 	bl	8002900 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b64      	cmp	r3, #100	; 0x64
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e286      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005174:	f7ff fbd2 	bl	800491c <LL_RCC_HSE_IsReady>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f1      	bne.n	8005162 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04c      	beq.n	8005224 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518a:	f7ff fda8 	bl	8004cde <LL_RCC_GetSysClkSource>
 800518e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005190:	f7ff fea1 	bl	8004ed6 <LL_RCC_PLL_GetMainSource>
 8005194:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_OscConfig+0x200>
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b0c      	cmp	r3, #12
 80051a0:	d10e      	bne.n	80051c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d10b      	bne.n	80051c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e266      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fbf1 	bl	80049a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80051be:	e031      	b.n	8005224 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d019      	beq.n	80051fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c8:	f7ff fbba 	bl	8004940 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd fb98 	bl	8002900 <HAL_GetTick>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fd fb94 	bl	8002900 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e24d      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80051e6:	f7ff fbc9 	bl	800497c <LL_RCC_HSI_IsReady>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f1      	beq.n	80051d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff fbd3 	bl	80049a0 <LL_RCC_HSI_SetCalibTrimming>
 80051fa:	e013      	b.n	8005224 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051fc:	f7ff fbaf 	bl	800495e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fd fb7e 	bl	8002900 <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005208:	f7fd fb7a 	bl	8002900 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e233      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800521a:	f7ff fbaf 	bl	800497c <LL_RCC_HSI_IsReady>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1f1      	bne.n	8005208 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80a3 	beq.w	8005384 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d076      	beq.n	8005334 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d046      	beq.n	80052e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005252:	f7ff fc66 	bl	8004b22 <LL_RCC_LSI1_IsReady>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d113      	bne.n	8005284 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800525c:	f7ff fc3f 	bl	8004ade <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005260:	f7fd fb4e 	bl	8002900 <HAL_GetTick>
 8005264:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005268:	f7fd fb4a 	bl	8002900 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e203      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800527a:	f7ff fc52 	bl	8004b22 <LL_RCC_LSI1_IsReady>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0f1      	beq.n	8005268 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005284:	f7ff fc5f 	bl	8004b46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fb3a 	bl	8002900 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005290:	f7fd fb36 	bl	8002900 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b03      	cmp	r3, #3
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1ef      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80052a2:	f7ff fc72 	bl	8004b8a <LL_RCC_LSI2_IsReady>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f1      	beq.n	8005290 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fc7c 	bl	8004bae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80052b6:	f7ff fc23 	bl	8004b00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fd fb21 	bl	8002900 <HAL_GetTick>
 80052be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052c2:	f7fd fb1d 	bl	8002900 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e1d6      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80052d4:	f7ff fc25 	bl	8004b22 <LL_RCC_LSI1_IsReady>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f1      	bne.n	80052c2 <HAL_RCC_OscConfig+0x31a>
 80052de:	e051      	b.n	8005384 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80052e0:	f7ff fbfd 	bl	8004ade <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fd fb0c 	bl	8002900 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80052ea:	e00c      	b.n	8005306 <HAL_RCC_OscConfig+0x35e>
 80052ec:	20000008 	.word	0x20000008
 80052f0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052f4:	f7fd fb04 	bl	8002900 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e1bd      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005306:	f7ff fc0c 	bl	8004b22 <LL_RCC_LSI1_IsReady>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f1      	beq.n	80052f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005310:	f7ff fc2a 	bl	8004b68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005316:	f7fd faf3 	bl	8002900 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b03      	cmp	r3, #3
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e1ac      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005328:	f7ff fc2f 	bl	8004b8a <LL_RCC_LSI2_IsReady>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f1      	bne.n	8005316 <HAL_RCC_OscConfig+0x36e>
 8005332:	e027      	b.n	8005384 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005334:	f7ff fc18 	bl	8004b68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd fae2 	bl	8002900 <HAL_GetTick>
 800533c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005340:	f7fd fade 	bl	8002900 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b03      	cmp	r3, #3
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e197      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005352:	f7ff fc1a 	bl	8004b8a <LL_RCC_LSI2_IsReady>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f1      	bne.n	8005340 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800535c:	f7ff fbd0 	bl	8004b00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005360:	f7fd face 	bl	8002900 <HAL_GetTick>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005368:	f7fd faca 	bl	8002900 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e183      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800537a:	f7ff fbd2 	bl	8004b22 <LL_RCC_LSI1_IsReady>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f1      	bne.n	8005368 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d05b      	beq.n	8005448 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005390:	4ba7      	ldr	r3, [pc, #668]	; (8005630 <HAL_RCC_OscConfig+0x688>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d114      	bne.n	80053c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800539c:	f7ff fa70 	bl	8004880 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a0:	f7fd faae 	bl	8002900 <HAL_GetTick>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a8:	f7fd faaa 	bl	8002900 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e163      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ba:	4b9d      	ldr	r3, [pc, #628]	; (8005630 <HAL_RCC_OscConfig+0x688>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_OscConfig+0x42c>
 80053ce:	f7ff fb30 	bl	8004a32 <LL_RCC_LSE_Enable>
 80053d2:	e00c      	b.n	80053ee <HAL_RCC_OscConfig+0x446>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d104      	bne.n	80053e6 <HAL_RCC_OscConfig+0x43e>
 80053dc:	f7ff fb4b 	bl	8004a76 <LL_RCC_LSE_EnableBypass>
 80053e0:	f7ff fb27 	bl	8004a32 <LL_RCC_LSE_Enable>
 80053e4:	e003      	b.n	80053ee <HAL_RCC_OscConfig+0x446>
 80053e6:	f7ff fb35 	bl	8004a54 <LL_RCC_LSE_Disable>
 80053ea:	f7ff fb55 	bl	8004a98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d014      	beq.n	8005420 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f6:	f7fd fa83 	bl	8002900 <HAL_GetTick>
 80053fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd fa7f 	bl	8002900 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	; 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e136      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005414:	f7ff fb51 	bl	8004aba <LL_RCC_LSE_IsReady>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0ef      	beq.n	80053fe <HAL_RCC_OscConfig+0x456>
 800541e:	e013      	b.n	8005448 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005420:	f7fd fa6e 	bl	8002900 <HAL_GetTick>
 8005424:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fd fa6a 	bl	8002900 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e121      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800543e:	f7ff fb3c 	bl	8004aba <LL_RCC_LSE_IsReady>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ef      	bne.n	8005428 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d02c      	beq.n	80054ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d014      	beq.n	8005486 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800545c:	f7ff fab5 	bl	80049ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fd fa4e 	bl	8002900 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005468:	f7fd fa4a 	bl	8002900 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e103      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800547a:	f7ff fac8 	bl	8004a0e <LL_RCC_HSI48_IsReady>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f1      	beq.n	8005468 <HAL_RCC_OscConfig+0x4c0>
 8005484:	e013      	b.n	80054ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005486:	f7ff fab1 	bl	80049ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fd fa39 	bl	8002900 <HAL_GetTick>
 800548e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005492:	f7fd fa35 	bl	8002900 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e0ee      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80054a4:	f7ff fab3 	bl	8004a0e <LL_RCC_HSI48_IsReady>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f1      	bne.n	8005492 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80e4 	beq.w	8005680 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b8:	f7ff fc11 	bl	8004cde <LL_RCC_GetSysClkSource>
 80054bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	f040 80b4 	bne.w	8005638 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0203 	and.w	r2, r3, #3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	429a      	cmp	r2, r3
 80054dc:	d123      	bne.n	8005526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d11c      	bne.n	8005526 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d114      	bne.n	8005526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d10d      	bne.n	8005526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d106      	bne.n	8005526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d05d      	beq.n	80055e2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b0c      	cmp	r3, #12
 800552a:	d058      	beq.n	80055de <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0a1      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800553e:	f7ff fc84 	bl	8004e4a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005542:	f7fd f9dd 	bl	8002900 <HAL_GetTick>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554a:	f7fd f9d9 	bl	8002900 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e092      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1ef      	bne.n	800554a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	4b30      	ldr	r3, [pc, #192]	; (8005634 <HAL_RCC_OscConfig+0x68c>)
 8005572:	4013      	ands	r3, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800557c:	4311      	orrs	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005582:	0212      	lsls	r2, r2, #8
 8005584:	4311      	orrs	r1, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800558a:	4311      	orrs	r1, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005590:	4311      	orrs	r1, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005596:	430a      	orrs	r2, r1
 8005598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800559c:	4313      	orrs	r3, r2
 800559e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055a0:	f7ff fc44 	bl	8004e2c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055b4:	f7fd f9a4 	bl	8002900 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fd f9a0 	bl	8002900 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e059      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0ef      	beq.n	80055bc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055dc:	e050      	b.n	8005680 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e04f      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d147      	bne.n	8005680 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055f0:	f7ff fc1c 	bl	8004e2c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005602:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005604:	f7fd f97c 	bl	8002900 <HAL_GetTick>
 8005608:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560c:	f7fd f978 	bl	8002900 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e031      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ef      	beq.n	800560c <HAL_RCC_OscConfig+0x664>
 800562c:	e028      	b.n	8005680 <HAL_RCC_OscConfig+0x6d8>
 800562e:	bf00      	nop
 8005630:	58000400 	.word	0x58000400
 8005634:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0c      	cmp	r3, #12
 800563c:	d01e      	beq.n	800567c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800563e:	f7ff fc04 	bl	8004e4a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fd f95d 	bl	8002900 <HAL_GetTick>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fd f959 	bl	8002900 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e012      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1ef      	bne.n	800564a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800566a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_OscConfig+0x6e4>)
 8005676:	4013      	ands	r3, r2
 8005678:	60cb      	str	r3, [r1, #12]
 800567a:	e001      	b.n	8005680 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3734      	adds	r7, #52	; 0x34
 8005686:	46bd      	mov	sp, r7
 8005688:	bd90      	pop	{r4, r7, pc}
 800568a:	bf00      	nop
 800568c:	eefefffc 	.word	0xeefefffc

08005690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e12d      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a4:	4b98      	ldr	r3, [pc, #608]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d91b      	bls.n	80056ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b95      	ldr	r3, [pc, #596]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 0207 	bic.w	r2, r3, #7
 80056ba:	4993      	ldr	r1, [pc, #588]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c2:	f7fd f91d 	bl	8002900 <HAL_GetTick>
 80056c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056ca:	f7fd f919 	bl	8002900 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e111      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056dc:	4b8a      	ldr	r3, [pc, #552]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d1ef      	bne.n	80056ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fafb 	bl	8004cf6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005700:	f7fd f8fe 	bl	8002900 <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005708:	f7fd f8fa 	bl	8002900 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0f2      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800571a:	f7ff fbe8 	bl	8004eee <LL_RCC_IsActiveFlag_HPRE>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f1      	beq.n	8005708 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d016      	beq.n	800575e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff faf2 	bl	8004d1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800573a:	f7fd f8e1 	bl	8002900 <HAL_GetTick>
 800573e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005742:	f7fd f8dd 	bl	8002900 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e0d5      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005754:	f7ff fbdd 	bl	8004f12 <LL_RCC_IsActiveFlag_C2HPRE>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f1      	beq.n	8005742 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff faeb 	bl	8004d4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005774:	f7fd f8c4 	bl	8002900 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800577c:	f7fd f8c0 	bl	8002900 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e0b8      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800578e:	f7ff fbd3 	bl	8004f38 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f1      	beq.n	800577c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d016      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fae5 	bl	8004d78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057ae:	f7fd f8a7 	bl	8002900 <HAL_GetTick>
 80057b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057b6:	f7fd f8a3 	bl	8002900 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e09b      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057c8:	f7ff fbc9 	bl	8004f5e <LL_RCC_IsActiveFlag_PPRE1>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f1      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d017      	beq.n	800580e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fadb 	bl	8004da0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057ea:	f7fd f889 	bl	8002900 <HAL_GetTick>
 80057ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057f2:	f7fd f885 	bl	8002900 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e07d      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005804:	f7ff fbbd 	bl	8004f82 <LL_RCC_IsActiveFlag_PPRE2>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f1      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d043      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d106      	bne.n	8005830 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005822:	f7ff f87b 	bl	800491c <LL_RCC_HSE_IsReady>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11e      	bne.n	800586a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e067      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d106      	bne.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005838:	f7ff fb16 	bl	8004e68 <LL_RCC_PLL_IsReady>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d113      	bne.n	800586a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e05c      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800584e:	f7ff f9e3 	bl	8004c18 <LL_RCC_MSI_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e051      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800585c:	f7ff f88e 	bl	800497c <LL_RCC_HSI_IsReady>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e04a      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fa21 	bl	8004cb6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005874:	f7fd f844 	bl	8002900 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587a:	e00a      	b.n	8005892 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800587c:	f7fd f840 	bl	8002900 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	; 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e036      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005892:	f7ff fa24 	bl	8004cde <LL_RCC_GetSysClkSource>
 8005896:	4602      	mov	r2, r0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	429a      	cmp	r2, r3
 80058a0:	d1ec      	bne.n	800587c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d21b      	bcs.n	80058e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b0:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 0207 	bic.w	r2, r3, #7
 80058b8:	4913      	ldr	r1, [pc, #76]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c0:	f7fd f81e 	bl	8002900 <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c6:	e008      	b.n	80058da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058c8:	f7fd f81a 	bl	8002900 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e012      	b.n	8005900 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <HAL_RCC_ClockConfig+0x278>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1ef      	bne.n	80058c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058e8:	f000 f87e 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 80058ec:	4603      	mov	r3, r0
 80058ee:	4a07      	ldr	r2, [pc, #28]	; (800590c <HAL_RCC_ClockConfig+0x27c>)
 80058f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80058f2:	f7fd f811 	bl	8002918 <HAL_GetTickPrio>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fc ffb3 	bl	8002864 <HAL_InitTick>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	58004000 	.word	0x58004000
 800590c:	20000008 	.word	0x20000008

08005910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005916:	f7ff f9e2 	bl	8004cde <LL_RCC_GetSysClkSource>
 800591a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005922:	f7ff f99e 	bl	8004c62 <LL_RCC_MSI_GetRange>
 8005926:	4603      	mov	r3, r0
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	4a2b      	ldr	r2, [pc, #172]	; (80059dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e04b      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d102      	bne.n	8005944 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800593e:	4b28      	ldr	r3, [pc, #160]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e045      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b08      	cmp	r3, #8
 8005948:	d10a      	bne.n	8005960 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800594a:	f7fe ffb7 	bl	80048bc <LL_RCC_HSE_IsEnabledDiv2>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e03a      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800595a:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e037      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005960:	f7ff fab9 	bl	8004ed6 <LL_RCC_PLL_GetMainSource>
 8005964:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d003      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x64>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d003      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x6a>
 8005972:	e00d      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005976:	60bb      	str	r3, [r7, #8]
        break;
 8005978:	e015      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800597a:	f7fe ff9f 	bl	80048bc <LL_RCC_HSE_IsEnabledDiv2>
 800597e:	4603      	mov	r3, r0
 8005980:	2b01      	cmp	r3, #1
 8005982:	d102      	bne.n	800598a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005984:	4b16      	ldr	r3, [pc, #88]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005986:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005988:	e00d      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800598a:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800598c:	60bb      	str	r3, [r7, #8]
        break;
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005990:	f7ff f967 	bl	8004c62 <LL_RCC_MSI_GetRange>
 8005994:	4603      	mov	r3, r0
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	4a0f      	ldr	r2, [pc, #60]	; (80059dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800599e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a2:	60bb      	str	r3, [r7, #8]
        break;
 80059a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80059a6:	f7ff fa71 	bl	8004e8c <LL_RCC_PLL_GetN>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	fb03 f402 	mul.w	r4, r3, r2
 80059b2:	f7ff fa84 	bl	8004ebe <LL_RCC_PLL_GetDivider>
 80059b6:	4603      	mov	r3, r0
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	3301      	adds	r3, #1
 80059bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80059c0:	f7ff fa71 	bl	8004ea6 <LL_RCC_PLL_GetR>
 80059c4:	4603      	mov	r3, r0
 80059c6:	0f5b      	lsrs	r3, r3, #29
 80059c8:	3301      	adds	r3, #1
 80059ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80059ce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}
 80059da:	bf00      	nop
 80059dc:	0800bd44 	.word	0x0800bd44
 80059e0:	00f42400 	.word	0x00f42400
 80059e4:	01e84800 	.word	0x01e84800

080059e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e8:	b598      	push	{r3, r4, r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80059ec:	f7ff ff90 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 80059f0:	4604      	mov	r4, r0
 80059f2:	f7ff f9e9 	bl	8004dc8 <LL_RCC_GetAHBPrescaler>
 80059f6:	4603      	mov	r3, r0
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	4a03      	ldr	r2, [pc, #12]	; (8005a0c <HAL_RCC_GetHCLKFreq+0x24>)
 8005a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd98      	pop	{r3, r4, r7, pc}
 8005a0c:	0800bce4 	.word	0x0800bce4

08005a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a10:	b598      	push	{r3, r4, r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a14:	f7ff ffe8 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 8005a18:	4604      	mov	r4, r0
 8005a1a:	f7ff f9ef 	bl	8004dfc <LL_RCC_GetAPB1Prescaler>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd98      	pop	{r3, r4, r7, pc}
 8005a38:	0800bd24 	.word	0x0800bd24

08005a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a3c:	b598      	push	{r3, r4, r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005a40:	f7ff ffd2 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 8005a44:	4604      	mov	r4, r0
 8005a46:	f7ff f9e5 	bl	8004e14 <LL_RCC_GetAPB2Prescaler>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	0adb      	lsrs	r3, r3, #11
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	bd98      	pop	{r3, r4, r7, pc}
 8005a64:	0800bd24 	.word	0x0800bd24

08005a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2bb0      	cmp	r3, #176	; 0xb0
 8005a74:	d903      	bls.n	8005a7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005a76:	4b15      	ldr	r3, [pc, #84]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e007      	b.n	8005a8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	4a11      	ldr	r2, [pc, #68]	; (8005acc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a8e:	f7ff f9a7 	bl	8004de0 <LL_RCC_GetAHB4Prescaler>
 8005a92:	4603      	mov	r3, r0
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	4a0d      	ldr	r2, [pc, #52]	; (8005ad0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005aac:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab0:	0c9c      	lsrs	r4, r3, #18
 8005ab2:	f7fe fef5 	bl	80048a0 <HAL_PWREx_GetVoltageRange>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f80c 	bl	8005ad8 <RCC_SetFlashLatency>
 8005ac0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd90      	pop	{r4, r7, pc}
 8005aca:	bf00      	nop
 8005acc:	0800bd44 	.word	0x0800bd44
 8005ad0:	0800bce4 	.word	0x0800bce4
 8005ad4:	431bde83 	.word	0x431bde83

08005ad8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b093      	sub	sp, #76	; 0x4c
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005ae2:	4b37      	ldr	r3, [pc, #220]	; (8005bc0 <RCC_SetFlashLatency+0xe8>)
 8005ae4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005aee:	4a35      	ldr	r2, [pc, #212]	; (8005bc4 <RCC_SetFlashLatency+0xec>)
 8005af0:	f107 031c 	add.w	r3, r7, #28
 8005af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <RCC_SetFlashLatency+0xf0>)
 8005afc:	f107 040c 	add.w	r4, r7, #12
 8005b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b06:	2300      	movs	r3, #0
 8005b08:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b10:	d11a      	bne.n	8005b48 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	643b      	str	r3, [r7, #64]	; 0x40
 8005b16:	e013      	b.n	8005b40 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	3348      	adds	r3, #72	; 0x48
 8005b1e:	443b      	add	r3, r7
 8005b20:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d807      	bhi.n	8005b3a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	3348      	adds	r3, #72	; 0x48
 8005b30:	443b      	add	r3, r7
 8005b32:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b36:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b38:	e020      	b.n	8005b7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d9e8      	bls.n	8005b18 <RCC_SetFlashLatency+0x40>
 8005b46:	e019      	b.n	8005b7c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b4c:	e013      	b.n	8005b76 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	3348      	adds	r3, #72	; 0x48
 8005b54:	443b      	add	r3, r7
 8005b56:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d807      	bhi.n	8005b70 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	3348      	adds	r3, #72	; 0x48
 8005b66:	443b      	add	r3, r7
 8005b68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005b6c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005b6e:	e005      	b.n	8005b7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b72:	3301      	adds	r3, #1
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d9e8      	bls.n	8005b4e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <RCC_SetFlashLatency+0xf4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f023 0207 	bic.w	r2, r3, #7
 8005b84:	4911      	ldr	r1, [pc, #68]	; (8005bcc <RCC_SetFlashLatency+0xf4>)
 8005b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b8c:	f7fc feb8 	bl	8002900 <HAL_GetTick>
 8005b90:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b92:	e008      	b.n	8005ba6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b94:	f7fc feb4 	bl	8002900 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e007      	b.n	8005bb6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <RCC_SetFlashLatency+0xf4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d1ef      	bne.n	8005b94 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	374c      	adds	r7, #76	; 0x4c
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	0800bb40 	.word	0x0800bb40
 8005bc4:	0800bb50 	.word	0x0800bb50
 8005bc8:	0800bb5c 	.word	0x0800bb5c
 8005bcc:	58004000 	.word	0x58004000

08005bd0 <LL_RCC_LSE_IsEnabled>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <LL_RCC_LSE_IsEnabled+0x18>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <LL_RCC_LSE_IsEnabled+0x1a>
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_RCC_LSE_IsReady>:
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d101      	bne.n	8005c0c <LL_RCC_LSE_IsReady+0x18>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <LL_RCC_LSE_IsReady+0x1a>
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <LL_RCC_SetRFWKPClockSource>:
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_SetSMPSClockSource>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	f023 0203 	bic.w	r2, r3, #3
 8005c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_SetSMPSPrescaler>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <LL_RCC_SetUSARTClockSource>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca4:	f023 0203 	bic.w	r2, r3, #3
 8005ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <LL_RCC_SetLPUARTClockSource>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_SetI2CClockSource>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d04:	43db      	mvns	r3, r3
 8005d06:	401a      	ands	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <LL_RCC_SetLPTIMClockSource>:
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	401a      	ands	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_SetSAIClockSource>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <LL_RCC_SetRNGClockSource>:
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <LL_RCC_SetCLK48ClockSource>:
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <LL_RCC_SetUSBClockSource>:
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff ffe3 	bl	8005db2 <LL_RCC_SetCLK48ClockSource>
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <LL_RCC_SetADCClockSource>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <LL_RCC_SetRTCClockSource>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <LL_RCC_GetRTCClockSource>:
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <LL_RCC_ForceBackupDomainReset>:
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <LL_RCC_PLLSAI1_Enable>:
{
 8005eaa:	b480      	push	{r7}
 8005eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ebc:	6013      	str	r3, [r2, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_RCC_PLLSAI1_Disable>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ed6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eda:	6013      	str	r3, [r2, #0]
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <LL_RCC_PLLSAI1_IsReady>:
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef8:	d101      	bne.n	8005efe <LL_RCC_PLLSAI1_IsReady+0x18>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005f12:	2300      	movs	r3, #0
 8005f14:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005f16:	2300      	movs	r3, #0
 8005f18:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d034      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f2e:	d021      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f34:	d81b      	bhi.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f3a:	d01d      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f40:	d815      	bhi.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f4a:	d110      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f5c:	e00d      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 f947 	bl	80061f6 <RCCEx_PLLSAI1_ConfigNP>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f6c:	e005      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	77fb      	strb	r3, [r7, #31]
        break;
 8005f72:	e002      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7a:	7ffb      	ldrb	r3, [r7, #31]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fee8 	bl	8005d5a <LL_RCC_SetSAIClockSource>
 8005f8a:	e001      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8c:	7ffb      	ldrb	r3, [r7, #31]
 8005f8e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d046      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005f9c:	f7ff ff56 	bl	8005e4c <LL_RCC_GetRTCClockSource>
 8005fa0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d03c      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005fac:	f7fe fc68 	bl	8004880 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff ff30 	bl	8005e20 <LL_RCC_SetRTCClockSource>
 8005fc0:	e02e      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005fcc:	f7ff ff4b 	bl	8005e66 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005fd0:	f7ff ff5a 	bl	8005e88 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005fec:	f7ff fdf0 	bl	8005bd0 <LL_RCC_LSE_IsEnabled>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d114      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ff6:	f7fc fc83 	bl	8002900 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ffc:	e00b      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fc fc7f 	bl	8002900 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d902      	bls.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	77fb      	strb	r3, [r7, #31]
              break;
 8006014:	e004      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006016:	f7ff fded 	bl	8005bf4 <LL_RCC_LSE_IsReady>
 800601a:	4603      	mov	r3, r0
 800601c:	2b01      	cmp	r3, #1
 800601e:	d1ee      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006020:	7ffb      	ldrb	r3, [r7, #31]
 8006022:	77bb      	strb	r3, [r7, #30]
 8006024:	e001      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	7ffb      	ldrb	r3, [r7, #31]
 8006028:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fe2a 	bl	8005c94 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fe35 	bl	8005cc0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fe5d 	bl	8005d26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fe52 	bl	8005d26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fe2a 	bl	8005cec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fe1f 	bl	8005cec <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d022      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fe8d 	bl	8005dde <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060cc:	d107      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80060ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060dc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060e6:	d10b      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 f8dd 	bl	80062ac <RCCEx_PLLSAI1_ConfigNQ>
 80060f2:	4603      	mov	r3, r0
 80060f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80060fc:	7ffb      	ldrb	r3, [r7, #31]
 80060fe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006108:	2b00      	cmp	r3, #0
 800610a:	d02b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d008      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611e:	d003      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff fe2a 	bl	8005d86 <LL_RCC_SetRNGClockSource>
 8006132:	e00a      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	2000      	movs	r0, #0
 8006140:	f7ff fe21 	bl	8005d86 <LL_RCC_SetRNGClockSource>
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fe34 	bl	8005db2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006152:	d107      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006162:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	2b00      	cmp	r3, #0
 800616e:	d022      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff fe3d 	bl	8005df4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006182:	d107      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800618e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006192:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800619c:	d10b      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f8dd 	bl	8006362 <RCCEx_PLLSAI1_ConfigNR>
 80061a8:	4603      	mov	r3, r0
 80061aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80061ac:	7ffb      	ldrb	r3, [r7, #31]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
 80061b4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fd26 	bl	8005c18 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fd45 	bl	8005c6c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fd2c 	bl	8005c44 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80061ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006202:	f7ff fe61 	bl	8005ec8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006206:	f7fc fb7b 	bl	8002900 <HAL_GetTick>
 800620a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800620c:	e009      	b.n	8006222 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800620e:	f7fc fb77 	bl	8002900 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d902      	bls.n	8006222 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e004      	b.n	800622c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006222:	f7ff fe60 	bl	8005ee6 <LL_RCC_PLLSAI1_IsReady>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f0      	bne.n	800620e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d137      	bne.n	80062a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006246:	4313      	orrs	r3, r2
 8006248:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800624a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800625c:	4313      	orrs	r3, r2
 800625e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006260:	f7ff fe23 	bl	8005eaa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006264:	f7fc fb4c 	bl	8002900 <HAL_GetTick>
 8006268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800626a:	e009      	b.n	8006280 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800626c:	f7fc fb48 	bl	8002900 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d902      	bls.n	8006280 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	73fb      	strb	r3, [r7, #15]
        break;
 800627e:	e004      	b.n	800628a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006280:	f7ff fe31 	bl	8005ee6 <LL_RCC_PLLSAI1_IsReady>
 8006284:	4603      	mov	r3, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d1f0      	bne.n	800626c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d108      	bne.n	80062a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	4313      	orrs	r3, r2
 80062a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062b8:	f7ff fe06 	bl	8005ec8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062bc:	f7fc fb20 	bl	8002900 <HAL_GetTick>
 80062c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062c2:	e009      	b.n	80062d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062c4:	f7fc fb1c 	bl	8002900 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d902      	bls.n	80062d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	73fb      	strb	r3, [r7, #15]
      break;
 80062d6:	e004      	b.n	80062e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062d8:	f7ff fe05 	bl	8005ee6 <LL_RCC_PLLSAI1_IsReady>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d137      	bne.n	8006358 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062fc:	4313      	orrs	r3, r2
 80062fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006312:	4313      	orrs	r3, r2
 8006314:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006316:	f7ff fdc8 	bl	8005eaa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fc faf1 	bl	8002900 <HAL_GetTick>
 800631e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006320:	e009      	b.n	8006336 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006322:	f7fc faed 	bl	8002900 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d902      	bls.n	8006336 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	73fb      	strb	r3, [r7, #15]
        break;
 8006334:	e004      	b.n	8006340 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006336:	f7ff fdd6 	bl	8005ee6 <LL_RCC_PLLSAI1_IsReady>
 800633a:	4603      	mov	r3, r0
 800633c:	2b01      	cmp	r3, #1
 800633e:	d1f0      	bne.n	8006322 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d108      	bne.n	8006358 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006354:	4313      	orrs	r3, r2
 8006356:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800636e:	f7ff fdab 	bl	8005ec8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006372:	f7fc fac5 	bl	8002900 <HAL_GetTick>
 8006376:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006378:	e009      	b.n	800638e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800637a:	f7fc fac1 	bl	8002900 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d902      	bls.n	800638e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	e004      	b.n	8006398 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800638e:	f7ff fdaa 	bl	8005ee6 <LL_RCC_PLLSAI1_IsReady>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f0      	bne.n	800637a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d137      	bne.n	800640e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800639e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063c8:	4313      	orrs	r3, r2
 80063ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063cc:	f7ff fd6d 	bl	8005eaa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d0:	f7fc fa96 	bl	8002900 <HAL_GetTick>
 80063d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063d6:	e009      	b.n	80063ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063d8:	f7fc fa92 	bl	8002900 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d902      	bls.n	80063ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	73fb      	strb	r3, [r7, #15]
        break;
 80063ea:	e004      	b.n	80063f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063ec:	f7ff fd7b 	bl	8005ee6 <LL_RCC_PLLSAI1_IsReady>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d1f0      	bne.n	80063d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800640a:	4313      	orrs	r3, r2
 800640c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e09f      	b.n	800656a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fb ff40 	bl	80022c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800644c:	4b49      	ldr	r3, [pc, #292]	; (8006574 <HAL_RTC_Init+0x15c>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b10      	cmp	r3, #16
 8006456:	d07e      	beq.n	8006556 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	22ca      	movs	r2, #202	; 0xca
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2253      	movs	r2, #83	; 0x53
 8006466:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f8ab 	bl	80065c4 <RTC_EnterInitMode>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	22ff      	movs	r2, #255	; 0xff
 800647a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2204      	movs	r2, #4
 8006480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e067      	b.n	800655a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6899      	ldr	r1, [r3, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68d2      	ldr	r2, [r2, #12]
 80064c4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6919      	ldr	r1, [r3, #16]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	041a      	lsls	r2, r3, #16
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0203 	bic.w	r2, r2, #3
 80064f8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d113      	bne.n	8006548 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f829 	bl	8006578 <HAL_RTC_WaitForSynchro>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	22ff      	movs	r2, #255	; 0xff
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2204      	movs	r2, #4
 8006538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e010      	b.n	800656a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	e001      	b.n	800655a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40002800 	.word	0x40002800

08006578 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800658e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006590:	f7fc f9b6 	bl	8002900 <HAL_GetTick>
 8006594:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006596:	e009      	b.n	80065ac <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006598:	f7fc f9b2 	bl	8002900 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a6:	d901      	bls.n	80065ac <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e007      	b.n	80065bc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ee      	beq.n	8006598 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065e4:	f7fc f98c 	bl	8002900 <HAL_GetTick>
 80065e8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065ea:	e009      	b.n	8006600 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80065ec:	f7fc f988 	bl	8002900 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065fa:	d901      	bls.n	8006600 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e007      	b.n	8006610 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0ee      	beq.n	80065ec <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800662e:	2302      	movs	r3, #2
 8006630:	e0a8      	b.n	8006784 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2202      	movs	r2, #2
 800663e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	22ca      	movs	r2, #202	; 0xca
 8006648:	625a      	str	r2, [r3, #36]	; 0x24
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2253      	movs	r2, #83	; 0x53
 8006650:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665c:	2b00      	cmp	r3, #0
 800665e:	d020      	beq.n	80066a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006660:	f7fc f94e 	bl	8002900 <HAL_GetTick>
 8006664:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006666:	e015      	b.n	8006694 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006668:	f7fc f94a 	bl	8002900 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006676:	d90d      	bls.n	8006694 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	22ff      	movs	r2, #255	; 0xff
 800667e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2203      	movs	r2, #3
 8006684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e077      	b.n	8006784 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e2      	bne.n	8006668 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80066c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80066c4:	f7fc f91c 	bl	8002900 <HAL_GetTick>
 80066c8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80066ca:	e015      	b.n	80066f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066cc:	f7fc f918 	bl	8002900 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066da:	d90d      	bls.n	80066f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2203      	movs	r2, #3
 80066e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e045      	b.n	8006784 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	d0e2      	beq.n	80066cc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0207 	bic.w	r2, r2, #7
 800671c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800672e:	4b17      	ldr	r3, [pc, #92]	; (800678c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006734:	4a15      	ldr	r2, [pc, #84]	; (800678c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800673a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a12      	ldr	r2, [pc, #72]	; (800678c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006748:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006758:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006768:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	22ff      	movs	r2, #255	; 0xff
 8006770:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	58000800 	.word	0x58000800

08006790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e095      	b.n	80068ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d108      	bne.n	80067bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067b2:	d009      	beq.n	80067c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	61da      	str	r2, [r3, #28]
 80067ba:	e005      	b.n	80067c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fb fda2 	bl	800232c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006808:	d902      	bls.n	8006810 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e002      	b.n	8006816 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006814:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800681e:	d007      	beq.n	8006830 <HAL_SPI_Init+0xa0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006828:	d002      	beq.n	8006830 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	ea42 0103 	orr.w	r1, r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	0c1b      	lsrs	r3, r3, #16
 800688c:	f003 0204 	and.w	r2, r3, #4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068ac:	ea42 0103 	orr.w	r1, r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	099b      	lsrs	r3, r3, #6
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10f      	bne.n	800691c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	099b      	lsrs	r3, r3, #6
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
    return;
 800691a:	e0d7      	b.n	8006acc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_SPI_IRQHandler+0x66>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	09db      	lsrs	r3, r3, #7
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
    return;
 800693c:	e0c6      	b.n	8006acc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10c      	bne.n	8006964 <HAL_SPI_IRQHandler+0x8c>
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	099b      	lsrs	r3, r3, #6
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80b4 	beq.w	8006acc <HAL_SPI_IRQHandler+0x1f4>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80ad 	beq.w	8006acc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	099b      	lsrs	r3, r3, #6
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d023      	beq.n	80069c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b03      	cmp	r3, #3
 8006988:	d011      	beq.n	80069ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698e:	f043 0204 	orr.w	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	e00b      	b.n	80069c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	693b      	ldr	r3, [r7, #16]
        return;
 80069c4:	e082      	b.n	8006acc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d014      	beq.n	80069fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d6:	f043 0201 	orr.w	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	0a1b      	lsrs	r3, r3, #8
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00c      	beq.n	8006a22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0c:	f043 0208 	orr.w	r2, r3, #8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a14:	2300      	movs	r3, #0
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d04f      	beq.n	8006aca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <HAL_SPI_IRQHandler+0x17e>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d034      	beq.n	8006ac0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0203 	bic.w	r2, r2, #3
 8006a64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d011      	beq.n	8006a92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fc f9a6 	bl	8002dcc <HAL_DMA_Abort_IT>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fc f990 	bl	8002dcc <HAL_DMA_Abort_IT>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006abe:	e003      	b.n	8006ac8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f809 	bl	8006ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ac6:	e000      	b.n	8006aca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006ac8:	bf00      	nop
    return;
 8006aca:	bf00      	nop
  }
}
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	08006aed 	.word	0x08006aed

08006ad8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff ffe5 	bl	8006ad8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <LL_RCC_GetUSARTClockSource>:
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4013      	ands	r3, r2
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <LL_RCC_GetLPUARTClockSource>:
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4013      	ands	r3, r2
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e042      	b.n	8006bee <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fb fc68 	bl	8002450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	; 0x24
 8006b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8bb 	bl	8006d14 <UART_SetConfig>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e022      	b.n	8006bee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fad7 	bl	8007164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 0201 	orr.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb5e 	bl	80072a8 <UART_CheckIdleState>
 8006bec:	4603      	mov	r3, r0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b08a      	sub	sp, #40	; 0x28
 8006bfa:	af02      	add	r7, sp, #8
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d17b      	bne.n	8006d08 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_UART_Transmit+0x26>
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e074      	b.n	8006d0a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2221      	movs	r2, #33	; 0x21
 8006c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c30:	f7fb fe66 	bl	8002900 <HAL_GetTick>
 8006c34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	88fa      	ldrh	r2, [r7, #6]
 8006c3a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4e:	d108      	bne.n	8006c62 <HAL_UART_Transmit+0x6c>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d104      	bne.n	8006c62 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	e003      	b.n	8006c6a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c6a:	e030      	b.n	8006cce <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2200      	movs	r2, #0
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fbc0 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e03d      	b.n	8006d0a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	e007      	b.n	8006cbc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1c8      	bne.n	8006c6c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2140      	movs	r1, #64	; 0x40
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fb89 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e006      	b.n	8006d0a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b08c      	sub	sp, #48	; 0x30
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4baf      	ldr	r3, [pc, #700]	; (8007000 <UART_SetConfig+0x2ec>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4aa4      	ldr	r2, [pc, #656]	; (8007004 <UART_SetConfig+0x2f0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d004      	beq.n	8006d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d94:	430b      	orrs	r3, r1
 8006d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f023 010f 	bic.w	r1, r3, #15
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a95      	ldr	r2, [pc, #596]	; (8007008 <UART_SetConfig+0x2f4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d125      	bne.n	8006e04 <UART_SetConfig+0xf0>
 8006db8:	2003      	movs	r0, #3
 8006dba:	f7ff feac 	bl	8006b16 <LL_RCC_GetUSARTClockSource>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d81b      	bhi.n	8006dfc <UART_SetConfig+0xe8>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <UART_SetConfig+0xb8>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006ddd 	.word	0x08006ddd
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006df5 	.word	0x08006df5
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de2:	e042      	b.n	8006e6a <UART_SetConfig+0x156>
 8006de4:	2302      	movs	r3, #2
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e03e      	b.n	8006e6a <UART_SetConfig+0x156>
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e03a      	b.n	8006e6a <UART_SetConfig+0x156>
 8006df4:	2308      	movs	r3, #8
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e036      	b.n	8006e6a <UART_SetConfig+0x156>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e032      	b.n	8006e6a <UART_SetConfig+0x156>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a7e      	ldr	r2, [pc, #504]	; (8007004 <UART_SetConfig+0x2f0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d12a      	bne.n	8006e64 <UART_SetConfig+0x150>
 8006e0e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006e12:	f7ff fe90 	bl	8006b36 <LL_RCC_GetLPUARTClockSource>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e1c:	d01a      	beq.n	8006e54 <UART_SetConfig+0x140>
 8006e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e22:	d81b      	bhi.n	8006e5c <UART_SetConfig+0x148>
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e28:	d00c      	beq.n	8006e44 <UART_SetConfig+0x130>
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d815      	bhi.n	8006e5c <UART_SetConfig+0x148>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <UART_SetConfig+0x128>
 8006e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e38:	d008      	beq.n	8006e4c <UART_SetConfig+0x138>
 8006e3a:	e00f      	b.n	8006e5c <UART_SetConfig+0x148>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e42:	e012      	b.n	8006e6a <UART_SetConfig+0x156>
 8006e44:	2302      	movs	r3, #2
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e00e      	b.n	8006e6a <UART_SetConfig+0x156>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e00a      	b.n	8006e6a <UART_SetConfig+0x156>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e006      	b.n	8006e6a <UART_SetConfig+0x156>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e002      	b.n	8006e6a <UART_SetConfig+0x156>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a65      	ldr	r2, [pc, #404]	; (8007004 <UART_SetConfig+0x2f0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	f040 8097 	bne.w	8006fa4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	d823      	bhi.n	8006ec6 <UART_SetConfig+0x1b2>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x170>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006ec7 	.word	0x08006ec7
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006eb7 	.word	0x08006eb7
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ec7 	.word	0x08006ec7
 8006ea0:	08006ec7 	.word	0x08006ec7
 8006ea4:	08006ebf 	.word	0x08006ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea8:	f7fe fdb2 	bl	8005a10 <HAL_RCC_GetPCLK1Freq>
 8006eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb0:	4b56      	ldr	r3, [pc, #344]	; (800700c <UART_SetConfig+0x2f8>)
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006eb4:	e00d      	b.n	8006ed2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fe fd2b 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 8006eba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ebc:	e009      	b.n	8006ed2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ec4:	e005      	b.n	8006ed2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 812b 	beq.w	8007130 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	4a4c      	ldr	r2, [pc, #304]	; (8007010 <UART_SetConfig+0x2fc>)
 8006ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d305      	bcc.n	8006f0a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d903      	bls.n	8006f12 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f10:	e10e      	b.n	8007130 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	2200      	movs	r2, #0
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	60fa      	str	r2, [r7, #12]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	4a3c      	ldr	r2, [pc, #240]	; (8007010 <UART_SetConfig+0x2fc>)
 8006f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2200      	movs	r2, #0
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f34:	f7f9 f97c 	bl	8000230 <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	020b      	lsls	r3, r1, #8
 8006f4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f4e:	0202      	lsls	r2, r0, #8
 8006f50:	6979      	ldr	r1, [r7, #20]
 8006f52:	6849      	ldr	r1, [r1, #4]
 8006f54:	0849      	lsrs	r1, r1, #1
 8006f56:	2000      	movs	r0, #0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	eb12 0804 	adds.w	r8, r2, r4
 8006f60:	eb43 0905 	adc.w	r9, r3, r5
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	469a      	mov	sl, r3
 8006f6c:	4693      	mov	fp, r2
 8006f6e:	4652      	mov	r2, sl
 8006f70:	465b      	mov	r3, fp
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 f95b 	bl	8000230 <__aeabi_uldivmod>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4613      	mov	r3, r2
 8006f80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f88:	d308      	bcc.n	8006f9c <UART_SetConfig+0x288>
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f90:	d204      	bcs.n	8006f9c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	e0c9      	b.n	8007130 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fa2:	e0c5      	b.n	8007130 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fac:	d16d      	bne.n	800708a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	2b07      	cmp	r3, #7
 8006fb6:	d82d      	bhi.n	8007014 <UART_SetConfig+0x300>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0x2ac>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006fe1 	.word	0x08006fe1
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08007015 	.word	0x08007015
 8006fcc:	08006fef 	.word	0x08006fef
 8006fd0:	08007015 	.word	0x08007015
 8006fd4:	08007015 	.word	0x08007015
 8006fd8:	08007015 	.word	0x08007015
 8006fdc:	08006ff7 	.word	0x08006ff7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe0:	f7fe fd2c 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 8006fe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fe6:	e01b      	b.n	8007020 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe8:	4b08      	ldr	r3, [pc, #32]	; (800700c <UART_SetConfig+0x2f8>)
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fec:	e018      	b.n	8007020 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fee:	f7fe fc8f 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ff4:	e014      	b.n	8007020 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ffc:	e010      	b.n	8007020 <UART_SetConfig+0x30c>
 8006ffe:	bf00      	nop
 8007000:	cfff69f3 	.word	0xcfff69f3
 8007004:	40008000 	.word	0x40008000
 8007008:	40013800 	.word	0x40013800
 800700c:	00f42400 	.word	0x00f42400
 8007010:	0800bd84 	.word	0x0800bd84
      default:
        pclk = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800701e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8084 	beq.w	8007130 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	4a4b      	ldr	r2, [pc, #300]	; (800715c <UART_SetConfig+0x448>)
 800702e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007032:	461a      	mov	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	fbb3 f3f2 	udiv	r3, r3, r2
 800703a:	005a      	lsls	r2, r3, #1
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	441a      	add	r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	2b0f      	cmp	r3, #15
 8007052:	d916      	bls.n	8007082 <UART_SetConfig+0x36e>
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705a:	d212      	bcs.n	8007082 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	b29b      	uxth	r3, r3
 8007060:	f023 030f 	bic.w	r3, r3, #15
 8007064:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	b29b      	uxth	r3, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	b29a      	uxth	r2, r3
 8007072:	8bfb      	ldrh	r3, [r7, #30]
 8007074:	4313      	orrs	r3, r2
 8007076:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	8bfa      	ldrh	r2, [r7, #30]
 800707e:	60da      	str	r2, [r3, #12]
 8007080:	e056      	b.n	8007130 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007088:	e052      	b.n	8007130 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800708a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800708e:	3b01      	subs	r3, #1
 8007090:	2b07      	cmp	r3, #7
 8007092:	d822      	bhi.n	80070da <UART_SetConfig+0x3c6>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0x388>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070bd 	.word	0x080070bd
 80070a0:	080070c5 	.word	0x080070c5
 80070a4:	080070db 	.word	0x080070db
 80070a8:	080070cb 	.word	0x080070cb
 80070ac:	080070db 	.word	0x080070db
 80070b0:	080070db 	.word	0x080070db
 80070b4:	080070db 	.word	0x080070db
 80070b8:	080070d3 	.word	0x080070d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070bc:	f7fe fcbe 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 80070c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070c2:	e010      	b.n	80070e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c4:	4b26      	ldr	r3, [pc, #152]	; (8007160 <UART_SetConfig+0x44c>)
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070c8:	e00d      	b.n	80070e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ca:	f7fe fc21 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070d0:	e009      	b.n	80070e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070d8:	e005      	b.n	80070e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070e4:	bf00      	nop
    }

    if (pclk != 0U)
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d021      	beq.n	8007130 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	4a1a      	ldr	r2, [pc, #104]	; (800715c <UART_SetConfig+0x448>)
 80070f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	441a      	add	r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	fbb2 f3f3 	udiv	r3, r2, r3
 800710e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b0f      	cmp	r3, #15
 8007114:	d909      	bls.n	800712a <UART_SetConfig+0x416>
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711c:	d205      	bcs.n	800712a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	b29a      	uxth	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60da      	str	r2, [r3, #12]
 8007128:	e002      	b.n	8007130 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2201      	movs	r2, #1
 8007134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2201      	movs	r2, #1
 800713c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2200      	movs	r2, #0
 800714a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800714c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007150:	4618      	mov	r0, r3
 8007152:	3730      	adds	r7, #48	; 0x30
 8007154:	46bd      	mov	sp, r7
 8007156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715a:	bf00      	nop
 800715c:	0800bd84 	.word	0x0800bd84
 8007160:	00f42400 	.word	0x00f42400

08007164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f003 0310 	and.w	r3, r3, #16
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01a      	beq.n	800727a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007262:	d10a      	bne.n	800727a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  }
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b098      	sub	sp, #96	; 0x60
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072b8:	f7fb fb22 	bl	8002900 <HAL_GetTick>
 80072bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d12f      	bne.n	800732c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d4:	2200      	movs	r2, #0
 80072d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f88e 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d022      	beq.n	800732c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072fa:	653b      	str	r3, [r7, #80]	; 0x50
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	461a      	mov	r2, r3
 8007302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007304:	647b      	str	r3, [r7, #68]	; 0x44
 8007306:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800730a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e6      	bne.n	80072e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e063      	b.n	80073f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b04      	cmp	r3, #4
 8007338:	d149      	bne.n	80073ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007342:	2200      	movs	r2, #0
 8007344:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f857 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d03c      	beq.n	80073ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	623b      	str	r3, [r7, #32]
   return(result);
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007372:	633b      	str	r3, [r7, #48]	; 0x30
 8007374:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e6      	bne.n	8007354 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	60fb      	str	r3, [r7, #12]
   return(result);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	64bb      	str	r3, [r7, #72]	; 0x48
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a6:	61fa      	str	r2, [r7, #28]
 80073a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	69b9      	ldr	r1, [r7, #24]
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	617b      	str	r3, [r7, #20]
   return(result);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e012      	b.n	80073f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3758      	adds	r7, #88	; 0x58
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800740c:	e049      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007414:	d045      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fb fa73 	bl	8002900 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <UART_WaitOnFlagUntilTimeout+0x30>
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e048      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d031      	beq.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d110      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2208      	movs	r2, #8
 8007452:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f838 	bl	80074ca <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2208      	movs	r2, #8
 800745e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e029      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747c:	d111      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f81e 	bl	80074ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e00f      	b.n	80074c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4013      	ands	r3, r2
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d0a6      	beq.n	800740e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b095      	sub	sp, #84	; 0x54
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f0:	643b      	str	r3, [r7, #64]	; 0x40
 80074f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	61fb      	str	r3, [r7, #28]
   return(result);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800752e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e3      	bne.n	8007504 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d118      	bne.n	8007576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	60bb      	str	r3, [r7, #8]
   return(result);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f023 0310 	bic.w	r3, r3, #16
 8007558:	647b      	str	r3, [r7, #68]	; 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	613b      	str	r3, [r7, #16]
   return(result);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e6      	bne.n	8007544 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	675a      	str	r2, [r3, #116]	; 0x74
}
 800758a:	bf00      	nop
 800758c:	3754      	adds	r7, #84	; 0x54
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_UARTEx_DisableFifoMode+0x16>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e027      	b.n	80075fc <HAL_UARTEx_DisableFifoMode+0x66>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2224      	movs	r2, #36	; 0x24
 80075b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e02d      	b.n	800767c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	; 0x24
 800762c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f84f 	bl	8007700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007698:	2302      	movs	r3, #2
 800769a:	e02d      	b.n	80076f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2224      	movs	r2, #36	; 0x24
 80076a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0201 	bic.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f811 	bl	8007700 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770c:	2b00      	cmp	r3, #0
 800770e:	d108      	bne.n	8007722 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007720:	e031      	b.n	8007786 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007722:	2308      	movs	r3, #8
 8007724:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007726:	2308      	movs	r3, #8
 8007728:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	0e5b      	lsrs	r3, r3, #25
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	0f5b      	lsrs	r3, r3, #29
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	7b3a      	ldrb	r2, [r7, #12]
 800774e:	4911      	ldr	r1, [pc, #68]	; (8007794 <UARTEx_SetNbDataToProcess+0x94>)
 8007750:	5c8a      	ldrb	r2, [r1, r2]
 8007752:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007756:	7b3a      	ldrb	r2, [r7, #12]
 8007758:	490f      	ldr	r1, [pc, #60]	; (8007798 <UARTEx_SetNbDataToProcess+0x98>)
 800775a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800775c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	7b7a      	ldrb	r2, [r7, #13]
 800776c:	4909      	ldr	r1, [pc, #36]	; (8007794 <UARTEx_SetNbDataToProcess+0x94>)
 800776e:	5c8a      	ldrb	r2, [r1, r2]
 8007770:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007774:	7b7a      	ldrb	r2, [r7, #13]
 8007776:	4908      	ldr	r1, [pc, #32]	; (8007798 <UARTEx_SetNbDataToProcess+0x98>)
 8007778:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800777a:	fb93 f3f2 	sdiv	r3, r3, r2
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	0800bd9c 	.word	0x0800bd9c
 8007798:	0800bda4 	.word	0x0800bda4

0800779c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077a6:	f107 0308 	add.w	r3, r7, #8
 80077aa:	2218      	movs	r2, #24
 80077ac:	2100      	movs	r1, #0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 f8d8 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077b4:	233f      	movs	r3, #63	; 0x3f
 80077b6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80077b8:	2381      	movs	r3, #129	; 0x81
 80077ba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80077bc:	1dfb      	adds	r3, r7, #7
 80077be:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80077c0:	2301      	movs	r3, #1
 80077c2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077c4:	f107 0308 	add.w	r3, r7, #8
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fb54 	bl	8008e78 <hci_send_req>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da01      	bge.n	80077da <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80077d6:	23ff      	movs	r3, #255	; 0xff
 80077d8:	e000      	b.n	80077dc <aci_gap_set_non_discoverable+0x40>
  return status;
 80077da:	79fb      	ldrb	r3, [r7, #7]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80077e4:	b5b0      	push	{r4, r5, r7, lr}
 80077e6:	b0ce      	sub	sp, #312	; 0x138
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4605      	mov	r5, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077f6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80077fa:	462a      	mov	r2, r5
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007802:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007806:	4622      	mov	r2, r4
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800780e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007812:	4602      	mov	r2, r0
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800781a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800781e:	460a      	mov	r2, r1
 8007820:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007822:	f107 0310 	add.w	r3, r7, #16
 8007826:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800782a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800782e:	3308      	adds	r3, #8
 8007830:	f107 0210 	add.w	r2, r7, #16
 8007834:	4413      	add	r3, r2
 8007836:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800783a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800783e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007842:	4413      	add	r3, r2
 8007844:	3309      	adds	r3, #9
 8007846:	f107 0210 	add.w	r2, r7, #16
 800784a:	4413      	add	r3, r2
 800784c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007854:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007866:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800786a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800786e:	7812      	ldrb	r2, [r2, #0]
 8007870:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007876:	3301      	adds	r3, #1
 8007878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800787c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007880:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007884:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800788e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007892:	3302      	adds	r3, #2
 8007894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800789c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80078a0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80078a4:	8812      	ldrh	r2, [r2, #0]
 80078a6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80078aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ae:	3302      	adds	r3, #2
 80078b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80078b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80078bc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80078c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078c8:	3301      	adds	r3, #1
 80078ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80078ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078d2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80078d6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80078d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078dc:	3301      	adds	r3, #1
 80078de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80078e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078e6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80078ea:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80078ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078f0:	3301      	adds	r3, #1
 80078f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80078f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80078fa:	3308      	adds	r3, #8
 80078fc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007900:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007904:	4618      	mov	r0, r3
 8007906:	f001 f81d 	bl	8008944 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800790a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800790e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007912:	4413      	add	r3, r2
 8007914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007918:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800791c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007920:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007926:	3301      	adds	r3, #1
 8007928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800792c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007930:	3301      	adds	r3, #1
 8007932:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007936:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800793a:	4618      	mov	r0, r3
 800793c:	f001 f802 	bl	8008944 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007940:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007944:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007948:	4413      	add	r3, r2
 800794a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007956:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007958:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800795c:	3302      	adds	r3, #2
 800795e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007966:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800796a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800796c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007970:	3302      	adds	r3, #2
 8007972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800797a:	2218      	movs	r2, #24
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fff0 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007984:	233f      	movs	r3, #63	; 0x3f
 8007986:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800798a:	2383      	movs	r3, #131	; 0x83
 800798c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007990:	f107 0310 	add.w	r3, r7, #16
 8007994:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007998:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800799c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079a0:	f107 030f 	add.w	r3, r7, #15
 80079a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079b2:	2100      	movs	r1, #0
 80079b4:	4618      	mov	r0, r3
 80079b6:	f001 fa5f 	bl	8008e78 <hci_send_req>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	da01      	bge.n	80079c4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80079c0:	23ff      	movs	r3, #255	; 0xff
 80079c2:	e004      	b.n	80079ce <aci_gap_set_discoverable+0x1ea>
  return status;
 80079c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80079cc:	781b      	ldrb	r3, [r3, #0]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bdb0      	pop	{r4, r5, r7, pc}

080079d8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b0cc      	sub	sp, #304	; 0x130
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4602      	mov	r2, r0
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80079e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80079ea:	f107 0310 	add.w	r3, r7, #16
 80079ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a0c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a22:	2218      	movs	r2, #24
 8007a24:	2100      	movs	r1, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 ff9c 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a2c:	233f      	movs	r3, #63	; 0x3f
 8007a2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007a32:	2385      	movs	r3, #133	; 0x85
 8007a34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a38:	f107 0310 	add.w	r3, r7, #16
 8007a3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a48:	f107 030f 	add.w	r3, r7, #15
 8007a4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 fa0b 	bl	8008e78 <hci_send_req>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	da01      	bge.n	8007a6c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007a68:	23ff      	movs	r3, #255	; 0xff
 8007a6a:	e004      	b.n	8007a76 <aci_gap_set_io_capability+0x9e>
  return status;
 8007a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a70:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a74:	781b      	ldrb	r3, [r3, #0]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007a80:	b5b0      	push	{r4, r5, r7, lr}
 8007a82:	b0cc      	sub	sp, #304	; 0x130
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4605      	mov	r5, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a92:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a96:	462a      	mov	r2, r5
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007aae:	4602      	mov	r2, r0
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aba:	460a      	mov	r2, r1
 8007abc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007abe:	f107 0310 	add.w	r3, r7, #16
 8007ac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007adc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ae0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aec:	3301      	adds	r3, #1
 8007aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007afa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b06:	3301      	adds	r3, #1
 8007b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b14:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007b18:	7812      	ldrb	r2, [r2, #0]
 8007b1a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b20:	3301      	adds	r3, #1
 8007b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b2e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007b32:	7812      	ldrb	r2, [r2, #0]
 8007b34:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b44:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007b48:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b4e:	3301      	adds	r3, #1
 8007b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b58:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007b5c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b62:	3301      	adds	r3, #1
 8007b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007b70:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b76:	3301      	adds	r3, #1
 8007b78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b80:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007b84:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b96:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007b9a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007baa:	2218      	movs	r2, #24
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fed8 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bb4:	233f      	movs	r3, #63	; 0x3f
 8007bb6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007bba:	2386      	movs	r3, #134	; 0x86
 8007bbc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007bc0:	f107 0310 	add.w	r3, r7, #16
 8007bc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007bd0:	f107 030f 	add.w	r3, r7, #15
 8007bd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 f947 	bl	8008e78 <hci_send_req>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	da01      	bge.n	8007bf4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007bf0:	23ff      	movs	r3, #255	; 0xff
 8007bf2:	e004      	b.n	8007bfe <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bfc:	781b      	ldrb	r3, [r3, #0]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}

08007c08 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b0cc      	sub	sp, #304	; 0x130
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4602      	mov	r2, r0
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c18:	6019      	str	r1, [r3, #0]
 8007c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c22:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007c24:	f107 0310 	add.w	r3, r7, #16
 8007c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c46:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007c4a:	8812      	ldrh	r2, [r2, #0]
 8007c4c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c52:	3302      	adds	r3, #2
 8007c54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c60:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007c6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c6e:	3304      	adds	r3, #4
 8007c70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c78:	2218      	movs	r2, #24
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fe71 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c82:	233f      	movs	r3, #63	; 0x3f
 8007c84:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007c88:	2388      	movs	r3, #136	; 0x88
 8007c8a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c8e:	f107 0310 	add.w	r3, r7, #16
 8007c92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c9e:	f107 030f 	add.w	r3, r7, #15
 8007ca2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f8e0 	bl	8008e78 <hci_send_req>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	da01      	bge.n	8007cc2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007cbe:	23ff      	movs	r3, #255	; 0xff
 8007cc0:	e004      	b.n	8007ccc <aci_gap_pass_key_resp+0xc4>
  return status;
 8007cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007cca:	781b      	ldrb	r3, [r3, #0]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007cd6:	b590      	push	{r4, r7, lr}
 8007cd8:	b0cd      	sub	sp, #308	; 0x134
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	4604      	mov	r4, r0
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ce6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d00:	4602      	mov	r2, r0
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d08:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007d10:	f107 0310 	add.w	r3, r7, #16
 8007d14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007d18:	f107 0308 	add.w	r3, r7, #8
 8007d1c:	2207      	movs	r2, #7
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fe1f 	bl	8008964 <Osal_MemSet>
  int index_input = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d34:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d4e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d68:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007d6c:	7812      	ldrb	r2, [r2, #0]
 8007d6e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d74:	3301      	adds	r3, #1
 8007d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d7e:	2218      	movs	r2, #24
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fdee 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d88:	233f      	movs	r3, #63	; 0x3f
 8007d8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007d8e:	238a      	movs	r3, #138	; 0x8a
 8007d90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d94:	f107 0310 	add.w	r3, r7, #16
 8007d98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007da0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007dac:	2307      	movs	r3, #7
 8007dae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007db6:	2100      	movs	r1, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 f85d 	bl	8008e78 <hci_send_req>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	da01      	bge.n	8007dc8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007dc4:	23ff      	movs	r3, #255	; 0xff
 8007dc6:	e02e      	b.n	8007e26 <aci_gap_init+0x150>
  if ( resp.Status )
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <aci_gap_init+0x10c>
    return resp.Status;
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	e021      	b.n	8007e26 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007dea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e04:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007e0e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007e18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007e22:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd90      	pop	{r4, r7, pc}

08007e30 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b0cc      	sub	sp, #304	; 0x130
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4602      	mov	r2, r0
 8007e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e40:	6019      	str	r1, [r3, #0]
 8007e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e46:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007e4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007e4c:	f107 0310 	add.w	r3, r7, #16
 8007e50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e6e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e84:	1c58      	adds	r0, r3, #1
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007e8e:	781a      	ldrb	r2, [r3, #0]
 8007e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e98:	6819      	ldr	r1, [r3, #0]
 8007e9a:	f000 fd53 	bl	8008944 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007eac:	4413      	add	r3, r2
 8007eae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007eb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eb6:	2218      	movs	r2, #24
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fd52 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ec0:	233f      	movs	r3, #63	; 0x3f
 8007ec2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007ec6:	238e      	movs	r3, #142	; 0x8e
 8007ec8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007edc:	f107 030f 	add.w	r3, r7, #15
 8007ee0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007eea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 ffc1 	bl	8008e78 <hci_send_req>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da01      	bge.n	8007f00 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007efc:	23ff      	movs	r3, #255	; 0xff
 8007efe:	e004      	b.n	8007f0a <aci_gap_update_adv_data+0xda>
  return status;
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f08:	781b      	ldrb	r3, [r3, #0]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f1e:	f107 0308 	add.w	r3, r7, #8
 8007f22:	2218      	movs	r2, #24
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fd1c 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f2c:	233f      	movs	r3, #63	; 0x3f
 8007f2e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007f30:	2392      	movs	r3, #146	; 0x92
 8007f32:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 ff98 	bl	8008e78 <hci_send_req>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da01      	bge.n	8007f52 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f4e:	23ff      	movs	r3, #255	; 0xff
 8007f50:	e000      	b.n	8007f54 <aci_gap_configure_whitelist+0x40>
  return status;
 8007f52:	79fb      	ldrb	r3, [r7, #7]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b0cc      	sub	sp, #304	; 0x130
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4602      	mov	r2, r0
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007f76:	460a      	mov	r2, r1
 8007f78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007f7a:	f107 0310 	add.w	r3, r7, #16
 8007f7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f9c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fa8:	3302      	adds	r3, #2
 8007faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fb6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007fba:	7812      	ldrb	r2, [r2, #0]
 8007fbc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fcc:	2218      	movs	r2, #24
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fcc7 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fd6:	233f      	movs	r3, #63	; 0x3f
 8007fd8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007fdc:	23a5      	movs	r3, #165	; 0xa5
 8007fde:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fe2:	f107 0310 	add.w	r3, r7, #16
 8007fe6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ff2:	f107 030f 	add.w	r3, r7, #15
 8007ff6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008000:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f000 ff36 	bl	8008e78 <hci_send_req>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	da01      	bge.n	8008016 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008012:	23ff      	movs	r3, #255	; 0xff
 8008014:	e004      	b.n	8008020 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800801e:	781b      	ldrb	r3, [r3, #0]
}
 8008020:	4618      	mov	r0, r3
 8008022:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b088      	sub	sp, #32
 800802e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008034:	f107 0308 	add.w	r3, r7, #8
 8008038:	2218      	movs	r2, #24
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fc91 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008042:	233f      	movs	r3, #63	; 0x3f
 8008044:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008046:	f240 1301 	movw	r3, #257	; 0x101
 800804a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800804c:	1dfb      	adds	r3, r7, #7
 800804e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008050:	2301      	movs	r3, #1
 8008052:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008054:	f107 0308 	add.w	r3, r7, #8
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff0c 	bl	8008e78 <hci_send_req>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	da01      	bge.n	800806a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008066:	23ff      	movs	r3, #255	; 0xff
 8008068:	e000      	b.n	800806c <aci_gatt_init+0x42>
  return status;
 800806a:	79fb      	ldrb	r3, [r7, #7]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008074:	b590      	push	{r4, r7, lr}
 8008076:	b0cf      	sub	sp, #316	; 0x13c
 8008078:	af00      	add	r7, sp, #0
 800807a:	4604      	mov	r4, r0
 800807c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008080:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008084:	6001      	str	r1, [r0, #0]
 8008086:	4610      	mov	r0, r2
 8008088:	4619      	mov	r1, r3
 800808a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800808e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008092:	4622      	mov	r2, r4
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800809a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800809e:	4602      	mov	r2, r0
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80080a6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80080aa:	460a      	mov	r2, r1
 80080ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80080ae:	f107 0310 	add.w	r3, r7, #16
 80080b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80080b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80080ba:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d00a      	beq.n	80080da <aci_gatt_add_service+0x66>
 80080c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80080c8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d101      	bne.n	80080d6 <aci_gatt_add_service+0x62>
 80080d2:	2311      	movs	r3, #17
 80080d4:	e002      	b.n	80080dc <aci_gatt_add_service+0x68>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <aci_gatt_add_service+0x68>
 80080da:	2303      	movs	r3, #3
 80080dc:	f107 0210 	add.w	r2, r7, #16
 80080e0:	4413      	add	r3, r2
 80080e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80080e6:	f107 030c 	add.w	r3, r7, #12
 80080ea:	2203      	movs	r2, #3
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f000 fc38 	bl	8008964 <Osal_MemSet>
  int index_input = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80080fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008102:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008106:	7812      	ldrb	r2, [r2, #0]
 8008108:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800810a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800810e:	3301      	adds	r3, #1
 8008110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008114:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008118:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d002      	beq.n	8008128 <aci_gatt_add_service+0xb4>
 8008122:	2b02      	cmp	r3, #2
 8008124:	d004      	beq.n	8008130 <aci_gatt_add_service+0xbc>
 8008126:	e007      	b.n	8008138 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008128:	2302      	movs	r3, #2
 800812a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800812e:	e005      	b.n	800813c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008130:	2310      	movs	r3, #16
 8008132:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008136:	e001      	b.n	800813c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008138:	2397      	movs	r3, #151	; 0x97
 800813a:	e06c      	b.n	8008216 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800813c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008140:	1c58      	adds	r0, r3, #1
 8008142:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008146:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800814a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800814e:	6819      	ldr	r1, [r3, #0]
 8008150:	f000 fbf8 	bl	8008944 <Osal_MemCpy>
    index_input += size;
 8008154:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008158:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800815c:	4413      	add	r3, r2
 800815e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008166:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800816a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800816e:	7812      	ldrb	r2, [r2, #0]
 8008170:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008176:	3301      	adds	r3, #1
 8008178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800817c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008180:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008184:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800818c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008190:	3301      	adds	r3, #1
 8008192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800819a:	2218      	movs	r2, #24
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fbe0 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081a4:	233f      	movs	r3, #63	; 0x3f
 80081a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80081aa:	f44f 7381 	mov.w	r3, #258	; 0x102
 80081ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081b2:	f107 0310 	add.w	r3, r7, #16
 80081b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80081c2:	f107 030c 	add.w	r3, r7, #12
 80081c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80081ca:	2303      	movs	r3, #3
 80081cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fe4e 	bl	8008e78 <hci_send_req>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da01      	bge.n	80081e6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80081e2:	23ff      	movs	r3, #255	; 0xff
 80081e4:	e017      	b.n	8008216 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80081e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80081f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80081f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	e00a      	b.n	8008216 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008200:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008208:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800820c:	b29a      	uxth	r2, r3
 800820e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008212:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800821c:	46bd      	mov	sp, r7
 800821e:	bd90      	pop	{r4, r7, pc}

08008220 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008220:	b590      	push	{r4, r7, lr}
 8008222:	b0d1      	sub	sp, #324	; 0x144
 8008224:	af00      	add	r7, sp, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800822e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008232:	600a      	str	r2, [r1, #0]
 8008234:	4619      	mov	r1, r3
 8008236:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800823a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800823e:	4622      	mov	r2, r4
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008246:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800824a:	4602      	mov	r2, r0
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008252:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008256:	460a      	mov	r2, r1
 8008258:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800825a:	f107 0318 	add.w	r3, r7, #24
 800825e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008262:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008266:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d00a      	beq.n	8008286 <aci_gatt_add_char+0x66>
 8008270:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008274:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d101      	bne.n	8008282 <aci_gatt_add_char+0x62>
 800827e:	2313      	movs	r3, #19
 8008280:	e002      	b.n	8008288 <aci_gatt_add_char+0x68>
 8008282:	2303      	movs	r3, #3
 8008284:	e000      	b.n	8008288 <aci_gatt_add_char+0x68>
 8008286:	2305      	movs	r3, #5
 8008288:	f107 0218 	add.w	r2, r7, #24
 800828c:	4413      	add	r3, r2
 800828e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008292:	f107 0314 	add.w	r3, r7, #20
 8008296:	2203      	movs	r2, #3
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fb62 	bl	8008964 <Osal_MemSet>
  int index_input = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80082a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082aa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80082ae:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80082b2:	8812      	ldrh	r2, [r2, #0]
 80082b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082ba:	3302      	adds	r3, #2
 80082bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80082c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082c4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80082c8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80082d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082d4:	3301      	adds	r3, #1
 80082d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80082da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80082de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d002      	beq.n	80082ee <aci_gatt_add_char+0xce>
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d004      	beq.n	80082f6 <aci_gatt_add_char+0xd6>
 80082ec:	e007      	b.n	80082fe <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80082ee:	2302      	movs	r3, #2
 80082f0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80082f4:	e005      	b.n	8008302 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80082f6:	2310      	movs	r3, #16
 80082f8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80082fc:	e001      	b.n	8008302 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80082fe:	2397      	movs	r3, #151	; 0x97
 8008300:	e091      	b.n	8008426 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008302:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008306:	1cd8      	adds	r0, r3, #3
 8008308:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800830c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008310:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	f000 fb15 	bl	8008944 <Osal_MemCpy>
    index_input += size;
 800831a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800831e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008322:	4413      	add	r3, r2
 8008324:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008328:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800832c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008330:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008334:	8812      	ldrh	r2, [r2, #0]
 8008336:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008338:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800833c:	3302      	adds	r3, #2
 800833e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008346:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800834a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800834c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008350:	3301      	adds	r3, #1
 8008352:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008356:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800835a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800835e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008364:	3301      	adds	r3, #1
 8008366:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800836a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800836e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008372:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008374:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008378:	3301      	adds	r3, #1
 800837a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800837e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008382:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008386:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008388:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800838c:	3301      	adds	r3, #1
 800838e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008392:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008396:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800839a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800839c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083a0:	3301      	adds	r3, #1
 80083a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80083aa:	2218      	movs	r2, #24
 80083ac:	2100      	movs	r1, #0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fad8 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083b4:	233f      	movs	r3, #63	; 0x3f
 80083b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80083ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80083be:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80083c2:	f107 0318 	add.w	r3, r7, #24
 80083c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80083ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80083d2:	f107 0314 	add.w	r3, r7, #20
 80083d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80083da:	2303      	movs	r3, #3
 80083dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fd46 	bl	8008e78 <hci_send_req>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	da01      	bge.n	80083f6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80083f2:	23ff      	movs	r3, #255	; 0xff
 80083f4:	e017      	b.n	8008426 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80083f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80083fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008404:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	e00a      	b.n	8008426 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008410:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008414:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008418:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008422:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800842c:	46bd      	mov	sp, r7
 800842e:	bd90      	pop	{r4, r7, pc}

08008430 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008430:	b5b0      	push	{r4, r5, r7, lr}
 8008432:	b0cc      	sub	sp, #304	; 0x130
 8008434:	af00      	add	r7, sp, #0
 8008436:	4605      	mov	r5, r0
 8008438:	460c      	mov	r4, r1
 800843a:	4610      	mov	r0, r2
 800843c:	4619      	mov	r1, r3
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008446:	462a      	mov	r2, r5
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008452:	4622      	mov	r2, r4
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800845e:	4602      	mov	r2, r0
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008466:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800846a:	460a      	mov	r2, r1
 800846c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800846e:	f107 0310 	add.w	r3, r7, #16
 8008472:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008490:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008494:	8812      	ldrh	r2, [r2, #0]
 8008496:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800849c:	3302      	adds	r3, #2
 800849e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80084a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084ae:	8812      	ldrh	r2, [r2, #0]
 80084b0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80084b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084b6:	3302      	adds	r3, #2
 80084b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80084bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084c4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80084c8:	7812      	ldrb	r2, [r2, #0]
 80084ca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80084cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084d0:	3301      	adds	r3, #1
 80084d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80084d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084de:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80084e2:	7812      	ldrb	r2, [r2, #0]
 80084e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80084e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084ea:	3301      	adds	r3, #1
 80084ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f4:	1d98      	adds	r0, r3, #6
 80084f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fa:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008506:	f000 fa1d 	bl	8008944 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800850a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008518:	4413      	add	r3, r2
 800851a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800851e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008522:	2218      	movs	r2, #24
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fa1c 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 800852c:	233f      	movs	r3, #63	; 0x3f
 800852e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008532:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008536:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800853a:	f107 0310 	add.w	r3, r7, #16
 800853e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008546:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800854a:	f107 030f 	add.w	r3, r7, #15
 800854e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008552:	2301      	movs	r3, #1
 8008554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fc8a 	bl	8008e78 <hci_send_req>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	da01      	bge.n	800856e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800856a:	23ff      	movs	r3, #255	; 0xff
 800856c:	e004      	b.n	8008578 <aci_gatt_update_char_value+0x148>
  return status;
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008576:	781b      	ldrb	r3, [r3, #0]
}
 8008578:	4618      	mov	r0, r3
 800857a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800857e:	46bd      	mov	sp, r7
 8008580:	bdb0      	pop	{r4, r5, r7, pc}

08008582 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b0cc      	sub	sp, #304	; 0x130
 8008586:	af00      	add	r7, sp, #0
 8008588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008596:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800859a:	4602      	mov	r2, r0
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80085a6:	460a      	mov	r2, r1
 80085a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80085aa:	f107 0310 	add.w	r3, r7, #16
 80085ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80085c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80085d0:	7812      	ldrb	r2, [r2, #0]
 80085d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80085d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d8:	3301      	adds	r3, #1
 80085da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80085de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80085ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085f2:	3301      	adds	r3, #1
 80085f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80085f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fc:	1c98      	adds	r0, r3, #2
 80085fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008602:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008610:	6819      	ldr	r1, [r3, #0]
 8008612:	f000 f997 	bl	8008944 <Osal_MemCpy>
  index_input += Length;
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008624:	4413      	add	r3, r2
 8008626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800862a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800862e:	2218      	movs	r2, #24
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f996 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008638:	233f      	movs	r3, #63	; 0x3f
 800863a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800863e:	230c      	movs	r3, #12
 8008640:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008644:	f107 0310 	add.w	r3, r7, #16
 8008648:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800864c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008650:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008654:	f107 030f 	add.w	r3, r7, #15
 8008658:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800865c:	2301      	movs	r3, #1
 800865e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fc05 	bl	8008e78 <hci_send_req>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	da01      	bge.n	8008678 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008674:	23ff      	movs	r3, #255	; 0xff
 8008676:	e004      	b.n	8008682 <aci_hal_write_config_data+0x100>
  return status;
 8008678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008680:	781b      	ldrb	r3, [r3, #0]
}
 8008682:	4618      	mov	r0, r3
 8008684:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b0cc      	sub	sp, #304	; 0x130
 8008690:	af00      	add	r7, sp, #0
 8008692:	4602      	mov	r2, r0
 8008694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008698:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80086a6:	460a      	mov	r2, r1
 80086a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80086b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80086c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80086d0:	7812      	ldrb	r2, [r2, #0]
 80086d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80086d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086d8:	3301      	adds	r3, #1
 80086da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80086ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086f2:	3301      	adds	r3, #1
 80086f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086fc:	2218      	movs	r2, #24
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f92f 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008706:	233f      	movs	r3, #63	; 0x3f
 8008708:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800870c:	230f      	movs	r3, #15
 800870e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008712:	f107 0310 	add.w	r3, r7, #16
 8008716:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800871a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800871e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008722:	f107 030f 	add.w	r3, r7, #15
 8008726:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008730:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008734:	2100      	movs	r1, #0
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fb9e 	bl	8008e78 <hci_send_req>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	da01      	bge.n	8008746 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008742:	23ff      	movs	r3, #255	; 0xff
 8008744:	e004      	b.n	8008750 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800874e:	781b      	ldrb	r3, [r3, #0]
}
 8008750:	4618      	mov	r0, r3
 8008752:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b0cc      	sub	sp, #304	; 0x130
 800875e:	af00      	add	r7, sp, #0
 8008760:	4602      	mov	r2, r0
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800876a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800876c:	f107 0310 	add.w	r3, r7, #16
 8008770:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008778:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800878e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008792:	8812      	ldrh	r2, [r2, #0]
 8008794:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800879a:	3302      	adds	r3, #2
 800879c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087a4:	2218      	movs	r2, #24
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 f8db 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087ae:	233f      	movs	r3, #63	; 0x3f
 80087b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80087b4:	2318      	movs	r3, #24
 80087b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087ba:	f107 0310 	add.w	r3, r7, #16
 80087be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087ca:	f107 030f 	add.w	r3, r7, #15
 80087ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087d2:	2301      	movs	r3, #1
 80087d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fb4a 	bl	8008e78 <hci_send_req>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da01      	bge.n	80087ee <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80087ea:	23ff      	movs	r3, #255	; 0xff
 80087ec:	e004      	b.n	80087f8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80087ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087f6:	781b      	ldrb	r3, [r3, #0]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b088      	sub	sp, #32
 8008806:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800880c:	f107 0308 	add.w	r3, r7, #8
 8008810:	2218      	movs	r2, #24
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f8a5 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x03;
 800881a:	2303      	movs	r3, #3
 800881c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800881e:	2303      	movs	r3, #3
 8008820:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008822:	1dfb      	adds	r3, r7, #7
 8008824:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008826:	2301      	movs	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	2100      	movs	r1, #0
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fb21 	bl	8008e78 <hci_send_req>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	da01      	bge.n	8008840 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800883c:	23ff      	movs	r3, #255	; 0xff
 800883e:	e000      	b.n	8008842 <hci_reset+0x40>
  return status;
 8008840:	79fb      	ldrb	r3, [r7, #7]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800884a:	b590      	push	{r4, r7, lr}
 800884c:	b0cd      	sub	sp, #308	; 0x134
 800884e:	af00      	add	r7, sp, #0
 8008850:	4604      	mov	r4, r0
 8008852:	4608      	mov	r0, r1
 8008854:	4611      	mov	r1, r2
 8008856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800885e:	4622      	mov	r2, r4
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008866:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800886a:	4602      	mov	r2, r0
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008876:	460a      	mov	r2, r1
 8008878:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800887a:	f107 0310 	add.w	r3, r7, #16
 800887e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008886:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008898:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800889c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80088a0:	7812      	ldrb	r2, [r2, #0]
 80088a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088a8:	3301      	adds	r3, #1
 80088aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80088ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088ba:	7812      	ldrb	r2, [r2, #0]
 80088bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088c2:	3301      	adds	r3, #1
 80088c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088d0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80088d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088dc:	3301      	adds	r3, #1
 80088de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088e6:	2218      	movs	r2, #24
 80088e8:	2100      	movs	r1, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f83a 	bl	8008964 <Osal_MemSet>
  rq.ogf = 0x08;
 80088f0:	2308      	movs	r3, #8
 80088f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80088f6:	2331      	movs	r3, #49	; 0x31
 80088f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008908:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800890c:	f107 030f 	add.w	r3, r7, #15
 8008910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008914:	2301      	movs	r3, #1
 8008916:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800891a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f000 faa9 	bl	8008e78 <hci_send_req>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	da01      	bge.n	8008930 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800892c:	23ff      	movs	r3, #255	; 0xff
 800892e:	e004      	b.n	800893a <hci_le_set_default_phy+0xf0>
  return status;
 8008930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008934:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008938:	781b      	ldrb	r3, [r3, #0]
}
 800893a:	4618      	mov	r0, r3
 800893c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f002 f8db 	bl	800ab10 <memcpy>
 800895a:	4603      	mov	r3, r0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f002 f8d9 	bl	800ab2c <memset>
 800897a:	4603      	mov	r3, r0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  return;
 8008988:	bf00      	nop
}
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008992:	b480      	push	{r7}
 8008994:	af00      	add	r7, sp, #0
  return;
 8008996:	bf00      	nop
}
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
  return;
 80089a4:	bf00      	nop
}
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80089ae:	b480      	push	{r7}
 80089b0:	af00      	add	r7, sp, #0
  return;
 80089b2:	bf00      	nop
}
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
  return;
 80089c0:	bf00      	nop
}
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80089ca:	b480      	push	{r7}
 80089cc:	af00      	add	r7, sp, #0
  return;
 80089ce:	bf00      	nop
}
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
  return;
 80089dc:	bf00      	nop
}
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80089e6:	b480      	push	{r7}
 80089e8:	af00      	add	r7, sp, #0
  return;
 80089ea:	bf00      	nop
}
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
  return;
 80089f8:	bf00      	nop
}
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008a02:	b480      	push	{r7}
 8008a04:	af00      	add	r7, sp, #0
  return;
 8008a06:	bf00      	nop
}
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  return;
 8008a14:	bf00      	nop
}
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008a1e:	b480      	push	{r7}
 8008a20:	af00      	add	r7, sp, #0
  return;
 8008a22:	bf00      	nop
}
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
  return;
 8008a30:	bf00      	nop
}
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	af00      	add	r7, sp, #0
  return;
 8008a3e:	bf00      	nop
}
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  return;
 8008a4c:	bf00      	nop
}
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008a56:	b480      	push	{r7}
 8008a58:	af00      	add	r7, sp, #0
  return;
 8008a5a:	bf00      	nop
}
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  return;
 8008a68:	bf00      	nop
}
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <SVCCTL_Init+0x18>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008a7e:	4b04      	ldr	r3, [pc, #16]	; (8008a90 <SVCCTL_Init+0x1c>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008a84:	f000 f806 	bl	8008a94 <SVCCTL_SvcInit>

  return;
 8008a88:	bf00      	nop
}
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20000910 	.word	0x20000910
 8008a90:	20000930 	.word	0x20000930

08008a94 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  BAS_Init();
 8008a98:	f7ff ff74 	bl	8008984 <BAS_Init>

  BLS_Init();
 8008a9c:	f7ff ff79 	bl	8008992 <BLS_Init>

  CRS_STM_Init();
 8008aa0:	f7ff ff7e 	bl	80089a0 <CRS_STM_Init>

  DIS_Init();
 8008aa4:	f7ff ff83 	bl	80089ae <DIS_Init>

  EDS_STM_Init();
 8008aa8:	f7ff ff88 	bl	80089bc <EDS_STM_Init>

  HIDS_Init();
 8008aac:	f7ff ff8d 	bl	80089ca <HIDS_Init>

  HRS_Init();
 8008ab0:	f7ff ff92 	bl	80089d8 <HRS_Init>

  HTS_Init();
 8008ab4:	f7ff ff97 	bl	80089e6 <HTS_Init>

  IAS_Init();
 8008ab8:	f7ff ff9c 	bl	80089f4 <IAS_Init>

  LLS_Init();
 8008abc:	f7ff ffa1 	bl	8008a02 <LLS_Init>

  TPS_Init();
 8008ac0:	f7ff ffa6 	bl	8008a10 <TPS_Init>

  MOTENV_STM_Init();
 8008ac4:	f7ff ffab 	bl	8008a1e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008ac8:	f7ff ffb0 	bl	8008a2c <P2PS_STM_Init>

  ZDD_STM_Init();
 8008acc:	f7ff ffb5 	bl	8008a3a <ZDD_STM_Init>

  OTAS_STM_Init();
 8008ad0:	f7ff ffba 	bl	8008a48 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008ad4:	f7ff ffc6 	bl	8008a64 <BVOPUS_STM_Init>

  MESH_Init();
 8008ad8:	f7ff ffbd 	bl	8008a56 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008adc:	f001 faaa 	bl	800a034 <SVCCTL_InitCustomSvc>
  
  return;
 8008ae0:	bf00      	nop
}
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008aec:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <SVCCTL_RegisterSvcHandler+0x30>)
 8008aee:	7f1b      	ldrb	r3, [r3, #28]
 8008af0:	4619      	mov	r1, r3
 8008af2:	4a08      	ldr	r2, [pc, #32]	; (8008b14 <SVCCTL_RegisterSvcHandler+0x30>)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <SVCCTL_RegisterSvcHandler+0x30>)
 8008afc:	7f1b      	ldrb	r3, [r3, #28]
 8008afe:	3301      	adds	r3, #1
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <SVCCTL_RegisterSvcHandler+0x30>)
 8008b04:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008b06:	bf00      	nop
}
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000910 	.word	0x20000910

08008b18 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3301      	adds	r3, #1
 8008b24:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2bff      	cmp	r3, #255	; 0xff
 8008b30:	d125      	bne.n	8008b7e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3302      	adds	r3, #2
 8008b36:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b46:	d118      	bne.n	8008b7a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	757b      	strb	r3, [r7, #21]
 8008b4c:	e00d      	b.n	8008b6a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008b4e:	7d7b      	ldrb	r3, [r7, #21]
 8008b50:	4a1a      	ldr	r2, [pc, #104]	; (8008bbc <SVCCTL_UserEvtRx+0xa4>)
 8008b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d108      	bne.n	8008b76 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008b64:	7d7b      	ldrb	r3, [r7, #21]
 8008b66:	3301      	adds	r3, #1
 8008b68:	757b      	strb	r3, [r7, #21]
 8008b6a:	4b14      	ldr	r3, [pc, #80]	; (8008bbc <SVCCTL_UserEvtRx+0xa4>)
 8008b6c:	7f1b      	ldrb	r3, [r3, #28]
 8008b6e:	7d7a      	ldrb	r2, [r7, #21]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d3ec      	bcc.n	8008b4e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008b74:	e002      	b.n	8008b7c <SVCCTL_UserEvtRx+0x64>
              break;
 8008b76:	bf00      	nop
          break;
 8008b78:	e000      	b.n	8008b7c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008b7a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008b7c:	e000      	b.n	8008b80 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008b7e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d00f      	beq.n	8008ba6 <SVCCTL_UserEvtRx+0x8e>
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	dc10      	bgt.n	8008bac <SVCCTL_UserEvtRx+0x94>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <SVCCTL_UserEvtRx+0x7c>
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d006      	beq.n	8008ba0 <SVCCTL_UserEvtRx+0x88>
 8008b92:	e00b      	b.n	8008bac <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 ff7b 	bl	8009a90 <SVCCTL_App_Notification>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	75bb      	strb	r3, [r7, #22]
      break;
 8008b9e:	e008      	b.n	8008bb2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75bb      	strb	r3, [r7, #22]
      break;
 8008ba4:	e005      	b.n	8008bb2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75bb      	strb	r3, [r7, #22]
      break;
 8008baa:	e002      	b.n	8008bb2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008bac:	2301      	movs	r3, #1
 8008bae:	75bb      	strb	r3, [r7, #22]
      break;
 8008bb0:	bf00      	nop
  }

  return (return_status);
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000910 	.word	0x20000910

08008bc0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	212e      	movs	r1, #46	; 0x2e
 8008bd8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008bdc:	f000 fae2 	bl	80091a4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	330b      	adds	r3, #11
 8008be4:	78db      	ldrb	r3, [r3, #3]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b088      	sub	sp, #32
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008bf6:	f107 030c 	add.w	r3, r7, #12
 8008bfa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	210f      	movs	r1, #15
 8008c06:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008c0a:	f000 facb 	bl	80091a4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	330b      	adds	r3, #11
 8008c12:	78db      	ldrb	r3, [r3, #3]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008c24:	f107 030c 	add.w	r3, r7, #12
 8008c28:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	2110      	movs	r1, #16
 8008c30:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008c34:	f000 fab6 	bl	80091a4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	330b      	adds	r3, #11
 8008c3c:	78db      	ldrb	r3, [r3, #3]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3720      	adds	r7, #32
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b08b      	sub	sp, #44	; 0x2c
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008c70:	4b4a      	ldr	r3, [pc, #296]	; (8008d9c <SHCI_GetWirelessFwInfo+0x154>)
 8008c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c78:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008c82:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a44      	ldr	r2, [pc, #272]	; (8008da0 <SHCI_GetWirelessFwInfo+0x158>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d10f      	bne.n	8008cb4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e01a      	b.n	8008cea <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008cbc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008cc0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	0e1b      	lsrs	r3, r3, #24
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	0a1b      	lsrs	r3, r3, #8
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	091b      	lsrs	r3, r3, #4
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	0e1b      	lsrs	r3, r3, #24
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	0c1b      	lsrs	r3, r3, #16
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	0a1b      	lsrs	r3, r3, #8
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	0e1b      	lsrs	r3, r3, #24
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	0c1b      	lsrs	r3, r3, #16
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	0e1b      	lsrs	r3, r3, #24
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	0c1b      	lsrs	r3, r3, #16
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	372c      	adds	r7, #44	; 0x2c
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	58004000 	.word	0x58004000
 8008da0:	a94656b9 	.word	0xa94656b9

08008da4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	4a08      	ldr	r2, [pc, #32]	; (8008dd4 <hci_init+0x30>)
 8008db4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008db6:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <hci_init+0x34>)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008dbc:	4806      	ldr	r0, [pc, #24]	; (8008dd8 <hci_init+0x34>)
 8008dbe:	f000 f973 	bl	80090a8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f8d4 	bl	8008f74 <TlInit>

  return;
 8008dcc:	bf00      	nop
}
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000cf8 	.word	0x20000cf8
 8008dd8:	20000cd0 	.word	0x20000cd0

08008ddc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008de2:	4822      	ldr	r0, [pc, #136]	; (8008e6c <hci_user_evt_proc+0x90>)
 8008de4:	f000 fd28 	bl	8009838 <LST_is_empty>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d12b      	bne.n	8008e46 <hci_user_evt_proc+0x6a>
 8008dee:	4b20      	ldr	r3, [pc, #128]	; (8008e70 <hci_user_evt_proc+0x94>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d027      	beq.n	8008e46 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	481b      	ldr	r0, [pc, #108]	; (8008e6c <hci_user_evt_proc+0x90>)
 8008dfe:	f000 fdaa 	bl	8009956 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008e02:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <hci_user_evt_proc+0x98>)
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008e12:	4b18      	ldr	r3, [pc, #96]	; (8008e74 <hci_user_evt_proc+0x98>)
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	1d3a      	adds	r2, r7, #4
 8008e18:	4610      	mov	r0, r2
 8008e1a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008e1c:	793a      	ldrb	r2, [r7, #4]
 8008e1e:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <hci_user_evt_proc+0x94>)
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <hci_user_evt_proc+0x94>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <hci_user_evt_proc+0x94>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fc03 	bl	8009640 <TL_MM_EvtDone>
 8008e3a:	e004      	b.n	8008e46 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	480a      	ldr	r0, [pc, #40]	; (8008e6c <hci_user_evt_proc+0x90>)
 8008e42:	f000 fd1b 	bl	800987c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008e46:	4809      	ldr	r0, [pc, #36]	; (8008e6c <hci_user_evt_proc+0x90>)
 8008e48:	f000 fcf6 	bl	8009838 <LST_is_empty>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d107      	bne.n	8008e62 <hci_user_evt_proc+0x86>
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <hci_user_evt_proc+0x94>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008e5a:	4804      	ldr	r0, [pc, #16]	; (8008e6c <hci_user_evt_proc+0x90>)
 8008e5c:	f001 f830 	bl	8009ec0 <hci_notify_asynch_evt>
  }


  return;
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
}
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000938 	.word	0x20000938
 8008e70:	20000944 	.word	0x20000944
 8008e74:	20000cd0 	.word	0x20000cd0

08008e78 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008e84:	2000      	movs	r0, #0
 8008e86:	f000 f8cb 	bl	8009020 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	885b      	ldrh	r3, [r3, #2]
 8008e92:	b21b      	sxth	r3, r3
 8008e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	029b      	lsls	r3, r3, #10
 8008ea0:	b21b      	sxth	r3, r3
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	b21b      	sxth	r3, r3
 8008ea6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	b2d9      	uxtb	r1, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	8bbb      	ldrh	r3, [r7, #28]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f88d 	bl	8008fd4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008eba:	e04e      	b.n	8008f5a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008ebc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008ec0:	f001 f815 	bl	8009eee <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008ec4:	e043      	b.n	8008f4e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008ec6:	f107 030c 	add.w	r3, r7, #12
 8008eca:	4619      	mov	r1, r3
 8008ecc:	4828      	ldr	r0, [pc, #160]	; (8008f70 <hci_send_req+0xf8>)
 8008ece:	f000 fd42 	bl	8009956 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	7a5b      	ldrb	r3, [r3, #9]
 8008ed6:	2b0f      	cmp	r3, #15
 8008ed8:	d114      	bne.n	8008f04 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	330b      	adds	r3, #11
 8008ede:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	885b      	ldrh	r3, [r3, #2]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	8bba      	ldrh	r2, [r7, #28]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d104      	bne.n	8008ef6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	7812      	ldrb	r2, [r2, #0]
 8008ef4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d027      	beq.n	8008f4e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008efe:	2301      	movs	r3, #1
 8008f00:	77fb      	strb	r3, [r7, #31]
 8008f02:	e024      	b.n	8008f4e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	330b      	adds	r3, #11
 8008f08:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	8bba      	ldrh	r2, [r7, #28]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d114      	bne.n	8008f42 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	7a9b      	ldrb	r3, [r3, #10]
 8008f1c:	3b03      	subs	r3, #3
 8008f1e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	bfa8      	it	ge
 8008f2a:	461a      	movge	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6918      	ldr	r0, [r3, #16]
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	1cd9      	adds	r1, r3, #3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f001 fde7 	bl	800ab10 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008f4e:	4808      	ldr	r0, [pc, #32]	; (8008f70 <hci_send_req+0xf8>)
 8008f50:	f000 fc72 	bl	8009838 <LST_is_empty>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0b5      	beq.n	8008ec6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008f5a:	7ffb      	ldrb	r3, [r7, #31]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ad      	beq.n	8008ebc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008f60:	2001      	movs	r0, #1
 8008f62:	f000 f85d 	bl	8009020 <NotifyCmdStatus>

  return 0;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3720      	adds	r7, #32
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000cf0 	.word	0x20000cf0

08008f74 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008f7c:	480f      	ldr	r0, [pc, #60]	; (8008fbc <TlInit+0x48>)
 8008f7e:	f000 fc4b 	bl	8009818 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008f82:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <TlInit+0x4c>)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008f88:	480e      	ldr	r0, [pc, #56]	; (8008fc4 <TlInit+0x50>)
 8008f8a:	f000 fc45 	bl	8009818 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <TlInit+0x54>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008f94:	4b0d      	ldr	r3, [pc, #52]	; (8008fcc <TlInit+0x58>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	; (8008fd0 <TlInit+0x5c>)
 8008fa2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008fa4:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <TlInit+0x58>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f107 0208 	add.w	r2, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
  }

  return;
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
}
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000cf0 	.word	0x20000cf0
 8008fc0:	20000940 	.word	0x20000940
 8008fc4:	20000938 	.word	0x20000938
 8008fc8:	20000944 	.word	0x20000944
 8008fcc:	20000cd0 	.word	0x20000cd0
 8008fd0:	08009061 	.word	0x08009061

08008fd4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	603a      	str	r2, [r7, #0]
 8008fde:	80fb      	strh	r3, [r7, #6]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <SendCmd+0x44>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	88fa      	ldrh	r2, [r7, #6]
 8008fea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008fee:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <SendCmd+0x44>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	797a      	ldrb	r2, [r7, #5]
 8008ff4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008ff6:	4b08      	ldr	r3, [pc, #32]	; (8009018 <SendCmd+0x44>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	797a      	ldrb	r2, [r7, #5]
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f001 fd85 	bl	800ab10 <memcpy>

  hciContext.io.Send(0,0);
 8009006:	4b05      	ldr	r3, [pc, #20]	; (800901c <SendCmd+0x48>)
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2100      	movs	r1, #0
 800900c:	2000      	movs	r0, #0
 800900e:	4798      	blx	r3

  return;
 8009010:	bf00      	nop
}
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	20000940 	.word	0x20000940
 800901c:	20000cd0 	.word	0x20000cd0

08009020 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d108      	bne.n	8009042 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <NotifyCmdStatus+0x3c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00d      	beq.n	8009054 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009038:	4b08      	ldr	r3, [pc, #32]	; (800905c <NotifyCmdStatus+0x3c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2000      	movs	r0, #0
 800903e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009040:	e008      	b.n	8009054 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009042:	4b06      	ldr	r3, [pc, #24]	; (800905c <NotifyCmdStatus+0x3c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800904a:	4b04      	ldr	r3, [pc, #16]	; (800905c <NotifyCmdStatus+0x3c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2001      	movs	r0, #1
 8009050:	4798      	blx	r3
  return;
 8009052:	bf00      	nop
 8009054:	bf00      	nop
}
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000cf8 	.word	0x20000cf8

08009060 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7a5b      	ldrb	r3, [r3, #9]
 800906c:	2b0f      	cmp	r3, #15
 800906e:	d003      	beq.n	8009078 <TlEvtReceived+0x18>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	7a5b      	ldrb	r3, [r3, #9]
 8009074:	2b0e      	cmp	r3, #14
 8009076:	d107      	bne.n	8009088 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4809      	ldr	r0, [pc, #36]	; (80090a0 <TlEvtReceived+0x40>)
 800907c:	f000 fc24 	bl	80098c8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009080:	2000      	movs	r0, #0
 8009082:	f000 ff29 	bl	8009ed8 <hci_cmd_resp_release>
 8009086:	e006      	b.n	8009096 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	4806      	ldr	r0, [pc, #24]	; (80090a4 <TlEvtReceived+0x44>)
 800908c:	f000 fc1c 	bl	80098c8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009090:	4804      	ldr	r0, [pc, #16]	; (80090a4 <TlEvtReceived+0x44>)
 8009092:	f000 ff15 	bl	8009ec0 <hci_notify_asynch_evt>
  }

  return;
 8009096:	bf00      	nop
}
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000cf0 	.word	0x20000cf0
 80090a4:	20000938 	.word	0x20000938

080090a8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <hci_register_io_bus+0x20>)
 80090b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a04      	ldr	r2, [pc, #16]	; (80090cc <hci_register_io_bus+0x24>)
 80090ba:	611a      	str	r2, [r3, #16]

  return;
 80090bc:	bf00      	nop
}
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	080093b9 	.word	0x080093b9
 80090cc:	08009421 	.word	0x08009421

080090d0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	4a08      	ldr	r2, [pc, #32]	; (8009100 <shci_init+0x30>)
 80090e0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80090e2:	4a08      	ldr	r2, [pc, #32]	; (8009104 <shci_init+0x34>)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80090e8:	4806      	ldr	r0, [pc, #24]	; (8009104 <shci_init+0x34>)
 80090ea:	f000 f911 	bl	8009310 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f894 	bl	8009220 <TlInit>

  return;
 80090f8:	bf00      	nop
}
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000d1c 	.word	0x20000d1c
 8009104:	20000cfc 	.word	0x20000cfc

08009108 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800910e:	4822      	ldr	r0, [pc, #136]	; (8009198 <shci_user_evt_proc+0x90>)
 8009110:	f000 fb92 	bl	8009838 <LST_is_empty>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d12b      	bne.n	8009172 <shci_user_evt_proc+0x6a>
 800911a:	4b20      	ldr	r3, [pc, #128]	; (800919c <shci_user_evt_proc+0x94>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d027      	beq.n	8009172 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	4619      	mov	r1, r3
 8009128:	481b      	ldr	r0, [pc, #108]	; (8009198 <shci_user_evt_proc+0x90>)
 800912a:	f000 fc14 	bl	8009956 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800912e:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <shci_user_evt_proc+0x98>)
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00c      	beq.n	8009150 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800913a:	2301      	movs	r3, #1
 800913c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800913e:	4b18      	ldr	r3, [pc, #96]	; (80091a0 <shci_user_evt_proc+0x98>)
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	1d3a      	adds	r2, r7, #4
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009148:	793a      	ldrb	r2, [r7, #4]
 800914a:	4b14      	ldr	r3, [pc, #80]	; (800919c <shci_user_evt_proc+0x94>)
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e002      	b.n	8009156 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009150:	4b12      	ldr	r3, [pc, #72]	; (800919c <shci_user_evt_proc+0x94>)
 8009152:	2201      	movs	r2, #1
 8009154:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009156:	4b11      	ldr	r3, [pc, #68]	; (800919c <shci_user_evt_proc+0x94>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d004      	beq.n	8009168 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fa6d 	bl	8009640 <TL_MM_EvtDone>
 8009166:	e004      	b.n	8009172 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4619      	mov	r1, r3
 800916c:	480a      	ldr	r0, [pc, #40]	; (8009198 <shci_user_evt_proc+0x90>)
 800916e:	f000 fb85 	bl	800987c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009172:	4809      	ldr	r0, [pc, #36]	; (8009198 <shci_user_evt_proc+0x90>)
 8009174:	f000 fb60 	bl	8009838 <LST_is_empty>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d107      	bne.n	800918e <shci_user_evt_proc+0x86>
 800917e:	4b07      	ldr	r3, [pc, #28]	; (800919c <shci_user_evt_proc+0x94>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009186:	4804      	ldr	r0, [pc, #16]	; (8009198 <shci_user_evt_proc+0x90>)
 8009188:	f7f7 fe22 	bl	8000dd0 <shci_notify_asynch_evt>
  }


  return;
 800918c:	bf00      	nop
 800918e:	bf00      	nop
}
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000948 	.word	0x20000948
 800919c:	20000958 	.word	0x20000958
 80091a0:	20000cfc 	.word	0x20000cfc

080091a4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60ba      	str	r2, [r7, #8]
 80091ac:	607b      	str	r3, [r7, #4]
 80091ae:	4603      	mov	r3, r0
 80091b0:	81fb      	strh	r3, [r7, #14]
 80091b2:	460b      	mov	r3, r1
 80091b4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80091b6:	2000      	movs	r0, #0
 80091b8:	f000 f864 	bl	8009284 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80091bc:	4b16      	ldr	r3, [pc, #88]	; (8009218 <shci_send+0x74>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	89fa      	ldrh	r2, [r7, #14]
 80091c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80091c6:	4b14      	ldr	r3, [pc, #80]	; (8009218 <shci_send+0x74>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	7b7a      	ldrb	r2, [r7, #13]
 80091cc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80091ce:	4b12      	ldr	r3, [pc, #72]	; (8009218 <shci_send+0x74>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	330c      	adds	r3, #12
 80091d4:	7b7a      	ldrb	r2, [r7, #13]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 fc99 	bl	800ab10 <memcpy>

  shciContext.io.Send(0,0);
 80091de:	4b0f      	ldr	r3, [pc, #60]	; (800921c <shci_send+0x78>)
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	2100      	movs	r1, #0
 80091e4:	2000      	movs	r0, #0
 80091e6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80091e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80091ec:	f7f7 fe07 	bl	8000dfe <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f103 0008 	add.w	r0, r3, #8
 80091f6:	4b08      	ldr	r3, [pc, #32]	; (8009218 <shci_send+0x74>)
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <shci_send+0x74>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	789b      	ldrb	r3, [r3, #2]
 8009200:	3303      	adds	r3, #3
 8009202:	461a      	mov	r2, r3
 8009204:	f001 fc84 	bl	800ab10 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009208:	2001      	movs	r0, #1
 800920a:	f000 f83b 	bl	8009284 <Cmd_SetStatus>

  return;
 800920e:	bf00      	nop
}
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000954 	.word	0x20000954
 800921c:	20000cfc 	.word	0x20000cfc

08009220 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009228:	4a10      	ldr	r2, [pc, #64]	; (800926c <TlInit+0x4c>)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800922e:	4810      	ldr	r0, [pc, #64]	; (8009270 <TlInit+0x50>)
 8009230:	f000 faf2 	bl	8009818 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009234:	2001      	movs	r0, #1
 8009236:	f000 f825 	bl	8009284 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <TlInit+0x54>)
 800923c:	2201      	movs	r2, #1
 800923e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009240:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <TlInit+0x58>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00c      	beq.n	8009262 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800924c:	4b0b      	ldr	r3, [pc, #44]	; (800927c <TlInit+0x5c>)
 800924e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <TlInit+0x60>)
 8009252:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009254:	4b08      	ldr	r3, [pc, #32]	; (8009278 <TlInit+0x58>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f107 020c 	add.w	r2, r7, #12
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
  }

  return;
 8009260:	bf00      	nop
 8009262:	bf00      	nop
}
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000954 	.word	0x20000954
 8009270:	20000948 	.word	0x20000948
 8009274:	20000958 	.word	0x20000958
 8009278:	20000cfc 	.word	0x20000cfc
 800927c:	080092d5 	.word	0x080092d5
 8009280:	080092ed 	.word	0x080092ed

08009284 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009294:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <Cmd_SetStatus+0x48>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800929c:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <Cmd_SetStatus+0x48>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2000      	movs	r0, #0
 80092a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80092a4:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <Cmd_SetStatus+0x4c>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80092aa:	e00b      	b.n	80092c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80092ac:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <Cmd_SetStatus+0x4c>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <Cmd_SetStatus+0x48>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80092ba:	4b04      	ldr	r3, [pc, #16]	; (80092cc <Cmd_SetStatus+0x48>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2001      	movs	r0, #1
 80092c0:	4798      	blx	r3
  return;
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
}
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000d1c 	.word	0x20000d1c
 80092d0:	20000950 	.word	0x20000950

080092d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80092dc:	2000      	movs	r0, #0
 80092de:	f7f7 fd83 	bl	8000de8 <shci_cmd_resp_release>

  return;
 80092e2:	bf00      	nop
}
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4805      	ldr	r0, [pc, #20]	; (800930c <TlUserEvtReceived+0x20>)
 80092f8:	f000 fae6 	bl	80098c8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80092fc:	4803      	ldr	r0, [pc, #12]	; (800930c <TlUserEvtReceived+0x20>)
 80092fe:	f7f7 fd67 	bl	8000dd0 <shci_notify_asynch_evt>

  return;
 8009302:	bf00      	nop
}
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000948 	.word	0x20000948

08009310 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a05      	ldr	r2, [pc, #20]	; (8009330 <shci_register_io_bus+0x20>)
 800931c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a04      	ldr	r2, [pc, #16]	; (8009334 <shci_register_io_bus+0x24>)
 8009322:	611a      	str	r2, [r3, #16]

  return;
 8009324:	bf00      	nop
}
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	080094cd 	.word	0x080094cd
 8009334:	08009521 	.word	0x08009521

08009338 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800933c:	f001 f86c 	bl	800a418 <HW_IPCC_Enable>

  return;
 8009340:	bf00      	nop
}
 8009342:	bd80      	pop	{r7, pc}

08009344 <TL_Init>:


void TL_Init( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009348:	4b10      	ldr	r3, [pc, #64]	; (800938c <TL_Init+0x48>)
 800934a:	4a11      	ldr	r2, [pc, #68]	; (8009390 <TL_Init+0x4c>)
 800934c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <TL_Init+0x48>)
 8009350:	4a10      	ldr	r2, [pc, #64]	; (8009394 <TL_Init+0x50>)
 8009352:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009354:	4b0d      	ldr	r3, [pc, #52]	; (800938c <TL_Init+0x48>)
 8009356:	4a10      	ldr	r2, [pc, #64]	; (8009398 <TL_Init+0x54>)
 8009358:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800935a:	4b0c      	ldr	r3, [pc, #48]	; (800938c <TL_Init+0x48>)
 800935c:	4a0f      	ldr	r2, [pc, #60]	; (800939c <TL_Init+0x58>)
 800935e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <TL_Init+0x48>)
 8009362:	4a0f      	ldr	r2, [pc, #60]	; (80093a0 <TL_Init+0x5c>)
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <TL_Init+0x48>)
 8009368:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <TL_Init+0x60>)
 800936a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <TL_Init+0x48>)
 800936e:	4a0e      	ldr	r2, [pc, #56]	; (80093a8 <TL_Init+0x64>)
 8009370:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009372:	4b06      	ldr	r3, [pc, #24]	; (800938c <TL_Init+0x48>)
 8009374:	4a0d      	ldr	r2, [pc, #52]	; (80093ac <TL_Init+0x68>)
 8009376:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <TL_Init+0x48>)
 800937a:	4a0d      	ldr	r2, [pc, #52]	; (80093b0 <TL_Init+0x6c>)
 800937c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <TL_Init+0x48>)
 8009380:	4a0c      	ldr	r2, [pc, #48]	; (80093b4 <TL_Init+0x70>)
 8009382:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009384:	f001 f85c 	bl	800a440 <HW_IPCC_Init>

  return;
 8009388:	bf00      	nop
}
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20030000 	.word	0x20030000
 8009390:	20030028 	.word	0x20030028
 8009394:	20030048 	.word	0x20030048
 8009398:	20030058 	.word	0x20030058
 800939c:	20030068 	.word	0x20030068
 80093a0:	20030070 	.word	0x20030070
 80093a4:	20030078 	.word	0x20030078
 80093a8:	20030080 	.word	0x20030080
 80093ac:	2003009c 	.word	0x2003009c
 80093b0:	200300a0 	.word	0x200300a0
 80093b4:	200300ac 	.word	0x200300ac

080093b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80093c4:	4811      	ldr	r0, [pc, #68]	; (800940c <TL_BLE_Init+0x54>)
 80093c6:	f000 fa27 	bl	8009818 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80093ca:	4b11      	ldr	r3, [pc, #68]	; (8009410 <TL_BLE_Init+0x58>)
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68da      	ldr	r2, [r3, #12]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4a0c      	ldr	r2, [pc, #48]	; (8009414 <TL_BLE_Init+0x5c>)
 80093e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	4a08      	ldr	r2, [pc, #32]	; (800940c <TL_BLE_Init+0x54>)
 80093ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80093ec:	f001 f83e 	bl	800a46c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a08      	ldr	r2, [pc, #32]	; (8009418 <TL_BLE_Init+0x60>)
 80093f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	4a07      	ldr	r2, [pc, #28]	; (800941c <TL_BLE_Init+0x64>)
 80093fe:	6013      	str	r3, [r2, #0]

  return 0;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	200300c8 	.word	0x200300c8
 8009410:	20030000 	.word	0x20030000
 8009414:	20000900 	.word	0x20000900
 8009418:	20000d28 	.word	0x20000d28
 800941c:	20000d2c 	.word	0x20000d2c

08009420 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <TL_BLE_SendCmd+0x34>)
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2201      	movs	r2, #1
 8009434:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009436:	4b07      	ldr	r3, [pc, #28]	; (8009454 <TL_BLE_SendCmd+0x34>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4619      	mov	r1, r3
 800943e:	2001      	movs	r0, #1
 8009440:	f000 f96c 	bl	800971c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009444:	f001 f81c 	bl	800a480 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20030000 	.word	0x20030000

08009458 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800945e:	e01c      	b.n	800949a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009460:	1d3b      	adds	r3, r7, #4
 8009462:	4619      	mov	r1, r3
 8009464:	4812      	ldr	r0, [pc, #72]	; (80094b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009466:	f000 fa76 	bl	8009956 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7a5b      	ldrb	r3, [r3, #9]
 800946e:	2b0f      	cmp	r3, #15
 8009470:	d003      	beq.n	800947a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7a5b      	ldrb	r3, [r3, #9]
 8009476:	2b0e      	cmp	r3, #14
 8009478:	d105      	bne.n	8009486 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4619      	mov	r1, r3
 800947e:	2002      	movs	r0, #2
 8009480:	f000 f94c 	bl	800971c <OutputDbgTrace>
 8009484:	e004      	b.n	8009490 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4619      	mov	r1, r3
 800948a:	2003      	movs	r0, #3
 800948c:	f000 f946 	bl	800971c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009490:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4610      	mov	r0, r2
 8009498:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800949a:	4805      	ldr	r0, [pc, #20]	; (80094b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800949c:	f000 f9cc 	bl	8009838 <LST_is_empty>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0dc      	beq.n	8009460 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80094a6:	bf00      	nop
}
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200300c8 	.word	0x200300c8
 80094b4:	20000d28 	.word	0x20000d28

080094b8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4798      	blx	r3

  return;
 80094c2:	bf00      	nop
}
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20000d2c 	.word	0x20000d2c

080094cc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80094d8:	480d      	ldr	r0, [pc, #52]	; (8009510 <TL_SYS_Init+0x44>)
 80094da:	f000 f99d 	bl	8009818 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80094de:	4b0d      	ldr	r3, [pc, #52]	; (8009514 <TL_SYS_Init+0x48>)
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	4a08      	ldr	r2, [pc, #32]	; (8009510 <TL_SYS_Init+0x44>)
 80094f0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80094f2:	f000 ffe7 	bl	800a4c4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a07      	ldr	r2, [pc, #28]	; (8009518 <TL_SYS_Init+0x4c>)
 80094fc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	4a06      	ldr	r2, [pc, #24]	; (800951c <TL_SYS_Init+0x50>)
 8009504:	6013      	str	r3, [r2, #0]

  return 0;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200300d0 	.word	0x200300d0
 8009514:	20030000 	.word	0x20030000
 8009518:	20000d30 	.word	0x20000d30
 800951c:	20000d34 	.word	0x20000d34

08009520 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <TL_SYS_SendCmd+0x34>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2210      	movs	r2, #16
 8009534:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <TL_SYS_SendCmd+0x34>)
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	2004      	movs	r0, #4
 8009540:	f000 f8ec 	bl	800971c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009544:	f000 ffc8 	bl	800a4d8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20030000 	.word	0x20030000

08009558 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800955c:	4b07      	ldr	r3, [pc, #28]	; (800957c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4619      	mov	r1, r3
 8009564:	2005      	movs	r0, #5
 8009566:	f000 f8d9 	bl	800971c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a03      	ldr	r2, [pc, #12]	; (800957c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009570:	68d2      	ldr	r2, [r2, #12]
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	4610      	mov	r0, r2
 8009576:	4798      	blx	r3

  return;
 8009578:	bf00      	nop
}
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20030000 	.word	0x20030000
 8009580:	20000d30 	.word	0x20000d30

08009584 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800958a:	e00e      	b.n	80095aa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800958c:	1d3b      	adds	r3, r7, #4
 800958e:	4619      	mov	r1, r3
 8009590:	480b      	ldr	r0, [pc, #44]	; (80095c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009592:	f000 f9e0 	bl	8009956 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4619      	mov	r1, r3
 800959a:	2006      	movs	r0, #6
 800959c:	f000 f8be 	bl	800971c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80095a0:	4b08      	ldr	r3, [pc, #32]	; (80095c4 <HW_IPCC_SYS_EvtNot+0x40>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	4610      	mov	r0, r2
 80095a8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80095aa:	4805      	ldr	r0, [pc, #20]	; (80095c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80095ac:	f000 f944 	bl	8009838 <LST_is_empty>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0ea      	beq.n	800958c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80095b6:	bf00      	nop
}
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200300d0 	.word	0x200300d0
 80095c4:	20000d34 	.word	0x20000d34

080095c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80095d0:	4817      	ldr	r0, [pc, #92]	; (8009630 <TL_MM_Init+0x68>)
 80095d2:	f000 f921 	bl	8009818 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80095d6:	4817      	ldr	r0, [pc, #92]	; (8009634 <TL_MM_Init+0x6c>)
 80095d8:	f000 f91e 	bl	8009818 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80095dc:	4b16      	ldr	r3, [pc, #88]	; (8009638 <TL_MM_Init+0x70>)
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	4a16      	ldr	r2, [pc, #88]	; (800963c <TL_MM_Init+0x74>)
 80095e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80095e4:	4b15      	ldr	r3, [pc, #84]	; (800963c <TL_MM_Init+0x74>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6892      	ldr	r2, [r2, #8]
 80095ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <TL_MM_Init+0x74>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	68d2      	ldr	r2, [r2, #12]
 80095f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80095f8:	4b10      	ldr	r3, [pc, #64]	; (800963c <TL_MM_Init+0x74>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a0c      	ldr	r2, [pc, #48]	; (8009630 <TL_MM_Init+0x68>)
 80095fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <TL_MM_Init+0x74>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	6812      	ldr	r2, [r2, #0]
 8009608:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <TL_MM_Init+0x74>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	6852      	ldr	r2, [r2, #4]
 8009612:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009614:	4b09      	ldr	r3, [pc, #36]	; (800963c <TL_MM_Init+0x74>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6912      	ldr	r2, [r2, #16]
 800961c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <TL_MM_Init+0x74>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6952      	ldr	r2, [r2, #20]
 8009626:	619a      	str	r2, [r3, #24]

  return;
 8009628:	bf00      	nop
}
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	200300b8 	.word	0x200300b8
 8009634:	20000d20 	.word	0x20000d20
 8009638:	20030000 	.word	0x20030000
 800963c:	20000d38 	.word	0x20000d38

08009640 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4807      	ldr	r0, [pc, #28]	; (8009668 <TL_MM_EvtDone+0x28>)
 800964c:	f000 f93c 	bl	80098c8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	2000      	movs	r0, #0
 8009654:	f000 f862 	bl	800971c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009658:	4804      	ldr	r0, [pc, #16]	; (800966c <TL_MM_EvtDone+0x2c>)
 800965a:	f000 ff63 	bl	800a524 <HW_IPCC_MM_SendFreeBuf>

  return;
 800965e:	bf00      	nop
}
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20000d20 	.word	0x20000d20
 800966c:	08009671 	.word	0x08009671

08009670 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009676:	e00c      	b.n	8009692 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009678:	1d3b      	adds	r3, r7, #4
 800967a:	4619      	mov	r1, r3
 800967c:	480a      	ldr	r0, [pc, #40]	; (80096a8 <SendFreeBuf+0x38>)
 800967e:	f000 f96a 	bl	8009956 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <SendFreeBuf+0x3c>)
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f91b 	bl	80098c8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009692:	4805      	ldr	r0, [pc, #20]	; (80096a8 <SendFreeBuf+0x38>)
 8009694:	f000 f8d0 	bl	8009838 <LST_is_empty>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0ec      	beq.n	8009678 <SendFreeBuf+0x8>
  }

  return;
 800969e:	bf00      	nop
}
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000d20 	.word	0x20000d20
 80096ac:	20030000 	.word	0x20030000

080096b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80096b4:	4805      	ldr	r0, [pc, #20]	; (80096cc <TL_TRACES_Init+0x1c>)
 80096b6:	f000 f8af 	bl	8009818 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <TL_TRACES_Init+0x20>)
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	4a03      	ldr	r2, [pc, #12]	; (80096cc <TL_TRACES_Init+0x1c>)
 80096c0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80096c2:	f000 ff65 	bl	800a590 <HW_IPCC_TRACES_Init>

  return;
 80096c6:	bf00      	nop
}
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200300c0 	.word	0x200300c0
 80096d0:	20030000 	.word	0x20030000

080096d4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80096da:	e008      	b.n	80096ee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80096dc:	1d3b      	adds	r3, r7, #4
 80096de:	4619      	mov	r1, r3
 80096e0:	4808      	ldr	r0, [pc, #32]	; (8009704 <HW_IPCC_TRACES_EvtNot+0x30>)
 80096e2:	f000 f938 	bl	8009956 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 f80d 	bl	8009708 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80096ee:	4805      	ldr	r0, [pc, #20]	; (8009704 <HW_IPCC_TRACES_EvtNot+0x30>)
 80096f0:	f000 f8a2 	bl	8009838 <LST_is_empty>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0f0      	beq.n	80096dc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80096fa:	bf00      	nop
}
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	200300c0 	.word	0x200300c0

08009708 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	6039      	str	r1, [r7, #0]
 8009726:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	2b06      	cmp	r3, #6
 800972c:	d845      	bhi.n	80097ba <OutputDbgTrace+0x9e>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <OutputDbgTrace+0x18>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	08009751 	.word	0x08009751
 8009738:	08009775 	.word	0x08009775
 800973c:	0800977b 	.word	0x0800977b
 8009740:	0800978f 	.word	0x0800978f
 8009744:	0800979b 	.word	0x0800979b
 8009748:	080097a1 	.word	0x080097a1
 800974c:	080097af 	.word	0x080097af
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	7a5b      	ldrb	r3, [r3, #9]
 8009758:	2bff      	cmp	r3, #255	; 0xff
 800975a:	d005      	beq.n	8009768 <OutputDbgTrace+0x4c>
 800975c:	2bff      	cmp	r3, #255	; 0xff
 800975e:	dc05      	bgt.n	800976c <OutputDbgTrace+0x50>
 8009760:	2b0e      	cmp	r3, #14
 8009762:	d005      	beq.n	8009770 <OutputDbgTrace+0x54>
 8009764:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009766:	e001      	b.n	800976c <OutputDbgTrace+0x50>
          break;
 8009768:	bf00      	nop
 800976a:	e027      	b.n	80097bc <OutputDbgTrace+0xa0>
          break;
 800976c:	bf00      	nop
 800976e:	e025      	b.n	80097bc <OutputDbgTrace+0xa0>
          break;
 8009770:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009772:	e023      	b.n	80097bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009778:	e020      	b.n	80097bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	7a5b      	ldrb	r3, [r3, #9]
 8009782:	2b0e      	cmp	r3, #14
 8009784:	d001      	beq.n	800978a <OutputDbgTrace+0x6e>
 8009786:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009788:	e000      	b.n	800978c <OutputDbgTrace+0x70>
          break;
 800978a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800978c:	e016      	b.n	80097bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	7a5b      	ldrb	r3, [r3, #9]
 8009796:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009798:	e010      	b.n	80097bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800979e:	e00d      	b.n	80097bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	7a5b      	ldrb	r3, [r3, #9]
 80097a8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80097aa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80097ac:	e006      	b.n	80097bc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	7a5b      	ldrb	r3, [r3, #9]
 80097b6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80097b8:	e000      	b.n	80097bc <OutputDbgTrace+0xa0>

    default:
      break;
 80097ba:	bf00      	nop
  }

  return;
 80097bc:	bf00      	nop
}
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <OTP_Read+0x48>)
 80097d4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80097d6:	e002      	b.n	80097de <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3b08      	subs	r3, #8
 80097dc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3307      	adds	r3, #7
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	79fa      	ldrb	r2, [r7, #7]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d003      	beq.n	80097f2 <OTP_Read+0x2a>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4a09      	ldr	r2, [pc, #36]	; (8009814 <OTP_Read+0x4c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d1f2      	bne.n	80097d8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3307      	adds	r3, #7
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	79fa      	ldrb	r2, [r7, #7]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d001      	beq.n	8009802 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	1fff73f8 	.word	0x1fff73f8
 8009814:	1fff7000 	.word	0x1fff7000

08009818 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009840:	f3ef 8310 	mrs	r3, PRIMASK
 8009844:	60fb      	str	r3, [r7, #12]
  return(result);
 8009846:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800984a:	b672      	cpsid	i
}
 800984c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d102      	bne.n	800985e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	75fb      	strb	r3, [r7, #23]
 800985c:	e001      	b.n	8009862 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f383 8810 	msr	PRIMASK, r3
}
 800986c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	371c      	adds	r7, #28
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009886:	f3ef 8310 	mrs	r3, PRIMASK
 800988a:	60fb      	str	r3, [r7, #12]
  return(result);
 800988c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800988e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009890:	b672      	cpsid	i
}
 8009892:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	605a      	str	r2, [r3, #4]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f383 8810 	msr	PRIMASK, r3
}
 80098ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098bc:	bf00      	nop
 80098be:	371c      	adds	r7, #28
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d2:	f3ef 8310 	mrs	r3, PRIMASK
 80098d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80098d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098dc:	b672      	cpsid	i
}
 80098de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f383 8810 	msr	PRIMASK, r3
}
 8009906:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800991c:	f3ef 8310 	mrs	r3, PRIMASK
 8009920:	60fb      	str	r3, [r7, #12]
  return(result);
 8009922:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009926:	b672      	cpsid	i
}
 8009928:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6812      	ldr	r2, [r2, #0]
 8009932:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6852      	ldr	r2, [r2, #4]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f383 8810 	msr	PRIMASK, r3
}
 8009948:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b086      	sub	sp, #24
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009960:	f3ef 8310 	mrs	r3, PRIMASK
 8009964:	60fb      	str	r3, [r7, #12]
  return(result);
 8009966:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800996a:	b672      	cpsid	i
}
 800996c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff ffca 	bl	8009914 <LST_remove_node>
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f383 8810 	msr	PRIMASK, r3
}
 800998a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800998c:	bf00      	nop
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009998:	4b03      	ldr	r3, [pc, #12]	; (80099a8 <LL_FLASH_GetUDN+0x14>)
 800999a:	681b      	ldr	r3, [r3, #0]
}
 800999c:	4618      	mov	r0, r3
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	1fff7580 	.word	0x1fff7580

080099ac <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80099b0:	4b03      	ldr	r3, [pc, #12]	; (80099c0 <LL_FLASH_GetDeviceID+0x14>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	b2db      	uxtb	r3, r3
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	1fff7584 	.word	0x1fff7584

080099c4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80099c8:	4b03      	ldr	r3, [pc, #12]	; (80099d8 <LL_FLASH_GetSTCompanyID+0x14>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	0a1b      	lsrs	r3, r3, #8
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	1fff7584 	.word	0x1fff7584

080099dc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80099dc:	b5b0      	push	{r4, r5, r7, lr}
 80099de:	b090      	sub	sp, #64	; 0x40
 80099e0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80099e2:	2392      	movs	r3, #146	; 0x92
 80099e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80099e8:	4b25      	ldr	r3, [pc, #148]	; (8009a80 <APP_BLE_Init+0xa4>)
 80099ea:	1d3c      	adds	r4, r7, #4
 80099ec:	461d      	mov	r5, r3
 80099ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80099fe:	c403      	stmia	r4!, {r0, r1}
 8009a00:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009a02:	f000 f905 	bl	8009c10 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009a06:	2101      	movs	r1, #1
 8009a08:	2002      	movs	r0, #2
 8009a0a:	f000 fde9 	bl	800a5e0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009a0e:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <APP_BLE_Init+0xa8>)
 8009a10:	2100      	movs	r1, #0
 8009a12:	2002      	movs	r0, #2
 8009a14:	f000 ff10 	bl	800a838 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009a18:	1d3b      	adds	r3, r7, #4
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff f8d0 	bl	8008bc0 <SHCI_C2_BLE_Init>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009a26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009a2e:	f7f8 fb19 	bl	8002064 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009a32:	f000 f903 	bl	8009c3c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009a36:	f7ff f81d 	bl	8008a74 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <APP_BLE_Init+0xac>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009a42:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <APP_BLE_Init+0xac>)
 8009a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a48:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009a4a:	4a10      	ldr	r2, [pc, #64]	; (8009a8c <APP_BLE_Init+0xb0>)
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	2001      	movs	r0, #1
 8009a50:	f000 fef2 	bl	800a838 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8009a54:	2006      	movs	r0, #6
 8009a56:	f7fe fe80 	bl	800875a <aci_hal_set_radio_activity_mask>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009a60:	f000 fa9b 	bl	8009f9a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009a64:	4b08      	ldr	r3, [pc, #32]	; (8009a88 <APP_BLE_Init+0xac>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009a6a:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <APP_BLE_Init+0xac>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009a70:	2001      	movs	r0, #1
 8009a72:	f000 f997 	bl	8009da4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009a76:	bf00      	nop
}
 8009a78:	3740      	adds	r7, #64	; 0x40
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	0800bb6c 	.word	0x0800bb6c
 8009a84:	08008ddd 	.word	0x08008ddd
 8009a88:	20000d44 	.word	0x20000d44
 8009a8c:	08009e8d 	.word	0x08009e8d

08009a90 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009a98:	2392      	movs	r3, #146	; 0x92
 8009a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2bff      	cmp	r3, #255	; 0xff
 8009aaa:	d053      	beq.n	8009b54 <SVCCTL_App_Notification+0xc4>
 8009aac:	2bff      	cmp	r3, #255	; 0xff
 8009aae:	f300 80a1 	bgt.w	8009bf4 <SVCCTL_App_Notification+0x164>
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d002      	beq.n	8009abc <SVCCTL_App_Notification+0x2c>
 8009ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab8:	d020      	beq.n	8009afc <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009aba:	e09b      	b.n	8009bf4 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	3302      	adds	r3, #2
 8009ac0:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	4b4e      	ldr	r3, [pc, #312]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009acc:	8adb      	ldrh	r3, [r3, #22]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d106      	bne.n	8009ae0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009ad2:	4b4c      	ldr	r3, [pc, #304]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009ad8:	4b4a      	ldr	r3, [pc, #296]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	f000 f95f 	bl	8009da4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009ae6:	4b48      	ldr	r3, [pc, #288]	; (8009c08 <SVCCTL_App_Notification+0x178>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009aec:	4b45      	ldr	r3, [pc, #276]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009aee:	8ada      	ldrh	r2, [r3, #22]
 8009af0:	4b45      	ldr	r3, [pc, #276]	; (8009c08 <SVCCTL_App_Notification+0x178>)
 8009af2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009af4:	4844      	ldr	r0, [pc, #272]	; (8009c08 <SVCCTL_App_Notification+0x178>)
 8009af6:	f000 fa3c 	bl	8009f72 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009afa:	e07e      	b.n	8009bfa <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	3302      	adds	r3, #2
 8009b00:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d001      	beq.n	8009b0e <SVCCTL_App_Notification+0x7e>
 8009b0a:	2b03      	cmp	r3, #3
          break;
 8009b0c:	e021      	b.n	8009b52 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	3301      	adds	r3, #1
 8009b12:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009b14:	4b3b      	ldr	r3, [pc, #236]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009b16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d104      	bne.n	8009b28 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009b1e:	4b39      	ldr	r3, [pc, #228]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009b20:	2206      	movs	r2, #6
 8009b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009b26:	e003      	b.n	8009b30 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009b28:	4b36      	ldr	r3, [pc, #216]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009b2a:	2205      	movs	r2, #5
 8009b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	4b32      	ldr	r3, [pc, #200]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009b3a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009b3c:	4b32      	ldr	r3, [pc, #200]	; (8009c08 <SVCCTL_App_Notification+0x178>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009b42:	4b30      	ldr	r3, [pc, #192]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009b44:	8ada      	ldrh	r2, [r3, #22]
 8009b46:	4b30      	ldr	r3, [pc, #192]	; (8009c08 <SVCCTL_App_Notification+0x178>)
 8009b48:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009b4a:	482f      	ldr	r0, [pc, #188]	; (8009c08 <SVCCTL_App_Notification+0x178>)
 8009b4c:	f000 fa11 	bl	8009f72 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009b50:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8009b52:	e052      	b.n	8009bfa <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	3302      	adds	r3, #2
 8009b58:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b64:	d040      	beq.n	8009be8 <SVCCTL_App_Notification+0x158>
 8009b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b6a:	dc45      	bgt.n	8009bf8 <SVCCTL_App_Notification+0x168>
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d03d      	beq.n	8009bec <SVCCTL_App_Notification+0x15c>
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	db41      	blt.n	8009bf8 <SVCCTL_App_Notification+0x168>
 8009b74:	f240 420a 	movw	r2, #1034	; 0x40a
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	dc3d      	bgt.n	8009bf8 <SVCCTL_App_Notification+0x168>
 8009b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b80:	dd3a      	ble.n	8009bf8 <SVCCTL_App_Notification+0x168>
 8009b82:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8009b86:	2b09      	cmp	r3, #9
 8009b88:	d836      	bhi.n	8009bf8 <SVCCTL_App_Notification+0x168>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <SVCCTL_App_Notification+0x100>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009be1 	.word	0x08009be1
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bf9 	.word	0x08009bf9
 8009b9c:	08009bf9 	.word	0x08009bf9
 8009ba0:	08009bf9 	.word	0x08009bf9
 8009ba4:	08009bf9 	.word	0x08009bf9
 8009ba8:	08009bf1 	.word	0x08009bf1
 8009bac:	08009bf9 	.word	0x08009bf9
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	08009bf1 	.word	0x08009bf1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009bb8:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009bba:	8adb      	ldrh	r3, [r3, #22]
 8009bbc:	4913      	ldr	r1, [pc, #76]	; (8009c0c <SVCCTL_App_Notification+0x17c>)
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe f822 	bl	8007c08 <aci_gap_pass_key_resp>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8009bca:	e012      	b.n	8009bf2 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <SVCCTL_App_Notification+0x174>)
 8009bce:	8adb      	ldrh	r3, [r3, #22]
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe f9c2 	bl	8007f5c <aci_gap_numeric_comparison_value_confirm_yesno>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8009bde:	e008      	b.n	8009bf2 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	3302      	adds	r3, #2
 8009be4:	61bb      	str	r3, [r7, #24]
          break;
 8009be6:	e004      	b.n	8009bf2 <SVCCTL_App_Notification+0x162>
          break;
 8009be8:	bf00      	nop
 8009bea:	e005      	b.n	8009bf8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009bec:	bf00      	nop
 8009bee:	e003      	b.n	8009bf8 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009bf0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009bf2:	e001      	b.n	8009bf8 <SVCCTL_App_Notification+0x168>
      break;
 8009bf4:	bf00      	nop
 8009bf6:	e000      	b.n	8009bfa <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009bf8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009bfa:	2301      	movs	r3, #1
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3728      	adds	r7, #40	; 0x28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000d44 	.word	0x20000d44
 8009c08:	20000dc8 	.word	0x20000dc8
 8009c0c:	0001b207 	.word	0x0001b207

08009c10 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <Ble_Tl_Init+0x20>)
 8009c18:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <Ble_Tl_Init+0x24>)
 8009c1c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009c1e:	463b      	mov	r3, r7
 8009c20:	4619      	mov	r1, r3
 8009c22:	4805      	ldr	r0, [pc, #20]	; (8009c38 <Ble_Tl_Init+0x28>)
 8009c24:	f7ff f8be 	bl	8008da4 <hci_init>

  return;
 8009c28:	bf00      	nop
}
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	200300d8 	.word	0x200300d8
 8009c34:	08009f3d 	.word	0x08009f3d
 8009c38:	08009f05 	.word	0x08009f05

08009c3c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c3e:	b08d      	sub	sp, #52	; 0x34
 8009c40:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009c42:	2300      	movs	r3, #0
 8009c44:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009c46:	2392      	movs	r3, #146	; 0x92
 8009c48:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009c4a:	f7fe fdda 	bl	8008802 <hci_reset>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009c52:	f000 f8d7 	bl	8009e04 <BleGetBdAddress>
 8009c56:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	2106      	movs	r1, #6
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f7fe fc90 	bl	8008582 <aci_hal_write_config_data>
 8009c62:	4603      	mov	r3, r0
 8009c64:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8009c66:	4a4a      	ldr	r2, [pc, #296]	; (8009d90 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009c68:	2110      	movs	r1, #16
 8009c6a:	2018      	movs	r0, #24
 8009c6c:	f7fe fc89 	bl	8008582 <aci_hal_write_config_data>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009c74:	4a47      	ldr	r2, [pc, #284]	; (8009d94 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8009c76:	2110      	movs	r1, #16
 8009c78:	2008      	movs	r0, #8
 8009c7a:	f7fe fc82 	bl	8008582 <aci_hal_write_config_data>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009c82:	2118      	movs	r1, #24
 8009c84:	2001      	movs	r0, #1
 8009c86:	f7fe fd01 	bl	800868c <aci_hal_set_tx_power_level>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009c8e:	f7fe f9cc 	bl	800802a <aci_gatt_init>
 8009c92:	4603      	mov	r3, r0
 8009c94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	f043 0301 	orr.w	r3, r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01f      	beq.n	8009ce8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009ca8:	4b3b      	ldr	r3, [pc, #236]	; (8009d98 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009caa:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009cac:	1dba      	adds	r2, r7, #6
 8009cae:	7bf8      	ldrb	r0, [r7, #15]
 8009cb0:	1cbb      	adds	r3, r7, #2
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	1d3b      	adds	r3, r7, #4
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	2208      	movs	r2, #8
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	f7fe f80a 	bl	8007cd6 <aci_gap_init>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009cc6:	88fc      	ldrh	r4, [r7, #6]
 8009cc8:	88bd      	ldrh	r5, [r7, #4]
 8009cca:	68b8      	ldr	r0, [r7, #8]
 8009ccc:	f7f6 fa58 	bl	8000180 <strlen>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	2200      	movs	r2, #0
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7fe fba6 	bl	8008430 <aci_gatt_update_char_value>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009ce8:	88f8      	ldrh	r0, [r7, #6]
 8009cea:	8879      	ldrh	r1, [r7, #2]
 8009cec:	463b      	mov	r3, r7
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7fe fb9c 	bl	8008430 <aci_gatt_update_char_value>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	2102      	movs	r1, #2
 8009d00:	2000      	movs	r0, #0
 8009d02:	f7fe fda2 	bl	800884a <hci_le_set_default_phy>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009d10:	4b22      	ldr	r3, [pc, #136]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fd fe5f 	bl	80079d8 <aci_gap_set_io_capability>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009d1e:	4b1f      	ldr	r3, [pc, #124]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009d24:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d26:	2208      	movs	r2, #8
 8009d28:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009d2a:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d2c:	2210      	movs	r2, #16
 8009d2e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009d30:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009d36:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d38:	4a19      	ldr	r2, [pc, #100]	; (8009da0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8009d3a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009d3c:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009d42:	4b16      	ldr	r3, [pc, #88]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d44:	789c      	ldrb	r4, [r3, #2]
 8009d46:	4b15      	ldr	r3, [pc, #84]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d48:	785d      	ldrb	r5, [r3, #1]
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d50:	7952      	ldrb	r2, [r2, #5]
 8009d52:	4912      	ldr	r1, [pc, #72]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d54:	78c9      	ldrb	r1, [r1, #3]
 8009d56:	4811      	ldr	r0, [pc, #68]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d58:	6880      	ldr	r0, [r0, #8]
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	9604      	str	r6, [sp, #16]
 8009d5e:	9003      	str	r0, [sp, #12]
 8009d60:	9102      	str	r1, [sp, #8]
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	2300      	movs	r3, #0
 8009d68:	2201      	movs	r2, #1
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7fd fe87 	bl	8007a80 <aci_gap_set_authentication_requirement>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009d78:	789b      	ldrb	r3, [r3, #2]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009d7e:	f7fe f8c9 	bl	8007f14 <aci_gap_configure_whitelist>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	0800bdb4 	.word	0x0800bdb4
 8009d94:	0800bdc4 	.word	0x0800bdc4
 8009d98:	0800bba8 	.word	0x0800bba8
 8009d9c:	20000d44 	.word	0x20000d44
 8009da0:	0001b207 	.word	0x0001b207

08009da4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08c      	sub	sp, #48	; 0x30
 8009da8:	af08      	add	r7, sp, #32
 8009daa:	4603      	mov	r3, r0
 8009dac:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009dae:	2392      	movs	r3, #146	; 0x92
 8009db0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009db2:	4a12      	ldr	r2, [pc, #72]	; (8009dfc <Adv_Request+0x58>)
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009dba:	2300      	movs	r3, #0
 8009dbc:	9306      	str	r3, [sp, #24]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9302      	str	r3, [sp, #8]
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	22a0      	movs	r2, #160	; 0xa0
 8009dda:	2180      	movs	r1, #128	; 0x80
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f7fd fd01 	bl	80077e4 <aci_gap_set_discoverable>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009de6:	4906      	ldr	r1, [pc, #24]	; (8009e00 <Adv_Request+0x5c>)
 8009de8:	2009      	movs	r0, #9
 8009dea:	f7fe f821 	bl	8007e30 <aci_gap_update_adv_data>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8009df2:	bf00      	nop
}
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000d44 	.word	0x20000d44
 8009e00:	20000014 	.word	0x20000014

08009e04 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009e0a:	f7ff fdc3 	bl	8009994 <LL_FLASH_GetUDN>
 8009e0e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e16:	d023      	beq.n	8009e60 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009e18:	f7ff fdd4 	bl	80099c4 <LL_FLASH_GetSTCompanyID>
 8009e1c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009e1e:	f7ff fdc5 	bl	80099ac <LL_FLASH_GetDeviceID>
 8009e22:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e2a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	0a1b      	lsrs	r3, r3, #8
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e34:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e3c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e44:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e4e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	0c1b      	lsrs	r3, r3, #16
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e58:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <BleGetBdAddress+0x80>)
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e00b      	b.n	8009e78 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009e60:	2000      	movs	r0, #0
 8009e62:	f7ff fcb1 	bl	80097c8 <OTP_Read>
 8009e66:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e001      	b.n	8009e78 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <BleGetBdAddress+0x84>)
 8009e76:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009e78:	697b      	ldr	r3, [r7, #20]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20000d3c 	.word	0x20000d3c
 8009e88:	0800bdac 	.word	0x0800bdac

08009e8c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009e92:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <Adv_Cancel+0x30>)
 8009e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d00a      	beq.n	8009eb2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009e9c:	2392      	movs	r3, #146	; 0x92
 8009e9e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009ea0:	f7fd fc7c 	bl	800779c <aci_gap_set_non_discoverable>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <Adv_Cancel+0x30>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
}
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000d44 	.word	0x20000d44

08009ec0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009ec8:	2100      	movs	r1, #0
 8009eca:	2002      	movs	r0, #2
 8009ecc:	f000 fcd6 	bl	800a87c <UTIL_SEQ_SetTask>

  return;
 8009ed0:	bf00      	nop
}
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	f000 fd37 	bl	800a954 <UTIL_SEQ_SetEvt>

  return;
 8009ee6:	bf00      	nop
}
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	f000 fd4c 	bl	800a994 <UTIL_SEQ_WaitEvt>

  return;
 8009efc:	bf00      	nop
}
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	3308      	adds	r3, #8
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fdfe 	bl	8008b18 <SVCCTL_UserEvtRx>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009f2c:	e003      	b.n	8009f36 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
  return;
 8009f34:	bf00      	nop
}
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <BLE_StatusNot+0x16>
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d006      	beq.n	8009f5e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009f50:	e00b      	b.n	8009f6a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009f52:	2303      	movs	r3, #3
 8009f54:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 fcbc 	bl	800a8d4 <UTIL_SEQ_PauseTask>
      break;
 8009f5c:	e005      	b.n	8009f6a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 fcd6 	bl	800a914 <UTIL_SEQ_ResumeTask>
      break;
 8009f68:	bf00      	nop
  }

  return;
 8009f6a:	bf00      	nop
}
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <Custom_APP_Notification+0x16>
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d002      	beq.n	8009f8c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009f86:	e002      	b.n	8009f8e <Custom_APP_Notification+0x1c>
      break;
 8009f88:	bf00      	nop
 8009f8a:	e000      	b.n	8009f8e <Custom_APP_Notification+0x1c>
      break;
 8009f8c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009f8e:	bf00      	nop
}
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009f9e:	bf00      	nop
}
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b08b      	sub	sp, #44	; 0x2c
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2bff      	cmp	r3, #255	; 0xff
 8009fc2:	d12b      	bne.n	800a01c <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	881b      	ldrh	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	f640 4214 	movw	r2, #3092	; 0xc14
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d01b      	beq.n	800a010 <Custom_STM_Event_Handler+0x68>
 8009fd8:	f640 4214 	movw	r2, #3092	; 0xc14
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	dc19      	bgt.n	800a014 <Custom_STM_Event_Handler+0x6c>
 8009fe0:	f640 4201 	movw	r2, #3073	; 0xc01
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d003      	beq.n	8009ff0 <Custom_STM_Event_Handler+0x48>
 8009fe8:	f640 4213 	movw	r2, #3091	; 0xc13
 8009fec:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8009fee:	e014      	b.n	800a01a <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	3302      	adds	r3, #2
 8009ff4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <Custom_STM_Event_Handler+0x88>)
 800a000:	885b      	ldrh	r3, [r3, #2]
 800a002:	3301      	adds	r3, #1
 800a004:	429a      	cmp	r2, r3
 800a006:	d107      	bne.n	800a018 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800a00e:	e003      	b.n	800a018 <Custom_STM_Event_Handler+0x70>
          break;
 800a010:	bf00      	nop
 800a012:	e004      	b.n	800a01e <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800a014:	bf00      	nop
 800a016:	e002      	b.n	800a01e <Custom_STM_Event_Handler+0x76>
          break;
 800a018:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a01a:	e000      	b.n	800a01e <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800a01c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800a01e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800a022:	4618      	mov	r0, r3
 800a024:	372c      	adds	r7, #44	; 0x2c
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	20000dcc 	.word	0x20000dcc

0800a034 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08c      	sub	sp, #48	; 0x30
 800a038:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a03a:	2392      	movs	r3, #146	; 0x92
 800a03c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800a03e:	4834      	ldr	r0, [pc, #208]	; (800a110 <SVCCTL_InitCustomSvc+0xdc>)
 800a040:	f7fe fd50 	bl	8008ae4 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800a044:	238f      	movs	r3, #143	; 0x8f
 800a046:	713b      	strb	r3, [r7, #4]
 800a048:	23e5      	movs	r3, #229	; 0xe5
 800a04a:	717b      	strb	r3, [r7, #5]
 800a04c:	23b3      	movs	r3, #179	; 0xb3
 800a04e:	71bb      	strb	r3, [r7, #6]
 800a050:	23d5      	movs	r3, #213	; 0xd5
 800a052:	71fb      	strb	r3, [r7, #7]
 800a054:	232e      	movs	r3, #46	; 0x2e
 800a056:	723b      	strb	r3, [r7, #8]
 800a058:	237f      	movs	r3, #127	; 0x7f
 800a05a:	727b      	strb	r3, [r7, #9]
 800a05c:	234a      	movs	r3, #74	; 0x4a
 800a05e:	72bb      	strb	r3, [r7, #10]
 800a060:	2398      	movs	r3, #152	; 0x98
 800a062:	72fb      	strb	r3, [r7, #11]
 800a064:	232a      	movs	r3, #42	; 0x2a
 800a066:	733b      	strb	r3, [r7, #12]
 800a068:	2348      	movs	r3, #72	; 0x48
 800a06a:	737b      	strb	r3, [r7, #13]
 800a06c:	237a      	movs	r3, #122	; 0x7a
 800a06e:	73bb      	strb	r3, [r7, #14]
 800a070:	23cc      	movs	r3, #204	; 0xcc
 800a072:	73fb      	strb	r3, [r7, #15]
 800a074:	2300      	movs	r3, #0
 800a076:	743b      	strb	r3, [r7, #16]
 800a078:	2300      	movs	r3, #0
 800a07a:	747b      	strb	r3, [r7, #17]
 800a07c:	2300      	movs	r3, #0
 800a07e:	74bb      	strb	r3, [r7, #18]
 800a080:	2300      	movs	r3, #0
 800a082:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800a084:	1d39      	adds	r1, r7, #4
 800a086:	4b23      	ldr	r3, [pc, #140]	; (800a114 <SVCCTL_InitCustomSvc+0xe0>)
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	2303      	movs	r3, #3
 800a08c:	2201      	movs	r2, #1
 800a08e:	2002      	movs	r0, #2
 800a090:	f7fd fff0 	bl	8008074 <aci_gatt_add_service>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800a098:	2319      	movs	r3, #25
 800a09a:	713b      	strb	r3, [r7, #4]
 800a09c:	23ed      	movs	r3, #237	; 0xed
 800a09e:	717b      	strb	r3, [r7, #5]
 800a0a0:	2382      	movs	r3, #130	; 0x82
 800a0a2:	71bb      	strb	r3, [r7, #6]
 800a0a4:	23ae      	movs	r3, #174	; 0xae
 800a0a6:	71fb      	strb	r3, [r7, #7]
 800a0a8:	23ed      	movs	r3, #237	; 0xed
 800a0aa:	723b      	strb	r3, [r7, #8]
 800a0ac:	2321      	movs	r3, #33	; 0x21
 800a0ae:	727b      	strb	r3, [r7, #9]
 800a0b0:	234c      	movs	r3, #76	; 0x4c
 800a0b2:	72bb      	strb	r3, [r7, #10]
 800a0b4:	239d      	movs	r3, #157	; 0x9d
 800a0b6:	72fb      	strb	r3, [r7, #11]
 800a0b8:	2341      	movs	r3, #65	; 0x41
 800a0ba:	733b      	strb	r3, [r7, #12]
 800a0bc:	2345      	movs	r3, #69	; 0x45
 800a0be:	737b      	strb	r3, [r7, #13]
 800a0c0:	2322      	movs	r3, #34	; 0x22
 800a0c2:	73bb      	strb	r3, [r7, #14]
 800a0c4:	238e      	movs	r3, #142	; 0x8e
 800a0c6:	73fb      	strb	r3, [r7, #15]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	743b      	strb	r3, [r7, #16]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	747b      	strb	r3, [r7, #17]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	74bb      	strb	r3, [r7, #18]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800a0d8:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <SVCCTL_InitCustomSvc+0xe0>)
 800a0da:	8818      	ldrh	r0, [r3, #0]
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <SVCCTL_InitCustomSvc+0xe4>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	1d3a      	adds	r2, r7, #4
 800a0e4:	490d      	ldr	r1, [pc, #52]	; (800a11c <SVCCTL_InitCustomSvc+0xe8>)
 800a0e6:	9105      	str	r1, [sp, #20]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	9104      	str	r1, [sp, #16]
 800a0ec:	2110      	movs	r1, #16
 800a0ee:	9103      	str	r1, [sp, #12]
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	9102      	str	r1, [sp, #8]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	9101      	str	r1, [sp, #4]
 800a0f8:	2108      	movs	r1, #8
 800a0fa:	9100      	str	r1, [sp, #0]
 800a0fc:	2102      	movs	r1, #2
 800a0fe:	f7fe f88f 	bl	8008220 <aci_gatt_add_char>
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800a106:	bf00      	nop
}
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08009fa9 	.word	0x08009fa9
 800a114:	20000dcc 	.word	0x20000dcc
 800a118:	2000001d 	.word	0x2000001d
 800a11c:	20000dce 	.word	0x20000dce

0800a120 <LL_PWR_EnableBootC2>:
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <LL_PWR_EnableBootC2+0x1c>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	4a04      	ldr	r2, [pc, #16]	; (800a13c <LL_PWR_EnableBootC2+0x1c>)
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12e:	60d3      	str	r3, [r2, #12]
}
 800a130:	bf00      	nop
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	58000400 	.word	0x58000400

0800a140 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a14a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a14e:	4905      	ldr	r1, [pc, #20]	; (800a164 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4313      	orrs	r3, r2
 800a154:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	58000800 	.word	0x58000800

0800a168 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a172:	6a1a      	ldr	r2, [r3, #32]
 800a174:	4904      	ldr	r1, [pc, #16]	; (800a188 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4313      	orrs	r3, r2
 800a17a:	620b      	str	r3, [r1, #32]
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	58000800 	.word	0x58000800

0800a18c <LL_AHB3_GRP1_EnableClock>:
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a19a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
}
 800a1b2:	bf00      	nop
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b085      	sub	sp, #20
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a1c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a1ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a1da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1de:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <LL_C1_IPCC_EnableIT_TXF>:
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	601a      	str	r2, [r3, #0]
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <LL_C1_IPCC_EnableIT_RXO>:
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f043 0201 	orr.w	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	601a      	str	r2, [r3, #0]
}
 800a22a:	bf00      	nop
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	041b      	lsls	r3, r3, #16
 800a248:	43db      	mvns	r3, r3
 800a24a:	401a      	ands	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	041b      	lsls	r3, r3, #16
 800a26e:	431a      	orrs	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	605a      	str	r2, [r3, #4]
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	43db      	mvns	r3, r3
 800a292:	401a      	ands	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	609a      	str	r2, [r3, #8]
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <LL_C1_IPCC_SetFlag_CHx>:
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	041a      	lsls	r2, r3, #16
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	609a      	str	r2, [r3, #8]
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d101      	bne.n	800a2fa <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	69da      	ldr	r2, [r3, #28]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	4013      	ands	r3, r2
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d101      	bne.n	800a324 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a320:	2301      	movs	r3, #1
 800a322:	e000      	b.n	800a326 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a338:	2102      	movs	r1, #2
 800a33a:	4819      	ldr	r0, [pc, #100]	; (800a3a0 <HW_IPCC_Rx_Handler+0x6c>)
 800a33c:	f7ff ffe4 	bl	800a308 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <HW_IPCC_Rx_Handler+0x26>
 800a346:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <HW_IPCC_Rx_Handler+0x6c>)
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	43db      	mvns	r3, r3
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800a354:	f000 f8da 	bl	800a50c <HW_IPCC_SYS_EvtHandler>
 800a358:	e01f      	b.n	800a39a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a35a:	2101      	movs	r1, #1
 800a35c:	4810      	ldr	r0, [pc, #64]	; (800a3a0 <HW_IPCC_Rx_Handler+0x6c>)
 800a35e:	f7ff ffd3 	bl	800a308 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d008      	beq.n	800a37a <HW_IPCC_Rx_Handler+0x46>
 800a368:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <HW_IPCC_Rx_Handler+0x6c>)
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800a374:	f000 f88e 	bl	800a494 <HW_IPCC_BLE_EvtHandler>
 800a378:	e00f      	b.n	800a39a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a37a:	2108      	movs	r1, #8
 800a37c:	4808      	ldr	r0, [pc, #32]	; (800a3a0 <HW_IPCC_Rx_Handler+0x6c>)
 800a37e:	f7ff ffc3 	bl	800a308 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d009      	beq.n	800a39c <HW_IPCC_Rx_Handler+0x68>
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <HW_IPCC_Rx_Handler+0x6c>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	43db      	mvns	r3, r3
 800a38e:	f003 0308 	and.w	r3, r3, #8
 800a392:	2b00      	cmp	r3, #0
 800a394:	d002      	beq.n	800a39c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a396:	f000 f905 	bl	800a5a4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a39a:	bf00      	nop
 800a39c:	bf00      	nop
}
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	58000c00 	.word	0x58000c00

0800a3a4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a3a8:	2102      	movs	r1, #2
 800a3aa:	481a      	ldr	r0, [pc, #104]	; (800a414 <HW_IPCC_Tx_Handler+0x70>)
 800a3ac:	f7ff ff97 	bl	800a2de <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <HW_IPCC_Tx_Handler+0x26>
 800a3b6:	4b17      	ldr	r3, [pc, #92]	; (800a414 <HW_IPCC_Tx_Handler+0x70>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	43db      	mvns	r3, r3
 800a3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a3c4:	f000 f896 	bl	800a4f4 <HW_IPCC_SYS_CmdEvtHandler>
 800a3c8:	e020      	b.n	800a40c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a3ca:	2108      	movs	r1, #8
 800a3cc:	4811      	ldr	r0, [pc, #68]	; (800a414 <HW_IPCC_Tx_Handler+0x70>)
 800a3ce:	f7ff ff86 	bl	800a2de <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d109      	bne.n	800a3ec <HW_IPCC_Tx_Handler+0x48>
 800a3d8:	4b0e      	ldr	r3, [pc, #56]	; (800a414 <HW_IPCC_Tx_Handler+0x70>)
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	43db      	mvns	r3, r3
 800a3de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a3e6:	f000 f8bf 	bl	800a568 <HW_IPCC_MM_FreeBufHandler>
 800a3ea:	e00f      	b.n	800a40c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a3ec:	2120      	movs	r1, #32
 800a3ee:	4809      	ldr	r0, [pc, #36]	; (800a414 <HW_IPCC_Tx_Handler+0x70>)
 800a3f0:	f7ff ff75 	bl	800a2de <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d109      	bne.n	800a40e <HW_IPCC_Tx_Handler+0x6a>
 800a3fa:	4b06      	ldr	r3, [pc, #24]	; (800a414 <HW_IPCC_Tx_Handler+0x70>)
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	43db      	mvns	r3, r3
 800a400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a408:	f000 f850 	bl	800a4ac <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
}
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	58000c00 	.word	0x58000c00

0800a418 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a41c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a420:	f7ff fecd 	bl	800a1be <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a424:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a428:	f7ff fe9e 	bl	800a168 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a42c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a430:	f7ff fe86 	bl	800a140 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a434:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a436:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a438:	f7ff fe72 	bl	800a120 <LL_PWR_EnableBootC2>

  return;
 800a43c:	bf00      	nop
}
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a444:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a448:	f7ff fea0 	bl	800a18c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a44c:	4806      	ldr	r0, [pc, #24]	; (800a468 <HW_IPCC_Init+0x28>)
 800a44e:	f7ff fee2 	bl	800a216 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <HW_IPCC_Init+0x28>)
 800a454:	f7ff fecf 	bl	800a1f6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a458:	202c      	movs	r0, #44	; 0x2c
 800a45a:	f7f8 fbca 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a45e:	202d      	movs	r0, #45	; 0x2d
 800a460:	f7f8 fbc7 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

  return;
 800a464:	bf00      	nop
}
 800a466:	bd80      	pop	{r7, pc}
 800a468:	58000c00 	.word	0x58000c00

0800a46c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a470:	2101      	movs	r1, #1
 800a472:	4802      	ldr	r0, [pc, #8]	; (800a47c <HW_IPCC_BLE_Init+0x10>)
 800a474:	f7ff ff04 	bl	800a280 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a478:	bf00      	nop
}
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	58000c00 	.word	0x58000c00

0800a480 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a484:	2101      	movs	r1, #1
 800a486:	4802      	ldr	r0, [pc, #8]	; (800a490 <HW_IPCC_BLE_SendCmd+0x10>)
 800a488:	f7ff ff1a 	bl	800a2c0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a48c:	bf00      	nop
}
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	58000c00 	.word	0x58000c00

0800a494 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a498:	f7fe ffde 	bl	8009458 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a49c:	2101      	movs	r1, #1
 800a49e:	4802      	ldr	r0, [pc, #8]	; (800a4a8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a4a0:	f7ff ff00 	bl	800a2a4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a4a4:	bf00      	nop
}
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	58000c00 	.word	0x58000c00

0800a4ac <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a4b0:	2120      	movs	r1, #32
 800a4b2:	4803      	ldr	r0, [pc, #12]	; (800a4c0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a4b4:	f7ff fed2 	bl	800a25c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a4b8:	f7fe fffe 	bl	80094b8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a4bc:	bf00      	nop
}
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	58000c00 	.word	0x58000c00

0800a4c4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a4c8:	2102      	movs	r1, #2
 800a4ca:	4802      	ldr	r0, [pc, #8]	; (800a4d4 <HW_IPCC_SYS_Init+0x10>)
 800a4cc:	f7ff fed8 	bl	800a280 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a4d0:	bf00      	nop
}
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	58000c00 	.word	0x58000c00

0800a4d8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4dc:	2102      	movs	r1, #2
 800a4de:	4804      	ldr	r0, [pc, #16]	; (800a4f0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a4e0:	f7ff feee 	bl	800a2c0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	4802      	ldr	r0, [pc, #8]	; (800a4f0 <HW_IPCC_SYS_SendCmd+0x18>)
 800a4e8:	f7ff fea5 	bl	800a236 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a4ec:	bf00      	nop
}
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	58000c00 	.word	0x58000c00

0800a4f4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4f8:	2102      	movs	r1, #2
 800a4fa:	4803      	ldr	r0, [pc, #12]	; (800a508 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a4fc:	f7ff feae 	bl	800a25c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a500:	f7ff f82a 	bl	8009558 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a504:	bf00      	nop
}
 800a506:	bd80      	pop	{r7, pc}
 800a508:	58000c00 	.word	0x58000c00

0800a50c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a510:	f7ff f838 	bl	8009584 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a514:	2102      	movs	r1, #2
 800a516:	4802      	ldr	r0, [pc, #8]	; (800a520 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a518:	f7ff fec4 	bl	800a2a4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a51c:	bf00      	nop
}
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	58000c00 	.word	0x58000c00

0800a524 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a52c:	2108      	movs	r1, #8
 800a52e:	480c      	ldr	r0, [pc, #48]	; (800a560 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a530:	f7ff fed5 	bl	800a2de <LL_C1_IPCC_IsActiveFlag_CHx>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d007      	beq.n	800a54a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a53a:	4a0a      	ldr	r2, [pc, #40]	; (800a564 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a540:	2108      	movs	r1, #8
 800a542:	4807      	ldr	r0, [pc, #28]	; (800a560 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a544:	f7ff fe77 	bl	800a236 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a548:	e006      	b.n	800a558 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a54e:	2108      	movs	r1, #8
 800a550:	4803      	ldr	r0, [pc, #12]	; (800a560 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a552:	f7ff feb5 	bl	800a2c0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a556:	bf00      	nop
}
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	58000c00 	.word	0x58000c00
 800a564:	20000dd0 	.word	0x20000dd0

0800a568 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a56c:	2108      	movs	r1, #8
 800a56e:	4806      	ldr	r0, [pc, #24]	; (800a588 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a570:	f7ff fe74 	bl	800a25c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a57a:	2108      	movs	r1, #8
 800a57c:	4802      	ldr	r0, [pc, #8]	; (800a588 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a57e:	f7ff fe9f 	bl	800a2c0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a582:	bf00      	nop
}
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	58000c00 	.word	0x58000c00
 800a58c:	20000dd0 	.word	0x20000dd0

0800a590 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a594:	2108      	movs	r1, #8
 800a596:	4802      	ldr	r0, [pc, #8]	; (800a5a0 <HW_IPCC_TRACES_Init+0x10>)
 800a598:	f7ff fe72 	bl	800a280 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a59c:	bf00      	nop
}
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	58000c00 	.word	0x58000c00

0800a5a4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a5a8:	f7ff f894 	bl	80096d4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5ac:	2108      	movs	r1, #8
 800a5ae:	4802      	ldr	r0, [pc, #8]	; (800a5b8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a5b0:	f7ff fe78 	bl	800a2a4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a5b4:	bf00      	nop
}
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	58000c00 	.word	0x58000c00

0800a5bc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <UTIL_LPM_Init+0x1c>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <UTIL_LPM_Init+0x20>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000dd4 	.word	0x20000dd4
 800a5dc:	20000dd8 	.word	0x20000dd8

0800a5e0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f0:	613b      	str	r3, [r7, #16]
  return(result);
 800a5f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5f6:	b672      	cpsid	i
}
 800a5f8:	bf00      	nop
  
  switch(state)
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <UTIL_LPM_SetOffMode+0x32>
 800a600:	2b01      	cmp	r3, #1
 800a602:	d10e      	bne.n	800a622 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <UTIL_LPM_SetOffMode+0x5c>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	4a0b      	ldr	r2, [pc, #44]	; (800a63c <UTIL_LPM_SetOffMode+0x5c>)
 800a60e:	6013      	str	r3, [r2, #0]
      break;
 800a610:	e008      	b.n	800a624 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	43da      	mvns	r2, r3
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <UTIL_LPM_SetOffMode+0x5c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4013      	ands	r3, r2
 800a61c:	4a07      	ldr	r2, [pc, #28]	; (800a63c <UTIL_LPM_SetOffMode+0x5c>)
 800a61e:	6013      	str	r3, [r2, #0]
      break;
 800a620:	e000      	b.n	800a624 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a622:	bf00      	nop
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f383 8810 	msr	PRIMASK, r3
}
 800a62e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a630:	bf00      	nop
 800a632:	371c      	adds	r7, #28
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	20000dd8 	.word	0x20000dd8

0800a640 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b090      	sub	sp, #64	; 0x40
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a648:	4b73      	ldr	r3, [pc, #460]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a64e:	4b72      	ldr	r3, [pc, #456]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4013      	ands	r3, r2
 800a656:	4a70      	ldr	r2, [pc, #448]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a658:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a65a:	4b70      	ldr	r3, [pc, #448]	; (800a81c <UTIL_SEQ_Run+0x1dc>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a660:	4b6f      	ldr	r3, [pc, #444]	; (800a820 <UTIL_SEQ_Run+0x1e0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a666:	4b6f      	ldr	r3, [pc, #444]	; (800a824 <UTIL_SEQ_Run+0x1e4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a66c:	4b6e      	ldr	r3, [pc, #440]	; (800a828 <UTIL_SEQ_Run+0x1e8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a672:	e08d      	b.n	800a790 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a678:	e002      	b.n	800a680 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67c:	3301      	adds	r3, #1
 800a67e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a680:	4a6a      	ldr	r2, [pc, #424]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a684:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	401a      	ands	r2, r3
 800a68c:	4b62      	ldr	r3, [pc, #392]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4013      	ands	r3, r2
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0f1      	beq.n	800a67a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a696:	4a65      	ldr	r2, [pc, #404]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a69a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	401a      	ands	r2, r3
 800a6a2:	4b5d      	ldr	r3, [pc, #372]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a6aa:	4a60      	ldr	r2, [pc, #384]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	4413      	add	r3, r2
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d106      	bne.n	800a6ca <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a6bc:	4a5b      	ldr	r2, [pc, #364]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6c8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a6ca:	4a58      	ldr	r2, [pc, #352]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	4413      	add	r3, r2
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 f9b3 	bl	800aa44 <SEQ_BitPosition>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4b53      	ldr	r3, [pc, #332]	; (800a830 <UTIL_SEQ_Run+0x1f0>)
 800a6e4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a6e6:	4a51      	ldr	r2, [pc, #324]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	4b4f      	ldr	r3, [pc, #316]	; (800a830 <UTIL_SEQ_Run+0x1f0>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fa:	43db      	mvns	r3, r3
 800a6fc:	401a      	ands	r2, r3
 800a6fe:	494b      	ldr	r1, [pc, #300]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	440b      	add	r3, r1
 800a706:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a708:	f3ef 8310 	mrs	r3, PRIMASK
 800a70c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a70e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a710:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a712:	b672      	cpsid	i
}
 800a714:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a716:	4b46      	ldr	r3, [pc, #280]	; (800a830 <UTIL_SEQ_Run+0x1f0>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2201      	movs	r2, #1
 800a71c:	fa02 f303 	lsl.w	r3, r2, r3
 800a720:	43da      	mvns	r2, r3
 800a722:	4b3e      	ldr	r3, [pc, #248]	; (800a81c <UTIL_SEQ_Run+0x1dc>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4013      	ands	r3, r2
 800a728:	4a3c      	ldr	r2, [pc, #240]	; (800a81c <UTIL_SEQ_Run+0x1dc>)
 800a72a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a72c:	2302      	movs	r3, #2
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a730:	e013      	b.n	800a75a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a734:	3b01      	subs	r3, #1
 800a736:	4a3d      	ldr	r2, [pc, #244]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a738:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a73c:	4b3c      	ldr	r3, [pc, #240]	; (800a830 <UTIL_SEQ_Run+0x1f0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2201      	movs	r2, #1
 800a742:	fa02 f303 	lsl.w	r3, r2, r3
 800a746:	43da      	mvns	r2, r3
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	3b01      	subs	r3, #1
 800a74c:	400a      	ands	r2, r1
 800a74e:	4937      	ldr	r1, [pc, #220]	; (800a82c <UTIL_SEQ_Run+0x1ec>)
 800a750:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a756:	3b01      	subs	r3, #1
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e8      	bne.n	800a732 <UTIL_SEQ_Run+0xf2>
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f383 8810 	msr	PRIMASK, r3
}
 800a76a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a76c:	4b30      	ldr	r3, [pc, #192]	; (800a830 <UTIL_SEQ_Run+0x1f0>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a30      	ldr	r2, [pc, #192]	; (800a834 <UTIL_SEQ_Run+0x1f4>)
 800a772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a776:	4798      	blx	r3

    local_taskset = TaskSet;
 800a778:	4b28      	ldr	r3, [pc, #160]	; (800a81c <UTIL_SEQ_Run+0x1dc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a77e:	4b28      	ldr	r3, [pc, #160]	; (800a820 <UTIL_SEQ_Run+0x1e0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a784:	4b27      	ldr	r3, [pc, #156]	; (800a824 <UTIL_SEQ_Run+0x1e4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a78a:	4b27      	ldr	r3, [pc, #156]	; (800a828 <UTIL_SEQ_Run+0x1e8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	401a      	ands	r2, r3
 800a796:	4b20      	ldr	r3, [pc, #128]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <UTIL_SEQ_Run+0x16c>
 800a7a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f43f af64 	beq.w	800a674 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a7ac:	4b20      	ldr	r3, [pc, #128]	; (800a830 <UTIL_SEQ_Run+0x1f0>)
 800a7ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7b2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a7b4:	f000 f938 	bl	800aa28 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7bc:	613b      	str	r3, [r7, #16]
  return(result);
 800a7be:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a7c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7c2:	b672      	cpsid	i
}
 800a7c4:	bf00      	nop
  local_taskset = TaskSet;
 800a7c6:	4b15      	ldr	r3, [pc, #84]	; (800a81c <UTIL_SEQ_Run+0x1dc>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a7cc:	4b14      	ldr	r3, [pc, #80]	; (800a820 <UTIL_SEQ_Run+0x1e0>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a7d2:	4b14      	ldr	r3, [pc, #80]	; (800a824 <UTIL_SEQ_Run+0x1e4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a7d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	401a      	ands	r2, r3
 800a7de:	4b0e      	ldr	r3, [pc, #56]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d107      	bne.n	800a7f8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a7e8:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <UTIL_SEQ_Run+0x1e8>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a7f4:	f7f6 fad8 	bl	8000da8 <UTIL_SEQ_Idle>
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f383 8810 	msr	PRIMASK, r3
}
 800a802:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a804:	f000 f917 	bl	800aa36 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a808:	4a03      	ldr	r2, [pc, #12]	; (800a818 <UTIL_SEQ_Run+0x1d8>)
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	6013      	str	r3, [r2, #0]

  return;
 800a80e:	bf00      	nop
}
 800a810:	3740      	adds	r7, #64	; 0x40
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000024 	.word	0x20000024
 800a81c:	20000ddc 	.word	0x20000ddc
 800a820:	20000de0 	.word	0x20000de0
 800a824:	20000020 	.word	0x20000020
 800a828:	20000de4 	.word	0x20000de4
 800a82c:	20000e6c 	.word	0x20000e6c
 800a830:	20000de8 	.word	0x20000de8
 800a834:	20000dec 	.word	0x20000dec

0800a838 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b088      	sub	sp, #32
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a844:	f3ef 8310 	mrs	r3, PRIMASK
 800a848:	617b      	str	r3, [r7, #20]
  return(result);
 800a84a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a84c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a84e:	b672      	cpsid	i
}
 800a850:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 f8f6 	bl	800aa44 <SEQ_BitPosition>
 800a858:	4603      	mov	r3, r0
 800a85a:	4619      	mov	r1, r3
 800a85c:	4a06      	ldr	r2, [pc, #24]	; (800a878 <UTIL_SEQ_RegTask+0x40>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	f383 8810 	msr	PRIMASK, r3
}
 800a86e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a870:	bf00      	nop
}
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20000dec 	.word	0x20000dec

0800a87c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a886:	f3ef 8310 	mrs	r3, PRIMASK
 800a88a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a88c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a88e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a890:	b672      	cpsid	i
}
 800a892:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a894:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <UTIL_SEQ_SetTask+0x50>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	4a0b      	ldr	r2, [pc, #44]	; (800a8cc <UTIL_SEQ_SetTask+0x50>)
 800a89e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a8a0:	4a0b      	ldr	r2, [pc, #44]	; (800a8d0 <UTIL_SEQ_SetTask+0x54>)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	4908      	ldr	r1, [pc, #32]	; (800a8d0 <UTIL_SEQ_SetTask+0x54>)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f383 8810 	msr	PRIMASK, r3
}
 800a8be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8c0:	bf00      	nop
}
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20000ddc 	.word	0x20000ddc
 800a8d0:	20000e6c 	.word	0x20000e6c

0800a8d4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e6:	b672      	cpsid	i
}
 800a8e8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	43da      	mvns	r2, r3
 800a8ee:	4b08      	ldr	r3, [pc, #32]	; (800a910 <UTIL_SEQ_PauseTask+0x3c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	4a06      	ldr	r2, [pc, #24]	; (800a910 <UTIL_SEQ_PauseTask+0x3c>)
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f383 8810 	msr	PRIMASK, r3
}
 800a902:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a904:	bf00      	nop
}
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	20000020 	.word	0x20000020

0800a914 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a914:	b480      	push	{r7}
 800a916:	b087      	sub	sp, #28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a91c:	f3ef 8310 	mrs	r3, PRIMASK
 800a920:	60fb      	str	r3, [r7, #12]
  return(result);
 800a922:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a926:	b672      	cpsid	i
}
 800a928:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a92a:	4b09      	ldr	r3, [pc, #36]	; (800a950 <UTIL_SEQ_ResumeTask+0x3c>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4313      	orrs	r3, r2
 800a932:	4a07      	ldr	r2, [pc, #28]	; (800a950 <UTIL_SEQ_ResumeTask+0x3c>)
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f383 8810 	msr	PRIMASK, r3
}
 800a940:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a942:	bf00      	nop
}
 800a944:	371c      	adds	r7, #28
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20000020 	.word	0x20000020

0800a954 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a95c:	f3ef 8310 	mrs	r3, PRIMASK
 800a960:	60fb      	str	r3, [r7, #12]
  return(result);
 800a962:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a966:	b672      	cpsid	i
}
 800a968:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a96a:	4b09      	ldr	r3, [pc, #36]	; (800a990 <UTIL_SEQ_SetEvt+0x3c>)
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4313      	orrs	r3, r2
 800a972:	4a07      	ldr	r2, [pc, #28]	; (800a990 <UTIL_SEQ_SetEvt+0x3c>)
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	f383 8810 	msr	PRIMASK, r3
}
 800a980:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a982:	bf00      	nop
}
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	20000de0 	.word	0x20000de0

0800a994 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a99c:	4b1f      	ldr	r3, [pc, #124]	; (800aa1c <UTIL_SEQ_WaitEvt+0x88>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a9a2:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <UTIL_SEQ_WaitEvt+0x88>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9aa:	d102      	bne.n	800a9b2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	e005      	b.n	800a9be <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a9b2:	4b1a      	ldr	r3, [pc, #104]	; (800aa1c <UTIL_SEQ_WaitEvt+0x88>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9bc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a9be:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <UTIL_SEQ_WaitEvt+0x8c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a9c4:	4a16      	ldr	r2, [pc, #88]	; (800aa20 <UTIL_SEQ_WaitEvt+0x8c>)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a9ca:	e003      	b.n	800a9d4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	69f8      	ldr	r0, [r7, #28]
 800a9d0:	f7f6 f9f1 	bl	8000db6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a9d4:	4b13      	ldr	r3, [pc, #76]	; (800aa24 <UTIL_SEQ_WaitEvt+0x90>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0f5      	beq.n	800a9cc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a9e0:	4a0e      	ldr	r2, [pc, #56]	; (800aa1c <UTIL_SEQ_WaitEvt+0x88>)
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9ec:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a9ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9f0:	b672      	cpsid	i
}
 800a9f2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	43da      	mvns	r2, r3
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <UTIL_SEQ_WaitEvt+0x90>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	4a09      	ldr	r2, [pc, #36]	; (800aa24 <UTIL_SEQ_WaitEvt+0x90>)
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f383 8810 	msr	PRIMASK, r3
}
 800aa0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800aa0e:	4a04      	ldr	r2, [pc, #16]	; (800aa20 <UTIL_SEQ_WaitEvt+0x8c>)
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6013      	str	r3, [r2, #0]
  return;
 800aa14:	bf00      	nop
}
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000de8 	.word	0x20000de8
 800aa20:	20000de4 	.word	0x20000de4
 800aa24:	20000de0 	.word	0x20000de0

0800aa28 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa2c:	bf00      	nop
}
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800aa36:	b480      	push	{r7}
 800aa38:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa3a:	bf00      	nop
}
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	0c1b      	lsrs	r3, r3, #16
 800aa58:	041b      	lsls	r3, r3, #16
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d104      	bne.n	800aa68 <SEQ_BitPosition+0x24>
 800aa5e:	2310      	movs	r3, #16
 800aa60:	73fb      	strb	r3, [r7, #15]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	041b      	lsls	r3, r3, #16
 800aa66:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <SEQ_BitPosition+0x3a>
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	3308      	adds	r3, #8
 800aa76:	73fb      	strb	r3, [r7, #15]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <SEQ_BitPosition+0x50>
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	73fb      	strb	r3, [r7, #15]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	0f1b      	lsrs	r3, r3, #28
 800aa98:	4a07      	ldr	r2, [pc, #28]	; (800aab8 <SEQ_BitPosition+0x74>)
 800aa9a:	5cd2      	ldrb	r2, [r2, r3]
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	f1c3 031f 	rsb	r3, r3, #31
 800aaa8:	b2db      	uxtb	r3, r3
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	0800bdd4 	.word	0x0800bdd4

0800aabc <__errno>:
 800aabc:	4b01      	ldr	r3, [pc, #4]	; (800aac4 <__errno+0x8>)
 800aabe:	6818      	ldr	r0, [r3, #0]
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000028 	.word	0x20000028

0800aac8 <__libc_init_array>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	4d0d      	ldr	r5, [pc, #52]	; (800ab00 <__libc_init_array+0x38>)
 800aacc:	4c0d      	ldr	r4, [pc, #52]	; (800ab04 <__libc_init_array+0x3c>)
 800aace:	1b64      	subs	r4, r4, r5
 800aad0:	10a4      	asrs	r4, r4, #2
 800aad2:	2600      	movs	r6, #0
 800aad4:	42a6      	cmp	r6, r4
 800aad6:	d109      	bne.n	800aaec <__libc_init_array+0x24>
 800aad8:	4d0b      	ldr	r5, [pc, #44]	; (800ab08 <__libc_init_array+0x40>)
 800aada:	4c0c      	ldr	r4, [pc, #48]	; (800ab0c <__libc_init_array+0x44>)
 800aadc:	f000 ffbc 	bl	800ba58 <_init>
 800aae0:	1b64      	subs	r4, r4, r5
 800aae2:	10a4      	asrs	r4, r4, #2
 800aae4:	2600      	movs	r6, #0
 800aae6:	42a6      	cmp	r6, r4
 800aae8:	d105      	bne.n	800aaf6 <__libc_init_array+0x2e>
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf0:	4798      	blx	r3
 800aaf2:	3601      	adds	r6, #1
 800aaf4:	e7ee      	b.n	800aad4 <__libc_init_array+0xc>
 800aaf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aafa:	4798      	blx	r3
 800aafc:	3601      	adds	r6, #1
 800aafe:	e7f2      	b.n	800aae6 <__libc_init_array+0x1e>
 800ab00:	0800be84 	.word	0x0800be84
 800ab04:	0800be84 	.word	0x0800be84
 800ab08:	0800be84 	.word	0x0800be84
 800ab0c:	0800be88 	.word	0x0800be88

0800ab10 <memcpy>:
 800ab10:	440a      	add	r2, r1
 800ab12:	4291      	cmp	r1, r2
 800ab14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab18:	d100      	bne.n	800ab1c <memcpy+0xc>
 800ab1a:	4770      	bx	lr
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab26:	4291      	cmp	r1, r2
 800ab28:	d1f9      	bne.n	800ab1e <memcpy+0xe>
 800ab2a:	bd10      	pop	{r4, pc}

0800ab2c <memset>:
 800ab2c:	4402      	add	r2, r0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d100      	bne.n	800ab36 <memset+0xa>
 800ab34:	4770      	bx	lr
 800ab36:	f803 1b01 	strb.w	r1, [r3], #1
 800ab3a:	e7f9      	b.n	800ab30 <memset+0x4>

0800ab3c <iprintf>:
 800ab3c:	b40f      	push	{r0, r1, r2, r3}
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <iprintf+0x2c>)
 800ab40:	b513      	push	{r0, r1, r4, lr}
 800ab42:	681c      	ldr	r4, [r3, #0]
 800ab44:	b124      	cbz	r4, 800ab50 <iprintf+0x14>
 800ab46:	69a3      	ldr	r3, [r4, #24]
 800ab48:	b913      	cbnz	r3, 800ab50 <iprintf+0x14>
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f866 	bl	800ac1c <__sinit>
 800ab50:	ab05      	add	r3, sp, #20
 800ab52:	9a04      	ldr	r2, [sp, #16]
 800ab54:	68a1      	ldr	r1, [r4, #8]
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 f9bd 	bl	800aed8 <_vfiprintf_r>
 800ab5e:	b002      	add	sp, #8
 800ab60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab64:	b004      	add	sp, #16
 800ab66:	4770      	bx	lr
 800ab68:	20000028 	.word	0x20000028

0800ab6c <std>:
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	b510      	push	{r4, lr}
 800ab70:	4604      	mov	r4, r0
 800ab72:	e9c0 3300 	strd	r3, r3, [r0]
 800ab76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab7a:	6083      	str	r3, [r0, #8]
 800ab7c:	8181      	strh	r1, [r0, #12]
 800ab7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab80:	81c2      	strh	r2, [r0, #14]
 800ab82:	6183      	str	r3, [r0, #24]
 800ab84:	4619      	mov	r1, r3
 800ab86:	2208      	movs	r2, #8
 800ab88:	305c      	adds	r0, #92	; 0x5c
 800ab8a:	f7ff ffcf 	bl	800ab2c <memset>
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <std+0x38>)
 800ab90:	6263      	str	r3, [r4, #36]	; 0x24
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <std+0x3c>)
 800ab94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab96:	4b05      	ldr	r3, [pc, #20]	; (800abac <std+0x40>)
 800ab98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <std+0x44>)
 800ab9c:	6224      	str	r4, [r4, #32]
 800ab9e:	6323      	str	r3, [r4, #48]	; 0x30
 800aba0:	bd10      	pop	{r4, pc}
 800aba2:	bf00      	nop
 800aba4:	0800b481 	.word	0x0800b481
 800aba8:	0800b4a3 	.word	0x0800b4a3
 800abac:	0800b4db 	.word	0x0800b4db
 800abb0:	0800b4ff 	.word	0x0800b4ff

0800abb4 <_cleanup_r>:
 800abb4:	4901      	ldr	r1, [pc, #4]	; (800abbc <_cleanup_r+0x8>)
 800abb6:	f000 b8af 	b.w	800ad18 <_fwalk_reent>
 800abba:	bf00      	nop
 800abbc:	0800b7d9 	.word	0x0800b7d9

0800abc0 <__sfmoreglue>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	2268      	movs	r2, #104	; 0x68
 800abc4:	1e4d      	subs	r5, r1, #1
 800abc6:	4355      	muls	r5, r2
 800abc8:	460e      	mov	r6, r1
 800abca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abce:	f000 f8e5 	bl	800ad9c <_malloc_r>
 800abd2:	4604      	mov	r4, r0
 800abd4:	b140      	cbz	r0, 800abe8 <__sfmoreglue+0x28>
 800abd6:	2100      	movs	r1, #0
 800abd8:	e9c0 1600 	strd	r1, r6, [r0]
 800abdc:	300c      	adds	r0, #12
 800abde:	60a0      	str	r0, [r4, #8]
 800abe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abe4:	f7ff ffa2 	bl	800ab2c <memset>
 800abe8:	4620      	mov	r0, r4
 800abea:	bd70      	pop	{r4, r5, r6, pc}

0800abec <__sfp_lock_acquire>:
 800abec:	4801      	ldr	r0, [pc, #4]	; (800abf4 <__sfp_lock_acquire+0x8>)
 800abee:	f000 b8b3 	b.w	800ad58 <__retarget_lock_acquire_recursive>
 800abf2:	bf00      	nop
 800abf4:	20000e7d 	.word	0x20000e7d

0800abf8 <__sfp_lock_release>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__sfp_lock_release+0x8>)
 800abfa:	f000 b8ae 	b.w	800ad5a <__retarget_lock_release_recursive>
 800abfe:	bf00      	nop
 800ac00:	20000e7d 	.word	0x20000e7d

0800ac04 <__sinit_lock_acquire>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__sinit_lock_acquire+0x8>)
 800ac06:	f000 b8a7 	b.w	800ad58 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	20000e7e 	.word	0x20000e7e

0800ac10 <__sinit_lock_release>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__sinit_lock_release+0x8>)
 800ac12:	f000 b8a2 	b.w	800ad5a <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	20000e7e 	.word	0x20000e7e

0800ac1c <__sinit>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	f7ff fff0 	bl	800ac04 <__sinit_lock_acquire>
 800ac24:	69a3      	ldr	r3, [r4, #24]
 800ac26:	b11b      	cbz	r3, 800ac30 <__sinit+0x14>
 800ac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2c:	f7ff bff0 	b.w	800ac10 <__sinit_lock_release>
 800ac30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac34:	6523      	str	r3, [r4, #80]	; 0x50
 800ac36:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <__sinit+0x68>)
 800ac38:	4a13      	ldr	r2, [pc, #76]	; (800ac88 <__sinit+0x6c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	bf04      	itt	eq
 800ac42:	2301      	moveq	r3, #1
 800ac44:	61a3      	streq	r3, [r4, #24]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f820 	bl	800ac8c <__sfp>
 800ac4c:	6060      	str	r0, [r4, #4]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f81c 	bl	800ac8c <__sfp>
 800ac54:	60a0      	str	r0, [r4, #8]
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 f818 	bl	800ac8c <__sfp>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	60e0      	str	r0, [r4, #12]
 800ac60:	2104      	movs	r1, #4
 800ac62:	6860      	ldr	r0, [r4, #4]
 800ac64:	f7ff ff82 	bl	800ab6c <std>
 800ac68:	68a0      	ldr	r0, [r4, #8]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	2109      	movs	r1, #9
 800ac6e:	f7ff ff7d 	bl	800ab6c <std>
 800ac72:	68e0      	ldr	r0, [r4, #12]
 800ac74:	2202      	movs	r2, #2
 800ac76:	2112      	movs	r1, #18
 800ac78:	f7ff ff78 	bl	800ab6c <std>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	61a3      	str	r3, [r4, #24]
 800ac80:	e7d2      	b.n	800ac28 <__sinit+0xc>
 800ac82:	bf00      	nop
 800ac84:	0800bde4 	.word	0x0800bde4
 800ac88:	0800abb5 	.word	0x0800abb5

0800ac8c <__sfp>:
 800ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8e:	4607      	mov	r7, r0
 800ac90:	f7ff ffac 	bl	800abec <__sfp_lock_acquire>
 800ac94:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <__sfp+0x84>)
 800ac96:	681e      	ldr	r6, [r3, #0]
 800ac98:	69b3      	ldr	r3, [r6, #24]
 800ac9a:	b913      	cbnz	r3, 800aca2 <__sfp+0x16>
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff ffbd 	bl	800ac1c <__sinit>
 800aca2:	3648      	adds	r6, #72	; 0x48
 800aca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	d503      	bpl.n	800acb4 <__sfp+0x28>
 800acac:	6833      	ldr	r3, [r6, #0]
 800acae:	b30b      	cbz	r3, 800acf4 <__sfp+0x68>
 800acb0:	6836      	ldr	r6, [r6, #0]
 800acb2:	e7f7      	b.n	800aca4 <__sfp+0x18>
 800acb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acb8:	b9d5      	cbnz	r5, 800acf0 <__sfp+0x64>
 800acba:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <__sfp+0x88>)
 800acbc:	60e3      	str	r3, [r4, #12]
 800acbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acc2:	6665      	str	r5, [r4, #100]	; 0x64
 800acc4:	f000 f847 	bl	800ad56 <__retarget_lock_init_recursive>
 800acc8:	f7ff ff96 	bl	800abf8 <__sfp_lock_release>
 800accc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acd4:	6025      	str	r5, [r4, #0]
 800acd6:	61a5      	str	r5, [r4, #24]
 800acd8:	2208      	movs	r2, #8
 800acda:	4629      	mov	r1, r5
 800acdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ace0:	f7ff ff24 	bl	800ab2c <memset>
 800ace4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ace8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acec:	4620      	mov	r0, r4
 800acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf0:	3468      	adds	r4, #104	; 0x68
 800acf2:	e7d9      	b.n	800aca8 <__sfp+0x1c>
 800acf4:	2104      	movs	r1, #4
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff ff62 	bl	800abc0 <__sfmoreglue>
 800acfc:	4604      	mov	r4, r0
 800acfe:	6030      	str	r0, [r6, #0]
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1d5      	bne.n	800acb0 <__sfp+0x24>
 800ad04:	f7ff ff78 	bl	800abf8 <__sfp_lock_release>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	603b      	str	r3, [r7, #0]
 800ad0c:	e7ee      	b.n	800acec <__sfp+0x60>
 800ad0e:	bf00      	nop
 800ad10:	0800bde4 	.word	0x0800bde4
 800ad14:	ffff0001 	.word	0xffff0001

0800ad18 <_fwalk_reent>:
 800ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	4688      	mov	r8, r1
 800ad20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad24:	2700      	movs	r7, #0
 800ad26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad2e:	d505      	bpl.n	800ad3c <_fwalk_reent+0x24>
 800ad30:	6824      	ldr	r4, [r4, #0]
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	d1f7      	bne.n	800ad26 <_fwalk_reent+0xe>
 800ad36:	4638      	mov	r0, r7
 800ad38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad3c:	89ab      	ldrh	r3, [r5, #12]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d907      	bls.n	800ad52 <_fwalk_reent+0x3a>
 800ad42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad46:	3301      	adds	r3, #1
 800ad48:	d003      	beq.n	800ad52 <_fwalk_reent+0x3a>
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	47c0      	blx	r8
 800ad50:	4307      	orrs	r7, r0
 800ad52:	3568      	adds	r5, #104	; 0x68
 800ad54:	e7e9      	b.n	800ad2a <_fwalk_reent+0x12>

0800ad56 <__retarget_lock_init_recursive>:
 800ad56:	4770      	bx	lr

0800ad58 <__retarget_lock_acquire_recursive>:
 800ad58:	4770      	bx	lr

0800ad5a <__retarget_lock_release_recursive>:
 800ad5a:	4770      	bx	lr

0800ad5c <sbrk_aligned>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	4e0e      	ldr	r6, [pc, #56]	; (800ad98 <sbrk_aligned+0x3c>)
 800ad60:	460c      	mov	r4, r1
 800ad62:	6831      	ldr	r1, [r6, #0]
 800ad64:	4605      	mov	r5, r0
 800ad66:	b911      	cbnz	r1, 800ad6e <sbrk_aligned+0x12>
 800ad68:	f000 fb7a 	bl	800b460 <_sbrk_r>
 800ad6c:	6030      	str	r0, [r6, #0]
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f000 fb75 	bl	800b460 <_sbrk_r>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d00a      	beq.n	800ad90 <sbrk_aligned+0x34>
 800ad7a:	1cc4      	adds	r4, r0, #3
 800ad7c:	f024 0403 	bic.w	r4, r4, #3
 800ad80:	42a0      	cmp	r0, r4
 800ad82:	d007      	beq.n	800ad94 <sbrk_aligned+0x38>
 800ad84:	1a21      	subs	r1, r4, r0
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 fb6a 	bl	800b460 <_sbrk_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d101      	bne.n	800ad94 <sbrk_aligned+0x38>
 800ad90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad94:	4620      	mov	r0, r4
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	20000e84 	.word	0x20000e84

0800ad9c <_malloc_r>:
 800ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada0:	1ccd      	adds	r5, r1, #3
 800ada2:	f025 0503 	bic.w	r5, r5, #3
 800ada6:	3508      	adds	r5, #8
 800ada8:	2d0c      	cmp	r5, #12
 800adaa:	bf38      	it	cc
 800adac:	250c      	movcc	r5, #12
 800adae:	2d00      	cmp	r5, #0
 800adb0:	4607      	mov	r7, r0
 800adb2:	db01      	blt.n	800adb8 <_malloc_r+0x1c>
 800adb4:	42a9      	cmp	r1, r5
 800adb6:	d905      	bls.n	800adc4 <_malloc_r+0x28>
 800adb8:	230c      	movs	r3, #12
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	2600      	movs	r6, #0
 800adbe:	4630      	mov	r0, r6
 800adc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc4:	4e2e      	ldr	r6, [pc, #184]	; (800ae80 <_malloc_r+0xe4>)
 800adc6:	f000 fdbb 	bl	800b940 <__malloc_lock>
 800adca:	6833      	ldr	r3, [r6, #0]
 800adcc:	461c      	mov	r4, r3
 800adce:	bb34      	cbnz	r4, 800ae1e <_malloc_r+0x82>
 800add0:	4629      	mov	r1, r5
 800add2:	4638      	mov	r0, r7
 800add4:	f7ff ffc2 	bl	800ad5c <sbrk_aligned>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	4604      	mov	r4, r0
 800addc:	d14d      	bne.n	800ae7a <_malloc_r+0xde>
 800adde:	6834      	ldr	r4, [r6, #0]
 800ade0:	4626      	mov	r6, r4
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	d140      	bne.n	800ae68 <_malloc_r+0xcc>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	4631      	mov	r1, r6
 800adea:	4638      	mov	r0, r7
 800adec:	eb04 0803 	add.w	r8, r4, r3
 800adf0:	f000 fb36 	bl	800b460 <_sbrk_r>
 800adf4:	4580      	cmp	r8, r0
 800adf6:	d13a      	bne.n	800ae6e <_malloc_r+0xd2>
 800adf8:	6821      	ldr	r1, [r4, #0]
 800adfa:	3503      	adds	r5, #3
 800adfc:	1a6d      	subs	r5, r5, r1
 800adfe:	f025 0503 	bic.w	r5, r5, #3
 800ae02:	3508      	adds	r5, #8
 800ae04:	2d0c      	cmp	r5, #12
 800ae06:	bf38      	it	cc
 800ae08:	250c      	movcc	r5, #12
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f7ff ffa5 	bl	800ad5c <sbrk_aligned>
 800ae12:	3001      	adds	r0, #1
 800ae14:	d02b      	beq.n	800ae6e <_malloc_r+0xd2>
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	442b      	add	r3, r5
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	e00e      	b.n	800ae3c <_malloc_r+0xa0>
 800ae1e:	6822      	ldr	r2, [r4, #0]
 800ae20:	1b52      	subs	r2, r2, r5
 800ae22:	d41e      	bmi.n	800ae62 <_malloc_r+0xc6>
 800ae24:	2a0b      	cmp	r2, #11
 800ae26:	d916      	bls.n	800ae56 <_malloc_r+0xba>
 800ae28:	1961      	adds	r1, r4, r5
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	bf18      	it	ne
 800ae30:	6059      	strne	r1, [r3, #4]
 800ae32:	6863      	ldr	r3, [r4, #4]
 800ae34:	bf08      	it	eq
 800ae36:	6031      	streq	r1, [r6, #0]
 800ae38:	5162      	str	r2, [r4, r5]
 800ae3a:	604b      	str	r3, [r1, #4]
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f104 060b 	add.w	r6, r4, #11
 800ae42:	f000 fd83 	bl	800b94c <__malloc_unlock>
 800ae46:	f026 0607 	bic.w	r6, r6, #7
 800ae4a:	1d23      	adds	r3, r4, #4
 800ae4c:	1af2      	subs	r2, r6, r3
 800ae4e:	d0b6      	beq.n	800adbe <_malloc_r+0x22>
 800ae50:	1b9b      	subs	r3, r3, r6
 800ae52:	50a3      	str	r3, [r4, r2]
 800ae54:	e7b3      	b.n	800adbe <_malloc_r+0x22>
 800ae56:	6862      	ldr	r2, [r4, #4]
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	bf0c      	ite	eq
 800ae5c:	6032      	streq	r2, [r6, #0]
 800ae5e:	605a      	strne	r2, [r3, #4]
 800ae60:	e7ec      	b.n	800ae3c <_malloc_r+0xa0>
 800ae62:	4623      	mov	r3, r4
 800ae64:	6864      	ldr	r4, [r4, #4]
 800ae66:	e7b2      	b.n	800adce <_malloc_r+0x32>
 800ae68:	4634      	mov	r4, r6
 800ae6a:	6876      	ldr	r6, [r6, #4]
 800ae6c:	e7b9      	b.n	800ade2 <_malloc_r+0x46>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	603b      	str	r3, [r7, #0]
 800ae72:	4638      	mov	r0, r7
 800ae74:	f000 fd6a 	bl	800b94c <__malloc_unlock>
 800ae78:	e7a1      	b.n	800adbe <_malloc_r+0x22>
 800ae7a:	6025      	str	r5, [r4, #0]
 800ae7c:	e7de      	b.n	800ae3c <_malloc_r+0xa0>
 800ae7e:	bf00      	nop
 800ae80:	20000e80 	.word	0x20000e80

0800ae84 <__sfputc_r>:
 800ae84:	6893      	ldr	r3, [r2, #8]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	b410      	push	{r4}
 800ae8c:	6093      	str	r3, [r2, #8]
 800ae8e:	da08      	bge.n	800aea2 <__sfputc_r+0x1e>
 800ae90:	6994      	ldr	r4, [r2, #24]
 800ae92:	42a3      	cmp	r3, r4
 800ae94:	db01      	blt.n	800ae9a <__sfputc_r+0x16>
 800ae96:	290a      	cmp	r1, #10
 800ae98:	d103      	bne.n	800aea2 <__sfputc_r+0x1e>
 800ae9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9e:	f000 bb33 	b.w	800b508 <__swbuf_r>
 800aea2:	6813      	ldr	r3, [r2, #0]
 800aea4:	1c58      	adds	r0, r3, #1
 800aea6:	6010      	str	r0, [r2, #0]
 800aea8:	7019      	strb	r1, [r3, #0]
 800aeaa:	4608      	mov	r0, r1
 800aeac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <__sfputs_r>:
 800aeb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	460f      	mov	r7, r1
 800aeb8:	4614      	mov	r4, r2
 800aeba:	18d5      	adds	r5, r2, r3
 800aebc:	42ac      	cmp	r4, r5
 800aebe:	d101      	bne.n	800aec4 <__sfputs_r+0x12>
 800aec0:	2000      	movs	r0, #0
 800aec2:	e007      	b.n	800aed4 <__sfputs_r+0x22>
 800aec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec8:	463a      	mov	r2, r7
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ffda 	bl	800ae84 <__sfputc_r>
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	d1f3      	bne.n	800aebc <__sfputs_r+0xa>
 800aed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aed8 <_vfiprintf_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	460d      	mov	r5, r1
 800aede:	b09d      	sub	sp, #116	; 0x74
 800aee0:	4614      	mov	r4, r2
 800aee2:	4698      	mov	r8, r3
 800aee4:	4606      	mov	r6, r0
 800aee6:	b118      	cbz	r0, 800aef0 <_vfiprintf_r+0x18>
 800aee8:	6983      	ldr	r3, [r0, #24]
 800aeea:	b90b      	cbnz	r3, 800aef0 <_vfiprintf_r+0x18>
 800aeec:	f7ff fe96 	bl	800ac1c <__sinit>
 800aef0:	4b89      	ldr	r3, [pc, #548]	; (800b118 <_vfiprintf_r+0x240>)
 800aef2:	429d      	cmp	r5, r3
 800aef4:	d11b      	bne.n	800af2e <_vfiprintf_r+0x56>
 800aef6:	6875      	ldr	r5, [r6, #4]
 800aef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aefa:	07d9      	lsls	r1, r3, #31
 800aefc:	d405      	bmi.n	800af0a <_vfiprintf_r+0x32>
 800aefe:	89ab      	ldrh	r3, [r5, #12]
 800af00:	059a      	lsls	r2, r3, #22
 800af02:	d402      	bmi.n	800af0a <_vfiprintf_r+0x32>
 800af04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af06:	f7ff ff27 	bl	800ad58 <__retarget_lock_acquire_recursive>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	071b      	lsls	r3, r3, #28
 800af0e:	d501      	bpl.n	800af14 <_vfiprintf_r+0x3c>
 800af10:	692b      	ldr	r3, [r5, #16]
 800af12:	b9eb      	cbnz	r3, 800af50 <_vfiprintf_r+0x78>
 800af14:	4629      	mov	r1, r5
 800af16:	4630      	mov	r0, r6
 800af18:	f000 fb5a 	bl	800b5d0 <__swsetup_r>
 800af1c:	b1c0      	cbz	r0, 800af50 <_vfiprintf_r+0x78>
 800af1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af20:	07dc      	lsls	r4, r3, #31
 800af22:	d50e      	bpl.n	800af42 <_vfiprintf_r+0x6a>
 800af24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af28:	b01d      	add	sp, #116	; 0x74
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	4b7b      	ldr	r3, [pc, #492]	; (800b11c <_vfiprintf_r+0x244>)
 800af30:	429d      	cmp	r5, r3
 800af32:	d101      	bne.n	800af38 <_vfiprintf_r+0x60>
 800af34:	68b5      	ldr	r5, [r6, #8]
 800af36:	e7df      	b.n	800aef8 <_vfiprintf_r+0x20>
 800af38:	4b79      	ldr	r3, [pc, #484]	; (800b120 <_vfiprintf_r+0x248>)
 800af3a:	429d      	cmp	r5, r3
 800af3c:	bf08      	it	eq
 800af3e:	68f5      	ldreq	r5, [r6, #12]
 800af40:	e7da      	b.n	800aef8 <_vfiprintf_r+0x20>
 800af42:	89ab      	ldrh	r3, [r5, #12]
 800af44:	0598      	lsls	r0, r3, #22
 800af46:	d4ed      	bmi.n	800af24 <_vfiprintf_r+0x4c>
 800af48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af4a:	f7ff ff06 	bl	800ad5a <__retarget_lock_release_recursive>
 800af4e:	e7e9      	b.n	800af24 <_vfiprintf_r+0x4c>
 800af50:	2300      	movs	r3, #0
 800af52:	9309      	str	r3, [sp, #36]	; 0x24
 800af54:	2320      	movs	r3, #32
 800af56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af5e:	2330      	movs	r3, #48	; 0x30
 800af60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b124 <_vfiprintf_r+0x24c>
 800af64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af68:	f04f 0901 	mov.w	r9, #1
 800af6c:	4623      	mov	r3, r4
 800af6e:	469a      	mov	sl, r3
 800af70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af74:	b10a      	cbz	r2, 800af7a <_vfiprintf_r+0xa2>
 800af76:	2a25      	cmp	r2, #37	; 0x25
 800af78:	d1f9      	bne.n	800af6e <_vfiprintf_r+0x96>
 800af7a:	ebba 0b04 	subs.w	fp, sl, r4
 800af7e:	d00b      	beq.n	800af98 <_vfiprintf_r+0xc0>
 800af80:	465b      	mov	r3, fp
 800af82:	4622      	mov	r2, r4
 800af84:	4629      	mov	r1, r5
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ff93 	bl	800aeb2 <__sfputs_r>
 800af8c:	3001      	adds	r0, #1
 800af8e:	f000 80aa 	beq.w	800b0e6 <_vfiprintf_r+0x20e>
 800af92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af94:	445a      	add	r2, fp
 800af96:	9209      	str	r2, [sp, #36]	; 0x24
 800af98:	f89a 3000 	ldrb.w	r3, [sl]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 80a2 	beq.w	800b0e6 <_vfiprintf_r+0x20e>
 800afa2:	2300      	movs	r3, #0
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afac:	f10a 0a01 	add.w	sl, sl, #1
 800afb0:	9304      	str	r3, [sp, #16]
 800afb2:	9307      	str	r3, [sp, #28]
 800afb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afb8:	931a      	str	r3, [sp, #104]	; 0x68
 800afba:	4654      	mov	r4, sl
 800afbc:	2205      	movs	r2, #5
 800afbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc2:	4858      	ldr	r0, [pc, #352]	; (800b124 <_vfiprintf_r+0x24c>)
 800afc4:	f7f5 f8e4 	bl	8000190 <memchr>
 800afc8:	9a04      	ldr	r2, [sp, #16]
 800afca:	b9d8      	cbnz	r0, 800b004 <_vfiprintf_r+0x12c>
 800afcc:	06d1      	lsls	r1, r2, #27
 800afce:	bf44      	itt	mi
 800afd0:	2320      	movmi	r3, #32
 800afd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd6:	0713      	lsls	r3, r2, #28
 800afd8:	bf44      	itt	mi
 800afda:	232b      	movmi	r3, #43	; 0x2b
 800afdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe0:	f89a 3000 	ldrb.w	r3, [sl]
 800afe4:	2b2a      	cmp	r3, #42	; 0x2a
 800afe6:	d015      	beq.n	800b014 <_vfiprintf_r+0x13c>
 800afe8:	9a07      	ldr	r2, [sp, #28]
 800afea:	4654      	mov	r4, sl
 800afec:	2000      	movs	r0, #0
 800afee:	f04f 0c0a 	mov.w	ip, #10
 800aff2:	4621      	mov	r1, r4
 800aff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff8:	3b30      	subs	r3, #48	; 0x30
 800affa:	2b09      	cmp	r3, #9
 800affc:	d94e      	bls.n	800b09c <_vfiprintf_r+0x1c4>
 800affe:	b1b0      	cbz	r0, 800b02e <_vfiprintf_r+0x156>
 800b000:	9207      	str	r2, [sp, #28]
 800b002:	e014      	b.n	800b02e <_vfiprintf_r+0x156>
 800b004:	eba0 0308 	sub.w	r3, r0, r8
 800b008:	fa09 f303 	lsl.w	r3, r9, r3
 800b00c:	4313      	orrs	r3, r2
 800b00e:	9304      	str	r3, [sp, #16]
 800b010:	46a2      	mov	sl, r4
 800b012:	e7d2      	b.n	800afba <_vfiprintf_r+0xe2>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	1d19      	adds	r1, r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	9103      	str	r1, [sp, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bfbb      	ittet	lt
 800b020:	425b      	neglt	r3, r3
 800b022:	f042 0202 	orrlt.w	r2, r2, #2
 800b026:	9307      	strge	r3, [sp, #28]
 800b028:	9307      	strlt	r3, [sp, #28]
 800b02a:	bfb8      	it	lt
 800b02c:	9204      	strlt	r2, [sp, #16]
 800b02e:	7823      	ldrb	r3, [r4, #0]
 800b030:	2b2e      	cmp	r3, #46	; 0x2e
 800b032:	d10c      	bne.n	800b04e <_vfiprintf_r+0x176>
 800b034:	7863      	ldrb	r3, [r4, #1]
 800b036:	2b2a      	cmp	r3, #42	; 0x2a
 800b038:	d135      	bne.n	800b0a6 <_vfiprintf_r+0x1ce>
 800b03a:	9b03      	ldr	r3, [sp, #12]
 800b03c:	1d1a      	adds	r2, r3, #4
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	9203      	str	r2, [sp, #12]
 800b042:	2b00      	cmp	r3, #0
 800b044:	bfb8      	it	lt
 800b046:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b04a:	3402      	adds	r4, #2
 800b04c:	9305      	str	r3, [sp, #20]
 800b04e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b134 <_vfiprintf_r+0x25c>
 800b052:	7821      	ldrb	r1, [r4, #0]
 800b054:	2203      	movs	r2, #3
 800b056:	4650      	mov	r0, sl
 800b058:	f7f5 f89a 	bl	8000190 <memchr>
 800b05c:	b140      	cbz	r0, 800b070 <_vfiprintf_r+0x198>
 800b05e:	2340      	movs	r3, #64	; 0x40
 800b060:	eba0 000a 	sub.w	r0, r0, sl
 800b064:	fa03 f000 	lsl.w	r0, r3, r0
 800b068:	9b04      	ldr	r3, [sp, #16]
 800b06a:	4303      	orrs	r3, r0
 800b06c:	3401      	adds	r4, #1
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b074:	482c      	ldr	r0, [pc, #176]	; (800b128 <_vfiprintf_r+0x250>)
 800b076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b07a:	2206      	movs	r2, #6
 800b07c:	f7f5 f888 	bl	8000190 <memchr>
 800b080:	2800      	cmp	r0, #0
 800b082:	d03f      	beq.n	800b104 <_vfiprintf_r+0x22c>
 800b084:	4b29      	ldr	r3, [pc, #164]	; (800b12c <_vfiprintf_r+0x254>)
 800b086:	bb1b      	cbnz	r3, 800b0d0 <_vfiprintf_r+0x1f8>
 800b088:	9b03      	ldr	r3, [sp, #12]
 800b08a:	3307      	adds	r3, #7
 800b08c:	f023 0307 	bic.w	r3, r3, #7
 800b090:	3308      	adds	r3, #8
 800b092:	9303      	str	r3, [sp, #12]
 800b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b096:	443b      	add	r3, r7
 800b098:	9309      	str	r3, [sp, #36]	; 0x24
 800b09a:	e767      	b.n	800af6c <_vfiprintf_r+0x94>
 800b09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	e7a5      	b.n	800aff2 <_vfiprintf_r+0x11a>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	3401      	adds	r4, #1
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	f04f 0c0a 	mov.w	ip, #10
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b8:	3a30      	subs	r2, #48	; 0x30
 800b0ba:	2a09      	cmp	r2, #9
 800b0bc:	d903      	bls.n	800b0c6 <_vfiprintf_r+0x1ee>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d0c5      	beq.n	800b04e <_vfiprintf_r+0x176>
 800b0c2:	9105      	str	r1, [sp, #20]
 800b0c4:	e7c3      	b.n	800b04e <_vfiprintf_r+0x176>
 800b0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e7f0      	b.n	800b0b2 <_vfiprintf_r+0x1da>
 800b0d0:	ab03      	add	r3, sp, #12
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	462a      	mov	r2, r5
 800b0d6:	4b16      	ldr	r3, [pc, #88]	; (800b130 <_vfiprintf_r+0x258>)
 800b0d8:	a904      	add	r1, sp, #16
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f3af 8000 	nop.w
 800b0e0:	4607      	mov	r7, r0
 800b0e2:	1c78      	adds	r0, r7, #1
 800b0e4:	d1d6      	bne.n	800b094 <_vfiprintf_r+0x1bc>
 800b0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0e8:	07d9      	lsls	r1, r3, #31
 800b0ea:	d405      	bmi.n	800b0f8 <_vfiprintf_r+0x220>
 800b0ec:	89ab      	ldrh	r3, [r5, #12]
 800b0ee:	059a      	lsls	r2, r3, #22
 800b0f0:	d402      	bmi.n	800b0f8 <_vfiprintf_r+0x220>
 800b0f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0f4:	f7ff fe31 	bl	800ad5a <__retarget_lock_release_recursive>
 800b0f8:	89ab      	ldrh	r3, [r5, #12]
 800b0fa:	065b      	lsls	r3, r3, #25
 800b0fc:	f53f af12 	bmi.w	800af24 <_vfiprintf_r+0x4c>
 800b100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b102:	e711      	b.n	800af28 <_vfiprintf_r+0x50>
 800b104:	ab03      	add	r3, sp, #12
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	462a      	mov	r2, r5
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <_vfiprintf_r+0x258>)
 800b10c:	a904      	add	r1, sp, #16
 800b10e:	4630      	mov	r0, r6
 800b110:	f000 f880 	bl	800b214 <_printf_i>
 800b114:	e7e4      	b.n	800b0e0 <_vfiprintf_r+0x208>
 800b116:	bf00      	nop
 800b118:	0800be08 	.word	0x0800be08
 800b11c:	0800be28 	.word	0x0800be28
 800b120:	0800bde8 	.word	0x0800bde8
 800b124:	0800be48 	.word	0x0800be48
 800b128:	0800be52 	.word	0x0800be52
 800b12c:	00000000 	.word	0x00000000
 800b130:	0800aeb3 	.word	0x0800aeb3
 800b134:	0800be4e 	.word	0x0800be4e

0800b138 <_printf_common>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	4616      	mov	r6, r2
 800b13e:	4699      	mov	r9, r3
 800b140:	688a      	ldr	r2, [r1, #8]
 800b142:	690b      	ldr	r3, [r1, #16]
 800b144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b148:	4293      	cmp	r3, r2
 800b14a:	bfb8      	it	lt
 800b14c:	4613      	movlt	r3, r2
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b154:	4607      	mov	r7, r0
 800b156:	460c      	mov	r4, r1
 800b158:	b10a      	cbz	r2, 800b15e <_printf_common+0x26>
 800b15a:	3301      	adds	r3, #1
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	0699      	lsls	r1, r3, #26
 800b162:	bf42      	ittt	mi
 800b164:	6833      	ldrmi	r3, [r6, #0]
 800b166:	3302      	addmi	r3, #2
 800b168:	6033      	strmi	r3, [r6, #0]
 800b16a:	6825      	ldr	r5, [r4, #0]
 800b16c:	f015 0506 	ands.w	r5, r5, #6
 800b170:	d106      	bne.n	800b180 <_printf_common+0x48>
 800b172:	f104 0a19 	add.w	sl, r4, #25
 800b176:	68e3      	ldr	r3, [r4, #12]
 800b178:	6832      	ldr	r2, [r6, #0]
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dc26      	bgt.n	800b1ce <_printf_common+0x96>
 800b180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b184:	1e13      	subs	r3, r2, #0
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	bf18      	it	ne
 800b18a:	2301      	movne	r3, #1
 800b18c:	0692      	lsls	r2, r2, #26
 800b18e:	d42b      	bmi.n	800b1e8 <_printf_common+0xb0>
 800b190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b194:	4649      	mov	r1, r9
 800b196:	4638      	mov	r0, r7
 800b198:	47c0      	blx	r8
 800b19a:	3001      	adds	r0, #1
 800b19c:	d01e      	beq.n	800b1dc <_printf_common+0xa4>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	68e5      	ldr	r5, [r4, #12]
 800b1a2:	6832      	ldr	r2, [r6, #0]
 800b1a4:	f003 0306 	and.w	r3, r3, #6
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	bf08      	it	eq
 800b1ac:	1aad      	subeq	r5, r5, r2
 800b1ae:	68a3      	ldr	r3, [r4, #8]
 800b1b0:	6922      	ldr	r2, [r4, #16]
 800b1b2:	bf0c      	ite	eq
 800b1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b8:	2500      	movne	r5, #0
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bfc4      	itt	gt
 800b1be:	1a9b      	subgt	r3, r3, r2
 800b1c0:	18ed      	addgt	r5, r5, r3
 800b1c2:	2600      	movs	r6, #0
 800b1c4:	341a      	adds	r4, #26
 800b1c6:	42b5      	cmp	r5, r6
 800b1c8:	d11a      	bne.n	800b200 <_printf_common+0xc8>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e008      	b.n	800b1e0 <_printf_common+0xa8>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	47c0      	blx	r8
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d103      	bne.n	800b1e4 <_printf_common+0xac>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	e7c6      	b.n	800b176 <_printf_common+0x3e>
 800b1e8:	18e1      	adds	r1, r4, r3
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	2030      	movs	r0, #48	; 0x30
 800b1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1f2:	4422      	add	r2, r4
 800b1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	e7c7      	b.n	800b190 <_printf_common+0x58>
 800b200:	2301      	movs	r3, #1
 800b202:	4622      	mov	r2, r4
 800b204:	4649      	mov	r1, r9
 800b206:	4638      	mov	r0, r7
 800b208:	47c0      	blx	r8
 800b20a:	3001      	adds	r0, #1
 800b20c:	d0e6      	beq.n	800b1dc <_printf_common+0xa4>
 800b20e:	3601      	adds	r6, #1
 800b210:	e7d9      	b.n	800b1c6 <_printf_common+0x8e>
	...

0800b214 <_printf_i>:
 800b214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	7e0f      	ldrb	r7, [r1, #24]
 800b21a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b21c:	2f78      	cmp	r7, #120	; 0x78
 800b21e:	4691      	mov	r9, r2
 800b220:	4680      	mov	r8, r0
 800b222:	460c      	mov	r4, r1
 800b224:	469a      	mov	sl, r3
 800b226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b22a:	d807      	bhi.n	800b23c <_printf_i+0x28>
 800b22c:	2f62      	cmp	r7, #98	; 0x62
 800b22e:	d80a      	bhi.n	800b246 <_printf_i+0x32>
 800b230:	2f00      	cmp	r7, #0
 800b232:	f000 80d8 	beq.w	800b3e6 <_printf_i+0x1d2>
 800b236:	2f58      	cmp	r7, #88	; 0x58
 800b238:	f000 80a3 	beq.w	800b382 <_printf_i+0x16e>
 800b23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b244:	e03a      	b.n	800b2bc <_printf_i+0xa8>
 800b246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b24a:	2b15      	cmp	r3, #21
 800b24c:	d8f6      	bhi.n	800b23c <_printf_i+0x28>
 800b24e:	a101      	add	r1, pc, #4	; (adr r1, 800b254 <_printf_i+0x40>)
 800b250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2c1 	.word	0x0800b2c1
 800b25c:	0800b23d 	.word	0x0800b23d
 800b260:	0800b23d 	.word	0x0800b23d
 800b264:	0800b23d 	.word	0x0800b23d
 800b268:	0800b23d 	.word	0x0800b23d
 800b26c:	0800b2c1 	.word	0x0800b2c1
 800b270:	0800b23d 	.word	0x0800b23d
 800b274:	0800b23d 	.word	0x0800b23d
 800b278:	0800b23d 	.word	0x0800b23d
 800b27c:	0800b23d 	.word	0x0800b23d
 800b280:	0800b3cd 	.word	0x0800b3cd
 800b284:	0800b2f1 	.word	0x0800b2f1
 800b288:	0800b3af 	.word	0x0800b3af
 800b28c:	0800b23d 	.word	0x0800b23d
 800b290:	0800b23d 	.word	0x0800b23d
 800b294:	0800b3ef 	.word	0x0800b3ef
 800b298:	0800b23d 	.word	0x0800b23d
 800b29c:	0800b2f1 	.word	0x0800b2f1
 800b2a0:	0800b23d 	.word	0x0800b23d
 800b2a4:	0800b23d 	.word	0x0800b23d
 800b2a8:	0800b3b7 	.word	0x0800b3b7
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	602a      	str	r2, [r5, #0]
 800b2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e0a3      	b.n	800b408 <_printf_i+0x1f4>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	6829      	ldr	r1, [r5, #0]
 800b2c4:	0606      	lsls	r6, r0, #24
 800b2c6:	f101 0304 	add.w	r3, r1, #4
 800b2ca:	d50a      	bpl.n	800b2e2 <_printf_i+0xce>
 800b2cc:	680e      	ldr	r6, [r1, #0]
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	2e00      	cmp	r6, #0
 800b2d2:	da03      	bge.n	800b2dc <_printf_i+0xc8>
 800b2d4:	232d      	movs	r3, #45	; 0x2d
 800b2d6:	4276      	negs	r6, r6
 800b2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2dc:	485e      	ldr	r0, [pc, #376]	; (800b458 <_printf_i+0x244>)
 800b2de:	230a      	movs	r3, #10
 800b2e0:	e019      	b.n	800b316 <_printf_i+0x102>
 800b2e2:	680e      	ldr	r6, [r1, #0]
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2ea:	bf18      	it	ne
 800b2ec:	b236      	sxthne	r6, r6
 800b2ee:	e7ef      	b.n	800b2d0 <_printf_i+0xbc>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	6820      	ldr	r0, [r4, #0]
 800b2f4:	1d19      	adds	r1, r3, #4
 800b2f6:	6029      	str	r1, [r5, #0]
 800b2f8:	0601      	lsls	r1, r0, #24
 800b2fa:	d501      	bpl.n	800b300 <_printf_i+0xec>
 800b2fc:	681e      	ldr	r6, [r3, #0]
 800b2fe:	e002      	b.n	800b306 <_printf_i+0xf2>
 800b300:	0646      	lsls	r6, r0, #25
 800b302:	d5fb      	bpl.n	800b2fc <_printf_i+0xe8>
 800b304:	881e      	ldrh	r6, [r3, #0]
 800b306:	4854      	ldr	r0, [pc, #336]	; (800b458 <_printf_i+0x244>)
 800b308:	2f6f      	cmp	r7, #111	; 0x6f
 800b30a:	bf0c      	ite	eq
 800b30c:	2308      	moveq	r3, #8
 800b30e:	230a      	movne	r3, #10
 800b310:	2100      	movs	r1, #0
 800b312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b316:	6865      	ldr	r5, [r4, #4]
 800b318:	60a5      	str	r5, [r4, #8]
 800b31a:	2d00      	cmp	r5, #0
 800b31c:	bfa2      	ittt	ge
 800b31e:	6821      	ldrge	r1, [r4, #0]
 800b320:	f021 0104 	bicge.w	r1, r1, #4
 800b324:	6021      	strge	r1, [r4, #0]
 800b326:	b90e      	cbnz	r6, 800b32c <_printf_i+0x118>
 800b328:	2d00      	cmp	r5, #0
 800b32a:	d04d      	beq.n	800b3c8 <_printf_i+0x1b4>
 800b32c:	4615      	mov	r5, r2
 800b32e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b332:	fb03 6711 	mls	r7, r3, r1, r6
 800b336:	5dc7      	ldrb	r7, [r0, r7]
 800b338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b33c:	4637      	mov	r7, r6
 800b33e:	42bb      	cmp	r3, r7
 800b340:	460e      	mov	r6, r1
 800b342:	d9f4      	bls.n	800b32e <_printf_i+0x11a>
 800b344:	2b08      	cmp	r3, #8
 800b346:	d10b      	bne.n	800b360 <_printf_i+0x14c>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	07de      	lsls	r6, r3, #31
 800b34c:	d508      	bpl.n	800b360 <_printf_i+0x14c>
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	4299      	cmp	r1, r3
 800b354:	bfde      	ittt	le
 800b356:	2330      	movle	r3, #48	; 0x30
 800b358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b35c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b360:	1b52      	subs	r2, r2, r5
 800b362:	6122      	str	r2, [r4, #16]
 800b364:	f8cd a000 	str.w	sl, [sp]
 800b368:	464b      	mov	r3, r9
 800b36a:	aa03      	add	r2, sp, #12
 800b36c:	4621      	mov	r1, r4
 800b36e:	4640      	mov	r0, r8
 800b370:	f7ff fee2 	bl	800b138 <_printf_common>
 800b374:	3001      	adds	r0, #1
 800b376:	d14c      	bne.n	800b412 <_printf_i+0x1fe>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b37c:	b004      	add	sp, #16
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	4835      	ldr	r0, [pc, #212]	; (800b458 <_printf_i+0x244>)
 800b384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b388:	6829      	ldr	r1, [r5, #0]
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b390:	6029      	str	r1, [r5, #0]
 800b392:	061d      	lsls	r5, r3, #24
 800b394:	d514      	bpl.n	800b3c0 <_printf_i+0x1ac>
 800b396:	07df      	lsls	r7, r3, #31
 800b398:	bf44      	itt	mi
 800b39a:	f043 0320 	orrmi.w	r3, r3, #32
 800b39e:	6023      	strmi	r3, [r4, #0]
 800b3a0:	b91e      	cbnz	r6, 800b3aa <_printf_i+0x196>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	f023 0320 	bic.w	r3, r3, #32
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	2310      	movs	r3, #16
 800b3ac:	e7b0      	b.n	800b310 <_printf_i+0xfc>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	f043 0320 	orr.w	r3, r3, #32
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	2378      	movs	r3, #120	; 0x78
 800b3b8:	4828      	ldr	r0, [pc, #160]	; (800b45c <_printf_i+0x248>)
 800b3ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3be:	e7e3      	b.n	800b388 <_printf_i+0x174>
 800b3c0:	0659      	lsls	r1, r3, #25
 800b3c2:	bf48      	it	mi
 800b3c4:	b2b6      	uxthmi	r6, r6
 800b3c6:	e7e6      	b.n	800b396 <_printf_i+0x182>
 800b3c8:	4615      	mov	r5, r2
 800b3ca:	e7bb      	b.n	800b344 <_printf_i+0x130>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	6826      	ldr	r6, [r4, #0]
 800b3d0:	6961      	ldr	r1, [r4, #20]
 800b3d2:	1d18      	adds	r0, r3, #4
 800b3d4:	6028      	str	r0, [r5, #0]
 800b3d6:	0635      	lsls	r5, r6, #24
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	d501      	bpl.n	800b3e0 <_printf_i+0x1cc>
 800b3dc:	6019      	str	r1, [r3, #0]
 800b3de:	e002      	b.n	800b3e6 <_printf_i+0x1d2>
 800b3e0:	0670      	lsls	r0, r6, #25
 800b3e2:	d5fb      	bpl.n	800b3dc <_printf_i+0x1c8>
 800b3e4:	8019      	strh	r1, [r3, #0]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6123      	str	r3, [r4, #16]
 800b3ea:	4615      	mov	r5, r2
 800b3ec:	e7ba      	b.n	800b364 <_printf_i+0x150>
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	1d1a      	adds	r2, r3, #4
 800b3f2:	602a      	str	r2, [r5, #0]
 800b3f4:	681d      	ldr	r5, [r3, #0]
 800b3f6:	6862      	ldr	r2, [r4, #4]
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f7f4 fec8 	bl	8000190 <memchr>
 800b400:	b108      	cbz	r0, 800b406 <_printf_i+0x1f2>
 800b402:	1b40      	subs	r0, r0, r5
 800b404:	6060      	str	r0, [r4, #4]
 800b406:	6863      	ldr	r3, [r4, #4]
 800b408:	6123      	str	r3, [r4, #16]
 800b40a:	2300      	movs	r3, #0
 800b40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b410:	e7a8      	b.n	800b364 <_printf_i+0x150>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	462a      	mov	r2, r5
 800b416:	4649      	mov	r1, r9
 800b418:	4640      	mov	r0, r8
 800b41a:	47d0      	blx	sl
 800b41c:	3001      	adds	r0, #1
 800b41e:	d0ab      	beq.n	800b378 <_printf_i+0x164>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	079b      	lsls	r3, r3, #30
 800b424:	d413      	bmi.n	800b44e <_printf_i+0x23a>
 800b426:	68e0      	ldr	r0, [r4, #12]
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	4298      	cmp	r0, r3
 800b42c:	bfb8      	it	lt
 800b42e:	4618      	movlt	r0, r3
 800b430:	e7a4      	b.n	800b37c <_printf_i+0x168>
 800b432:	2301      	movs	r3, #1
 800b434:	4632      	mov	r2, r6
 800b436:	4649      	mov	r1, r9
 800b438:	4640      	mov	r0, r8
 800b43a:	47d0      	blx	sl
 800b43c:	3001      	adds	r0, #1
 800b43e:	d09b      	beq.n	800b378 <_printf_i+0x164>
 800b440:	3501      	adds	r5, #1
 800b442:	68e3      	ldr	r3, [r4, #12]
 800b444:	9903      	ldr	r1, [sp, #12]
 800b446:	1a5b      	subs	r3, r3, r1
 800b448:	42ab      	cmp	r3, r5
 800b44a:	dcf2      	bgt.n	800b432 <_printf_i+0x21e>
 800b44c:	e7eb      	b.n	800b426 <_printf_i+0x212>
 800b44e:	2500      	movs	r5, #0
 800b450:	f104 0619 	add.w	r6, r4, #25
 800b454:	e7f5      	b.n	800b442 <_printf_i+0x22e>
 800b456:	bf00      	nop
 800b458:	0800be59 	.word	0x0800be59
 800b45c:	0800be6a 	.word	0x0800be6a

0800b460 <_sbrk_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	4d06      	ldr	r5, [pc, #24]	; (800b47c <_sbrk_r+0x1c>)
 800b464:	2300      	movs	r3, #0
 800b466:	4604      	mov	r4, r0
 800b468:	4608      	mov	r0, r1
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	f7f7 f918 	bl	80026a0 <_sbrk>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d102      	bne.n	800b47a <_sbrk_r+0x1a>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	b103      	cbz	r3, 800b47a <_sbrk_r+0x1a>
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	20000e88 	.word	0x20000e88

0800b480 <__sread>:
 800b480:	b510      	push	{r4, lr}
 800b482:	460c      	mov	r4, r1
 800b484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b488:	f000 fab2 	bl	800b9f0 <_read_r>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	bfab      	itete	ge
 800b490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b492:	89a3      	ldrhlt	r3, [r4, #12]
 800b494:	181b      	addge	r3, r3, r0
 800b496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b49a:	bfac      	ite	ge
 800b49c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b49e:	81a3      	strhlt	r3, [r4, #12]
 800b4a0:	bd10      	pop	{r4, pc}

0800b4a2 <__swrite>:
 800b4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a6:	461f      	mov	r7, r3
 800b4a8:	898b      	ldrh	r3, [r1, #12]
 800b4aa:	05db      	lsls	r3, r3, #23
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	4616      	mov	r6, r2
 800b4b2:	d505      	bpl.n	800b4c0 <__swrite+0x1e>
 800b4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f000 f9c8 	bl	800b850 <_lseek_r>
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4ca:	81a3      	strh	r3, [r4, #12]
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d6:	f000 b869 	b.w	800b5ac <_write_r>

0800b4da <__sseek>:
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	460c      	mov	r4, r1
 800b4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e2:	f000 f9b5 	bl	800b850 <_lseek_r>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	bf15      	itete	ne
 800b4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4f6:	81a3      	strheq	r3, [r4, #12]
 800b4f8:	bf18      	it	ne
 800b4fa:	81a3      	strhne	r3, [r4, #12]
 800b4fc:	bd10      	pop	{r4, pc}

0800b4fe <__sclose>:
 800b4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b502:	f000 b8d3 	b.w	800b6ac <_close_r>
	...

0800b508 <__swbuf_r>:
 800b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50a:	460e      	mov	r6, r1
 800b50c:	4614      	mov	r4, r2
 800b50e:	4605      	mov	r5, r0
 800b510:	b118      	cbz	r0, 800b51a <__swbuf_r+0x12>
 800b512:	6983      	ldr	r3, [r0, #24]
 800b514:	b90b      	cbnz	r3, 800b51a <__swbuf_r+0x12>
 800b516:	f7ff fb81 	bl	800ac1c <__sinit>
 800b51a:	4b21      	ldr	r3, [pc, #132]	; (800b5a0 <__swbuf_r+0x98>)
 800b51c:	429c      	cmp	r4, r3
 800b51e:	d12b      	bne.n	800b578 <__swbuf_r+0x70>
 800b520:	686c      	ldr	r4, [r5, #4]
 800b522:	69a3      	ldr	r3, [r4, #24]
 800b524:	60a3      	str	r3, [r4, #8]
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	071a      	lsls	r2, r3, #28
 800b52a:	d52f      	bpl.n	800b58c <__swbuf_r+0x84>
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	b36b      	cbz	r3, 800b58c <__swbuf_r+0x84>
 800b530:	6923      	ldr	r3, [r4, #16]
 800b532:	6820      	ldr	r0, [r4, #0]
 800b534:	1ac0      	subs	r0, r0, r3
 800b536:	6963      	ldr	r3, [r4, #20]
 800b538:	b2f6      	uxtb	r6, r6
 800b53a:	4283      	cmp	r3, r0
 800b53c:	4637      	mov	r7, r6
 800b53e:	dc04      	bgt.n	800b54a <__swbuf_r+0x42>
 800b540:	4621      	mov	r1, r4
 800b542:	4628      	mov	r0, r5
 800b544:	f000 f948 	bl	800b7d8 <_fflush_r>
 800b548:	bb30      	cbnz	r0, 800b598 <__swbuf_r+0x90>
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	60a3      	str	r3, [r4, #8]
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	6022      	str	r2, [r4, #0]
 800b556:	701e      	strb	r6, [r3, #0]
 800b558:	6963      	ldr	r3, [r4, #20]
 800b55a:	3001      	adds	r0, #1
 800b55c:	4283      	cmp	r3, r0
 800b55e:	d004      	beq.n	800b56a <__swbuf_r+0x62>
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	07db      	lsls	r3, r3, #31
 800b564:	d506      	bpl.n	800b574 <__swbuf_r+0x6c>
 800b566:	2e0a      	cmp	r6, #10
 800b568:	d104      	bne.n	800b574 <__swbuf_r+0x6c>
 800b56a:	4621      	mov	r1, r4
 800b56c:	4628      	mov	r0, r5
 800b56e:	f000 f933 	bl	800b7d8 <_fflush_r>
 800b572:	b988      	cbnz	r0, 800b598 <__swbuf_r+0x90>
 800b574:	4638      	mov	r0, r7
 800b576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <__swbuf_r+0x9c>)
 800b57a:	429c      	cmp	r4, r3
 800b57c:	d101      	bne.n	800b582 <__swbuf_r+0x7a>
 800b57e:	68ac      	ldr	r4, [r5, #8]
 800b580:	e7cf      	b.n	800b522 <__swbuf_r+0x1a>
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <__swbuf_r+0xa0>)
 800b584:	429c      	cmp	r4, r3
 800b586:	bf08      	it	eq
 800b588:	68ec      	ldreq	r4, [r5, #12]
 800b58a:	e7ca      	b.n	800b522 <__swbuf_r+0x1a>
 800b58c:	4621      	mov	r1, r4
 800b58e:	4628      	mov	r0, r5
 800b590:	f000 f81e 	bl	800b5d0 <__swsetup_r>
 800b594:	2800      	cmp	r0, #0
 800b596:	d0cb      	beq.n	800b530 <__swbuf_r+0x28>
 800b598:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b59c:	e7ea      	b.n	800b574 <__swbuf_r+0x6c>
 800b59e:	bf00      	nop
 800b5a0:	0800be08 	.word	0x0800be08
 800b5a4:	0800be28 	.word	0x0800be28
 800b5a8:	0800bde8 	.word	0x0800bde8

0800b5ac <_write_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d07      	ldr	r5, [pc, #28]	; (800b5cc <_write_r+0x20>)
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	4608      	mov	r0, r1
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	602a      	str	r2, [r5, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f7f7 f81f 	bl	80025fe <_write>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d102      	bne.n	800b5ca <_write_r+0x1e>
 800b5c4:	682b      	ldr	r3, [r5, #0]
 800b5c6:	b103      	cbz	r3, 800b5ca <_write_r+0x1e>
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	20000e88 	.word	0x20000e88

0800b5d0 <__swsetup_r>:
 800b5d0:	4b32      	ldr	r3, [pc, #200]	; (800b69c <__swsetup_r+0xcc>)
 800b5d2:	b570      	push	{r4, r5, r6, lr}
 800b5d4:	681d      	ldr	r5, [r3, #0]
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460c      	mov	r4, r1
 800b5da:	b125      	cbz	r5, 800b5e6 <__swsetup_r+0x16>
 800b5dc:	69ab      	ldr	r3, [r5, #24]
 800b5de:	b913      	cbnz	r3, 800b5e6 <__swsetup_r+0x16>
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f7ff fb1b 	bl	800ac1c <__sinit>
 800b5e6:	4b2e      	ldr	r3, [pc, #184]	; (800b6a0 <__swsetup_r+0xd0>)
 800b5e8:	429c      	cmp	r4, r3
 800b5ea:	d10f      	bne.n	800b60c <__swsetup_r+0x3c>
 800b5ec:	686c      	ldr	r4, [r5, #4]
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f4:	0719      	lsls	r1, r3, #28
 800b5f6:	d42c      	bmi.n	800b652 <__swsetup_r+0x82>
 800b5f8:	06dd      	lsls	r5, r3, #27
 800b5fa:	d411      	bmi.n	800b620 <__swsetup_r+0x50>
 800b5fc:	2309      	movs	r3, #9
 800b5fe:	6033      	str	r3, [r6, #0]
 800b600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b60a:	e03e      	b.n	800b68a <__swsetup_r+0xba>
 800b60c:	4b25      	ldr	r3, [pc, #148]	; (800b6a4 <__swsetup_r+0xd4>)
 800b60e:	429c      	cmp	r4, r3
 800b610:	d101      	bne.n	800b616 <__swsetup_r+0x46>
 800b612:	68ac      	ldr	r4, [r5, #8]
 800b614:	e7eb      	b.n	800b5ee <__swsetup_r+0x1e>
 800b616:	4b24      	ldr	r3, [pc, #144]	; (800b6a8 <__swsetup_r+0xd8>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	bf08      	it	eq
 800b61c:	68ec      	ldreq	r4, [r5, #12]
 800b61e:	e7e6      	b.n	800b5ee <__swsetup_r+0x1e>
 800b620:	0758      	lsls	r0, r3, #29
 800b622:	d512      	bpl.n	800b64a <__swsetup_r+0x7a>
 800b624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b626:	b141      	cbz	r1, 800b63a <__swsetup_r+0x6a>
 800b628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b62c:	4299      	cmp	r1, r3
 800b62e:	d002      	beq.n	800b636 <__swsetup_r+0x66>
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f991 	bl	800b958 <_free_r>
 800b636:	2300      	movs	r3, #0
 800b638:	6363      	str	r3, [r4, #52]	; 0x34
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	2300      	movs	r3, #0
 800b644:	6063      	str	r3, [r4, #4]
 800b646:	6923      	ldr	r3, [r4, #16]
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f043 0308 	orr.w	r3, r3, #8
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	b94b      	cbnz	r3, 800b66a <__swsetup_r+0x9a>
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b660:	d003      	beq.n	800b66a <__swsetup_r+0x9a>
 800b662:	4621      	mov	r1, r4
 800b664:	4630      	mov	r0, r6
 800b666:	f000 f92b 	bl	800b8c0 <__smakebuf_r>
 800b66a:	89a0      	ldrh	r0, [r4, #12]
 800b66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b670:	f010 0301 	ands.w	r3, r0, #1
 800b674:	d00a      	beq.n	800b68c <__swsetup_r+0xbc>
 800b676:	2300      	movs	r3, #0
 800b678:	60a3      	str	r3, [r4, #8]
 800b67a:	6963      	ldr	r3, [r4, #20]
 800b67c:	425b      	negs	r3, r3
 800b67e:	61a3      	str	r3, [r4, #24]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	b943      	cbnz	r3, 800b696 <__swsetup_r+0xc6>
 800b684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b688:	d1ba      	bne.n	800b600 <__swsetup_r+0x30>
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
 800b68c:	0781      	lsls	r1, r0, #30
 800b68e:	bf58      	it	pl
 800b690:	6963      	ldrpl	r3, [r4, #20]
 800b692:	60a3      	str	r3, [r4, #8]
 800b694:	e7f4      	b.n	800b680 <__swsetup_r+0xb0>
 800b696:	2000      	movs	r0, #0
 800b698:	e7f7      	b.n	800b68a <__swsetup_r+0xba>
 800b69a:	bf00      	nop
 800b69c:	20000028 	.word	0x20000028
 800b6a0:	0800be08 	.word	0x0800be08
 800b6a4:	0800be28 	.word	0x0800be28
 800b6a8:	0800bde8 	.word	0x0800bde8

0800b6ac <_close_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d06      	ldr	r5, [pc, #24]	; (800b6c8 <_close_r+0x1c>)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	f7f6 ffbd 	bl	8002636 <_close>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_close_r+0x1a>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_close_r+0x1a>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	20000e88 	.word	0x20000e88

0800b6cc <__sflush_r>:
 800b6cc:	898a      	ldrh	r2, [r1, #12]
 800b6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	0710      	lsls	r0, r2, #28
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	d458      	bmi.n	800b78c <__sflush_r+0xc0>
 800b6da:	684b      	ldr	r3, [r1, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dc05      	bgt.n	800b6ec <__sflush_r+0x20>
 800b6e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	dc02      	bgt.n	800b6ec <__sflush_r+0x20>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d0f9      	beq.n	800b6e6 <__sflush_r+0x1a>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6f8:	682f      	ldr	r7, [r5, #0]
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	d032      	beq.n	800b764 <__sflush_r+0x98>
 800b6fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	075a      	lsls	r2, r3, #29
 800b704:	d505      	bpl.n	800b712 <__sflush_r+0x46>
 800b706:	6863      	ldr	r3, [r4, #4]
 800b708:	1ac0      	subs	r0, r0, r3
 800b70a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b70c:	b10b      	cbz	r3, 800b712 <__sflush_r+0x46>
 800b70e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b710:	1ac0      	subs	r0, r0, r3
 800b712:	2300      	movs	r3, #0
 800b714:	4602      	mov	r2, r0
 800b716:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b718:	6a21      	ldr	r1, [r4, #32]
 800b71a:	4628      	mov	r0, r5
 800b71c:	47b0      	blx	r6
 800b71e:	1c43      	adds	r3, r0, #1
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	d106      	bne.n	800b732 <__sflush_r+0x66>
 800b724:	6829      	ldr	r1, [r5, #0]
 800b726:	291d      	cmp	r1, #29
 800b728:	d82c      	bhi.n	800b784 <__sflush_r+0xb8>
 800b72a:	4a2a      	ldr	r2, [pc, #168]	; (800b7d4 <__sflush_r+0x108>)
 800b72c:	40ca      	lsrs	r2, r1
 800b72e:	07d6      	lsls	r6, r2, #31
 800b730:	d528      	bpl.n	800b784 <__sflush_r+0xb8>
 800b732:	2200      	movs	r2, #0
 800b734:	6062      	str	r2, [r4, #4]
 800b736:	04d9      	lsls	r1, r3, #19
 800b738:	6922      	ldr	r2, [r4, #16]
 800b73a:	6022      	str	r2, [r4, #0]
 800b73c:	d504      	bpl.n	800b748 <__sflush_r+0x7c>
 800b73e:	1c42      	adds	r2, r0, #1
 800b740:	d101      	bne.n	800b746 <__sflush_r+0x7a>
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	b903      	cbnz	r3, 800b748 <__sflush_r+0x7c>
 800b746:	6560      	str	r0, [r4, #84]	; 0x54
 800b748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b74a:	602f      	str	r7, [r5, #0]
 800b74c:	2900      	cmp	r1, #0
 800b74e:	d0ca      	beq.n	800b6e6 <__sflush_r+0x1a>
 800b750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b754:	4299      	cmp	r1, r3
 800b756:	d002      	beq.n	800b75e <__sflush_r+0x92>
 800b758:	4628      	mov	r0, r5
 800b75a:	f000 f8fd 	bl	800b958 <_free_r>
 800b75e:	2000      	movs	r0, #0
 800b760:	6360      	str	r0, [r4, #52]	; 0x34
 800b762:	e7c1      	b.n	800b6e8 <__sflush_r+0x1c>
 800b764:	6a21      	ldr	r1, [r4, #32]
 800b766:	2301      	movs	r3, #1
 800b768:	4628      	mov	r0, r5
 800b76a:	47b0      	blx	r6
 800b76c:	1c41      	adds	r1, r0, #1
 800b76e:	d1c7      	bne.n	800b700 <__sflush_r+0x34>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0c4      	beq.n	800b700 <__sflush_r+0x34>
 800b776:	2b1d      	cmp	r3, #29
 800b778:	d001      	beq.n	800b77e <__sflush_r+0xb2>
 800b77a:	2b16      	cmp	r3, #22
 800b77c:	d101      	bne.n	800b782 <__sflush_r+0xb6>
 800b77e:	602f      	str	r7, [r5, #0]
 800b780:	e7b1      	b.n	800b6e6 <__sflush_r+0x1a>
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b788:	81a3      	strh	r3, [r4, #12]
 800b78a:	e7ad      	b.n	800b6e8 <__sflush_r+0x1c>
 800b78c:	690f      	ldr	r7, [r1, #16]
 800b78e:	2f00      	cmp	r7, #0
 800b790:	d0a9      	beq.n	800b6e6 <__sflush_r+0x1a>
 800b792:	0793      	lsls	r3, r2, #30
 800b794:	680e      	ldr	r6, [r1, #0]
 800b796:	bf08      	it	eq
 800b798:	694b      	ldreq	r3, [r1, #20]
 800b79a:	600f      	str	r7, [r1, #0]
 800b79c:	bf18      	it	ne
 800b79e:	2300      	movne	r3, #0
 800b7a0:	eba6 0807 	sub.w	r8, r6, r7
 800b7a4:	608b      	str	r3, [r1, #8]
 800b7a6:	f1b8 0f00 	cmp.w	r8, #0
 800b7aa:	dd9c      	ble.n	800b6e6 <__sflush_r+0x1a>
 800b7ac:	6a21      	ldr	r1, [r4, #32]
 800b7ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7b0:	4643      	mov	r3, r8
 800b7b2:	463a      	mov	r2, r7
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b0      	blx	r6
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	dc06      	bgt.n	800b7ca <__sflush_r+0xfe>
 800b7bc:	89a3      	ldrh	r3, [r4, #12]
 800b7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c2:	81a3      	strh	r3, [r4, #12]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7c8:	e78e      	b.n	800b6e8 <__sflush_r+0x1c>
 800b7ca:	4407      	add	r7, r0
 800b7cc:	eba8 0800 	sub.w	r8, r8, r0
 800b7d0:	e7e9      	b.n	800b7a6 <__sflush_r+0xda>
 800b7d2:	bf00      	nop
 800b7d4:	20400001 	.word	0x20400001

0800b7d8 <_fflush_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	690b      	ldr	r3, [r1, #16]
 800b7dc:	4605      	mov	r5, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	b913      	cbnz	r3, 800b7e8 <_fflush_r+0x10>
 800b7e2:	2500      	movs	r5, #0
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	b118      	cbz	r0, 800b7f2 <_fflush_r+0x1a>
 800b7ea:	6983      	ldr	r3, [r0, #24]
 800b7ec:	b90b      	cbnz	r3, 800b7f2 <_fflush_r+0x1a>
 800b7ee:	f7ff fa15 	bl	800ac1c <__sinit>
 800b7f2:	4b14      	ldr	r3, [pc, #80]	; (800b844 <_fflush_r+0x6c>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	d11b      	bne.n	800b830 <_fflush_r+0x58>
 800b7f8:	686c      	ldr	r4, [r5, #4]
 800b7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0ef      	beq.n	800b7e2 <_fflush_r+0xa>
 800b802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b804:	07d0      	lsls	r0, r2, #31
 800b806:	d404      	bmi.n	800b812 <_fflush_r+0x3a>
 800b808:	0599      	lsls	r1, r3, #22
 800b80a:	d402      	bmi.n	800b812 <_fflush_r+0x3a>
 800b80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b80e:	f7ff faa3 	bl	800ad58 <__retarget_lock_acquire_recursive>
 800b812:	4628      	mov	r0, r5
 800b814:	4621      	mov	r1, r4
 800b816:	f7ff ff59 	bl	800b6cc <__sflush_r>
 800b81a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b81c:	07da      	lsls	r2, r3, #31
 800b81e:	4605      	mov	r5, r0
 800b820:	d4e0      	bmi.n	800b7e4 <_fflush_r+0xc>
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	059b      	lsls	r3, r3, #22
 800b826:	d4dd      	bmi.n	800b7e4 <_fflush_r+0xc>
 800b828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82a:	f7ff fa96 	bl	800ad5a <__retarget_lock_release_recursive>
 800b82e:	e7d9      	b.n	800b7e4 <_fflush_r+0xc>
 800b830:	4b05      	ldr	r3, [pc, #20]	; (800b848 <_fflush_r+0x70>)
 800b832:	429c      	cmp	r4, r3
 800b834:	d101      	bne.n	800b83a <_fflush_r+0x62>
 800b836:	68ac      	ldr	r4, [r5, #8]
 800b838:	e7df      	b.n	800b7fa <_fflush_r+0x22>
 800b83a:	4b04      	ldr	r3, [pc, #16]	; (800b84c <_fflush_r+0x74>)
 800b83c:	429c      	cmp	r4, r3
 800b83e:	bf08      	it	eq
 800b840:	68ec      	ldreq	r4, [r5, #12]
 800b842:	e7da      	b.n	800b7fa <_fflush_r+0x22>
 800b844:	0800be08 	.word	0x0800be08
 800b848:	0800be28 	.word	0x0800be28
 800b84c:	0800bde8 	.word	0x0800bde8

0800b850 <_lseek_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_lseek_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f6 ff10 	bl	8002684 <_lseek>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_lseek_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_lseek_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	20000e88 	.word	0x20000e88

0800b874 <__swhatbuf_r>:
 800b874:	b570      	push	{r4, r5, r6, lr}
 800b876:	460e      	mov	r6, r1
 800b878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87c:	2900      	cmp	r1, #0
 800b87e:	b096      	sub	sp, #88	; 0x58
 800b880:	4614      	mov	r4, r2
 800b882:	461d      	mov	r5, r3
 800b884:	da08      	bge.n	800b898 <__swhatbuf_r+0x24>
 800b886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	602a      	str	r2, [r5, #0]
 800b88e:	061a      	lsls	r2, r3, #24
 800b890:	d410      	bmi.n	800b8b4 <__swhatbuf_r+0x40>
 800b892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b896:	e00e      	b.n	800b8b6 <__swhatbuf_r+0x42>
 800b898:	466a      	mov	r2, sp
 800b89a:	f000 f8bb 	bl	800ba14 <_fstat_r>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	dbf1      	blt.n	800b886 <__swhatbuf_r+0x12>
 800b8a2:	9a01      	ldr	r2, [sp, #4]
 800b8a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8ac:	425a      	negs	r2, r3
 800b8ae:	415a      	adcs	r2, r3
 800b8b0:	602a      	str	r2, [r5, #0]
 800b8b2:	e7ee      	b.n	800b892 <__swhatbuf_r+0x1e>
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	b016      	add	sp, #88	; 0x58
 800b8bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8c0 <__smakebuf_r>:
 800b8c0:	898b      	ldrh	r3, [r1, #12]
 800b8c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8c4:	079d      	lsls	r5, r3, #30
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	d507      	bpl.n	800b8dc <__smakebuf_r+0x1c>
 800b8cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	6163      	str	r3, [r4, #20]
 800b8d8:	b002      	add	sp, #8
 800b8da:	bd70      	pop	{r4, r5, r6, pc}
 800b8dc:	ab01      	add	r3, sp, #4
 800b8de:	466a      	mov	r2, sp
 800b8e0:	f7ff ffc8 	bl	800b874 <__swhatbuf_r>
 800b8e4:	9900      	ldr	r1, [sp, #0]
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7ff fa57 	bl	800ad9c <_malloc_r>
 800b8ee:	b948      	cbnz	r0, 800b904 <__smakebuf_r+0x44>
 800b8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f4:	059a      	lsls	r2, r3, #22
 800b8f6:	d4ef      	bmi.n	800b8d8 <__smakebuf_r+0x18>
 800b8f8:	f023 0303 	bic.w	r3, r3, #3
 800b8fc:	f043 0302 	orr.w	r3, r3, #2
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	e7e3      	b.n	800b8cc <__smakebuf_r+0xc>
 800b904:	4b0d      	ldr	r3, [pc, #52]	; (800b93c <__smakebuf_r+0x7c>)
 800b906:	62b3      	str	r3, [r6, #40]	; 0x28
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	6020      	str	r0, [r4, #0]
 800b90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b910:	81a3      	strh	r3, [r4, #12]
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	6163      	str	r3, [r4, #20]
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	6120      	str	r0, [r4, #16]
 800b91a:	b15b      	cbz	r3, 800b934 <__smakebuf_r+0x74>
 800b91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b920:	4630      	mov	r0, r6
 800b922:	f000 f889 	bl	800ba38 <_isatty_r>
 800b926:	b128      	cbz	r0, 800b934 <__smakebuf_r+0x74>
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f023 0303 	bic.w	r3, r3, #3
 800b92e:	f043 0301 	orr.w	r3, r3, #1
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	89a0      	ldrh	r0, [r4, #12]
 800b936:	4305      	orrs	r5, r0
 800b938:	81a5      	strh	r5, [r4, #12]
 800b93a:	e7cd      	b.n	800b8d8 <__smakebuf_r+0x18>
 800b93c:	0800abb5 	.word	0x0800abb5

0800b940 <__malloc_lock>:
 800b940:	4801      	ldr	r0, [pc, #4]	; (800b948 <__malloc_lock+0x8>)
 800b942:	f7ff ba09 	b.w	800ad58 <__retarget_lock_acquire_recursive>
 800b946:	bf00      	nop
 800b948:	20000e7c 	.word	0x20000e7c

0800b94c <__malloc_unlock>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__malloc_unlock+0x8>)
 800b94e:	f7ff ba04 	b.w	800ad5a <__retarget_lock_release_recursive>
 800b952:	bf00      	nop
 800b954:	20000e7c 	.word	0x20000e7c

0800b958 <_free_r>:
 800b958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b95a:	2900      	cmp	r1, #0
 800b95c:	d044      	beq.n	800b9e8 <_free_r+0x90>
 800b95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b962:	9001      	str	r0, [sp, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f1a1 0404 	sub.w	r4, r1, #4
 800b96a:	bfb8      	it	lt
 800b96c:	18e4      	addlt	r4, r4, r3
 800b96e:	f7ff ffe7 	bl	800b940 <__malloc_lock>
 800b972:	4a1e      	ldr	r2, [pc, #120]	; (800b9ec <_free_r+0x94>)
 800b974:	9801      	ldr	r0, [sp, #4]
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	b933      	cbnz	r3, 800b988 <_free_r+0x30>
 800b97a:	6063      	str	r3, [r4, #4]
 800b97c:	6014      	str	r4, [r2, #0]
 800b97e:	b003      	add	sp, #12
 800b980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b984:	f7ff bfe2 	b.w	800b94c <__malloc_unlock>
 800b988:	42a3      	cmp	r3, r4
 800b98a:	d908      	bls.n	800b99e <_free_r+0x46>
 800b98c:	6825      	ldr	r5, [r4, #0]
 800b98e:	1961      	adds	r1, r4, r5
 800b990:	428b      	cmp	r3, r1
 800b992:	bf01      	itttt	eq
 800b994:	6819      	ldreq	r1, [r3, #0]
 800b996:	685b      	ldreq	r3, [r3, #4]
 800b998:	1949      	addeq	r1, r1, r5
 800b99a:	6021      	streq	r1, [r4, #0]
 800b99c:	e7ed      	b.n	800b97a <_free_r+0x22>
 800b99e:	461a      	mov	r2, r3
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	b10b      	cbz	r3, 800b9a8 <_free_r+0x50>
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	d9fa      	bls.n	800b99e <_free_r+0x46>
 800b9a8:	6811      	ldr	r1, [r2, #0]
 800b9aa:	1855      	adds	r5, r2, r1
 800b9ac:	42a5      	cmp	r5, r4
 800b9ae:	d10b      	bne.n	800b9c8 <_free_r+0x70>
 800b9b0:	6824      	ldr	r4, [r4, #0]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	1854      	adds	r4, r2, r1
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	6011      	str	r1, [r2, #0]
 800b9ba:	d1e0      	bne.n	800b97e <_free_r+0x26>
 800b9bc:	681c      	ldr	r4, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	6053      	str	r3, [r2, #4]
 800b9c2:	4421      	add	r1, r4
 800b9c4:	6011      	str	r1, [r2, #0]
 800b9c6:	e7da      	b.n	800b97e <_free_r+0x26>
 800b9c8:	d902      	bls.n	800b9d0 <_free_r+0x78>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	e7d6      	b.n	800b97e <_free_r+0x26>
 800b9d0:	6825      	ldr	r5, [r4, #0]
 800b9d2:	1961      	adds	r1, r4, r5
 800b9d4:	428b      	cmp	r3, r1
 800b9d6:	bf04      	itt	eq
 800b9d8:	6819      	ldreq	r1, [r3, #0]
 800b9da:	685b      	ldreq	r3, [r3, #4]
 800b9dc:	6063      	str	r3, [r4, #4]
 800b9de:	bf04      	itt	eq
 800b9e0:	1949      	addeq	r1, r1, r5
 800b9e2:	6021      	streq	r1, [r4, #0]
 800b9e4:	6054      	str	r4, [r2, #4]
 800b9e6:	e7ca      	b.n	800b97e <_free_r+0x26>
 800b9e8:	b003      	add	sp, #12
 800b9ea:	bd30      	pop	{r4, r5, pc}
 800b9ec:	20000e80 	.word	0x20000e80

0800b9f0 <_read_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	; (800ba10 <_read_r+0x20>)
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	602a      	str	r2, [r5, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f7f6 fde0 	bl	80025c4 <_read>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_read_r+0x1e>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_read_r+0x1e>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20000e88 	.word	0x20000e88

0800ba14 <_fstat_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	; (800ba34 <_fstat_r+0x20>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f6 fe14 	bl	800264e <_fstat>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_fstat_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_fstat_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	20000e88 	.word	0x20000e88

0800ba38 <_isatty_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d06      	ldr	r5, [pc, #24]	; (800ba54 <_isatty_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f6 fe13 	bl	800266e <_isatty>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_isatty_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_isatty_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	20000e88 	.word	0x20000e88

0800ba58 <_init>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	bf00      	nop
 800ba5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5e:	bc08      	pop	{r3}
 800ba60:	469e      	mov	lr, r3
 800ba62:	4770      	bx	lr

0800ba64 <_fini>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	bf00      	nop
 800ba68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6a:	bc08      	pop	{r3}
 800ba6c:	469e      	mov	lr, r3
 800ba6e:	4770      	bx	lr
